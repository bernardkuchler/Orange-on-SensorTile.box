
SensorTile.box-RandomForest_Hoja.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018acc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014258  08018ca0  08018ca0  00028ca0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cef8  0802cef8  00040a60  2**0
                  CONTENTS
  4 .ARM          00000000  0802cef8  0802cef8  00040a60  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802cef8  0802cef8  00040a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802cef8  0802cef8  0003cef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802cefc  0802cefc  0003cefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a60  20000000  0802cf00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030e0  20000a60  0802d960  00040a60  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20003b40  0802d960  00043b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a60  2**0
                  CONTENTS, READONLY
 12 .debug_info   000319a6  00000000  00000000  00040a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068c0  00000000  00000000  00072436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002948  00000000  00000000  00078cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002618  00000000  00000000  0007b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003eac9  00000000  00000000  0007dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e8a2  00000000  00000000  000bc721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015a3a2  00000000  00000000  000fafc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00255365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd1c  00000000  00000000  002553b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  002610d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00261170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000a60 	.word	0x20000a60
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018c74 	.word	0x08018c74

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000a64 	.word	0x20000a64
 80001fc:	08018c74 	.word	0x08018c74

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2c:	f001 faa7 	bl	800217e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c30:	f000 f828 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c34:	f000 fc0e 	bl	8001454 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c38:	f000 fbe2 	bl	8001400 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c3c:	f000 f880 	bl	8000d40 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000c40:	f000 f908 	bl	8000e54 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000c44:	f000 f96a 	bl	8000f1c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c48:	f000 f9a8 	bl	8000f9c <MX_I2C3_Init>
  MX_RTC_Init();
 8000c4c:	f000 f9e6 	bl	800101c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000c50:	f000 fa40 	bl	80010d4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000c54:	f000 fa60 	bl	8001118 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c58:	f000 fa9c 	bl	8001194 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000c5c:	f000 fad8 	bl	8001210 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000c60:	f000 fb14 	bl	800128c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000c64:	f000 fb60 	bl	8001328 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c68:	f000 fb94 	bl	8001394 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000c6c:	f00c fad8 	bl	800d220 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000c70:	f011 fe9a 	bl	80129a8 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000c74:	f000 f8cc 	bl	8000e10 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000c78:	f013 fd4e 	bl	8014718 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000c7c:	f013 fe9c 	bl	80149b8 <MX_X_CUBE_AI_Process>
 8000c80:	e7fc      	b.n	8000c7c <main+0x54>
	...

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b096      	sub	sp, #88	; 0x58
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	2244      	movs	r2, #68	; 0x44
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f015 fe82 	bl	801699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f004 fca4 	bl	80055f4 <HAL_PWREx_ControlVoltageScaling>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000cb2:	f000 fd3b 	bl	800172c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cb6:	f004 fc6d 	bl	8005594 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <SystemClock_Config+0xb8>)
 8000cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cc0:	4a1e      	ldr	r2, [pc, #120]	; (8000d3c <SystemClock_Config+0xb8>)
 8000cc2:	f023 0318 	bic.w	r3, r3, #24
 8000cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000cca:	2325      	movs	r3, #37	; 0x25
 8000ccc:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ce8:	233c      	movs	r3, #60	; 0x3c
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000cec:	2305      	movs	r3, #5
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fd3d 	bl	800577c <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d08:	f000 fd10 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2303      	movs	r3, #3
 8000d12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	2105      	movs	r1, #5
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 f943 	bl	8005fb0 <HAL_RCC_ClockConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d30:	f000 fcfc 	bl	800172c <Error_Handler>
  }
}
 8000d34:	bf00      	nop
 8000d36:	3758      	adds	r7, #88	; 0x58
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000

08000d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d58:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <MX_ADC1_Init+0xc8>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dbe:	4811      	ldr	r0, [pc, #68]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000dc0:	f001 fc16 	bl	80025f0 <HAL_ADC_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dca:	f000 fcaf 	bl	800172c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_ADC1_Init+0xcc>)
 8000dd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dda:	237f      	movs	r3, #127	; 0x7f
 8000ddc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dde:	2304      	movs	r3, #4
 8000de0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000dec:	f001 fd4c 	bl	8002888 <HAL_ADC_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000df6:	f000 fc99 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000a7c 	.word	0x20000a7c
 8000e08:	50040000 	.word	0x50040000
 8000e0c:	21800100 	.word	0x21800100

08000e10 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <MX_CRC_Init+0x40>)
 8000e18:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e3a:	f002 fa33 	bl	80032a4 <HAL_CRC_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e44:	f000 fc72 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000ae4 	.word	0x20000ae4
 8000e50:	40023000 	.word	0x40023000

08000e54 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e5a:	4a2d      	ldr	r2, [pc, #180]	; (8000f10 <MX_DFSDM1_Init+0xbc>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e76:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e7a:	22c0      	movs	r2, #192	; 0xc0
 8000e7c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000e84:	4821      	ldr	r0, [pc, #132]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e86:	f002 fbb7 	bl	80035f8 <HAL_DFSDM_FilterInit>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000e90:	f000 fc4c 	bl	800172c <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000e96:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <MX_DFSDM1_Init+0xc4>)
 8000e98:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ee6:	f002 fac7 	bl	8003478 <HAL_DFSDM_ChannelInit>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8000ef0:	f000 fc1c 	bl	800172c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000efa:	f002 fc57 	bl	80037ac <HAL_DFSDM_FilterConfigRegChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8000f04:	f000 fc12 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000b08 	.word	0x20000b08
 8000f10:	40016100 	.word	0x40016100
 8000f14:	20000b5c 	.word	0x20000b5c
 8000f18:	40016000 	.word	0x40016000

08000f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <MX_I2C1_Init+0x78>)
 8000f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <MX_I2C1_Init+0x7c>)
 8000f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f56:	480e      	ldr	r0, [pc, #56]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f58:	f003 f836 	bl	8003fc8 <HAL_I2C_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f62:	f000 fbe3 	bl	800172c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f6a:	f003 f8bc 	bl	80040e6 <HAL_I2CEx_ConfigAnalogFilter>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f74:	f000 fbda 	bl	800172c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f7c:	f003 f8fe 	bl	800417c <HAL_I2CEx_ConfigDigitalFilter>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f86:	f000 fbd1 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000bf4 	.word	0x20000bf4
 8000f94:	40005400 	.word	0x40005400
 8000f98:	00b03fdb 	.word	0x00b03fdb

08000f9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_I2C3_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <MX_I2C3_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fd8:	f002 fff6 	bl	8003fc8 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 fba3 	bl	800172c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fea:	f003 f87c 	bl	80040e6 <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 fb9a 	bl	800172c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_I2C3_Init+0x74>)
 8000ffc:	f003 f8be 	bl	800417c <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 fb91 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000c48 	.word	0x20000c48
 8001014:	40005c00 	.word	0x40005c00
 8001018:	00b03fdb 	.word	0x00b03fdb

0800101c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <MX_RTC_Init+0xb0>)
 8001036:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <MX_RTC_Init+0xb4>)
 8001038:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <MX_RTC_Init+0xb0>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_RTC_Init+0xb0>)
 8001042:	227f      	movs	r2, #127	; 0x7f
 8001044:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_RTC_Init+0xb0>)
 8001048:	22ff      	movs	r2, #255	; 0xff
 800104a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_RTC_Init+0xb0>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_RTC_Init+0xb0>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_RTC_Init+0xb0>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_RTC_Init+0xb0>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <MX_RTC_Init+0xb0>)
 8001066:	f007 f807 	bl	8008078 <HAL_RTC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001070:	f000 fb5c 	bl	800172c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	480f      	ldr	r0, [pc, #60]	; (80010cc <MX_RTC_Init+0xb0>)
 8001090:	f007 f86d 	bl	800816e <HAL_RTC_SetTime>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800109a:	f000 fb47 	bl	800172c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800109e:	2302      	movs	r3, #2
 80010a0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80010a2:	2304      	movs	r3, #4
 80010a4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 80010a6:	2303      	movs	r3, #3
 80010a8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80010aa:	2314      	movs	r3, #20
 80010ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_RTC_Init+0xb0>)
 80010b6:	f007 f8f7 	bl	80082a8 <HAL_RTC_SetDate>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80010c0:	f000 fb34 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000c9c 	.word	0x20000c9c
 80010d0:	40002800 	.word	0x40002800

080010d4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <MX_SDMMC1_SD_Init+0x40>)
 80010dc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 8001100:	2201      	movs	r2, #1
 8001102:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000cc0 	.word	0x20000cc0
 8001114:	50062400 	.word	0x50062400

08001118 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_SPI1_Init+0x74>)
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <MX_SPI1_Init+0x78>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_SPI1_Init+0x74>)
 8001124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_SPI1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_SPI1_Init+0x74>)
 8001132:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001136:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_SPI1_Init+0x74>)
 800113a:	2202      	movs	r2, #2
 800113c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_SPI1_Init+0x74>)
 8001140:	2201      	movs	r2, #1
 8001142:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_SPI1_Init+0x74>)
 8001146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_SPI1_Init+0x74>)
 800114e:	2218      	movs	r2, #24
 8001150:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_SPI1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_SPI1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_SPI1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_SPI1_Init+0x74>)
 8001166:	2207      	movs	r2, #7
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_SPI1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_SPI1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_SPI1_Init+0x74>)
 8001178:	f008 fec9 	bl	8009f0e <HAL_SPI_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001182:	f000 fad3 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000d40 	.word	0x20000d40
 8001190:	40013000 	.word	0x40013000

08001194 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_SPI2_Init+0x74>)
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MX_SPI2_Init+0x78>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_SPI2_Init+0x74>)
 80011a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_SPI2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_SPI2_Init+0x74>)
 80011ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_SPI2_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_SPI2_Init+0x74>)
 80011bc:	2201      	movs	r2, #1
 80011be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_SPI2_Init+0x74>)
 80011c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_SPI2_Init+0x74>)
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_SPI2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_SPI2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_SPI2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_SPI2_Init+0x74>)
 80011e2:	2207      	movs	r2, #7
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_SPI2_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_SPI2_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_SPI2_Init+0x74>)
 80011f4:	f008 fe8b 	bl	8009f0e <HAL_SPI_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011fe:	f000 fa95 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000da4 	.word	0x20000da4
 800120c:	40003800 	.word	0x40003800

08001210 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_SPI3_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <MX_SPI3_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_SPI3_Init+0x74>)
 800121c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001220:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_SPI3_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_SPI3_Init+0x74>)
 800122a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800122e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_SPI3_Init+0x74>)
 8001232:	2202      	movs	r2, #2
 8001234:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_SPI3_Init+0x74>)
 8001238:	2201      	movs	r2, #1
 800123a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_SPI3_Init+0x74>)
 800123e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001242:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_SPI3_Init+0x74>)
 8001246:	2218      	movs	r2, #24
 8001248:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_SPI3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_SPI3_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_SPI3_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_SPI3_Init+0x74>)
 800125e:	2207      	movs	r2, #7
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_SPI3_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_SPI3_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_SPI3_Init+0x74>)
 8001270:	f008 fe4d 	bl	8009f0e <HAL_SPI_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 fa57 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000e08 	.word	0x20000e08
 8001288:	40003c00 	.word	0x40003c00

0800128c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_TIM2_Init+0x98>)
 80012b4:	2277      	movs	r2, #119	; 0x77
 80012b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_TIM2_Init+0x98>)
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_TIM2_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <MX_TIM2_Init+0x98>)
 80012d4:	f009 fa36 	bl	800a744 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012de:	f000 fa25 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_TIM2_Init+0x98>)
 80012f0:	f009 fb9e 	bl	800aa30 <HAL_TIM_ConfigClockSource>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012fa:	f000 fa17 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_TIM2_Init+0x98>)
 800130c:	f009 fdc0 	bl	800ae90 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001316:	f000 fa09 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000e6c 	.word	0x20000e6c

08001328 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_TIM6_Init+0x64>)
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <MX_TIM6_Init+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_TIM6_Init+0x64>)
 8001340:	2277      	movs	r2, #119	; 0x77
 8001342:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_TIM6_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_TIM6_Init+0x64>)
 800134c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001350:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_TIM6_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_TIM6_Init+0x64>)
 800135a:	f009 f9f3 	bl	800a744 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001364:	f000 f9e2 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_TIM6_Init+0x64>)
 8001376:	f009 fd8b 	bl	800ae90 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001380:	f000 f9d4 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000eb8 	.word	0x20000eb8
 8001390:	40001000 	.word	0x40001000

08001394 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <MX_TIM7_Init+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013ac:	2277      	movs	r2, #119	; 0x77
 80013ae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013bc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013c6:	f009 f9bd 	bl	800a744 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80013d0:	f000 f9ac 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013e2:	f009 fd55 	bl	800ae90 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80013ec:	f000 f99e 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000f04 	.word	0x20000f04
 80013fc:	40001400 	.word	0x40001400

08001400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_DMA_Init+0x50>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <MX_DMA_Init+0x50>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6493      	str	r3, [r2, #72]	; 0x48
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_DMA_Init+0x50>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_DMA_Init+0x50>)
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <MX_DMA_Init+0x50>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6493      	str	r3, [r2, #72]	; 0x48
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_DMA_Init+0x50>)
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	200e      	movs	r0, #14
 800143c:	f001 fefb 	bl	8003236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001440:	200e      	movs	r0, #14
 8001442:	f001 ff14 	bl	800326e <HAL_NVIC_EnableIRQ>

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4ba9      	ldr	r3, [pc, #676]	; (8001710 <MX_GPIO_Init+0x2bc>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4aa8      	ldr	r2, [pc, #672]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4ba6      	ldr	r3, [pc, #664]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4ba3      	ldr	r3, [pc, #652]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4aa2      	ldr	r2, [pc, #648]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b9d      	ldr	r3, [pc, #628]	; (8001710 <MX_GPIO_Init+0x2bc>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a9c      	ldr	r2, [pc, #624]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b9a      	ldr	r3, [pc, #616]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	4b97      	ldr	r3, [pc, #604]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a96      	ldr	r2, [pc, #600]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b94      	ldr	r3, [pc, #592]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b91      	ldr	r3, [pc, #580]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a90      	ldr	r2, [pc, #576]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b8e      	ldr	r3, [pc, #568]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e2:	4b8b      	ldr	r3, [pc, #556]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a8a      	ldr	r2, [pc, #552]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014e8:	f043 0320 	orr.w	r3, r3, #32
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b88      	ldr	r3, [pc, #544]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fa:	4b85      	ldr	r3, [pc, #532]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a84      	ldr	r2, [pc, #528]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b82      	ldr	r3, [pc, #520]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001512:	f004 f923 	bl	800575c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a7d      	ldr	r2, [pc, #500]	; (8001710 <MX_GPIO_Init+0x2bc>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f002 fd2e 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 800153c:	2201      	movs	r2, #1
 800153e:	f641 4130 	movw	r1, #7216	; 0x1c30
 8001542:	4874      	ldr	r0, [pc, #464]	; (8001714 <MX_GPIO_Init+0x2c0>)
 8001544:	f002 fd28 	bl	8003f98 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2105      	movs	r1, #5
 800154c:	4872      	ldr	r0, [pc, #456]	; (8001718 <MX_GPIO_Init+0x2c4>)
 800154e:	f002 fd23 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4870      	ldr	r0, [pc, #448]	; (800171c <MX_GPIO_Init+0x2c8>)
 800155a:	f002 fd1d 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	486d      	ldr	r0, [pc, #436]	; (8001718 <MX_GPIO_Init+0x2c4>)
 8001564:	f002 fd18 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2110      	movs	r1, #16
 800156c:	486b      	ldr	r0, [pc, #428]	; (800171c <MX_GPIO_Init+0x2c8>)
 800156e:	f002 fd13 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001578:	4869      	ldr	r0, [pc, #420]	; (8001720 <MX_GPIO_Init+0x2cc>)
 800157a:	f002 fd0d 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 800157e:	2348      	movs	r3, #72	; 0x48
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001582:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	4860      	ldr	r0, [pc, #384]	; (8001714 <MX_GPIO_Init+0x2c0>)
 8001594:	f002 fb56 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a8:	2307      	movs	r3, #7
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	485c      	ldr	r0, [pc, #368]	; (8001724 <MX_GPIO_Init+0x2d0>)
 80015b4:	f002 fb46 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 80015b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015be:	2311      	movs	r3, #17
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d4:	f002 fb36 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 80015d8:	2330      	movs	r3, #48	; 0x30
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4849      	ldr	r0, [pc, #292]	; (8001714 <MX_GPIO_Init+0x2c0>)
 80015f0:	f002 fb28 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 80015f4:	2385      	movs	r3, #133	; 0x85
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	4843      	ldr	r0, [pc, #268]	; (8001718 <MX_GPIO_Init+0x2c4>)
 800160c:	f002 fb1a 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8001610:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	483c      	ldr	r0, [pc, #240]	; (800171c <MX_GPIO_Init+0x2c8>)
 800162a:	f002 fb0b 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 800162e:	2308      	movs	r3, #8
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	4836      	ldr	r0, [pc, #216]	; (800171c <MX_GPIO_Init+0x2c8>)
 8001642:	f002 faff 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8001646:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800164c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	4831      	ldr	r0, [pc, #196]	; (8001724 <MX_GPIO_Init+0x2d0>)
 800165e:	f002 faf1 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8001662:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001668:	2311      	movs	r3, #17
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	4826      	ldr	r0, [pc, #152]	; (8001714 <MX_GPIO_Init+0x2c0>)
 800167c:	f002 fae2 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8001680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4821      	ldr	r0, [pc, #132]	; (8001720 <MX_GPIO_Init+0x2cc>)
 800169a:	f002 fad3 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 800169e:	2320      	movs	r3, #32
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	481d      	ldr	r0, [pc, #116]	; (8001728 <MX_GPIO_Init+0x2d4>)
 80016b4:	f002 fac6 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 80016b8:	2304      	movs	r3, #4
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f002 fab8 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <MX_GPIO_Init+0x2cc>)
 80016ea:	f002 faab 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 80016ee:	2302      	movs	r3, #2
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_GPIO_Init+0x2c8>)
 8001704:	f002 fa9e 	bl	8003c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001708:	bf00      	nop
 800170a:	3738      	adds	r7, #56	; 0x38
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	48001000 	.word	0x48001000
 8001718:	48001400 	.word	0x48001400
 800171c:	48001800 	.word	0x48001800
 8001720:	48000400 	.word	0x48000400
 8001724:	48000c00 	.word	0x48000c00
 8001728:	48000800 	.word	0x48000800

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_MspInit+0x44>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_MspInit+0x44>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_MspInit+0x44>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_MspInit+0x44>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0b2      	sub	sp, #200	; 0xc8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001798:	f107 0318 	add.w	r3, r7, #24
 800179c:	229c      	movs	r2, #156	; 0x9c
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f015 f8fb 	bl	801699c <memset>
  if(hadc->Instance==ADC1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a35      	ldr	r2, [pc, #212]	; (8001880 <HAL_ADC_MspInit+0x100>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d162      	bne.n	8001876 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80017be:	2303      	movs	r3, #3
 80017c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80017c2:	2305      	movs	r3, #5
 80017c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80017c6:	2360      	movs	r3, #96	; 0x60
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80017ce:	2304      	movs	r3, #4
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80017d2:	2304      	movs	r3, #4
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	f107 0318 	add.w	r3, r7, #24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fe9f 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80017ec:	f7ff ff9e 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_ADC_MspInit+0x104>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	4a23      	ldr	r2, [pc, #140]	; (8001884 <HAL_ADC_MspInit+0x104>)
 80017f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_ADC_MspInit+0x104>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_ADC_MspInit+0x104>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_ADC_MspInit+0x104>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_ADC_MspInit+0x104>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_ADC_MspInit+0x104>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_ADC_MspInit+0x104>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_ADC_MspInit+0x104>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8001838:	2310      	movs	r3, #16
 800183a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800183e:	230b      	movs	r3, #11
 8001840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800184e:	4619      	mov	r1, r3
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <HAL_ADC_MspInit+0x108>)
 8001852:	f002 f9f7 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8001856:	2308      	movs	r3, #8
 8001858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800185c:	230b      	movs	r3, #11
 800185e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001872:	f002 f9e7 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	37c8      	adds	r7, #200	; 0xc8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	50040000 	.word	0x50040000
 8001884:	40021000 	.word	0x40021000
 8001888:	48000800 	.word	0x48000800

0800188c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_CRC_MspInit+0x38>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10b      	bne.n	80018b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_CRC_MspInit+0x3c>)
 80018a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <HAL_CRC_MspInit+0x3c>)
 80018a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018a8:	6493      	str	r3, [r2, #72]	; 0x48
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_CRC_MspInit+0x3c>)
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023000 	.word	0x40023000
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0aa      	sub	sp, #168	; 0xa8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	229c      	movs	r2, #156	; 0x9c
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f015 f85d 	bl	801699c <memset>
  if(DFSDM1_Init == 0)
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_DFSDM_FilterMspInit+0xe8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d129      	bne.n	800193e <HAL_DFSDM_FilterMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80018ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 fe12 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 8001906:	f7ff ff11 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800190a:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_DFSDM_FilterMspInit+0xec>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <HAL_DFSDM_FilterMspInit+0xec>)
 8001912:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_DFSDM_FilterMspInit+0xec>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10b      	bne.n	8001934 <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_DFSDM_FilterMspInit+0xf0>)
 800191e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001920:	4a26      	ldr	r2, [pc, #152]	; (80019bc <HAL_DFSDM_FilterMspInit+0xf0>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	6613      	str	r3, [r2, #96]	; 0x60
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_DFSDM_FilterMspInit+0xf0>)
 800192a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_DFSDM_FilterMspInit+0xe8>)
 800193c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <HAL_DFSDM_FilterMspInit+0xf4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d131      	bne.n	80019ac <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <HAL_DFSDM_FilterMspInit+0xfc>)
 800194c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001950:	2256      	movs	r2, #86	; 0x56
 8001952:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196c:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001974:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001978:	2220      	movs	r2, #32
 800197a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800197e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001982:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001984:	480f      	ldr	r0, [pc, #60]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001986:	f001 ffa3 	bl	80038d0 <HAL_DMA_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 8001990:	f7ff fecc 	bl	800172c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80019ac:	bf00      	nop
 80019ae:	37a8      	adds	r7, #168	; 0xa8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000f54 	.word	0x20000f54
 80019b8:	20000f50 	.word	0x20000f50
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40016100 	.word	0x40016100
 80019c4:	20000b94 	.word	0x20000b94
 80019c8:	40020044 	.word	0x40020044

080019cc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0aa      	sub	sp, #168	; 0xa8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	229c      	movs	r2, #156	; 0x9c
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f014 ffdd 	bl	801699c <memset>
  if(DFSDM1_Init == 0)
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d129      	bne.n	8001a3e <HAL_DFSDM_ChannelMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80019ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fd92 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 8001a06:	f7ff fe91 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d10b      	bne.n	8001a34 <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	6613      	str	r3, [r2, #96]	; 0x60
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001a3c:	6013      	str	r3, [r2, #0]
  }

}
 8001a3e:	bf00      	nop
 8001a40:	37a8      	adds	r7, #168	; 0xa8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000f54 	.word	0x20000f54
 8001a4c:	20000f50 	.word	0x20000f50
 8001a50:	40021000 	.word	0x40021000

08001a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b0b2      	sub	sp, #200	; 0xc8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	229c      	movs	r2, #156	; 0x9c
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f014 ff91 	bl	801699c <memset>
  if(hi2c->Instance==I2C1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a43      	ldr	r2, [pc, #268]	; (8001b8c <HAL_I2C_MspInit+0x138>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d13b      	bne.n	8001afc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f004 fd47 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a9c:	f7ff fe46 	bl	800172c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	4a3a      	ldr	r2, [pc, #232]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8001ab8:	23c0      	movs	r3, #192	; 0xc0
 8001aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abe:	2312      	movs	r3, #18
 8001ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ada:	4619      	mov	r1, r3
 8001adc:	482d      	ldr	r0, [pc, #180]	; (8001b94 <HAL_I2C_MspInit+0x140>)
 8001ade:	f002 f8b1 	bl	8003c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aec:	6593      	str	r3, [r2, #88]	; 0x58
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001afa:	e043      	b.n	8001b84 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <HAL_I2C_MspInit+0x144>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d13e      	bne.n	8001b84 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 fd05 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001b20:	f7ff fe04 	bl	800172c <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001b3c:	f003 fe0e 	bl	800575c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001b40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b48:	2312      	movs	r3, #18
 8001b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <HAL_I2C_MspInit+0x148>)
 8001b68:	f002 f86c 	bl	8003c44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b76:	6593      	str	r3, [r2, #88]	; 0x58
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
}
 8001b84:	bf00      	nop
 8001b86:	37c8      	adds	r7, #200	; 0xc8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40005400 	.word	0x40005400
 8001b90:	40021000 	.word	0x40021000
 8001b94:	48000400 	.word	0x48000400
 8001b98:	40005c00 	.word	0x40005c00
 8001b9c:	48001800 	.word	0x48001800

08001ba0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0aa      	sub	sp, #168	; 0xa8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	229c      	movs	r2, #156	; 0x9c
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f014 fef3 	bl	801699c <memset>
  if(hrtc->Instance==RTC)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <HAL_RTC_MspInit+0x5c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d118      	bne.n	8001bf2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 fca6 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001bde:	f7ff fda5 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_RTC_MspInit+0x60>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <HAL_RTC_MspInit+0x60>)
 8001bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	37a8      	adds	r7, #168	; 0xa8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40002800 	.word	0x40002800
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0b2      	sub	sp, #200	; 0xc8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	229c      	movs	r2, #156	; 0x9c
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f014 feb9 	bl	801699c <memset>
  if(hsd->Instance==SDMMC1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a53      	ldr	r2, [pc, #332]	; (8001d7c <HAL_SD_MspInit+0x178>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	f040 809f 	bne.w	8001d74 <HAL_SD_MspInit+0x170>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001c36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001c3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fc6b 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001c54:	f7ff fd6a 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c58:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	4a48      	ldr	r2, [pc, #288]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	4a42      	ldr	r2, [pc, #264]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7c:	4b40      	ldr	r3, [pc, #256]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c88:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	4a3c      	ldr	r2, [pc, #240]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca0:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	4a36      	ldr	r2, [pc, #216]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 8001cb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4829      	ldr	r0, [pc, #164]	; (8001d84 <HAL_SD_MspInit+0x180>)
 8001ce0:	f001 ffb0 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 8001ce4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cfe:	230c      	movs	r3, #12
 8001d00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481f      	ldr	r0, [pc, #124]	; (8001d88 <HAL_SD_MspInit+0x184>)
 8001d0c:	f001 ff9a 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 8001d10:	2304      	movs	r3, #4
 8001d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d28:	230c      	movs	r3, #12
 8001d2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4815      	ldr	r0, [pc, #84]	; (8001d8c <HAL_SD_MspInit+0x188>)
 8001d36:	f001 ff85 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 8001d3a:	23c0      	movs	r3, #192	; 0xc0
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001d52:	2308      	movs	r3, #8
 8001d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480a      	ldr	r0, [pc, #40]	; (8001d88 <HAL_SD_MspInit+0x184>)
 8001d60:	f001 ff70 	bl	8003c44 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	2031      	movs	r0, #49	; 0x31
 8001d6a:	f001 fa64 	bl	8003236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001d6e:	2031      	movs	r0, #49	; 0x31
 8001d70:	f001 fa7d 	bl	800326e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001d74:	bf00      	nop
 8001d76:	37c8      	adds	r7, #200	; 0xc8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	50062400 	.word	0x50062400
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	48000c00 	.word	0x48000c00

08001d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	; 0x38
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a64      	ldr	r2, [pc, #400]	; (8001f40 <HAL_SPI_MspInit+0x1b0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d13a      	bne.n	8001e28 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001db2:	4b64      	ldr	r3, [pc, #400]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	4a63      	ldr	r2, [pc, #396]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dbe:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc6:	623b      	str	r3, [r7, #32]
 8001dc8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a5d      	ldr	r2, [pc, #372]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 8001de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df4:	2305      	movs	r3, #5
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4852      	ldr	r0, [pc, #328]	; (8001f48 <HAL_SPI_MspInit+0x1b8>)
 8001e00:	f001 ff20 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 8001e04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e16:	2305      	movs	r3, #5
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4849      	ldr	r0, [pc, #292]	; (8001f48 <HAL_SPI_MspInit+0x1b8>)
 8001e22:	f001 ff0f 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e26:	e086      	b.n	8001f36 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a47      	ldr	r2, [pc, #284]	; (8001f4c <HAL_SPI_MspInit+0x1bc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d144      	bne.n	8001ebc <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e32:	4b44      	ldr	r3, [pc, #272]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	4a43      	ldr	r2, [pc, #268]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a3d      	ldr	r2, [pc, #244]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a37      	ldr	r2, [pc, #220]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	482e      	ldr	r0, [pc, #184]	; (8001f50 <HAL_SPI_MspInit+0x1c0>)
 8001e96:	f001 fed5 	bl	8003c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eaa:	2305      	movs	r3, #5
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4827      	ldr	r0, [pc, #156]	; (8001f54 <HAL_SPI_MspInit+0x1c4>)
 8001eb6:	f001 fec5 	bl	8003c44 <HAL_GPIO_Init>
}
 8001eba:	e03c      	b.n	8001f36 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <HAL_SPI_MspInit+0x1c8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d137      	bne.n	8001f36 <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8001ef6:	2330      	movs	r3, #48	; 0x30
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f06:	2306      	movs	r3, #6
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4812      	ldr	r0, [pc, #72]	; (8001f5c <HAL_SPI_MspInit+0x1cc>)
 8001f12:	f001 fe97 	bl	8003c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 8001f16:	2308      	movs	r3, #8
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f26:	2306      	movs	r3, #6
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480a      	ldr	r0, [pc, #40]	; (8001f5c <HAL_SPI_MspInit+0x1cc>)
 8001f32:	f001 fe87 	bl	8003c44 <HAL_GPIO_Init>
}
 8001f36:	bf00      	nop
 8001f38:	3738      	adds	r7, #56	; 0x38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40013000 	.word	0x40013000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	48001000 	.word	0x48001000
 8001f4c:	40003800 	.word	0x40003800
 8001f50:	48000c00 	.word	0x48000c00
 8001f54:	48000800 	.word	0x48000800
 8001f58:	40003c00 	.word	0x40003c00
 8001f5c:	48000400 	.word	0x48000400

08001f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d10c      	bne.n	8001f8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f8a:	e02a      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_TIM_Base_MspInit+0x90>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d114      	bne.n	8001fc0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a14      	ldr	r2, [pc, #80]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2036      	movs	r0, #54	; 0x36
 8001fb4:	f001 f93f 	bl	8003236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fb8:	2036      	movs	r0, #54	; 0x36
 8001fba:	f001 f958 	bl	800326e <HAL_NVIC_EnableIRQ>
}
 8001fbe:	e010      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_TIM_Base_MspInit+0x94>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001fd0:	f043 0320 	orr.w	r3, r3, #32
 8001fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40001000 	.word	0x40001000
 8001ff4:	40001400 	.word	0x40001400

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f000 f8f0 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <DMA1_Channel4_IRQHandler+0x10>)
 8002052:	f001 fce5 	bl	8003a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000b94 	.word	0x20000b94

08002060 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <SDMMC1_IRQHandler+0x10>)
 8002066:	f006 fcd5 	bl	8008a14 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000cc0 	.word	0x20000cc0

08002074 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <TIM6_DAC_IRQHandler+0x10>)
 800207a:	f008 fbba 	bl	800a7f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000eb8 	.word	0x20000eb8

08002088 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <OTG_FS_IRQHandler+0x10>)
 800208e:	f002 fa14 	bl	80044ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20002900 	.word	0x20002900

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f014 fc1e 	bl	801690c <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200a0000 	.word	0x200a0000
 80020fc:	00000800 	.word	0x00000800
 8002100:	20000f58 	.word	0x20000f58
 8002104:	20003b40 	.word	0x20003b40

08002108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800212c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002164 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002130:	f7ff ffea 	bl	8002108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <LoopForever+0x6>)
  ldr r1, =_edata
 8002136:	490d      	ldr	r1, [pc, #52]	; (800216c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <LoopForever+0xe>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <LoopForever+0x16>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215a:	f014 fbdd 	bl	8016918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800215e:	f7fe fd63 	bl	8000c28 <main>

08002162 <LoopForever>:

LoopForever:
    b LoopForever
 8002162:	e7fe      	b.n	8002162 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002164:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	20000a60 	.word	0x20000a60
  ldr r2, =_sidata
 8002170:	0802cf00 	.word	0x0802cf00
  ldr r2, =_sbss
 8002174:	20000a60 	.word	0x20000a60
  ldr r4, =_ebss
 8002178:	20003b40 	.word	0x20003b40

0800217c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_IRQHandler>

0800217e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f001 f849 	bl	8003220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800218e:	2000      	movs	r0, #0
 8002190:	f000 f80e 	bl	80021b0 <HAL_InitTick>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	71fb      	strb	r3, [r7, #7]
 800219e:	e001      	b.n	80021a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021a0:	f7ff faca 	bl	8001738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021a4:	79fb      	ldrb	r3, [r7, #7]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_InitTick+0x6c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_InitTick+0x70>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_InitTick+0x6c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 f855 	bl	800328a <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d809      	bhi.n	8002200 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f001 f81f 	bl	8003236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <HAL_InitTick+0x74>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e007      	b.n	8002210 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e004      	b.n	8002210 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e001      	b.n	8002210 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	20000000 	.word	0x20000000
 8002224:	20000004 	.word	0x20000004

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000008 	.word	0x20000008
 800224c:	20000f5c 	.word	0x20000f5c

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000f5c 	.word	0x20000f5c

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008

080022b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3360      	adds	r3, #96	; 0x60
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <LL_ADC_SetOffset+0x44>)
 800233a:	4013      	ands	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	4313      	orrs	r3, r2
 8002348:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	03fff000 	.word	0x03fff000

08002360 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3360      	adds	r3, #96	; 0x60
 800236e:	461a      	mov	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3360      	adds	r3, #96	; 0x60
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	615a      	str	r2, [r3, #20]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3330      	adds	r3, #48	; 0x30
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	4413      	add	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	211f      	movs	r1, #31
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	f003 011f 	and.w	r1, r3, #31
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	431a      	orrs	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3314      	adds	r3, #20
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	0e5b      	lsrs	r3, r3, #25
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	4413      	add	r3, r2
 800245e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	0d1b      	lsrs	r3, r3, #20
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2107      	movs	r1, #7
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	401a      	ands	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0d1b      	lsrs	r3, r3, #20
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	431a      	orrs	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b0:	43db      	mvns	r3, r3
 80024b2:	401a      	ands	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0318 	and.w	r3, r3, #24
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80024bc:	40d9      	lsrs	r1, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	400b      	ands	r3, r1
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	431a      	orrs	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	0007ffff 	.word	0x0007ffff

080024e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6093      	str	r3, [r2, #8]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d101      	bne.n	800251e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800253c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002540:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002568:	d101      	bne.n	800256e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <LL_ADC_IsEnabled+0x18>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <LL_ADC_IsEnabled+0x1a>
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d101      	bne.n	80025ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d101      	bne.n	80025e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e12f      	b.n	800286a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff f8b1 	bl	8001780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff67 	bl	8002504 <LL_ADC_IsDeepPowerDownEnabled>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d004      	beq.n	8002646 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff4d 	bl	80024e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff82 	bl	8002554 <LL_ADC_IsInternalRegulatorEnabled>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff66 	bl	800252c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002660:	4b84      	ldr	r3, [pc, #528]	; (8002874 <HAL_ADC_Init+0x284>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	4a84      	ldr	r2, [pc, #528]	; (8002878 <HAL_ADC_Init+0x288>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	099b      	lsrs	r3, r3, #6
 800266e:	3301      	adds	r3, #1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002674:	e002      	b.n	800267c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3b01      	subs	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f9      	bne.n	8002676 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff64 	bl	8002554 <LL_ADC_IsInternalRegulatorEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f043 0210 	orr.w	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff75 	bl	80025a2 <LL_ADC_REG_IsConversionOngoing>
 80026b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 80c8 	bne.w	8002858 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 80c4 	bne.w	8002858 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026d8:	f043 0202 	orr.w	r2, r3, #2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff49 	bl	800257c <LL_ADC_IsEnabled>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f0:	4862      	ldr	r0, [pc, #392]	; (800287c <HAL_ADC_Init+0x28c>)
 80026f2:	f7ff ff43 	bl	800257c <LL_ADC_IsEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4619      	mov	r1, r3
 8002702:	485f      	ldr	r0, [pc, #380]	; (8002880 <HAL_ADC_Init+0x290>)
 8002704:	f7ff fdd4 	bl	80022b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e5b      	ldrb	r3, [r3, #25]
 800270c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002712:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002718:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800271e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002726:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d106      	bne.n	8002744 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	3b01      	subs	r3, #1
 800273c:	045b      	lsls	r3, r3, #17
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d009      	beq.n	8002760 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_ADC_Init+0x294>)
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	430b      	orrs	r3, r1
 8002772:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff12 	bl	80025a2 <LL_ADC_REG_IsConversionOngoing>
 800277e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff1f 	bl	80025c8 <LL_ADC_INJ_IsConversionOngoing>
 800278a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d140      	bne.n	8002814 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d13d      	bne.n	8002814 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7e1b      	ldrb	r3, [r3, #24]
 80027a0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027a2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ba:	f023 0306 	bic.w	r3, r3, #6
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d118      	bne.n	8002804 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027e8:	4311      	orrs	r1, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027ee:	4311      	orrs	r1, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027f4:	430a      	orrs	r2, r1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	e007      	b.n	8002814 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10c      	bne.n	8002836 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f023 010f 	bic.w	r1, r3, #15
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
 8002834:	e007      	b.n	8002846 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 020f 	bic.w	r2, r2, #15
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f023 0303 	bic.w	r3, r3, #3
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	; 0x58
 8002856:	e007      	b.n	8002868 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f043 0210 	orr.w	r2, r3, #16
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002868:	7ffb      	ldrb	r3, [r7, #31]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000000 	.word	0x20000000
 8002878:	053e2d63 	.word	0x053e2d63
 800287c:	50040000 	.word	0x50040000
 8002880:	50040300 	.word	0x50040300
 8002884:	fff0c007 	.word	0xfff0c007

08002888 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b0b6      	sub	sp, #216	; 0xd8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x22>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e3d5      	b.n	8003056 <HAL_ADC_ConfigChannel+0x7ce>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fe73 	bl	80025a2 <LL_ADC_REG_IsConversionOngoing>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 83ba 	bne.w	8003038 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d824      	bhi.n	8002916 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	3b02      	subs	r3, #2
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d81b      	bhi.n	800290e <HAL_ADC_ConfigChannel+0x86>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <HAL_ADC_ConfigChannel+0x54>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	080028ed 	.word	0x080028ed
 80028e0:	080028f5 	.word	0x080028f5
 80028e4:	080028fd 	.word	0x080028fd
 80028e8:	08002905 	.word	0x08002905
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	220c      	movs	r2, #12
 80028f0:	605a      	str	r2, [r3, #4]
          break;
 80028f2:	e011      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2212      	movs	r2, #18
 80028f8:	605a      	str	r2, [r3, #4]
          break;
 80028fa:	e00d      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2218      	movs	r2, #24
 8002900:	605a      	str	r2, [r3, #4]
          break;
 8002902:	e009      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290a:	605a      	str	r2, [r3, #4]
          break;
 800290c:	e004      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2206      	movs	r2, #6
 8002912:	605a      	str	r2, [r3, #4]
          break;
 8002914:	e000      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002916:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	f7ff fd5f 	bl	80023e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fe37 	bl	80025a2 <LL_ADC_REG_IsConversionOngoing>
 8002934:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fe43 	bl	80025c8 <LL_ADC_INJ_IsConversionOngoing>
 8002942:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002946:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 81c1 	bne.w	8002cd2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 81bc 	bne.w	8002cd2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002962:	d10f      	bne.n	8002984 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	4619      	mov	r1, r3
 8002970:	f7ff fd66 	bl	8002440 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fd20 	bl	80023c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002982:	e00e      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	461a      	mov	r2, r3
 8002992:	f7ff fd55 	bl	8002440 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fd10 	bl	80023c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d00a      	beq.n	80029da <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6919      	ldr	r1, [r3, #16]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029d4:	f7ff fca0 	bl	8002318 <LL_ADC_SetOffset>
 80029d8:	e17b      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fcbd 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x17e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fcb2 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	e01e      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x1bc>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fca7 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e004      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x1d4>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0e9b      	lsrs	r3, r3, #26
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	e018      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x206>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e004      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002a84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d106      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fc76 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fc5a 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x244>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fc4f 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	f003 021f 	and.w	r2, r3, #31
 8002aca:	e01e      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x282>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fc44 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e004      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x29a>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0e9b      	lsrs	r3, r3, #26
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	e018      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x2cc>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002b46:	2320      	movs	r3, #32
 8002b48:	e004      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d106      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fc13 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fbf7 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x30a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fbec 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	0e9b      	lsrs	r3, r3, #26
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	e01e      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x348>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fbe1 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e004      	b.n	8002bce <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x360>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	e016      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x38e>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e004      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d106      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2102      	movs	r1, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fbb2 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2103      	movs	r1, #3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fb96 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x3cc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2103      	movs	r1, #3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fb8b 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	f003 021f 	and.w	r2, r3, #31
 8002c52:	e017      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x3fc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2103      	movs	r1, #3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fb80 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002c76:	2320      	movs	r3, #32
 8002c78:	e003      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x414>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	e011      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x438>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d106      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2103      	movs	r1, #3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fb5d 	bl	800238c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fc50 	bl	800257c <LL_ADC_IsEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 8140 	bne.w	8002f64 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6819      	ldr	r1, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f7ff fbd1 	bl	8002498 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a8f      	ldr	r2, [pc, #572]	; (8002f38 <HAL_ADC_ConfigChannel+0x6b0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	f040 8131 	bne.w	8002f64 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x4a2>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2b09      	cmp	r3, #9
 8002d20:	bf94      	ite	ls
 8002d22:	2301      	movls	r3, #1
 8002d24:	2300      	movhi	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e019      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x4d6>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e003      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d079      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d107      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x4f6>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	3301      	adds	r3, #1
 8002d76:	069b      	lsls	r3, r3, #26
 8002d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d7c:	e015      	b.n	8002daa <HAL_ADC_ConfigChannel+0x522>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e003      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	069b      	lsls	r3, r3, #26
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x542>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0e9b      	lsrs	r3, r3, #26
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	e017      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x572>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002de2:	2320      	movs	r3, #32
 8002de4:	e003      	b.n	8002dee <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	ea42 0103 	orr.w	r1, r2, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x598>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 021f 	and.w	r2, r3, #31
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	051b      	lsls	r3, r3, #20
 8002e1e:	e018      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x5ca>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	e003      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e52:	430b      	orrs	r3, r1
 8002e54:	e081      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x5ea>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	3301      	adds	r3, #1
 8002e6a:	069b      	lsls	r3, r3, #26
 8002e6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e70:	e015      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x616>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e003      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	069b      	lsls	r3, r3, #26
 8002e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x636>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	e017      	b.n	8002eee <HAL_ADC_ConfigChannel+0x666>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	61fb      	str	r3, [r7, #28]
  return result;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	e003      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	ea42 0103 	orr.w	r1, r2, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10d      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x692>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0e9b      	lsrs	r3, r3, #26
 8002f04:	3301      	adds	r3, #1
 8002f06:	f003 021f 	and.w	r2, r3, #31
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b1e      	subs	r3, #30
 8002f12:	051b      	lsls	r3, r3, #20
 8002f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f18:	e01e      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x6d0>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	613b      	str	r3, [r7, #16]
  return result;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f32:	2320      	movs	r3, #32
 8002f34:	e006      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x6bc>
 8002f36:	bf00      	nop
 8002f38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f003 021f 	and.w	r2, r3, #31
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	3b1e      	subs	r3, #30
 8002f52:	051b      	lsls	r3, r3, #20
 8002f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7ff fa6e 	bl	8002440 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d06c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f70:	483c      	ldr	r0, [pc, #240]	; (8003064 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f72:	f7ff f9c3 	bl	80022fc <LL_ADC_GetCommonPathInternalCh>
 8002f76:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	; (8003068 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d127      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d121      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a35      	ldr	r2, [pc, #212]	; (800306c <HAL_ADC_ConfigChannel+0x7e4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d157      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	482f      	ldr	r0, [pc, #188]	; (8003064 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fa6:	f7ff f996 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_ADC_ConfigChannel+0x7e8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	4a30      	ldr	r2, [pc, #192]	; (8003074 <HAL_ADC_ConfigChannel+0x7ec>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	4613      	mov	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f9      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd2:	e03a      	b.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_ADC_ConfigChannel+0x7f0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d113      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x77e>
 8002fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10d      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_ADC_ConfigChannel+0x7e4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d12a      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4819      	ldr	r0, [pc, #100]	; (8003064 <HAL_ADC_ConfigChannel+0x7dc>)
 8003000:	f7ff f969 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003004:	e021      	b.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_ADC_ConfigChannel+0x7f4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d11c      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_ADC_ConfigChannel+0x7e4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d111      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800302a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800302e:	4619      	mov	r1, r3
 8003030:	480c      	ldr	r0, [pc, #48]	; (8003064 <HAL_ADC_ConfigChannel+0x7dc>)
 8003032:	f7ff f950 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
 8003036:	e008      	b.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003052:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003056:	4618      	mov	r0, r3
 8003058:	37d8      	adds	r7, #216	; 0xd8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	80080000 	.word	0x80080000
 8003064:	50040300 	.word	0x50040300
 8003068:	c7520000 	.word	0xc7520000
 800306c:	50040000 	.word	0x50040000
 8003070:	20000000 	.word	0x20000000
 8003074:	053e2d63 	.word	0x053e2d63
 8003078:	cb840000 	.word	0xcb840000
 800307c:	80000001 	.word	0x80000001

08003080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800309c:	4013      	ands	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 0307 	and.w	r3, r3, #7
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	db0b      	blt.n	800310e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	f003 021f 	and.w	r2, r3, #31
 80030fc:	4907      	ldr	r1, [pc, #28]	; (800311c <__NVIC_EnableIRQ+0x38>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2001      	movs	r0, #1
 8003106:	fa00 f202 	lsl.w	r2, r0, r2
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000e100 	.word	0xe000e100

08003120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	6039      	str	r1, [r7, #0]
 800312a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003130:	2b00      	cmp	r3, #0
 8003132:	db0a      	blt.n	800314a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	490c      	ldr	r1, [pc, #48]	; (800316c <__NVIC_SetPriority+0x4c>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	0112      	lsls	r2, r2, #4
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	440b      	add	r3, r1
 8003144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003148:	e00a      	b.n	8003160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4908      	ldr	r1, [pc, #32]	; (8003170 <__NVIC_SetPriority+0x50>)
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	3b04      	subs	r3, #4
 8003158:	0112      	lsls	r2, r2, #4
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	440b      	add	r3, r1
 800315e:	761a      	strb	r2, [r3, #24]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000e100 	.word	0xe000e100
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f1c3 0307 	rsb	r3, r3, #7
 800318e:	2b04      	cmp	r3, #4
 8003190:	bf28      	it	cs
 8003192:	2304      	movcs	r3, #4
 8003194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3304      	adds	r3, #4
 800319a:	2b06      	cmp	r3, #6
 800319c:	d902      	bls.n	80031a4 <NVIC_EncodePriority+0x30>
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3b03      	subs	r3, #3
 80031a2:	e000      	b.n	80031a6 <NVIC_EncodePriority+0x32>
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	f04f 32ff 	mov.w	r2, #4294967295
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	401a      	ands	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031bc:	f04f 31ff 	mov.w	r1, #4294967295
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	43d9      	mvns	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	4313      	orrs	r3, r2
         );
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3724      	adds	r7, #36	; 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031ec:	d301      	bcc.n	80031f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ee:	2301      	movs	r3, #1
 80031f0:	e00f      	b.n	8003212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <SysTick_Config+0x40>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031fa:	210f      	movs	r1, #15
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	f7ff ff8e 	bl	8003120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <SysTick_Config+0x40>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320a:	4b04      	ldr	r3, [pc, #16]	; (800321c <SysTick_Config+0x40>)
 800320c:	2207      	movs	r2, #7
 800320e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	e000e010 	.word	0xe000e010

08003220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ff29 	bl	8003080 <__NVIC_SetPriorityGrouping>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af00      	add	r7, sp, #0
 800323c:	4603      	mov	r3, r0
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003248:	f7ff ff3e 	bl	80030c8 <__NVIC_GetPriorityGrouping>
 800324c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	6978      	ldr	r0, [r7, #20]
 8003254:	f7ff ff8e 	bl	8003174 <NVIC_EncodePriority>
 8003258:	4602      	mov	r2, r0
 800325a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff5d 	bl	8003120 <__NVIC_SetPriority>
}
 8003266:	bf00      	nop
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff31 	bl	80030e4 <__NVIC_EnableIRQ>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ffa2 	bl	80031dc <SysTick_Config>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e054      	b.n	8003360 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7f5b      	ldrb	r3, [r3, #29]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe fae0 	bl	800188c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	791b      	ldrb	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_CRC_Init+0xc4>)
 80032e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0218 	bic.w	r2, r2, #24
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	e00c      	b.n	800330e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	461a      	mov	r2, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f834 	bl	800336c <HAL_CRCEx_Polynomial_Set>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e028      	b.n	8003360 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	795b      	ldrb	r3, [r3, #5]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	611a      	str	r2, [r3, #16]
 8003320:	e004      	b.n	800332c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6912      	ldr	r2, [r2, #16]
 800332a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	04c11db7 	.word	0x04c11db7

0800336c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800337c:	231f      	movs	r3, #31
 800337e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003380:	bf00      	nop
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	613a      	str	r2, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d009      	beq.n	80033a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b18      	cmp	r3, #24
 80033a4:	d846      	bhi.n	8003434 <HAL_CRCEx_Polynomial_Set+0xc8>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_CRCEx_Polynomial_Set+0x40>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	0800343b 	.word	0x0800343b
 80033b0:	08003435 	.word	0x08003435
 80033b4:	08003435 	.word	0x08003435
 80033b8:	08003435 	.word	0x08003435
 80033bc:	08003435 	.word	0x08003435
 80033c0:	08003435 	.word	0x08003435
 80033c4:	08003435 	.word	0x08003435
 80033c8:	08003435 	.word	0x08003435
 80033cc:	08003429 	.word	0x08003429
 80033d0:	08003435 	.word	0x08003435
 80033d4:	08003435 	.word	0x08003435
 80033d8:	08003435 	.word	0x08003435
 80033dc:	08003435 	.word	0x08003435
 80033e0:	08003435 	.word	0x08003435
 80033e4:	08003435 	.word	0x08003435
 80033e8:	08003435 	.word	0x08003435
 80033ec:	0800341d 	.word	0x0800341d
 80033f0:	08003435 	.word	0x08003435
 80033f4:	08003435 	.word	0x08003435
 80033f8:	08003435 	.word	0x08003435
 80033fc:	08003435 	.word	0x08003435
 8003400:	08003435 	.word	0x08003435
 8003404:	08003435 	.word	0x08003435
 8003408:	08003435 	.word	0x08003435
 800340c:	08003411 	.word	0x08003411
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d913      	bls.n	800343e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800341a:	e010      	b.n	800343e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b07      	cmp	r3, #7
 8003420:	d90f      	bls.n	8003442 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003426:	e00c      	b.n	8003442 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d90b      	bls.n	8003446 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003432:	e008      	b.n	8003446 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	75fb      	strb	r3, [r7, #23]
      break;
 8003438:	e006      	b.n	8003448 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800343a:	bf00      	nop
 800343c:	e004      	b.n	8003448 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800343e:	bf00      	nop
 8003440:	e002      	b.n	8003448 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003446:	bf00      	nop
  }
  if (status == HAL_OK)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 0118 	bic.w	r1, r3, #24
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0ac      	b.n	80035e4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f9d2 	bl	8003838 <DFSDM_GetChannelFromInstance>
 8003494:	4603      	mov	r3, r0
 8003496:	4a55      	ldr	r2, [pc, #340]	; (80035ec <HAL_DFSDM_ChannelInit+0x174>)
 8003498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e09f      	b.n	80035e4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fe fa91 	bl	80019cc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80034aa:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_DFSDM_ChannelInit+0x178>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3301      	adds	r3, #1
 80034b0:	4a4f      	ldr	r2, [pc, #316]	; (80035f0 <HAL_DFSDM_ChannelInit+0x178>)
 80034b2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80034b4:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <HAL_DFSDM_ChannelInit+0x178>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d125      	bne.n	8003508 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80034bc:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034c6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80034c8:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4948      	ldr	r1, [pc, #288]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a46      	ldr	r2, [pc, #280]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034dc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80034e0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	791b      	ldrb	r3, [r3, #4]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d108      	bne.n	80034fc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	493f      	ldr	r1, [pc, #252]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80034fc:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a3c      	ldr	r2, [pc, #240]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003506:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003516:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003526:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800352c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 020f 	bic.w	r2, r2, #15
 8003544:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800356c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f002 0207 	and.w	r2, r2, #7
 8003598:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035c4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f930 	bl	8003838 <DFSDM_GetChannelFromInstance>
 80035d8:	4602      	mov	r2, r0
 80035da:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_DFSDM_ChannelInit+0x174>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000f64 	.word	0x20000f64
 80035f0:	20000f60 	.word	0x20000f60
 80035f4:	40016000 	.word	0x40016000

080035f8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0ca      	b.n	80037a0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_DFSDM_FilterInit+0x1b0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d109      	bne.n	8003628 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003618:	2b01      	cmp	r3, #1
 800361a:	d003      	beq.n	8003624 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0bb      	b.n	80037a0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fe f943 	bl	80018cc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003654:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7a1b      	ldrb	r3, [r3, #8]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d108      	bne.n	8003670 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e007      	b.n	8003680 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800367e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7a5b      	ldrb	r3, [r3, #9]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d108      	bne.n	800369a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e007      	b.n	80036aa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80036a8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036b8:	f023 0308 	bic.w	r3, r3, #8
 80036bc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d108      	bne.n	80036d8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7c1b      	ldrb	r3, [r3, #16]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d108      	bne.n	80036f2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0210 	orr.w	r2, r2, #16
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e007      	b.n	8003702 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0210 	bic.w	r2, r2, #16
 8003700:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7c5b      	ldrb	r3, [r3, #17]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0220 	orr.w	r2, r2, #32
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e007      	b.n	800372c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0220 	bic.w	r2, r2, #32
 800372a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800373a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800373e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6959      	ldr	r1, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003752:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800375a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7c1a      	ldrb	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40016100 	.word	0x40016100

080037ac <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02e      	beq.n	8003824 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80037cc:	2bff      	cmp	r3, #255	; 0xff
 80037ce:	d029      	beq.n	8003824 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d10d      	bne.n	8003806 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	e00a      	b.n	800381c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
 8003822:	e001      	b.n	8003828 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
}
 800382a:	4618      	mov	r0, r3
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d102      	bne.n	800384e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e02b      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <DFSDM_GetChannelFromInstance+0x80>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d102      	bne.n	800385c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003856:	2301      	movs	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e024      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a17      	ldr	r2, [pc, #92]	; (80038bc <DFSDM_GetChannelFromInstance+0x84>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003864:	2302      	movs	r3, #2
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e01d      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <DFSDM_GetChannelFromInstance+0x88>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d102      	bne.n	8003878 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003872:	2304      	movs	r3, #4
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e016      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <DFSDM_GetChannelFromInstance+0x8c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d102      	bne.n	8003886 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003880:	2305      	movs	r3, #5
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e00f      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <DFSDM_GetChannelFromInstance+0x90>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d102      	bne.n	8003894 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800388e:	2306      	movs	r3, #6
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e008      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <DFSDM_GetChannelFromInstance+0x94>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d102      	bne.n	80038a2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800389c:	2307      	movs	r3, #7
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e001      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80038a2:	2303      	movs	r3, #3
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40016000 	.word	0x40016000
 80038b8:	40016020 	.word	0x40016020
 80038bc:	40016040 	.word	0x40016040
 80038c0:	40016080 	.word	0x40016080
 80038c4:	400160a0 	.word	0x400160a0
 80038c8:	400160c0 	.word	0x400160c0
 80038cc:	400160e0 	.word	0x400160e0

080038d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e08d      	b.n	80039fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_DMA_Init+0x138>)
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d80f      	bhi.n	800390e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b45      	ldr	r3, [pc, #276]	; (8003a0c <HAL_DMA_Init+0x13c>)
 80038f6:	4413      	add	r3, r2
 80038f8:	4a45      	ldr	r2, [pc, #276]	; (8003a10 <HAL_DMA_Init+0x140>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	009a      	lsls	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a42      	ldr	r2, [pc, #264]	; (8003a14 <HAL_DMA_Init+0x144>)
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
 800390c:	e00e      	b.n	800392c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <HAL_DMA_Init+0x148>)
 8003916:	4413      	add	r3, r2
 8003918:	4a3d      	ldr	r2, [pc, #244]	; (8003a10 <HAL_DMA_Init+0x140>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	009a      	lsls	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a3c      	ldr	r2, [pc, #240]	; (8003a1c <HAL_DMA_Init+0x14c>)
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8fe 	bl	8003b80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800398c:	d102      	bne.n	8003994 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039a8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d010      	beq.n	80039d4 <HAL_DMA_Init+0x104>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d80c      	bhi.n	80039d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f91e 	bl	8003bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	e008      	b.n	80039e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40020407 	.word	0x40020407
 8003a0c:	bffdfff8 	.word	0xbffdfff8
 8003a10:	cccccccd 	.word	0xcccccccd
 8003a14:	40020000 	.word	0x40020000
 8003a18:	bffdfbf8 	.word	0xbffdfbf8
 8003a1c:	40020400 	.word	0x40020400

08003a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f003 031c 	and.w	r3, r3, #28
 8003a40:	2204      	movs	r2, #4
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d026      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x7a>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d021      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f003 021c 	and.w	r2, r3, #28
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2104      	movs	r1, #4
 8003a82:	fa01 f202 	lsl.w	r2, r1, r2
 8003a86:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d071      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003a98:	e06c      	b.n	8003b74 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f003 031c 	and.w	r3, r3, #28
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02e      	beq.n	8003b0c <HAL_DMA_IRQHandler+0xec>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d029      	beq.n	8003b0c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 020a 	bic.w	r2, r2, #10
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f003 021c 	and.w	r2, r3, #28
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2102      	movs	r1, #2
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d038      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b0a:	e033      	b.n	8003b74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f003 031c 	and.w	r3, r3, #28
 8003b14:	2208      	movs	r2, #8
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02a      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x156>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d025      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 020e 	bic.w	r2, r2, #14
 8003b38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f003 021c 	and.w	r2, r3, #28
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2101      	movs	r1, #1
 8003b48:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
}
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d80a      	bhi.n	8003baa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ba0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6493      	str	r3, [r2, #72]	; 0x48
 8003ba8:	e007      	b.n	8003bba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	009a      	lsls	r2, r3, #2
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bb4:	4413      	add	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	3b08      	subs	r3, #8
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40020407 	.word	0x40020407
 8003bf0:	4002081c 	.word	0x4002081c
 8003bf4:	cccccccd 	.word	0xcccccccd
 8003bf8:	40020880 	.word	0x40020880

08003bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c1e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2201      	movs	r2, #1
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	1000823f 	.word	0x1000823f
 8003c40:	40020940 	.word	0x40020940

08003c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c52:	e166      	b.n	8003f22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	4013      	ands	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8158 	beq.w	8003f1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d005      	beq.n	8003c84 <HAL_GPIO_Init+0x40>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d130      	bne.n	8003ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cba:	2201      	movs	r2, #1
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	f003 0201 	and.w	r2, r3, #1
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d017      	beq.n	8003d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d123      	bne.n	8003d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	08da      	lsrs	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3208      	adds	r2, #8
 8003d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	220f      	movs	r2, #15
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	08da      	lsrs	r2, r3, #3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3208      	adds	r2, #8
 8003d70:	6939      	ldr	r1, [r7, #16]
 8003d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 0203 	and.w	r2, r3, #3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80b2 	beq.w	8003f1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db8:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_GPIO_Init+0x2fc>)
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	4a60      	ldr	r2, [pc, #384]	; (8003f40 <HAL_GPIO_Init+0x2fc>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6613      	str	r3, [r2, #96]	; 0x60
 8003dc4:	4b5e      	ldr	r3, [pc, #376]	; (8003f40 <HAL_GPIO_Init+0x2fc>)
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dd0:	4a5c      	ldr	r2, [pc, #368]	; (8003f44 <HAL_GPIO_Init+0x300>)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	089b      	lsrs	r3, r3, #2
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	220f      	movs	r2, #15
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dfa:	d02b      	beq.n	8003e54 <HAL_GPIO_Init+0x210>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a52      	ldr	r2, [pc, #328]	; (8003f48 <HAL_GPIO_Init+0x304>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d025      	beq.n	8003e50 <HAL_GPIO_Init+0x20c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a51      	ldr	r2, [pc, #324]	; (8003f4c <HAL_GPIO_Init+0x308>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d01f      	beq.n	8003e4c <HAL_GPIO_Init+0x208>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a50      	ldr	r2, [pc, #320]	; (8003f50 <HAL_GPIO_Init+0x30c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d019      	beq.n	8003e48 <HAL_GPIO_Init+0x204>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a4f      	ldr	r2, [pc, #316]	; (8003f54 <HAL_GPIO_Init+0x310>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_GPIO_Init+0x200>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a4e      	ldr	r2, [pc, #312]	; (8003f58 <HAL_GPIO_Init+0x314>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00d      	beq.n	8003e40 <HAL_GPIO_Init+0x1fc>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a4d      	ldr	r2, [pc, #308]	; (8003f5c <HAL_GPIO_Init+0x318>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d007      	beq.n	8003e3c <HAL_GPIO_Init+0x1f8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a4c      	ldr	r2, [pc, #304]	; (8003f60 <HAL_GPIO_Init+0x31c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_GPIO_Init+0x1f4>
 8003e34:	2307      	movs	r3, #7
 8003e36:	e00e      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	e00c      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e3c:	2306      	movs	r3, #6
 8003e3e:	e00a      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e40:	2305      	movs	r3, #5
 8003e42:	e008      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e44:	2304      	movs	r3, #4
 8003e46:	e006      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e004      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e002      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e54:	2300      	movs	r3, #0
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	f002 0203 	and.w	r2, r2, #3
 8003e5c:	0092      	lsls	r2, r2, #2
 8003e5e:	4093      	lsls	r3, r2
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e66:	4937      	ldr	r1, [pc, #220]	; (8003f44 <HAL_GPIO_Init+0x300>)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e74:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e98:	4a32      	ldr	r2, [pc, #200]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ec2:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ec8:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ef2:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f16:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f47f ae91 	bne.w	8003c54 <HAL_GPIO_Init+0x10>
  }
}
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40010000 	.word	0x40010000
 8003f48:	48000400 	.word	0x48000400
 8003f4c:	48000800 	.word	0x48000800
 8003f50:	48000c00 	.word	0x48000c00
 8003f54:	48001000 	.word	0x48001000
 8003f58:	48001400 	.word	0x48001400
 8003f5c:	48001800 	.word	0x48001800
 8003f60:	48001c00 	.word	0x48001c00
 8003f64:	40010400 	.word	0x40010400

08003f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e001      	b.n	8003f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa8:	787b      	ldrb	r3, [r7, #1]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e081      	b.n	80040de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd fd30 	bl	8001a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	e006      	b.n	8004050 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800404e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d104      	bne.n	8004062 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004060:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69d9      	ldr	r1, [r3, #28]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d138      	bne.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004106:	2302      	movs	r3, #2
 8004108:	e032      	b.n	8004170 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2224      	movs	r2, #36	; 0x24
 8004116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004138:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0201 	orr.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b20      	cmp	r3, #32
 8004190:	d139      	bne.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800419c:	2302      	movs	r3, #2
 800419e:	e033      	b.n	8004208 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	; 0x24
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004206:	2302      	movs	r3, #2
  }
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	b08f      	sub	sp, #60	; 0x3c
 8004218:	af0a      	add	r7, sp, #40	; 0x28
 800421a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e116      	b.n	8004454 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f00e fdc9 	bl	8012dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2203      	movs	r2, #3
 800424a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f007 fd78 	bl	800bd5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	687e      	ldr	r6, [r7, #4]
 8004272:	466d      	mov	r5, sp
 8004274:	f106 0410 	add.w	r4, r6, #16
 8004278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800427a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800427c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800427e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004280:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004284:	e885 0003 	stmia.w	r5, {r0, r1}
 8004288:	1d33      	adds	r3, r6, #4
 800428a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800428c:	6838      	ldr	r0, [r7, #0]
 800428e:	f007 fc8b 	bl	800bba8 <USB_CoreInit>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0d7      	b.n	8004454 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f007 fd66 	bl	800bd7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e04a      	b.n	800434c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	333d      	adds	r3, #61	; 0x3d
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	333c      	adds	r3, #60	; 0x3c
 80042da:	7bfa      	ldrb	r2, [r7, #15]
 80042dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	b298      	uxth	r0, r3
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3344      	adds	r3, #68	; 0x44
 80042f2:	4602      	mov	r2, r0
 80042f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3340      	adds	r3, #64	; 0x40
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	3348      	adds	r3, #72	; 0x48
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800431e:	7bfa      	ldrb	r2, [r7, #15]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	334c      	adds	r3, #76	; 0x4c
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3354      	adds	r3, #84	; 0x54
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	3301      	adds	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d3af      	bcc.n	80042b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	e044      	b.n	80043e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004372:	7bfa      	ldrb	r2, [r7, #15]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043b4:	7bfa      	ldrb	r2, [r7, #15]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	3301      	adds	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3b5      	bcc.n	800435c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	687e      	ldr	r6, [r7, #4]
 80043f8:	466d      	mov	r5, sp
 80043fa:	f106 0410 	add.w	r4, r6, #16
 80043fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800440a:	e885 0003 	stmia.w	r5, {r0, r1}
 800440e:	1d33      	adds	r3, r6, #4
 8004410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004412:	6838      	ldr	r0, [r7, #0]
 8004414:	f007 fcfe 	bl	800be14 <USB_DevInit>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e014      	b.n	8004454 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b01      	cmp	r3, #1
 8004440:	d102      	bne.n	8004448 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f001 f882 	bl	800554c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f008 fd86 	bl	800cf5e <USB_DevDisconnect>

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800445c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_PCD_Start+0x1c>
 8004474:	2302      	movs	r3, #2
 8004476:	e01c      	b.n	80044b2 <HAL_PCD_Start+0x56>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f007 fc4d 	bl	800bd38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f008 fd3a 	bl	800cf1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044ba:	b590      	push	{r4, r7, lr}
 80044bc:	b08d      	sub	sp, #52	; 0x34
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f008 fdf8 	bl	800d0c6 <USB_GetMode>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 847e 	bne.w	8004dda <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f008 fd5c 	bl	800cfa0 <USB_ReadInterrupts>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8474 	beq.w	8004dd8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f008 fd49 	bl	800cfa0 <USB_ReadInterrupts>
 800450e:	4603      	mov	r3, r0
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b02      	cmp	r3, #2
 8004516:	d107      	bne.n	8004528 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f002 0202 	and.w	r2, r2, #2
 8004526:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f008 fd37 	bl	800cfa0 <USB_ReadInterrupts>
 8004532:	4603      	mov	r3, r0
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d161      	bne.n	8004600 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0210 	bic.w	r2, r2, #16
 800454a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	0c5b      	lsrs	r3, r3, #17
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	2b02      	cmp	r3, #2
 8004576:	d124      	bne.n	80045c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d035      	beq.n	80045f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800458e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6a38      	ldr	r0, [r7, #32]
 8004598:	f008 fb6e 	bl	800cc78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045a8:	441a      	add	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ba:	441a      	add	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
 80045c0:	e016      	b.n	80045f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	0c5b      	lsrs	r3, r3, #17
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d110      	bne.n	80045f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045d4:	2208      	movs	r2, #8
 80045d6:	4619      	mov	r1, r3
 80045d8:	6a38      	ldr	r0, [r7, #32]
 80045da:	f008 fb4d 	bl	800cc78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ea:	441a      	add	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0210 	orr.w	r2, r2, #16
 80045fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f008 fccb 	bl	800cfa0 <USB_ReadInterrupts>
 800460a:	4603      	mov	r3, r0
 800460c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004610:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004614:	f040 80a7 	bne.w	8004766 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f008 fcd0 	bl	800cfc6 <USB_ReadDevAllOutEpInterrupt>
 8004626:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004628:	e099      	b.n	800475e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 808e 	beq.w	8004752 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f008 fcf4 	bl	800d02e <USB_ReadDevOutEPInterrupt>
 8004646:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2301      	movs	r3, #1
 8004662:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fe96 	bl	8005398 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00c      	beq.n	8004690 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	461a      	mov	r2, r3
 8004684:	2308      	movs	r3, #8
 8004686:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fed2 	bl	8005434 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	2310      	movs	r3, #16
 80046aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d030      	beq.n	8004718 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	d109      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	3304      	adds	r3, #4
 80046ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	78db      	ldrb	r3, [r3, #3]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d108      	bne.n	8004706 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f00e fcad 	bl	8013060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	2302      	movs	r3, #2
 8004716:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	461a      	mov	r2, r3
 8004730:	2320      	movs	r3, #32
 8004732:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004750:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	3301      	adds	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f af62 	bne.w	800462a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f008 fc18 	bl	800cfa0 <USB_ReadInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800477a:	f040 80a4 	bne.w	80048c6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f008 fc39 	bl	800cffa <USB_ReadDevAllInEpInterrupt>
 8004788:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800478e:	e096      	b.n	80048be <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 808b 	beq.w	80048b2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f008 fc5f 	bl	800d06a <USB_ReadDevInEPInterrupt>
 80047ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	2201      	movs	r2, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d8:	4013      	ands	r3, r2
 80047da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	461a      	mov	r2, r3
 80047ea:	2301      	movs	r3, #1
 80047ec:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f00e fb9e 	bl	8012f36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	461a      	mov	r2, r3
 8004812:	2308      	movs	r3, #8
 8004814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	461a      	mov	r2, r3
 800482e:	2310      	movs	r3, #16
 8004830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	2340      	movs	r3, #64	; 0x40
 800484c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d023      	beq.n	80048a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800485a:	6a38      	ldr	r0, [r7, #32]
 800485c:	f007 fc26 	bl	800c0ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	3338      	adds	r3, #56	; 0x38
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4413      	add	r3, r2
 8004870:	3304      	adds	r3, #4
 8004872:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	78db      	ldrb	r3, [r3, #3]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d108      	bne.n	800488e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2200      	movs	r2, #0
 8004880:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	b2db      	uxtb	r3, r3
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f00e fbfb 	bl	8013084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	461a      	mov	r2, r3
 800489c:	2302      	movs	r3, #2
 800489e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80048aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fcea 	bl	8005286 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	3301      	adds	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f af65 	bne.w	8004790 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f008 fb68 	bl	800cfa0 <USB_ReadInterrupts>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048da:	d122      	bne.n	8004922 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d108      	bne.n	800490c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004902:	2100      	movs	r1, #0
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f00e fe2d 	bl	8013564 <HAL_PCDEx_LPM_Callback>
 800490a:	e002      	b.n	8004912 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f00e fb7f 	bl	8013010 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f008 fb3a 	bl	800cfa0 <USB_ReadInterrupts>
 800492c:	4603      	mov	r3, r0
 800492e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004936:	d112      	bne.n	800495e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d102      	bne.n	800494e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f00e fb3b 	bl	8012fc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800495c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f008 fb1c 	bl	800cfa0 <USB_ReadInterrupts>
 8004968:	4603      	mov	r3, r0
 800496a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004972:	d121      	bne.n	80049b8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004982:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d111      	bne.n	80049b2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80049a8:	2101      	movs	r1, #1
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f00e fdda 	bl	8013564 <HAL_PCDEx_LPM_Callback>
 80049b0:	e002      	b.n	80049b8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f00e fb06 	bl	8012fc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f008 faef 	bl	800cfa0 <USB_ReadInterrupts>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	f040 80b5 	bne.w	8004b3a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2110      	movs	r1, #16
 80049ea:	4618      	mov	r0, r3
 80049ec:	f007 fb5e 	bl	800c0ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f4:	e046      	b.n	8004a84 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	461a      	mov	r2, r3
 8004a04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	3301      	adds	r3, #1
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3b3      	bcc.n	80049f6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004aa0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d016      	beq.n	8004ad8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aba:	f043 030b 	orr.w	r3, r3, #11
 8004abe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad0:	f043 030b 	orr.w	r3, r3, #11
 8004ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad6:	e015      	b.n	8004b04 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ae6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004aea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004aee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afe:	f043 030b 	orr.w	r3, r3, #11
 8004b02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f008 faff 	bl	800d128 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f008 fa2e 	bl	800cfa0 <USB_ReadInterrupts>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4e:	d124      	bne.n	8004b9a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f008 fac4 	bl	800d0e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f007 fb21 	bl	800c1a6 <USB_GetDevSpeed>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681c      	ldr	r4, [r3, #0]
 8004b70:	f001 fbe2 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8004b74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f007 f83e 	bl	800bc00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f00e f9fe 	bl	8012f86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f008 f9fe 	bl	800cfa0 <USB_ReadInterrupts>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d10a      	bne.n	8004bc4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f00e f9db 	bl	8012f6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f002 0208 	and.w	r2, r2, #8
 8004bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f008 f9e9 	bl	800cfa0 <USB_ReadInterrupts>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d122      	bne.n	8004c1e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004be4:	2301      	movs	r3, #1
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
 8004be8:	e014      	b.n	8004c14 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fb0b 	bl	8005224 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	3301      	adds	r3, #1
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d3e5      	bcc.n	8004bea <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f008 f9bc 	bl	800cfa0 <USB_ReadInterrupts>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c32:	d13b      	bne.n	8004cac <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c34:	2301      	movs	r3, #1
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
 8004c38:	e02b      	b.n	8004c92 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	3340      	adds	r3, #64	; 0x40
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d115      	bne.n	8004c8c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da12      	bge.n	8004c8c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	333f      	adds	r3, #63	; 0x3f
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 facc 	bl	8005224 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	3301      	adds	r3, #1
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d3ce      	bcc.n	8004c3a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695a      	ldr	r2, [r3, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f008 f975 	bl	800cfa0 <USB_ReadInterrupts>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc0:	d155      	bne.n	8004d6e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc6:	e045      	b.n	8004d54 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d12e      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cf0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da2b      	bge.n	8004d4e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004d02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d121      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d4a:	6053      	str	r3, [r2, #4]
            break;
 8004d4c:	e007      	b.n	8004d5e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	3301      	adds	r3, #1
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d3b4      	bcc.n	8004cc8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f008 f914 	bl	800cfa0 <USB_ReadInterrupts>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d10a      	bne.n	8004d9a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f00e f98f 	bl	80130a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f008 f8fe 	bl	800cfa0 <USB_ReadInterrupts>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d115      	bne.n	8004dda <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f00e f97f 	bl	80130c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	e000      	b.n	8004dda <HAL_PCD_IRQHandler+0x920>
      return;
 8004dd8:	bf00      	nop
    }
  }
}
 8004dda:	3734      	adds	r7, #52	; 0x34
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd90      	pop	{r4, r7, pc}

08004de0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_PCD_SetAddress+0x1a>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e013      	b.n	8004e22 <HAL_PCD_SetAddress+0x42>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f008 f85c 	bl	800ced0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	4608      	mov	r0, r1
 8004e34:	4611      	mov	r1, r2
 8004e36:	461a      	mov	r2, r3
 8004e38:	4603      	mov	r3, r0
 8004e3a:	70fb      	strb	r3, [r7, #3]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	803b      	strh	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	da0f      	bge.n	8004e70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	f003 020f 	and.w	r2, r3, #15
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	3338      	adds	r3, #56	; 0x38
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4413      	add	r3, r2
 8004e64:	3304      	adds	r3, #4
 8004e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	705a      	strb	r2, [r3, #1]
 8004e6e:	e00f      	b.n	8004e90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	f003 020f 	and.w	r2, r3, #15
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4413      	add	r3, r2
 8004e86:	3304      	adds	r3, #4
 8004e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e9c:	883a      	ldrh	r2, [r7, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	78ba      	ldrb	r2, [r7, #2]
 8004ea6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004eba:	78bb      	ldrb	r3, [r7, #2]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d102      	bne.n	8004ec6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_PCD_EP_Open+0xaa>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e00e      	b.n	8004ef2 <HAL_PCD_EP_Open+0xc8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f007 f97e 	bl	800c1e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004ef0:	7afb      	ldrb	r3, [r7, #11]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	da0f      	bge.n	8004f2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	3338      	adds	r3, #56	; 0x38
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	3304      	adds	r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	705a      	strb	r2, [r3, #1]
 8004f2c:	e00f      	b.n	8004f4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	4413      	add	r3, r2
 8004f44:	3304      	adds	r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_PCD_EP_Close+0x6e>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e00e      	b.n	8004f86 <HAL_PCD_EP_Close+0x8c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68f9      	ldr	r1, [r7, #12]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f007 f9bc 	bl	800c2f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f9e:	7afb      	ldrb	r3, [r7, #11]
 8004fa0:	f003 020f 	and.w	r2, r3, #15
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd0:	7afb      	ldrb	r3, [r7, #11]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fdc:	7afb      	ldrb	r3, [r7, #11]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6979      	ldr	r1, [r7, #20]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f007 fc3d 	bl	800c86c <USB_EP0StartXfer>
 8004ff2:	e005      	b.n	8005000 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6979      	ldr	r1, [r7, #20]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f007 fa56 	bl	800c4ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800502c:	681b      	ldr	r3, [r3, #0]
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	460b      	mov	r3, r1
 8005048:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504a:	7afb      	ldrb	r3, [r7, #11]
 800504c:	f003 020f 	and.w	r2, r3, #15
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	3338      	adds	r3, #56	; 0x38
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	3304      	adds	r3, #4
 8005060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2201      	movs	r2, #1
 8005078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800507a:	7afb      	ldrb	r3, [r7, #11]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	b2da      	uxtb	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	4618      	mov	r0, r3
 8005098:	f007 fbe8 	bl	800c86c <USB_EP0StartXfer>
 800509c:	e005      	b.n	80050aa <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f007 fa01 	bl	800c4ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 020f 	and.w	r2, r3, #15
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d901      	bls.n	80050d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e04e      	b.n	8005170 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da0f      	bge.n	80050fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	f003 020f 	and.w	r2, r3, #15
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	3338      	adds	r3, #56	; 0x38
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	3304      	adds	r3, #4
 80050f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	705a      	strb	r2, [r3, #1]
 80050f8:	e00d      	b.n	8005116 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	3304      	adds	r3, #4
 800510e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	b2da      	uxtb	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_PCD_EP_SetStall+0x82>
 8005132:	2302      	movs	r3, #2
 8005134:	e01c      	b.n	8005170 <HAL_PCD_EP_SetStall+0xbc>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	4618      	mov	r0, r3
 8005146:	f007 fdef 	bl	800cd28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f007 ffe1 	bl	800d128 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	f003 020f 	and.w	r2, r3, #15
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d901      	bls.n	8005196 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e042      	b.n	800521c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800519a:	2b00      	cmp	r3, #0
 800519c:	da0f      	bge.n	80051be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	f003 020f 	and.w	r2, r3, #15
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	3338      	adds	r3, #56	; 0x38
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	3304      	adds	r3, #4
 80051b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	705a      	strb	r2, [r3, #1]
 80051bc:	e00f      	b.n	80051de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	f003 020f 	and.w	r2, r3, #15
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_PCD_EP_ClrStall+0x86>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e00e      	b.n	800521c <HAL_PCD_EP_ClrStall+0xa4>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	4618      	mov	r0, r3
 800520e:	f007 fdf9 	bl	800ce04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005234:	2b00      	cmp	r3, #0
 8005236:	da0c      	bge.n	8005252 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	f003 020f 	and.w	r2, r3, #15
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	3338      	adds	r3, #56	; 0x38
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	4413      	add	r3, r2
 800524c:	3304      	adds	r3, #4
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e00c      	b.n	800526c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68f9      	ldr	r1, [r7, #12]
 8005272:	4618      	mov	r0, r3
 8005274:	f007 fc1c 	bl	800cab0 <USB_EPStopXfer>
 8005278:	4603      	mov	r3, r0
 800527a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800527c:	7afb      	ldrb	r3, [r7, #11]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	3338      	adds	r3, #56	; 0x38
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	3304      	adds	r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1a      	ldr	r2, [r3, #32]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d901      	bls.n	80052be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e067      	b.n	800538e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d902      	bls.n	80052da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3303      	adds	r3, #3
 80052de:	089b      	lsrs	r3, r3, #2
 80052e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052e2:	e026      	b.n	8005332 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d902      	bls.n	8005300 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	3303      	adds	r3, #3
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6919      	ldr	r1, [r3, #16]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	b29b      	uxth	r3, r3
 8005314:	6978      	ldr	r0, [r7, #20]
 8005316:	f007 fc75 	bl	800cc04 <USB_WritePacket>

    ep->xfer_buff  += len;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	441a      	add	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	441a      	add	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	b29b      	uxth	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	429a      	cmp	r2, r3
 8005346:	d809      	bhi.n	800535c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005350:	429a      	cmp	r2, r3
 8005352:	d203      	bcs.n	800535c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1c3      	bne.n	80052e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	429a      	cmp	r2, r3
 8005366:	d811      	bhi.n	800538c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	2201      	movs	r2, #1
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	43db      	mvns	r3, r3
 8005382:	6939      	ldr	r1, [r7, #16]
 8005384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005388:	4013      	ands	r3, r2
 800538a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	333c      	adds	r3, #60	; 0x3c
 80053b0:	3304      	adds	r3, #4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <PCD_EP_OutXfrComplete_int+0x98>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d124      	bne.n	8005418 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	461a      	mov	r2, r3
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	6093      	str	r3, [r2, #8]
 80053ec:	e01a      	b.n	8005424 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	461a      	mov	r2, r3
 8005406:	2320      	movs	r3, #32
 8005408:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f00d fd75 	bl	8012f00 <HAL_PCD_DataOutStageCallback>
 8005416:	e005      	b.n	8005424 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f00d fd6e 	bl	8012f00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	4f54310a 	.word	0x4f54310a

08005434 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	333c      	adds	r3, #60	; 0x3c
 800544c:	3304      	adds	r3, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <PCD_EP_OutSetupPacket_int+0x64>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d90e      	bls.n	8005488 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	461a      	mov	r2, r3
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f00d fd27 	bl	8012edc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	4f54300a 	.word	0x4f54300a

0800549c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
 80054a8:	4613      	mov	r3, r2
 80054aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054ba:	883b      	ldrh	r3, [r7, #0]
 80054bc:	0419      	lsls	r1, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
 80054c8:	e028      	b.n	800551c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4413      	add	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054d8:	2300      	movs	r3, #0
 80054da:	73fb      	strb	r3, [r7, #15]
 80054dc:	e00d      	b.n	80054fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	3340      	adds	r3, #64	; 0x40
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4413      	add	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	3301      	adds	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	7bfa      	ldrb	r2, [r7, #15]
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	3b01      	subs	r3, #1
 8005500:	429a      	cmp	r2, r3
 8005502:	d3ec      	bcc.n	80054de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005504:	883b      	ldrh	r3, [r7, #0]
 8005506:	0418      	lsls	r0, r3, #16
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6819      	ldr	r1, [r3, #0]
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	3b01      	subs	r3, #1
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	4302      	orrs	r2, r0
 8005514:	3340      	adds	r3, #64	; 0x40
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	887a      	ldrh	r2, [r7, #2]
 800553c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557e:	f043 0303 	orr.w	r3, r3, #3
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a04      	ldr	r2, [pc, #16]	; (80055b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800559e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a2:	6013      	str	r3, [r2, #0]
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40007000 	.word	0x40007000

080055b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c4:	d102      	bne.n	80055cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80055c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ca:	e00b      	b.n	80055e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80055ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055da:	d102      	bne.n	80055e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80055dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e0:	e000      	b.n	80055e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80055e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40007000 	.word	0x40007000

080055f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d141      	bne.n	8005686 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005602:	4b4b      	ldr	r3, [pc, #300]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800560a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560e:	d131      	bne.n	8005674 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005610:	4b47      	ldr	r3, [pc, #284]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005616:	4a46      	ldr	r2, [pc, #280]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800561c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005620:	4b43      	ldr	r3, [pc, #268]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005628:	4a41      	ldr	r2, [pc, #260]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800562a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800562e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005630:	4b40      	ldr	r3, [pc, #256]	; (8005734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2232      	movs	r2, #50	; 0x32
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	4a3f      	ldr	r2, [pc, #252]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800563c:	fba2 2303 	umull	r2, r3, r2, r3
 8005640:	0c9b      	lsrs	r3, r3, #18
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005646:	e002      	b.n	800564e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3b01      	subs	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800564e:	4b38      	ldr	r3, [pc, #224]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565a:	d102      	bne.n	8005662 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f2      	bne.n	8005648 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005662:	4b33      	ldr	r3, [pc, #204]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566e:	d158      	bne.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e057      	b.n	8005724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005674:	4b2e      	ldr	r3, [pc, #184]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800567a:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005684:	e04d      	b.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d141      	bne.n	8005712 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800568e:	4b28      	ldr	r3, [pc, #160]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569a:	d131      	bne.n	8005700 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800569c:	4b24      	ldr	r3, [pc, #144]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	4a23      	ldr	r2, [pc, #140]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056ac:	4b20      	ldr	r3, [pc, #128]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056b4:	4a1e      	ldr	r2, [pc, #120]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80056bc:	4b1d      	ldr	r3, [pc, #116]	; (8005734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2232      	movs	r2, #50	; 0x32
 80056c2:	fb02 f303 	mul.w	r3, r2, r3
 80056c6:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	0c9b      	lsrs	r3, r3, #18
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056d2:	e002      	b.n	80056da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e6:	d102      	bne.n	80056ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f2      	bne.n	80056d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fa:	d112      	bne.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e011      	b.n	8005724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005706:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005710:	e007      	b.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800571a:	4a05      	ldr	r2, [pc, #20]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800571c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005720:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40007000 	.word	0x40007000
 8005734:	20000000 	.word	0x20000000
 8005738:	431bde83 	.word	0x431bde83

0800573c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	4a04      	ldr	r2, [pc, #16]	; (8005758 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800574a:	6053      	str	r3, [r2, #4]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40007000 	.word	0x40007000

0800575c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800576a:	6053      	str	r3, [r2, #4]
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40007000 	.word	0x40007000

0800577c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f000 bc08 	b.w	8005fa0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005790:	4b96      	ldr	r3, [pc, #600]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800579a:	4b94      	ldr	r3, [pc, #592]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80e4 	beq.w	800597a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_RCC_OscConfig+0x4c>
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b0c      	cmp	r3, #12
 80057bc:	f040 808b 	bne.w	80058d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	f040 8087 	bne.w	80058d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057c8:	4b88      	ldr	r3, [pc, #544]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_OscConfig+0x64>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e3df      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	4b81      	ldr	r3, [pc, #516]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <HAL_RCC_OscConfig+0x7e>
 80057f0:	4b7e      	ldr	r3, [pc, #504]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f8:	e005      	b.n	8005806 <HAL_RCC_OscConfig+0x8a>
 80057fa:	4b7c      	ldr	r3, [pc, #496]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80057fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005806:	4293      	cmp	r3, r2
 8005808:	d223      	bcs.n	8005852 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fdca 	bl	80063a8 <RCC_SetFlashLatencyFromMSIRange>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e3c0      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800581e:	4b73      	ldr	r3, [pc, #460]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a72      	ldr	r2, [pc, #456]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005824:	f043 0308 	orr.w	r3, r3, #8
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	4b70      	ldr	r3, [pc, #448]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	496d      	ldr	r1, [pc, #436]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005838:	4313      	orrs	r3, r2
 800583a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800583c:	4b6b      	ldr	r3, [pc, #428]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	4968      	ldr	r1, [pc, #416]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800584c:	4313      	orrs	r3, r2
 800584e:	604b      	str	r3, [r1, #4]
 8005850:	e025      	b.n	800589e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005852:	4b66      	ldr	r3, [pc, #408]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a65      	ldr	r2, [pc, #404]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b63      	ldr	r3, [pc, #396]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	4960      	ldr	r1, [pc, #384]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005870:	4b5e      	ldr	r3, [pc, #376]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	495b      	ldr	r1, [pc, #364]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fd8a 	bl	80063a8 <RCC_SetFlashLatencyFromMSIRange>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e380      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800589e:	f000 fcc1 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80058a2:	4602      	mov	r2, r0
 80058a4:	4b51      	ldr	r3, [pc, #324]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	4950      	ldr	r1, [pc, #320]	; (80059f0 <HAL_RCC_OscConfig+0x274>)
 80058b0:	5ccb      	ldrb	r3, [r1, r3]
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ba:	4a4e      	ldr	r2, [pc, #312]	; (80059f4 <HAL_RCC_OscConfig+0x278>)
 80058bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058be:	4b4e      	ldr	r3, [pc, #312]	; (80059f8 <HAL_RCC_OscConfig+0x27c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fc fc74 	bl	80021b0 <HAL_InitTick>
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d052      	beq.n	8005978 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	e364      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d032      	beq.n	8005944 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058de:	4b43      	ldr	r3, [pc, #268]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a42      	ldr	r2, [pc, #264]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058ea:	f7fc fcb1 	bl	8002250 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058f2:	f7fc fcad 	bl	8002250 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e34d      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005904:	4b39      	ldr	r3, [pc, #228]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005910:	4b36      	ldr	r3, [pc, #216]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a35      	ldr	r2, [pc, #212]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005916:	f043 0308 	orr.w	r3, r3, #8
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b33      	ldr	r3, [pc, #204]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4930      	ldr	r1, [pc, #192]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800592a:	4313      	orrs	r3, r2
 800592c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800592e:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	492b      	ldr	r1, [pc, #172]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800593e:	4313      	orrs	r3, r2
 8005940:	604b      	str	r3, [r1, #4]
 8005942:	e01a      	b.n	800597a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005944:	4b29      	ldr	r3, [pc, #164]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a28      	ldr	r2, [pc, #160]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005950:	f7fc fc7e 	bl	8002250 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005958:	f7fc fc7a 	bl	8002250 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e31a      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x1dc>
 8005976:	e000      	b.n	800597a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d073      	beq.n	8005a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b08      	cmp	r3, #8
 800598a:	d005      	beq.n	8005998 <HAL_RCC_OscConfig+0x21c>
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d10e      	bne.n	80059b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d10b      	bne.n	80059b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005998:	4b14      	ldr	r3, [pc, #80]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d063      	beq.n	8005a6c <HAL_RCC_OscConfig+0x2f0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d15f      	bne.n	8005a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e2f7      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b8:	d106      	bne.n	80059c8 <HAL_RCC_OscConfig+0x24c>
 80059ba:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a0b      	ldr	r2, [pc, #44]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e025      	b.n	8005a14 <HAL_RCC_OscConfig+0x298>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059d0:	d114      	bne.n	80059fc <HAL_RCC_OscConfig+0x280>
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a05      	ldr	r2, [pc, #20]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b03      	ldr	r3, [pc, #12]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a02      	ldr	r2, [pc, #8]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e013      	b.n	8005a14 <HAL_RCC_OscConfig+0x298>
 80059ec:	40021000 	.word	0x40021000
 80059f0:	08018ee0 	.word	0x08018ee0
 80059f4:	20000000 	.word	0x20000000
 80059f8:	20000004 	.word	0x20000004
 80059fc:	4ba0      	ldr	r3, [pc, #640]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a9f      	ldr	r2, [pc, #636]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	4b9d      	ldr	r3, [pc, #628]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a9c      	ldr	r2, [pc, #624]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d013      	beq.n	8005a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1c:	f7fc fc18 	bl	8002250 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a24:	f7fc fc14 	bl	8002250 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b64      	cmp	r3, #100	; 0x64
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e2b4      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a36:	4b92      	ldr	r3, [pc, #584]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCC_OscConfig+0x2a8>
 8005a42:	e014      	b.n	8005a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a44:	f7fc fc04 	bl	8002250 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a4c:	f7fc fc00 	bl	8002250 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b64      	cmp	r3, #100	; 0x64
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e2a0      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a5e:	4b88      	ldr	r3, [pc, #544]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0x2d0>
 8005a6a:	e000      	b.n	8005a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d060      	beq.n	8005b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d005      	beq.n	8005a8c <HAL_RCC_OscConfig+0x310>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	d119      	bne.n	8005aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d116      	bne.n	8005aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a8c:	4b7c      	ldr	r3, [pc, #496]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x328>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e27d      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa4:	4b76      	ldr	r3, [pc, #472]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	4973      	ldr	r1, [pc, #460]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ab8:	e040      	b.n	8005b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d023      	beq.n	8005b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ac2:	4b6f      	ldr	r3, [pc, #444]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a6e      	ldr	r2, [pc, #440]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ace:	f7fc fbbf 	bl	8002250 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad6:	f7fc fbbb 	bl	8002250 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e25b      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ae8:	4b65      	ldr	r3, [pc, #404]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af4:	4b62      	ldr	r3, [pc, #392]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	061b      	lsls	r3, r3, #24
 8005b02:	495f      	ldr	r1, [pc, #380]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	604b      	str	r3, [r1, #4]
 8005b08:	e018      	b.n	8005b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b0a:	4b5d      	ldr	r3, [pc, #372]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a5c      	ldr	r2, [pc, #368]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b16:	f7fc fb9b 	bl	8002250 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b1e:	f7fc fb97 	bl	8002250 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e237      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b30:	4b53      	ldr	r3, [pc, #332]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f0      	bne.n	8005b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d03c      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01c      	beq.n	8005b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b50:	4b4b      	ldr	r3, [pc, #300]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b56:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7fc fb76 	bl	8002250 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b68:	f7fc fb72 	bl	8002250 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e212      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b7a:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ef      	beq.n	8005b68 <HAL_RCC_OscConfig+0x3ec>
 8005b88:	e01b      	b.n	8005bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b8a:	4b3d      	ldr	r3, [pc, #244]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b90:	4a3b      	ldr	r2, [pc, #236]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b92:	f023 0301 	bic.w	r3, r3, #1
 8005b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9a:	f7fc fb59 	bl	8002250 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba2:	f7fc fb55 	bl	8002250 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e1f5      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bb4:	4b32      	ldr	r3, [pc, #200]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1ef      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80a6 	beq.w	8005d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005bd4:	4b2a      	ldr	r3, [pc, #168]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	4a26      	ldr	r2, [pc, #152]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bea:	6593      	str	r3, [r2, #88]	; 0x58
 8005bec:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bfc:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <HAL_RCC_OscConfig+0x508>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d118      	bne.n	8005c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c08:	4b1e      	ldr	r3, [pc, #120]	; (8005c84 <HAL_RCC_OscConfig+0x508>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <HAL_RCC_OscConfig+0x508>)
 8005c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c14:	f7fc fb1c 	bl	8002250 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c1c:	f7fc fb18 	bl	8002250 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e1b8      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c2e:	4b15      	ldr	r3, [pc, #84]	; (8005c84 <HAL_RCC_OscConfig+0x508>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d108      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4d8>
 8005c42:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c48:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c52:	e029      	b.n	8005ca8 <HAL_RCC_OscConfig+0x52c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b05      	cmp	r3, #5
 8005c5a:	d115      	bne.n	8005c88 <HAL_RCC_OscConfig+0x50c>
 8005c5c:	4b08      	ldr	r3, [pc, #32]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	4a07      	ldr	r2, [pc, #28]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c64:	f043 0304 	orr.w	r3, r3, #4
 8005c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c6c:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c7c:	e014      	b.n	8005ca8 <HAL_RCC_OscConfig+0x52c>
 8005c7e:	bf00      	nop
 8005c80:	40021000 	.word	0x40021000
 8005c84:	40007000 	.word	0x40007000
 8005c88:	4b9d      	ldr	r3, [pc, #628]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	4a9c      	ldr	r2, [pc, #624]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c98:	4b99      	ldr	r3, [pc, #612]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	4a98      	ldr	r2, [pc, #608]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ca0:	f023 0304 	bic.w	r3, r3, #4
 8005ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d016      	beq.n	8005cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb0:	f7fc face 	bl	8002250 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fc faca 	bl	8002250 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e168      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cce:	4b8c      	ldr	r3, [pc, #560]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ed      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x53c>
 8005cdc:	e015      	b.n	8005d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cde:	f7fc fab7 	bl	8002250 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ce4:	e00a      	b.n	8005cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce6:	f7fc fab3 	bl	8002250 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e151      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cfc:	4b80      	ldr	r3, [pc, #512]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1ed      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d0a:	7ffb      	ldrb	r3, [r7, #31]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d105      	bne.n	8005d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d10:	4b7b      	ldr	r3, [pc, #492]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d14:	4a7a      	ldr	r2, [pc, #488]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d03c      	beq.n	8005da2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01c      	beq.n	8005d6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d30:	4b73      	ldr	r3, [pc, #460]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d36:	4a72      	ldr	r2, [pc, #456]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fc fa86 	bl	8002250 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d48:	f7fc fa82 	bl	8002250 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e122      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d5a:	4b69      	ldr	r3, [pc, #420]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0ef      	beq.n	8005d48 <HAL_RCC_OscConfig+0x5cc>
 8005d68:	e01b      	b.n	8005da2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d6a:	4b65      	ldr	r3, [pc, #404]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d70:	4a63      	ldr	r2, [pc, #396]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d72:	f023 0301 	bic.w	r3, r3, #1
 8005d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7a:	f7fc fa69 	bl	8002250 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d82:	f7fc fa65 	bl	8002250 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e105      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d94:	4b5a      	ldr	r3, [pc, #360]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1ef      	bne.n	8005d82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80f9 	beq.w	8005f9e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	f040 80cf 	bne.w	8005f54 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005db6:	4b52      	ldr	r3, [pc, #328]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 0203 	and.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d12c      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d123      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d11b      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d113      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d109      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d071      	beq.n	8005f08 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b0c      	cmp	r3, #12
 8005e28:	d068      	beq.n	8005efc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e2a:	4b35      	ldr	r3, [pc, #212]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d105      	bne.n	8005e42 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e36:	4b32      	ldr	r3, [pc, #200]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e0ac      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e46:	4b2e      	ldr	r3, [pc, #184]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2d      	ldr	r2, [pc, #180]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e52:	f7fc f9fd 	bl	8002250 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5a:	f7fc f9f9 	bl	8002250 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e099      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e6c:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f0      	bne.n	8005e5a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e78:	4b21      	ldr	r3, [pc, #132]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <HAL_RCC_OscConfig+0x788>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e88:	3a01      	subs	r2, #1
 8005e8a:	0112      	lsls	r2, r2, #4
 8005e8c:	4311      	orrs	r1, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e92:	0212      	lsls	r2, r2, #8
 8005e94:	4311      	orrs	r1, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e9a:	0852      	lsrs	r2, r2, #1
 8005e9c:	3a01      	subs	r2, #1
 8005e9e:	0552      	lsls	r2, r2, #21
 8005ea0:	4311      	orrs	r1, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ea6:	0852      	lsrs	r2, r2, #1
 8005ea8:	3a01      	subs	r2, #1
 8005eaa:	0652      	lsls	r2, r2, #25
 8005eac:	4311      	orrs	r1, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005eb2:	06d2      	lsls	r2, r2, #27
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	4912      	ldr	r1, [pc, #72]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ebc:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a0f      	ldr	r2, [pc, #60]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ec6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4a0c      	ldr	r2, [pc, #48]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ed4:	f7fc f9bc 	bl	8002250 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fc f9b8 	bl	8002250 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e058      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eee:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005efa:	e050      	b.n	8005f9e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e04f      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
 8005f00:	40021000 	.word	0x40021000
 8005f04:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f08:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d144      	bne.n	8005f9e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f14:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a23      	ldr	r2, [pc, #140]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f20:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f2c:	f7fc f990 	bl	8002250 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f34:	f7fc f98c 	bl	8002250 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e02c      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f46:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0x7b8>
 8005f52:	e024      	b.n	8005f9e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d01f      	beq.n	8005f9a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f5a:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f66:	f7fc f973 	bl	8002250 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fc f96f 	bl	8002250 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e00f      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f0      	bne.n	8005f6e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	4905      	ldr	r1, [pc, #20]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_RCC_OscConfig+0x830>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	60cb      	str	r3, [r1, #12]
 8005f98:	e001      	b.n	8005f9e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	feeefffc 	.word	0xfeeefffc

08005fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e11d      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc8:	4b90      	ldr	r3, [pc, #576]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d910      	bls.n	8005ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd6:	4b8d      	ldr	r3, [pc, #564]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f023 020f 	bic.w	r2, r3, #15
 8005fde:	498b      	ldr	r1, [pc, #556]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	4b89      	ldr	r3, [pc, #548]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e105      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d010      	beq.n	8006026 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	4b81      	ldr	r3, [pc, #516]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006010:	429a      	cmp	r2, r3
 8006012:	d908      	bls.n	8006026 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006014:	4b7e      	ldr	r3, [pc, #504]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	497b      	ldr	r1, [pc, #492]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d079      	beq.n	8006126 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b03      	cmp	r3, #3
 8006038:	d11e      	bne.n	8006078 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800603a:	4b75      	ldr	r3, [pc, #468]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0dc      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800604a:	f000 fa07 	bl	800645c <RCC_GetSysClockFreqFromPLLSource>
 800604e:	4603      	mov	r3, r0
 8006050:	4a70      	ldr	r2, [pc, #448]	; (8006214 <HAL_RCC_ClockConfig+0x264>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d946      	bls.n	80060e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006056:	4b6e      	ldr	r3, [pc, #440]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d140      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006062:	4b6b      	ldr	r3, [pc, #428]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606a:	4a69      	ldr	r2, [pc, #420]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800606c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006070:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e035      	b.n	80060e4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d107      	bne.n	8006090 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006080:	4b63      	ldr	r3, [pc, #396]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d115      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0b9      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d107      	bne.n	80060a8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006098:	4b5d      	ldr	r3, [pc, #372]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e0ad      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060a8:	4b59      	ldr	r3, [pc, #356]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0a5      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80060b8:	f000 f8b4 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80060bc:	4603      	mov	r3, r0
 80060be:	4a55      	ldr	r2, [pc, #340]	; (8006214 <HAL_RCC_ClockConfig+0x264>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d90f      	bls.n	80060e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80060c4:	4b52      	ldr	r3, [pc, #328]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d109      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060d0:	4b4f      	ldr	r3, [pc, #316]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060d8:	4a4d      	ldr	r2, [pc, #308]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060de:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060e4:	4b4a      	ldr	r3, [pc, #296]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f023 0203 	bic.w	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	4947      	ldr	r1, [pc, #284]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f6:	f7fc f8ab 	bl	8002250 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fc:	e00a      	b.n	8006114 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060fe:	f7fc f8a7 	bl	8002250 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e077      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006114:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 020c 	and.w	r2, r3, #12
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	429a      	cmp	r2, r3
 8006124:	d1eb      	bne.n	80060fe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d105      	bne.n	8006138 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800612c:	4b38      	ldr	r3, [pc, #224]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4a37      	ldr	r2, [pc, #220]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006136:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d010      	beq.n	8006166 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006150:	429a      	cmp	r2, r3
 8006152:	d208      	bcs.n	8006166 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006154:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	492b      	ldr	r1, [pc, #172]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006162:	4313      	orrs	r3, r2
 8006164:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006166:	4b29      	ldr	r3, [pc, #164]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d210      	bcs.n	8006196 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006174:	4b25      	ldr	r3, [pc, #148]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f023 020f 	bic.w	r2, r3, #15
 800617c:	4923      	ldr	r1, [pc, #140]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	4313      	orrs	r3, r2
 8006182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006184:	4b21      	ldr	r3, [pc, #132]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d001      	beq.n	8006196 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e036      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a2:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	4918      	ldr	r1, [pc, #96]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d009      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061c0:	4b13      	ldr	r3, [pc, #76]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	4910      	ldr	r1, [pc, #64]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061d4:	f000 f826 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	091b      	lsrs	r3, r3, #4
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	490c      	ldr	r1, [pc, #48]	; (8006218 <HAL_RCC_ClockConfig+0x268>)
 80061e6:	5ccb      	ldrb	r3, [r1, r3]
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
 80061f0:	4a0a      	ldr	r2, [pc, #40]	; (800621c <HAL_RCC_ClockConfig+0x26c>)
 80061f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <HAL_RCC_ClockConfig+0x270>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fb ffd9 	bl	80021b0 <HAL_InitTick>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]

  return status;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40022000 	.word	0x40022000
 8006210:	40021000 	.word	0x40021000
 8006214:	04c4b400 	.word	0x04c4b400
 8006218:	08018ee0 	.word	0x08018ee0
 800621c:	20000000 	.word	0x20000000
 8006220:	20000004 	.word	0x20000004

08006224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	; 0x24
 8006228:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	61fb      	str	r3, [r7, #28]
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006232:	4b3e      	ldr	r3, [pc, #248]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_GetSysClockFreq+0x34>
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b0c      	cmp	r3, #12
 8006250:	d121      	bne.n	8006296 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d11e      	bne.n	8006296 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006258:	4b34      	ldr	r3, [pc, #208]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d107      	bne.n	8006274 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006264:	4b31      	ldr	r3, [pc, #196]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 8006266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e005      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006274:	4b2d      	ldr	r3, [pc, #180]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006280:	4a2b      	ldr	r2, [pc, #172]	; (8006330 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10d      	bne.n	80062ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006294:	e00a      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b04      	cmp	r3, #4
 800629a:	d102      	bne.n	80062a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800629c:	4b25      	ldr	r3, [pc, #148]	; (8006334 <HAL_RCC_GetSysClockFreq+0x110>)
 800629e:	61bb      	str	r3, [r7, #24]
 80062a0:	e004      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d101      	bne.n	80062ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062a8:	4b22      	ldr	r3, [pc, #136]	; (8006334 <HAL_RCC_GetSysClockFreq+0x110>)
 80062aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b0c      	cmp	r3, #12
 80062b0:	d134      	bne.n	800631c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062b2:	4b1e      	ldr	r3, [pc, #120]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d003      	beq.n	80062ca <HAL_RCC_GetSysClockFreq+0xa6>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d003      	beq.n	80062d0 <HAL_RCC_GetSysClockFreq+0xac>
 80062c8:	e005      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80062ca:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <HAL_RCC_GetSysClockFreq+0x110>)
 80062cc:	617b      	str	r3, [r7, #20]
      break;
 80062ce:	e005      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80062d0:	4b18      	ldr	r3, [pc, #96]	; (8006334 <HAL_RCC_GetSysClockFreq+0x110>)
 80062d2:	617b      	str	r3, [r7, #20]
      break;
 80062d4:	e002      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	617b      	str	r3, [r7, #20]
      break;
 80062da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062dc:	4b13      	ldr	r3, [pc, #76]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	091b      	lsrs	r3, r3, #4
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	3301      	adds	r3, #1
 80062e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80062ea:	4b10      	ldr	r3, [pc, #64]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	fb03 f202 	mul.w	r2, r3, r2
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	0e5b      	lsrs	r3, r3, #25
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	3301      	adds	r3, #1
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	fbb2 f3f3 	udiv	r3, r2, r3
 800631a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800631c:	69bb      	ldr	r3, [r7, #24]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3724      	adds	r7, #36	; 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000
 8006330:	08018ef8 	.word	0x08018ef8
 8006334:	00f42400 	.word	0x00f42400

08006338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <HAL_RCC_GetHCLKFreq+0x14>)
 800633e:	681b      	ldr	r3, [r3, #0]
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000000 	.word	0x20000000

08006350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006354:	f7ff fff0 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8006358:	4602      	mov	r2, r0
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	4904      	ldr	r1, [pc, #16]	; (8006378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006366:	5ccb      	ldrb	r3, [r1, r3]
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006370:	4618      	mov	r0, r3
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40021000 	.word	0x40021000
 8006378:	08018ef0 	.word	0x08018ef0

0800637c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006380:	f7ff ffda 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8006384:	4602      	mov	r2, r0
 8006386:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	0adb      	lsrs	r3, r3, #11
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	4904      	ldr	r1, [pc, #16]	; (80063a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006392:	5ccb      	ldrb	r3, [r1, r3]
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40021000 	.word	0x40021000
 80063a4:	08018ef0 	.word	0x08018ef0

080063a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063b4:	4b27      	ldr	r3, [pc, #156]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063c0:	f7ff f8f8 	bl	80055b4 <HAL_PWREx_GetVoltageRange>
 80063c4:	6178      	str	r0, [r7, #20]
 80063c6:	e014      	b.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063c8:	4b22      	ldr	r3, [pc, #136]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	4a21      	ldr	r2, [pc, #132]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d2:	6593      	str	r3, [r2, #88]	; 0x58
 80063d4:	4b1f      	ldr	r3, [pc, #124]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063e0:	f7ff f8e8 	bl	80055b4 <HAL_PWREx_GetVoltageRange>
 80063e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063e6:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d10b      	bne.n	8006412 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b80      	cmp	r3, #128	; 0x80
 80063fe:	d913      	bls.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2ba0      	cmp	r3, #160	; 0xa0
 8006404:	d902      	bls.n	800640c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006406:	2302      	movs	r3, #2
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	e00d      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800640c:	2301      	movs	r3, #1
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	e00a      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b7f      	cmp	r3, #127	; 0x7f
 8006416:	d902      	bls.n	800641e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006418:	2302      	movs	r3, #2
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	e004      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b70      	cmp	r3, #112	; 0x70
 8006422:	d101      	bne.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006424:	2301      	movs	r3, #1
 8006426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 020f 	bic.w	r2, r3, #15
 8006430:	4909      	ldr	r1, [pc, #36]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d001      	beq.n	800644a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40021000 	.word	0x40021000
 8006458:	40022000 	.word	0x40022000

0800645c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006462:	4b2d      	ldr	r3, [pc, #180]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d00b      	beq.n	800648a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d825      	bhi.n	80064c4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d008      	beq.n	8006490 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d11f      	bne.n	80064c4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006484:	4b25      	ldr	r3, [pc, #148]	; (800651c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006486:	613b      	str	r3, [r7, #16]
    break;
 8006488:	e01f      	b.n	80064ca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800648c:	613b      	str	r3, [r7, #16]
    break;
 800648e:	e01c      	b.n	80064ca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006490:	4b21      	ldr	r3, [pc, #132]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d107      	bne.n	80064ac <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800649c:	4b1e      	ldr	r3, [pc, #120]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800649e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	e005      	b.n	80064b8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80064ac:	4b1a      	ldr	r3, [pc, #104]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80064b8:	4a19      	ldr	r2, [pc, #100]	; (8006520 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c0:	613b      	str	r3, [r7, #16]
    break;
 80064c2:	e002      	b.n	80064ca <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]
    break;
 80064c8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064ca:	4b13      	ldr	r3, [pc, #76]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	f003 030f 	and.w	r3, r3, #15
 80064d4:	3301      	adds	r3, #1
 80064d6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064d8:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	0a1b      	lsrs	r3, r3, #8
 80064de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	fb03 f202 	mul.w	r2, r3, r2
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064f0:	4b09      	ldr	r3, [pc, #36]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	0e5b      	lsrs	r3, r3, #25
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	3301      	adds	r3, #1
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800650a:	683b      	ldr	r3, [r7, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	40021000 	.word	0x40021000
 800651c:	00f42400 	.word	0x00f42400
 8006520:	08018ef8 	.word	0x08018ef8

08006524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800652c:	2300      	movs	r3, #0
 800652e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006530:	2300      	movs	r3, #0
 8006532:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653c:	2b00      	cmp	r3, #0
 800653e:	d040      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006544:	2b80      	cmp	r3, #128	; 0x80
 8006546:	d02a      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d825      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800654c:	2b60      	cmp	r3, #96	; 0x60
 800654e:	d026      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006550:	2b60      	cmp	r3, #96	; 0x60
 8006552:	d821      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d006      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d81d      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d010      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006564:	e018      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006566:	4b89      	ldr	r3, [pc, #548]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	4a88      	ldr	r2, [pc, #544]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800656c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006570:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006572:	e015      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3304      	adds	r3, #4
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f001 fa82 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006584:	e00c      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3320      	adds	r3, #32
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fb6d 	bl	8007c6c <RCCEx_PLLSAI2_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006596:	e003      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	74fb      	strb	r3, [r7, #19]
      break;
 800659c:	e000      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800659e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a0:	7cfb      	ldrb	r3, [r7, #19]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065a6:	4b79      	ldr	r3, [pc, #484]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b4:	4975      	ldr	r1, [pc, #468]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80065bc:	e001      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065be:	7cfb      	ldrb	r3, [r7, #19]
 80065c0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d047      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d6:	d030      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80065d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065dc:	d82a      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80065de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e2:	d02a      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80065e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e8:	d824      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80065ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ee:	d008      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80065f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f4:	d81e      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80065fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fe:	d010      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006600:	e018      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006602:	4b62      	ldr	r3, [pc, #392]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	4a61      	ldr	r2, [pc, #388]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800660e:	e015      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3304      	adds	r3, #4
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f001 fa34 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006620:	e00c      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3320      	adds	r3, #32
 8006626:	2100      	movs	r1, #0
 8006628:	4618      	mov	r0, r3
 800662a:	f001 fb1f 	bl	8007c6c <RCCEx_PLLSAI2_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	74fb      	strb	r3, [r7, #19]
      break;
 8006638:	e000      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800663a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800663c:	7cfb      	ldrb	r3, [r7, #19]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10b      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006642:	4b52      	ldr	r3, [pc, #328]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	494e      	ldr	r1, [pc, #312]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006658:	e001      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665a:	7cfb      	ldrb	r3, [r7, #19]
 800665c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 809f 	beq.w	80067aa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800666c:	2300      	movs	r3, #0
 800666e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006670:	4b46      	ldr	r3, [pc, #280]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006680:	2300      	movs	r3, #0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006686:	4b41      	ldr	r3, [pc, #260]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668a:	4a40      	ldr	r2, [pc, #256]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800668c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006690:	6593      	str	r3, [r2, #88]	; 0x58
 8006692:	4b3e      	ldr	r3, [pc, #248]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800669e:	2301      	movs	r3, #1
 80066a0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066a2:	4b3b      	ldr	r3, [pc, #236]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a3a      	ldr	r2, [pc, #232]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066ae:	f7fb fdcf 	bl	8002250 <HAL_GetTick>
 80066b2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066b4:	e009      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b6:	f7fb fdcb 	bl	8002250 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d902      	bls.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	74fb      	strb	r3, [r7, #19]
        break;
 80066c8:	e005      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066ca:	4b31      	ldr	r3, [pc, #196]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0ef      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80066d6:	7cfb      	ldrb	r3, [r7, #19]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d15b      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066dc:	4b2b      	ldr	r3, [pc, #172]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01f      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d019      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066fa:	4b24      	ldr	r3, [pc, #144]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006704:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006706:	4b21      	ldr	r3, [pc, #132]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670c:	4a1f      	ldr	r2, [pc, #124]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800670e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006716:	4b1d      	ldr	r3, [pc, #116]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671c:	4a1b      	ldr	r2, [pc, #108]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800671e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006726:	4a19      	ldr	r2, [pc, #100]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d016      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006738:	f7fb fd8a 	bl	8002250 <HAL_GetTick>
 800673c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800673e:	e00b      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006740:	f7fb fd86 	bl	8002250 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f241 3288 	movw	r2, #5000	; 0x1388
 800674e:	4293      	cmp	r3, r2
 8006750:	d902      	bls.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	74fb      	strb	r3, [r7, #19]
            break;
 8006756:	e006      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0ec      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006766:	7cfb      	ldrb	r3, [r7, #19]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10c      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800676c:	4b07      	ldr	r3, [pc, #28]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800677c:	4903      	ldr	r1, [pc, #12]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006784:	e008      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006786:	7cfb      	ldrb	r3, [r7, #19]
 8006788:	74bb      	strb	r3, [r7, #18]
 800678a:	e005      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800678c:	40021000 	.word	0x40021000
 8006790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	7cfb      	ldrb	r3, [r7, #19]
 8006796:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006798:	7c7b      	ldrb	r3, [r7, #17]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d105      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800679e:	4ba0      	ldr	r3, [pc, #640]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a2:	4a9f      	ldr	r2, [pc, #636]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067b6:	4b9a      	ldr	r3, [pc, #616]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	f023 0203 	bic.w	r2, r3, #3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c4:	4996      	ldr	r1, [pc, #600]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067d8:	4b91      	ldr	r3, [pc, #580]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067de:	f023 020c 	bic.w	r2, r3, #12
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	498e      	ldr	r1, [pc, #568]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067fa:	4b89      	ldr	r3, [pc, #548]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006808:	4985      	ldr	r1, [pc, #532]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800681c:	4b80      	ldr	r3, [pc, #512]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682a:	497d      	ldr	r1, [pc, #500]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800683e:	4b78      	ldr	r3, [pc, #480]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684c:	4974      	ldr	r1, [pc, #464]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006860:	4b6f      	ldr	r3, [pc, #444]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	496c      	ldr	r1, [pc, #432]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006882:	4b67      	ldr	r3, [pc, #412]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006890:	4963      	ldr	r1, [pc, #396]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068a4:	4b5e      	ldr	r3, [pc, #376]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b2:	495b      	ldr	r1, [pc, #364]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068c6:	4b56      	ldr	r3, [pc, #344]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d4:	4952      	ldr	r1, [pc, #328]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068e8:	4b4d      	ldr	r3, [pc, #308]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f6:	494a      	ldr	r1, [pc, #296]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800690a:	4b45      	ldr	r3, [pc, #276]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006918:	4941      	ldr	r1, [pc, #260]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800692c:	4b3c      	ldr	r3, [pc, #240]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800692e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006932:	f023 0203 	bic.w	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693a:	4939      	ldr	r1, [pc, #228]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800693c:	4313      	orrs	r3, r2
 800693e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d028      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800694e:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006954:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800695c:	4930      	ldr	r1, [pc, #192]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800696c:	d106      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800696e:	4b2c      	ldr	r3, [pc, #176]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4a2b      	ldr	r2, [pc, #172]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006978:	60d3      	str	r3, [r2, #12]
 800697a:	e011      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006980:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006984:	d10c      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3304      	adds	r3, #4
 800698a:	2101      	movs	r1, #1
 800698c:	4618      	mov	r0, r3
 800698e:	f001 f879 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006992:	4603      	mov	r3, r0
 8006994:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006996:	7cfb      	ldrb	r3, [r7, #19]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800699c:	7cfb      	ldrb	r3, [r7, #19]
 800699e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d04d      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b4:	d108      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80069b6:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069bc:	4a18      	ldr	r2, [pc, #96]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80069c6:	e012      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ce:	4a14      	ldr	r2, [pc, #80]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80069d8:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e6:	490e      	ldr	r1, [pc, #56]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069f6:	d106      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4a08      	ldr	r2, [pc, #32]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a02:	60d3      	str	r3, [r2, #12]
 8006a04:	e020      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a0e:	d109      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4a02      	ldr	r2, [pc, #8]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1a:	60d3      	str	r3, [r2, #12]
 8006a1c:	e014      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006a1e:	bf00      	nop
 8006a20:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3304      	adds	r3, #4
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 f825 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a3e:	7cfb      	ldrb	r3, [r7, #19]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
 8006a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d028      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a54:	4b7a      	ldr	r3, [pc, #488]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a62:	4977      	ldr	r1, [pc, #476]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a72:	d106      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a74:	4b72      	ldr	r3, [pc, #456]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4a71      	ldr	r2, [pc, #452]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7e:	60d3      	str	r3, [r2, #12]
 8006a80:	e011      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	2101      	movs	r1, #1
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fff6 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a9c:	7cfb      	ldrb	r3, [r7, #19]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01e      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ab2:	4b63      	ldr	r3, [pc, #396]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac2:	495f      	ldr	r1, [pc, #380]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	2102      	movs	r1, #2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 ffd1 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ae6:	7cfb      	ldrb	r3, [r7, #19]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006aec:	7cfb      	ldrb	r3, [r7, #19]
 8006aee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006afc:	4b50      	ldr	r3, [pc, #320]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b02:	f023 0204 	bic.w	r2, r3, #4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0c:	494c      	ldr	r1, [pc, #304]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006b20:	4b47      	ldr	r3, [pc, #284]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b26:	f023 0218 	bic.w	r2, r3, #24
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	4943      	ldr	r1, [pc, #268]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d035      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b44:	4b3e      	ldr	r3, [pc, #248]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a3d      	ldr	r2, [pc, #244]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b50:	f7fb fb7e 	bl	8002250 <HAL_GetTick>
 8006b54:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b56:	e009      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b58:	f7fb fb7a 	bl	8002250 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d902      	bls.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	74fb      	strb	r3, [r7, #19]
        break;
 8006b6a:	e005      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b6c:	4b34      	ldr	r3, [pc, #208]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1ef      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006b78:	7cfb      	ldrb	r3, [r7, #19]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d113      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006b7e:	4b30      	ldr	r3, [pc, #192]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8e:	492c      	ldr	r1, [pc, #176]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3320      	adds	r3, #32
 8006b9a:	2102      	movs	r1, #2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f001 f865 	bl	8007c6c <RCCEx_PLLSAI2_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006ba6:	7cfb      	ldrb	r3, [r7, #19]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006bac:	7cfb      	ldrb	r3, [r7, #19]
 8006bae:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01e      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006bbc:	4b20      	ldr	r3, [pc, #128]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bcc:	491c      	ldr	r1, [pc, #112]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	d10c      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3320      	adds	r3, #32
 8006be4:	2101      	movs	r1, #1
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 f840 	bl	8007c6c <RCCEx_PLLSAI2_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bf0:	7cfb      	ldrb	r3, [r7, #19]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006bf6:	7cfb      	ldrb	r3, [r7, #19]
 8006bf8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d017      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c06:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c16:	490a      	ldr	r1, [pc, #40]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c28:	d105      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c34:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c36:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40021000 	.word	0x40021000

08006c44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c56:	d13e      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006c58:	4bb6      	ldr	r3, [pc, #728]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c62:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c6a:	d028      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c72:	f200 86f2 	bhi.w	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7c:	d005      	beq.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c84:	d00e      	beq.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006c86:	f000 bee8 	b.w	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c8a:	4baa      	ldr	r3, [pc, #680]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	f040 86e2 	bne.w	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8006c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9e:	61fb      	str	r3, [r7, #28]
      break;
 8006ca0:	f000 bedd 	b.w	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006ca4:	4ba3      	ldr	r3, [pc, #652]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	f040 86d7 	bne.w	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8006cb4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006cb8:	61fb      	str	r3, [r7, #28]
      break;
 8006cba:	f000 bed2 	b.w	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006cbe:	4b9d      	ldr	r3, [pc, #628]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cca:	f040 86cc 	bne.w	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8006cce:	4b9a      	ldr	r3, [pc, #616]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006cd0:	61fb      	str	r3, [r7, #28]
      break;
 8006cd2:	f000 bec8 	b.w	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cd6:	4b97      	ldr	r3, [pc, #604]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d036      	beq.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d840      	bhi.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d003      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d020      	beq.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006cf8:	e039      	b.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006cfa:	4b8e      	ldr	r3, [pc, #568]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d116      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006d06:	4b8b      	ldr	r3, [pc, #556]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006d12:	4b88      	ldr	r3, [pc, #544]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	091b      	lsrs	r3, r3, #4
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	e005      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006d1e:	4b85      	ldr	r3, [pc, #532]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	4a84      	ldr	r2, [pc, #528]	; (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006d32:	e01f      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61bb      	str	r3, [r7, #24]
      break;
 8006d38:	e01c      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d3a:	4b7e      	ldr	r3, [pc, #504]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d46:	d102      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006d48:	4b7d      	ldr	r3, [pc, #500]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006d4a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006d4c:	e012      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61bb      	str	r3, [r7, #24]
      break;
 8006d52:	e00f      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d54:	4b77      	ldr	r3, [pc, #476]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d60:	d102      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006d62:	4b77      	ldr	r3, [pc, #476]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006d64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006d66:	e005      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
      break;
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61bb      	str	r3, [r7, #24]
      break;
 8006d72:	bf00      	nop
    }

    switch(PeriphClk)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d7a:	f000 8604 	beq.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d84:	f200 8671 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d8e:	f000 8467 	beq.w	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d98:	f200 8667 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da2:	f000 852f 	beq.w	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dac:	f200 865d 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006db6:	f000 8185 	beq.w	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dc0:	f200 8653 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dca:	f000 80cb 	beq.w	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dd4:	f200 8649 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dde:	f000 842e 	beq.w	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de8:	f200 863f 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df2:	f000 83e2 	beq.w	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dfc:	f200 8635 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e06:	f000 80ad 	beq.w	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e10:	f200 862b 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e1a:	f000 809b 	beq.w	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e24:	f200 8621 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	f000 8089 	beq.w	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e38:	f200 8617 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e42:	f000 8552 	beq.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e4c:	f200 860d 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e56:	f000 84fe 	beq.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e60:	f200 8603 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6a:	f000 849f 	beq.w	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e74:	f200 85f9 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b80      	cmp	r3, #128	; 0x80
 8006e7c:	f000 846a 	beq.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	f200 85f1 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d84c      	bhi.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 85ea 	beq.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	2b1f      	cmp	r3, #31
 8006e9c:	f200 85e5 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	080072b9 	.word	0x080072b9
 8006eac:	08007327 	.word	0x08007327
 8006eb0:	08007a6b 	.word	0x08007a6b
 8006eb4:	080073bb 	.word	0x080073bb
 8006eb8:	08007a6b 	.word	0x08007a6b
 8006ebc:	08007a6b 	.word	0x08007a6b
 8006ec0:	08007a6b 	.word	0x08007a6b
 8006ec4:	08007433 	.word	0x08007433
 8006ec8:	08007a6b 	.word	0x08007a6b
 8006ecc:	08007a6b 	.word	0x08007a6b
 8006ed0:	08007a6b 	.word	0x08007a6b
 8006ed4:	08007a6b 	.word	0x08007a6b
 8006ed8:	08007a6b 	.word	0x08007a6b
 8006edc:	08007a6b 	.word	0x08007a6b
 8006ee0:	08007a6b 	.word	0x08007a6b
 8006ee4:	080074b7 	.word	0x080074b7
 8006ee8:	08007a6b 	.word	0x08007a6b
 8006eec:	08007a6b 	.word	0x08007a6b
 8006ef0:	08007a6b 	.word	0x08007a6b
 8006ef4:	08007a6b 	.word	0x08007a6b
 8006ef8:	08007a6b 	.word	0x08007a6b
 8006efc:	08007a6b 	.word	0x08007a6b
 8006f00:	08007a6b 	.word	0x08007a6b
 8006f04:	08007a6b 	.word	0x08007a6b
 8006f08:	08007a6b 	.word	0x08007a6b
 8006f0c:	08007a6b 	.word	0x08007a6b
 8006f10:	08007a6b 	.word	0x08007a6b
 8006f14:	08007a6b 	.word	0x08007a6b
 8006f18:	08007a6b 	.word	0x08007a6b
 8006f1c:	08007a6b 	.word	0x08007a6b
 8006f20:	08007a6b 	.word	0x08007a6b
 8006f24:	08007539 	.word	0x08007539
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	f000 83e6 	beq.w	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006f30:	f000 bd9b 	b.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006f34:	40021000 	.word	0x40021000
 8006f38:	0007a120 	.word	0x0007a120
 8006f3c:	08018ef8 	.word	0x08018ef8
 8006f40:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006f44:	69b9      	ldr	r1, [r7, #24]
 8006f46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f4a:	f000 ff83 	bl	8007e54 <RCCEx_GetSAIxPeriphCLKFreq>
 8006f4e:	61f8      	str	r0, [r7, #28]
      break;
 8006f50:	f000 bd8e 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006f5a:	f000 ff7b 	bl	8007e54 <RCCEx_GetSAIxPeriphCLKFreq>
 8006f5e:	61f8      	str	r0, [r7, #28]
      break;
 8006f60:	f000 bd86 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006f64:	4b9a      	ldr	r3, [pc, #616]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f76:	d015      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f7e:	f200 8092 	bhi.w	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f88:	d029      	beq.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f90:	f200 8089 	bhi.w	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d07b      	beq.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fa0:	d04a      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8006fa2:	e080      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006fa4:	4b8a      	ldr	r3, [pc, #552]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d17d      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006fb0:	4b87      	ldr	r3, [pc, #540]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8006fbc:	4b84      	ldr	r3, [pc, #528]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	091b      	lsrs	r3, r3, #4
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	e005      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8006fc8:	4b81      	ldr	r3, [pc, #516]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	4a7f      	ldr	r2, [pc, #508]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fda:	61fb      	str	r3, [r7, #28]
          break;
 8006fdc:	e066      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006fde:	4b7c      	ldr	r3, [pc, #496]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fea:	d162      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006fec:	4b78      	ldr	r3, [pc, #480]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff8:	d15b      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006ffa:	4b75      	ldr	r3, [pc, #468]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007004:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	fb03 f202 	mul.w	r2, r3, r2
 800700e:	4b70      	ldr	r3, [pc, #448]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	091b      	lsrs	r3, r3, #4
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	3301      	adds	r3, #1
 800701a:	fbb2 f3f3 	udiv	r3, r2, r3
 800701e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007020:	4b6b      	ldr	r3, [pc, #428]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	0d5b      	lsrs	r3, r3, #21
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	3301      	adds	r3, #1
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	fbb2 f3f3 	udiv	r3, r2, r3
 8007034:	61fb      	str	r3, [r7, #28]
          break;
 8007036:	e03c      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007038:	4b65      	ldr	r3, [pc, #404]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007044:	d138      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007046:	4b62      	ldr	r3, [pc, #392]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800704e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007052:	d131      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007054:	4b5e      	ldr	r3, [pc, #376]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	0a1b      	lsrs	r3, r3, #8
 800705a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800705e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	fb03 f202 	mul.w	r2, r3, r2
 8007068:	4b59      	ldr	r3, [pc, #356]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	091b      	lsrs	r3, r3, #4
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	3301      	adds	r3, #1
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800707a:	4b55      	ldr	r3, [pc, #340]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	0d5b      	lsrs	r3, r3, #21
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	3301      	adds	r3, #1
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	fbb2 f3f3 	udiv	r3, r2, r3
 800708e:	61fb      	str	r3, [r7, #28]
          break;
 8007090:	e012      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007092:	4b4f      	ldr	r3, [pc, #316]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b02      	cmp	r3, #2
 800709e:	d10e      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80070a0:	4b4d      	ldr	r3, [pc, #308]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80070a2:	61fb      	str	r3, [r7, #28]
          break;
 80070a4:	e00b      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80070a6:	bf00      	nop
 80070a8:	f000 bce2 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070ac:	bf00      	nop
 80070ae:	f000 bcdf 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070b2:	bf00      	nop
 80070b4:	f000 bcdc 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070b8:	bf00      	nop
 80070ba:	f000 bcd9 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070be:	bf00      	nop
        break;
 80070c0:	f000 bcd6 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80070c4:	4b42      	ldr	r3, [pc, #264]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80070c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070d2:	d13d      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80070d4:	4b3e      	ldr	r3, [pc, #248]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070e0:	f040 84c5 	bne.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80070e4:	4b3a      	ldr	r3, [pc, #232]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f0:	f040 84bd 	bne.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80070f4:	4b36      	ldr	r3, [pc, #216]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fe:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	fb03 f202 	mul.w	r2, r3, r2
 8007108:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	091b      	lsrs	r3, r3, #4
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	3301      	adds	r3, #1
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800711a:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	0edb      	lsrs	r3, r3, #27
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800712c:	4b28      	ldr	r3, [pc, #160]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8007138:	2311      	movs	r3, #17
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e001      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800713e:	2307      	movs	r3, #7
 8007140:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	fbb2 f3f3 	udiv	r3, r2, r3
 800714a:	61fb      	str	r3, [r7, #28]
      break;
 800714c:	f000 bc8f 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007150:	4b1f      	ldr	r3, [pc, #124]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007156:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007162:	d016      	beq.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800716a:	f200 809b 	bhi.w	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007174:	d032      	beq.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800717c:	f200 8092 	bhi.w	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8084 	beq.w	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800718e:	d052      	beq.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8007190:	e088      	b.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007192:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b02      	cmp	r3, #2
 800719c:	f040 8084 	bne.w	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80071ac:	4b08      	ldr	r3, [pc, #32]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	e005      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80071b8:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071be:	0a1b      	lsrs	r3, r3, #8
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	4a03      	ldr	r2, [pc, #12]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ca:	61fb      	str	r3, [r7, #28]
          break;
 80071cc:	e06c      	b.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80071ce:	bf00      	nop
 80071d0:	40021000 	.word	0x40021000
 80071d4:	08018ef8 	.word	0x08018ef8
 80071d8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80071dc:	4ba5      	ldr	r3, [pc, #660]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071e8:	d160      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80071ea:	4ba2      	ldr	r3, [pc, #648]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071f6:	d159      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80071f8:	4b9e      	ldr	r3, [pc, #632]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	0a1b      	lsrs	r3, r3, #8
 80071fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007202:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	fb03 f202 	mul.w	r2, r3, r2
 800720c:	4b99      	ldr	r3, [pc, #612]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	091b      	lsrs	r3, r3, #4
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	3301      	adds	r3, #1
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800721e:	4b95      	ldr	r3, [pc, #596]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	0d5b      	lsrs	r3, r3, #21
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	3301      	adds	r3, #1
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007232:	61fb      	str	r3, [r7, #28]
          break;
 8007234:	e03a      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007236:	4b8f      	ldr	r3, [pc, #572]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800723e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007242:	d135      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007244:	4b8b      	ldr	r3, [pc, #556]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800724c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007250:	d12e      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007252:	4b88      	ldr	r3, [pc, #544]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	fb03 f202 	mul.w	r2, r3, r2
 8007266:	4b83      	ldr	r3, [pc, #524]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	091b      	lsrs	r3, r3, #4
 800726c:	f003 030f 	and.w	r3, r3, #15
 8007270:	3301      	adds	r3, #1
 8007272:	fbb2 f3f3 	udiv	r3, r2, r3
 8007276:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007278:	4b7e      	ldr	r3, [pc, #504]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	0d5b      	lsrs	r3, r3, #21
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	3301      	adds	r3, #1
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	61fb      	str	r3, [r7, #28]
          break;
 800728e:	e00f      	b.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007290:	4b78      	ldr	r3, [pc, #480]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b02      	cmp	r3, #2
 800729c:	d10a      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800729e:	4b76      	ldr	r3, [pc, #472]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072a0:	61fb      	str	r3, [r7, #28]
          break;
 80072a2:	e007      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80072a4:	bf00      	nop
 80072a6:	e3e2      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80072a8:	bf00      	nop
 80072aa:	e3e0      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80072ac:	bf00      	nop
 80072ae:	e3de      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80072b0:	bf00      	nop
 80072b2:	e3dc      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80072b4:	bf00      	nop
      break;
 80072b6:	e3da      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80072b8:	4b6e      	ldr	r3, [pc, #440]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d827      	bhi.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072e9 	.word	0x080072e9
 80072d8:	080072f1 	.word	0x080072f1
 80072dc:	08007305 	.word	0x08007305
          frequency = HAL_RCC_GetPCLK2Freq();
 80072e0:	f7ff f84c 	bl	800637c <HAL_RCC_GetPCLK2Freq>
 80072e4:	61f8      	str	r0, [r7, #28]
          break;
 80072e6:	e01d      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80072e8:	f7fe ff9c 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80072ec:	61f8      	str	r0, [r7, #28]
          break;
 80072ee:	e019      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072f0:	4b60      	ldr	r3, [pc, #384]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072fc:	d10f      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 80072fe:	4b5f      	ldr	r3, [pc, #380]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007300:	61fb      	str	r3, [r7, #28]
          break;
 8007302:	e00c      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007304:	4b5b      	ldr	r3, [pc, #364]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b02      	cmp	r3, #2
 8007310:	d107      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8007312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007316:	61fb      	str	r3, [r7, #28]
          break;
 8007318:	e003      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 800731a:	bf00      	nop
 800731c:	e3a8      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800731e:	bf00      	nop
 8007320:	e3a6      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007322:	bf00      	nop
        break;
 8007324:	e3a4      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007326:	4b53      	ldr	r3, [pc, #332]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732c:	f003 030c 	and.w	r3, r3, #12
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b0c      	cmp	r3, #12
 8007336:	d83a      	bhi.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8007338:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	08007375 	.word	0x08007375
 8007344:	080073af 	.word	0x080073af
 8007348:	080073af 	.word	0x080073af
 800734c:	080073af 	.word	0x080073af
 8007350:	0800737d 	.word	0x0800737d
 8007354:	080073af 	.word	0x080073af
 8007358:	080073af 	.word	0x080073af
 800735c:	080073af 	.word	0x080073af
 8007360:	08007385 	.word	0x08007385
 8007364:	080073af 	.word	0x080073af
 8007368:	080073af 	.word	0x080073af
 800736c:	080073af 	.word	0x080073af
 8007370:	08007399 	.word	0x08007399
          frequency = HAL_RCC_GetPCLK1Freq();
 8007374:	f7fe ffec 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007378:	61f8      	str	r0, [r7, #28]
          break;
 800737a:	e01d      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 800737c:	f7fe ff52 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007380:	61f8      	str	r0, [r7, #28]
          break;
 8007382:	e019      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007384:	4b3b      	ldr	r3, [pc, #236]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800738c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007390:	d10f      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8007392:	4b3a      	ldr	r3, [pc, #232]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007394:	61fb      	str	r3, [r7, #28]
          break;
 8007396:	e00c      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007398:	4b36      	ldr	r3, [pc, #216]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800739a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d107      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80073a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073aa:	61fb      	str	r3, [r7, #28]
          break;
 80073ac:	e003      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80073ae:	bf00      	nop
 80073b0:	e35e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80073b2:	bf00      	nop
 80073b4:	e35c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80073b6:	bf00      	nop
        break;
 80073b8:	e35a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80073ba:	4b2e      	ldr	r3, [pc, #184]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b30      	cmp	r3, #48	; 0x30
 80073ca:	d021      	beq.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b30      	cmp	r3, #48	; 0x30
 80073d0:	d829      	bhi.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	d011      	beq.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d823      	bhi.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b10      	cmp	r3, #16
 80073e8:	d004      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 80073ea:	e01c      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80073ec:	f7fe ffb0 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 80073f0:	61f8      	str	r0, [r7, #28]
          break;
 80073f2:	e01d      	b.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80073f4:	f7fe ff16 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80073f8:	61f8      	str	r0, [r7, #28]
          break;
 80073fa:	e019      	b.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073fc:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007408:	d10f      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800740a:	4b1c      	ldr	r3, [pc, #112]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800740c:	61fb      	str	r3, [r7, #28]
          break;
 800740e:	e00c      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007410:	4b18      	ldr	r3, [pc, #96]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b02      	cmp	r3, #2
 800741c:	d107      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007422:	61fb      	str	r3, [r7, #28]
          break;
 8007424:	e003      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8007426:	bf00      	nop
 8007428:	e322      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800742a:	bf00      	nop
 800742c:	e320      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800742e:	bf00      	nop
        break;
 8007430:	e31e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007438:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2bc0      	cmp	r3, #192	; 0xc0
 8007442:	d027      	beq.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2bc0      	cmp	r3, #192	; 0xc0
 8007448:	d82f      	bhi.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d017      	beq.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b80      	cmp	r3, #128	; 0x80
 8007454:	d829      	bhi.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b40      	cmp	r3, #64	; 0x40
 8007460:	d004      	beq.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8007462:	e022      	b.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007464:	f7fe ff74 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007468:	61f8      	str	r0, [r7, #28]
          break;
 800746a:	e023      	b.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800746c:	f7fe feda 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007470:	61f8      	str	r0, [r7, #28]
          break;
 8007472:	e01f      	b.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8007474:	40021000 	.word	0x40021000
 8007478:	02dc6c00 	.word	0x02dc6c00
 800747c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007480:	4b9b      	ldr	r3, [pc, #620]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800748c:	d10f      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800748e:	4b99      	ldr	r3, [pc, #612]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007490:	61fb      	str	r3, [r7, #28]
          break;
 8007492:	e00c      	b.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007494:	4b96      	ldr	r3, [pc, #600]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d107      	bne.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80074a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074a6:	61fb      	str	r3, [r7, #28]
          break;
 80074a8:	e003      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80074aa:	bf00      	nop
 80074ac:	e2e0      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80074ae:	bf00      	nop
 80074b0:	e2de      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80074b2:	bf00      	nop
        break;
 80074b4:	e2dc      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80074b6:	4b8e      	ldr	r3, [pc, #568]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074c8:	d025      	beq.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d0:	d82c      	bhi.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d8:	d013      	beq.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e0:	d824      	bhi.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ee:	d004      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 80074f0:	e01c      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80074f2:	f7fe ff2d 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 80074f6:	61f8      	str	r0, [r7, #28]
          break;
 80074f8:	e01d      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80074fa:	f7fe fe93 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80074fe:	61f8      	str	r0, [r7, #28]
          break;
 8007500:	e019      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007502:	4b7b      	ldr	r3, [pc, #492]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800750a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750e:	d10f      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8007510:	4b78      	ldr	r3, [pc, #480]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007512:	61fb      	str	r3, [r7, #28]
          break;
 8007514:	e00c      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007516:	4b76      	ldr	r3, [pc, #472]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b02      	cmp	r3, #2
 8007522:	d107      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8007524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007528:	61fb      	str	r3, [r7, #28]
          break;
 800752a:	e003      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800752c:	bf00      	nop
 800752e:	e29f      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007530:	bf00      	nop
 8007532:	e29d      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007534:	bf00      	nop
        break;
 8007536:	e29b      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007538:	4b6d      	ldr	r3, [pc, #436]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800753a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800754a:	d025      	beq.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007552:	d82c      	bhi.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755a:	d013      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007562:	d824      	bhi.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007570:	d004      	beq.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8007572:	e01c      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007574:	f7fe feec 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007578:	61f8      	str	r0, [r7, #28]
          break;
 800757a:	e01d      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 800757c:	f7fe fe52 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007580:	61f8      	str	r0, [r7, #28]
          break;
 8007582:	e019      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007584:	4b5a      	ldr	r3, [pc, #360]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007590:	d10f      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8007592:	4b58      	ldr	r3, [pc, #352]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007594:	61fb      	str	r3, [r7, #28]
          break;
 8007596:	e00c      	b.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007598:	4b55      	ldr	r3, [pc, #340]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800759a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d107      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075aa:	61fb      	str	r3, [r7, #28]
          break;
 80075ac:	e003      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80075ae:	bf00      	nop
 80075b0:	e25e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80075b2:	bf00      	nop
 80075b4:	e25c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80075b6:	bf00      	nop
        break;
 80075b8:	e25a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075ba:	4b4d      	ldr	r3, [pc, #308]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075cc:	d007      	beq.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075d4:	d12f      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80075d6:	f7fe fe25 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80075da:	61f8      	str	r0, [r7, #28]
          break;
 80075dc:	e02e      	b.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80075de:	4b44      	ldr	r3, [pc, #272]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075ea:	d126      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 80075ec:	4b40      	ldr	r3, [pc, #256]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d020      	beq.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80075f8:	4b3d      	ldr	r3, [pc, #244]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	0a1b      	lsrs	r3, r3, #8
 80075fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007602:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	fb03 f202 	mul.w	r2, r3, r2
 800760c:	4b38      	ldr	r3, [pc, #224]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	091b      	lsrs	r3, r3, #4
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	3301      	adds	r3, #1
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800761e:	4b34      	ldr	r3, [pc, #208]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	0e5b      	lsrs	r3, r3, #25
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	3301      	adds	r3, #1
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007632:	61fb      	str	r3, [r7, #28]
          break;
 8007634:	e001      	b.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8007636:	bf00      	nop
 8007638:	e21a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800763a:	bf00      	nop
        break;
 800763c:	e218      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800763e:	4b2c      	ldr	r3, [pc, #176]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007640:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d103      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007650:	f7fe fe94 	bl	800637c <HAL_RCC_GetPCLK2Freq>
 8007654:	61f8      	str	r0, [r7, #28]
        break;
 8007656:	e20b      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007658:	f7fe fde4 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 800765c:	61f8      	str	r0, [r7, #28]
        break;
 800765e:	e207      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007660:	4b23      	ldr	r3, [pc, #140]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007666:	f003 0318 	and.w	r3, r3, #24
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b10      	cmp	r3, #16
 8007670:	d010      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b10      	cmp	r3, #16
 8007676:	d834      	bhi.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b08      	cmp	r3, #8
 8007682:	d024      	beq.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8007684:	e02d      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007686:	69b9      	ldr	r1, [r7, #24]
 8007688:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800768c:	f000 fbe2 	bl	8007e54 <RCCEx_GetSAIxPeriphCLKFreq>
 8007690:	61f8      	str	r0, [r7, #28]
          break;
 8007692:	e02b      	b.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007694:	4b16      	ldr	r3, [pc, #88]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b02      	cmp	r3, #2
 800769e:	d122      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80076a0:	4b13      	ldr	r3, [pc, #76]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80076ac:	4b10      	ldr	r3, [pc, #64]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	091b      	lsrs	r3, r3, #4
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	e005      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80076b8:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076be:	0a1b      	lsrs	r3, r3, #8
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	4a0c      	ldr	r2, [pc, #48]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80076c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ca:	61fb      	str	r3, [r7, #28]
          break;
 80076cc:	e00b      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076ce:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076da:	d106      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80076dc:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076de:	61fb      	str	r3, [r7, #28]
          break;
 80076e0:	e003      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80076e2:	bf00      	nop
 80076e4:	e1c4      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80076e6:	bf00      	nop
 80076e8:	e1c2      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80076ea:	bf00      	nop
        break;
 80076ec:	e1c0      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 80076ee:	bf00      	nop
 80076f0:	40021000 	.word	0x40021000
 80076f4:	00f42400 	.word	0x00f42400
 80076f8:	08018ef8 	.word	0x08018ef8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80076fc:	4b96      	ldr	r3, [pc, #600]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80076fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007702:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800770e:	d013      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007716:	d819      	bhi.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d004      	beq.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007724:	d004      	beq.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8007726:	e011      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007728:	f7fe fe12 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 800772c:	61f8      	str	r0, [r7, #28]
          break;
 800772e:	e010      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007730:	f7fe fd78 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007734:	61f8      	str	r0, [r7, #28]
          break;
 8007736:	e00c      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007738:	4b87      	ldr	r3, [pc, #540]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007744:	d104      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8007746:	4b85      	ldr	r3, [pc, #532]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007748:	61fb      	str	r3, [r7, #28]
          break;
 800774a:	e001      	b.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800774c:	bf00      	nop
 800774e:	e18f      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007750:	bf00      	nop
        break;
 8007752:	e18d      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007754:	4b80      	ldr	r3, [pc, #512]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007766:	d013      	beq.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800776e:	d819      	bhi.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800777c:	d004      	beq.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800777e:	e011      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007780:	f7fe fde6 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007784:	61f8      	str	r0, [r7, #28]
          break;
 8007786:	e010      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8007788:	f7fe fd4c 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 800778c:	61f8      	str	r0, [r7, #28]
          break;
 800778e:	e00c      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007790:	4b71      	ldr	r3, [pc, #452]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779c:	d104      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800779e:	4b6f      	ldr	r3, [pc, #444]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077a0:	61fb      	str	r3, [r7, #28]
          break;
 80077a2:	e001      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80077a4:	bf00      	nop
 80077a6:	e163      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80077a8:	bf00      	nop
        break;
 80077aa:	e161      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80077ac:	4b6a      	ldr	r3, [pc, #424]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80077ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077be:	d013      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c6:	d819      	bhi.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d4:	d004      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80077d6:	e011      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80077d8:	f7fe fdba 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 80077dc:	61f8      	str	r0, [r7, #28]
          break;
 80077de:	e010      	b.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80077e0:	f7fe fd20 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80077e4:	61f8      	str	r0, [r7, #28]
          break;
 80077e6:	e00c      	b.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077e8:	4b5b      	ldr	r3, [pc, #364]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f4:	d104      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 80077f6:	4b59      	ldr	r3, [pc, #356]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077f8:	61fb      	str	r3, [r7, #28]
          break;
 80077fa:	e001      	b.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 80077fc:	bf00      	nop
 80077fe:	e137      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007800:	bf00      	nop
        break;
 8007802:	e135      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007804:	4b54      	ldr	r3, [pc, #336]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d011      	beq.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d818      	bhi.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d004      	beq.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8007828:	e011      	b.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800782a:	f7fe fd91 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 800782e:	61f8      	str	r0, [r7, #28]
          break;
 8007830:	e010      	b.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8007832:	f7fe fcf7 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007836:	61f8      	str	r0, [r7, #28]
          break;
 8007838:	e00c      	b.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800783a:	4b47      	ldr	r3, [pc, #284]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007846:	d104      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8007848:	4b44      	ldr	r3, [pc, #272]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800784a:	61fb      	str	r3, [r7, #28]
          break;
 800784c:	e001      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800784e:	bf00      	nop
 8007850:	e10e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007852:	bf00      	nop
        break;
 8007854:	e10c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007856:	4b40      	ldr	r3, [pc, #256]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007868:	d02c      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007870:	d833      	bhi.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007878:	d01a      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007880:	d82b      	bhi.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800788e:	d004      	beq.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8007890:	e023      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007892:	f7fe fd5d 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007896:	61f8      	str	r0, [r7, #28]
          break;
 8007898:	e026      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800789a:	4b2f      	ldr	r3, [pc, #188]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800789c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d11a      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80078a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80078ac:	61fb      	str	r3, [r7, #28]
          break;
 80078ae:	e016      	b.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078b0:	4b29      	ldr	r3, [pc, #164]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078bc:	d111      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 80078be:	4b27      	ldr	r3, [pc, #156]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80078c0:	61fb      	str	r3, [r7, #28]
          break;
 80078c2:	e00e      	b.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80078c4:	4b24      	ldr	r3, [pc, #144]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d109      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80078d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d6:	61fb      	str	r3, [r7, #28]
          break;
 80078d8:	e005      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80078da:	bf00      	nop
 80078dc:	e0c8      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80078de:	bf00      	nop
 80078e0:	e0c6      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80078e2:	bf00      	nop
 80078e4:	e0c4      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80078e6:	bf00      	nop
        break;
 80078e8:	e0c2      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80078ea:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80078ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078fc:	d030      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007904:	d837      	bhi.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800790c:	d01a      	beq.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007914:	d82f      	bhi.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007922:	d004      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8007924:	e027      	b.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007926:	f7fe fd13 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 800792a:	61f8      	str	r0, [r7, #28]
          break;
 800792c:	e02a      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800792e:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b02      	cmp	r3, #2
 800793a:	d11e      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 800793c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007940:	61fb      	str	r3, [r7, #28]
          break;
 8007942:	e01a      	b.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007944:	4b04      	ldr	r3, [pc, #16]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800794c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007950:	d115      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8007952:	4b02      	ldr	r3, [pc, #8]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007954:	61fb      	str	r3, [r7, #28]
          break;
 8007956:	e012      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007958:	40021000 	.word	0x40021000
 800795c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007960:	4b46      	ldr	r3, [pc, #280]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b02      	cmp	r3, #2
 800796c:	d109      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800796e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007972:	61fb      	str	r3, [r7, #28]
          break;
 8007974:	e005      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8007976:	bf00      	nop
 8007978:	e07a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800797a:	bf00      	nop
 800797c:	e078      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800797e:	bf00      	nop
 8007980:	e076      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007982:	bf00      	nop
        break;
 8007984:	e074      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007986:	4b3d      	ldr	r3, [pc, #244]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007988:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800798c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007998:	d02c      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079a0:	d855      	bhi.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ae:	d004      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80079b0:	e04d      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80079b2:	f7fe fc37 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80079b6:	61f8      	str	r0, [r7, #28]
          break;
 80079b8:	e04e      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80079ba:	4b30      	ldr	r3, [pc, #192]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d145      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80079c6:	4b2d      	ldr	r3, [pc, #180]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d005      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80079d2:	4b2a      	ldr	r3, [pc, #168]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	e005      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80079de:	4b27      	ldr	r3, [pc, #156]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	4a25      	ldr	r2, [pc, #148]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80079ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f0:	61fb      	str	r3, [r7, #28]
          break;
 80079f2:	e02e      	b.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80079f4:	4b21      	ldr	r3, [pc, #132]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a00:	d129      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007a02:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0e:	d122      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007a10:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	fb03 f202 	mul.w	r2, r3, r2
 8007a24:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	091b      	lsrs	r3, r3, #4
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	3301      	adds	r3, #1
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a34:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	0d5b      	lsrs	r3, r3, #21
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	3301      	adds	r3, #1
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4a:	61fb      	str	r3, [r7, #28]
          break;
 8007a4c:	e003      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8007a4e:	bf00      	nop
 8007a50:	e00e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a52:	bf00      	nop
 8007a54:	e00c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a56:	bf00      	nop
        break;
 8007a58:	e00a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a5a:	bf00      	nop
 8007a5c:	e008      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a5e:	bf00      	nop
 8007a60:	e006      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a62:	bf00      	nop
 8007a64:	e004      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a66:	bf00      	nop
 8007a68:	e002      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a6a:	bf00      	nop
 8007a6c:	e000      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a6e:	bf00      	nop
    }
  }

  return(frequency);
 8007a70:	69fb      	ldr	r3, [r7, #28]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3720      	adds	r7, #32
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	08018ef8 	.word	0x08018ef8

08007a84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a92:	4b72      	ldr	r3, [pc, #456]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00e      	beq.n	8007abc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a9e:	4b6f      	ldr	r3, [pc, #444]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f003 0203 	and.w	r2, r3, #3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d103      	bne.n	8007ab6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d142      	bne.n	8007b3c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	73fb      	strb	r3, [r7, #15]
 8007aba:	e03f      	b.n	8007b3c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d018      	beq.n	8007af6 <RCCEx_PLLSAI1_Config+0x72>
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d825      	bhi.n	8007b14 <RCCEx_PLLSAI1_Config+0x90>
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d002      	beq.n	8007ad2 <RCCEx_PLLSAI1_Config+0x4e>
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d009      	beq.n	8007ae4 <RCCEx_PLLSAI1_Config+0x60>
 8007ad0:	e020      	b.n	8007b14 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ad2:	4b62      	ldr	r3, [pc, #392]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d11d      	bne.n	8007b1a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ae2:	e01a      	b.n	8007b1a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ae4:	4b5d      	ldr	r3, [pc, #372]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d116      	bne.n	8007b1e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007af4:	e013      	b.n	8007b1e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007af6:	4b59      	ldr	r3, [pc, #356]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10f      	bne.n	8007b22 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007b02:	4b56      	ldr	r3, [pc, #344]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b12:	e006      	b.n	8007b22 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
      break;
 8007b18:	e004      	b.n	8007b24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e002      	b.n	8007b24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e000      	b.n	8007b24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d108      	bne.n	8007b3c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007b2a:	4b4c      	ldr	r3, [pc, #304]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	f023 0203 	bic.w	r2, r3, #3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4949      	ldr	r1, [pc, #292]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f040 8086 	bne.w	8007c50 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b44:	4b45      	ldr	r3, [pc, #276]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a44      	ldr	r2, [pc, #272]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b50:	f7fa fb7e 	bl	8002250 <HAL_GetTick>
 8007b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b56:	e009      	b.n	8007b6c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b58:	f7fa fb7a 	bl	8002250 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d902      	bls.n	8007b6c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	73fb      	strb	r3, [r7, #15]
        break;
 8007b6a:	e005      	b.n	8007b78 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b6c:	4b3b      	ldr	r3, [pc, #236]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1ef      	bne.n	8007b58 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d168      	bne.n	8007c50 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d113      	bne.n	8007bac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b84:	4b35      	ldr	r3, [pc, #212]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b86:	691a      	ldr	r2, [r3, #16]
 8007b88:	4b35      	ldr	r3, [pc, #212]	; (8007c60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6892      	ldr	r2, [r2, #8]
 8007b90:	0211      	lsls	r1, r2, #8
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	68d2      	ldr	r2, [r2, #12]
 8007b96:	06d2      	lsls	r2, r2, #27
 8007b98:	4311      	orrs	r1, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6852      	ldr	r2, [r2, #4]
 8007b9e:	3a01      	subs	r2, #1
 8007ba0:	0112      	lsls	r2, r2, #4
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	492d      	ldr	r1, [pc, #180]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	610b      	str	r3, [r1, #16]
 8007baa:	e02d      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d115      	bne.n	8007bde <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bb2:	4b2a      	ldr	r3, [pc, #168]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	4b2b      	ldr	r3, [pc, #172]	; (8007c64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6892      	ldr	r2, [r2, #8]
 8007bbe:	0211      	lsls	r1, r2, #8
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6912      	ldr	r2, [r2, #16]
 8007bc4:	0852      	lsrs	r2, r2, #1
 8007bc6:	3a01      	subs	r2, #1
 8007bc8:	0552      	lsls	r2, r2, #21
 8007bca:	4311      	orrs	r1, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6852      	ldr	r2, [r2, #4]
 8007bd0:	3a01      	subs	r2, #1
 8007bd2:	0112      	lsls	r2, r2, #4
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	4921      	ldr	r1, [pc, #132]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	610b      	str	r3, [r1, #16]
 8007bdc:	e014      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bde:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	4b21      	ldr	r3, [pc, #132]	; (8007c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6892      	ldr	r2, [r2, #8]
 8007bea:	0211      	lsls	r1, r2, #8
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6952      	ldr	r2, [r2, #20]
 8007bf0:	0852      	lsrs	r2, r2, #1
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	0652      	lsls	r2, r2, #25
 8007bf6:	4311      	orrs	r1, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6852      	ldr	r2, [r2, #4]
 8007bfc:	3a01      	subs	r2, #1
 8007bfe:	0112      	lsls	r2, r2, #4
 8007c00:	430a      	orrs	r2, r1
 8007c02:	4916      	ldr	r1, [pc, #88]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007c08:	4b14      	ldr	r3, [pc, #80]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a13      	ldr	r2, [pc, #76]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c14:	f7fa fb1c 	bl	8002250 <HAL_GetTick>
 8007c18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c1a:	e009      	b.n	8007c30 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c1c:	f7fa fb18 	bl	8002250 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d902      	bls.n	8007c30 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	73fb      	strb	r3, [r7, #15]
          break;
 8007c2e:	e005      	b.n	8007c3c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c30:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0ef      	beq.n	8007c1c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007c42:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	4904      	ldr	r1, [pc, #16]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	07ff800f 	.word	0x07ff800f
 8007c64:	ff9f800f 	.word	0xff9f800f
 8007c68:	f9ff800f 	.word	0xf9ff800f

08007c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c7a:	4b72      	ldr	r3, [pc, #456]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f003 0303 	and.w	r3, r3, #3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00e      	beq.n	8007ca4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007c86:	4b6f      	ldr	r3, [pc, #444]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f003 0203 	and.w	r2, r3, #3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d103      	bne.n	8007c9e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
       ||
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d142      	bne.n	8007d24 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	73fb      	strb	r3, [r7, #15]
 8007ca2:	e03f      	b.n	8007d24 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d018      	beq.n	8007cde <RCCEx_PLLSAI2_Config+0x72>
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d825      	bhi.n	8007cfc <RCCEx_PLLSAI2_Config+0x90>
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d002      	beq.n	8007cba <RCCEx_PLLSAI2_Config+0x4e>
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d009      	beq.n	8007ccc <RCCEx_PLLSAI2_Config+0x60>
 8007cb8:	e020      	b.n	8007cfc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007cba:	4b62      	ldr	r3, [pc, #392]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d11d      	bne.n	8007d02 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cca:	e01a      	b.n	8007d02 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ccc:	4b5d      	ldr	r3, [pc, #372]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d116      	bne.n	8007d06 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cdc:	e013      	b.n	8007d06 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007cde:	4b59      	ldr	r3, [pc, #356]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10f      	bne.n	8007d0a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007cea:	4b56      	ldr	r3, [pc, #344]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d109      	bne.n	8007d0a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cfa:	e006      	b.n	8007d0a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007d00:	e004      	b.n	8007d0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007d02:	bf00      	nop
 8007d04:	e002      	b.n	8007d0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007d0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d108      	bne.n	8007d24 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007d12:	4b4c      	ldr	r3, [pc, #304]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f023 0203 	bic.w	r2, r3, #3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4949      	ldr	r1, [pc, #292]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 8086 	bne.w	8007e38 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007d2c:	4b45      	ldr	r3, [pc, #276]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a44      	ldr	r2, [pc, #272]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d38:	f7fa fa8a 	bl	8002250 <HAL_GetTick>
 8007d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d3e:	e009      	b.n	8007d54 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d40:	f7fa fa86 	bl	8002250 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d902      	bls.n	8007d54 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	73fb      	strb	r3, [r7, #15]
        break;
 8007d52:	e005      	b.n	8007d60 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d54:	4b3b      	ldr	r3, [pc, #236]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1ef      	bne.n	8007d40 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d168      	bne.n	8007e38 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d113      	bne.n	8007d94 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d6c:	4b35      	ldr	r3, [pc, #212]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d6e:	695a      	ldr	r2, [r3, #20]
 8007d70:	4b35      	ldr	r3, [pc, #212]	; (8007e48 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6892      	ldr	r2, [r2, #8]
 8007d78:	0211      	lsls	r1, r2, #8
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	68d2      	ldr	r2, [r2, #12]
 8007d7e:	06d2      	lsls	r2, r2, #27
 8007d80:	4311      	orrs	r1, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6852      	ldr	r2, [r2, #4]
 8007d86:	3a01      	subs	r2, #1
 8007d88:	0112      	lsls	r2, r2, #4
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	492d      	ldr	r1, [pc, #180]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	614b      	str	r3, [r1, #20]
 8007d92:	e02d      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d115      	bne.n	8007dc6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d9a:	4b2a      	ldr	r3, [pc, #168]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d9c:	695a      	ldr	r2, [r3, #20]
 8007d9e:	4b2b      	ldr	r3, [pc, #172]	; (8007e4c <RCCEx_PLLSAI2_Config+0x1e0>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6892      	ldr	r2, [r2, #8]
 8007da6:	0211      	lsls	r1, r2, #8
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6912      	ldr	r2, [r2, #16]
 8007dac:	0852      	lsrs	r2, r2, #1
 8007dae:	3a01      	subs	r2, #1
 8007db0:	0552      	lsls	r2, r2, #21
 8007db2:	4311      	orrs	r1, r2
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6852      	ldr	r2, [r2, #4]
 8007db8:	3a01      	subs	r2, #1
 8007dba:	0112      	lsls	r2, r2, #4
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	4921      	ldr	r1, [pc, #132]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	614b      	str	r3, [r1, #20]
 8007dc4:	e014      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007dc6:	4b1f      	ldr	r3, [pc, #124]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dc8:	695a      	ldr	r2, [r3, #20]
 8007dca:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6892      	ldr	r2, [r2, #8]
 8007dd2:	0211      	lsls	r1, r2, #8
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6952      	ldr	r2, [r2, #20]
 8007dd8:	0852      	lsrs	r2, r2, #1
 8007dda:	3a01      	subs	r2, #1
 8007ddc:	0652      	lsls	r2, r2, #25
 8007dde:	4311      	orrs	r1, r2
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6852      	ldr	r2, [r2, #4]
 8007de4:	3a01      	subs	r2, #1
 8007de6:	0112      	lsls	r2, r2, #4
 8007de8:	430a      	orrs	r2, r1
 8007dea:	4916      	ldr	r1, [pc, #88]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007df0:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dfc:	f7fa fa28 	bl	8002250 <HAL_GetTick>
 8007e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e02:	e009      	b.n	8007e18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e04:	f7fa fa24 	bl	8002250 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d902      	bls.n	8007e18 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	73fb      	strb	r3, [r7, #15]
          break;
 8007e16:	e005      	b.n	8007e24 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0ef      	beq.n	8007e04 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007e2a:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e2c:	695a      	ldr	r2, [r3, #20]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	4904      	ldr	r1, [pc, #16]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	40021000 	.word	0x40021000
 8007e48:	07ff800f 	.word	0x07ff800f
 8007e4c:	ff9f800f 	.word	0xff9f800f
 8007e50:	f9ff800f 	.word	0xf9ff800f

08007e54 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b089      	sub	sp, #36	; 0x24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e70:	d10b      	bne.n	8007e8a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007e72:	4b7e      	ldr	r3, [pc, #504]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e78:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007e7c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	2b60      	cmp	r3, #96	; 0x60
 8007e82:	d112      	bne.n	8007eaa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007e84:	4b7a      	ldr	r3, [pc, #488]	; (8008070 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	e00f      	b.n	8007eaa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e90:	d10b      	bne.n	8007eaa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007e92:	4b76      	ldr	r3, [pc, #472]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e9c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea4:	d101      	bne.n	8007eaa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007ea6:	4b72      	ldr	r3, [pc, #456]	; (8008070 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007ea8:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 80d6 	bne.w	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	2b40      	cmp	r3, #64	; 0x40
 8007eba:	d003      	beq.n	8007ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec2:	d13b      	bne.n	8007f3c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007ec4:	4b69      	ldr	r3, [pc, #420]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed0:	f040 80c4 	bne.w	800805c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007ed4:	4b65      	ldr	r3, [pc, #404]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80bd 	beq.w	800805c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007ee2:	4b62      	ldr	r3, [pc, #392]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	091b      	lsrs	r3, r3, #4
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	3301      	adds	r3, #1
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007ef6:	4b5d      	ldr	r3, [pc, #372]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f00:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007f02:	4b5a      	ldr	r3, [pc, #360]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	0edb      	lsrs	r3, r3, #27
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007f14:	4b55      	ldr	r3, [pc, #340]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007f20:	2311      	movs	r3, #17
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	e001      	b.n	8007f2a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007f26:	2307      	movs	r3, #7
 8007f28:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	fb03 f202 	mul.w	r2, r3, r2
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f38:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007f3a:	e08f      	b.n	800805c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d13a      	bne.n	8007fb8 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007f42:	4b4a      	ldr	r3, [pc, #296]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f4e:	f040 8086 	bne.w	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007f52:	4b46      	ldr	r3, [pc, #280]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d07f      	beq.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007f5e:	4b43      	ldr	r3, [pc, #268]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	091b      	lsrs	r3, r3, #4
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	3301      	adds	r3, #1
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f70:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007f72:	4b3e      	ldr	r3, [pc, #248]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	0a1b      	lsrs	r3, r3, #8
 8007f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007f7e:	4b3b      	ldr	r3, [pc, #236]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	0edb      	lsrs	r3, r3, #27
 8007f84:	f003 031f 	and.w	r3, r3, #31
 8007f88:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007f90:	4b36      	ldr	r3, [pc, #216]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007f9c:	2311      	movs	r3, #17
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	e001      	b.n	8007fa6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8007fa2:	2307      	movs	r3, #7
 8007fa4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	fb03 f202 	mul.w	r2, r3, r2
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	e052      	b.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d003      	beq.n	8007fc6 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc4:	d109      	bne.n	8007fda <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fc6:	4b29      	ldr	r3, [pc, #164]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd2:	d144      	bne.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007fd4:	4b27      	ldr	r3, [pc, #156]	; (8008074 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007fd6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fd8:	e041      	b.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d003      	beq.n	8007fe8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe6:	d13a      	bne.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007fe8:	4b20      	ldr	r3, [pc, #128]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff4:	d133      	bne.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d02d      	beq.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8008002:	4b1a      	ldr	r3, [pc, #104]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	091b      	lsrs	r3, r3, #4
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	3301      	adds	r3, #1
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	fbb2 f3f3 	udiv	r3, r2, r3
 8008014:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008020:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	0edb      	lsrs	r3, r3, #27
 8008028:	f003 031f 	and.w	r3, r3, #31
 800802c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8008040:	2311      	movs	r3, #17
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	e001      	b.n	800804a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8008046:	2307      	movs	r3, #7
 8008048:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	fb03 f202 	mul.w	r2, r3, r2
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	fbb2 f3f3 	udiv	r3, r2, r3
 8008058:	61fb      	str	r3, [r7, #28]
 800805a:	e000      	b.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800805c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800805e:	69fb      	ldr	r3, [r7, #28]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3724      	adds	r7, #36	; 0x24
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	40021000 	.word	0x40021000
 8008070:	001fff68 	.word	0x001fff68
 8008074:	00f42400 	.word	0x00f42400

08008078 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d06c      	beq.n	8008164 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7f9 fd7e 	bl	8001ba0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	22ca      	movs	r2, #202	; 0xca
 80080b2:	625a      	str	r2, [r3, #36]	; 0x24
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2253      	movs	r2, #83	; 0x53
 80080ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f9a0 	bl	8008402 <RTC_EnterInitMode>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d14b      	bne.n	8008164 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080de:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6899      	ldr	r1, [r3, #8]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	68d2      	ldr	r2, [r2, #12]
 8008106:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6919      	ldr	r1, [r3, #16]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	041a      	lsls	r2, r3, #16
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f9a3 	bl	8008468 <RTC_ExitInitMode>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d11b      	bne.n	8008164 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0203 	bic.w	r2, r2, #3
 800813a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69da      	ldr	r2, [r3, #28]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	22ff      	movs	r2, #255	; 0xff
 800815a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800816e:	b590      	push	{r4, r7, lr}
 8008170:	b087      	sub	sp, #28
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d101      	bne.n	8008188 <HAL_RTC_SetTime+0x1a>
 8008184:	2302      	movs	r3, #2
 8008186:	e08b      	b.n	80082a0 <HAL_RTC_SetTime+0x132>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	22ca      	movs	r2, #202	; 0xca
 800819e:	625a      	str	r2, [r3, #36]	; 0x24
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2253      	movs	r2, #83	; 0x53
 80081a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f92a 	bl	8008402 <RTC_EnterInitMode>
 80081ae:	4603      	mov	r3, r0
 80081b0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80081b2:	7cfb      	ldrb	r3, [r7, #19]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d163      	bne.n	8008280 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d126      	bne.n	800820c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f984 	bl	80084e4 <RTC_ByteToBcd2>
 80081dc:	4603      	mov	r3, r0
 80081de:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 f97d 	bl	80084e4 <RTC_ByteToBcd2>
 80081ea:	4603      	mov	r3, r0
 80081ec:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80081ee:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	789b      	ldrb	r3, [r3, #2]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f975 	bl	80084e4 <RTC_ByteToBcd2>
 80081fa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80081fc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	78db      	ldrb	r3, [r3, #3]
 8008204:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	e018      	b.n	800823e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800822c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008232:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	78db      	ldrb	r3, [r3, #3]
 8008238:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800823a:	4313      	orrs	r3, r2
 800823c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008248:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800824c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800825c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6899      	ldr	r1, [r3, #8]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	431a      	orrs	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 f8f6 	bl	8008468 <RTC_ExitInitMode>
 800827c:	4603      	mov	r3, r0
 800827e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	22ff      	movs	r2, #255	; 0xff
 8008286:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008288:	7cfb      	ldrb	r3, [r7, #19]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800829e:	7cfb      	ldrb	r3, [r7, #19]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	371c      	adds	r7, #28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}

080082a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80082a8:	b590      	push	{r4, r7, lr}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_RTC_SetDate+0x1a>
 80082be:	2302      	movs	r3, #2
 80082c0:	e075      	b.n	80083ae <HAL_RTC_SetDate+0x106>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2202      	movs	r2, #2
 80082ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10e      	bne.n	80082f6 <HAL_RTC_SetDate+0x4e>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	f003 0310 	and.w	r3, r3, #16
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d008      	beq.n	80082f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	f023 0310 	bic.w	r3, r3, #16
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	330a      	adds	r3, #10
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d11c      	bne.n	8008336 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	78db      	ldrb	r3, [r3, #3]
 8008300:	4618      	mov	r0, r3
 8008302:	f000 f8ef 	bl	80084e4 <RTC_ByteToBcd2>
 8008306:	4603      	mov	r3, r0
 8008308:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f8e8 	bl	80084e4 <RTC_ByteToBcd2>
 8008314:	4603      	mov	r3, r0
 8008316:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008318:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	789b      	ldrb	r3, [r3, #2]
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f8e0 	bl	80084e4 <RTC_ByteToBcd2>
 8008324:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008326:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	e00e      	b.n	8008354 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	78db      	ldrb	r3, [r3, #3]
 800833a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008342:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008348:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	22ca      	movs	r2, #202	; 0xca
 800835a:	625a      	str	r2, [r3, #36]	; 0x24
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2253      	movs	r2, #83	; 0x53
 8008362:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 f84c 	bl	8008402 <RTC_EnterInitMode>
 800836a:	4603      	mov	r3, r0
 800836c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800836e:	7cfb      	ldrb	r3, [r7, #19]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10c      	bne.n	800838e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800837e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008382:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f86f 	bl	8008468 <RTC_ExitInitMode>
 800838a:	4603      	mov	r3, r0
 800838c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	22ff      	movs	r2, #255	; 0xff
 8008394:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008396:	7cfb      	ldrb	r3, [r7, #19]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d103      	bne.n	80083a4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80083ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd90      	pop	{r4, r7, pc}

080083b6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80083cc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80083ce:	f7f9 ff3f 	bl	8002250 <HAL_GetTick>
 80083d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80083d4:	e009      	b.n	80083ea <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083d6:	f7f9 ff3b 	bl	8002250 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083e4:	d901      	bls.n	80083ea <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e007      	b.n	80083fa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d0ee      	beq.n	80083d6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d120      	bne.n	800845e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f04f 32ff 	mov.w	r2, #4294967295
 8008424:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008426:	f7f9 ff13 	bl	8002250 <HAL_GetTick>
 800842a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800842c:	e00d      	b.n	800844a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800842e:	f7f9 ff0f 	bl	8002250 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800843c:	d905      	bls.n	800844a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2203      	movs	r2, #3
 8008446:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <RTC_EnterInitMode+0x5c>
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	2b03      	cmp	r3, #3
 800845c:	d1e7      	bne.n	800842e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008474:	4b1a      	ldr	r3, [pc, #104]	; (80084e0 <RTC_ExitInitMode+0x78>)
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4a19      	ldr	r2, [pc, #100]	; (80084e0 <RTC_ExitInitMode+0x78>)
 800847a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800847e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008480:	4b17      	ldr	r3, [pc, #92]	; (80084e0 <RTC_ExitInitMode+0x78>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10c      	bne.n	80084a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7ff ff92 	bl	80083b6 <HAL_RTC_WaitForSynchro>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01e      	beq.n	80084d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2203      	movs	r2, #3
 800849c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	73fb      	strb	r3, [r7, #15]
 80084a4:	e017      	b.n	80084d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084a6:	4b0e      	ldr	r3, [pc, #56]	; (80084e0 <RTC_ExitInitMode+0x78>)
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4a0d      	ldr	r2, [pc, #52]	; (80084e0 <RTC_ExitInitMode+0x78>)
 80084ac:	f023 0320 	bic.w	r3, r3, #32
 80084b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff ff7f 	bl	80083b6 <HAL_RTC_WaitForSynchro>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2203      	movs	r2, #3
 80084c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084ca:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <RTC_ExitInitMode+0x78>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4a04      	ldr	r2, [pc, #16]	; (80084e0 <RTC_ExitInitMode+0x78>)
 80084d0:	f043 0320 	orr.w	r3, r3, #32
 80084d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	40002800 	.word	0x40002800

080084e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80084f6:	e005      	b.n	8008504 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3301      	adds	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80084fe:	7afb      	ldrb	r3, [r7, #11]
 8008500:	3b0a      	subs	r3, #10
 8008502:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008504:	7afb      	ldrb	r3, [r7, #11]
 8008506:	2b09      	cmp	r3, #9
 8008508:	d8f6      	bhi.n	80084f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	b2da      	uxtb	r2, r3
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	4313      	orrs	r3, r2
 8008516:	b2db      	uxtb	r3, r3
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e078      	b.n	8008628 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d105      	bne.n	800854e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7f9 fb5b 	bl	8001c04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2203      	movs	r2, #3
 8008552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f86a 	bl	8008630 <HAL_SD_InitCard>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e060      	b.n	8008628 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008566:	f107 0308 	add.w	r3, r7, #8
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fdb5 	bl	80090dc <HAL_SD_GetCardStatus>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e055      	b.n	8008628 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800857c:	7e3b      	ldrb	r3, [r7, #24]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008582:	7e7b      	ldrb	r3, [r7, #25]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d10a      	bne.n	80085a6 <HAL_SD_Init+0x82>
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	2b00      	cmp	r3, #0
 8008594:	d102      	bne.n	800859c <HAL_SD_Init+0x78>
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80085a4:	e00b      	b.n	80085be <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d104      	bne.n	80085b8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80085b6:	e002      	b.n	80085be <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fe6b 	bl	80092a0 <HAL_SD_ConfigWideBusOperation>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e029      	b.n	8008628 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80085d4:	f7f9 fe3c 	bl	8002250 <HAL_GetTick>
 80085d8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80085da:	e014      	b.n	8008606 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80085dc:	f7f9 fe38 	bl	8002250 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	d10c      	bne.n	8008606 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e010      	b.n	8008628 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 ff5e 	bl	80094c8 <HAL_SD_GetCardState>
 800860c:	4603      	mov	r3, r0
 800860e:	2b04      	cmp	r3, #4
 8008610:	d1e4      	bne.n	80085dc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3728      	adds	r7, #40	; 0x28
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008630:	b5b0      	push	{r4, r5, r7, lr}
 8008632:	b08e      	sub	sp, #56	; 0x38
 8008634:	af04      	add	r7, sp, #16
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008638:	2300      	movs	r3, #0
 800863a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008648:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800864c:	f7fe fafa 	bl	8006c44 <HAL_RCCEx_GetPeriphCLKFreq>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d109      	bne.n	800866c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e079      	b.n	8008760 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	0a1b      	lsrs	r3, r3, #8
 8008670:	4a3d      	ldr	r2, [pc, #244]	; (8008768 <HAL_SD_InitCard+0x138>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	091b      	lsrs	r3, r3, #4
 8008678:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d107      	bne.n	8008698 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0210 	orr.w	r2, r2, #16
 8008696:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681d      	ldr	r5, [r3, #0]
 800869c:	466c      	mov	r4, sp
 800869e:	f107 0314 	add.w	r3, r7, #20
 80086a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086aa:	f107 0308 	add.w	r3, r7, #8
 80086ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086b0:	4628      	mov	r0, r5
 80086b2:	f002 fc93 	bl	800afdc <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f002 fcd6 	bl	800b06c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80086cc:	4a27      	ldr	r2, [pc, #156]	; (800876c <HAL_SD_InitCard+0x13c>)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d4:	3301      	adds	r3, #1
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f9 fdc6 	bl	8002268 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 ffd3 	bl	8009688 <SD_PowerON>
 80086e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00b      	beq.n	8008702 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e02e      	b.n	8008760 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 ff00 	bl	8009508 <SD_InitCard>
 8008708:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e01b      	b.n	8008760 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008730:	4618      	mov	r0, r3
 8008732:	f002 fd31 	bl	800b198 <SDMMC_CmdBlockLength>
 8008736:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00f      	beq.n	800875e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a0b      	ldr	r2, [pc, #44]	; (8008770 <HAL_SD_InitCard+0x140>)
 8008744:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	431a      	orrs	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e000      	b.n	8008760 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3728      	adds	r7, #40	; 0x28
 8008764:	46bd      	mov	sp, r7
 8008766:	bdb0      	pop	{r4, r5, r7, pc}
 8008768:	014f8b59 	.word	0x014f8b59
 800876c:	00012110 	.word	0x00012110
 8008770:	1fe00fff 	.word	0x1fe00fff

08008774 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08c      	sub	sp, #48	; 0x30
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d107      	bne.n	800879c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e08d      	b.n	80088b8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	f040 8086 	bne.w	80088b6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	441a      	add	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d907      	bls.n	80087ce <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e074      	b.n	80088b8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2203      	movs	r2, #3
 80087d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2200      	movs	r2, #0
 80087dc:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	025a      	lsls	r2, r3, #9
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d002      	beq.n	80087fa <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	025b      	lsls	r3, r3, #9
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087fa:	f04f 33ff 	mov.w	r3, #4294967295
 80087fe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	025b      	lsls	r3, r3, #9
 8008804:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008806:	2390      	movs	r3, #144	; 0x90
 8008808:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800880a:	2302      	movs	r3, #2
 800880c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800880e:	2300      	movs	r3, #0
 8008810:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8008812:	2300      	movs	r3, #0
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f107 0210 	add.w	r2, r7, #16
 800881e:	4611      	mov	r1, r2
 8008820:	4618      	mov	r0, r3
 8008822:	f002 fc8d 	bl	800b140 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008834:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2201      	movs	r2, #1
 8008844:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d90a      	bls.n	8008862 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2282      	movs	r2, #130	; 0x82
 8008850:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008858:	4618      	mov	r0, r3
 800885a:	f002 fce3 	bl	800b224 <SDMMC_CmdReadMultiBlock>
 800885e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008860:	e009      	b.n	8008876 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2281      	movs	r2, #129	; 0x81
 8008866:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800886e:	4618      	mov	r0, r3
 8008870:	f002 fcb5 	bl	800b1de <SDMMC_CmdReadSingleBlock>
 8008874:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d012      	beq.n	80088a2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0f      	ldr	r2, [pc, #60]	; (80088c0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008882:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	431a      	orrs	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e00a      	b.n	80088b8 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80088b0:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	e000      	b.n	80088b8 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80088b6:	2302      	movs	r3, #2
  }
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3730      	adds	r7, #48	; 0x30
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	1fe00fff 	.word	0x1fe00fff

080088c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08c      	sub	sp, #48	; 0x30
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d107      	bne.n	80088ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e08d      	b.n	8008a08 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	f040 8086 	bne.w	8008a06 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	429a      	cmp	r2, r3
 800890c:	d907      	bls.n	800891e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008912:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e074      	b.n	8008a08 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2203      	movs	r2, #3
 8008922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2200      	movs	r2, #0
 800892c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	025a      	lsls	r2, r3, #9
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d002      	beq.n	800894a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	025b      	lsls	r3, r3, #9
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800894a:	f04f 33ff 	mov.w	r3, #4294967295
 800894e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	025b      	lsls	r3, r3, #9
 8008954:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008956:	2390      	movs	r3, #144	; 0x90
 8008958:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800895a:	2300      	movs	r3, #0
 800895c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800895e:	2300      	movs	r3, #0
 8008960:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008962:	2300      	movs	r3, #0
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f107 0210 	add.w	r2, r7, #16
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f002 fbe5 	bl	800b140 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008984:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d90a      	bls.n	80089b2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	22a0      	movs	r2, #160	; 0xa0
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 fc81 	bl	800b2b0 <SDMMC_CmdWriteMultiBlock>
 80089ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 80089b0:	e009      	b.n	80089c6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2290      	movs	r2, #144	; 0x90
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089be:	4618      	mov	r0, r3
 80089c0:	f002 fc53 	bl	800b26a <SDMMC_CmdWriteSingleBlock>
 80089c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d012      	beq.n	80089f2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a0f      	ldr	r2, [pc, #60]	; (8008a10 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80089d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089da:	431a      	orrs	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e00a      	b.n	8008a08 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008a00:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	e000      	b.n	8008a08 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8008a06:	2302      	movs	r3, #2
  }
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3730      	adds	r7, #48	; 0x30
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	1fe00fff 	.word	0x1fe00fff

08008a14 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d008      	beq.n	8008a42 <HAL_SD_IRQHandler+0x2e>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 f98e 	bl	8009d5c <SD_Read_IT>
 8008a40:	e199      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 80ae 	beq.w	8008bae <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6812      	ldr	r2, [r2, #0]
 8008a66:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008a6a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008a6e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f003 0308 	and.w	r3, r3, #8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d038      	beq.n	8008b0c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <HAL_SD_IRQHandler+0x9a>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d011      	beq.n	8008ad2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f002 fc20 	bl	800b2f8 <SDMMC_CmdStopTransfer>
 8008ab8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d008      	beq.n	8008ad2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f957 	bl	8008d80 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a90      	ldr	r2, [pc, #576]	; (8008d18 <HAL_SD_IRQHandler+0x304>)
 8008ad8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <HAL_SD_IRQHandler+0xe8>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f004 fc2b 	bl	800d358 <HAL_SD_RxCpltCallback>
 8008b02:	e138      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f004 fc1d 	bl	800d344 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8008b0a:	e134      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 812f 	beq.w	8008d76 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2200      	movs	r2, #0
 8008b26:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <HAL_SD_IRQHandler+0x130>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d011      	beq.n	8008b68 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fbd5 	bl	800b2f8 <SDMMC_CmdStopTransfer>
 8008b4e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d008      	beq.n	8008b68 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f90c 	bl	8008d80 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f003 0310 	and.w	r3, r3, #16
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <HAL_SD_IRQHandler+0x176>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f004 fbda 	bl	800d344 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <HAL_SD_IRQHandler+0x192>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80e8 	beq.w	8008d76 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f004 fbd6 	bl	800d358 <HAL_SD_RxCpltCallback>
}
 8008bac:	e0e3      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d008      	beq.n	8008bce <HAL_SD_IRQHandler+0x1ba>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f003 0308 	and.w	r3, r3, #8
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 f919 	bl	8009dfe <SD_Write_IT>
 8008bcc:	e0d3      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 809f 	beq.w	8008d1c <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	f043 0202 	orr.w	r2, r3, #2
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d005      	beq.n	8008c12 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	f043 0208 	orr.w	r2, r3, #8
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	f043 0220 	orr.w	r2, r3, #32
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c32:	f003 0310 	and.w	r3, r3, #16
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d005      	beq.n	8008c46 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	f043 0210 	orr.w	r2, r3, #16
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a33      	ldr	r2, [pc, #204]	; (8008d18 <HAL_SD_IRQHandler+0x304>)
 8008c4c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c6c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c8c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f002 fb30 	bl	800b2f8 <SDMMC_CmdStopTransfer>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cb2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cbc:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f003 0308 	and.w	r3, r3, #8
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f852 	bl	8008d80 <HAL_SD_ErrorCallback>
}
 8008cdc:	e04b      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d046      	beq.n	8008d76 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d042      	beq.n	8008d76 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008cfe:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2200      	movs	r2, #0
 8008d06:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f835 	bl	8008d80 <HAL_SD_ErrorCallback>
}
 8008d16:	e02e      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
 8008d18:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d025      	beq.n	8008d76 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3a:	f003 0304 	and.w	r3, r3, #4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10c      	bne.n	8008d5c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f003 0320 	and.w	r3, r3, #32
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 f8d4 	bl	8009efa <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8008d52:	e010      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 f8bc 	bl	8009ed2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8008d5a:	e00c      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f003 0320 	and.w	r3, r3, #32
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 f8bd 	bl	8009ee6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8008d6c:	e003      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f001 f8a5 	bl	8009ebe <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8008d74:	e7ff      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop

08008d80 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008da2:	0f9b      	lsrs	r3, r3, #30
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dae:	0e9b      	lsrs	r3, r3, #26
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc0:	0e1b      	lsrs	r3, r3, #24
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f003 0303 	and.w	r3, r3, #3
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dd2:	0c1b      	lsrs	r3, r3, #16
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dde:	0a1b      	lsrs	r3, r3, #8
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df4:	0d1b      	lsrs	r3, r3, #20
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e12:	0bdb      	lsrs	r3, r3, #15
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e24:	0b9b      	lsrs	r3, r3, #14
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e36:	0b5b      	lsrs	r3, r3, #13
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e48:	0b1b      	lsrs	r3, r3, #12
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d163      	bne.n	8008f2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e68:	009a      	lsls	r2, r3, #2
 8008e6a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e6e:	4013      	ands	r3, r2
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e74:	0f92      	lsrs	r2, r2, #30
 8008e76:	431a      	orrs	r2, r3
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e80:	0edb      	lsrs	r3, r3, #27
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f003 0307 	and.w	r3, r3, #7
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e92:	0e1b      	lsrs	r3, r3, #24
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ea4:	0d5b      	lsrs	r3, r3, #21
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eb6:	0c9b      	lsrs	r3, r3, #18
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ec8:	0bdb      	lsrs	r3, r3, #15
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	7e1b      	ldrb	r3, [r3, #24]
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	3302      	adds	r3, #2
 8008eec:	2201      	movs	r2, #1
 8008eee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008ef6:	fb03 f202 	mul.w	r2, r3, r2
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	7a1b      	ldrb	r3, [r3, #8]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f003 030f 	and.w	r3, r3, #15
 8008f08:	2201      	movs	r2, #1
 8008f0a:	409a      	lsls	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008f18:	0a52      	lsrs	r2, r2, #9
 8008f1a:	fb03 f202 	mul.w	r2, r3, r2
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f28:	659a      	str	r2, [r3, #88]	; 0x58
 8008f2a:	e031      	b.n	8008f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d11d      	bne.n	8008f70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f38:	041b      	lsls	r3, r3, #16
 8008f3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f42:	0c1b      	lsrs	r3, r3, #16
 8008f44:	431a      	orrs	r2, r3
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	029a      	lsls	r2, r3, #10
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f64:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	659a      	str	r2, [r3, #88]	; 0x58
 8008f6e:	e00f      	b.n	8008f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a58      	ldr	r2, [pc, #352]	; (80090d8 <HAL_SD_GetCardCSD+0x344>)
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e09d      	b.n	80090cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f94:	0b9b      	lsrs	r3, r3, #14
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fa6:	09db      	lsrs	r3, r3, #7
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc8:	0fdb      	lsrs	r3, r3, #31
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd4:	0f5b      	lsrs	r3, r3, #29
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe6:	0e9b      	lsrs	r3, r3, #26
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff8:	0d9b      	lsrs	r3, r3, #22
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	f003 030f 	and.w	r3, r3, #15
 8009000:	b2da      	uxtb	r2, r3
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800900a:	0d5b      	lsrs	r3, r3, #21
 800900c:	b2db      	uxtb	r3, r3
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	b2da      	uxtb	r2, r3
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009026:	0c1b      	lsrs	r3, r3, #16
 8009028:	b2db      	uxtb	r3, r3
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	b2da      	uxtb	r2, r3
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800903a:	0bdb      	lsrs	r3, r3, #15
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	b2da      	uxtb	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800904e:	0b9b      	lsrs	r3, r3, #14
 8009050:	b2db      	uxtb	r3, r3
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	b2da      	uxtb	r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009062:	0b5b      	lsrs	r3, r3, #13
 8009064:	b2db      	uxtb	r3, r3
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009076:	0b1b      	lsrs	r3, r3, #12
 8009078:	b2db      	uxtb	r3, r3
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	b2da      	uxtb	r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908a:	0a9b      	lsrs	r3, r3, #10
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	b2da      	uxtb	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800909e:	0a1b      	lsrs	r3, r3, #8
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	f003 0303 	and.w	r3, r3, #3
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b2:	085b      	lsrs	r3, r3, #1
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	1fe00fff 	.word	0x1fe00fff

080090dc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b094      	sub	sp, #80	; 0x50
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80090ec:	f107 0308 	add.w	r3, r7, #8
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fbd4 	bl	80098a0 <SD_SendSDStatus>
 80090f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80090fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d011      	beq.n	8009124 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a4f      	ldr	r2, [pc, #316]	; (8009244 <HAL_SD_GetCardStatus+0x168>)
 8009106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800910c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910e:	431a      	orrs	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009122:	e070      	b.n	8009206 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	099b      	lsrs	r3, r3, #6
 8009128:	b2db      	uxtb	r3, r3
 800912a:	f003 0303 	and.w	r3, r3, #3
 800912e:	b2da      	uxtb	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	095b      	lsrs	r3, r3, #5
 8009138:	b2db      	uxtb	r3, r3
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	b2da      	uxtb	r2, r3
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	0a1b      	lsrs	r3, r3, #8
 8009148:	b29b      	uxth	r3, r3
 800914a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800914e:	b29a      	uxth	r2, r3
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	0e1b      	lsrs	r3, r3, #24
 8009154:	b29b      	uxth	r3, r3
 8009156:	4313      	orrs	r3, r2
 8009158:	b29a      	uxth	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	061a      	lsls	r2, r3, #24
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800916a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	0a1b      	lsrs	r3, r3, #8
 8009170:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009174:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	0e1b      	lsrs	r3, r3, #24
 800917a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	b2da      	uxtb	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	b2da      	uxtb	r2, r3
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	0d1b      	lsrs	r3, r3, #20
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	b2da      	uxtb	r2, r3
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	0c1b      	lsrs	r3, r3, #16
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	0a9b      	lsrs	r3, r3, #10
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	0a1b      	lsrs	r3, r3, #8
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	091b      	lsrs	r3, r3, #4
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	f003 030f 	and.w	r3, r3, #15
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	0e1b      	lsrs	r3, r3, #24
 8009200:	b2da      	uxtb	r2, r3
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800920e:	4618      	mov	r0, r3
 8009210:	f001 ffc2 	bl	800b198 <SDMMC_CmdBlockLength>
 8009214:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00d      	beq.n	8009238 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a08      	ldr	r2, [pc, #32]	; (8009244 <HAL_SD_GetCardStatus+0x168>)
 8009222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009228:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009238:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800923c:	4618      	mov	r0, r3
 800923e:	3750      	adds	r7, #80	; 0x50
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	1fe00fff 	.word	0x1fe00fff

08009248 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80092a0:	b5b0      	push	{r4, r5, r7, lr}
 80092a2:	b090      	sub	sp, #64	; 0x40
 80092a4:	af04      	add	r7, sp, #16
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2203      	movs	r2, #3
 80092b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d02e      	beq.n	800931e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c6:	d106      	bne.n	80092d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	639a      	str	r2, [r3, #56]	; 0x38
 80092d4:	e029      	b.n	800932a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092dc:	d10a      	bne.n	80092f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fbd6 	bl	8009a90 <SD_WideBus_Enable>
 80092e4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	431a      	orrs	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38
 80092f2:	e01a      	b.n	800932a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10a      	bne.n	8009310 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fc13 	bl	8009b26 <SD_WideBus_Disable>
 8009300:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
 800930e:	e00c      	b.n	800932a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	639a      	str	r2, [r3, #56]	; 0x38
 800931c:	e005      	b.n	800932a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	2b00      	cmp	r3, #0
 8009330:	d007      	beq.n	8009342 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a60      	ldr	r2, [pc, #384]	; (80094b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009338:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009340:	e097      	b.n	8009472 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009342:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009346:	f7fd fc7d 	bl	8006c44 <HAL_RCCEx_GetPeriphCLKFreq>
 800934a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 8086 	beq.w	8009460 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	695a      	ldr	r2, [r3, #20]
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	4952      	ldr	r1, [pc, #328]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009372:	fba1 1303 	umull	r1, r3, r1, r3
 8009376:	0e1b      	lsrs	r3, r3, #24
 8009378:	429a      	cmp	r2, r3
 800937a:	d303      	bcc.n	8009384 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	e05a      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800938c:	d103      	bne.n	8009396 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	61fb      	str	r3, [r7, #28]
 8009394:	e051      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800939e:	d126      	bne.n	80093ee <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10e      	bne.n	80093c6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	4a45      	ldr	r2, [pc, #276]	; (80094c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d906      	bls.n	80093be <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	4a42      	ldr	r2, [pc, #264]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80093b4:	fba2 2303 	umull	r2, r3, r2, r3
 80093b8:	0e5b      	lsrs	r3, r3, #25
 80093ba:	61fb      	str	r3, [r7, #28]
 80093bc:	e03d      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	61fb      	str	r3, [r7, #28]
 80093c4:	e039      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80093d2:	4a3b      	ldr	r2, [pc, #236]	; (80094c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d906      	bls.n	80093e6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	4a38      	ldr	r2, [pc, #224]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80093dc:	fba2 2303 	umull	r2, r3, r2, r3
 80093e0:	0e5b      	lsrs	r3, r3, #25
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	e029      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	61fb      	str	r3, [r7, #28]
 80093ec:	e025      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10e      	bne.n	8009414 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	4a32      	ldr	r2, [pc, #200]	; (80094c4 <HAL_SD_ConfigWideBusOperation+0x224>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d906      	bls.n	800940c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	4a2e      	ldr	r2, [pc, #184]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009402:	fba2 2303 	umull	r2, r3, r2, r3
 8009406:	0e1b      	lsrs	r3, r3, #24
 8009408:	61fb      	str	r3, [r7, #28]
 800940a:	e016      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	e012      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009420:	4a28      	ldr	r2, [pc, #160]	; (80094c4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d906      	bls.n	8009434 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	4a24      	ldr	r2, [pc, #144]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800942a:	fba2 2303 	umull	r2, r3, r2, r3
 800942e:	0e1b      	lsrs	r3, r3, #24
 8009430:	61fb      	str	r3, [r7, #28]
 8009432:	e002      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681d      	ldr	r5, [r3, #0]
 8009444:	466c      	mov	r4, sp
 8009446:	f107 0318 	add.w	r3, r7, #24
 800944a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800944e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009452:	f107 030c 	add.w	r3, r7, #12
 8009456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009458:	4628      	mov	r0, r5
 800945a:	f001 fdbf 	bl	800afdc <SDMMC_Init>
 800945e:	e008      	b.n	8009472 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009464:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800947a:	4618      	mov	r0, r3
 800947c:	f001 fe8c 	bl	800b198 <SDMMC_CmdBlockLength>
 8009480:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00c      	beq.n	80094a2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a0a      	ldr	r2, [pc, #40]	; (80094b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80094aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3730      	adds	r7, #48	; 0x30
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bdb0      	pop	{r4, r5, r7, pc}
 80094b6:	bf00      	nop
 80094b8:	1fe00fff 	.word	0x1fe00fff
 80094bc:	55e63b89 	.word	0x55e63b89
 80094c0:	02faf080 	.word	0x02faf080
 80094c4:	017d7840 	.word	0x017d7840

080094c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80094d4:	f107 030c 	add.w	r3, r7, #12
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fab0 	bl	8009a40 <SD_SendStatus>
 80094e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d005      	beq.n	80094f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	0a5b      	lsrs	r3, r3, #9
 80094f8:	f003 030f 	and.w	r3, r3, #15
 80094fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80094fe:	693b      	ldr	r3, [r7, #16]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009508:	b5b0      	push	{r4, r5, r7, lr}
 800950a:	b090      	sub	sp, #64	; 0x40
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009510:	2301      	movs	r3, #1
 8009512:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4618      	mov	r0, r3
 800951a:	f001 fdb9 	bl	800b090 <SDMMC_GetPowerState>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009524:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009528:	e0a9      	b.n	800967e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952e:	2b03      	cmp	r3, #3
 8009530:	d02e      	beq.n	8009590 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f001 fffe 	bl	800b538 <SDMMC_CmdSendCID>
 800953c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800953e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <SD_InitCard+0x40>
    {
      return errorstate;
 8009544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009546:	e09a      	b.n	800967e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2100      	movs	r1, #0
 800954e:	4618      	mov	r0, r3
 8009550:	f001 fde3 	bl	800b11a <SDMMC_GetResponse>
 8009554:	4602      	mov	r2, r0
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2104      	movs	r1, #4
 8009560:	4618      	mov	r0, r3
 8009562:	f001 fdda 	bl	800b11a <SDMMC_GetResponse>
 8009566:	4602      	mov	r2, r0
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2108      	movs	r1, #8
 8009572:	4618      	mov	r0, r3
 8009574:	f001 fdd1 	bl	800b11a <SDMMC_GetResponse>
 8009578:	4602      	mov	r2, r0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	210c      	movs	r1, #12
 8009584:	4618      	mov	r0, r3
 8009586:	f001 fdc8 	bl	800b11a <SDMMC_GetResponse>
 800958a:	4602      	mov	r2, r0
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009594:	2b03      	cmp	r3, #3
 8009596:	d00d      	beq.n	80095b4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f107 020e 	add.w	r2, r7, #14
 80095a0:	4611      	mov	r1, r2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 f807 	bl	800b5b6 <SDMMC_CmdSetRelAdd>
 80095a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80095aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <SD_InitCard+0xac>
    {
      return errorstate;
 80095b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b2:	e064      	b.n	800967e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d036      	beq.n	800962a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80095bc:	89fb      	ldrh	r3, [r7, #14]
 80095be:	461a      	mov	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095cc:	041b      	lsls	r3, r3, #16
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f001 ffd0 	bl	800b576 <SDMMC_CmdSendCSD>
 80095d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80095d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <SD_InitCard+0xda>
    {
      return errorstate;
 80095de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e0:	e04d      	b.n	800967e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 fd96 	bl	800b11a <SDMMC_GetResponse>
 80095ee:	4602      	mov	r2, r0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2104      	movs	r1, #4
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 fd8d 	bl	800b11a <SDMMC_GetResponse>
 8009600:	4602      	mov	r2, r0
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2108      	movs	r1, #8
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fd84 	bl	800b11a <SDMMC_GetResponse>
 8009612:	4602      	mov	r2, r0
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	210c      	movs	r1, #12
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fd7b 	bl	800b11a <SDMMC_GetResponse>
 8009624:	4602      	mov	r2, r0
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2104      	movs	r1, #4
 8009630:	4618      	mov	r0, r3
 8009632:	f001 fd72 	bl	800b11a <SDMMC_GetResponse>
 8009636:	4603      	mov	r3, r0
 8009638:	0d1a      	lsrs	r2, r3, #20
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800963e:	f107 0310 	add.w	r3, r7, #16
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fba5 	bl	8008d94 <HAL_SD_GetCardCSD>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009654:	e013      	b.n	800967e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6819      	ldr	r1, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965e:	041b      	lsls	r3, r3, #16
 8009660:	2200      	movs	r2, #0
 8009662:	461c      	mov	r4, r3
 8009664:	4615      	mov	r5, r2
 8009666:	4622      	mov	r2, r4
 8009668:	462b      	mov	r3, r5
 800966a:	4608      	mov	r0, r1
 800966c:	f001 fe7a 	bl	800b364 <SDMMC_CmdSelDesel>
 8009670:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <SD_InitCard+0x174>
  {
    return errorstate;
 8009678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967a:	e000      	b.n	800967e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3740      	adds	r7, #64	; 0x40
 8009682:	46bd      	mov	sp, r7
 8009684:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009688 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	2300      	movs	r3, #0
 800969a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800969c:	f7f8 fdd8 	bl	8002250 <HAL_GetTick>
 80096a0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f001 fe80 	bl	800b3ac <SDMMC_CmdGoIdleState>
 80096ac:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <SD_PowerON+0x30>
  {
    return errorstate;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	e0ed      	b.n	8009894 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fe93 	bl	800b3e8 <SDMMC_CmdOperCond>
 80096c2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00d      	beq.n	80096e6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 fe69 	bl	800b3ac <SDMMC_CmdGoIdleState>
 80096da:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d004      	beq.n	80096ec <SD_PowerON+0x64>
    {
      return errorstate;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	e0d6      	b.n	8009894 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d137      	bne.n	8009764 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 fe94 	bl	800b428 <SDMMC_CmdAppCommand>
 8009700:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d02d      	beq.n	8009764 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009708:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800970c:	e0c2      	b.n	8009894 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2100      	movs	r1, #0
 8009714:	4618      	mov	r0, r3
 8009716:	f001 fe87 	bl	800b428 <SDMMC_CmdAppCommand>
 800971a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <SD_PowerON+0x9e>
    {
      return errorstate;
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	e0b6      	b.n	8009894 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	495c      	ldr	r1, [pc, #368]	; (800989c <SD_PowerON+0x214>)
 800972c:	4618      	mov	r0, r3
 800972e:	f001 fe9e 	bl	800b46e <SDMMC_CmdAppOperCommand>
 8009732:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d002      	beq.n	8009740 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800973a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800973e:	e0a9      	b.n	8009894 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2100      	movs	r1, #0
 8009746:	4618      	mov	r0, r3
 8009748:	f001 fce7 	bl	800b11a <SDMMC_GetResponse>
 800974c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	0fdb      	lsrs	r3, r3, #31
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <SD_PowerON+0xd2>
 8009756:	2301      	movs	r3, #1
 8009758:	e000      	b.n	800975c <SD_PowerON+0xd4>
 800975a:	2300      	movs	r3, #0
 800975c:	61bb      	str	r3, [r7, #24]

    count++;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800976a:	4293      	cmp	r3, r2
 800976c:	d802      	bhi.n	8009774 <SD_PowerON+0xec>
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0cc      	beq.n	800970e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800977a:	4293      	cmp	r3, r2
 800977c:	d902      	bls.n	8009784 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800977e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009782:	e087      	b.n	8009894 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d07e      	beq.n	800988c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d17a      	bne.n	8009892 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d075      	beq.n	8009892 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097ac:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f042 0208 	orr.w	r2, r2, #8
 80097bc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f001 ff5e 	bl	800b684 <SDMMC_CmdVoltageSwitch>
 80097c8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00c      	beq.n	80097ea <SD_PowerON+0x162>
        {
          return errorstate;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	e05f      	b.n	8009894 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80097d4:	f7f8 fd3c 	bl	8002250 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e2:	d102      	bne.n	80097ea <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80097e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097e8:	e054      	b.n	8009894 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097f8:	d1ec      	bne.n	80097d4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009802:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800980e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009812:	d002      	beq.n	800981a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009818:	e03c      	b.n	8009894 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800981a:	2001      	movs	r0, #1
 800981c:	f000 fb44 	bl	8009ea8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0204 	orr.w	r2, r2, #4
 800982e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009830:	e00a      	b.n	8009848 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009832:	f7f8 fd0d 	bl	8002250 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009840:	d102      	bne.n	8009848 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009842:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009846:	e025      	b.n	8009894 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009856:	d1ec      	bne.n	8009832 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009860:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800986c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009870:	d102      	bne.n	8009878 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009876:	e00d      	b.n	8009894 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2213      	movs	r2, #19
 800987e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f04f 32ff 	mov.w	r2, #4294967295
 8009888:	639a      	str	r2, [r3, #56]	; 0x38
 800988a:	e002      	b.n	8009892 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	c1100000 	.word	0xc1100000

080098a0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08c      	sub	sp, #48	; 0x30
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80098aa:	f7f8 fcd1 	bl	8002250 <HAL_GetTick>
 80098ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2100      	movs	r1, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 fc2d 	bl	800b11a <SDMMC_GetResponse>
 80098c0:	4603      	mov	r3, r0
 80098c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ca:	d102      	bne.n	80098d2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098d0:	e0b0      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2140      	movs	r1, #64	; 0x40
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 fc5d 	bl	800b198 <SDMMC_CmdBlockLength>
 80098de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d005      	beq.n	80098f2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	e0a0      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098fa:	041b      	lsls	r3, r3, #16
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f001 fd92 	bl	800b428 <SDMMC_CmdAppCommand>
 8009904:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	e08d      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009918:	f04f 33ff 	mov.w	r3, #4294967295
 800991c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009922:	2360      	movs	r3, #96	; 0x60
 8009924:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009926:	2302      	movs	r3, #2
 8009928:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800992a:	2300      	movs	r3, #0
 800992c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800992e:	2301      	movs	r3, #1
 8009930:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f107 0208 	add.w	r2, r7, #8
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f001 fbff 	bl	800b140 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f001 fe7a 	bl	800b640 <SDMMC_CmdStatusRegister>
 800994c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d02b      	beq.n	80099ac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	e069      	b.n	8009a34 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d013      	beq.n	8009996 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800996e:	2300      	movs	r3, #0
 8009970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009972:	e00d      	b.n	8009990 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f001 fb59 	bl	800b030 <SDMMC_ReadFIFO>
 800997e:	4602      	mov	r2, r0
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	601a      	str	r2, [r3, #0]
        pData++;
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	3304      	adds	r3, #4
 8009988:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	3301      	adds	r3, #1
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	2b07      	cmp	r3, #7
 8009994:	d9ee      	bls.n	8009974 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009996:	f7f8 fc5b 	bl	8002250 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a4:	d102      	bne.n	80099ac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80099a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099aa:	e043      	b.n	8009a34 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0d2      	beq.n	8009960 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80099c8:	2308      	movs	r3, #8
 80099ca:	e033      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d2:	f003 0302 	and.w	r3, r3, #2
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80099da:	2302      	movs	r3, #2
 80099dc:	e02a      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e4:	f003 0320 	and.w	r3, r3, #32
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d017      	beq.n	8009a1c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80099ec:	2320      	movs	r3, #32
 80099ee:	e021      	b.n	8009a34 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 fb1b 	bl	800b030 <SDMMC_ReadFIFO>
 80099fa:	4602      	mov	r2, r0
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	601a      	str	r2, [r3, #0]
    pData++;
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	3304      	adds	r3, #4
 8009a04:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a06:	f7f8 fc23 	bl	8002250 <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a14:	d102      	bne.n	8009a1c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009a16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a1a:	e00b      	b.n	8009a34 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e2      	bne.n	80099f0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a03      	ldr	r2, [pc, #12]	; (8009a3c <SD_SendSDStatus+0x19c>)
 8009a30:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3730      	adds	r7, #48	; 0x30
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	18000f3a 	.word	0x18000f3a

08009a40 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d102      	bne.n	8009a56 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a54:	e018      	b.n	8009a88 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a5e:	041b      	lsls	r3, r3, #16
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f001 fdc9 	bl	800b5fa <SDMMC_CmdSendStatus>
 8009a68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	e009      	b.n	8009a88 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 fb4d 	bl	800b11a <SDMMC_GetResponse>
 8009a80:	4602      	mov	r2, r0
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 fb37 	bl	800b11a <SDMMC_GetResponse>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ab6:	d102      	bne.n	8009abe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009abc:	e02f      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009abe:	f107 030c 	add.w	r3, r7, #12
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f879 	bl	8009bbc <SD_FindSCR>
 8009aca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	e023      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d01c      	beq.n	8009b1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ae8:	041b      	lsls	r3, r3, #16
 8009aea:	4619      	mov	r1, r3
 8009aec:	4610      	mov	r0, r2
 8009aee:	f001 fc9b 	bl	800b428 <SDMMC_CmdAppCommand>
 8009af2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	e00f      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2102      	movs	r1, #2
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fcd2 	bl	800b4ae <SDMMC_CmdBusWidth>
 8009b0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	e003      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b16:	2300      	movs	r3, #0
 8009b18:	e001      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b086      	sub	sp, #24
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	2300      	movs	r3, #0
 8009b34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 faec 	bl	800b11a <SDMMC_GetResponse>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b4c:	d102      	bne.n	8009b54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b52:	e02f      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b54:	f107 030c 	add.w	r3, r7, #12
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f82e 	bl	8009bbc <SD_FindSCR>
 8009b60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	e023      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d01c      	beq.n	8009bb0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b7e:	041b      	lsls	r3, r3, #16
 8009b80:	4619      	mov	r1, r3
 8009b82:	4610      	mov	r0, r2
 8009b84:	f001 fc50 	bl	800b428 <SDMMC_CmdAppCommand>
 8009b88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	e00f      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f001 fc87 	bl	800b4ae <SDMMC_CmdBusWidth>
 8009ba0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	e003      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bac:	2300      	movs	r3, #0
 8009bae:	e001      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08e      	sub	sp, #56	; 0x38
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009bc6:	f7f8 fb43 	bl	8002250 <HAL_GetTick>
 8009bca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	60bb      	str	r3, [r7, #8]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2108      	movs	r1, #8
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 fad8 	bl	800b198 <SDMMC_CmdBlockLength>
 8009be8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	e0ad      	b.n	8009d50 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bfc:	041b      	lsls	r3, r3, #16
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	f001 fc11 	bl	800b428 <SDMMC_CmdAppCommand>
 8009c06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	e09e      	b.n	8009d50 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c12:	f04f 33ff 	mov.w	r3, #4294967295
 8009c16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009c18:	2308      	movs	r3, #8
 8009c1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009c1c:	2330      	movs	r3, #48	; 0x30
 8009c1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c20:	2302      	movs	r3, #2
 8009c22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f107 0210 	add.w	r2, r7, #16
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 fa82 	bl	800b140 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 fc57 	bl	800b4f4 <SDMMC_CmdSendSCR>
 8009c46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d027      	beq.n	8009c9e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	e07e      	b.n	8009d50 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d113      	bne.n	8009c88 <SD_FindSCR+0xcc>
 8009c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d110      	bne.n	8009c88 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f001 f9e0 	bl	800b030 <SDMMC_ReadFIFO>
 8009c70:	4603      	mov	r3, r0
 8009c72:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f001 f9d9 	bl	800b030 <SDMMC_ReadFIFO>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	60fb      	str	r3, [r7, #12]
      index++;
 8009c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c84:	3301      	adds	r3, #1
 8009c86:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c88:	f7f8 fae2 	bl	8002250 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c96:	d102      	bne.n	8009c9e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c9c:	e058      	b.n	8009d50 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ca4:	f240 532a 	movw	r3, #1322	; 0x52a
 8009ca8:	4013      	ands	r3, r2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0d1      	beq.n	8009c52 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb4:	f003 0308 	and.w	r3, r3, #8
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d005      	beq.n	8009cc8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2208      	movs	r2, #8
 8009cc2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009cc4:	2308      	movs	r3, #8
 8009cc6:	e043      	b.n	8009d50 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e036      	b.n	8009d50 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009cf8:	2320      	movs	r3, #32
 8009cfa:	e029      	b.n	8009d50 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a15      	ldr	r2, [pc, #84]	; (8009d58 <SD_FindSCR+0x19c>)
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	061a      	lsls	r2, r3, #24
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	021b      	lsls	r3, r3, #8
 8009d0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	0a1b      	lsrs	r3, r3, #8
 8009d16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	0e1b      	lsrs	r3, r3, #24
 8009d20:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	601a      	str	r2, [r3, #0]
    scr++;
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	3304      	adds	r3, #4
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	061a      	lsls	r2, r3, #24
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	021b      	lsls	r3, r3, #8
 8009d34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	0a1b      	lsrs	r3, r3, #8
 8009d3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	0e1b      	lsrs	r3, r3, #24
 8009d48:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3738      	adds	r7, #56	; 0x38
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	18000f3a 	.word	0x18000f3a

08009d5c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d68:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d03f      	beq.n	8009df6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]
 8009d7a:	e033      	b.n	8009de4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 f955 	bl	800b030 <SDMMC_ReadFIFO>
 8009d86:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	0a1b      	lsrs	r3, r3, #8
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3301      	adds	r3, #1
 8009daa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	0c1b      	lsrs	r3, r3, #16
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	0e1b      	lsrs	r3, r3, #24
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	3301      	adds	r3, #1
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2b07      	cmp	r3, #7
 8009de8:	d9c8      	bls.n	8009d7c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009df6:	bf00      	nop
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b086      	sub	sp, #24
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d043      	beq.n	8009ea0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	617b      	str	r3, [r7, #20]
 8009e1c:	e037      	b.n	8009e8e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3301      	adds	r3, #1
 8009e28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	021a      	lsls	r2, r3, #8
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	041a      	lsls	r2, r3, #16
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3301      	adds	r3, #1
 8009e58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	061a      	lsls	r2, r3, #24
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f107 0208 	add.w	r2, r7, #8
 8009e80:	4611      	mov	r1, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f001 f8e1 	bl	800b04a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2b07      	cmp	r3, #7
 8009e92:	d9c4      	bls.n	8009e1e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8009eb2:	bf00      	nop
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b083      	sub	sp, #12
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009f02:	bf00      	nop
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b084      	sub	sp, #16
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e095      	b.n	800a04c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d108      	bne.n	8009f3a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f30:	d009      	beq.n	8009f46 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	61da      	str	r2, [r3, #28]
 8009f38:	e005      	b.n	8009f46 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d106      	bne.n	8009f66 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7f7 ff15 	bl	8001d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f86:	d902      	bls.n	8009f8e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	e002      	b.n	8009f94 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009f9c:	d007      	beq.n	8009fae <HAL_SPI_Init+0xa0>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fa6:	d002      	beq.n	8009fae <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a1b      	ldr	r3, [r3, #32]
 8009fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff0:	ea42 0103 	orr.w	r1, r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	430a      	orrs	r2, r1
 800a002:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	0c1b      	lsrs	r3, r3, #16
 800a00a:	f003 0204 	and.w	r2, r3, #4
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a012:	f003 0310 	and.w	r3, r3, #16
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01c:	f003 0308 	and.w	r3, r3, #8
 800a020:	431a      	orrs	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a02a:	ea42 0103 	orr.w	r1, r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a062:	2301      	movs	r3, #1
 800a064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a072:	2b01      	cmp	r3, #1
 800a074:	d101      	bne.n	800a07a <HAL_SPI_TransmitReceive+0x26>
 800a076:	2302      	movs	r3, #2
 800a078:	e1fb      	b.n	800a472 <HAL_SPI_TransmitReceive+0x41e>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a082:	f7f8 f8e5 	bl	8002250 <HAL_GetTick>
 800a086:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a08e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a096:	887b      	ldrh	r3, [r7, #2]
 800a098:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a09a:	887b      	ldrh	r3, [r7, #2]
 800a09c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a09e:	7efb      	ldrb	r3, [r7, #27]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d00e      	beq.n	800a0c2 <HAL_SPI_TransmitReceive+0x6e>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0aa:	d106      	bne.n	800a0ba <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <HAL_SPI_TransmitReceive+0x66>
 800a0b4:	7efb      	ldrb	r3, [r7, #27]
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d003      	beq.n	800a0c2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a0c0:	e1cd      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d005      	beq.n	800a0d4 <HAL_SPI_TransmitReceive+0x80>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d002      	beq.n	800a0d4 <HAL_SPI_TransmitReceive+0x80>
 800a0ce:	887b      	ldrh	r3, [r7, #2]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a0da:	e1c0      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d003      	beq.n	800a0f0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2205      	movs	r2, #5
 800a0ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	887a      	ldrh	r2, [r7, #2]
 800a100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	887a      	ldrh	r2, [r7, #2]
 800a108:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	887a      	ldrh	r2, [r7, #2]
 800a116:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	887a      	ldrh	r2, [r7, #2]
 800a11c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a132:	d802      	bhi.n	800a13a <HAL_SPI_TransmitReceive+0xe6>
 800a134:	8a3b      	ldrh	r3, [r7, #16]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d908      	bls.n	800a14c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a148:	605a      	str	r2, [r3, #4]
 800a14a:	e007      	b.n	800a15c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a15a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a166:	2b40      	cmp	r3, #64	; 0x40
 800a168:	d007      	beq.n	800a17a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a178:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a182:	d97c      	bls.n	800a27e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <HAL_SPI_TransmitReceive+0x13e>
 800a18c:	8a7b      	ldrh	r3, [r7, #18]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d169      	bne.n	800a266 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a196:	881a      	ldrh	r2, [r3, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	1c9a      	adds	r2, r3, #2
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1b6:	e056      	b.n	800a266 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d11b      	bne.n	800a1fe <HAL_SPI_TransmitReceive+0x1aa>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d016      	beq.n	800a1fe <HAL_SPI_TransmitReceive+0x1aa>
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d113      	bne.n	800a1fe <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1da:	881a      	ldrh	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e6:	1c9a      	adds	r2, r3, #2
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d11c      	bne.n	800a246 <HAL_SPI_TransmitReceive+0x1f2>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a212:	b29b      	uxth	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d016      	beq.n	800a246 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	b292      	uxth	r2, r2
 800a224:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22a:	1c9a      	adds	r2, r3, #2
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a236:	b29b      	uxth	r3, r3
 800a238:	3b01      	subs	r3, #1
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a242:	2301      	movs	r3, #1
 800a244:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a246:	f7f8 f803 	bl	8002250 <HAL_GetTick>
 800a24a:	4602      	mov	r2, r0
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a252:	429a      	cmp	r2, r3
 800a254:	d807      	bhi.n	800a266 <HAL_SPI_TransmitReceive+0x212>
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25c:	d003      	beq.n	800a266 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a264:	e0fb      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1a3      	bne.n	800a1b8 <HAL_SPI_TransmitReceive+0x164>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a276:	b29b      	uxth	r3, r3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d19d      	bne.n	800a1b8 <HAL_SPI_TransmitReceive+0x164>
 800a27c:	e0df      	b.n	800a43e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <HAL_SPI_TransmitReceive+0x23a>
 800a286:	8a7b      	ldrh	r3, [r7, #18]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	f040 80cb 	bne.w	800a424 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a292:	b29b      	uxth	r3, r3
 800a294:	2b01      	cmp	r3, #1
 800a296:	d912      	bls.n	800a2be <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29c:	881a      	ldrh	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	1c9a      	adds	r2, r3, #2
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	3b02      	subs	r3, #2
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a2bc:	e0b2      	b.n	800a424 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	7812      	ldrb	r2, [r2, #0]
 800a2ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2e4:	e09e      	b.n	800a424 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d134      	bne.n	800a35e <HAL_SPI_TransmitReceive+0x30a>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d02f      	beq.n	800a35e <HAL_SPI_TransmitReceive+0x30a>
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	2b01      	cmp	r3, #1
 800a302:	d12c      	bne.n	800a35e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d912      	bls.n	800a334 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a312:	881a      	ldrh	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31e:	1c9a      	adds	r2, r3, #2
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a328:	b29b      	uxth	r3, r3
 800a32a:	3b02      	subs	r3, #2
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a332:	e012      	b.n	800a35a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	330c      	adds	r3, #12
 800a33e:	7812      	ldrb	r2, [r2, #0]
 800a340:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a350:	b29b      	uxth	r3, r3
 800a352:	3b01      	subs	r3, #1
 800a354:	b29a      	uxth	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d148      	bne.n	800a3fe <HAL_SPI_TransmitReceive+0x3aa>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a372:	b29b      	uxth	r3, r3
 800a374:	2b00      	cmp	r3, #0
 800a376:	d042      	beq.n	800a3fe <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a37e:	b29b      	uxth	r3, r3
 800a380:	2b01      	cmp	r3, #1
 800a382:	d923      	bls.n	800a3cc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	b292      	uxth	r2, r2
 800a390:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	1c9a      	adds	r2, r3, #2
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b02      	subs	r3, #2
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d81f      	bhi.n	800a3fa <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3c8:	605a      	str	r2, [r3, #4]
 800a3ca:	e016      	b.n	800a3fa <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f103 020c 	add.w	r2, r3, #12
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	7812      	ldrb	r2, [r2, #0]
 800a3da:	b2d2      	uxtb	r2, r2
 800a3dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a3fe:	f7f7 ff27 	bl	8002250 <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d803      	bhi.n	800a416 <HAL_SPI_TransmitReceive+0x3c2>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a414:	d102      	bne.n	800a41c <HAL_SPI_TransmitReceive+0x3c8>
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a422:	e01c      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a428:	b29b      	uxth	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f47f af5b 	bne.w	800a2e6 <HAL_SPI_TransmitReceive+0x292>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a436:	b29b      	uxth	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f47f af54 	bne.w	800a2e6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a43e:	69fa      	ldr	r2, [r7, #28]
 800a440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 f938 	bl	800a6b8 <SPI_EndRxTxTransaction>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d006      	beq.n	800a45c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2220      	movs	r2, #32
 800a458:	661a      	str	r2, [r3, #96]	; 0x60
 800a45a:	e000      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a45c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a46e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a472:	4618      	mov	r0, r3
 800a474:	3728      	adds	r7, #40	; 0x28
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	603b      	str	r3, [r7, #0]
 800a488:	4613      	mov	r3, r2
 800a48a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a48c:	f7f7 fee0 	bl	8002250 <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	4413      	add	r3, r2
 800a49a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a49c:	f7f7 fed8 	bl	8002250 <HAL_GetTick>
 800a4a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4a2:	4b39      	ldr	r3, [pc, #228]	; (800a588 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	015b      	lsls	r3, r3, #5
 800a4a8:	0d1b      	lsrs	r3, r3, #20
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	fb02 f303 	mul.w	r3, r2, r3
 800a4b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4b2:	e054      	b.n	800a55e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ba:	d050      	beq.n	800a55e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4bc:	f7f7 fec8 	bl	8002250 <HAL_GetTick>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	69fa      	ldr	r2, [r7, #28]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d902      	bls.n	800a4d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d13d      	bne.n	800a54e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a4e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4ea:	d111      	bne.n	800a510 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4f4:	d004      	beq.n	800a500 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4fe:	d107      	bne.n	800a510 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a50e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a518:	d10f      	bne.n	800a53a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a538:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e017      	b.n	800a57e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	4013      	ands	r3, r2
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	bf0c      	ite	eq
 800a56e:	2301      	moveq	r3, #1
 800a570:	2300      	movne	r3, #0
 800a572:	b2db      	uxtb	r3, r3
 800a574:	461a      	mov	r2, r3
 800a576:	79fb      	ldrb	r3, [r7, #7]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d19b      	bne.n	800a4b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3720      	adds	r7, #32
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000000 	.word	0x20000000

0800a58c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08a      	sub	sp, #40	; 0x28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a59e:	f7f7 fe57 	bl	8002250 <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a5ae:	f7f7 fe4f 	bl	8002250 <HAL_GetTick>
 800a5b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	330c      	adds	r3, #12
 800a5ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a5bc:	4b3d      	ldr	r3, [pc, #244]	; (800a6b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	00da      	lsls	r2, r3, #3
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	0d1b      	lsrs	r3, r3, #20
 800a5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ce:	fb02 f303 	mul.w	r3, r2, r3
 800a5d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a5d4:	e060      	b.n	800a698 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a5dc:	d107      	bne.n	800a5ee <SPI_WaitFifoStateUntilTimeout+0x62>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d104      	bne.n	800a5ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f4:	d050      	beq.n	800a698 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5f6:	f7f7 fe2b 	bl	8002250 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a602:	429a      	cmp	r2, r3
 800a604:	d902      	bls.n	800a60c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d13d      	bne.n	800a688 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a61a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a624:	d111      	bne.n	800a64a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a62e:	d004      	beq.n	800a63a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a638:	d107      	bne.n	800a64a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a648:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a652:	d10f      	bne.n	800a674 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a672:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e010      	b.n	800a6aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	3b01      	subs	r3, #1
 800a696:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d196      	bne.n	800a5d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3728      	adds	r7, #40	; 0x28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000000 	.word	0x20000000

0800a6b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7ff ff5b 	bl	800a58c <SPI_WaitFifoStateUntilTimeout>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6e0:	f043 0220 	orr.w	r2, r3, #32
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e027      	b.n	800a73c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	2180      	movs	r1, #128	; 0x80
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff fec0 	bl	800a47c <SPI_WaitFlagStateUntilTimeout>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d007      	beq.n	800a712 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a706:	f043 0220 	orr.w	r2, r3, #32
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	e014      	b.n	800a73c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	2200      	movs	r2, #0
 800a71a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7ff ff34 	bl	800a58c <SPI_WaitFifoStateUntilTimeout>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d007      	beq.n	800a73a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a72e:	f043 0220 	orr.w	r2, r3, #32
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	e000      	b.n	800a73c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e049      	b.n	800a7ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7f7 fbf8 	bl	8001f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2202      	movs	r2, #2
 800a774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3304      	adds	r3, #4
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	f000 fa50 	bl	800ac28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0302 	and.w	r3, r3, #2
 800a804:	2b02      	cmp	r3, #2
 800a806:	d122      	bne.n	800a84e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f003 0302 	and.w	r3, r3, #2
 800a812:	2b02      	cmp	r3, #2
 800a814:	d11b      	bne.n	800a84e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f06f 0202 	mvn.w	r2, #2
 800a81e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	f003 0303 	and.w	r3, r3, #3
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f9d8 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800a83a:	e005      	b.n	800a848 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f9ca 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f9db 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f003 0304 	and.w	r3, r3, #4
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d122      	bne.n	800a8a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f003 0304 	and.w	r3, r3, #4
 800a866:	2b04      	cmp	r3, #4
 800a868:	d11b      	bne.n	800a8a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f06f 0204 	mvn.w	r2, #4
 800a872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2202      	movs	r2, #2
 800a878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a884:	2b00      	cmp	r3, #0
 800a886:	d003      	beq.n	800a890 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f9ae 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800a88e:	e005      	b.n	800a89c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f9a0 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9b1 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	f003 0308 	and.w	r3, r3, #8
 800a8ac:	2b08      	cmp	r3, #8
 800a8ae:	d122      	bne.n	800a8f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	f003 0308 	and.w	r3, r3, #8
 800a8ba:	2b08      	cmp	r3, #8
 800a8bc:	d11b      	bne.n	800a8f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f06f 0208 	mvn.w	r2, #8
 800a8c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2204      	movs	r2, #4
 800a8cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f984 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800a8e2:	e005      	b.n	800a8f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f976 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f987 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b10      	cmp	r3, #16
 800a902:	d122      	bne.n	800a94a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f003 0310 	and.w	r3, r3, #16
 800a90e:	2b10      	cmp	r3, #16
 800a910:	d11b      	bne.n	800a94a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f06f 0210 	mvn.w	r2, #16
 800a91a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2208      	movs	r2, #8
 800a920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f95a 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800a936:	e005      	b.n	800a944 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f94c 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f95d 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	2b01      	cmp	r3, #1
 800a956:	d10e      	bne.n	800a976 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b01      	cmp	r3, #1
 800a964:	d107      	bne.n	800a976 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f06f 0201 	mvn.w	r2, #1
 800a96e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f926 	bl	800abc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a980:	2b80      	cmp	r3, #128	; 0x80
 800a982:	d10e      	bne.n	800a9a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98e:	2b80      	cmp	r3, #128	; 0x80
 800a990:	d107      	bne.n	800a9a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fb09 	bl	800afb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9b0:	d10e      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9bc:	2b80      	cmp	r3, #128	; 0x80
 800a9be:	d107      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a9c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fafc 	bl	800afc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9da:	2b40      	cmp	r3, #64	; 0x40
 800a9dc:	d10e      	bne.n	800a9fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e8:	2b40      	cmp	r3, #64	; 0x40
 800a9ea:	d107      	bne.n	800a9fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f90b 	bl	800ac12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	d10e      	bne.n	800aa28 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	f003 0320 	and.w	r3, r3, #32
 800aa14:	2b20      	cmp	r3, #32
 800aa16:	d107      	bne.n	800aa28 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f06f 0220 	mvn.w	r2, #32
 800aa20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fabc 	bl	800afa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d101      	bne.n	800aa4c <HAL_TIM_ConfigClockSource+0x1c>
 800aa48:	2302      	movs	r3, #2
 800aa4a:	e0b6      	b.n	800abba <HAL_TIM_ConfigClockSource+0x18a>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2202      	movs	r2, #2
 800aa58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aa6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa88:	d03e      	beq.n	800ab08 <HAL_TIM_ConfigClockSource+0xd8>
 800aa8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa8e:	f200 8087 	bhi.w	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aa92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa96:	f000 8086 	beq.w	800aba6 <HAL_TIM_ConfigClockSource+0x176>
 800aa9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa9e:	d87f      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aaa0:	2b70      	cmp	r3, #112	; 0x70
 800aaa2:	d01a      	beq.n	800aada <HAL_TIM_ConfigClockSource+0xaa>
 800aaa4:	2b70      	cmp	r3, #112	; 0x70
 800aaa6:	d87b      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aaa8:	2b60      	cmp	r3, #96	; 0x60
 800aaaa:	d050      	beq.n	800ab4e <HAL_TIM_ConfigClockSource+0x11e>
 800aaac:	2b60      	cmp	r3, #96	; 0x60
 800aaae:	d877      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aab0:	2b50      	cmp	r3, #80	; 0x50
 800aab2:	d03c      	beq.n	800ab2e <HAL_TIM_ConfigClockSource+0xfe>
 800aab4:	2b50      	cmp	r3, #80	; 0x50
 800aab6:	d873      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aab8:	2b40      	cmp	r3, #64	; 0x40
 800aaba:	d058      	beq.n	800ab6e <HAL_TIM_ConfigClockSource+0x13e>
 800aabc:	2b40      	cmp	r3, #64	; 0x40
 800aabe:	d86f      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aac0:	2b30      	cmp	r3, #48	; 0x30
 800aac2:	d064      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15e>
 800aac4:	2b30      	cmp	r3, #48	; 0x30
 800aac6:	d86b      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aac8:	2b20      	cmp	r3, #32
 800aaca:	d060      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15e>
 800aacc:	2b20      	cmp	r3, #32
 800aace:	d867      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d05c      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15e>
 800aad4:	2b10      	cmp	r3, #16
 800aad6:	d05a      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15e>
 800aad8:	e062      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	6899      	ldr	r1, [r3, #8]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	f000 f9b1 	bl	800ae50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aafc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	609a      	str	r2, [r3, #8]
      break;
 800ab06:	e04f      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6818      	ldr	r0, [r3, #0]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	6899      	ldr	r1, [r3, #8]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685a      	ldr	r2, [r3, #4]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	f000 f99a 	bl	800ae50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689a      	ldr	r2, [r3, #8]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab2a:	609a      	str	r2, [r3, #8]
      break;
 800ab2c:	e03c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	6859      	ldr	r1, [r3, #4]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f000 f90e 	bl	800ad5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2150      	movs	r1, #80	; 0x50
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 f967 	bl	800ae1a <TIM_ITRx_SetConfig>
      break;
 800ab4c:	e02c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6818      	ldr	r0, [r3, #0]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	6859      	ldr	r1, [r3, #4]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f000 f92d 	bl	800adba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2160      	movs	r1, #96	; 0x60
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 f957 	bl	800ae1a <TIM_ITRx_SetConfig>
      break;
 800ab6c:	e01c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6818      	ldr	r0, [r3, #0]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	6859      	ldr	r1, [r3, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f000 f8ee 	bl	800ad5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2140      	movs	r1, #64	; 0x40
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f947 	bl	800ae1a <TIM_ITRx_SetConfig>
      break;
 800ab8c:	e00c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4619      	mov	r1, r3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f000 f93e 	bl	800ae1a <TIM_ITRx_SetConfig>
      break;
 800ab9e:	e003      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
      break;
 800aba4:	e000      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800aba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b083      	sub	sp, #12
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abea:	b480      	push	{r7}
 800abec:	b083      	sub	sp, #12
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b083      	sub	sp, #12
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
	...

0800ac28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a40      	ldr	r2, [pc, #256]	; (800ad3c <TIM_Base_SetConfig+0x114>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d013      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac46:	d00f      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a3d      	ldr	r2, [pc, #244]	; (800ad40 <TIM_Base_SetConfig+0x118>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00b      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a3c      	ldr	r2, [pc, #240]	; (800ad44 <TIM_Base_SetConfig+0x11c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d007      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a3b      	ldr	r2, [pc, #236]	; (800ad48 <TIM_Base_SetConfig+0x120>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d003      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a3a      	ldr	r2, [pc, #232]	; (800ad4c <TIM_Base_SetConfig+0x124>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d108      	bne.n	800ac7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a2f      	ldr	r2, [pc, #188]	; (800ad3c <TIM_Base_SetConfig+0x114>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d01f      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac88:	d01b      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a2c      	ldr	r2, [pc, #176]	; (800ad40 <TIM_Base_SetConfig+0x118>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d017      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a2b      	ldr	r2, [pc, #172]	; (800ad44 <TIM_Base_SetConfig+0x11c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d013      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a2a      	ldr	r2, [pc, #168]	; (800ad48 <TIM_Base_SetConfig+0x120>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d00f      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a29      	ldr	r2, [pc, #164]	; (800ad4c <TIM_Base_SetConfig+0x124>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d00b      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a28      	ldr	r2, [pc, #160]	; (800ad50 <TIM_Base_SetConfig+0x128>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d007      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a27      	ldr	r2, [pc, #156]	; (800ad54 <TIM_Base_SetConfig+0x12c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d003      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a26      	ldr	r2, [pc, #152]	; (800ad58 <TIM_Base_SetConfig+0x130>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d108      	bne.n	800acd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a10      	ldr	r2, [pc, #64]	; (800ad3c <TIM_Base_SetConfig+0x114>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00f      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a12      	ldr	r2, [pc, #72]	; (800ad4c <TIM_Base_SetConfig+0x124>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00b      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a11      	ldr	r2, [pc, #68]	; (800ad50 <TIM_Base_SetConfig+0x128>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d007      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a10      	ldr	r2, [pc, #64]	; (800ad54 <TIM_Base_SetConfig+0x12c>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d003      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a0f      	ldr	r2, [pc, #60]	; (800ad58 <TIM_Base_SetConfig+0x130>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d103      	bne.n	800ad28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	691a      	ldr	r2, [r3, #16]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	615a      	str	r2, [r3, #20]
}
 800ad2e:	bf00      	nop
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	40012c00 	.word	0x40012c00
 800ad40:	40000400 	.word	0x40000400
 800ad44:	40000800 	.word	0x40000800
 800ad48:	40000c00 	.word	0x40000c00
 800ad4c:	40013400 	.word	0x40013400
 800ad50:	40014000 	.word	0x40014000
 800ad54:	40014400 	.word	0x40014400
 800ad58:	40014800 	.word	0x40014800

0800ad5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	f023 0201 	bic.w	r2, r3, #1
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f023 030a 	bic.w	r3, r3, #10
 800ad98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	621a      	str	r2, [r3, #32]
}
 800adae:	bf00      	nop
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adba:	b480      	push	{r7}
 800adbc:	b087      	sub	sp, #28
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	f023 0210 	bic.w	r2, r3, #16
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ade4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	031b      	lsls	r3, r3, #12
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	4313      	orrs	r3, r2
 800adee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	011b      	lsls	r3, r3, #4
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	693a      	ldr	r2, [r7, #16]
 800ae0c:	621a      	str	r2, [r3, #32]
}
 800ae0e:	bf00      	nop
 800ae10:	371c      	adds	r7, #28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b085      	sub	sp, #20
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	f043 0307 	orr.w	r3, r3, #7
 800ae3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	609a      	str	r2, [r3, #8]
}
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
 800ae5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	021a      	lsls	r2, r3, #8
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	431a      	orrs	r2, r3
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	609a      	str	r2, [r3, #8]
}
 800ae84:	bf00      	nop
 800ae86:	371c      	adds	r7, #28
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d101      	bne.n	800aea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aea4:	2302      	movs	r3, #2
 800aea6:	e068      	b.n	800af7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a2e      	ldr	r2, [pc, #184]	; (800af88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d004      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a2d      	ldr	r2, [pc, #180]	; (800af8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d108      	bne.n	800aeee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aee2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a1e      	ldr	r2, [pc, #120]	; (800af88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d01d      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af1a:	d018      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a1b      	ldr	r2, [pc, #108]	; (800af90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d013      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a1a      	ldr	r2, [pc, #104]	; (800af94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00e      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a18      	ldr	r2, [pc, #96]	; (800af98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d009      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a13      	ldr	r2, [pc, #76]	; (800af8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d004      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a14      	ldr	r2, [pc, #80]	; (800af9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d10c      	bne.n	800af68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	40012c00 	.word	0x40012c00
 800af8c:	40013400 	.word	0x40013400
 800af90:	40000400 	.word	0x40000400
 800af94:	40000800 	.word	0x40000800
 800af98:	40000c00 	.word	0x40000c00
 800af9c:	40014000 	.word	0x40014000

0800afa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800afdc:	b084      	sub	sp, #16
 800afde:	b480      	push	{r7}
 800afe0:	b085      	sub	sp, #20
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	f107 001c 	add.w	r0, r7, #28
 800afea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800aff2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800aff4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aff6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800affa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800affe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b002:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	4313      	orrs	r3, r2
 800b008:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	4b07      	ldr	r3, [pc, #28]	; (800b02c <SDMMC_Init+0x50>)
 800b010:	4013      	ands	r3, r2
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	431a      	orrs	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	b004      	add	sp, #16
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	ffc02c00 	.word	0xffc02c00

0800b030 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b03e:	4618      	mov	r0, r3
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b083      	sub	sp, #12
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f043 0203 	orr.w	r2, r3, #3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b080:	2002      	movs	r0, #2
 800b082:	f7f7 f8f1 	bl	8002268 <HAL_Delay>

  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0303 	and.w	r3, r3, #3
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b0d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b0d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	4b06      	ldr	r3, [pc, #24]	; (800b0fc <SDMMC_SendCommand+0x50>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr
 800b0fc:	fffee0c0 	.word	0xfffee0c0

0800b100 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	b2db      	uxtb	r3, r3
}
 800b10e:	4618      	mov	r0, r3
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3314      	adds	r3, #20
 800b128:	461a      	mov	r2, r3
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	4413      	add	r3, r2
 800b12e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b166:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b16c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b172:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	4313      	orrs	r3, r2
 800b178:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	431a      	orrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b18a:	2300      	movs	r3, #0

}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b1a6:	2310      	movs	r3, #16
 800b1a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1ba:	f107 0308 	add.w	r3, r7, #8
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff ff73 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ca:	2110      	movs	r1, #16
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fa7b 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1d4:	69fb      	ldr	r3, [r7, #28]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3720      	adds	r7, #32
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b088      	sub	sp, #32
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b1ec:	2311      	movs	r3, #17
 800b1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b200:	f107 0308 	add.w	r3, r7, #8
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff ff50 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b20c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b210:	2111      	movs	r1, #17
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa58 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b21a:	69fb      	ldr	r3, [r7, #28]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3720      	adds	r7, #32
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b088      	sub	sp, #32
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b232:	2312      	movs	r3, #18
 800b234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b23a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b23c:	2300      	movs	r3, #0
 800b23e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b246:	f107 0308 	add.w	r3, r7, #8
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7ff ff2d 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b252:	f241 3288 	movw	r2, #5000	; 0x1388
 800b256:	2112      	movs	r1, #18
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fa35 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b25e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b260:	69fb      	ldr	r3, [r7, #28]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3720      	adds	r7, #32
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b088      	sub	sp, #32
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b278:	2318      	movs	r3, #24
 800b27a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b27c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b28a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b28c:	f107 0308 	add.w	r3, r7, #8
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7ff ff0a 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b298:	f241 3288 	movw	r2, #5000	; 0x1388
 800b29c:	2118      	movs	r1, #24
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fa12 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b2a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2a6:	69fb      	ldr	r3, [r7, #28]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3720      	adds	r7, #32
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b2be:	2319      	movs	r3, #25
 800b2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2d2:	f107 0308 	add.w	r3, r7, #8
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7ff fee7 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b2de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e2:	2119      	movs	r1, #25
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f9ef 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b2ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ec:	69fb      	ldr	r3, [r7, #28]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
	...

0800b2f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b300:	2300      	movs	r3, #0
 800b302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b304:	230c      	movs	r3, #12
 800b306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b316:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b330:	f107 0308 	add.w	r3, r7, #8
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff feb8 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b33c:	4a08      	ldr	r2, [pc, #32]	; (800b360 <SDMMC_CmdStopTransfer+0x68>)
 800b33e:	210c      	movs	r1, #12
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f9c1 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b346:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800b354:	69fb      	ldr	r3, [r7, #28]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3720      	adds	r7, #32
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	05f5e100 	.word	0x05f5e100

0800b364 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08a      	sub	sp, #40	; 0x28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b374:	2307      	movs	r3, #7
 800b376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b37c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b37e:	2300      	movs	r3, #0
 800b380:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b386:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b388:	f107 0310 	add.w	r3, r7, #16
 800b38c:	4619      	mov	r1, r3
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f7ff fe8c 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b394:	f241 3288 	movw	r2, #5000	; 0x1388
 800b398:	2107      	movs	r1, #7
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f000 f994 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b3a0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3728      	adds	r7, #40	; 0x28
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3ca:	f107 0308 	add.w	r3, r7, #8
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff fe6b 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fbb8 	bl	800bb4c <SDMMC_GetCmdError>
 800b3dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3de:	69fb      	ldr	r3, [r7, #28]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3720      	adds	r7, #32
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b3f0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b3f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b3f6:	2308      	movs	r3, #8
 800b3f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b400:	2300      	movs	r3, #0
 800b402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b40a:	f107 0308 	add.w	r3, r7, #8
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff fe4b 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fb4a 	bl	800bab0 <SDMMC_GetCmdResp7>
 800b41c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b41e:	69fb      	ldr	r3, [r7, #28]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3720      	adds	r7, #32
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b436:	2337      	movs	r3, #55	; 0x37
 800b438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b43a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b43e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b440:	2300      	movs	r3, #0
 800b442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b44a:	f107 0308 	add.w	r3, r7, #8
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff fe2b 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b456:	f241 3288 	movw	r2, #5000	; 0x1388
 800b45a:	2137      	movs	r1, #55	; 0x37
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f933 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b464:	69fb      	ldr	r3, [r7, #28]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b088      	sub	sp, #32
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b47c:	2329      	movs	r3, #41	; 0x29
 800b47e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b480:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b486:	2300      	movs	r3, #0
 800b488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b48a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b48e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b490:	f107 0308 	add.w	r3, r7, #8
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fe08 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fa4f 	bl	800b940 <SDMMC_GetCmdResp3>
 800b4a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a4:	69fb      	ldr	r3, [r7, #28]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3720      	adds	r7, #32
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b088      	sub	sp, #32
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b4bc:	2306      	movs	r3, #6
 800b4be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4d0:	f107 0308 	add.w	r3, r7, #8
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7ff fde8 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e0:	2106      	movs	r1, #6
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f8f0 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b4e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ea:	69fb      	ldr	r3, [r7, #28]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3720      	adds	r7, #32
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b088      	sub	sp, #32
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b500:	2333      	movs	r3, #51	; 0x33
 800b502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b504:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b50a:	2300      	movs	r3, #0
 800b50c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b50e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b514:	f107 0308 	add.w	r3, r7, #8
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff fdc6 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b520:	f241 3288 	movw	r2, #5000	; 0x1388
 800b524:	2133      	movs	r1, #51	; 0x33
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f8ce 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b52c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b52e:	69fb      	ldr	r3, [r7, #28]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3720      	adds	r7, #32
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b540:	2300      	movs	r3, #0
 800b542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b544:	2302      	movs	r3, #2
 800b546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b548:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b54c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b54e:	2300      	movs	r3, #0
 800b550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b558:	f107 0308 	add.w	r3, r7, #8
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f7ff fda4 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f9a1 	bl	800b8ac <SDMMC_GetCmdResp2>
 800b56a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b56c:	69fb      	ldr	r3, [r7, #28]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3720      	adds	r7, #32
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b088      	sub	sp, #32
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b584:	2309      	movs	r3, #9
 800b586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b588:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b58c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b58e:	2300      	movs	r3, #0
 800b590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b596:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b598:	f107 0308 	add.w	r3, r7, #8
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff fd84 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f981 	bl	800b8ac <SDMMC_GetCmdResp2>
 800b5aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ac:	69fb      	ldr	r3, [r7, #28]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3720      	adds	r7, #32
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b088      	sub	sp, #32
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5d8:	f107 0308 	add.w	r3, r7, #8
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7ff fd64 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	2103      	movs	r1, #3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f9e9 	bl	800b9c0 <SDMMC_GetCmdResp6>
 800b5ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3720      	adds	r7, #32
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b088      	sub	sp, #32
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b608:	230d      	movs	r3, #13
 800b60a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b60c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b61a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b61c:	f107 0308 	add.w	r3, r7, #8
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fd42 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b628:	f241 3288 	movw	r2, #5000	; 0x1388
 800b62c:	210d      	movs	r1, #13
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f84a 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b636:	69fb      	ldr	r3, [r7, #28]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3720      	adds	r7, #32
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b648:	2300      	movs	r3, #0
 800b64a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b64c:	230d      	movs	r3, #13
 800b64e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b650:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b65a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b65e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b660:	f107 0308 	add.w	r3, r7, #8
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fd20 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b66c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b670:	210d      	movs	r1, #13
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f828 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b67a:	69fb      	ldr	r3, [r7, #28]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3720      	adds	r7, #32
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b68c:	2300      	movs	r3, #0
 800b68e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b690:	230b      	movs	r3, #11
 800b692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b694:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b69a:	2300      	movs	r3, #0
 800b69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b69e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6a4:	f107 0308 	add.w	r3, r7, #8
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff fcfe 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b4:	210b      	movs	r1, #11
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f806 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b6bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6be:	69fb      	ldr	r3, [r7, #28]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3720      	adds	r7, #32
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b6d6:	4b70      	ldr	r3, [pc, #448]	; (800b898 <SDMMC_GetCmdResp1+0x1d0>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a70      	ldr	r2, [pc, #448]	; (800b89c <SDMMC_GetCmdResp1+0x1d4>)
 800b6dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e0:	0a5a      	lsrs	r2, r3, #9
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	fb02 f303 	mul.w	r3, r2, r3
 800b6e8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	1e5a      	subs	r2, r3, #1
 800b6ee:	61fa      	str	r2, [r7, #28]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d102      	bne.n	800b6fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6f8:	e0c9      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6fe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	4b67      	ldr	r3, [pc, #412]	; (800b8a0 <SDMMC_GetCmdResp1+0x1d8>)
 800b704:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b706:	2b00      	cmp	r3, #0
 800b708:	d0ef      	beq.n	800b6ea <SDMMC_GetCmdResp1+0x22>
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1ea      	bne.n	800b6ea <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b718:	f003 0304 	and.w	r3, r3, #4
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d004      	beq.n	800b72a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2204      	movs	r2, #4
 800b724:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b726:	2304      	movs	r3, #4
 800b728:	e0b1      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b00      	cmp	r3, #0
 800b734:	d004      	beq.n	800b740 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e0a6      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	4a58      	ldr	r2, [pc, #352]	; (800b8a4 <SDMMC_GetCmdResp1+0x1dc>)
 800b744:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7ff fcda 	bl	800b100 <SDMMC_GetCommandResponse>
 800b74c:	4603      	mov	r3, r0
 800b74e:	461a      	mov	r2, r3
 800b750:	7afb      	ldrb	r3, [r7, #11]
 800b752:	4293      	cmp	r3, r2
 800b754:	d001      	beq.n	800b75a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b756:	2301      	movs	r3, #1
 800b758:	e099      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b75a:	2100      	movs	r1, #0
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f7ff fcdc 	bl	800b11a <SDMMC_GetResponse>
 800b762:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	4b50      	ldr	r3, [pc, #320]	; (800b8a8 <SDMMC_GetCmdResp1+0x1e0>)
 800b768:	4013      	ands	r3, r2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
 800b770:	e08d      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2b00      	cmp	r3, #0
 800b776:	da02      	bge.n	800b77e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b77c:	e087      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b788:	2340      	movs	r3, #64	; 0x40
 800b78a:	e080      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b796:	2380      	movs	r3, #128	; 0x80
 800b798:	e079      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b7a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7a8:	e071      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b7b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7b8:	e069      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b7c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c8:	e061      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b7d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7d8:	e059      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b7e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7e8:	e051      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d002      	beq.n	800b7fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b7f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7f8:	e049      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b804:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b808:	e041      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b818:	e039      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b828:	e031      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b838:	e029      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b848:	e021      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b854:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b858:	e019      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b868:	e011      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b878:	e009      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f003 0308 	and.w	r3, r3, #8
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b884:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b888:	e001      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b88a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3720      	adds	r7, #32
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	20000000 	.word	0x20000000
 800b89c:	10624dd3 	.word	0x10624dd3
 800b8a0:	00200045 	.word	0x00200045
 800b8a4:	002000c5 	.word	0x002000c5
 800b8a8:	fdffe008 	.word	0xfdffe008

0800b8ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8b4:	4b1f      	ldr	r3, [pc, #124]	; (800b934 <SDMMC_GetCmdResp2+0x88>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a1f      	ldr	r2, [pc, #124]	; (800b938 <SDMMC_GetCmdResp2+0x8c>)
 800b8ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b8be:	0a5b      	lsrs	r3, r3, #9
 800b8c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c4:	fb02 f303 	mul.w	r3, r2, r3
 800b8c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	1e5a      	subs	r2, r3, #1
 800b8ce:	60fa      	str	r2, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8d8:	e026      	b.n	800b928 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0ef      	beq.n	800b8ca <SDMMC_GetCmdResp2+0x1e>
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1ea      	bne.n	800b8ca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f8:	f003 0304 	and.w	r3, r3, #4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2204      	movs	r2, #4
 800b904:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b906:	2304      	movs	r3, #4
 800b908:	e00e      	b.n	800b928 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e003      	b.n	800b928 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a06      	ldr	r2, [pc, #24]	; (800b93c <SDMMC_GetCmdResp2+0x90>)
 800b924:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	20000000 	.word	0x20000000
 800b938:	10624dd3 	.word	0x10624dd3
 800b93c:	002000c5 	.word	0x002000c5

0800b940 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b948:	4b1a      	ldr	r3, [pc, #104]	; (800b9b4 <SDMMC_GetCmdResp3+0x74>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a1a      	ldr	r2, [pc, #104]	; (800b9b8 <SDMMC_GetCmdResp3+0x78>)
 800b94e:	fba2 2303 	umull	r2, r3, r2, r3
 800b952:	0a5b      	lsrs	r3, r3, #9
 800b954:	f241 3288 	movw	r2, #5000	; 0x1388
 800b958:	fb02 f303 	mul.w	r3, r2, r3
 800b95c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	1e5a      	subs	r2, r3, #1
 800b962:	60fa      	str	r2, [r7, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d102      	bne.n	800b96e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b96c:	e01b      	b.n	800b9a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b972:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0ef      	beq.n	800b95e <SDMMC_GetCmdResp3+0x1e>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1ea      	bne.n	800b95e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	2b00      	cmp	r3, #0
 800b992:	d004      	beq.n	800b99e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2204      	movs	r2, #4
 800b998:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b99a:	2304      	movs	r3, #4
 800b99c:	e003      	b.n	800b9a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a06      	ldr	r2, [pc, #24]	; (800b9bc <SDMMC_GetCmdResp3+0x7c>)
 800b9a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	20000000 	.word	0x20000000
 800b9b8:	10624dd3 	.word	0x10624dd3
 800b9bc:	002000c5 	.word	0x002000c5

0800b9c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9ce:	4b35      	ldr	r3, [pc, #212]	; (800baa4 <SDMMC_GetCmdResp6+0xe4>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a35      	ldr	r2, [pc, #212]	; (800baa8 <SDMMC_GetCmdResp6+0xe8>)
 800b9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d8:	0a5b      	lsrs	r3, r3, #9
 800b9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9de:	fb02 f303 	mul.w	r3, r2, r3
 800b9e2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	1e5a      	subs	r2, r3, #1
 800b9e8:	61fa      	str	r2, [r7, #28]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9f2:	e052      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d0ef      	beq.n	800b9e4 <SDMMC_GetCmdResp6+0x24>
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1ea      	bne.n	800b9e4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba12:	f003 0304 	and.w	r3, r3, #4
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d004      	beq.n	800ba24 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2204      	movs	r2, #4
 800ba1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba20:	2304      	movs	r3, #4
 800ba22:	e03a      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d004      	beq.n	800ba3a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e02f      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f7ff fb60 	bl	800b100 <SDMMC_GetCommandResponse>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	7afb      	ldrb	r3, [r7, #11]
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d001      	beq.n	800ba4e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e025      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	4a16      	ldr	r2, [pc, #88]	; (800baac <SDMMC_GetCmdResp6+0xec>)
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba54:	2100      	movs	r1, #0
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7ff fb5f 	bl	800b11a <SDMMC_GetResponse>
 800ba5c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d106      	bne.n	800ba76 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	0c1b      	lsrs	r3, r3, #16
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ba72:	2300      	movs	r3, #0
 800ba74:	e011      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba84:	e009      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba94:	e001      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3720      	adds	r7, #32
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	20000000 	.word	0x20000000
 800baa8:	10624dd3 	.word	0x10624dd3
 800baac:	002000c5 	.word	0x002000c5

0800bab0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bab8:	4b22      	ldr	r3, [pc, #136]	; (800bb44 <SDMMC_GetCmdResp7+0x94>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a22      	ldr	r2, [pc, #136]	; (800bb48 <SDMMC_GetCmdResp7+0x98>)
 800babe:	fba2 2303 	umull	r2, r3, r2, r3
 800bac2:	0a5b      	lsrs	r3, r3, #9
 800bac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac8:	fb02 f303 	mul.w	r3, r2, r3
 800bacc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	1e5a      	subs	r2, r3, #1
 800bad2:	60fa      	str	r2, [r7, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800badc:	e02c      	b.n	800bb38 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800baea:	2b00      	cmp	r3, #0
 800baec:	d0ef      	beq.n	800bace <SDMMC_GetCmdResp7+0x1e>
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1ea      	bne.n	800bace <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d004      	beq.n	800bb0e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2204      	movs	r2, #4
 800bb08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb0a:	2304      	movs	r3, #4
 800bb0c:	e014      	b.n	800bb38 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d004      	beq.n	800bb24 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e009      	b.n	800bb38 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2240      	movs	r2, #64	; 0x40
 800bb34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb36:	2300      	movs	r3, #0

}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	20000000 	.word	0x20000000
 800bb48:	10624dd3 	.word	0x10624dd3

0800bb4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb54:	4b11      	ldr	r3, [pc, #68]	; (800bb9c <SDMMC_GetCmdError+0x50>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a11      	ldr	r2, [pc, #68]	; (800bba0 <SDMMC_GetCmdError+0x54>)
 800bb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb5e:	0a5b      	lsrs	r3, r3, #9
 800bb60:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb64:	fb02 f303 	mul.w	r3, r2, r3
 800bb68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	1e5a      	subs	r2, r3, #1
 800bb6e:	60fa      	str	r2, [r7, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d102      	bne.n	800bb7a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb78:	e009      	b.n	800bb8e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d0f1      	beq.n	800bb6a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a06      	ldr	r2, [pc, #24]	; (800bba4 <SDMMC_GetCmdError+0x58>)
 800bb8a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	20000000 	.word	0x20000000
 800bba0:	10624dd3 	.word	0x10624dd3
 800bba4:	002000c5 	.word	0x002000c5

0800bba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bba8:	b084      	sub	sp, #16
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	f107 001c 	add.w	r0, r7, #28
 800bbb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f001 faf6 	bl	800d1b8 <USB_CoreReset>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800bbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	639a      	str	r2, [r3, #56]	; 0x38
 800bbe2:	e005      	b.n	800bbf0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbfc:	b004      	add	sp, #16
 800bbfe:	4770      	bx	lr

0800bc00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d165      	bne.n	800bce0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	4a3e      	ldr	r2, [pc, #248]	; (800bd10 <USB_SetTurnaroundTime+0x110>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d906      	bls.n	800bc2a <USB_SetTurnaroundTime+0x2a>
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	4a3d      	ldr	r2, [pc, #244]	; (800bd14 <USB_SetTurnaroundTime+0x114>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d202      	bcs.n	800bc2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bc24:	230f      	movs	r3, #15
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	e05c      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	4a39      	ldr	r2, [pc, #228]	; (800bd14 <USB_SetTurnaroundTime+0x114>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d306      	bcc.n	800bc40 <USB_SetTurnaroundTime+0x40>
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	4a38      	ldr	r2, [pc, #224]	; (800bd18 <USB_SetTurnaroundTime+0x118>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d202      	bcs.n	800bc40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bc3a:	230e      	movs	r3, #14
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	e051      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	4a35      	ldr	r2, [pc, #212]	; (800bd18 <USB_SetTurnaroundTime+0x118>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d306      	bcc.n	800bc56 <USB_SetTurnaroundTime+0x56>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	4a34      	ldr	r2, [pc, #208]	; (800bd1c <USB_SetTurnaroundTime+0x11c>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d202      	bcs.n	800bc56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bc50:	230d      	movs	r3, #13
 800bc52:	617b      	str	r3, [r7, #20]
 800bc54:	e046      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	4a30      	ldr	r2, [pc, #192]	; (800bd1c <USB_SetTurnaroundTime+0x11c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d306      	bcc.n	800bc6c <USB_SetTurnaroundTime+0x6c>
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	4a2f      	ldr	r2, [pc, #188]	; (800bd20 <USB_SetTurnaroundTime+0x120>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d802      	bhi.n	800bc6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bc66:	230c      	movs	r3, #12
 800bc68:	617b      	str	r3, [r7, #20]
 800bc6a:	e03b      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	4a2c      	ldr	r2, [pc, #176]	; (800bd20 <USB_SetTurnaroundTime+0x120>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d906      	bls.n	800bc82 <USB_SetTurnaroundTime+0x82>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	4a2b      	ldr	r2, [pc, #172]	; (800bd24 <USB_SetTurnaroundTime+0x124>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d802      	bhi.n	800bc82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bc7c:	230b      	movs	r3, #11
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	e030      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	4a27      	ldr	r2, [pc, #156]	; (800bd24 <USB_SetTurnaroundTime+0x124>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d906      	bls.n	800bc98 <USB_SetTurnaroundTime+0x98>
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	4a26      	ldr	r2, [pc, #152]	; (800bd28 <USB_SetTurnaroundTime+0x128>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d802      	bhi.n	800bc98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bc92:	230a      	movs	r3, #10
 800bc94:	617b      	str	r3, [r7, #20]
 800bc96:	e025      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	4a23      	ldr	r2, [pc, #140]	; (800bd28 <USB_SetTurnaroundTime+0x128>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d906      	bls.n	800bcae <USB_SetTurnaroundTime+0xae>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4a22      	ldr	r2, [pc, #136]	; (800bd2c <USB_SetTurnaroundTime+0x12c>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d202      	bcs.n	800bcae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bca8:	2309      	movs	r3, #9
 800bcaa:	617b      	str	r3, [r7, #20]
 800bcac:	e01a      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	4a1e      	ldr	r2, [pc, #120]	; (800bd2c <USB_SetTurnaroundTime+0x12c>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d306      	bcc.n	800bcc4 <USB_SetTurnaroundTime+0xc4>
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	4a1d      	ldr	r2, [pc, #116]	; (800bd30 <USB_SetTurnaroundTime+0x130>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d802      	bhi.n	800bcc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bcbe:	2308      	movs	r3, #8
 800bcc0:	617b      	str	r3, [r7, #20]
 800bcc2:	e00f      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	4a1a      	ldr	r2, [pc, #104]	; (800bd30 <USB_SetTurnaroundTime+0x130>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d906      	bls.n	800bcda <USB_SetTurnaroundTime+0xda>
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	4a19      	ldr	r2, [pc, #100]	; (800bd34 <USB_SetTurnaroundTime+0x134>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d202      	bcs.n	800bcda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bcd4:	2307      	movs	r3, #7
 800bcd6:	617b      	str	r3, [r7, #20]
 800bcd8:	e004      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bcda:	2306      	movs	r3, #6
 800bcdc:	617b      	str	r3, [r7, #20]
 800bcde:	e001      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bce0:	2309      	movs	r3, #9
 800bce2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	68da      	ldr	r2, [r3, #12]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	029b      	lsls	r3, r3, #10
 800bcf8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bcfc:	431a      	orrs	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	371c      	adds	r7, #28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	00d8acbf 	.word	0x00d8acbf
 800bd14:	00e4e1c0 	.word	0x00e4e1c0
 800bd18:	00f42400 	.word	0x00f42400
 800bd1c:	01067380 	.word	0x01067380
 800bd20:	011a499f 	.word	0x011a499f
 800bd24:	01312cff 	.word	0x01312cff
 800bd28:	014ca43f 	.word	0x014ca43f
 800bd2c:	016e3600 	.word	0x016e3600
 800bd30:	01a6ab1f 	.word	0x01a6ab1f
 800bd34:	01e84800 	.word	0x01e84800

0800bd38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f043 0201 	orr.w	r2, r3, #1
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b083      	sub	sp, #12
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f023 0201 	bic.w	r2, r3, #1
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd98:	78fb      	ldrb	r3, [r7, #3]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d115      	bne.n	800bdca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bdaa:	2001      	movs	r0, #1
 800bdac:	f7f6 fa5c 	bl	8002268 <HAL_Delay>
      ms++;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f001 f985 	bl	800d0c6 <USB_GetMode>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d01e      	beq.n	800be00 <USB_SetCurrentMode+0x84>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2b31      	cmp	r3, #49	; 0x31
 800bdc6:	d9f0      	bls.n	800bdaa <USB_SetCurrentMode+0x2e>
 800bdc8:	e01a      	b.n	800be00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bdca:	78fb      	ldrb	r3, [r7, #3]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d115      	bne.n	800bdfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bddc:	2001      	movs	r0, #1
 800bdde:	f7f6 fa43 	bl	8002268 <HAL_Delay>
      ms++;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3301      	adds	r3, #1
 800bde6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f001 f96c 	bl	800d0c6 <USB_GetMode>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d005      	beq.n	800be00 <USB_SetCurrentMode+0x84>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b31      	cmp	r3, #49	; 0x31
 800bdf8:	d9f0      	bls.n	800bddc <USB_SetCurrentMode+0x60>
 800bdfa:	e001      	b.n	800be00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e005      	b.n	800be0c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b32      	cmp	r3, #50	; 0x32
 800be04:	d101      	bne.n	800be0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e000      	b.n	800be0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be14:	b084      	sub	sp, #16
 800be16:	b580      	push	{r7, lr}
 800be18:	b086      	sub	sp, #24
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800be22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800be2e:	2300      	movs	r3, #0
 800be30:	613b      	str	r3, [r7, #16]
 800be32:	e009      	b.n	800be48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	3340      	adds	r3, #64	; 0x40
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	2200      	movs	r2, #0
 800be40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	3301      	adds	r3, #1
 800be46:	613b      	str	r3, [r7, #16]
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	2b0e      	cmp	r3, #14
 800be4c:	d9f2      	bls.n	800be34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800be4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d11c      	bne.n	800be8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be62:	f043 0302 	orr.w	r3, r3, #2
 800be66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	e005      	b.n	800be9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bea0:	461a      	mov	r2, r3
 800bea2:	2300      	movs	r3, #0
 800bea4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beac:	4619      	mov	r1, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb4:	461a      	mov	r2, r3
 800beb6:	680b      	ldr	r3, [r1, #0]
 800beb8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800beba:	2103      	movs	r1, #3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f959 	bl	800c174 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bec2:	2110      	movs	r1, #16
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f8f1 	bl	800c0ac <USB_FlushTxFifo>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f91d 	bl	800c114 <USB_FlushRxFifo>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beea:	461a      	mov	r2, r3
 800beec:	2300      	movs	r3, #0
 800beee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef6:	461a      	mov	r2, r3
 800bef8:	2300      	movs	r3, #0
 800befa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf02:	461a      	mov	r2, r3
 800bf04:	2300      	movs	r3, #0
 800bf06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf08:	2300      	movs	r3, #0
 800bf0a:	613b      	str	r3, [r7, #16]
 800bf0c:	e043      	b.n	800bf96 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	015a      	lsls	r2, r3, #5
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	4413      	add	r3, r2
 800bf16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf24:	d118      	bne.n	800bf58 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10a      	bne.n	800bf42 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	015a      	lsls	r2, r3, #5
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	e013      	b.n	800bf6a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf4e:	461a      	mov	r2, r3
 800bf50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	e008      	b.n	800bf6a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf64:	461a      	mov	r2, r3
 800bf66:	2300      	movs	r3, #0
 800bf68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	015a      	lsls	r2, r3, #5
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	4413      	add	r3, r2
 800bf72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf76:	461a      	mov	r2, r3
 800bf78:	2300      	movs	r3, #0
 800bf7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	015a      	lsls	r2, r3, #5
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4413      	add	r3, r2
 800bf84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf88:	461a      	mov	r2, r3
 800bf8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	3301      	adds	r3, #1
 800bf94:	613b      	str	r3, [r7, #16]
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d3b7      	bcc.n	800bf0e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	613b      	str	r3, [r7, #16]
 800bfa2:	e043      	b.n	800c02c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	015a      	lsls	r2, r3, #5
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4413      	add	r3, r2
 800bfac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfba:	d118      	bne.n	800bfee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10a      	bne.n	800bfd8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	015a      	lsls	r2, r3, #5
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	4413      	add	r3, r2
 800bfca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bfd4:	6013      	str	r3, [r2, #0]
 800bfd6:	e013      	b.n	800c000 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	015a      	lsls	r2, r3, #5
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	e008      	b.n	800c000 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bffa:	461a      	mov	r2, r3
 800bffc:	2300      	movs	r3, #0
 800bffe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	015a      	lsls	r2, r3, #5
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4413      	add	r3, r2
 800c008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c00c:	461a      	mov	r2, r3
 800c00e:	2300      	movs	r3, #0
 800c010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	015a      	lsls	r2, r3, #5
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4413      	add	r3, r2
 800c01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c01e:	461a      	mov	r2, r3
 800c020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	3301      	adds	r3, #1
 800c02a:	613b      	str	r3, [r7, #16]
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	429a      	cmp	r2, r3
 800c032:	d3b7      	bcc.n	800bfa4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c046:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c054:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	f043 0210 	orr.w	r2, r3, #16
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	699a      	ldr	r2, [r3, #24]
 800c066:	4b10      	ldr	r3, [pc, #64]	; (800c0a8 <USB_DevInit+0x294>)
 800c068:	4313      	orrs	r3, r2
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d005      	beq.n	800c080 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	f043 0208 	orr.w	r2, r3, #8
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c082:	2b01      	cmp	r3, #1
 800c084:	d107      	bne.n	800c096 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c08e:	f043 0304 	orr.w	r3, r3, #4
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c096:	7dfb      	ldrb	r3, [r7, #23]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0a2:	b004      	add	sp, #16
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	803c3800 	.word	0x803c3800

0800c0ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4a13      	ldr	r2, [pc, #76]	; (800c110 <USB_FlushTxFifo+0x64>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d901      	bls.n	800c0cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e01b      	b.n	800c104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	daf2      	bge.n	800c0ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	019b      	lsls	r3, r3, #6
 800c0dc:	f043 0220 	orr.w	r2, r3, #32
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	4a08      	ldr	r2, [pc, #32]	; (800c110 <USB_FlushTxFifo+0x64>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d901      	bls.n	800c0f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e006      	b.n	800c104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	f003 0320 	and.w	r3, r3, #32
 800c0fe:	2b20      	cmp	r3, #32
 800c100:	d0f0      	beq.n	800c0e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	00030d40 	.word	0x00030d40

0800c114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c11c:	2300      	movs	r3, #0
 800c11e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3301      	adds	r3, #1
 800c124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	4a11      	ldr	r2, [pc, #68]	; (800c170 <USB_FlushRxFifo+0x5c>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d901      	bls.n	800c132 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e018      	b.n	800c164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	2b00      	cmp	r3, #0
 800c138:	daf2      	bge.n	800c120 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2210      	movs	r2, #16
 800c142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	3301      	adds	r3, #1
 800c148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4a08      	ldr	r2, [pc, #32]	; (800c170 <USB_FlushRxFifo+0x5c>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d901      	bls.n	800c156 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c152:	2303      	movs	r3, #3
 800c154:	e006      	b.n	800c164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	f003 0310 	and.w	r3, r3, #16
 800c15e:	2b10      	cmp	r3, #16
 800c160:	d0f0      	beq.n	800c144 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	00030d40 	.word	0x00030d40

0800c174 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	68f9      	ldr	r1, [r7, #12]
 800c190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c194:	4313      	orrs	r3, r2
 800c196:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr

0800c1a6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b087      	sub	sp, #28
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	f003 0306 	and.w	r3, r3, #6
 800c1be:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d002      	beq.n	800c1cc <USB_GetDevSpeed+0x26>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b06      	cmp	r3, #6
 800c1ca:	d102      	bne.n	800c1d2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c1cc:	2302      	movs	r3, #2
 800c1ce:	75fb      	strb	r3, [r7, #23]
 800c1d0:	e001      	b.n	800c1d6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c1d2:	230f      	movs	r3, #15
 800c1d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	371c      	adds	r7, #28
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	785b      	ldrb	r3, [r3, #1]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d13a      	bne.n	800c276 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c206:	69da      	ldr	r2, [r3, #28]
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	f003 030f 	and.w	r3, r3, #15
 800c210:	2101      	movs	r1, #1
 800c212:	fa01 f303 	lsl.w	r3, r1, r3
 800c216:	b29b      	uxth	r3, r3
 800c218:	68f9      	ldr	r1, [r7, #12]
 800c21a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c21e:	4313      	orrs	r3, r2
 800c220:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c234:	2b00      	cmp	r3, #0
 800c236:	d155      	bne.n	800c2e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	791b      	ldrb	r3, [r3, #4]
 800c252:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c254:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	059b      	lsls	r3, r3, #22
 800c25a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c25c:	4313      	orrs	r3, r2
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	0151      	lsls	r1, r2, #5
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	440a      	add	r2, r1
 800c266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c26a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c26e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c272:	6013      	str	r3, [r2, #0]
 800c274:	e036      	b.n	800c2e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c27c:	69da      	ldr	r2, [r3, #28]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	f003 030f 	and.w	r3, r3, #15
 800c286:	2101      	movs	r1, #1
 800c288:	fa01 f303 	lsl.w	r3, r1, r3
 800c28c:	041b      	lsls	r3, r3, #16
 800c28e:	68f9      	ldr	r1, [r7, #12]
 800c290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c294:	4313      	orrs	r3, r2
 800c296:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	015a      	lsls	r2, r3, #5
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d11a      	bne.n	800c2e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	015a      	lsls	r2, r3, #5
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	791b      	ldrb	r3, [r3, #4]
 800c2c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c2ca:	430b      	orrs	r3, r1
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	0151      	lsls	r1, r2, #5
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	440a      	add	r2, r1
 800c2d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3714      	adds	r7, #20
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
	...

0800c2f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	785b      	ldrb	r3, [r3, #1]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d161      	bne.n	800c3d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	015a      	lsls	r2, r3, #5
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	4413      	add	r3, r2
 800c318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c326:	d11f      	bne.n	800c368 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	015a      	lsls	r2, r3, #5
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	4413      	add	r3, r2
 800c330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	0151      	lsls	r1, r2, #5
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	440a      	add	r2, r1
 800c33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c346:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	015a      	lsls	r2, r3, #5
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4413      	add	r3, r2
 800c350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	0151      	lsls	r1, r2, #5
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	440a      	add	r2, r1
 800c35e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c366:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c36e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 030f 	and.w	r3, r3, #15
 800c378:	2101      	movs	r1, #1
 800c37a:	fa01 f303 	lsl.w	r3, r1, r3
 800c37e:	b29b      	uxth	r3, r3
 800c380:	43db      	mvns	r3, r3
 800c382:	68f9      	ldr	r1, [r7, #12]
 800c384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c388:	4013      	ands	r3, r2
 800c38a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c392:	69da      	ldr	r2, [r3, #28]
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	f003 030f 	and.w	r3, r3, #15
 800c39c:	2101      	movs	r1, #1
 800c39e:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	43db      	mvns	r3, r3
 800c3a6:	68f9      	ldr	r1, [r7, #12]
 800c3a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	0159      	lsls	r1, r3, #5
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	440b      	add	r3, r1
 800c3c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	4b35      	ldr	r3, [pc, #212]	; (800c4a4 <USB_DeactivateEndpoint+0x1b0>)
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	600b      	str	r3, [r1, #0]
 800c3d2:	e060      	b.n	800c496 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3ea:	d11f      	bne.n	800c42c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	0151      	lsls	r1, r2, #5
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	440a      	add	r2, r1
 800c402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c40a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	015a      	lsls	r2, r3, #5
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4413      	add	r3, r2
 800c414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	0151      	lsls	r1, r2, #5
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	440a      	add	r2, r1
 800c422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c42a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	f003 030f 	and.w	r3, r3, #15
 800c43c:	2101      	movs	r1, #1
 800c43e:	fa01 f303 	lsl.w	r3, r1, r3
 800c442:	041b      	lsls	r3, r3, #16
 800c444:	43db      	mvns	r3, r3
 800c446:	68f9      	ldr	r1, [r7, #12]
 800c448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c44c:	4013      	ands	r3, r2
 800c44e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c456:	69da      	ldr	r2, [r3, #28]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	f003 030f 	and.w	r3, r3, #15
 800c460:	2101      	movs	r1, #1
 800c462:	fa01 f303 	lsl.w	r3, r1, r3
 800c466:	041b      	lsls	r3, r3, #16
 800c468:	43db      	mvns	r3, r3
 800c46a:	68f9      	ldr	r1, [r7, #12]
 800c46c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c470:	4013      	ands	r3, r2
 800c472:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	0159      	lsls	r1, r3, #5
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	440b      	add	r3, r1
 800c48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c48e:	4619      	mov	r1, r3
 800c490:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <USB_DeactivateEndpoint+0x1b4>)
 800c492:	4013      	ands	r3, r2
 800c494:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	ec337800 	.word	0xec337800
 800c4a8:	eff37800 	.word	0xeff37800

0800c4ac <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	785b      	ldrb	r3, [r3, #1]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	f040 810a 	bne.w	800c6de <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d132      	bne.n	800c538 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	4413      	add	r3, r2
 800c4da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	0151      	lsls	r1, r2, #5
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	440a      	add	r2, r1
 800c4e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	0151      	lsls	r1, r2, #5
 800c508:	697a      	ldr	r2, [r7, #20]
 800c50a:	440a      	add	r2, r1
 800c50c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	015a      	lsls	r2, r3, #5
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	4413      	add	r3, r2
 800c51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	0151      	lsls	r1, r2, #5
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	440a      	add	r2, r1
 800c52c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c530:	0cdb      	lsrs	r3, r3, #19
 800c532:	04db      	lsls	r3, r3, #19
 800c534:	6113      	str	r3, [r2, #16]
 800c536:	e074      	b.n	800c622 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	015a      	lsls	r2, r3, #5
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	4413      	add	r3, r2
 800c540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	0151      	lsls	r1, r2, #5
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	440a      	add	r2, r1
 800c54e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c552:	0cdb      	lsrs	r3, r3, #19
 800c554:	04db      	lsls	r3, r3, #19
 800c556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	693a      	ldr	r2, [r7, #16]
 800c568:	0151      	lsls	r1, r2, #5
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	440a      	add	r2, r1
 800c56e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c572:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c576:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c57a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c588:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	6999      	ldr	r1, [r3, #24]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	440b      	add	r3, r1
 800c594:	1e59      	subs	r1, r3, #1
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c59e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c5a0:	4b9e      	ldr	r3, [pc, #632]	; (800c81c <USB_EPStartXfer+0x370>)
 800c5a2:	400b      	ands	r3, r1
 800c5a4:	6939      	ldr	r1, [r7, #16]
 800c5a6:	0148      	lsls	r0, r1, #5
 800c5a8:	6979      	ldr	r1, [r7, #20]
 800c5aa:	4401      	add	r1, r0
 800c5ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c0:	691a      	ldr	r2, [r3, #16]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	699b      	ldr	r3, [r3, #24]
 800c5c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5ca:	6939      	ldr	r1, [r7, #16]
 800c5cc:	0148      	lsls	r0, r1, #5
 800c5ce:	6979      	ldr	r1, [r7, #20]
 800c5d0:	4401      	add	r1, r0
 800c5d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	791b      	ldrb	r3, [r3, #4]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d11f      	bne.n	800c622 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	015a      	lsls	r2, r3, #5
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	0151      	lsls	r1, r2, #5
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	440a      	add	r2, r1
 800c5f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c600:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	015a      	lsls	r2, r3, #5
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	4413      	add	r3, r2
 800c60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	0151      	lsls	r1, r2, #5
 800c614:	697a      	ldr	r2, [r7, #20]
 800c616:	440a      	add	r2, r1
 800c618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c61c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c620:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	015a      	lsls	r2, r3, #5
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	4413      	add	r3, r2
 800c62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	0151      	lsls	r1, r2, #5
 800c634:	697a      	ldr	r2, [r7, #20]
 800c636:	440a      	add	r2, r1
 800c638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c63c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c640:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	791b      	ldrb	r3, [r3, #4]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d015      	beq.n	800c676 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 8106 	beq.w	800c860 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c65a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	f003 030f 	and.w	r3, r3, #15
 800c664:	2101      	movs	r1, #1
 800c666:	fa01 f303 	lsl.w	r3, r1, r3
 800c66a:	6979      	ldr	r1, [r7, #20]
 800c66c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c670:	4313      	orrs	r3, r2
 800c672:	634b      	str	r3, [r1, #52]	; 0x34
 800c674:	e0f4      	b.n	800c860 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c682:	2b00      	cmp	r3, #0
 800c684:	d110      	bne.n	800c6a8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	0151      	lsls	r1, r2, #5
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	440a      	add	r2, r1
 800c69c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c6a4:	6013      	str	r3, [r2, #0]
 800c6a6:	e00f      	b.n	800c6c8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	0151      	lsls	r1, r2, #5
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	440a      	add	r2, r1
 800c6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6c6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	6919      	ldr	r1, [r3, #16]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781a      	ldrb	r2, [r3, #0]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fa94 	bl	800cc04 <USB_WritePacket>
 800c6dc:	e0c0      	b.n	800c860 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	0151      	lsls	r1, r2, #5
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	440a      	add	r2, r1
 800c6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6f8:	0cdb      	lsrs	r3, r3, #19
 800c6fa:	04db      	lsls	r3, r3, #19
 800c6fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	0151      	lsls	r1, r2, #5
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	440a      	add	r2, r1
 800c714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c718:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c71c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c720:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d123      	bne.n	800c772 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	015a      	lsls	r2, r3, #5
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	4413      	add	r3, r2
 800c732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c736:	691a      	ldr	r2, [r3, #16]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c740:	6939      	ldr	r1, [r7, #16]
 800c742:	0148      	lsls	r0, r1, #5
 800c744:	6979      	ldr	r1, [r7, #20]
 800c746:	4401      	add	r1, r0
 800c748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c74c:	4313      	orrs	r3, r2
 800c74e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	015a      	lsls	r2, r3, #5
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	4413      	add	r3, r2
 800c758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	0151      	lsls	r1, r2, #5
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	440a      	add	r2, r1
 800c766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c76a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c76e:	6113      	str	r3, [r2, #16]
 800c770:	e037      	b.n	800c7e2 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	699a      	ldr	r2, [r3, #24]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	4413      	add	r3, r2
 800c77c:	1e5a      	subs	r2, r3, #1
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	fbb2 f3f3 	udiv	r3, r2, r3
 800c786:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	89fa      	ldrh	r2, [r7, #14]
 800c78e:	fb03 f202 	mul.w	r2, r3, r2
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	015a      	lsls	r2, r3, #5
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a2:	691a      	ldr	r2, [r3, #16]
 800c7a4:	89fb      	ldrh	r3, [r7, #14]
 800c7a6:	04d9      	lsls	r1, r3, #19
 800c7a8:	4b1c      	ldr	r3, [pc, #112]	; (800c81c <USB_EPStartXfer+0x370>)
 800c7aa:	400b      	ands	r3, r1
 800c7ac:	6939      	ldr	r1, [r7, #16]
 800c7ae:	0148      	lsls	r0, r1, #5
 800c7b0:	6979      	ldr	r1, [r7, #20]
 800c7b2:	4401      	add	r1, r0
 800c7b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	015a      	lsls	r2, r3, #5
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c8:	691a      	ldr	r2, [r3, #16]
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	69db      	ldr	r3, [r3, #28]
 800c7ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7d2:	6939      	ldr	r1, [r7, #16]
 800c7d4:	0148      	lsls	r0, r1, #5
 800c7d6:	6979      	ldr	r1, [r7, #20]
 800c7d8:	4401      	add	r1, r0
 800c7da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	791b      	ldrb	r3, [r3, #4]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d12a      	bne.n	800c840 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d112      	bne.n	800c820 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	4413      	add	r3, r2
 800c802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	0151      	lsls	r1, r2, #5
 800c80c:	697a      	ldr	r2, [r7, #20]
 800c80e:	440a      	add	r2, r1
 800c810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	e011      	b.n	800c840 <USB_EPStartXfer+0x394>
 800c81c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	0151      	lsls	r1, r2, #5
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	440a      	add	r2, r1
 800c836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c83a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c83e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	4413      	add	r3, r2
 800c848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	0151      	lsls	r1, r2, #5
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	440a      	add	r2, r1
 800c856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c85a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c85e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop

0800c86c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	785b      	ldrb	r3, [r3, #1]
 800c884:	2b01      	cmp	r3, #1
 800c886:	f040 80ab 	bne.w	800c9e0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	699b      	ldr	r3, [r3, #24]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d132      	bne.n	800c8f8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	015a      	lsls	r2, r3, #5
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	4413      	add	r3, r2
 800c89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	0151      	lsls	r1, r2, #5
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	440a      	add	r2, r1
 800c8a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c8b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c8b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	0151      	lsls	r1, r2, #5
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	440a      	add	r2, r1
 800c8cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	015a      	lsls	r2, r3, #5
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	4413      	add	r3, r2
 800c8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	0151      	lsls	r1, r2, #5
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	440a      	add	r2, r1
 800c8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8f0:	0cdb      	lsrs	r3, r3, #19
 800c8f2:	04db      	lsls	r3, r3, #19
 800c8f4:	6113      	str	r3, [r2, #16]
 800c8f6:	e04e      	b.n	800c996 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	015a      	lsls	r2, r3, #5
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	4413      	add	r3, r2
 800c900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	0151      	lsls	r1, r2, #5
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	440a      	add	r2, r1
 800c90e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c912:	0cdb      	lsrs	r3, r3, #19
 800c914:	04db      	lsls	r3, r3, #19
 800c916:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	0151      	lsls	r1, r2, #5
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	440a      	add	r2, r1
 800c92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c932:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c936:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c93a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	699a      	ldr	r2, [r3, #24]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	429a      	cmp	r2, r3
 800c946:	d903      	bls.n	800c950 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	68da      	ldr	r2, [r3, #12]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	015a      	lsls	r2, r3, #5
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4413      	add	r3, r2
 800c958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	0151      	lsls	r1, r2, #5
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	440a      	add	r2, r1
 800c966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c96a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c96e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	015a      	lsls	r2, r3, #5
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	4413      	add	r3, r2
 800c978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c97c:	691a      	ldr	r2, [r3, #16]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	0148      	lsls	r0, r1, #5
 800c98a:	68f9      	ldr	r1, [r7, #12]
 800c98c:	4401      	add	r1, r0
 800c98e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c992:	4313      	orrs	r3, r2
 800c994:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	0151      	lsls	r1, r2, #5
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	440a      	add	r2, r1
 800c9ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9b4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d071      	beq.n	800caa2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	f003 030f 	and.w	r3, r3, #15
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c9d4:	68f9      	ldr	r1, [r7, #12]
 800c9d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	634b      	str	r3, [r1, #52]	; 0x34
 800c9de:	e060      	b.n	800caa2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	0151      	lsls	r1, r2, #5
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	440a      	add	r2, r1
 800c9f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9fa:	0cdb      	lsrs	r3, r3, #19
 800c9fc:	04db      	lsls	r3, r3, #19
 800c9fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	015a      	lsls	r2, r3, #5
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	0151      	lsls	r1, r2, #5
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	440a      	add	r2, r1
 800ca16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca22:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	68da      	ldr	r2, [r3, #12]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	68da      	ldr	r2, [r3, #12]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	015a      	lsls	r2, r3, #5
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	0151      	lsls	r1, r2, #5
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	440a      	add	r2, r1
 800ca52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	015a      	lsls	r2, r3, #5
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	4413      	add	r3, r2
 800ca64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca68:	691a      	ldr	r2, [r3, #16]
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	69db      	ldr	r3, [r3, #28]
 800ca6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca72:	68b9      	ldr	r1, [r7, #8]
 800ca74:	0148      	lsls	r0, r1, #5
 800ca76:	68f9      	ldr	r1, [r7, #12]
 800ca78:	4401      	add	r1, r0
 800ca7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	015a      	lsls	r2, r3, #5
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	4413      	add	r3, r2
 800ca8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	0151      	lsls	r1, r2, #5
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	440a      	add	r2, r1
 800ca98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800caa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800caba:	2300      	movs	r3, #0
 800cabc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	785b      	ldrb	r3, [r3, #1]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d14a      	bne.n	800cb64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cae6:	f040 8086 	bne.w	800cbf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	7812      	ldrb	r2, [r2, #0]
 800cafe:	0151      	lsls	r1, r2, #5
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	440a      	add	r2, r1
 800cb04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	015a      	lsls	r2, r3, #5
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	4413      	add	r3, r2
 800cb18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	7812      	ldrb	r2, [r2, #0]
 800cb22:	0151      	lsls	r1, r2, #5
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	440a      	add	r2, r1
 800cb28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3301      	adds	r3, #1
 800cb36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d902      	bls.n	800cb48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	75fb      	strb	r3, [r7, #23]
          break;
 800cb46:	e056      	b.n	800cbf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	015a      	lsls	r2, r3, #5
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	4413      	add	r3, r2
 800cb52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb60:	d0e7      	beq.n	800cb32 <USB_EPStopXfer+0x82>
 800cb62:	e048      	b.n	800cbf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb7c:	d13b      	bne.n	800cbf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	7812      	ldrb	r2, [r2, #0]
 800cb92:	0151      	lsls	r1, r2, #5
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	440a      	add	r2, r1
 800cb98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cba0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	7812      	ldrb	r2, [r2, #0]
 800cbb6:	0151      	lsls	r1, r2, #5
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	440a      	add	r2, r1
 800cbbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d902      	bls.n	800cbdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	75fb      	strb	r3, [r7, #23]
          break;
 800cbda:	e00c      	b.n	800cbf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	015a      	lsls	r2, r3, #5
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbf4:	d0e7      	beq.n	800cbc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	371c      	adds	r7, #28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b089      	sub	sp, #36	; 0x24
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	461a      	mov	r2, r3
 800cc12:	460b      	mov	r3, r1
 800cc14:	71fb      	strb	r3, [r7, #7]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800cc22:	88bb      	ldrh	r3, [r7, #4]
 800cc24:	3303      	adds	r3, #3
 800cc26:	089b      	lsrs	r3, r3, #2
 800cc28:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	61bb      	str	r3, [r7, #24]
 800cc2e:	e018      	b.n	800cc62 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	031a      	lsls	r2, r3, #12
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	4413      	add	r3, r2
 800cc38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6013      	str	r3, [r2, #0]
    pSrc++;
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	3301      	adds	r3, #1
 800cc48:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	3301      	adds	r3, #1
 800cc54:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	61bb      	str	r3, [r7, #24]
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d3e2      	bcc.n	800cc30 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3724      	adds	r7, #36	; 0x24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b08b      	sub	sp, #44	; 0x2c
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	4613      	mov	r3, r2
 800cc84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cc8e:	88fb      	ldrh	r3, [r7, #6]
 800cc90:	089b      	lsrs	r3, r3, #2
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cc96:	88fb      	ldrh	r3, [r7, #6]
 800cc98:	f003 0303 	and.w	r3, r3, #3
 800cc9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cc9e:	2300      	movs	r3, #0
 800cca0:	623b      	str	r3, [r7, #32]
 800cca2:	e014      	b.n	800ccce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccae:	601a      	str	r2, [r3, #0]
    pDest++;
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	3301      	adds	r3, #1
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	3301      	adds	r3, #1
 800cccc:	623b      	str	r3, [r7, #32]
 800ccce:	6a3a      	ldr	r2, [r7, #32]
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d3e6      	bcc.n	800cca4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ccd6:	8bfb      	ldrh	r3, [r7, #30]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d01e      	beq.n	800cd1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cce6:	461a      	mov	r2, r3
 800cce8:	f107 0310 	add.w	r3, r7, #16
 800ccec:	6812      	ldr	r2, [r2, #0]
 800ccee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ccf0:	693a      	ldr	r2, [r7, #16]
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	701a      	strb	r2, [r3, #0]
      i++;
 800cd02:	6a3b      	ldr	r3, [r7, #32]
 800cd04:	3301      	adds	r3, #1
 800cd06:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cd0e:	8bfb      	ldrh	r3, [r7, #30]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd14:	8bfb      	ldrh	r3, [r7, #30]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1ea      	bne.n	800ccf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	372c      	adds	r7, #44	; 0x2c
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	785b      	ldrb	r3, [r3, #1]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d12c      	bne.n	800cd9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	db12      	blt.n	800cd7c <USB_EPSetStall+0x54>
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00f      	beq.n	800cd7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	0151      	lsls	r1, r2, #5
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	440a      	add	r2, r1
 800cd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	015a      	lsls	r2, r3, #5
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	4413      	add	r3, r2
 800cd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	0151      	lsls	r1, r2, #5
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	440a      	add	r2, r1
 800cd92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	e02b      	b.n	800cdf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	015a      	lsls	r2, r3, #5
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	4413      	add	r3, r2
 800cda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	db12      	blt.n	800cdd6 <USB_EPSetStall+0xae>
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00f      	beq.n	800cdd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	015a      	lsls	r2, r3, #5
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	0151      	lsls	r1, r2, #5
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	440a      	add	r2, r1
 800cdcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	015a      	lsls	r2, r3, #5
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	4413      	add	r3, r2
 800cdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	0151      	lsls	r1, r2, #5
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	440a      	add	r2, r1
 800cdec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	785b      	ldrb	r3, [r3, #1]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d128      	bne.n	800ce72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	015a      	lsls	r2, r3, #5
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	4413      	add	r3, r2
 800ce28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	0151      	lsls	r1, r2, #5
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	440a      	add	r2, r1
 800ce36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	791b      	ldrb	r3, [r3, #4]
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d003      	beq.n	800ce50 <USB_EPClearStall+0x4c>
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	791b      	ldrb	r3, [r3, #4]
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d138      	bne.n	800cec2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	015a      	lsls	r2, r3, #5
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4413      	add	r3, r2
 800ce58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	0151      	lsls	r1, r2, #5
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	440a      	add	r2, r1
 800ce66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce6e:	6013      	str	r3, [r2, #0]
 800ce70:	e027      	b.n	800cec2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	015a      	lsls	r2, r3, #5
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	0151      	lsls	r1, r2, #5
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	440a      	add	r2, r1
 800ce88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	791b      	ldrb	r3, [r3, #4]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d003      	beq.n	800cea2 <USB_EPClearStall+0x9e>
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	791b      	ldrb	r3, [r3, #4]
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d10f      	bne.n	800cec2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	015a      	lsls	r2, r3, #5
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	4413      	add	r3, r2
 800ceaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	0151      	lsls	r1, r2, #5
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	440a      	add	r2, r1
 800ceb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cec0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3714      	adds	r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ceee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cef2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	78fb      	ldrb	r3, [r7, #3]
 800cefe:	011b      	lsls	r3, r3, #4
 800cf00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cf04:	68f9      	ldr	r1, [r7, #12]
 800cf06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf36:	f023 0303 	bic.w	r3, r3, #3
 800cf3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf4a:	f023 0302 	bic.w	r3, r3, #2
 800cf4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b085      	sub	sp, #20
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf78:	f023 0303 	bic.w	r3, r3, #3
 800cf7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf8c:	f043 0302 	orr.w	r3, r3, #2
 800cf90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	695b      	ldr	r3, [r3, #20]
 800cfac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3714      	adds	r7, #20
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr

0800cfc6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfc6:	b480      	push	{r7}
 800cfc8:	b085      	sub	sp, #20
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	68ba      	ldr	r2, [r7, #8]
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	0c1b      	lsrs	r3, r3, #16
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b085      	sub	sp, #20
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d00c:	699b      	ldr	r3, [r3, #24]
 800d00e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	4013      	ands	r3, r2
 800d01c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	b29b      	uxth	r3, r3
}
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d02e:	b480      	push	{r7}
 800d030:	b085      	sub	sp, #20
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	460b      	mov	r3, r1
 800d038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	015a      	lsls	r2, r3, #5
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	4413      	add	r3, r2
 800d046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	4013      	ands	r3, r2
 800d05a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d05c:	68bb      	ldr	r3, [r7, #8]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b087      	sub	sp, #28
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	460b      	mov	r3, r1
 800d074:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d08c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d08e:	78fb      	ldrb	r3, [r7, #3]
 800d090:	f003 030f 	and.w	r3, r3, #15
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	fa22 f303 	lsr.w	r3, r2, r3
 800d09a:	01db      	lsls	r3, r3, #7
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	693a      	ldr	r2, [r7, #16]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d0a4:	78fb      	ldrb	r3, [r7, #3]
 800d0a6:	015a      	lsls	r2, r3, #5
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	693a      	ldr	r2, [r7, #16]
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0b8:	68bb      	ldr	r3, [r7, #8]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	371c      	adds	r7, #28
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr

0800d0c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d0c6:	b480      	push	{r7}
 800d0c8:	b083      	sub	sp, #12
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	f003 0301 	and.w	r3, r3, #1
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	370c      	adds	r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b085      	sub	sp, #20
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d100:	f023 0307 	bic.w	r3, r3, #7
 800d104:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d118:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	333c      	adds	r3, #60	; 0x3c
 800d13a:	3304      	adds	r3, #4
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	4a1c      	ldr	r2, [pc, #112]	; (800d1b4 <USB_EP0_OutStart+0x8c>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d90a      	bls.n	800d15e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d158:	d101      	bne.n	800d15e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	e024      	b.n	800d1a8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d164:	461a      	mov	r2, r3
 800d166:	2300      	movs	r3, #0
 800d168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d178:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d17c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d18c:	f043 0318 	orr.w	r3, r3, #24
 800d190:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d1a4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d1a6:	2300      	movs	r3, #0
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3714      	adds	r7, #20
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr
 800d1b4:	4f54300a 	.word	0x4f54300a

0800d1b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	4a13      	ldr	r2, [pc, #76]	; (800d21c <USB_CoreReset+0x64>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d901      	bls.n	800d1d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e01b      	b.n	800d20e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	daf2      	bge.n	800d1c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	f043 0201 	orr.w	r2, r3, #1
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	4a09      	ldr	r2, [pc, #36]	; (800d21c <USB_CoreReset+0x64>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d901      	bls.n	800d200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e006      	b.n	800d20e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d0f0      	beq.n	800d1ee <USB_CoreReset+0x36>

  return HAL_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3714      	adds	r7, #20
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	00030d40 	.word	0x00030d40

0800d220 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d224:	4904      	ldr	r1, [pc, #16]	; (800d238 <MX_FATFS_Init+0x18>)
 800d226:	4805      	ldr	r0, [pc, #20]	; (800d23c <MX_FATFS_Init+0x1c>)
 800d228:	f005 fad0 	bl	80127cc <FATFS_LinkDriver>
 800d22c:	4603      	mov	r3, r0
 800d22e:	461a      	mov	r2, r3
 800d230:	4b03      	ldr	r3, [pc, #12]	; (800d240 <MX_FATFS_Init+0x20>)
 800d232:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d234:	bf00      	nop
 800d236:	bd80      	pop	{r7, pc}
 800d238:	20000f88 	.word	0x20000f88
 800d23c:	08018f28 	.word	0x08018f28
 800d240:	20000f84 	.word	0x20000f84

0800d244 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d244:	b480      	push	{r7}
 800d246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d248:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d25e:	f000 f885 	bl	800d36c <BSP_SD_IsDetected>
 800d262:	4603      	mov	r3, r0
 800d264:	2b01      	cmp	r3, #1
 800d266:	d001      	beq.n	800d26c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d268:	2302      	movs	r3, #2
 800d26a:	e012      	b.n	800d292 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d26c:	480b      	ldr	r0, [pc, #44]	; (800d29c <BSP_SD_Init+0x48>)
 800d26e:	f7fb f959 	bl	8008524 <HAL_SD_Init>
 800d272:	4603      	mov	r3, r0
 800d274:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d276:	79fb      	ldrb	r3, [r7, #7]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d109      	bne.n	800d290 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d27c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d280:	4806      	ldr	r0, [pc, #24]	; (800d29c <BSP_SD_Init+0x48>)
 800d282:	f7fc f80d 	bl	80092a0 <HAL_SD_ConfigWideBusOperation>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d290:	79fb      	ldrb	r3, [r7, #7]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	20000cc0 	.word	0x20000cc0

0800d2a0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	68f9      	ldr	r1, [r7, #12]
 800d2b6:	4806      	ldr	r0, [pc, #24]	; (800d2d0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d2b8:	f7fb fa5c 	bl	8008774 <HAL_SD_ReadBlocks_DMA>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3718      	adds	r7, #24
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	20000cc0 	.word	0x20000cc0

0800d2d4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b086      	sub	sp, #24
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	68f9      	ldr	r1, [r7, #12]
 800d2ea:	4806      	ldr	r0, [pc, #24]	; (800d304 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d2ec:	f7fb faea 	bl	80088c4 <HAL_SD_WriteBlocks_DMA>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d001      	beq.n	800d2fa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3718      	adds	r7, #24
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	20000cc0 	.word	0x20000cc0

0800d308 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d30c:	4805      	ldr	r0, [pc, #20]	; (800d324 <BSP_SD_GetCardState+0x1c>)
 800d30e:	f7fc f8db 	bl	80094c8 <HAL_SD_GetCardState>
 800d312:	4603      	mov	r3, r0
 800d314:	2b04      	cmp	r3, #4
 800d316:	bf14      	ite	ne
 800d318:	2301      	movne	r3, #1
 800d31a:	2300      	moveq	r3, #0
 800d31c:	b2db      	uxtb	r3, r3
}
 800d31e:	4618      	mov	r0, r3
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20000cc0 	.word	0x20000cc0

0800d328 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d330:	6879      	ldr	r1, [r7, #4]
 800d332:	4803      	ldr	r0, [pc, #12]	; (800d340 <BSP_SD_GetCardInfo+0x18>)
 800d334:	f7fb ff88 	bl	8009248 <HAL_SD_GetCardInfo>
}
 800d338:	bf00      	nop
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	20000cc0 	.word	0x20000cc0

0800d344 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d34c:	f000 f9a0 	bl	800d690 <BSP_SD_WriteCpltCallback>
}
 800d350:	bf00      	nop
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d360:	f000 f9a2 	bl	800d6a8 <BSP_SD_ReadCpltCallback>
}
 800d364:	bf00      	nop
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d372:	2301      	movs	r3, #1
 800d374:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d376:	f000 f80b 	bl	800d390 <BSP_PlatformIsDetected>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d380:	2300      	movs	r3, #0
 800d382:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	b2db      	uxtb	r3, r3
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d396:	2301      	movs	r3, #1
 800d398:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d39a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d39e:	4806      	ldr	r0, [pc, #24]	; (800d3b8 <BSP_PlatformIsDetected+0x28>)
 800d3a0:	f7f6 fde2 	bl	8003f68 <HAL_GPIO_ReadPin>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d001      	beq.n	800d3ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	48000400 	.word	0x48000400

0800d3bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d3c4:	f7f4 ff44 	bl	8002250 <HAL_GetTick>
 800d3c8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d3ca:	e006      	b.n	800d3da <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d3cc:	f7ff ff9c 	bl	800d308 <BSP_SD_GetCardState>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e009      	b.n	800d3ee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d3da:	f7f4 ff39 	bl	8002250 <HAL_GetTick>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d8f0      	bhi.n	800d3cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d3ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
	...

0800d3f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d402:	4b0b      	ldr	r3, [pc, #44]	; (800d430 <SD_CheckStatus+0x38>)
 800d404:	2201      	movs	r2, #1
 800d406:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d408:	f7ff ff7e 	bl	800d308 <BSP_SD_GetCardState>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d107      	bne.n	800d422 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d412:	4b07      	ldr	r3, [pc, #28]	; (800d430 <SD_CheckStatus+0x38>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	b2db      	uxtb	r3, r3
 800d418:	f023 0301 	bic.w	r3, r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	4b04      	ldr	r3, [pc, #16]	; (800d430 <SD_CheckStatus+0x38>)
 800d420:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d422:	4b03      	ldr	r3, [pc, #12]	; (800d430 <SD_CheckStatus+0x38>)
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	b2db      	uxtb	r3, r3
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	20000009 	.word	0x20000009

0800d434 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	4603      	mov	r3, r0
 800d43c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d43e:	f7ff ff09 	bl	800d254 <BSP_SD_Init>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d107      	bne.n	800d458 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff ffd4 	bl	800d3f8 <SD_CheckStatus>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	4b04      	ldr	r3, [pc, #16]	; (800d468 <SD_initialize+0x34>)
 800d456:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d458:	4b03      	ldr	r3, [pc, #12]	; (800d468 <SD_initialize+0x34>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	b2db      	uxtb	r3, r3
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20000009 	.word	0x20000009

0800d46c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	4603      	mov	r3, r0
 800d474:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d476:	79fb      	ldrb	r3, [r7, #7]
 800d478:	4618      	mov	r0, r3
 800d47a:	f7ff ffbd 	bl	800d3f8 <SD_CheckStatus>
 800d47e:	4603      	mov	r3, r0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	607a      	str	r2, [r7, #4]
 800d492:	603b      	str	r3, [r7, #0]
 800d494:	4603      	mov	r3, r0
 800d496:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d49c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d4a0:	f7ff ff8c 	bl	800d3bc <SD_CheckStatusWithTimeout>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	da01      	bge.n	800d4ae <SD_read+0x26>
  {
    return res;
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
 800d4ac:	e03b      	b.n	800d526 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	6879      	ldr	r1, [r7, #4]
 800d4b2:	68b8      	ldr	r0, [r7, #8]
 800d4b4:	f7ff fef4 	bl	800d2a0 <BSP_SD_ReadBlocks_DMA>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d132      	bne.n	800d524 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d4be:	4b1c      	ldr	r3, [pc, #112]	; (800d530 <SD_read+0xa8>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d4c4:	f7f4 fec4 	bl	8002250 <HAL_GetTick>
 800d4c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d4ca:	bf00      	nop
 800d4cc:	4b18      	ldr	r3, [pc, #96]	; (800d530 <SD_read+0xa8>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d108      	bne.n	800d4e6 <SD_read+0x5e>
 800d4d4:	f7f4 febc 	bl	8002250 <HAL_GetTick>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	f247 522f 	movw	r2, #29999	; 0x752f
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d9f2      	bls.n	800d4cc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d4e6:	4b12      	ldr	r3, [pc, #72]	; (800d530 <SD_read+0xa8>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d102      	bne.n	800d4f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	75fb      	strb	r3, [r7, #23]
 800d4f2:	e017      	b.n	800d524 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d4f4:	4b0e      	ldr	r3, [pc, #56]	; (800d530 <SD_read+0xa8>)
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d4fa:	f7f4 fea9 	bl	8002250 <HAL_GetTick>
 800d4fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d500:	e007      	b.n	800d512 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d502:	f7ff ff01 	bl	800d308 <BSP_SD_GetCardState>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d102      	bne.n	800d512 <SD_read+0x8a>
          {
            res = RES_OK;
 800d50c:	2300      	movs	r3, #0
 800d50e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d510:	e008      	b.n	800d524 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d512:	f7f4 fe9d 	bl	8002250 <HAL_GetTick>
 800d516:	4602      	mov	r2, r0
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d520:	4293      	cmp	r3, r2
 800d522:	d9ee      	bls.n	800d502 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d524:	7dfb      	ldrb	r3, [r7, #23]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3718      	adds	r7, #24
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	200013f4 	.word	0x200013f4

0800d534 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b086      	sub	sp, #24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60b9      	str	r1, [r7, #8]
 800d53c:	607a      	str	r2, [r7, #4]
 800d53e:	603b      	str	r3, [r7, #0]
 800d540:	4603      	mov	r3, r0
 800d542:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d548:	4b24      	ldr	r3, [pc, #144]	; (800d5dc <SD_write+0xa8>)
 800d54a:	2200      	movs	r2, #0
 800d54c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d54e:	f247 5030 	movw	r0, #30000	; 0x7530
 800d552:	f7ff ff33 	bl	800d3bc <SD_CheckStatusWithTimeout>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	da01      	bge.n	800d560 <SD_write+0x2c>
  {
    return res;
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
 800d55e:	e038      	b.n	800d5d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	68b8      	ldr	r0, [r7, #8]
 800d566:	f7ff feb5 	bl	800d2d4 <BSP_SD_WriteBlocks_DMA>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d12f      	bne.n	800d5d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d570:	f7f4 fe6e 	bl	8002250 <HAL_GetTick>
 800d574:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d576:	bf00      	nop
 800d578:	4b18      	ldr	r3, [pc, #96]	; (800d5dc <SD_write+0xa8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d108      	bne.n	800d592 <SD_write+0x5e>
 800d580:	f7f4 fe66 	bl	8002250 <HAL_GetTick>
 800d584:	4602      	mov	r2, r0
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	1ad3      	subs	r3, r2, r3
 800d58a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d58e:	4293      	cmp	r3, r2
 800d590:	d9f2      	bls.n	800d578 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d592:	4b12      	ldr	r3, [pc, #72]	; (800d5dc <SD_write+0xa8>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d102      	bne.n	800d5a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	75fb      	strb	r3, [r7, #23]
 800d59e:	e017      	b.n	800d5d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d5a0:	4b0e      	ldr	r3, [pc, #56]	; (800d5dc <SD_write+0xa8>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d5a6:	f7f4 fe53 	bl	8002250 <HAL_GetTick>
 800d5aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d5ac:	e007      	b.n	800d5be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d5ae:	f7ff feab 	bl	800d308 <BSP_SD_GetCardState>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <SD_write+0x8a>
          {
            res = RES_OK;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	75fb      	strb	r3, [r7, #23]
            break;
 800d5bc:	e008      	b.n	800d5d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d5be:	f7f4 fe47 	bl	8002250 <HAL_GetTick>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	1ad3      	subs	r3, r2, r3
 800d5c8:	f247 522f 	movw	r2, #29999	; 0x752f
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d9ee      	bls.n	800d5ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3718      	adds	r7, #24
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	200013f0 	.word	0x200013f0

0800d5e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08c      	sub	sp, #48	; 0x30
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	603a      	str	r2, [r7, #0]
 800d5ea:	71fb      	strb	r3, [r7, #7]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d5f6:	4b25      	ldr	r3, [pc, #148]	; (800d68c <SD_ioctl+0xac>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b00      	cmp	r3, #0
 800d602:	d001      	beq.n	800d608 <SD_ioctl+0x28>
 800d604:	2303      	movs	r3, #3
 800d606:	e03c      	b.n	800d682 <SD_ioctl+0xa2>

  switch (cmd)
 800d608:	79bb      	ldrb	r3, [r7, #6]
 800d60a:	2b03      	cmp	r3, #3
 800d60c:	d834      	bhi.n	800d678 <SD_ioctl+0x98>
 800d60e:	a201      	add	r2, pc, #4	; (adr r2, 800d614 <SD_ioctl+0x34>)
 800d610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d614:	0800d625 	.word	0x0800d625
 800d618:	0800d62d 	.word	0x0800d62d
 800d61c:	0800d645 	.word	0x0800d645
 800d620:	0800d65f 	.word	0x0800d65f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d62a:	e028      	b.n	800d67e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d62c:	f107 0308 	add.w	r3, r7, #8
 800d630:	4618      	mov	r0, r3
 800d632:	f7ff fe79 	bl	800d328 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d636:	6a3a      	ldr	r2, [r7, #32]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d642:	e01c      	b.n	800d67e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d644:	f107 0308 	add.w	r3, r7, #8
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff fe6d 	bl	800d328 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d650:	b29a      	uxth	r2, r3
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d65c:	e00f      	b.n	800d67e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d65e:	f107 0308 	add.w	r3, r7, #8
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff fe60 	bl	800d328 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66a:	0a5a      	lsrs	r2, r3, #9
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d670:	2300      	movs	r3, #0
 800d672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d676:	e002      	b.n	800d67e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d678:	2304      	movs	r3, #4
 800d67a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d67e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d682:	4618      	mov	r0, r3
 800d684:	3730      	adds	r7, #48	; 0x30
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	20000009 	.word	0x20000009

0800d690 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d690:	b480      	push	{r7}
 800d692:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d694:	4b03      	ldr	r3, [pc, #12]	; (800d6a4 <BSP_SD_WriteCpltCallback+0x14>)
 800d696:	2201      	movs	r2, #1
 800d698:	601a      	str	r2, [r3, #0]
}
 800d69a:	bf00      	nop
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr
 800d6a4:	200013f0 	.word	0x200013f0

0800d6a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d6ac:	4b03      	ldr	r3, [pc, #12]	; (800d6bc <BSP_SD_ReadCpltCallback+0x14>)
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	601a      	str	r2, [r3, #0]
}
 800d6b2:	bf00      	nop
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	200013f4 	.word	0x200013f4

0800d6c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d6cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d6d0:	f005 ff96 	bl	8013600 <USBD_static_malloc>
 800d6d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d105      	bne.n	800d6e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	e066      	b.n	800d7b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	7c1b      	ldrb	r3, [r3, #16]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d119      	bne.n	800d72c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d6f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	2181      	movs	r1, #129	; 0x81
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f005 fd69 	bl	80131d8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2201      	movs	r2, #1
 800d70a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d70c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d710:	2202      	movs	r2, #2
 800d712:	2101      	movs	r1, #1
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f005 fd5f 	bl	80131d8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2201      	movs	r2, #1
 800d71e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2210      	movs	r2, #16
 800d726:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d72a:	e016      	b.n	800d75a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d72c:	2340      	movs	r3, #64	; 0x40
 800d72e:	2202      	movs	r2, #2
 800d730:	2181      	movs	r1, #129	; 0x81
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f005 fd50 	bl	80131d8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d73e:	2340      	movs	r3, #64	; 0x40
 800d740:	2202      	movs	r2, #2
 800d742:	2101      	movs	r1, #1
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f005 fd47 	bl	80131d8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2201      	movs	r2, #1
 800d74e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2210      	movs	r2, #16
 800d756:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d75a:	2308      	movs	r3, #8
 800d75c:	2203      	movs	r2, #3
 800d75e:	2182      	movs	r1, #130	; 0x82
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f005 fd39 	bl	80131d8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2201      	movs	r2, #1
 800d76a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	7c1b      	ldrb	r3, [r3, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d109      	bne.n	800d7a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d79a:	2101      	movs	r1, #1
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f005 fe95 	bl	80134cc <USBD_LL_PrepareReceive>
 800d7a2:	e007      	b.n	800d7b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d7aa:	2340      	movs	r3, #64	; 0x40
 800d7ac:	2101      	movs	r1, #1
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f005 fe8c 	bl	80134cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d7ca:	2181      	movs	r1, #129	; 0x81
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f005 fd41 	bl	8013254 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d7d8:	2101      	movs	r1, #1
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f005 fd3a 	bl	8013254 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d7e8:	2182      	movs	r1, #130	; 0x82
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f005 fd32 	bl	8013254 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00e      	beq.n	800d828 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d81a:	4618      	mov	r0, r3
 800d81c:	f005 fefe 	bl	801361c <USBD_static_free>
    pdev->pClassData = NULL;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3708      	adds	r7, #8
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
	...

0800d834 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d844:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d84a:	2300      	movs	r3, #0
 800d84c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d101      	bne.n	800d85c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d858:	2303      	movs	r3, #3
 800d85a:	e0af      	b.n	800d9bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d864:	2b00      	cmp	r3, #0
 800d866:	d03f      	beq.n	800d8e8 <USBD_CDC_Setup+0xb4>
 800d868:	2b20      	cmp	r3, #32
 800d86a:	f040 809f 	bne.w	800d9ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	88db      	ldrh	r3, [r3, #6]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d02e      	beq.n	800d8d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	b25b      	sxtb	r3, r3
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	da16      	bge.n	800d8ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d88c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	88d2      	ldrh	r2, [r2, #6]
 800d892:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	88db      	ldrh	r3, [r3, #6]
 800d898:	2b07      	cmp	r3, #7
 800d89a:	bf28      	it	cs
 800d89c:	2307      	movcs	r3, #7
 800d89e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	89fa      	ldrh	r2, [r7, #14]
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f001 fb43 	bl	800ef32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d8ac:	e085      	b.n	800d9ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	785a      	ldrb	r2, [r3, #1]
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	88db      	ldrh	r3, [r3, #6]
 800d8bc:	b2da      	uxtb	r2, r3
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d8c4:	6939      	ldr	r1, [r7, #16]
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	88db      	ldrh	r3, [r3, #6]
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f001 fb5c 	bl	800ef8a <USBD_CtlPrepareRx>
      break;
 800d8d2:	e072      	b.n	800d9ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	7850      	ldrb	r0, [r2, #1]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	4798      	blx	r3
      break;
 800d8e6:	e068      	b.n	800d9ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	785b      	ldrb	r3, [r3, #1]
 800d8ec:	2b0b      	cmp	r3, #11
 800d8ee:	d852      	bhi.n	800d996 <USBD_CDC_Setup+0x162>
 800d8f0:	a201      	add	r2, pc, #4	; (adr r2, 800d8f8 <USBD_CDC_Setup+0xc4>)
 800d8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f6:	bf00      	nop
 800d8f8:	0800d929 	.word	0x0800d929
 800d8fc:	0800d9a5 	.word	0x0800d9a5
 800d900:	0800d997 	.word	0x0800d997
 800d904:	0800d997 	.word	0x0800d997
 800d908:	0800d997 	.word	0x0800d997
 800d90c:	0800d997 	.word	0x0800d997
 800d910:	0800d997 	.word	0x0800d997
 800d914:	0800d997 	.word	0x0800d997
 800d918:	0800d997 	.word	0x0800d997
 800d91c:	0800d997 	.word	0x0800d997
 800d920:	0800d953 	.word	0x0800d953
 800d924:	0800d97d 	.word	0x0800d97d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b03      	cmp	r3, #3
 800d932:	d107      	bne.n	800d944 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d934:	f107 030a 	add.w	r3, r7, #10
 800d938:	2202      	movs	r2, #2
 800d93a:	4619      	mov	r1, r3
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f001 faf8 	bl	800ef32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d942:	e032      	b.n	800d9aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d944:	6839      	ldr	r1, [r7, #0]
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f001 fa82 	bl	800ee50 <USBD_CtlError>
            ret = USBD_FAIL;
 800d94c:	2303      	movs	r3, #3
 800d94e:	75fb      	strb	r3, [r7, #23]
          break;
 800d950:	e02b      	b.n	800d9aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	2b03      	cmp	r3, #3
 800d95c:	d107      	bne.n	800d96e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d95e:	f107 030d 	add.w	r3, r7, #13
 800d962:	2201      	movs	r2, #1
 800d964:	4619      	mov	r1, r3
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f001 fae3 	bl	800ef32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d96c:	e01d      	b.n	800d9aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d96e:	6839      	ldr	r1, [r7, #0]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f001 fa6d 	bl	800ee50 <USBD_CtlError>
            ret = USBD_FAIL;
 800d976:	2303      	movs	r3, #3
 800d978:	75fb      	strb	r3, [r7, #23]
          break;
 800d97a:	e016      	b.n	800d9aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d982:	b2db      	uxtb	r3, r3
 800d984:	2b03      	cmp	r3, #3
 800d986:	d00f      	beq.n	800d9a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d988:	6839      	ldr	r1, [r7, #0]
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f001 fa60 	bl	800ee50 <USBD_CtlError>
            ret = USBD_FAIL;
 800d990:	2303      	movs	r3, #3
 800d992:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d994:	e008      	b.n	800d9a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f001 fa59 	bl	800ee50 <USBD_CtlError>
          ret = USBD_FAIL;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d9a2:	e002      	b.n	800d9aa <USBD_CDC_Setup+0x176>
          break;
 800d9a4:	bf00      	nop
 800d9a6:	e008      	b.n	800d9ba <USBD_CDC_Setup+0x186>
          break;
 800d9a8:	bf00      	nop
      }
      break;
 800d9aa:	e006      	b.n	800d9ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d9ac:	6839      	ldr	r1, [r7, #0]
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f001 fa4e 	bl	800ee50 <USBD_CtlError>
      ret = USBD_FAIL;
 800d9b4:	2303      	movs	r3, #3
 800d9b6:	75fb      	strb	r3, [r7, #23]
      break;
 800d9b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d101      	bne.n	800d9e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d9e2:	2303      	movs	r3, #3
 800d9e4:	e04f      	b.n	800da86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d9ee:	78fa      	ldrb	r2, [r7, #3]
 800d9f0:	6879      	ldr	r1, [r7, #4]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	4413      	add	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	440b      	add	r3, r1
 800d9fc:	3318      	adds	r3, #24
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d029      	beq.n	800da58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800da04:	78fa      	ldrb	r2, [r7, #3]
 800da06:	6879      	ldr	r1, [r7, #4]
 800da08:	4613      	mov	r3, r2
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	4413      	add	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	440b      	add	r3, r1
 800da12:	3318      	adds	r3, #24
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	78f9      	ldrb	r1, [r7, #3]
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	460b      	mov	r3, r1
 800da1c:	00db      	lsls	r3, r3, #3
 800da1e:	440b      	add	r3, r1
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4403      	add	r3, r0
 800da24:	3348      	adds	r3, #72	; 0x48
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	fbb2 f1f3 	udiv	r1, r2, r3
 800da2c:	fb01 f303 	mul.w	r3, r1, r3
 800da30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800da32:	2b00      	cmp	r3, #0
 800da34:	d110      	bne.n	800da58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800da36:	78fa      	ldrb	r2, [r7, #3]
 800da38:	6879      	ldr	r1, [r7, #4]
 800da3a:	4613      	mov	r3, r2
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	4413      	add	r3, r2
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	440b      	add	r3, r1
 800da44:	3318      	adds	r3, #24
 800da46:	2200      	movs	r2, #0
 800da48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800da4a:	78f9      	ldrb	r1, [r7, #3]
 800da4c:	2300      	movs	r3, #0
 800da4e:	2200      	movs	r2, #0
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f005 fd03 	bl	801345c <USBD_LL_Transmit>
 800da56:	e015      	b.n	800da84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	2200      	movs	r2, #0
 800da5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00b      	beq.n	800da84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800da7a:	68ba      	ldr	r2, [r7, #8]
 800da7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800da80:	78fa      	ldrb	r2, [r7, #3]
 800da82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800da84:	2300      	movs	r3, #0
}
 800da86:	4618      	mov	r0, r3
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b084      	sub	sp, #16
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	460b      	mov	r3, r1
 800da98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daa0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d101      	bne.n	800dab0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800daac:	2303      	movs	r3, #3
 800daae:	e015      	b.n	800dadc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	4619      	mov	r1, r3
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f005 fd41 	bl	801353c <USBD_LL_GetRxDataSize>
 800daba:	4602      	mov	r2, r0
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dad6:	4611      	mov	r1, r2
 800dad8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3710      	adds	r7, #16
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d101      	bne.n	800dafe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800dafa:	2303      	movs	r3, #3
 800dafc:	e01b      	b.n	800db36 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d015      	beq.n	800db34 <USBD_CDC_EP0_RxReady+0x50>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800db0e:	2bff      	cmp	r3, #255	; 0xff
 800db10:	d010      	beq.n	800db34 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800db20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800db28:	b292      	uxth	r2, r2
 800db2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	22ff      	movs	r2, #255	; 0xff
 800db30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
	...

0800db40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2243      	movs	r2, #67	; 0x43
 800db4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800db4e:	4b03      	ldr	r3, [pc, #12]	; (800db5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800db50:	4618      	mov	r0, r3
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	20000094 	.word	0x20000094

0800db60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2243      	movs	r2, #67	; 0x43
 800db6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800db6e:	4b03      	ldr	r3, [pc, #12]	; (800db7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	20000050 	.word	0x20000050

0800db80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2243      	movs	r2, #67	; 0x43
 800db8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800db8e:	4b03      	ldr	r3, [pc, #12]	; (800db9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800db90:	4618      	mov	r0, r3
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	200000d8 	.word	0x200000d8

0800dba0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	220a      	movs	r2, #10
 800dbac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dbae:	4b03      	ldr	r3, [pc, #12]	; (800dbbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	2000000c 	.word	0x2000000c

0800dbc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d101      	bne.n	800dbd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dbd0:	2303      	movs	r3, #3
 800dbd2:	e004      	b.n	800dbde <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	683a      	ldr	r2, [r7, #0]
 800dbd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b087      	sub	sp, #28
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	60f8      	str	r0, [r7, #12]
 800dbf2:	60b9      	str	r1, [r7, #8]
 800dbf4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbfc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d101      	bne.n	800dc08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dc04:	2303      	movs	r3, #3
 800dc06:	e008      	b.n	800dc1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	371c      	adds	r7, #28
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dc26:	b480      	push	{r7}
 800dc28:	b085      	sub	sp, #20
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
 800dc2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d101      	bne.n	800dc42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800dc3e:	2303      	movs	r3, #3
 800dc40:	e004      	b.n	800dc4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	683a      	ldr	r2, [r7, #0]
 800dc46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dc4a:	2300      	movs	r3, #0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3714      	adds	r7, #20
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc76:	2303      	movs	r3, #3
 800dc78:	e01a      	b.n	800dcb0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d114      	bne.n	800dcae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2201      	movs	r2, #1
 800dc88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dca2:	2181      	movs	r1, #129	; 0x81
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f005 fbd9 	bl	801345c <USBD_LL_Transmit>

    ret = USBD_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dcd2:	2303      	movs	r3, #3
 800dcd4:	e016      	b.n	800dd04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	7c1b      	ldrb	r3, [r3, #16]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d109      	bne.n	800dcf2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dce8:	2101      	movs	r1, #1
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f005 fbee 	bl	80134cc <USBD_LL_PrepareReceive>
 800dcf0:	e007      	b.n	800dd02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dcf8:	2340      	movs	r3, #64	; 0x40
 800dcfa:	2101      	movs	r1, #1
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f005 fbe5 	bl	80134cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3710      	adds	r7, #16
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	4613      	mov	r3, r2
 800dd18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dd20:	2303      	movs	r3, #3
 800dd22:	e01f      	b.n	800dd64 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2200      	movs	r2, #0
 800dd28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d003      	beq.n	800dd4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	79fa      	ldrb	r2, [r7, #7]
 800dd56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f005 f9c1 	bl	80130e0 <USBD_LL_Init>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3718      	adds	r7, #24
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d101      	bne.n	800dd84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dd80:	2303      	movs	r3, #3
 800dd82:	e016      	b.n	800ddb2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00b      	beq.n	800ddb0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda0:	f107 020e 	add.w	r2, r7, #14
 800dda4:	4610      	mov	r0, r2
 800dda6:	4798      	blx	r3
 800dda8:	4602      	mov	r2, r0
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ddb0:	2300      	movs	r3, #0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b082      	sub	sp, #8
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f005 f9d6 	bl	8013174 <USBD_LL_Start>
 800ddc8:	4603      	mov	r3, r0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ddd2:	b480      	push	{r7}
 800ddd4:	b083      	sub	sp, #12
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d009      	beq.n	800de16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	78fa      	ldrb	r2, [r7, #3]
 800de0c:	4611      	mov	r1, r2
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	4798      	blx	r3
 800de12:	4603      	mov	r3, r0
 800de14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800de16:	7bfb      	ldrb	r3, [r7, #15]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	460b      	mov	r3, r1
 800de2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de32:	2b00      	cmp	r3, #0
 800de34:	d007      	beq.n	800de46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	78fa      	ldrb	r2, [r7, #3]
 800de40:	4611      	mov	r1, r2
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	4798      	blx	r3
  }

  return USBD_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	4618      	mov	r0, r3
 800de64:	f000 ffba 	bl	800eddc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800de76:	461a      	mov	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de84:	f003 031f 	and.w	r3, r3, #31
 800de88:	2b02      	cmp	r3, #2
 800de8a:	d01a      	beq.n	800dec2 <USBD_LL_SetupStage+0x72>
 800de8c:	2b02      	cmp	r3, #2
 800de8e:	d822      	bhi.n	800ded6 <USBD_LL_SetupStage+0x86>
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <USBD_LL_SetupStage+0x4a>
 800de94:	2b01      	cmp	r3, #1
 800de96:	d00a      	beq.n	800deae <USBD_LL_SetupStage+0x5e>
 800de98:	e01d      	b.n	800ded6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dea0:	4619      	mov	r1, r3
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 fa62 	bl	800e36c <USBD_StdDevReq>
 800dea8:	4603      	mov	r3, r0
 800deaa:	73fb      	strb	r3, [r7, #15]
      break;
 800deac:	e020      	b.n	800def0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800deb4:	4619      	mov	r1, r3
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 fac6 	bl	800e448 <USBD_StdItfReq>
 800debc:	4603      	mov	r3, r0
 800debe:	73fb      	strb	r3, [r7, #15]
      break;
 800dec0:	e016      	b.n	800def0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fb05 	bl	800e4da <USBD_StdEPReq>
 800ded0:	4603      	mov	r3, r0
 800ded2:	73fb      	strb	r3, [r7, #15]
      break;
 800ded4:	e00c      	b.n	800def0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dedc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	4619      	mov	r1, r3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f005 f9eb 	bl	80132c0 <USBD_LL_StallEP>
 800deea:	4603      	mov	r3, r0
 800deec:	73fb      	strb	r3, [r7, #15]
      break;
 800deee:	bf00      	nop
  }

  return ret;
 800def0:	7bfb      	ldrb	r3, [r7, #15]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b086      	sub	sp, #24
 800defe:	af00      	add	r7, sp, #0
 800df00:	60f8      	str	r0, [r7, #12]
 800df02:	460b      	mov	r3, r1
 800df04:	607a      	str	r2, [r7, #4]
 800df06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800df08:	7afb      	ldrb	r3, [r7, #11]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d138      	bne.n	800df80 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800df14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d14a      	bne.n	800dfb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	689a      	ldr	r2, [r3, #8]
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d913      	bls.n	800df54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	689a      	ldr	r2, [r3, #8]
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	1ad2      	subs	r2, r2, r3
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	68da      	ldr	r2, [r3, #12]
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	4293      	cmp	r3, r2
 800df44:	bf28      	it	cs
 800df46:	4613      	movcs	r3, r2
 800df48:	461a      	mov	r2, r3
 800df4a:	6879      	ldr	r1, [r7, #4]
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f001 f839 	bl	800efc4 <USBD_CtlContinueRx>
 800df52:	e030      	b.n	800dfb6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	d10b      	bne.n	800df78 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d005      	beq.n	800df78 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f001 f834 	bl	800efe6 <USBD_CtlSendStatus>
 800df7e:	e01a      	b.n	800dfb6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df86:	b2db      	uxtb	r3, r3
 800df88:	2b03      	cmp	r3, #3
 800df8a:	d114      	bne.n	800dfb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df92:	699b      	ldr	r3, [r3, #24]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00e      	beq.n	800dfb6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df9e:	699b      	ldr	r3, [r3, #24]
 800dfa0:	7afa      	ldrb	r2, [r7, #11]
 800dfa2:	4611      	mov	r1, r2
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	4798      	blx	r3
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dfb2:	7dfb      	ldrb	r3, [r7, #23]
 800dfb4:	e000      	b.n	800dfb8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dfb6:	2300      	movs	r3, #0
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3718      	adds	r7, #24
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	607a      	str	r2, [r7, #4]
 800dfcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dfce:	7afb      	ldrb	r3, [r7, #11]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d16b      	bne.n	800e0ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	3314      	adds	r3, #20
 800dfd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d156      	bne.n	800e092 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	689a      	ldr	r2, [r3, #8]
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d914      	bls.n	800e01a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	689a      	ldr	r2, [r3, #8]
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	1ad2      	subs	r2, r2, r3
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	461a      	mov	r2, r3
 800e004:	6879      	ldr	r1, [r7, #4]
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f000 ffae 	bl	800ef68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e00c:	2300      	movs	r3, #0
 800e00e:	2200      	movs	r2, #0
 800e010:	2100      	movs	r1, #0
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f005 fa5a 	bl	80134cc <USBD_LL_PrepareReceive>
 800e018:	e03b      	b.n	800e092 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	68da      	ldr	r2, [r3, #12]
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	429a      	cmp	r2, r3
 800e024:	d11c      	bne.n	800e060 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e02e:	429a      	cmp	r2, r3
 800e030:	d316      	bcc.n	800e060 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	685a      	ldr	r2, [r3, #4]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d20f      	bcs.n	800e060 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e040:	2200      	movs	r2, #0
 800e042:	2100      	movs	r1, #0
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f000 ff8f 	bl	800ef68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e052:	2300      	movs	r3, #0
 800e054:	2200      	movs	r2, #0
 800e056:	2100      	movs	r1, #0
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f005 fa37 	bl	80134cc <USBD_LL_PrepareReceive>
 800e05e:	e018      	b.n	800e092 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b03      	cmp	r3, #3
 800e06a:	d10b      	bne.n	800e084 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d005      	beq.n	800e084 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e084:	2180      	movs	r1, #128	; 0x80
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f005 f91a 	bl	80132c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f000 ffbd 	bl	800f00c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d122      	bne.n	800e0e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7ff fe98 	bl	800ddd2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e0aa:	e01a      	b.n	800e0e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	2b03      	cmp	r3, #3
 800e0b6:	d114      	bne.n	800e0e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0be:	695b      	ldr	r3, [r3, #20]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00e      	beq.n	800e0e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ca:	695b      	ldr	r3, [r3, #20]
 800e0cc:	7afa      	ldrb	r2, [r7, #11]
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	4798      	blx	r3
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e0d8:	7dfb      	ldrb	r3, [r7, #23]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e0de:	7dfb      	ldrb	r3, [r7, #23]
 800e0e0:	e000      	b.n	800e0e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3718      	adds	r7, #24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d101      	bne.n	800e120 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e11c:	2303      	movs	r3, #3
 800e11e:	e02f      	b.n	800e180 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00f      	beq.n	800e14a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d009      	beq.n	800e14a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	6852      	ldr	r2, [r2, #4]
 800e142:	b2d2      	uxtb	r2, r2
 800e144:	4611      	mov	r1, r2
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e14a:	2340      	movs	r3, #64	; 0x40
 800e14c:	2200      	movs	r2, #0
 800e14e:	2100      	movs	r1, #0
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f005 f841 	bl	80131d8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2240      	movs	r2, #64	; 0x40
 800e162:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e166:	2340      	movs	r3, #64	; 0x40
 800e168:	2200      	movs	r2, #0
 800e16a:	2180      	movs	r1, #128	; 0x80
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f005 f833 	bl	80131d8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2201      	movs	r2, #1
 800e176:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2240      	movs	r2, #64	; 0x40
 800e17c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	78fa      	ldrb	r2, [r7, #3]
 800e198:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2204      	movs	r2, #4
 800e1c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	2b04      	cmp	r3, #4
 800e1e6:	d106      	bne.n	800e1f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e1f6:	2300      	movs	r3, #0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e212:	2b00      	cmp	r3, #0
 800e214:	d101      	bne.n	800e21a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e216:	2303      	movs	r3, #3
 800e218:	e012      	b.n	800e240 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b03      	cmp	r3, #3
 800e224:	d10b      	bne.n	800e23e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e22c:	69db      	ldr	r3, [r3, #28]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d005      	beq.n	800e23e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e238:	69db      	ldr	r3, [r3, #28]
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e23e:	2300      	movs	r3, #0
}
 800e240:	4618      	mov	r0, r3
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e25e:	2303      	movs	r3, #3
 800e260:	e014      	b.n	800e28c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b03      	cmp	r3, #3
 800e26c:	d10d      	bne.n	800e28a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e274:	6a1b      	ldr	r3, [r3, #32]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d007      	beq.n	800e28a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	78fa      	ldrb	r2, [r7, #3]
 800e284:	4611      	mov	r1, r2
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	460b      	mov	r3, r1
 800e29e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d101      	bne.n	800e2ae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e2aa:	2303      	movs	r3, #3
 800e2ac:	e014      	b.n	800e2d8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2b03      	cmp	r3, #3
 800e2b8:	d10d      	bne.n	800e2d6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d007      	beq.n	800e2d6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ce:	78fa      	ldrb	r2, [r7, #3]
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3708      	adds	r7, #8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	370c      	adds	r7, #12
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr

0800e2f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2201      	movs	r2, #1
 800e302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d009      	beq.n	800e324 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	6852      	ldr	r2, [r2, #4]
 800e31c:	b2d2      	uxtb	r2, r2
 800e31e:	4611      	mov	r1, r2
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	4798      	blx	r3
  }

  return USBD_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e32e:	b480      	push	{r7}
 800e330:	b087      	sub	sp, #28
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	3301      	adds	r3, #1
 800e344:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e34c:	8a3b      	ldrh	r3, [r7, #16]
 800e34e:	021b      	lsls	r3, r3, #8
 800e350:	b21a      	sxth	r2, r3
 800e352:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e356:	4313      	orrs	r3, r2
 800e358:	b21b      	sxth	r3, r3
 800e35a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e35c:	89fb      	ldrh	r3, [r7, #14]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	371c      	adds	r7, #28
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr
	...

0800e36c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e376:	2300      	movs	r3, #0
 800e378:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e382:	2b40      	cmp	r3, #64	; 0x40
 800e384:	d005      	beq.n	800e392 <USBD_StdDevReq+0x26>
 800e386:	2b40      	cmp	r3, #64	; 0x40
 800e388:	d853      	bhi.n	800e432 <USBD_StdDevReq+0xc6>
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00b      	beq.n	800e3a6 <USBD_StdDevReq+0x3a>
 800e38e:	2b20      	cmp	r3, #32
 800e390:	d14f      	bne.n	800e432 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	4798      	blx	r3
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e3a4:	e04a      	b.n	800e43c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	785b      	ldrb	r3, [r3, #1]
 800e3aa:	2b09      	cmp	r3, #9
 800e3ac:	d83b      	bhi.n	800e426 <USBD_StdDevReq+0xba>
 800e3ae:	a201      	add	r2, pc, #4	; (adr r2, 800e3b4 <USBD_StdDevReq+0x48>)
 800e3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b4:	0800e409 	.word	0x0800e409
 800e3b8:	0800e41d 	.word	0x0800e41d
 800e3bc:	0800e427 	.word	0x0800e427
 800e3c0:	0800e413 	.word	0x0800e413
 800e3c4:	0800e427 	.word	0x0800e427
 800e3c8:	0800e3e7 	.word	0x0800e3e7
 800e3cc:	0800e3dd 	.word	0x0800e3dd
 800e3d0:	0800e427 	.word	0x0800e427
 800e3d4:	0800e3ff 	.word	0x0800e3ff
 800e3d8:	0800e3f1 	.word	0x0800e3f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e3dc:	6839      	ldr	r1, [r7, #0]
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 f9de 	bl	800e7a0 <USBD_GetDescriptor>
          break;
 800e3e4:	e024      	b.n	800e430 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e3e6:	6839      	ldr	r1, [r7, #0]
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 fb6d 	bl	800eac8 <USBD_SetAddress>
          break;
 800e3ee:	e01f      	b.n	800e430 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 fbac 	bl	800eb50 <USBD_SetConfig>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]
          break;
 800e3fc:	e018      	b.n	800e430 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fc4b 	bl	800ec9c <USBD_GetConfig>
          break;
 800e406:	e013      	b.n	800e430 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e408:	6839      	ldr	r1, [r7, #0]
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fc7c 	bl	800ed08 <USBD_GetStatus>
          break;
 800e410:	e00e      	b.n	800e430 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e412:	6839      	ldr	r1, [r7, #0]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 fcab 	bl	800ed70 <USBD_SetFeature>
          break;
 800e41a:	e009      	b.n	800e430 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fcba 	bl	800ed98 <USBD_ClrFeature>
          break;
 800e424:	e004      	b.n	800e430 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 fd11 	bl	800ee50 <USBD_CtlError>
          break;
 800e42e:	bf00      	nop
      }
      break;
 800e430:	e004      	b.n	800e43c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 fd0b 	bl	800ee50 <USBD_CtlError>
      break;
 800e43a:	bf00      	nop
  }

  return ret;
 800e43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop

0800e448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e45e:	2b40      	cmp	r3, #64	; 0x40
 800e460:	d005      	beq.n	800e46e <USBD_StdItfReq+0x26>
 800e462:	2b40      	cmp	r3, #64	; 0x40
 800e464:	d82f      	bhi.n	800e4c6 <USBD_StdItfReq+0x7e>
 800e466:	2b00      	cmp	r3, #0
 800e468:	d001      	beq.n	800e46e <USBD_StdItfReq+0x26>
 800e46a:	2b20      	cmp	r3, #32
 800e46c:	d12b      	bne.n	800e4c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e474:	b2db      	uxtb	r3, r3
 800e476:	3b01      	subs	r3, #1
 800e478:	2b02      	cmp	r3, #2
 800e47a:	d81d      	bhi.n	800e4b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	889b      	ldrh	r3, [r3, #4]
 800e480:	b2db      	uxtb	r3, r3
 800e482:	2b01      	cmp	r3, #1
 800e484:	d813      	bhi.n	800e4ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	6839      	ldr	r1, [r7, #0]
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	4798      	blx	r3
 800e494:	4603      	mov	r3, r0
 800e496:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	88db      	ldrh	r3, [r3, #6]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d110      	bne.n	800e4c2 <USBD_StdItfReq+0x7a>
 800e4a0:	7bfb      	ldrb	r3, [r7, #15]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10d      	bne.n	800e4c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 fd9d 	bl	800efe6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e4ac:	e009      	b.n	800e4c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e4ae:	6839      	ldr	r1, [r7, #0]
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 fccd 	bl	800ee50 <USBD_CtlError>
          break;
 800e4b6:	e004      	b.n	800e4c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 fcc8 	bl	800ee50 <USBD_CtlError>
          break;
 800e4c0:	e000      	b.n	800e4c4 <USBD_StdItfReq+0x7c>
          break;
 800e4c2:	bf00      	nop
      }
      break;
 800e4c4:	e004      	b.n	800e4d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e4c6:	6839      	ldr	r1, [r7, #0]
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fcc1 	bl	800ee50 <USBD_CtlError>
      break;
 800e4ce:	bf00      	nop
  }

  return ret;
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b084      	sub	sp, #16
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	889b      	ldrh	r3, [r3, #4]
 800e4ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4f6:	2b40      	cmp	r3, #64	; 0x40
 800e4f8:	d007      	beq.n	800e50a <USBD_StdEPReq+0x30>
 800e4fa:	2b40      	cmp	r3, #64	; 0x40
 800e4fc:	f200 8145 	bhi.w	800e78a <USBD_StdEPReq+0x2b0>
 800e500:	2b00      	cmp	r3, #0
 800e502:	d00c      	beq.n	800e51e <USBD_StdEPReq+0x44>
 800e504:	2b20      	cmp	r3, #32
 800e506:	f040 8140 	bne.w	800e78a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	6839      	ldr	r1, [r7, #0]
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	4798      	blx	r3
 800e518:	4603      	mov	r3, r0
 800e51a:	73fb      	strb	r3, [r7, #15]
      break;
 800e51c:	e13a      	b.n	800e794 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	785b      	ldrb	r3, [r3, #1]
 800e522:	2b03      	cmp	r3, #3
 800e524:	d007      	beq.n	800e536 <USBD_StdEPReq+0x5c>
 800e526:	2b03      	cmp	r3, #3
 800e528:	f300 8129 	bgt.w	800e77e <USBD_StdEPReq+0x2a4>
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d07f      	beq.n	800e630 <USBD_StdEPReq+0x156>
 800e530:	2b01      	cmp	r3, #1
 800e532:	d03c      	beq.n	800e5ae <USBD_StdEPReq+0xd4>
 800e534:	e123      	b.n	800e77e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	2b02      	cmp	r3, #2
 800e540:	d002      	beq.n	800e548 <USBD_StdEPReq+0x6e>
 800e542:	2b03      	cmp	r3, #3
 800e544:	d016      	beq.n	800e574 <USBD_StdEPReq+0x9a>
 800e546:	e02c      	b.n	800e5a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e548:	7bbb      	ldrb	r3, [r7, #14]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00d      	beq.n	800e56a <USBD_StdEPReq+0x90>
 800e54e:	7bbb      	ldrb	r3, [r7, #14]
 800e550:	2b80      	cmp	r3, #128	; 0x80
 800e552:	d00a      	beq.n	800e56a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e554:	7bbb      	ldrb	r3, [r7, #14]
 800e556:	4619      	mov	r1, r3
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f004 feb1 	bl	80132c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e55e:	2180      	movs	r1, #128	; 0x80
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f004 fead 	bl	80132c0 <USBD_LL_StallEP>
 800e566:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e568:	e020      	b.n	800e5ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e56a:	6839      	ldr	r1, [r7, #0]
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 fc6f 	bl	800ee50 <USBD_CtlError>
              break;
 800e572:	e01b      	b.n	800e5ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	885b      	ldrh	r3, [r3, #2]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10e      	bne.n	800e59a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e57c:	7bbb      	ldrb	r3, [r7, #14]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00b      	beq.n	800e59a <USBD_StdEPReq+0xc0>
 800e582:	7bbb      	ldrb	r3, [r7, #14]
 800e584:	2b80      	cmp	r3, #128	; 0x80
 800e586:	d008      	beq.n	800e59a <USBD_StdEPReq+0xc0>
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	88db      	ldrh	r3, [r3, #6]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d104      	bne.n	800e59a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e590:	7bbb      	ldrb	r3, [r7, #14]
 800e592:	4619      	mov	r1, r3
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f004 fe93 	bl	80132c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 fd23 	bl	800efe6 <USBD_CtlSendStatus>

              break;
 800e5a0:	e004      	b.n	800e5ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e5a2:	6839      	ldr	r1, [r7, #0]
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 fc53 	bl	800ee50 <USBD_CtlError>
              break;
 800e5aa:	bf00      	nop
          }
          break;
 800e5ac:	e0ec      	b.n	800e788 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b02      	cmp	r3, #2
 800e5b8:	d002      	beq.n	800e5c0 <USBD_StdEPReq+0xe6>
 800e5ba:	2b03      	cmp	r3, #3
 800e5bc:	d016      	beq.n	800e5ec <USBD_StdEPReq+0x112>
 800e5be:	e030      	b.n	800e622 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5c0:	7bbb      	ldrb	r3, [r7, #14]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00d      	beq.n	800e5e2 <USBD_StdEPReq+0x108>
 800e5c6:	7bbb      	ldrb	r3, [r7, #14]
 800e5c8:	2b80      	cmp	r3, #128	; 0x80
 800e5ca:	d00a      	beq.n	800e5e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f004 fe75 	bl	80132c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5d6:	2180      	movs	r1, #128	; 0x80
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f004 fe71 	bl	80132c0 <USBD_LL_StallEP>
 800e5de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5e0:	e025      	b.n	800e62e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fc33 	bl	800ee50 <USBD_CtlError>
              break;
 800e5ea:	e020      	b.n	800e62e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	885b      	ldrh	r3, [r3, #2]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d11b      	bne.n	800e62c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e5f4:	7bbb      	ldrb	r3, [r7, #14]
 800e5f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d004      	beq.n	800e608 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e5fe:	7bbb      	ldrb	r3, [r7, #14]
 800e600:	4619      	mov	r1, r3
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f004 fe92 	bl	801332c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f000 fcec 	bl	800efe6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e614:	689b      	ldr	r3, [r3, #8]
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	4798      	blx	r3
 800e61c:	4603      	mov	r3, r0
 800e61e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e620:	e004      	b.n	800e62c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e622:	6839      	ldr	r1, [r7, #0]
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 fc13 	bl	800ee50 <USBD_CtlError>
              break;
 800e62a:	e000      	b.n	800e62e <USBD_StdEPReq+0x154>
              break;
 800e62c:	bf00      	nop
          }
          break;
 800e62e:	e0ab      	b.n	800e788 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e636:	b2db      	uxtb	r3, r3
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d002      	beq.n	800e642 <USBD_StdEPReq+0x168>
 800e63c:	2b03      	cmp	r3, #3
 800e63e:	d032      	beq.n	800e6a6 <USBD_StdEPReq+0x1cc>
 800e640:	e097      	b.n	800e772 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e642:	7bbb      	ldrb	r3, [r7, #14]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d007      	beq.n	800e658 <USBD_StdEPReq+0x17e>
 800e648:	7bbb      	ldrb	r3, [r7, #14]
 800e64a:	2b80      	cmp	r3, #128	; 0x80
 800e64c:	d004      	beq.n	800e658 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 fbfd 	bl	800ee50 <USBD_CtlError>
                break;
 800e656:	e091      	b.n	800e77c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	da0b      	bge.n	800e678 <USBD_StdEPReq+0x19e>
 800e660:	7bbb      	ldrb	r3, [r7, #14]
 800e662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e666:	4613      	mov	r3, r2
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	3310      	adds	r3, #16
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	4413      	add	r3, r2
 800e674:	3304      	adds	r3, #4
 800e676:	e00b      	b.n	800e690 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e678:	7bbb      	ldrb	r3, [r7, #14]
 800e67a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e67e:	4613      	mov	r3, r2
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	4413      	add	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	4413      	add	r3, r2
 800e68e:	3304      	adds	r3, #4
 800e690:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	2200      	movs	r2, #0
 800e696:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	2202      	movs	r2, #2
 800e69c:	4619      	mov	r1, r3
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 fc47 	bl	800ef32 <USBD_CtlSendData>
              break;
 800e6a4:	e06a      	b.n	800e77c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e6a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	da11      	bge.n	800e6d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e6ae:	7bbb      	ldrb	r3, [r7, #14]
 800e6b0:	f003 020f 	and.w	r2, r3, #15
 800e6b4:	6879      	ldr	r1, [r7, #4]
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	4413      	add	r3, r2
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	440b      	add	r3, r1
 800e6c0:	3324      	adds	r3, #36	; 0x24
 800e6c2:	881b      	ldrh	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d117      	bne.n	800e6f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fbc0 	bl	800ee50 <USBD_CtlError>
                  break;
 800e6d0:	e054      	b.n	800e77c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e6d2:	7bbb      	ldrb	r3, [r7, #14]
 800e6d4:	f003 020f 	and.w	r2, r3, #15
 800e6d8:	6879      	ldr	r1, [r7, #4]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	4413      	add	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	440b      	add	r3, r1
 800e6e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d104      	bne.n	800e6f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e6ee:	6839      	ldr	r1, [r7, #0]
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 fbad 	bl	800ee50 <USBD_CtlError>
                  break;
 800e6f6:	e041      	b.n	800e77c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	da0b      	bge.n	800e718 <USBD_StdEPReq+0x23e>
 800e700:	7bbb      	ldrb	r3, [r7, #14]
 800e702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e706:	4613      	mov	r3, r2
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	4413      	add	r3, r2
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	3310      	adds	r3, #16
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	4413      	add	r3, r2
 800e714:	3304      	adds	r3, #4
 800e716:	e00b      	b.n	800e730 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e718:	7bbb      	ldrb	r3, [r7, #14]
 800e71a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e71e:	4613      	mov	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4413      	add	r3, r2
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	4413      	add	r3, r2
 800e72e:	3304      	adds	r3, #4
 800e730:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e732:	7bbb      	ldrb	r3, [r7, #14]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <USBD_StdEPReq+0x264>
 800e738:	7bbb      	ldrb	r3, [r7, #14]
 800e73a:	2b80      	cmp	r3, #128	; 0x80
 800e73c:	d103      	bne.n	800e746 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	2200      	movs	r2, #0
 800e742:	601a      	str	r2, [r3, #0]
 800e744:	e00e      	b.n	800e764 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	4619      	mov	r1, r3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f004 fe24 	bl	8013398 <USBD_LL_IsStallEP>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d003      	beq.n	800e75e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	2201      	movs	r2, #1
 800e75a:	601a      	str	r2, [r3, #0]
 800e75c:	e002      	b.n	800e764 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	2200      	movs	r2, #0
 800e762:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2202      	movs	r2, #2
 800e768:	4619      	mov	r1, r3
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 fbe1 	bl	800ef32 <USBD_CtlSendData>
              break;
 800e770:	e004      	b.n	800e77c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e772:	6839      	ldr	r1, [r7, #0]
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 fb6b 	bl	800ee50 <USBD_CtlError>
              break;
 800e77a:	bf00      	nop
          }
          break;
 800e77c:	e004      	b.n	800e788 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e77e:	6839      	ldr	r1, [r7, #0]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 fb65 	bl	800ee50 <USBD_CtlError>
          break;
 800e786:	bf00      	nop
      }
      break;
 800e788:	e004      	b.n	800e794 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e78a:	6839      	ldr	r1, [r7, #0]
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 fb5f 	bl	800ee50 <USBD_CtlError>
      break;
 800e792:	bf00      	nop
  }

  return ret;
 800e794:	7bfb      	ldrb	r3, [r7, #15]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
	...

0800e7a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	885b      	ldrh	r3, [r3, #2]
 800e7ba:	0a1b      	lsrs	r3, r3, #8
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	3b01      	subs	r3, #1
 800e7c0:	2b0e      	cmp	r3, #14
 800e7c2:	f200 8152 	bhi.w	800ea6a <USBD_GetDescriptor+0x2ca>
 800e7c6:	a201      	add	r2, pc, #4	; (adr r2, 800e7cc <USBD_GetDescriptor+0x2c>)
 800e7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7cc:	0800e83d 	.word	0x0800e83d
 800e7d0:	0800e855 	.word	0x0800e855
 800e7d4:	0800e895 	.word	0x0800e895
 800e7d8:	0800ea6b 	.word	0x0800ea6b
 800e7dc:	0800ea6b 	.word	0x0800ea6b
 800e7e0:	0800ea0b 	.word	0x0800ea0b
 800e7e4:	0800ea37 	.word	0x0800ea37
 800e7e8:	0800ea6b 	.word	0x0800ea6b
 800e7ec:	0800ea6b 	.word	0x0800ea6b
 800e7f0:	0800ea6b 	.word	0x0800ea6b
 800e7f4:	0800ea6b 	.word	0x0800ea6b
 800e7f8:	0800ea6b 	.word	0x0800ea6b
 800e7fc:	0800ea6b 	.word	0x0800ea6b
 800e800:	0800ea6b 	.word	0x0800ea6b
 800e804:	0800e809 	.word	0x0800e809
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e80e:	69db      	ldr	r3, [r3, #28]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00b      	beq.n	800e82c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e81a:	69db      	ldr	r3, [r3, #28]
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	7c12      	ldrb	r2, [r2, #16]
 800e820:	f107 0108 	add.w	r1, r7, #8
 800e824:	4610      	mov	r0, r2
 800e826:	4798      	blx	r3
 800e828:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e82a:	e126      	b.n	800ea7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e82c:	6839      	ldr	r1, [r7, #0]
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 fb0e 	bl	800ee50 <USBD_CtlError>
        err++;
 800e834:	7afb      	ldrb	r3, [r7, #11]
 800e836:	3301      	adds	r3, #1
 800e838:	72fb      	strb	r3, [r7, #11]
      break;
 800e83a:	e11e      	b.n	800ea7a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	7c12      	ldrb	r2, [r2, #16]
 800e848:	f107 0108 	add.w	r1, r7, #8
 800e84c:	4610      	mov	r0, r2
 800e84e:	4798      	blx	r3
 800e850:	60f8      	str	r0, [r7, #12]
      break;
 800e852:	e112      	b.n	800ea7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	7c1b      	ldrb	r3, [r3, #16]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d10d      	bne.n	800e878 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e864:	f107 0208 	add.w	r2, r7, #8
 800e868:	4610      	mov	r0, r2
 800e86a:	4798      	blx	r3
 800e86c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	3301      	adds	r3, #1
 800e872:	2202      	movs	r2, #2
 800e874:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e876:	e100      	b.n	800ea7a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e880:	f107 0208 	add.w	r2, r7, #8
 800e884:	4610      	mov	r0, r2
 800e886:	4798      	blx	r3
 800e888:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	3301      	adds	r3, #1
 800e88e:	2202      	movs	r2, #2
 800e890:	701a      	strb	r2, [r3, #0]
      break;
 800e892:	e0f2      	b.n	800ea7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	885b      	ldrh	r3, [r3, #2]
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b05      	cmp	r3, #5
 800e89c:	f200 80ac 	bhi.w	800e9f8 <USBD_GetDescriptor+0x258>
 800e8a0:	a201      	add	r2, pc, #4	; (adr r2, 800e8a8 <USBD_GetDescriptor+0x108>)
 800e8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a6:	bf00      	nop
 800e8a8:	0800e8c1 	.word	0x0800e8c1
 800e8ac:	0800e8f5 	.word	0x0800e8f5
 800e8b0:	0800e929 	.word	0x0800e929
 800e8b4:	0800e95d 	.word	0x0800e95d
 800e8b8:	0800e991 	.word	0x0800e991
 800e8bc:	0800e9c5 	.word	0x0800e9c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00b      	beq.n	800e8e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	7c12      	ldrb	r2, [r2, #16]
 800e8d8:	f107 0108 	add.w	r1, r7, #8
 800e8dc:	4610      	mov	r0, r2
 800e8de:	4798      	blx	r3
 800e8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8e2:	e091      	b.n	800ea08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 fab2 	bl	800ee50 <USBD_CtlError>
            err++;
 800e8ec:	7afb      	ldrb	r3, [r7, #11]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8f2:	e089      	b.n	800ea08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00b      	beq.n	800e918 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	7c12      	ldrb	r2, [r2, #16]
 800e90c:	f107 0108 	add.w	r1, r7, #8
 800e910:	4610      	mov	r0, r2
 800e912:	4798      	blx	r3
 800e914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e916:	e077      	b.n	800ea08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e918:	6839      	ldr	r1, [r7, #0]
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 fa98 	bl	800ee50 <USBD_CtlError>
            err++;
 800e920:	7afb      	ldrb	r3, [r7, #11]
 800e922:	3301      	adds	r3, #1
 800e924:	72fb      	strb	r3, [r7, #11]
          break;
 800e926:	e06f      	b.n	800ea08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00b      	beq.n	800e94c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	7c12      	ldrb	r2, [r2, #16]
 800e940:	f107 0108 	add.w	r1, r7, #8
 800e944:	4610      	mov	r0, r2
 800e946:	4798      	blx	r3
 800e948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e94a:	e05d      	b.n	800ea08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e94c:	6839      	ldr	r1, [r7, #0]
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 fa7e 	bl	800ee50 <USBD_CtlError>
            err++;
 800e954:	7afb      	ldrb	r3, [r7, #11]
 800e956:	3301      	adds	r3, #1
 800e958:	72fb      	strb	r3, [r7, #11]
          break;
 800e95a:	e055      	b.n	800ea08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e962:	691b      	ldr	r3, [r3, #16]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00b      	beq.n	800e980 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	7c12      	ldrb	r2, [r2, #16]
 800e974:	f107 0108 	add.w	r1, r7, #8
 800e978:	4610      	mov	r0, r2
 800e97a:	4798      	blx	r3
 800e97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e97e:	e043      	b.n	800ea08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e980:	6839      	ldr	r1, [r7, #0]
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 fa64 	bl	800ee50 <USBD_CtlError>
            err++;
 800e988:	7afb      	ldrb	r3, [r7, #11]
 800e98a:	3301      	adds	r3, #1
 800e98c:	72fb      	strb	r3, [r7, #11]
          break;
 800e98e:	e03b      	b.n	800ea08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e996:	695b      	ldr	r3, [r3, #20]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00b      	beq.n	800e9b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9a2:	695b      	ldr	r3, [r3, #20]
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	7c12      	ldrb	r2, [r2, #16]
 800e9a8:	f107 0108 	add.w	r1, r7, #8
 800e9ac:	4610      	mov	r0, r2
 800e9ae:	4798      	blx	r3
 800e9b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9b2:	e029      	b.n	800ea08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9b4:	6839      	ldr	r1, [r7, #0]
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 fa4a 	bl	800ee50 <USBD_CtlError>
            err++;
 800e9bc:	7afb      	ldrb	r3, [r7, #11]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	72fb      	strb	r3, [r7, #11]
          break;
 800e9c2:	e021      	b.n	800ea08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00b      	beq.n	800e9e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9d6:	699b      	ldr	r3, [r3, #24]
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	7c12      	ldrb	r2, [r2, #16]
 800e9dc:	f107 0108 	add.w	r1, r7, #8
 800e9e0:	4610      	mov	r0, r2
 800e9e2:	4798      	blx	r3
 800e9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9e6:	e00f      	b.n	800ea08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9e8:	6839      	ldr	r1, [r7, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 fa30 	bl	800ee50 <USBD_CtlError>
            err++;
 800e9f0:	7afb      	ldrb	r3, [r7, #11]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800e9f6:	e007      	b.n	800ea08 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e9f8:	6839      	ldr	r1, [r7, #0]
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 fa28 	bl	800ee50 <USBD_CtlError>
          err++;
 800ea00:	7afb      	ldrb	r3, [r7, #11]
 800ea02:	3301      	adds	r3, #1
 800ea04:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ea06:	bf00      	nop
      }
      break;
 800ea08:	e037      	b.n	800ea7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7c1b      	ldrb	r3, [r3, #16]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d109      	bne.n	800ea26 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea1a:	f107 0208 	add.w	r2, r7, #8
 800ea1e:	4610      	mov	r0, r2
 800ea20:	4798      	blx	r3
 800ea22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea24:	e029      	b.n	800ea7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 fa11 	bl	800ee50 <USBD_CtlError>
        err++;
 800ea2e:	7afb      	ldrb	r3, [r7, #11]
 800ea30:	3301      	adds	r3, #1
 800ea32:	72fb      	strb	r3, [r7, #11]
      break;
 800ea34:	e021      	b.n	800ea7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	7c1b      	ldrb	r3, [r3, #16]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10d      	bne.n	800ea5a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea46:	f107 0208 	add.w	r2, r7, #8
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	4798      	blx	r3
 800ea4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	3301      	adds	r3, #1
 800ea54:	2207      	movs	r2, #7
 800ea56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea58:	e00f      	b.n	800ea7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f9f7 	bl	800ee50 <USBD_CtlError>
        err++;
 800ea62:	7afb      	ldrb	r3, [r7, #11]
 800ea64:	3301      	adds	r3, #1
 800ea66:	72fb      	strb	r3, [r7, #11]
      break;
 800ea68:	e007      	b.n	800ea7a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ea6a:	6839      	ldr	r1, [r7, #0]
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f000 f9ef 	bl	800ee50 <USBD_CtlError>
      err++;
 800ea72:	7afb      	ldrb	r3, [r7, #11]
 800ea74:	3301      	adds	r3, #1
 800ea76:	72fb      	strb	r3, [r7, #11]
      break;
 800ea78:	bf00      	nop
  }

  if (err != 0U)
 800ea7a:	7afb      	ldrb	r3, [r7, #11]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d11e      	bne.n	800eabe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	88db      	ldrh	r3, [r3, #6]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d016      	beq.n	800eab6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ea88:	893b      	ldrh	r3, [r7, #8]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00e      	beq.n	800eaac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	88da      	ldrh	r2, [r3, #6]
 800ea92:	893b      	ldrh	r3, [r7, #8]
 800ea94:	4293      	cmp	r3, r2
 800ea96:	bf28      	it	cs
 800ea98:	4613      	movcs	r3, r2
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea9e:	893b      	ldrh	r3, [r7, #8]
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	68f9      	ldr	r1, [r7, #12]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 fa44 	bl	800ef32 <USBD_CtlSendData>
 800eaaa:	e009      	b.n	800eac0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eaac:	6839      	ldr	r1, [r7, #0]
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 f9ce 	bl	800ee50 <USBD_CtlError>
 800eab4:	e004      	b.n	800eac0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fa95 	bl	800efe6 <USBD_CtlSendStatus>
 800eabc:	e000      	b.n	800eac0 <USBD_GetDescriptor+0x320>
    return;
 800eabe:	bf00      	nop
  }
}
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop

0800eac8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	889b      	ldrh	r3, [r3, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d131      	bne.n	800eb3e <USBD_SetAddress+0x76>
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	88db      	ldrh	r3, [r3, #6]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d12d      	bne.n	800eb3e <USBD_SetAddress+0x76>
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	885b      	ldrh	r3, [r3, #2]
 800eae6:	2b7f      	cmp	r3, #127	; 0x7f
 800eae8:	d829      	bhi.n	800eb3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	885b      	ldrh	r3, [r3, #2]
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	2b03      	cmp	r3, #3
 800eb00:	d104      	bne.n	800eb0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eb02:	6839      	ldr	r1, [r7, #0]
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 f9a3 	bl	800ee50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb0a:	e01d      	b.n	800eb48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	7bfa      	ldrb	r2, [r7, #15]
 800eb10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
 800eb16:	4619      	mov	r1, r3
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f004 fc69 	bl	80133f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fa61 	bl	800efe6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eb24:	7bfb      	ldrb	r3, [r7, #15]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d004      	beq.n	800eb34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2202      	movs	r2, #2
 800eb2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb32:	e009      	b.n	800eb48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb3c:	e004      	b.n	800eb48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 f985 	bl	800ee50 <USBD_CtlError>
  }
}
 800eb46:	bf00      	nop
 800eb48:	bf00      	nop
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	885b      	ldrh	r3, [r3, #2]
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	4b4c      	ldr	r3, [pc, #304]	; (800ec98 <USBD_SetConfig+0x148>)
 800eb66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb68:	4b4b      	ldr	r3, [pc, #300]	; (800ec98 <USBD_SetConfig+0x148>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d905      	bls.n	800eb7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eb70:	6839      	ldr	r1, [r7, #0]
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 f96c 	bl	800ee50 <USBD_CtlError>
    return USBD_FAIL;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	e088      	b.n	800ec8e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d002      	beq.n	800eb8e <USBD_SetConfig+0x3e>
 800eb88:	2b03      	cmp	r3, #3
 800eb8a:	d025      	beq.n	800ebd8 <USBD_SetConfig+0x88>
 800eb8c:	e071      	b.n	800ec72 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eb8e:	4b42      	ldr	r3, [pc, #264]	; (800ec98 <USBD_SetConfig+0x148>)
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d01c      	beq.n	800ebd0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800eb96:	4b40      	ldr	r3, [pc, #256]	; (800ec98 <USBD_SetConfig+0x148>)
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eba0:	4b3d      	ldr	r3, [pc, #244]	; (800ec98 <USBD_SetConfig+0x148>)
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	4619      	mov	r1, r3
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7ff f91e 	bl	800dde8 <USBD_SetClassConfig>
 800ebac:	4603      	mov	r3, r0
 800ebae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d004      	beq.n	800ebc0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ebb6:	6839      	ldr	r1, [r7, #0]
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 f949 	bl	800ee50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebbe:	e065      	b.n	800ec8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 fa10 	bl	800efe6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2203      	movs	r2, #3
 800ebca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ebce:	e05d      	b.n	800ec8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 fa08 	bl	800efe6 <USBD_CtlSendStatus>
      break;
 800ebd6:	e059      	b.n	800ec8c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ebd8:	4b2f      	ldr	r3, [pc, #188]	; (800ec98 <USBD_SetConfig+0x148>)
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d112      	bne.n	800ec06 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2202      	movs	r2, #2
 800ebe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ebe8:	4b2b      	ldr	r3, [pc, #172]	; (800ec98 <USBD_SetConfig+0x148>)
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	461a      	mov	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebf2:	4b29      	ldr	r3, [pc, #164]	; (800ec98 <USBD_SetConfig+0x148>)
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7ff f911 	bl	800de20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 f9f1 	bl	800efe6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec04:	e042      	b.n	800ec8c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ec06:	4b24      	ldr	r3, [pc, #144]	; (800ec98 <USBD_SetConfig+0x148>)
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d02a      	beq.n	800ec6a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f7ff f8ff 	bl	800de20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ec22:	4b1d      	ldr	r3, [pc, #116]	; (800ec98 <USBD_SetConfig+0x148>)
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	461a      	mov	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec2c:	4b1a      	ldr	r3, [pc, #104]	; (800ec98 <USBD_SetConfig+0x148>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	4619      	mov	r1, r3
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7ff f8d8 	bl	800dde8 <USBD_SetClassConfig>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00f      	beq.n	800ec62 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ec42:	6839      	ldr	r1, [r7, #0]
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 f903 	bl	800ee50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	4619      	mov	r1, r3
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7ff f8e4 	bl	800de20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2202      	movs	r2, #2
 800ec5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec60:	e014      	b.n	800ec8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 f9bf 	bl	800efe6 <USBD_CtlSendStatus>
      break;
 800ec68:	e010      	b.n	800ec8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 f9bb 	bl	800efe6 <USBD_CtlSendStatus>
      break;
 800ec70:	e00c      	b.n	800ec8c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 f8eb 	bl	800ee50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec7a:	4b07      	ldr	r3, [pc, #28]	; (800ec98 <USBD_SetConfig+0x148>)
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff f8cd 	bl	800de20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ec86:	2303      	movs	r3, #3
 800ec88:	73fb      	strb	r3, [r7, #15]
      break;
 800ec8a:	bf00      	nop
  }

  return ret;
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	200013f8 	.word	0x200013f8

0800ec9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	88db      	ldrh	r3, [r3, #6]
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d004      	beq.n	800ecb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ecae:	6839      	ldr	r1, [r7, #0]
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 f8cd 	bl	800ee50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ecb6:	e023      	b.n	800ed00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	2b02      	cmp	r3, #2
 800ecc2:	dc02      	bgt.n	800ecca <USBD_GetConfig+0x2e>
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	dc03      	bgt.n	800ecd0 <USBD_GetConfig+0x34>
 800ecc8:	e015      	b.n	800ecf6 <USBD_GetConfig+0x5a>
 800ecca:	2b03      	cmp	r3, #3
 800eccc:	d00b      	beq.n	800ece6 <USBD_GetConfig+0x4a>
 800ecce:	e012      	b.n	800ecf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	3308      	adds	r3, #8
 800ecda:	2201      	movs	r2, #1
 800ecdc:	4619      	mov	r1, r3
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 f927 	bl	800ef32 <USBD_CtlSendData>
        break;
 800ece4:	e00c      	b.n	800ed00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	3304      	adds	r3, #4
 800ecea:	2201      	movs	r2, #1
 800ecec:	4619      	mov	r1, r3
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 f91f 	bl	800ef32 <USBD_CtlSendData>
        break;
 800ecf4:	e004      	b.n	800ed00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f8a9 	bl	800ee50 <USBD_CtlError>
        break;
 800ecfe:	bf00      	nop
}
 800ed00:	bf00      	nop
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	2b02      	cmp	r3, #2
 800ed1e:	d81e      	bhi.n	800ed5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	88db      	ldrh	r3, [r3, #6]
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d004      	beq.n	800ed32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 f890 	bl	800ee50 <USBD_CtlError>
        break;
 800ed30:	e01a      	b.n	800ed68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2201      	movs	r2, #1
 800ed36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d005      	beq.n	800ed4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	f043 0202 	orr.w	r2, r3, #2
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	330c      	adds	r3, #12
 800ed52:	2202      	movs	r2, #2
 800ed54:	4619      	mov	r1, r3
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 f8eb 	bl	800ef32 <USBD_CtlSendData>
      break;
 800ed5c:	e004      	b.n	800ed68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 f875 	bl	800ee50 <USBD_CtlError>
      break;
 800ed66:	bf00      	nop
  }
}
 800ed68:	bf00      	nop
 800ed6a:	3708      	adds	r7, #8
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	885b      	ldrh	r3, [r3, #2]
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d106      	bne.n	800ed90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2201      	movs	r2, #1
 800ed86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 f92b 	bl	800efe6 <USBD_CtlSendStatus>
  }
}
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	3b01      	subs	r3, #1
 800edac:	2b02      	cmp	r3, #2
 800edae:	d80b      	bhi.n	800edc8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	885b      	ldrh	r3, [r3, #2]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d10c      	bne.n	800edd2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 f910 	bl	800efe6 <USBD_CtlSendStatus>
      }
      break;
 800edc6:	e004      	b.n	800edd2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800edc8:	6839      	ldr	r1, [r7, #0]
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 f840 	bl	800ee50 <USBD_CtlError>
      break;
 800edd0:	e000      	b.n	800edd4 <USBD_ClrFeature+0x3c>
      break;
 800edd2:	bf00      	nop
  }
}
 800edd4:	bf00      	nop
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	781a      	ldrb	r2, [r3, #0]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	3301      	adds	r3, #1
 800edf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	781a      	ldrb	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	3301      	adds	r3, #1
 800ee04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f7ff fa91 	bl	800e32e <SWAPBYTE>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	461a      	mov	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	3301      	adds	r3, #1
 800ee18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f7ff fa84 	bl	800e32e <SWAPBYTE>
 800ee26:	4603      	mov	r3, r0
 800ee28:	461a      	mov	r2, r3
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	3301      	adds	r3, #1
 800ee32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	3301      	adds	r3, #1
 800ee38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f7ff fa77 	bl	800e32e <SWAPBYTE>
 800ee40:	4603      	mov	r3, r0
 800ee42:	461a      	mov	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	80da      	strh	r2, [r3, #6]
}
 800ee48:	bf00      	nop
 800ee4a:	3710      	adds	r7, #16
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee5a:	2180      	movs	r1, #128	; 0x80
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f004 fa2f 	bl	80132c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee62:	2100      	movs	r1, #0
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f004 fa2b 	bl	80132c0 <USBD_LL_StallEP>
}
 800ee6a:	bf00      	nop
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b086      	sub	sp, #24
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	60f8      	str	r0, [r7, #12]
 800ee7a:	60b9      	str	r1, [r7, #8]
 800ee7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d036      	beq.n	800eef6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ee8c:	6938      	ldr	r0, [r7, #16]
 800ee8e:	f000 f836 	bl	800eefe <USBD_GetLen>
 800ee92:	4603      	mov	r3, r0
 800ee94:	3301      	adds	r3, #1
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	005b      	lsls	r3, r3, #1
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eea0:	7dfb      	ldrb	r3, [r7, #23]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	4413      	add	r3, r2
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	7812      	ldrb	r2, [r2, #0]
 800eeaa:	701a      	strb	r2, [r3, #0]
  idx++;
 800eeac:	7dfb      	ldrb	r3, [r7, #23]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eeb2:	7dfb      	ldrb	r3, [r7, #23]
 800eeb4:	68ba      	ldr	r2, [r7, #8]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	2203      	movs	r2, #3
 800eeba:	701a      	strb	r2, [r3, #0]
  idx++;
 800eebc:	7dfb      	ldrb	r3, [r7, #23]
 800eebe:	3301      	adds	r3, #1
 800eec0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eec2:	e013      	b.n	800eeec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eec4:	7dfb      	ldrb	r3, [r7, #23]
 800eec6:	68ba      	ldr	r2, [r7, #8]
 800eec8:	4413      	add	r3, r2
 800eeca:	693a      	ldr	r2, [r7, #16]
 800eecc:	7812      	ldrb	r2, [r2, #0]
 800eece:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	3301      	adds	r3, #1
 800eed4:	613b      	str	r3, [r7, #16]
    idx++;
 800eed6:	7dfb      	ldrb	r3, [r7, #23]
 800eed8:	3301      	adds	r3, #1
 800eeda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eedc:	7dfb      	ldrb	r3, [r7, #23]
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	4413      	add	r3, r2
 800eee2:	2200      	movs	r2, #0
 800eee4:	701a      	strb	r2, [r3, #0]
    idx++;
 800eee6:	7dfb      	ldrb	r3, [r7, #23]
 800eee8:	3301      	adds	r3, #1
 800eeea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1e7      	bne.n	800eec4 <USBD_GetString+0x52>
 800eef4:	e000      	b.n	800eef8 <USBD_GetString+0x86>
    return;
 800eef6:	bf00      	nop
  }
}
 800eef8:	3718      	adds	r7, #24
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eefe:	b480      	push	{r7}
 800ef00:	b085      	sub	sp, #20
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ef06:	2300      	movs	r3, #0
 800ef08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ef0e:	e005      	b.n	800ef1c <USBD_GetLen+0x1e>
  {
    len++;
 800ef10:	7bfb      	ldrb	r3, [r7, #15]
 800ef12:	3301      	adds	r3, #1
 800ef14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1f5      	bne.n	800ef10 <USBD_GetLen+0x12>
  }

  return len;
 800ef24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr

0800ef32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	60f8      	str	r0, [r7, #12]
 800ef3a:	60b9      	str	r1, [r7, #8]
 800ef3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2202      	movs	r2, #2
 800ef42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	2100      	movs	r1, #0
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f004 fa7f 	bl	801345c <USBD_LL_Transmit>

  return USBD_OK;
 800ef5e:	2300      	movs	r3, #0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	68ba      	ldr	r2, [r7, #8]
 800ef78:	2100      	movs	r1, #0
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f004 fa6e 	bl	801345c <USBD_LL_Transmit>

  return USBD_OK;
 800ef80:	2300      	movs	r3, #0
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b084      	sub	sp, #16
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	60f8      	str	r0, [r7, #12]
 800ef92:	60b9      	str	r1, [r7, #8]
 800ef94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2203      	movs	r2, #3
 800ef9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	2100      	movs	r1, #0
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f004 fa89 	bl	80134cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b084      	sub	sp, #16
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	2100      	movs	r1, #0
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f004 fa78 	bl	80134cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efdc:	2300      	movs	r3, #0
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b082      	sub	sp, #8
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2204      	movs	r2, #4
 800eff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eff6:	2300      	movs	r3, #0
 800eff8:	2200      	movs	r2, #0
 800effa:	2100      	movs	r1, #0
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f004 fa2d 	bl	801345c <USBD_LL_Transmit>

  return USBD_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3708      	adds	r7, #8
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2205      	movs	r2, #5
 800f018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f01c:	2300      	movs	r3, #0
 800f01e:	2200      	movs	r2, #0
 800f020:	2100      	movs	r1, #0
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f004 fa52 	bl	80134cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
	...

0800f034 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	4603      	mov	r3, r0
 800f03c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f03e:	79fb      	ldrb	r3, [r7, #7]
 800f040:	4a08      	ldr	r2, [pc, #32]	; (800f064 <disk_status+0x30>)
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	4413      	add	r3, r2
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	79fa      	ldrb	r2, [r7, #7]
 800f04c:	4905      	ldr	r1, [pc, #20]	; (800f064 <disk_status+0x30>)
 800f04e:	440a      	add	r2, r1
 800f050:	7a12      	ldrb	r2, [r2, #8]
 800f052:	4610      	mov	r0, r2
 800f054:	4798      	blx	r3
 800f056:	4603      	mov	r3, r0
 800f058:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3710      	adds	r7, #16
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}
 800f064:	20001424 	.word	0x20001424

0800f068 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	4603      	mov	r3, r0
 800f070:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f072:	2300      	movs	r3, #0
 800f074:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f076:	79fb      	ldrb	r3, [r7, #7]
 800f078:	4a0d      	ldr	r2, [pc, #52]	; (800f0b0 <disk_initialize+0x48>)
 800f07a:	5cd3      	ldrb	r3, [r2, r3]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d111      	bne.n	800f0a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f080:	79fb      	ldrb	r3, [r7, #7]
 800f082:	4a0b      	ldr	r2, [pc, #44]	; (800f0b0 <disk_initialize+0x48>)
 800f084:	2101      	movs	r1, #1
 800f086:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f088:	79fb      	ldrb	r3, [r7, #7]
 800f08a:	4a09      	ldr	r2, [pc, #36]	; (800f0b0 <disk_initialize+0x48>)
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	4413      	add	r3, r2
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	79fa      	ldrb	r2, [r7, #7]
 800f096:	4906      	ldr	r1, [pc, #24]	; (800f0b0 <disk_initialize+0x48>)
 800f098:	440a      	add	r2, r1
 800f09a:	7a12      	ldrb	r2, [r2, #8]
 800f09c:	4610      	mov	r0, r2
 800f09e:	4798      	blx	r3
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	20001424 	.word	0x20001424

0800f0b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f0b4:	b590      	push	{r4, r7, lr}
 800f0b6:	b087      	sub	sp, #28
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	60b9      	str	r1, [r7, #8]
 800f0bc:	607a      	str	r2, [r7, #4]
 800f0be:	603b      	str	r3, [r7, #0]
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	4a0a      	ldr	r2, [pc, #40]	; (800f0f0 <disk_read+0x3c>)
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	4413      	add	r3, r2
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	689c      	ldr	r4, [r3, #8]
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	4a07      	ldr	r2, [pc, #28]	; (800f0f0 <disk_read+0x3c>)
 800f0d4:	4413      	add	r3, r2
 800f0d6:	7a18      	ldrb	r0, [r3, #8]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	68b9      	ldr	r1, [r7, #8]
 800f0de:	47a0      	blx	r4
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800f0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	371c      	adds	r7, #28
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd90      	pop	{r4, r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	20001424 	.word	0x20001424

0800f0f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f0f4:	b590      	push	{r4, r7, lr}
 800f0f6:	b087      	sub	sp, #28
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60b9      	str	r1, [r7, #8]
 800f0fc:	607a      	str	r2, [r7, #4]
 800f0fe:	603b      	str	r3, [r7, #0]
 800f100:	4603      	mov	r3, r0
 800f102:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f104:	7bfb      	ldrb	r3, [r7, #15]
 800f106:	4a0a      	ldr	r2, [pc, #40]	; (800f130 <disk_write+0x3c>)
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	4413      	add	r3, r2
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	68dc      	ldr	r4, [r3, #12]
 800f110:	7bfb      	ldrb	r3, [r7, #15]
 800f112:	4a07      	ldr	r2, [pc, #28]	; (800f130 <disk_write+0x3c>)
 800f114:	4413      	add	r3, r2
 800f116:	7a18      	ldrb	r0, [r3, #8]
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	68b9      	ldr	r1, [r7, #8]
 800f11e:	47a0      	blx	r4
 800f120:	4603      	mov	r3, r0
 800f122:	75fb      	strb	r3, [r7, #23]
  return res;
 800f124:	7dfb      	ldrb	r3, [r7, #23]
}
 800f126:	4618      	mov	r0, r3
 800f128:	371c      	adds	r7, #28
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd90      	pop	{r4, r7, pc}
 800f12e:	bf00      	nop
 800f130:	20001424 	.word	0x20001424

0800f134 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	4603      	mov	r3, r0
 800f13c:	603a      	str	r2, [r7, #0]
 800f13e:	71fb      	strb	r3, [r7, #7]
 800f140:	460b      	mov	r3, r1
 800f142:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f144:	79fb      	ldrb	r3, [r7, #7]
 800f146:	4a09      	ldr	r2, [pc, #36]	; (800f16c <disk_ioctl+0x38>)
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	4413      	add	r3, r2
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	79fa      	ldrb	r2, [r7, #7]
 800f152:	4906      	ldr	r1, [pc, #24]	; (800f16c <disk_ioctl+0x38>)
 800f154:	440a      	add	r2, r1
 800f156:	7a10      	ldrb	r0, [r2, #8]
 800f158:	79b9      	ldrb	r1, [r7, #6]
 800f15a:	683a      	ldr	r2, [r7, #0]
 800f15c:	4798      	blx	r3
 800f15e:	4603      	mov	r3, r0
 800f160:	73fb      	strb	r3, [r7, #15]
  return res;
 800f162:	7bfb      	ldrb	r3, [r7, #15]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	20001424 	.word	0x20001424

0800f170 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	3301      	adds	r3, #1
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f180:	89fb      	ldrh	r3, [r7, #14]
 800f182:	021b      	lsls	r3, r3, #8
 800f184:	b21a      	sxth	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	b21b      	sxth	r3, r3
 800f18c:	4313      	orrs	r3, r2
 800f18e:	b21b      	sxth	r3, r3
 800f190:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f192:	89fb      	ldrh	r3, [r7, #14]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3714      	adds	r7, #20
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	3303      	adds	r3, #3
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	021b      	lsls	r3, r3, #8
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	3202      	adds	r2, #2
 800f1b8:	7812      	ldrb	r2, [r2, #0]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	021b      	lsls	r3, r3, #8
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	3201      	adds	r2, #1
 800f1c6:	7812      	ldrb	r2, [r2, #0]
 800f1c8:	4313      	orrs	r3, r2
 800f1ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	021b      	lsls	r3, r3, #8
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	7812      	ldrb	r2, [r2, #0]
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	60fb      	str	r3, [r7, #12]
	return rv;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr

0800f1e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f1e6:	b480      	push	{r7}
 800f1e8:	b083      	sub	sp, #12
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	6078      	str	r0, [r7, #4]
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	1c5a      	adds	r2, r3, #1
 800f1f6:	607a      	str	r2, [r7, #4]
 800f1f8:	887a      	ldrh	r2, [r7, #2]
 800f1fa:	b2d2      	uxtb	r2, r2
 800f1fc:	701a      	strb	r2, [r3, #0]
 800f1fe:	887b      	ldrh	r3, [r7, #2]
 800f200:	0a1b      	lsrs	r3, r3, #8
 800f202:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	1c5a      	adds	r2, r3, #1
 800f208:	607a      	str	r2, [r7, #4]
 800f20a:	887a      	ldrh	r2, [r7, #2]
 800f20c:	b2d2      	uxtb	r2, r2
 800f20e:	701a      	strb	r2, [r3, #0]
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	1c5a      	adds	r2, r3, #1
 800f22a:	607a      	str	r2, [r7, #4]
 800f22c:	683a      	ldr	r2, [r7, #0]
 800f22e:	b2d2      	uxtb	r2, r2
 800f230:	701a      	strb	r2, [r3, #0]
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	0a1b      	lsrs	r3, r3, #8
 800f236:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	1c5a      	adds	r2, r3, #1
 800f23c:	607a      	str	r2, [r7, #4]
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	b2d2      	uxtb	r2, r2
 800f242:	701a      	strb	r2, [r3, #0]
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	0a1b      	lsrs	r3, r3, #8
 800f248:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	1c5a      	adds	r2, r3, #1
 800f24e:	607a      	str	r2, [r7, #4]
 800f250:	683a      	ldr	r2, [r7, #0]
 800f252:	b2d2      	uxtb	r2, r2
 800f254:	701a      	strb	r2, [r3, #0]
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	0a1b      	lsrs	r3, r3, #8
 800f25a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	1c5a      	adds	r2, r3, #1
 800f260:	607a      	str	r2, [r7, #4]
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	b2d2      	uxtb	r2, r2
 800f266:	701a      	strb	r2, [r3, #0]
}
 800f268:	bf00      	nop
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f274:	b480      	push	{r7}
 800f276:	b087      	sub	sp, #28
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d00d      	beq.n	800f2aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f28e:	693a      	ldr	r2, [r7, #16]
 800f290:	1c53      	adds	r3, r2, #1
 800f292:	613b      	str	r3, [r7, #16]
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	1c59      	adds	r1, r3, #1
 800f298:	6179      	str	r1, [r7, #20]
 800f29a:	7812      	ldrb	r2, [r2, #0]
 800f29c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	607b      	str	r3, [r7, #4]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1f1      	bne.n	800f28e <mem_cpy+0x1a>
	}
}
 800f2aa:	bf00      	nop
 800f2ac:	371c      	adds	r7, #28
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr

0800f2b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f2b6:	b480      	push	{r7}
 800f2b8:	b087      	sub	sp, #28
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	60f8      	str	r0, [r7, #12]
 800f2be:	60b9      	str	r1, [r7, #8]
 800f2c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	617a      	str	r2, [r7, #20]
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	b2d2      	uxtb	r2, r2
 800f2d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	607b      	str	r3, [r7, #4]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1f3      	bne.n	800f2c6 <mem_set+0x10>
}
 800f2de:	bf00      	nop
 800f2e0:	bf00      	nop
 800f2e2:	371c      	adds	r7, #28
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f2ec:	b480      	push	{r7}
 800f2ee:	b089      	sub	sp, #36	; 0x24
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	61fb      	str	r3, [r7, #28]
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f300:	2300      	movs	r3, #0
 800f302:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	1c5a      	adds	r2, r3, #1
 800f308:	61fa      	str	r2, [r7, #28]
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	4619      	mov	r1, r3
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	1c5a      	adds	r2, r3, #1
 800f312:	61ba      	str	r2, [r7, #24]
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	1acb      	subs	r3, r1, r3
 800f318:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	3b01      	subs	r3, #1
 800f31e:	607b      	str	r3, [r7, #4]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d002      	beq.n	800f32c <mem_cmp+0x40>
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d0eb      	beq.n	800f304 <mem_cmp+0x18>

	return r;
 800f32c:	697b      	ldr	r3, [r7, #20]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3724      	adds	r7, #36	; 0x24
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr

0800f33a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f33a:	b480      	push	{r7}
 800f33c:	b083      	sub	sp, #12
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
 800f342:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f344:	e002      	b.n	800f34c <chk_chr+0x12>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	3301      	adds	r3, #1
 800f34a:	607b      	str	r3, [r7, #4]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d005      	beq.n	800f360 <chk_chr+0x26>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	461a      	mov	r2, r3
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d1f2      	bne.n	800f346 <chk_chr+0xc>
	return *str;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	781b      	ldrb	r3, [r3, #0]
}
 800f364:	4618      	mov	r0, r3
 800f366:	370c      	adds	r7, #12
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f37a:	2300      	movs	r3, #0
 800f37c:	60bb      	str	r3, [r7, #8]
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	60fb      	str	r3, [r7, #12]
 800f382:	e029      	b.n	800f3d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f384:	4a27      	ldr	r2, [pc, #156]	; (800f424 <chk_lock+0xb4>)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	011b      	lsls	r3, r3, #4
 800f38a:	4413      	add	r3, r2
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d01d      	beq.n	800f3ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f392:	4a24      	ldr	r2, [pc, #144]	; (800f424 <chk_lock+0xb4>)
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	011b      	lsls	r3, r3, #4
 800f398:	4413      	add	r3, r2
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d116      	bne.n	800f3d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f3a4:	4a1f      	ldr	r2, [pc, #124]	; (800f424 <chk_lock+0xb4>)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	011b      	lsls	r3, r3, #4
 800f3aa:	4413      	add	r3, r2
 800f3ac:	3304      	adds	r3, #4
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d10c      	bne.n	800f3d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f3b8:	4a1a      	ldr	r2, [pc, #104]	; (800f424 <chk_lock+0xb4>)
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	011b      	lsls	r3, r3, #4
 800f3be:	4413      	add	r3, r2
 800f3c0:	3308      	adds	r3, #8
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d102      	bne.n	800f3d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f3cc:	e007      	b.n	800f3de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	60fb      	str	r3, [r7, #12]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d9d2      	bls.n	800f384 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	d109      	bne.n	800f3f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d102      	bne.n	800f3f0 <chk_lock+0x80>
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d101      	bne.n	800f3f4 <chk_lock+0x84>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	e010      	b.n	800f416 <chk_lock+0xa6>
 800f3f4:	2312      	movs	r3, #18
 800f3f6:	e00e      	b.n	800f416 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d108      	bne.n	800f410 <chk_lock+0xa0>
 800f3fe:	4a09      	ldr	r2, [pc, #36]	; (800f424 <chk_lock+0xb4>)
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	011b      	lsls	r3, r3, #4
 800f404:	4413      	add	r3, r2
 800f406:	330c      	adds	r3, #12
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f40e:	d101      	bne.n	800f414 <chk_lock+0xa4>
 800f410:	2310      	movs	r3, #16
 800f412:	e000      	b.n	800f416 <chk_lock+0xa6>
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	3714      	adds	r7, #20
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr
 800f422:	bf00      	nop
 800f424:	20001404 	.word	0x20001404

0800f428 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f42e:	2300      	movs	r3, #0
 800f430:	607b      	str	r3, [r7, #4]
 800f432:	e002      	b.n	800f43a <enq_lock+0x12>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	3301      	adds	r3, #1
 800f438:	607b      	str	r3, [r7, #4]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d806      	bhi.n	800f44e <enq_lock+0x26>
 800f440:	4a09      	ldr	r2, [pc, #36]	; (800f468 <enq_lock+0x40>)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	011b      	lsls	r3, r3, #4
 800f446:	4413      	add	r3, r2
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1f2      	bne.n	800f434 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2b02      	cmp	r3, #2
 800f452:	bf14      	ite	ne
 800f454:	2301      	movne	r3, #1
 800f456:	2300      	moveq	r3, #0
 800f458:	b2db      	uxtb	r3, r3
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	370c      	adds	r7, #12
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop
 800f468:	20001404 	.word	0x20001404

0800f46c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f476:	2300      	movs	r3, #0
 800f478:	60fb      	str	r3, [r7, #12]
 800f47a:	e01f      	b.n	800f4bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f47c:	4a41      	ldr	r2, [pc, #260]	; (800f584 <inc_lock+0x118>)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	011b      	lsls	r3, r3, #4
 800f482:	4413      	add	r3, r2
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d113      	bne.n	800f4b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f48e:	4a3d      	ldr	r2, [pc, #244]	; (800f584 <inc_lock+0x118>)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	011b      	lsls	r3, r3, #4
 800f494:	4413      	add	r3, r2
 800f496:	3304      	adds	r3, #4
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d109      	bne.n	800f4b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f4a2:	4a38      	ldr	r2, [pc, #224]	; (800f584 <inc_lock+0x118>)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	011b      	lsls	r3, r3, #4
 800f4a8:	4413      	add	r3, r2
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d006      	beq.n	800f4c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d9dc      	bls.n	800f47c <inc_lock+0x10>
 800f4c2:	e000      	b.n	800f4c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f4c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2b02      	cmp	r3, #2
 800f4ca:	d132      	bne.n	800f532 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	e002      	b.n	800f4d8 <inc_lock+0x6c>
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	60fb      	str	r3, [r7, #12]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d806      	bhi.n	800f4ec <inc_lock+0x80>
 800f4de:	4a29      	ldr	r2, [pc, #164]	; (800f584 <inc_lock+0x118>)
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	011b      	lsls	r3, r3, #4
 800f4e4:	4413      	add	r3, r2
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d1f2      	bne.n	800f4d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2b02      	cmp	r3, #2
 800f4f0:	d101      	bne.n	800f4f6 <inc_lock+0x8a>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	e040      	b.n	800f578 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	4922      	ldr	r1, [pc, #136]	; (800f584 <inc_lock+0x118>)
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	011b      	lsls	r3, r3, #4
 800f500:	440b      	add	r3, r1
 800f502:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	689a      	ldr	r2, [r3, #8]
 800f508:	491e      	ldr	r1, [pc, #120]	; (800f584 <inc_lock+0x118>)
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	011b      	lsls	r3, r3, #4
 800f50e:	440b      	add	r3, r1
 800f510:	3304      	adds	r3, #4
 800f512:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	695a      	ldr	r2, [r3, #20]
 800f518:	491a      	ldr	r1, [pc, #104]	; (800f584 <inc_lock+0x118>)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	011b      	lsls	r3, r3, #4
 800f51e:	440b      	add	r3, r1
 800f520:	3308      	adds	r3, #8
 800f522:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f524:	4a17      	ldr	r2, [pc, #92]	; (800f584 <inc_lock+0x118>)
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	011b      	lsls	r3, r3, #4
 800f52a:	4413      	add	r3, r2
 800f52c:	330c      	adds	r3, #12
 800f52e:	2200      	movs	r2, #0
 800f530:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d009      	beq.n	800f54c <inc_lock+0xe0>
 800f538:	4a12      	ldr	r2, [pc, #72]	; (800f584 <inc_lock+0x118>)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	011b      	lsls	r3, r3, #4
 800f53e:	4413      	add	r3, r2
 800f540:	330c      	adds	r3, #12
 800f542:	881b      	ldrh	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d001      	beq.n	800f54c <inc_lock+0xe0>
 800f548:	2300      	movs	r3, #0
 800f54a:	e015      	b.n	800f578 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d108      	bne.n	800f564 <inc_lock+0xf8>
 800f552:	4a0c      	ldr	r2, [pc, #48]	; (800f584 <inc_lock+0x118>)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	011b      	lsls	r3, r3, #4
 800f558:	4413      	add	r3, r2
 800f55a:	330c      	adds	r3, #12
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	3301      	adds	r3, #1
 800f560:	b29a      	uxth	r2, r3
 800f562:	e001      	b.n	800f568 <inc_lock+0xfc>
 800f564:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f568:	4906      	ldr	r1, [pc, #24]	; (800f584 <inc_lock+0x118>)
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	011b      	lsls	r3, r3, #4
 800f56e:	440b      	add	r3, r1
 800f570:	330c      	adds	r3, #12
 800f572:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	3301      	adds	r3, #1
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3714      	adds	r7, #20
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr
 800f584:	20001404 	.word	0x20001404

0800f588 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f588:	b480      	push	{r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	3b01      	subs	r3, #1
 800f594:	607b      	str	r3, [r7, #4]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d825      	bhi.n	800f5e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800f59c:	4a17      	ldr	r2, [pc, #92]	; (800f5fc <dec_lock+0x74>)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	011b      	lsls	r3, r3, #4
 800f5a2:	4413      	add	r3, r2
 800f5a4:	330c      	adds	r3, #12
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f5aa:	89fb      	ldrh	r3, [r7, #14]
 800f5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5b0:	d101      	bne.n	800f5b6 <dec_lock+0x2e>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f5b6:	89fb      	ldrh	r3, [r7, #14]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d002      	beq.n	800f5c2 <dec_lock+0x3a>
 800f5bc:	89fb      	ldrh	r3, [r7, #14]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f5c2:	4a0e      	ldr	r2, [pc, #56]	; (800f5fc <dec_lock+0x74>)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	011b      	lsls	r3, r3, #4
 800f5c8:	4413      	add	r3, r2
 800f5ca:	330c      	adds	r3, #12
 800f5cc:	89fa      	ldrh	r2, [r7, #14]
 800f5ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f5d0:	89fb      	ldrh	r3, [r7, #14]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d105      	bne.n	800f5e2 <dec_lock+0x5a>
 800f5d6:	4a09      	ldr	r2, [pc, #36]	; (800f5fc <dec_lock+0x74>)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	011b      	lsls	r3, r3, #4
 800f5dc:	4413      	add	r3, r2
 800f5de:	2200      	movs	r2, #0
 800f5e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	737b      	strb	r3, [r7, #13]
 800f5e6:	e001      	b.n	800f5ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f5e8:	2302      	movs	r3, #2
 800f5ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f5ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	20001404 	.word	0x20001404

0800f600 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f608:	2300      	movs	r3, #0
 800f60a:	60fb      	str	r3, [r7, #12]
 800f60c:	e010      	b.n	800f630 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f60e:	4a0d      	ldr	r2, [pc, #52]	; (800f644 <clear_lock+0x44>)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	011b      	lsls	r3, r3, #4
 800f614:	4413      	add	r3, r2
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d105      	bne.n	800f62a <clear_lock+0x2a>
 800f61e:	4a09      	ldr	r2, [pc, #36]	; (800f644 <clear_lock+0x44>)
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	011b      	lsls	r3, r3, #4
 800f624:	4413      	add	r3, r2
 800f626:	2200      	movs	r2, #0
 800f628:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3301      	adds	r3, #1
 800f62e:	60fb      	str	r3, [r7, #12]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2b01      	cmp	r3, #1
 800f634:	d9eb      	bls.n	800f60e <clear_lock+0xe>
	}
}
 800f636:	bf00      	nop
 800f638:	bf00      	nop
 800f63a:	3714      	adds	r7, #20
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr
 800f644:	20001404 	.word	0x20001404

0800f648 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b086      	sub	sp, #24
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f650:	2300      	movs	r3, #0
 800f652:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	78db      	ldrb	r3, [r3, #3]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d034      	beq.n	800f6c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f660:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	7858      	ldrb	r0, [r3, #1]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f66c:	2301      	movs	r3, #1
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	f7ff fd40 	bl	800f0f4 <disk_write>
 800f674:	4603      	mov	r3, r0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d002      	beq.n	800f680 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f67a:	2301      	movs	r3, #1
 800f67c:	73fb      	strb	r3, [r7, #15]
 800f67e:	e022      	b.n	800f6c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	1ad2      	subs	r2, r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	69db      	ldr	r3, [r3, #28]
 800f692:	429a      	cmp	r2, r3
 800f694:	d217      	bcs.n	800f6c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	789b      	ldrb	r3, [r3, #2]
 800f69a:	613b      	str	r3, [r7, #16]
 800f69c:	e010      	b.n	800f6c0 <sync_window+0x78>
					wsect += fs->fsize;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	69db      	ldr	r3, [r3, #28]
 800f6a2:	697a      	ldr	r2, [r7, #20]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	7858      	ldrb	r0, [r3, #1]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	697a      	ldr	r2, [r7, #20]
 800f6b6:	f7ff fd1d 	bl	800f0f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	613b      	str	r3, [r7, #16]
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d8eb      	bhi.n	800f69e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3718      	adds	r7, #24
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d01b      	beq.n	800f720 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7ff ffad 	bl	800f648 <sync_window>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f6f2:	7bfb      	ldrb	r3, [r7, #15]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d113      	bne.n	800f720 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	7858      	ldrb	r0, [r3, #1]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f702:	2301      	movs	r3, #1
 800f704:	683a      	ldr	r2, [r7, #0]
 800f706:	f7ff fcd5 	bl	800f0b4 <disk_read>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d004      	beq.n	800f71a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f710:	f04f 33ff 	mov.w	r3, #4294967295
 800f714:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f716:	2301      	movs	r3, #1
 800f718:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	683a      	ldr	r2, [r7, #0]
 800f71e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f720:	7bfb      	ldrb	r3, [r7, #15]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3710      	adds	r7, #16
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
	...

0800f72c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7ff ff87 	bl	800f648 <sync_window>
 800f73a:	4603      	mov	r3, r0
 800f73c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f73e:	7bfb      	ldrb	r3, [r7, #15]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d158      	bne.n	800f7f6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	2b03      	cmp	r3, #3
 800f74a:	d148      	bne.n	800f7de <sync_fs+0xb2>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	791b      	ldrb	r3, [r3, #4]
 800f750:	2b01      	cmp	r3, #1
 800f752:	d144      	bne.n	800f7de <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	3334      	adds	r3, #52	; 0x34
 800f758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f75c:	2100      	movs	r1, #0
 800f75e:	4618      	mov	r0, r3
 800f760:	f7ff fda9 	bl	800f2b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	3334      	adds	r3, #52	; 0x34
 800f768:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f76c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f770:	4618      	mov	r0, r3
 800f772:	f7ff fd38 	bl	800f1e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	3334      	adds	r3, #52	; 0x34
 800f77a:	4921      	ldr	r1, [pc, #132]	; (800f800 <sync_fs+0xd4>)
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7ff fd4d 	bl	800f21c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	3334      	adds	r3, #52	; 0x34
 800f786:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f78a:	491e      	ldr	r1, [pc, #120]	; (800f804 <sync_fs+0xd8>)
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7ff fd45 	bl	800f21c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	3334      	adds	r3, #52	; 0x34
 800f796:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	695b      	ldr	r3, [r3, #20]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	4610      	mov	r0, r2
 800f7a2:	f7ff fd3b 	bl	800f21c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	3334      	adds	r3, #52	; 0x34
 800f7aa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	4610      	mov	r0, r2
 800f7b6:	f7ff fd31 	bl	800f21c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a1b      	ldr	r3, [r3, #32]
 800f7be:	1c5a      	adds	r2, r3, #1
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	7858      	ldrb	r0, [r3, #1]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	f7ff fc8e 	bl	800f0f4 <disk_write>
			fs->fsi_flag = 0;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	785b      	ldrb	r3, [r3, #1]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff fca4 	bl	800f134 <disk_ioctl>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d001      	beq.n	800f7f6 <sync_fs+0xca>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	41615252 	.word	0x41615252
 800f804:	61417272 	.word	0x61417272

0800f808 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	3b02      	subs	r3, #2
 800f816:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	3b02      	subs	r3, #2
 800f81e:	683a      	ldr	r2, [r7, #0]
 800f820:	429a      	cmp	r2, r3
 800f822:	d301      	bcc.n	800f828 <clust2sect+0x20>
 800f824:	2300      	movs	r3, #0
 800f826:	e008      	b.n	800f83a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	895b      	ldrh	r3, [r3, #10]
 800f82c:	461a      	mov	r2, r3
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	fb03 f202 	mul.w	r2, r3, r2
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f838:	4413      	add	r3, r2
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	370c      	adds	r7, #12
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr

0800f846 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b086      	sub	sp, #24
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
 800f84e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d904      	bls.n	800f866 <get_fat+0x20>
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	699b      	ldr	r3, [r3, #24]
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	429a      	cmp	r2, r3
 800f864:	d302      	bcc.n	800f86c <get_fat+0x26>
		val = 1;	/* Internal error */
 800f866:	2301      	movs	r3, #1
 800f868:	617b      	str	r3, [r7, #20]
 800f86a:	e08f      	b.n	800f98c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f86c:	f04f 33ff 	mov.w	r3, #4294967295
 800f870:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	2b03      	cmp	r3, #3
 800f878:	d062      	beq.n	800f940 <get_fat+0xfa>
 800f87a:	2b03      	cmp	r3, #3
 800f87c:	dc7c      	bgt.n	800f978 <get_fat+0x132>
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d002      	beq.n	800f888 <get_fat+0x42>
 800f882:	2b02      	cmp	r3, #2
 800f884:	d042      	beq.n	800f90c <get_fat+0xc6>
 800f886:	e077      	b.n	800f978 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	60fb      	str	r3, [r7, #12]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	085b      	lsrs	r3, r3, #1
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	4413      	add	r3, r2
 800f894:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	0a5b      	lsrs	r3, r3, #9
 800f89e:	4413      	add	r3, r2
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	6938      	ldr	r0, [r7, #16]
 800f8a4:	f7ff ff14 	bl	800f6d0 <move_window>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d167      	bne.n	800f97e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	1c5a      	adds	r2, r3, #1
 800f8b2:	60fa      	str	r2, [r7, #12]
 800f8b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8b8:	693a      	ldr	r2, [r7, #16]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f8c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	0a5b      	lsrs	r3, r3, #9
 800f8ca:	4413      	add	r3, r2
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	6938      	ldr	r0, [r7, #16]
 800f8d0:	f7ff fefe 	bl	800f6d0 <move_window>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d153      	bne.n	800f982 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8e0:	693a      	ldr	r2, [r7, #16]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f8e8:	021b      	lsls	r3, r3, #8
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	f003 0301 	and.w	r3, r3, #1
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d002      	beq.n	800f902 <get_fat+0xbc>
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	091b      	lsrs	r3, r3, #4
 800f900:	e002      	b.n	800f908 <get_fat+0xc2>
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f908:	617b      	str	r3, [r7, #20]
			break;
 800f90a:	e03f      	b.n	800f98c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	0a1b      	lsrs	r3, r3, #8
 800f914:	4413      	add	r3, r2
 800f916:	4619      	mov	r1, r3
 800f918:	6938      	ldr	r0, [r7, #16]
 800f91a:	f7ff fed9 	bl	800f6d0 <move_window>
 800f91e:	4603      	mov	r3, r0
 800f920:	2b00      	cmp	r3, #0
 800f922:	d130      	bne.n	800f986 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	005b      	lsls	r3, r3, #1
 800f92e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f932:	4413      	add	r3, r2
 800f934:	4618      	mov	r0, r3
 800f936:	f7ff fc1b 	bl	800f170 <ld_word>
 800f93a:	4603      	mov	r3, r0
 800f93c:	617b      	str	r3, [r7, #20]
			break;
 800f93e:	e025      	b.n	800f98c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	09db      	lsrs	r3, r3, #7
 800f948:	4413      	add	r3, r2
 800f94a:	4619      	mov	r1, r3
 800f94c:	6938      	ldr	r0, [r7, #16]
 800f94e:	f7ff febf 	bl	800f6d0 <move_window>
 800f952:	4603      	mov	r3, r0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d118      	bne.n	800f98a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f966:	4413      	add	r3, r2
 800f968:	4618      	mov	r0, r3
 800f96a:	f7ff fc19 	bl	800f1a0 <ld_dword>
 800f96e:	4603      	mov	r3, r0
 800f970:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f974:	617b      	str	r3, [r7, #20]
			break;
 800f976:	e009      	b.n	800f98c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f978:	2301      	movs	r3, #1
 800f97a:	617b      	str	r3, [r7, #20]
 800f97c:	e006      	b.n	800f98c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f97e:	bf00      	nop
 800f980:	e004      	b.n	800f98c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f982:	bf00      	nop
 800f984:	e002      	b.n	800f98c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f986:	bf00      	nop
 800f988:	e000      	b.n	800f98c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f98a:	bf00      	nop
		}
	}

	return val;
 800f98c:	697b      	ldr	r3, [r7, #20]
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3718      	adds	r7, #24
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}

0800f996 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f996:	b590      	push	{r4, r7, lr}
 800f998:	b089      	sub	sp, #36	; 0x24
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	60f8      	str	r0, [r7, #12]
 800f99e:	60b9      	str	r1, [r7, #8]
 800f9a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f9a2:	2302      	movs	r3, #2
 800f9a4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	f240 80d2 	bls.w	800fb52 <put_fat+0x1bc>
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	699b      	ldr	r3, [r3, #24]
 800f9b2:	68ba      	ldr	r2, [r7, #8]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	f080 80cc 	bcs.w	800fb52 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	2b03      	cmp	r3, #3
 800f9c0:	f000 8096 	beq.w	800faf0 <put_fat+0x15a>
 800f9c4:	2b03      	cmp	r3, #3
 800f9c6:	f300 80cd 	bgt.w	800fb64 <put_fat+0x1ce>
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d002      	beq.n	800f9d4 <put_fat+0x3e>
 800f9ce:	2b02      	cmp	r3, #2
 800f9d0:	d06e      	beq.n	800fab0 <put_fat+0x11a>
 800f9d2:	e0c7      	b.n	800fb64 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	61bb      	str	r3, [r7, #24]
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	085b      	lsrs	r3, r3, #1
 800f9dc:	69ba      	ldr	r2, [r7, #24]
 800f9de:	4413      	add	r3, r2
 800f9e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	0a5b      	lsrs	r3, r3, #9
 800f9ea:	4413      	add	r3, r2
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	68f8      	ldr	r0, [r7, #12]
 800f9f0:	f7ff fe6e 	bl	800f6d0 <move_window>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f9f8:	7ffb      	ldrb	r3, [r7, #31]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	f040 80ab 	bne.w	800fb56 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	1c59      	adds	r1, r3, #1
 800fa0a:	61b9      	str	r1, [r7, #24]
 800fa0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa10:	4413      	add	r3, r2
 800fa12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	f003 0301 	and.w	r3, r3, #1
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00d      	beq.n	800fa3a <put_fat+0xa4>
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	b25b      	sxtb	r3, r3
 800fa24:	f003 030f 	and.w	r3, r3, #15
 800fa28:	b25a      	sxtb	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	011b      	lsls	r3, r3, #4
 800fa30:	b25b      	sxtb	r3, r3
 800fa32:	4313      	orrs	r3, r2
 800fa34:	b25b      	sxtb	r3, r3
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	e001      	b.n	800fa3e <put_fat+0xa8>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	697a      	ldr	r2, [r7, #20]
 800fa40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2201      	movs	r2, #1
 800fa46:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	0a5b      	lsrs	r3, r3, #9
 800fa50:	4413      	add	r3, r2
 800fa52:	4619      	mov	r1, r3
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f7ff fe3b 	bl	800f6d0 <move_window>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fa5e:	7ffb      	ldrb	r3, [r7, #31]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d17a      	bne.n	800fb5a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa70:	4413      	add	r3, r2
 800fa72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	f003 0301 	and.w	r3, r3, #1
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d003      	beq.n	800fa86 <put_fat+0xf0>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	091b      	lsrs	r3, r3, #4
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	e00e      	b.n	800faa4 <put_fat+0x10e>
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	b25b      	sxtb	r3, r3
 800fa8c:	f023 030f 	bic.w	r3, r3, #15
 800fa90:	b25a      	sxtb	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	0a1b      	lsrs	r3, r3, #8
 800fa96:	b25b      	sxtb	r3, r3
 800fa98:	f003 030f 	and.w	r3, r3, #15
 800fa9c:	b25b      	sxtb	r3, r3
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	b25b      	sxtb	r3, r3
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	697a      	ldr	r2, [r7, #20]
 800faa6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2201      	movs	r2, #1
 800faac:	70da      	strb	r2, [r3, #3]
			break;
 800faae:	e059      	b.n	800fb64 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	0a1b      	lsrs	r3, r3, #8
 800fab8:	4413      	add	r3, r2
 800faba:	4619      	mov	r1, r3
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f7ff fe07 	bl	800f6d0 <move_window>
 800fac2:	4603      	mov	r3, r0
 800fac4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fac6:	7ffb      	ldrb	r3, [r7, #31]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d148      	bne.n	800fb5e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	005b      	lsls	r3, r3, #1
 800fad6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fada:	4413      	add	r3, r2
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	b292      	uxth	r2, r2
 800fae0:	4611      	mov	r1, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7ff fb7f 	bl	800f1e6 <st_word>
			fs->wflag = 1;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2201      	movs	r2, #1
 800faec:	70da      	strb	r2, [r3, #3]
			break;
 800faee:	e039      	b.n	800fb64 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	09db      	lsrs	r3, r3, #7
 800faf8:	4413      	add	r3, r2
 800fafa:	4619      	mov	r1, r3
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f7ff fde7 	bl	800f6d0 <move_window>
 800fb02:	4603      	mov	r3, r0
 800fb04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb06:	7ffb      	ldrb	r3, [r7, #31]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d12a      	bne.n	800fb62 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fb20:	4413      	add	r3, r2
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fb3c 	bl	800f1a0 <ld_dword>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fb2e:	4323      	orrs	r3, r4
 800fb30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	009b      	lsls	r3, r3, #2
 800fb3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fb40:	4413      	add	r3, r2
 800fb42:	6879      	ldr	r1, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7ff fb69 	bl	800f21c <st_dword>
			fs->wflag = 1;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	70da      	strb	r2, [r3, #3]
			break;
 800fb50:	e008      	b.n	800fb64 <put_fat+0x1ce>
		}
	}
 800fb52:	bf00      	nop
 800fb54:	e006      	b.n	800fb64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fb56:	bf00      	nop
 800fb58:	e004      	b.n	800fb64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fb5a:	bf00      	nop
 800fb5c:	e002      	b.n	800fb64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fb5e:	bf00      	nop
 800fb60:	e000      	b.n	800fb64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fb62:	bf00      	nop
	return res;
 800fb64:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3724      	adds	r7, #36	; 0x24
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd90      	pop	{r4, r7, pc}

0800fb6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b088      	sub	sp, #32
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	60f8      	str	r0, [r7, #12]
 800fb76:	60b9      	str	r1, [r7, #8]
 800fb78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d904      	bls.n	800fb94 <remove_chain+0x26>
 800fb8a:	69bb      	ldr	r3, [r7, #24]
 800fb8c:	699b      	ldr	r3, [r3, #24]
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d301      	bcc.n	800fb98 <remove_chain+0x2a>
 800fb94:	2302      	movs	r3, #2
 800fb96:	e04b      	b.n	800fc30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00c      	beq.n	800fbb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fb9e:	f04f 32ff 	mov.w	r2, #4294967295
 800fba2:	6879      	ldr	r1, [r7, #4]
 800fba4:	69b8      	ldr	r0, [r7, #24]
 800fba6:	f7ff fef6 	bl	800f996 <put_fat>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fbae:	7ffb      	ldrb	r3, [r7, #31]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d001      	beq.n	800fbb8 <remove_chain+0x4a>
 800fbb4:	7ffb      	ldrb	r3, [r7, #31]
 800fbb6:	e03b      	b.n	800fc30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fbb8:	68b9      	ldr	r1, [r7, #8]
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f7ff fe43 	bl	800f846 <get_fat>
 800fbc0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d031      	beq.n	800fc2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d101      	bne.n	800fbd2 <remove_chain+0x64>
 800fbce:	2302      	movs	r3, #2
 800fbd0:	e02e      	b.n	800fc30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd8:	d101      	bne.n	800fbde <remove_chain+0x70>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e028      	b.n	800fc30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fbde:	2200      	movs	r2, #0
 800fbe0:	68b9      	ldr	r1, [r7, #8]
 800fbe2:	69b8      	ldr	r0, [r7, #24]
 800fbe4:	f7ff fed7 	bl	800f996 <put_fat>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fbec:	7ffb      	ldrb	r3, [r7, #31]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d001      	beq.n	800fbf6 <remove_chain+0x88>
 800fbf2:	7ffb      	ldrb	r3, [r7, #31]
 800fbf4:	e01c      	b.n	800fc30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fbf6:	69bb      	ldr	r3, [r7, #24]
 800fbf8:	695a      	ldr	r2, [r3, #20]
 800fbfa:	69bb      	ldr	r3, [r7, #24]
 800fbfc:	699b      	ldr	r3, [r3, #24]
 800fbfe:	3b02      	subs	r3, #2
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d20b      	bcs.n	800fc1c <remove_chain+0xae>
			fs->free_clst++;
 800fc04:	69bb      	ldr	r3, [r7, #24]
 800fc06:	695b      	ldr	r3, [r3, #20]
 800fc08:	1c5a      	adds	r2, r3, #1
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fc0e:	69bb      	ldr	r3, [r7, #24]
 800fc10:	791b      	ldrb	r3, [r3, #4]
 800fc12:	f043 0301 	orr.w	r3, r3, #1
 800fc16:	b2da      	uxtb	r2, r3
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	699b      	ldr	r3, [r3, #24]
 800fc24:	68ba      	ldr	r2, [r7, #8]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d3c6      	bcc.n	800fbb8 <remove_chain+0x4a>
 800fc2a:	e000      	b.n	800fc2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fc2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fc2e:	2300      	movs	r3, #0
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3720      	adds	r7, #32
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b088      	sub	sp, #32
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d10d      	bne.n	800fc6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	691b      	ldr	r3, [r3, #16]
 800fc52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fc54:	69bb      	ldr	r3, [r7, #24]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d004      	beq.n	800fc64 <create_chain+0x2c>
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	699b      	ldr	r3, [r3, #24]
 800fc5e:	69ba      	ldr	r2, [r7, #24]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d31b      	bcc.n	800fc9c <create_chain+0x64>
 800fc64:	2301      	movs	r3, #1
 800fc66:	61bb      	str	r3, [r7, #24]
 800fc68:	e018      	b.n	800fc9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fc6a:	6839      	ldr	r1, [r7, #0]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7ff fdea 	bl	800f846 <get_fat>
 800fc72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d801      	bhi.n	800fc7e <create_chain+0x46>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e070      	b.n	800fd60 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc84:	d101      	bne.n	800fc8a <create_chain+0x52>
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	e06a      	b.n	800fd60 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	699b      	ldr	r3, [r3, #24]
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d201      	bcs.n	800fc98 <create_chain+0x60>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	e063      	b.n	800fd60 <create_chain+0x128>
		scl = clst;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	3301      	adds	r3, #1
 800fca4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	699b      	ldr	r3, [r3, #24]
 800fcaa:	69fa      	ldr	r2, [r7, #28]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d307      	bcc.n	800fcc0 <create_chain+0x88>
				ncl = 2;
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fcb4:	69fa      	ldr	r2, [r7, #28]
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d901      	bls.n	800fcc0 <create_chain+0x88>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	e04f      	b.n	800fd60 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fcc0:	69f9      	ldr	r1, [r7, #28]
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f7ff fdbf 	bl	800f846 <get_fat>
 800fcc8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00e      	beq.n	800fcee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d003      	beq.n	800fcde <create_chain+0xa6>
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcdc:	d101      	bne.n	800fce2 <create_chain+0xaa>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	e03e      	b.n	800fd60 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fce2:	69fa      	ldr	r2, [r7, #28]
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d1da      	bne.n	800fca0 <create_chain+0x68>
 800fcea:	2300      	movs	r3, #0
 800fcec:	e038      	b.n	800fd60 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fcee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fcf0:	f04f 32ff 	mov.w	r2, #4294967295
 800fcf4:	69f9      	ldr	r1, [r7, #28]
 800fcf6:	6938      	ldr	r0, [r7, #16]
 800fcf8:	f7ff fe4d 	bl	800f996 <put_fat>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fd00:	7dfb      	ldrb	r3, [r7, #23]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d109      	bne.n	800fd1a <create_chain+0xe2>
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d006      	beq.n	800fd1a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fd0c:	69fa      	ldr	r2, [r7, #28]
 800fd0e:	6839      	ldr	r1, [r7, #0]
 800fd10:	6938      	ldr	r0, [r7, #16]
 800fd12:	f7ff fe40 	bl	800f996 <put_fat>
 800fd16:	4603      	mov	r3, r0
 800fd18:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d116      	bne.n	800fd4e <create_chain+0x116>
		fs->last_clst = ncl;
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	69fa      	ldr	r2, [r7, #28]
 800fd24:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	695a      	ldr	r2, [r3, #20]
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	699b      	ldr	r3, [r3, #24]
 800fd2e:	3b02      	subs	r3, #2
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d804      	bhi.n	800fd3e <create_chain+0x106>
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	695b      	ldr	r3, [r3, #20]
 800fd38:	1e5a      	subs	r2, r3, #1
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	791b      	ldrb	r3, [r3, #4]
 800fd42:	f043 0301 	orr.w	r3, r3, #1
 800fd46:	b2da      	uxtb	r2, r3
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	711a      	strb	r2, [r3, #4]
 800fd4c:	e007      	b.n	800fd5e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fd4e:	7dfb      	ldrb	r3, [r7, #23]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d102      	bne.n	800fd5a <create_chain+0x122>
 800fd54:	f04f 33ff 	mov.w	r3, #4294967295
 800fd58:	e000      	b.n	800fd5c <create_chain+0x124>
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fd5e:	69fb      	ldr	r3, [r7, #28]
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3720      	adds	r7, #32
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b087      	sub	sp, #28
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd7c:	3304      	adds	r3, #4
 800fd7e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	0a5b      	lsrs	r3, r3, #9
 800fd84:	68fa      	ldr	r2, [r7, #12]
 800fd86:	8952      	ldrh	r2, [r2, #10]
 800fd88:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	1d1a      	adds	r2, r3, #4
 800fd92:	613a      	str	r2, [r7, #16]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d101      	bne.n	800fda2 <clmt_clust+0x3a>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e010      	b.n	800fdc4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800fda2:	697a      	ldr	r2, [r7, #20]
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d307      	bcc.n	800fdba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800fdaa:	697a      	ldr	r2, [r7, #20]
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	1ad3      	subs	r3, r2, r3
 800fdb0:	617b      	str	r3, [r7, #20]
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fdb8:	e7e9      	b.n	800fd8e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800fdba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	4413      	add	r3, r2
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	371c      	adds	r7, #28
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fde6:	d204      	bcs.n	800fdf2 <dir_sdi+0x22>
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	f003 031f 	and.w	r3, r3, #31
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d001      	beq.n	800fdf6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fdf2:	2302      	movs	r3, #2
 800fdf4:	e063      	b.n	800febe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	683a      	ldr	r2, [r7, #0]
 800fdfa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d106      	bne.n	800fe16 <dir_sdi+0x46>
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b02      	cmp	r3, #2
 800fe0e:	d902      	bls.n	800fe16 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe14:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d10c      	bne.n	800fe36 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	095b      	lsrs	r3, r3, #5
 800fe20:	693a      	ldr	r2, [r7, #16]
 800fe22:	8912      	ldrh	r2, [r2, #8]
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d301      	bcc.n	800fe2c <dir_sdi+0x5c>
 800fe28:	2302      	movs	r3, #2
 800fe2a:	e048      	b.n	800febe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	61da      	str	r2, [r3, #28]
 800fe34:	e029      	b.n	800fe8a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	895b      	ldrh	r3, [r3, #10]
 800fe3a:	025b      	lsls	r3, r3, #9
 800fe3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fe3e:	e019      	b.n	800fe74 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6979      	ldr	r1, [r7, #20]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7ff fcfe 	bl	800f846 <get_fat>
 800fe4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe52:	d101      	bne.n	800fe58 <dir_sdi+0x88>
 800fe54:	2301      	movs	r3, #1
 800fe56:	e032      	b.n	800febe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d904      	bls.n	800fe68 <dir_sdi+0x98>
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	699b      	ldr	r3, [r3, #24]
 800fe62:	697a      	ldr	r2, [r7, #20]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d301      	bcc.n	800fe6c <dir_sdi+0x9c>
 800fe68:	2302      	movs	r3, #2
 800fe6a:	e028      	b.n	800febe <dir_sdi+0xee>
			ofs -= csz;
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fe74:	683a      	ldr	r2, [r7, #0]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d2e1      	bcs.n	800fe40 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800fe7c:	6979      	ldr	r1, [r7, #20]
 800fe7e:	6938      	ldr	r0, [r7, #16]
 800fe80:	f7ff fcc2 	bl	800f808 <clust2sect>
 800fe84:	4602      	mov	r2, r0
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	697a      	ldr	r2, [r7, #20]
 800fe8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	69db      	ldr	r3, [r3, #28]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d101      	bne.n	800fe9c <dir_sdi+0xcc>
 800fe98:	2302      	movs	r3, #2
 800fe9a:	e010      	b.n	800febe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	69da      	ldr	r2, [r3, #28]
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	0a5b      	lsrs	r3, r3, #9
 800fea4:	441a      	add	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feb6:	441a      	add	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800febc:	2300      	movs	r3, #0
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3718      	adds	r7, #24
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b086      	sub	sp, #24
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	695b      	ldr	r3, [r3, #20]
 800feda:	3320      	adds	r3, #32
 800fedc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	69db      	ldr	r3, [r3, #28]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d003      	beq.n	800feee <dir_next+0x28>
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800feec:	d301      	bcc.n	800fef2 <dir_next+0x2c>
 800feee:	2304      	movs	r3, #4
 800fef0:	e0aa      	b.n	8010048 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	f040 8098 	bne.w	801002e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	69db      	ldr	r3, [r3, #28]
 800ff02:	1c5a      	adds	r2, r3, #1
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	699b      	ldr	r3, [r3, #24]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10b      	bne.n	800ff28 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	095b      	lsrs	r3, r3, #5
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	8912      	ldrh	r2, [r2, #8]
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	f0c0 8088 	bcc.w	801002e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	61da      	str	r2, [r3, #28]
 800ff24:	2304      	movs	r3, #4
 800ff26:	e08f      	b.n	8010048 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	0a5b      	lsrs	r3, r3, #9
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	8952      	ldrh	r2, [r2, #10]
 800ff30:	3a01      	subs	r2, #1
 800ff32:	4013      	ands	r3, r2
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d17a      	bne.n	801002e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	699b      	ldr	r3, [r3, #24]
 800ff3e:	4619      	mov	r1, r3
 800ff40:	4610      	mov	r0, r2
 800ff42:	f7ff fc80 	bl	800f846 <get_fat>
 800ff46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d801      	bhi.n	800ff52 <dir_next+0x8c>
 800ff4e:	2302      	movs	r3, #2
 800ff50:	e07a      	b.n	8010048 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff58:	d101      	bne.n	800ff5e <dir_next+0x98>
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e074      	b.n	8010048 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	699b      	ldr	r3, [r3, #24]
 800ff62:	697a      	ldr	r2, [r7, #20]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d358      	bcc.n	801001a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d104      	bne.n	800ff78 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	61da      	str	r2, [r3, #28]
 800ff74:	2304      	movs	r3, #4
 800ff76:	e067      	b.n	8010048 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	699b      	ldr	r3, [r3, #24]
 800ff7e:	4619      	mov	r1, r3
 800ff80:	4610      	mov	r0, r2
 800ff82:	f7ff fe59 	bl	800fc38 <create_chain>
 800ff86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d101      	bne.n	800ff92 <dir_next+0xcc>
 800ff8e:	2307      	movs	r3, #7
 800ff90:	e05a      	b.n	8010048 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d101      	bne.n	800ff9c <dir_next+0xd6>
 800ff98:	2302      	movs	r3, #2
 800ff9a:	e055      	b.n	8010048 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa2:	d101      	bne.n	800ffa8 <dir_next+0xe2>
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e04f      	b.n	8010048 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7ff fb4d 	bl	800f648 <sync_window>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d001      	beq.n	800ffb8 <dir_next+0xf2>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e047      	b.n	8010048 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	3334      	adds	r3, #52	; 0x34
 800ffbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff f977 	bl	800f2b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ffc8:	2300      	movs	r3, #0
 800ffca:	613b      	str	r3, [r7, #16]
 800ffcc:	6979      	ldr	r1, [r7, #20]
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f7ff fc1a 	bl	800f808 <clust2sect>
 800ffd4:	4602      	mov	r2, r0
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	631a      	str	r2, [r3, #48]	; 0x30
 800ffda:	e012      	b.n	8010002 <dir_next+0x13c>
						fs->wflag = 1;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ffe2:	68f8      	ldr	r0, [r7, #12]
 800ffe4:	f7ff fb30 	bl	800f648 <sync_window>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d001      	beq.n	800fff2 <dir_next+0x12c>
 800ffee:	2301      	movs	r3, #1
 800fff0:	e02a      	b.n	8010048 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	3301      	adds	r3, #1
 800fff6:	613b      	str	r3, [r7, #16]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fffc:	1c5a      	adds	r2, r3, #1
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	631a      	str	r2, [r3, #48]	; 0x30
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	895b      	ldrh	r3, [r3, #10]
 8010006:	461a      	mov	r2, r3
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	4293      	cmp	r3, r2
 801000c:	d3e6      	bcc.n	800ffdc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	1ad2      	subs	r2, r2, r3
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010020:	6979      	ldr	r1, [r7, #20]
 8010022:	68f8      	ldr	r0, [r7, #12]
 8010024:	f7ff fbf0 	bl	800f808 <clust2sect>
 8010028:	4602      	mov	r2, r0
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	68ba      	ldr	r2, [r7, #8]
 8010032:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010040:	441a      	add	r2, r3
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010046:	2300      	movs	r3, #0
}
 8010048:	4618      	mov	r0, r3
 801004a:	3718      	adds	r7, #24
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010060:	2100      	movs	r1, #0
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f7ff feb4 	bl	800fdd0 <dir_sdi>
 8010068:	4603      	mov	r3, r0
 801006a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801006c:	7dfb      	ldrb	r3, [r7, #23]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d12b      	bne.n	80100ca <dir_alloc+0x7a>
		n = 0;
 8010072:	2300      	movs	r3, #0
 8010074:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	69db      	ldr	r3, [r3, #28]
 801007a:	4619      	mov	r1, r3
 801007c:	68f8      	ldr	r0, [r7, #12]
 801007e:	f7ff fb27 	bl	800f6d0 <move_window>
 8010082:	4603      	mov	r3, r0
 8010084:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010086:	7dfb      	ldrb	r3, [r7, #23]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d11d      	bne.n	80100c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6a1b      	ldr	r3, [r3, #32]
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	2be5      	cmp	r3, #229	; 0xe5
 8010094:	d004      	beq.n	80100a0 <dir_alloc+0x50>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6a1b      	ldr	r3, [r3, #32]
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d107      	bne.n	80100b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	3301      	adds	r3, #1
 80100a4:	613b      	str	r3, [r7, #16]
 80100a6:	693a      	ldr	r2, [r7, #16]
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d102      	bne.n	80100b4 <dir_alloc+0x64>
 80100ae:	e00c      	b.n	80100ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80100b0:	2300      	movs	r3, #0
 80100b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80100b4:	2101      	movs	r1, #1
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f7ff ff05 	bl	800fec6 <dir_next>
 80100bc:	4603      	mov	r3, r0
 80100be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80100c0:	7dfb      	ldrb	r3, [r7, #23]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d0d7      	beq.n	8010076 <dir_alloc+0x26>
 80100c6:	e000      	b.n	80100ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80100c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
 80100cc:	2b04      	cmp	r3, #4
 80100ce:	d101      	bne.n	80100d4 <dir_alloc+0x84>
 80100d0:	2307      	movs	r3, #7
 80100d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80100d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3718      	adds	r7, #24
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b084      	sub	sp, #16
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	331a      	adds	r3, #26
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7ff f83f 	bl	800f170 <ld_word>
 80100f2:	4603      	mov	r3, r0
 80100f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	2b03      	cmp	r3, #3
 80100fc:	d109      	bne.n	8010112 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	3314      	adds	r3, #20
 8010102:	4618      	mov	r0, r3
 8010104:	f7ff f834 	bl	800f170 <ld_word>
 8010108:	4603      	mov	r3, r0
 801010a:	041b      	lsls	r3, r3, #16
 801010c:	68fa      	ldr	r2, [r7, #12]
 801010e:	4313      	orrs	r3, r2
 8010110:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010112:	68fb      	ldr	r3, [r7, #12]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3710      	adds	r7, #16
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	331a      	adds	r3, #26
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	b292      	uxth	r2, r2
 8010130:	4611      	mov	r1, r2
 8010132:	4618      	mov	r0, r3
 8010134:	f7ff f857 	bl	800f1e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	2b03      	cmp	r3, #3
 801013e:	d109      	bne.n	8010154 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	f103 0214 	add.w	r2, r3, #20
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	0c1b      	lsrs	r3, r3, #16
 801014a:	b29b      	uxth	r3, r3
 801014c:	4619      	mov	r1, r3
 801014e:	4610      	mov	r0, r2
 8010150:	f7ff f849 	bl	800f1e6 <st_word>
	}
}
 8010154:	bf00      	nop
 8010156:	3710      	adds	r7, #16
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801015c:	b590      	push	{r4, r7, lr}
 801015e:	b087      	sub	sp, #28
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	331a      	adds	r3, #26
 801016a:	4618      	mov	r0, r3
 801016c:	f7ff f800 	bl	800f170 <ld_word>
 8010170:	4603      	mov	r3, r0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d001      	beq.n	801017a <cmp_lfn+0x1e>
 8010176:	2300      	movs	r3, #0
 8010178:	e059      	b.n	801022e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010182:	1e5a      	subs	r2, r3, #1
 8010184:	4613      	mov	r3, r2
 8010186:	005b      	lsls	r3, r3, #1
 8010188:	4413      	add	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	4413      	add	r3, r2
 801018e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010190:	2301      	movs	r3, #1
 8010192:	81fb      	strh	r3, [r7, #14]
 8010194:	2300      	movs	r3, #0
 8010196:	613b      	str	r3, [r7, #16]
 8010198:	e033      	b.n	8010202 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801019a:	4a27      	ldr	r2, [pc, #156]	; (8010238 <cmp_lfn+0xdc>)
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	4413      	add	r3, r2
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	461a      	mov	r2, r3
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	4413      	add	r3, r2
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fe ffe1 	bl	800f170 <ld_word>
 80101ae:	4603      	mov	r3, r0
 80101b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80101b2:	89fb      	ldrh	r3, [r7, #14]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d01a      	beq.n	80101ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	2bfe      	cmp	r3, #254	; 0xfe
 80101bc:	d812      	bhi.n	80101e4 <cmp_lfn+0x88>
 80101be:	89bb      	ldrh	r3, [r7, #12]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f002 fb4f 	bl	8012864 <ff_wtoupper>
 80101c6:	4603      	mov	r3, r0
 80101c8:	461c      	mov	r4, r3
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	1c5a      	adds	r2, r3, #1
 80101ce:	617a      	str	r2, [r7, #20]
 80101d0:	005b      	lsls	r3, r3, #1
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	4413      	add	r3, r2
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	4618      	mov	r0, r3
 80101da:	f002 fb43 	bl	8012864 <ff_wtoupper>
 80101de:	4603      	mov	r3, r0
 80101e0:	429c      	cmp	r4, r3
 80101e2:	d001      	beq.n	80101e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80101e4:	2300      	movs	r3, #0
 80101e6:	e022      	b.n	801022e <cmp_lfn+0xd2>
			}
			wc = uc;
 80101e8:	89bb      	ldrh	r3, [r7, #12]
 80101ea:	81fb      	strh	r3, [r7, #14]
 80101ec:	e006      	b.n	80101fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80101ee:	89bb      	ldrh	r3, [r7, #12]
 80101f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d001      	beq.n	80101fc <cmp_lfn+0xa0>
 80101f8:	2300      	movs	r3, #0
 80101fa:	e018      	b.n	801022e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	3301      	adds	r3, #1
 8010200:	613b      	str	r3, [r7, #16]
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	2b0c      	cmp	r3, #12
 8010206:	d9c8      	bls.n	801019a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010210:	2b00      	cmp	r3, #0
 8010212:	d00b      	beq.n	801022c <cmp_lfn+0xd0>
 8010214:	89fb      	ldrh	r3, [r7, #14]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d008      	beq.n	801022c <cmp_lfn+0xd0>
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	005b      	lsls	r3, r3, #1
 801021e:	687a      	ldr	r2, [r7, #4]
 8010220:	4413      	add	r3, r2
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d001      	beq.n	801022c <cmp_lfn+0xd0>
 8010228:	2300      	movs	r3, #0
 801022a:	e000      	b.n	801022e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801022c:	2301      	movs	r3, #1
}
 801022e:	4618      	mov	r0, r3
 8010230:	371c      	adds	r7, #28
 8010232:	46bd      	mov	sp, r7
 8010234:	bd90      	pop	{r4, r7, pc}
 8010236:	bf00      	nop
 8010238:	08018fbc 	.word	0x08018fbc

0801023c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b088      	sub	sp, #32
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	4611      	mov	r1, r2
 8010248:	461a      	mov	r2, r3
 801024a:	460b      	mov	r3, r1
 801024c:	71fb      	strb	r3, [r7, #7]
 801024e:	4613      	mov	r3, r2
 8010250:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	330d      	adds	r3, #13
 8010256:	79ba      	ldrb	r2, [r7, #6]
 8010258:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	330b      	adds	r3, #11
 801025e:	220f      	movs	r2, #15
 8010260:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	330c      	adds	r3, #12
 8010266:	2200      	movs	r2, #0
 8010268:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	331a      	adds	r3, #26
 801026e:	2100      	movs	r1, #0
 8010270:	4618      	mov	r0, r3
 8010272:	f7fe ffb8 	bl	800f1e6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010276:	79fb      	ldrb	r3, [r7, #7]
 8010278:	1e5a      	subs	r2, r3, #1
 801027a:	4613      	mov	r3, r2
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	4413      	add	r3, r2
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	4413      	add	r3, r2
 8010284:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	82fb      	strh	r3, [r7, #22]
 801028a:	2300      	movs	r3, #0
 801028c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801028e:	8afb      	ldrh	r3, [r7, #22]
 8010290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010294:	4293      	cmp	r3, r2
 8010296:	d007      	beq.n	80102a8 <put_lfn+0x6c>
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	1c5a      	adds	r2, r3, #1
 801029c:	61fa      	str	r2, [r7, #28]
 801029e:	005b      	lsls	r3, r3, #1
 80102a0:	68fa      	ldr	r2, [r7, #12]
 80102a2:	4413      	add	r3, r2
 80102a4:	881b      	ldrh	r3, [r3, #0]
 80102a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80102a8:	4a17      	ldr	r2, [pc, #92]	; (8010308 <put_lfn+0xcc>)
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	4413      	add	r3, r2
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	461a      	mov	r2, r3
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	4413      	add	r3, r2
 80102b6:	8afa      	ldrh	r2, [r7, #22]
 80102b8:	4611      	mov	r1, r2
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7fe ff93 	bl	800f1e6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80102c0:	8afb      	ldrh	r3, [r7, #22]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d102      	bne.n	80102cc <put_lfn+0x90>
 80102c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	3301      	adds	r3, #1
 80102d0:	61bb      	str	r3, [r7, #24]
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	2b0c      	cmp	r3, #12
 80102d6:	d9da      	bls.n	801028e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80102d8:	8afb      	ldrh	r3, [r7, #22]
 80102da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102de:	4293      	cmp	r3, r2
 80102e0:	d006      	beq.n	80102f0 <put_lfn+0xb4>
 80102e2:	69fb      	ldr	r3, [r7, #28]
 80102e4:	005b      	lsls	r3, r3, #1
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	4413      	add	r3, r2
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d103      	bne.n	80102f8 <put_lfn+0xbc>
 80102f0:	79fb      	ldrb	r3, [r7, #7]
 80102f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	79fa      	ldrb	r2, [r7, #7]
 80102fc:	701a      	strb	r2, [r3, #0]
}
 80102fe:	bf00      	nop
 8010300:	3720      	adds	r7, #32
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	08018fbc 	.word	0x08018fbc

0801030c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b08c      	sub	sp, #48	; 0x30
 8010310:	af00      	add	r7, sp, #0
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	60b9      	str	r1, [r7, #8]
 8010316:	607a      	str	r2, [r7, #4]
 8010318:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801031a:	220b      	movs	r2, #11
 801031c:	68b9      	ldr	r1, [r7, #8]
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f7fe ffa8 	bl	800f274 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	2b05      	cmp	r3, #5
 8010328:	d92b      	bls.n	8010382 <gen_numname+0x76>
		sr = seq;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801032e:	e022      	b.n	8010376 <gen_numname+0x6a>
			wc = *lfn++;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	1c9a      	adds	r2, r3, #2
 8010334:	607a      	str	r2, [r7, #4]
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801033a:	2300      	movs	r3, #0
 801033c:	62bb      	str	r3, [r7, #40]	; 0x28
 801033e:	e017      	b.n	8010370 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	005a      	lsls	r2, r3, #1
 8010344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010346:	f003 0301 	and.w	r3, r3, #1
 801034a:	4413      	add	r3, r2
 801034c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801034e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010350:	085b      	lsrs	r3, r3, #1
 8010352:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801035a:	2b00      	cmp	r3, #0
 801035c:	d005      	beq.n	801036a <gen_numname+0x5e>
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8010364:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8010368:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036c:	3301      	adds	r3, #1
 801036e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010372:	2b0f      	cmp	r3, #15
 8010374:	d9e4      	bls.n	8010340 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	881b      	ldrh	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1d8      	bne.n	8010330 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8010382:	2307      	movs	r3, #7
 8010384:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	b2db      	uxtb	r3, r3
 801038a:	f003 030f 	and.w	r3, r3, #15
 801038e:	b2db      	uxtb	r3, r3
 8010390:	3330      	adds	r3, #48	; 0x30
 8010392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8010396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801039a:	2b39      	cmp	r3, #57	; 0x39
 801039c:	d904      	bls.n	80103a8 <gen_numname+0x9c>
 801039e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103a2:	3307      	adds	r3, #7
 80103a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80103a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103aa:	1e5a      	subs	r2, r3, #1
 80103ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80103ae:	3330      	adds	r3, #48	; 0x30
 80103b0:	443b      	add	r3, r7
 80103b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80103b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	091b      	lsrs	r3, r3, #4
 80103be:	603b      	str	r3, [r7, #0]
	} while (seq);
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d1df      	bne.n	8010386 <gen_numname+0x7a>
	ns[i] = '~';
 80103c6:	f107 0214 	add.w	r2, r7, #20
 80103ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103cc:	4413      	add	r3, r2
 80103ce:	227e      	movs	r2, #126	; 0x7e
 80103d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80103d2:	2300      	movs	r3, #0
 80103d4:	627b      	str	r3, [r7, #36]	; 0x24
 80103d6:	e002      	b.n	80103de <gen_numname+0xd2>
 80103d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103da:	3301      	adds	r3, #1
 80103dc:	627b      	str	r3, [r7, #36]	; 0x24
 80103de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d205      	bcs.n	80103f2 <gen_numname+0xe6>
 80103e6:	68fa      	ldr	r2, [r7, #12]
 80103e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ea:	4413      	add	r3, r2
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	2b20      	cmp	r3, #32
 80103f0:	d1f2      	bne.n	80103d8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80103f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f4:	2b07      	cmp	r3, #7
 80103f6:	d807      	bhi.n	8010408 <gen_numname+0xfc>
 80103f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103fa:	1c5a      	adds	r2, r3, #1
 80103fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80103fe:	3330      	adds	r3, #48	; 0x30
 8010400:	443b      	add	r3, r7
 8010402:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010406:	e000      	b.n	801040a <gen_numname+0xfe>
 8010408:	2120      	movs	r1, #32
 801040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040c:	1c5a      	adds	r2, r3, #1
 801040e:	627a      	str	r2, [r7, #36]	; 0x24
 8010410:	68fa      	ldr	r2, [r7, #12]
 8010412:	4413      	add	r3, r2
 8010414:	460a      	mov	r2, r1
 8010416:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041a:	2b07      	cmp	r3, #7
 801041c:	d9e9      	bls.n	80103f2 <gen_numname+0xe6>
}
 801041e:	bf00      	nop
 8010420:	bf00      	nop
 8010422:	3730      	adds	r7, #48	; 0x30
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010428:	b480      	push	{r7}
 801042a:	b085      	sub	sp, #20
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010430:	2300      	movs	r3, #0
 8010432:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010434:	230b      	movs	r3, #11
 8010436:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010438:	7bfb      	ldrb	r3, [r7, #15]
 801043a:	b2da      	uxtb	r2, r3
 801043c:	0852      	lsrs	r2, r2, #1
 801043e:	01db      	lsls	r3, r3, #7
 8010440:	4313      	orrs	r3, r2
 8010442:	b2da      	uxtb	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	1c59      	adds	r1, r3, #1
 8010448:	6079      	str	r1, [r7, #4]
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	4413      	add	r3, r2
 801044e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	3b01      	subs	r3, #1
 8010454:	60bb      	str	r3, [r7, #8]
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1ed      	bne.n	8010438 <sum_sfn+0x10>
	return sum;
 801045c:	7bfb      	ldrb	r3, [r7, #15]
}
 801045e:	4618      	mov	r0, r3
 8010460:	3714      	adds	r7, #20
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr

0801046a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801046a:	b580      	push	{r7, lr}
 801046c:	b086      	sub	sp, #24
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010478:	2100      	movs	r1, #0
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7ff fca8 	bl	800fdd0 <dir_sdi>
 8010480:	4603      	mov	r3, r0
 8010482:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010484:	7dfb      	ldrb	r3, [r7, #23]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d001      	beq.n	801048e <dir_find+0x24>
 801048a:	7dfb      	ldrb	r3, [r7, #23]
 801048c:	e0a9      	b.n	80105e2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801048e:	23ff      	movs	r3, #255	; 0xff
 8010490:	753b      	strb	r3, [r7, #20]
 8010492:	7d3b      	ldrb	r3, [r7, #20]
 8010494:	757b      	strb	r3, [r7, #21]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f04f 32ff 	mov.w	r2, #4294967295
 801049c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	69db      	ldr	r3, [r3, #28]
 80104a2:	4619      	mov	r1, r3
 80104a4:	6938      	ldr	r0, [r7, #16]
 80104a6:	f7ff f913 	bl	800f6d0 <move_window>
 80104aa:	4603      	mov	r3, r0
 80104ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80104ae:	7dfb      	ldrb	r3, [r7, #23]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f040 8090 	bne.w	80105d6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6a1b      	ldr	r3, [r3, #32]
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80104be:	7dbb      	ldrb	r3, [r7, #22]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d102      	bne.n	80104ca <dir_find+0x60>
 80104c4:	2304      	movs	r3, #4
 80104c6:	75fb      	strb	r3, [r7, #23]
 80104c8:	e08a      	b.n	80105e0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6a1b      	ldr	r3, [r3, #32]
 80104ce:	330b      	adds	r3, #11
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104d6:	73fb      	strb	r3, [r7, #15]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	7bfa      	ldrb	r2, [r7, #15]
 80104dc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80104de:	7dbb      	ldrb	r3, [r7, #22]
 80104e0:	2be5      	cmp	r3, #229	; 0xe5
 80104e2:	d007      	beq.n	80104f4 <dir_find+0x8a>
 80104e4:	7bfb      	ldrb	r3, [r7, #15]
 80104e6:	f003 0308 	and.w	r3, r3, #8
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d009      	beq.n	8010502 <dir_find+0x98>
 80104ee:	7bfb      	ldrb	r3, [r7, #15]
 80104f0:	2b0f      	cmp	r3, #15
 80104f2:	d006      	beq.n	8010502 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80104f4:	23ff      	movs	r3, #255	; 0xff
 80104f6:	757b      	strb	r3, [r7, #21]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f04f 32ff 	mov.w	r2, #4294967295
 80104fe:	631a      	str	r2, [r3, #48]	; 0x30
 8010500:	e05e      	b.n	80105c0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010502:	7bfb      	ldrb	r3, [r7, #15]
 8010504:	2b0f      	cmp	r3, #15
 8010506:	d136      	bne.n	8010576 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801050e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010512:	2b00      	cmp	r3, #0
 8010514:	d154      	bne.n	80105c0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010516:	7dbb      	ldrb	r3, [r7, #22]
 8010518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00d      	beq.n	801053c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6a1b      	ldr	r3, [r3, #32]
 8010524:	7b5b      	ldrb	r3, [r3, #13]
 8010526:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010528:	7dbb      	ldrb	r3, [r7, #22]
 801052a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801052e:	75bb      	strb	r3, [r7, #22]
 8010530:	7dbb      	ldrb	r3, [r7, #22]
 8010532:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	695a      	ldr	r2, [r3, #20]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801053c:	7dba      	ldrb	r2, [r7, #22]
 801053e:	7d7b      	ldrb	r3, [r7, #21]
 8010540:	429a      	cmp	r2, r3
 8010542:	d115      	bne.n	8010570 <dir_find+0x106>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6a1b      	ldr	r3, [r3, #32]
 8010548:	330d      	adds	r3, #13
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	7d3a      	ldrb	r2, [r7, #20]
 801054e:	429a      	cmp	r2, r3
 8010550:	d10e      	bne.n	8010570 <dir_find+0x106>
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	68da      	ldr	r2, [r3, #12]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6a1b      	ldr	r3, [r3, #32]
 801055a:	4619      	mov	r1, r3
 801055c:	4610      	mov	r0, r2
 801055e:	f7ff fdfd 	bl	801015c <cmp_lfn>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d003      	beq.n	8010570 <dir_find+0x106>
 8010568:	7d7b      	ldrb	r3, [r7, #21]
 801056a:	3b01      	subs	r3, #1
 801056c:	b2db      	uxtb	r3, r3
 801056e:	e000      	b.n	8010572 <dir_find+0x108>
 8010570:	23ff      	movs	r3, #255	; 0xff
 8010572:	757b      	strb	r3, [r7, #21]
 8010574:	e024      	b.n	80105c0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010576:	7d7b      	ldrb	r3, [r7, #21]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d109      	bne.n	8010590 <dir_find+0x126>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6a1b      	ldr	r3, [r3, #32]
 8010580:	4618      	mov	r0, r3
 8010582:	f7ff ff51 	bl	8010428 <sum_sfn>
 8010586:	4603      	mov	r3, r0
 8010588:	461a      	mov	r2, r3
 801058a:	7d3b      	ldrb	r3, [r7, #20]
 801058c:	4293      	cmp	r3, r2
 801058e:	d024      	beq.n	80105da <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010596:	f003 0301 	and.w	r3, r3, #1
 801059a:	2b00      	cmp	r3, #0
 801059c:	d10a      	bne.n	80105b4 <dir_find+0x14a>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6a18      	ldr	r0, [r3, #32]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	3324      	adds	r3, #36	; 0x24
 80105a6:	220b      	movs	r2, #11
 80105a8:	4619      	mov	r1, r3
 80105aa:	f7fe fe9f 	bl	800f2ec <mem_cmp>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d014      	beq.n	80105de <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80105b4:	23ff      	movs	r3, #255	; 0xff
 80105b6:	757b      	strb	r3, [r7, #21]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f04f 32ff 	mov.w	r2, #4294967295
 80105be:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80105c0:	2100      	movs	r1, #0
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7ff fc7f 	bl	800fec6 <dir_next>
 80105c8:	4603      	mov	r3, r0
 80105ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80105cc:	7dfb      	ldrb	r3, [r7, #23]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f43f af65 	beq.w	801049e <dir_find+0x34>
 80105d4:	e004      	b.n	80105e0 <dir_find+0x176>
		if (res != FR_OK) break;
 80105d6:	bf00      	nop
 80105d8:	e002      	b.n	80105e0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80105da:	bf00      	nop
 80105dc:	e000      	b.n	80105e0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80105de:	bf00      	nop

	return res;
 80105e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3718      	adds	r7, #24
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08c      	sub	sp, #48	; 0x30
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010600:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010604:	2b00      	cmp	r3, #0
 8010606:	d001      	beq.n	801060c <dir_register+0x20>
 8010608:	2306      	movs	r3, #6
 801060a:	e0e0      	b.n	80107ce <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801060c:	2300      	movs	r3, #0
 801060e:	627b      	str	r3, [r7, #36]	; 0x24
 8010610:	e002      	b.n	8010618 <dir_register+0x2c>
 8010612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010614:	3301      	adds	r3, #1
 8010616:	627b      	str	r3, [r7, #36]	; 0x24
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	68da      	ldr	r2, [r3, #12]
 801061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061e:	005b      	lsls	r3, r3, #1
 8010620:	4413      	add	r3, r2
 8010622:	881b      	ldrh	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d1f4      	bne.n	8010612 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801062e:	f107 030c 	add.w	r3, r7, #12
 8010632:	220c      	movs	r2, #12
 8010634:	4618      	mov	r0, r3
 8010636:	f7fe fe1d 	bl	800f274 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801063a:	7dfb      	ldrb	r3, [r7, #23]
 801063c:	f003 0301 	and.w	r3, r3, #1
 8010640:	2b00      	cmp	r3, #0
 8010642:	d032      	beq.n	80106aa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2240      	movs	r2, #64	; 0x40
 8010648:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801064c:	2301      	movs	r3, #1
 801064e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010650:	e016      	b.n	8010680 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	68da      	ldr	r2, [r3, #12]
 801065c:	f107 010c 	add.w	r1, r7, #12
 8010660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010662:	f7ff fe53 	bl	801030c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7ff feff 	bl	801046a <dir_find>
 801066c:	4603      	mov	r3, r0
 801066e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8010672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010676:	2b00      	cmp	r3, #0
 8010678:	d106      	bne.n	8010688 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067c:	3301      	adds	r3, #1
 801067e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010682:	2b63      	cmp	r3, #99	; 0x63
 8010684:	d9e5      	bls.n	8010652 <dir_register+0x66>
 8010686:	e000      	b.n	801068a <dir_register+0x9e>
			if (res != FR_OK) break;
 8010688:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801068a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068c:	2b64      	cmp	r3, #100	; 0x64
 801068e:	d101      	bne.n	8010694 <dir_register+0xa8>
 8010690:	2307      	movs	r3, #7
 8010692:	e09c      	b.n	80107ce <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010698:	2b04      	cmp	r3, #4
 801069a:	d002      	beq.n	80106a2 <dir_register+0xb6>
 801069c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106a0:	e095      	b.n	80107ce <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80106a2:	7dfa      	ldrb	r2, [r7, #23]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80106aa:	7dfb      	ldrb	r3, [r7, #23]
 80106ac:	f003 0302 	and.w	r3, r3, #2
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d007      	beq.n	80106c4 <dir_register+0xd8>
 80106b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b6:	330c      	adds	r3, #12
 80106b8:	4a47      	ldr	r2, [pc, #284]	; (80107d8 <dir_register+0x1ec>)
 80106ba:	fba2 2303 	umull	r2, r3, r2, r3
 80106be:	089b      	lsrs	r3, r3, #2
 80106c0:	3301      	adds	r3, #1
 80106c2:	e000      	b.n	80106c6 <dir_register+0xda>
 80106c4:	2301      	movs	r3, #1
 80106c6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80106c8:	6a39      	ldr	r1, [r7, #32]
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7ff fcc0 	bl	8010050 <dir_alloc>
 80106d0:	4603      	mov	r3, r0
 80106d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80106d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d148      	bne.n	8010770 <dir_register+0x184>
 80106de:	6a3b      	ldr	r3, [r7, #32]
 80106e0:	3b01      	subs	r3, #1
 80106e2:	623b      	str	r3, [r7, #32]
 80106e4:	6a3b      	ldr	r3, [r7, #32]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d042      	beq.n	8010770 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	695a      	ldr	r2, [r3, #20]
 80106ee:	6a3b      	ldr	r3, [r7, #32]
 80106f0:	015b      	lsls	r3, r3, #5
 80106f2:	1ad3      	subs	r3, r2, r3
 80106f4:	4619      	mov	r1, r3
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7ff fb6a 	bl	800fdd0 <dir_sdi>
 80106fc:	4603      	mov	r3, r0
 80106fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8010702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010706:	2b00      	cmp	r3, #0
 8010708:	d132      	bne.n	8010770 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	3324      	adds	r3, #36	; 0x24
 801070e:	4618      	mov	r0, r3
 8010710:	f7ff fe8a 	bl	8010428 <sum_sfn>
 8010714:	4603      	mov	r3, r0
 8010716:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	69db      	ldr	r3, [r3, #28]
 801071c:	4619      	mov	r1, r3
 801071e:	69f8      	ldr	r0, [r7, #28]
 8010720:	f7fe ffd6 	bl	800f6d0 <move_window>
 8010724:	4603      	mov	r3, r0
 8010726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801072a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801072e:	2b00      	cmp	r3, #0
 8010730:	d11d      	bne.n	801076e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	68d8      	ldr	r0, [r3, #12]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6a19      	ldr	r1, [r3, #32]
 801073a:	6a3b      	ldr	r3, [r7, #32]
 801073c:	b2da      	uxtb	r2, r3
 801073e:	7efb      	ldrb	r3, [r7, #27]
 8010740:	f7ff fd7c 	bl	801023c <put_lfn>
				fs->wflag = 1;
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	2201      	movs	r2, #1
 8010748:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801074a:	2100      	movs	r1, #0
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff fbba 	bl	800fec6 <dir_next>
 8010752:	4603      	mov	r3, r0
 8010754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8010758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801075c:	2b00      	cmp	r3, #0
 801075e:	d107      	bne.n	8010770 <dir_register+0x184>
 8010760:	6a3b      	ldr	r3, [r7, #32]
 8010762:	3b01      	subs	r3, #1
 8010764:	623b      	str	r3, [r7, #32]
 8010766:	6a3b      	ldr	r3, [r7, #32]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1d5      	bne.n	8010718 <dir_register+0x12c>
 801076c:	e000      	b.n	8010770 <dir_register+0x184>
				if (res != FR_OK) break;
 801076e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010774:	2b00      	cmp	r3, #0
 8010776:	d128      	bne.n	80107ca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	69db      	ldr	r3, [r3, #28]
 801077c:	4619      	mov	r1, r3
 801077e:	69f8      	ldr	r0, [r7, #28]
 8010780:	f7fe ffa6 	bl	800f6d0 <move_window>
 8010784:	4603      	mov	r3, r0
 8010786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801078a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801078e:	2b00      	cmp	r3, #0
 8010790:	d11b      	bne.n	80107ca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6a1b      	ldr	r3, [r3, #32]
 8010796:	2220      	movs	r2, #32
 8010798:	2100      	movs	r1, #0
 801079a:	4618      	mov	r0, r3
 801079c:	f7fe fd8b 	bl	800f2b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6a18      	ldr	r0, [r3, #32]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	3324      	adds	r3, #36	; 0x24
 80107a8:	220b      	movs	r2, #11
 80107aa:	4619      	mov	r1, r3
 80107ac:	f7fe fd62 	bl	800f274 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6a1b      	ldr	r3, [r3, #32]
 80107ba:	330c      	adds	r3, #12
 80107bc:	f002 0218 	and.w	r2, r2, #24
 80107c0:	b2d2      	uxtb	r2, r2
 80107c2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	2201      	movs	r2, #1
 80107c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80107ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3730      	adds	r7, #48	; 0x30
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	4ec4ec4f 	.word	0x4ec4ec4f

080107dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b08a      	sub	sp, #40	; 0x28
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	613b      	str	r3, [r7, #16]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	60fb      	str	r3, [r7, #12]
 80107f4:	2300      	movs	r3, #0
 80107f6:	617b      	str	r3, [r7, #20]
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80107fc:	69bb      	ldr	r3, [r7, #24]
 80107fe:	1c5a      	adds	r2, r3, #1
 8010800:	61ba      	str	r2, [r7, #24]
 8010802:	693a      	ldr	r2, [r7, #16]
 8010804:	4413      	add	r3, r2
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801080a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801080c:	2b1f      	cmp	r3, #31
 801080e:	d940      	bls.n	8010892 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010812:	2b2f      	cmp	r3, #47	; 0x2f
 8010814:	d006      	beq.n	8010824 <create_name+0x48>
 8010816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010818:	2b5c      	cmp	r3, #92	; 0x5c
 801081a:	d110      	bne.n	801083e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801081c:	e002      	b.n	8010824 <create_name+0x48>
 801081e:	69bb      	ldr	r3, [r7, #24]
 8010820:	3301      	adds	r3, #1
 8010822:	61bb      	str	r3, [r7, #24]
 8010824:	693a      	ldr	r2, [r7, #16]
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	4413      	add	r3, r2
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	2b2f      	cmp	r3, #47	; 0x2f
 801082e:	d0f6      	beq.n	801081e <create_name+0x42>
 8010830:	693a      	ldr	r2, [r7, #16]
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	4413      	add	r3, r2
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	2b5c      	cmp	r3, #92	; 0x5c
 801083a:	d0f0      	beq.n	801081e <create_name+0x42>
			break;
 801083c:	e02a      	b.n	8010894 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	2bfe      	cmp	r3, #254	; 0xfe
 8010842:	d901      	bls.n	8010848 <create_name+0x6c>
 8010844:	2306      	movs	r3, #6
 8010846:	e17d      	b.n	8010b44 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801084a:	b2db      	uxtb	r3, r3
 801084c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801084e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010850:	2101      	movs	r1, #1
 8010852:	4618      	mov	r0, r3
 8010854:	f001 ffca 	bl	80127ec <ff_convert>
 8010858:	4603      	mov	r3, r0
 801085a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801085c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801085e:	2b00      	cmp	r3, #0
 8010860:	d101      	bne.n	8010866 <create_name+0x8a>
 8010862:	2306      	movs	r3, #6
 8010864:	e16e      	b.n	8010b44 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010868:	2b7f      	cmp	r3, #127	; 0x7f
 801086a:	d809      	bhi.n	8010880 <create_name+0xa4>
 801086c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801086e:	4619      	mov	r1, r3
 8010870:	488d      	ldr	r0, [pc, #564]	; (8010aa8 <create_name+0x2cc>)
 8010872:	f7fe fd62 	bl	800f33a <chk_chr>
 8010876:	4603      	mov	r3, r0
 8010878:	2b00      	cmp	r3, #0
 801087a:	d001      	beq.n	8010880 <create_name+0xa4>
 801087c:	2306      	movs	r3, #6
 801087e:	e161      	b.n	8010b44 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	1c5a      	adds	r2, r3, #1
 8010884:	617a      	str	r2, [r7, #20]
 8010886:	005b      	lsls	r3, r3, #1
 8010888:	68fa      	ldr	r2, [r7, #12]
 801088a:	4413      	add	r3, r2
 801088c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801088e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010890:	e7b4      	b.n	80107fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010892:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010894:	693a      	ldr	r2, [r7, #16]
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	441a      	add	r2, r3
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801089e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108a0:	2b1f      	cmp	r3, #31
 80108a2:	d801      	bhi.n	80108a8 <create_name+0xcc>
 80108a4:	2304      	movs	r3, #4
 80108a6:	e000      	b.n	80108aa <create_name+0xce>
 80108a8:	2300      	movs	r3, #0
 80108aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80108ae:	e011      	b.n	80108d4 <create_name+0xf8>
		w = lfn[di - 1];
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80108b6:	3b01      	subs	r3, #1
 80108b8:	005b      	lsls	r3, r3, #1
 80108ba:	68fa      	ldr	r2, [r7, #12]
 80108bc:	4413      	add	r3, r2
 80108be:	881b      	ldrh	r3, [r3, #0]
 80108c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80108c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108c4:	2b20      	cmp	r3, #32
 80108c6:	d002      	beq.n	80108ce <create_name+0xf2>
 80108c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108ca:	2b2e      	cmp	r3, #46	; 0x2e
 80108cc:	d106      	bne.n	80108dc <create_name+0x100>
		di--;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	3b01      	subs	r3, #1
 80108d2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d1ea      	bne.n	80108b0 <create_name+0xd4>
 80108da:	e000      	b.n	80108de <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80108dc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	005b      	lsls	r3, r3, #1
 80108e2:	68fa      	ldr	r2, [r7, #12]
 80108e4:	4413      	add	r3, r2
 80108e6:	2200      	movs	r2, #0
 80108e8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d101      	bne.n	80108f4 <create_name+0x118>
 80108f0:	2306      	movs	r3, #6
 80108f2:	e127      	b.n	8010b44 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3324      	adds	r3, #36	; 0x24
 80108f8:	220b      	movs	r2, #11
 80108fa:	2120      	movs	r1, #32
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fe fcda 	bl	800f2b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010902:	2300      	movs	r3, #0
 8010904:	61bb      	str	r3, [r7, #24]
 8010906:	e002      	b.n	801090e <create_name+0x132>
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	3301      	adds	r3, #1
 801090c:	61bb      	str	r3, [r7, #24]
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	68fa      	ldr	r2, [r7, #12]
 8010914:	4413      	add	r3, r2
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	2b20      	cmp	r3, #32
 801091a:	d0f5      	beq.n	8010908 <create_name+0x12c>
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	005b      	lsls	r3, r3, #1
 8010920:	68fa      	ldr	r2, [r7, #12]
 8010922:	4413      	add	r3, r2
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	2b2e      	cmp	r3, #46	; 0x2e
 8010928:	d0ee      	beq.n	8010908 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d009      	beq.n	8010944 <create_name+0x168>
 8010930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010934:	f043 0303 	orr.w	r3, r3, #3
 8010938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801093c:	e002      	b.n	8010944 <create_name+0x168>
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	3b01      	subs	r3, #1
 8010942:	617b      	str	r3, [r7, #20]
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d009      	beq.n	801095e <create_name+0x182>
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010950:	3b01      	subs	r3, #1
 8010952:	005b      	lsls	r3, r3, #1
 8010954:	68fa      	ldr	r2, [r7, #12]
 8010956:	4413      	add	r3, r2
 8010958:	881b      	ldrh	r3, [r3, #0]
 801095a:	2b2e      	cmp	r3, #46	; 0x2e
 801095c:	d1ef      	bne.n	801093e <create_name+0x162>

	i = b = 0; ni = 8;
 801095e:	2300      	movs	r3, #0
 8010960:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010964:	2300      	movs	r3, #0
 8010966:	623b      	str	r3, [r7, #32]
 8010968:	2308      	movs	r3, #8
 801096a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801096c:	69bb      	ldr	r3, [r7, #24]
 801096e:	1c5a      	adds	r2, r3, #1
 8010970:	61ba      	str	r2, [r7, #24]
 8010972:	005b      	lsls	r3, r3, #1
 8010974:	68fa      	ldr	r2, [r7, #12]
 8010976:	4413      	add	r3, r2
 8010978:	881b      	ldrh	r3, [r3, #0]
 801097a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801097c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801097e:	2b00      	cmp	r3, #0
 8010980:	f000 8090 	beq.w	8010aa4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010986:	2b20      	cmp	r3, #32
 8010988:	d006      	beq.n	8010998 <create_name+0x1bc>
 801098a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801098c:	2b2e      	cmp	r3, #46	; 0x2e
 801098e:	d10a      	bne.n	80109a6 <create_name+0x1ca>
 8010990:	69ba      	ldr	r2, [r7, #24]
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	429a      	cmp	r2, r3
 8010996:	d006      	beq.n	80109a6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801099c:	f043 0303 	orr.w	r3, r3, #3
 80109a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109a4:	e07d      	b.n	8010aa2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80109a6:	6a3a      	ldr	r2, [r7, #32]
 80109a8:	69fb      	ldr	r3, [r7, #28]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d203      	bcs.n	80109b6 <create_name+0x1da>
 80109ae:	69ba      	ldr	r2, [r7, #24]
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d123      	bne.n	80109fe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	2b0b      	cmp	r3, #11
 80109ba:	d106      	bne.n	80109ca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80109bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109c0:	f043 0303 	orr.w	r3, r3, #3
 80109c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109c8:	e075      	b.n	8010ab6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80109ca:	69ba      	ldr	r2, [r7, #24]
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d005      	beq.n	80109de <create_name+0x202>
 80109d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109d6:	f043 0303 	orr.w	r3, r3, #3
 80109da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80109de:	69ba      	ldr	r2, [r7, #24]
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d866      	bhi.n	8010ab4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	61bb      	str	r3, [r7, #24]
 80109ea:	2308      	movs	r3, #8
 80109ec:	623b      	str	r3, [r7, #32]
 80109ee:	230b      	movs	r3, #11
 80109f0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80109f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80109fc:	e051      	b.n	8010aa2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80109fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a00:	2b7f      	cmp	r3, #127	; 0x7f
 8010a02:	d914      	bls.n	8010a2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a06:	2100      	movs	r1, #0
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f001 feef 	bl	80127ec <ff_convert>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d004      	beq.n	8010a22 <create_name+0x246>
 8010a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a1a:	3b80      	subs	r3, #128	; 0x80
 8010a1c:	4a23      	ldr	r2, [pc, #140]	; (8010aac <create_name+0x2d0>)
 8010a1e:	5cd3      	ldrb	r3, [r2, r3]
 8010a20:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a26:	f043 0302 	orr.w	r3, r3, #2
 8010a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d007      	beq.n	8010a44 <create_name+0x268>
 8010a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a36:	4619      	mov	r1, r3
 8010a38:	481d      	ldr	r0, [pc, #116]	; (8010ab0 <create_name+0x2d4>)
 8010a3a:	f7fe fc7e 	bl	800f33a <chk_chr>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d008      	beq.n	8010a56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010a44:	235f      	movs	r3, #95	; 0x5f
 8010a46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a4c:	f043 0303 	orr.w	r3, r3, #3
 8010a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010a54:	e01b      	b.n	8010a8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a58:	2b40      	cmp	r3, #64	; 0x40
 8010a5a:	d909      	bls.n	8010a70 <create_name+0x294>
 8010a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a5e:	2b5a      	cmp	r3, #90	; 0x5a
 8010a60:	d806      	bhi.n	8010a70 <create_name+0x294>
					b |= 2;
 8010a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010a66:	f043 0302 	orr.w	r3, r3, #2
 8010a6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010a6e:	e00e      	b.n	8010a8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010a70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a72:	2b60      	cmp	r3, #96	; 0x60
 8010a74:	d90b      	bls.n	8010a8e <create_name+0x2b2>
 8010a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a78:	2b7a      	cmp	r3, #122	; 0x7a
 8010a7a:	d808      	bhi.n	8010a8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010a80:	f043 0301 	orr.w	r3, r3, #1
 8010a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a8a:	3b20      	subs	r3, #32
 8010a8c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010a8e:	6a3b      	ldr	r3, [r7, #32]
 8010a90:	1c5a      	adds	r2, r3, #1
 8010a92:	623a      	str	r2, [r7, #32]
 8010a94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010a96:	b2d1      	uxtb	r1, r2
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	460a      	mov	r2, r1
 8010a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010aa2:	e763      	b.n	801096c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8010aa4:	bf00      	nop
 8010aa6:	e006      	b.n	8010ab6 <create_name+0x2da>
 8010aa8:	08018ca0 	.word	0x08018ca0
 8010aac:	08018f3c 	.word	0x08018f3c
 8010ab0:	08018cac 	.word	0x08018cac
			if (si > di) break;			/* No extension */
 8010ab4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010abc:	2be5      	cmp	r3, #229	; 0xe5
 8010abe:	d103      	bne.n	8010ac8 <create_name+0x2ec>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2205      	movs	r2, #5
 8010ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	2b08      	cmp	r3, #8
 8010acc:	d104      	bne.n	8010ad8 <create_name+0x2fc>
 8010ace:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010adc:	f003 030c 	and.w	r3, r3, #12
 8010ae0:	2b0c      	cmp	r3, #12
 8010ae2:	d005      	beq.n	8010af0 <create_name+0x314>
 8010ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010ae8:	f003 0303 	and.w	r3, r3, #3
 8010aec:	2b03      	cmp	r3, #3
 8010aee:	d105      	bne.n	8010afc <create_name+0x320>
 8010af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010af4:	f043 0302 	orr.w	r3, r3, #2
 8010af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b00:	f003 0302 	and.w	r3, r3, #2
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d117      	bne.n	8010b38 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010b0c:	f003 0303 	and.w	r3, r3, #3
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d105      	bne.n	8010b20 <create_name+0x344>
 8010b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b18:	f043 0310 	orr.w	r3, r3, #16
 8010b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010b20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010b24:	f003 030c 	and.w	r3, r3, #12
 8010b28:	2b04      	cmp	r3, #4
 8010b2a:	d105      	bne.n	8010b38 <create_name+0x35c>
 8010b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b30:	f043 0308 	orr.w	r3, r3, #8
 8010b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010b3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8010b42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3728      	adds	r7, #40	; 0x28
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010b60:	e002      	b.n	8010b68 <follow_path+0x1c>
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	3301      	adds	r3, #1
 8010b66:	603b      	str	r3, [r7, #0]
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	2b2f      	cmp	r3, #47	; 0x2f
 8010b6e:	d0f8      	beq.n	8010b62 <follow_path+0x16>
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	2b5c      	cmp	r3, #92	; 0x5c
 8010b76:	d0f4      	beq.n	8010b62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	2b1f      	cmp	r3, #31
 8010b84:	d80a      	bhi.n	8010b9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2280      	movs	r2, #128	; 0x80
 8010b8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010b8e:	2100      	movs	r1, #0
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f7ff f91d 	bl	800fdd0 <dir_sdi>
 8010b96:	4603      	mov	r3, r0
 8010b98:	75fb      	strb	r3, [r7, #23]
 8010b9a:	e043      	b.n	8010c24 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010b9c:	463b      	mov	r3, r7
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7ff fe1b 	bl	80107dc <create_name>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010baa:	7dfb      	ldrb	r3, [r7, #23]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d134      	bne.n	8010c1a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f7ff fc5a 	bl	801046a <dir_find>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010bc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010bc2:	7dfb      	ldrb	r3, [r7, #23]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d00a      	beq.n	8010bde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010bc8:	7dfb      	ldrb	r3, [r7, #23]
 8010bca:	2b04      	cmp	r3, #4
 8010bcc:	d127      	bne.n	8010c1e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010bce:	7afb      	ldrb	r3, [r7, #11]
 8010bd0:	f003 0304 	and.w	r3, r3, #4
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d122      	bne.n	8010c1e <follow_path+0xd2>
 8010bd8:	2305      	movs	r3, #5
 8010bda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010bdc:	e01f      	b.n	8010c1e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010bde:	7afb      	ldrb	r3, [r7, #11]
 8010be0:	f003 0304 	and.w	r3, r3, #4
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d11c      	bne.n	8010c22 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	799b      	ldrb	r3, [r3, #6]
 8010bec:	f003 0310 	and.w	r3, r3, #16
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d102      	bne.n	8010bfa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010bf4:	2305      	movs	r3, #5
 8010bf6:	75fb      	strb	r3, [r7, #23]
 8010bf8:	e014      	b.n	8010c24 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	695b      	ldr	r3, [r3, #20]
 8010c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c08:	4413      	add	r3, r2
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f7ff fa66 	bl	80100de <ld_clust>
 8010c12:	4602      	mov	r2, r0
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c18:	e7c0      	b.n	8010b9c <follow_path+0x50>
			if (res != FR_OK) break;
 8010c1a:	bf00      	nop
 8010c1c:	e002      	b.n	8010c24 <follow_path+0xd8>
				break;
 8010c1e:	bf00      	nop
 8010c20:	e000      	b.n	8010c24 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010c22:	bf00      	nop
			}
		}
	}

	return res;
 8010c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3718      	adds	r7, #24
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010c2e:	b480      	push	{r7}
 8010c30:	b087      	sub	sp, #28
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010c36:	f04f 33ff 	mov.w	r3, #4294967295
 8010c3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d031      	beq.n	8010ca8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	617b      	str	r3, [r7, #20]
 8010c4a:	e002      	b.n	8010c52 <get_ldnumber+0x24>
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	3301      	adds	r3, #1
 8010c50:	617b      	str	r3, [r7, #20]
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	2b1f      	cmp	r3, #31
 8010c58:	d903      	bls.n	8010c62 <get_ldnumber+0x34>
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	2b3a      	cmp	r3, #58	; 0x3a
 8010c60:	d1f4      	bne.n	8010c4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	2b3a      	cmp	r3, #58	; 0x3a
 8010c68:	d11c      	bne.n	8010ca4 <get_ldnumber+0x76>
			tp = *path;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	1c5a      	adds	r2, r3, #1
 8010c74:	60fa      	str	r2, [r7, #12]
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	3b30      	subs	r3, #48	; 0x30
 8010c7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	2b09      	cmp	r3, #9
 8010c80:	d80e      	bhi.n	8010ca0 <get_ldnumber+0x72>
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d10a      	bne.n	8010ca0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d107      	bne.n	8010ca0 <get_ldnumber+0x72>
					vol = (int)i;
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	3301      	adds	r3, #1
 8010c98:	617b      	str	r3, [r7, #20]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	697a      	ldr	r2, [r7, #20]
 8010c9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	e002      	b.n	8010caa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010ca8:	693b      	ldr	r3, [r7, #16]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	371c      	adds	r7, #28
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
	...

08010cb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	70da      	strb	r2, [r3, #3]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f04f 32ff 	mov.w	r2, #4294967295
 8010cce:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010cd0:	6839      	ldr	r1, [r7, #0]
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f7fe fcfc 	bl	800f6d0 <move_window>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <check_fs+0x2a>
 8010cde:	2304      	movs	r3, #4
 8010ce0:	e038      	b.n	8010d54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	3334      	adds	r3, #52	; 0x34
 8010ce6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fe fa40 	bl	800f170 <ld_word>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d001      	beq.n	8010d00 <check_fs+0x48>
 8010cfc:	2303      	movs	r3, #3
 8010cfe:	e029      	b.n	8010d54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010d06:	2be9      	cmp	r3, #233	; 0xe9
 8010d08:	d009      	beq.n	8010d1e <check_fs+0x66>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010d10:	2beb      	cmp	r3, #235	; 0xeb
 8010d12:	d11e      	bne.n	8010d52 <check_fs+0x9a>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010d1a:	2b90      	cmp	r3, #144	; 0x90
 8010d1c:	d119      	bne.n	8010d52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	3334      	adds	r3, #52	; 0x34
 8010d22:	3336      	adds	r3, #54	; 0x36
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fe fa3b 	bl	800f1a0 <ld_dword>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010d30:	4a0a      	ldr	r2, [pc, #40]	; (8010d5c <check_fs+0xa4>)
 8010d32:	4293      	cmp	r3, r2
 8010d34:	d101      	bne.n	8010d3a <check_fs+0x82>
 8010d36:	2300      	movs	r3, #0
 8010d38:	e00c      	b.n	8010d54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	3334      	adds	r3, #52	; 0x34
 8010d3e:	3352      	adds	r3, #82	; 0x52
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7fe fa2d 	bl	800f1a0 <ld_dword>
 8010d46:	4603      	mov	r3, r0
 8010d48:	4a05      	ldr	r2, [pc, #20]	; (8010d60 <check_fs+0xa8>)
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d101      	bne.n	8010d52 <check_fs+0x9a>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	e000      	b.n	8010d54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010d52:	2302      	movs	r3, #2
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3708      	adds	r7, #8
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	00544146 	.word	0x00544146
 8010d60:	33544146 	.word	0x33544146

08010d64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b096      	sub	sp, #88	; 0x58
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	2200      	movs	r2, #0
 8010d76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f7ff ff58 	bl	8010c2e <get_ldnumber>
 8010d7e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	da01      	bge.n	8010d8a <find_volume+0x26>
 8010d86:	230b      	movs	r3, #11
 8010d88:	e22d      	b.n	80111e6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010d8a:	4aa1      	ldr	r2, [pc, #644]	; (8011010 <find_volume+0x2ac>)
 8010d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d101      	bne.n	8010d9e <find_volume+0x3a>
 8010d9a:	230c      	movs	r3, #12
 8010d9c:	e223      	b.n	80111e6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010da2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010da4:	79fb      	ldrb	r3, [r7, #7]
 8010da6:	f023 0301 	bic.w	r3, r3, #1
 8010daa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d01a      	beq.n	8010dea <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db6:	785b      	ldrb	r3, [r3, #1]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7fe f93b 	bl	800f034 <disk_status>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010dc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010dc8:	f003 0301 	and.w	r3, r3, #1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d10c      	bne.n	8010dea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010dd0:	79fb      	ldrb	r3, [r7, #7]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d007      	beq.n	8010de6 <find_volume+0x82>
 8010dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010dda:	f003 0304 	and.w	r3, r3, #4
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d001      	beq.n	8010de6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010de2:	230a      	movs	r3, #10
 8010de4:	e1ff      	b.n	80111e6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8010de6:	2300      	movs	r3, #0
 8010de8:	e1fd      	b.n	80111e6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dec:	2200      	movs	r2, #0
 8010dee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df2:	b2da      	uxtb	r2, r3
 8010df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfa:	785b      	ldrb	r3, [r3, #1]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7fe f933 	bl	800f068 <disk_initialize>
 8010e02:	4603      	mov	r3, r0
 8010e04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010e08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e0c:	f003 0301 	and.w	r3, r3, #1
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d001      	beq.n	8010e18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010e14:	2303      	movs	r3, #3
 8010e16:	e1e6      	b.n	80111e6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010e18:	79fb      	ldrb	r3, [r7, #7]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d007      	beq.n	8010e2e <find_volume+0xca>
 8010e1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e22:	f003 0304 	and.w	r3, r3, #4
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d001      	beq.n	8010e2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010e2a:	230a      	movs	r3, #10
 8010e2c:	e1db      	b.n	80111e6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010e32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010e34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010e36:	f7ff ff3f 	bl	8010cb8 <check_fs>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010e44:	2b02      	cmp	r3, #2
 8010e46:	d149      	bne.n	8010edc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010e48:	2300      	movs	r3, #0
 8010e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8010e4c:	e01e      	b.n	8010e8c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e56:	011b      	lsls	r3, r3, #4
 8010e58:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010e5c:	4413      	add	r3, r2
 8010e5e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e62:	3304      	adds	r3, #4
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d006      	beq.n	8010e78 <find_volume+0x114>
 8010e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6c:	3308      	adds	r3, #8
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fe f996 	bl	800f1a0 <ld_dword>
 8010e74:	4602      	mov	r2, r0
 8010e76:	e000      	b.n	8010e7a <find_volume+0x116>
 8010e78:	2200      	movs	r2, #0
 8010e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e7c:	009b      	lsls	r3, r3, #2
 8010e7e:	3358      	adds	r3, #88	; 0x58
 8010e80:	443b      	add	r3, r7
 8010e82:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e88:	3301      	adds	r3, #1
 8010e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8010e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d9dd      	bls.n	8010e4e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010e92:	2300      	movs	r3, #0
 8010e94:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d002      	beq.n	8010ea2 <find_volume+0x13e>
 8010e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e9e:	3b01      	subs	r3, #1
 8010ea0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	3358      	adds	r3, #88	; 0x58
 8010ea8:	443b      	add	r3, r7
 8010eaa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010eae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d005      	beq.n	8010ec2 <find_volume+0x15e>
 8010eb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010eb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010eba:	f7ff fefd 	bl	8010cb8 <check_fs>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	e000      	b.n	8010ec4 <find_volume+0x160>
 8010ec2:	2303      	movs	r3, #3
 8010ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d905      	bls.n	8010edc <find_volume+0x178>
 8010ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8010ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ed8:	2b03      	cmp	r3, #3
 8010eda:	d9e2      	bls.n	8010ea2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010edc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ee0:	2b04      	cmp	r3, #4
 8010ee2:	d101      	bne.n	8010ee8 <find_volume+0x184>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e17e      	b.n	80111e6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	d901      	bls.n	8010ef4 <find_volume+0x190>
 8010ef0:	230d      	movs	r3, #13
 8010ef2:	e178      	b.n	80111e6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef6:	3334      	adds	r3, #52	; 0x34
 8010ef8:	330b      	adds	r3, #11
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fe f938 	bl	800f170 <ld_word>
 8010f00:	4603      	mov	r3, r0
 8010f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f06:	d001      	beq.n	8010f0c <find_volume+0x1a8>
 8010f08:	230d      	movs	r3, #13
 8010f0a:	e16c      	b.n	80111e6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0e:	3334      	adds	r3, #52	; 0x34
 8010f10:	3316      	adds	r3, #22
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7fe f92c 	bl	800f170 <ld_word>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d106      	bne.n	8010f30 <find_volume+0x1cc>
 8010f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f24:	3334      	adds	r3, #52	; 0x34
 8010f26:	3324      	adds	r3, #36	; 0x24
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fe f939 	bl	800f1a0 <ld_dword>
 8010f2e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f34:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f38:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f42:	789b      	ldrb	r3, [r3, #2]
 8010f44:	2b01      	cmp	r3, #1
 8010f46:	d005      	beq.n	8010f54 <find_volume+0x1f0>
 8010f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4a:	789b      	ldrb	r3, [r3, #2]
 8010f4c:	2b02      	cmp	r3, #2
 8010f4e:	d001      	beq.n	8010f54 <find_volume+0x1f0>
 8010f50:	230d      	movs	r3, #13
 8010f52:	e148      	b.n	80111e6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f56:	789b      	ldrb	r3, [r3, #2]
 8010f58:	461a      	mov	r2, r3
 8010f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f5c:	fb02 f303 	mul.w	r3, r2, r3
 8010f60:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f70:	895b      	ldrh	r3, [r3, #10]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d008      	beq.n	8010f88 <find_volume+0x224>
 8010f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f78:	895b      	ldrh	r3, [r3, #10]
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f7e:	895b      	ldrh	r3, [r3, #10]
 8010f80:	3b01      	subs	r3, #1
 8010f82:	4013      	ands	r3, r2
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d001      	beq.n	8010f8c <find_volume+0x228>
 8010f88:	230d      	movs	r3, #13
 8010f8a:	e12c      	b.n	80111e6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8e:	3334      	adds	r3, #52	; 0x34
 8010f90:	3311      	adds	r3, #17
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fe f8ec 	bl	800f170 <ld_word>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa2:	891b      	ldrh	r3, [r3, #8]
 8010fa4:	f003 030f 	and.w	r3, r3, #15
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d001      	beq.n	8010fb2 <find_volume+0x24e>
 8010fae:	230d      	movs	r3, #13
 8010fb0:	e119      	b.n	80111e6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb4:	3334      	adds	r3, #52	; 0x34
 8010fb6:	3313      	adds	r3, #19
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7fe f8d9 	bl	800f170 <ld_word>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d106      	bne.n	8010fd6 <find_volume+0x272>
 8010fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fca:	3334      	adds	r3, #52	; 0x34
 8010fcc:	3320      	adds	r3, #32
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe f8e6 	bl	800f1a0 <ld_dword>
 8010fd4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd8:	3334      	adds	r3, #52	; 0x34
 8010fda:	330e      	adds	r3, #14
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7fe f8c7 	bl	800f170 <ld_word>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010fe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d101      	bne.n	8010ff0 <find_volume+0x28c>
 8010fec:	230d      	movs	r3, #13
 8010fee:	e0fa      	b.n	80111e6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010ff0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ff4:	4413      	add	r3, r2
 8010ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ff8:	8912      	ldrh	r2, [r2, #8]
 8010ffa:	0912      	lsrs	r2, r2, #4
 8010ffc:	b292      	uxth	r2, r2
 8010ffe:	4413      	add	r3, r2
 8011000:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011006:	429a      	cmp	r2, r3
 8011008:	d204      	bcs.n	8011014 <find_volume+0x2b0>
 801100a:	230d      	movs	r3, #13
 801100c:	e0eb      	b.n	80111e6 <find_volume+0x482>
 801100e:	bf00      	nop
 8011010:	200013fc 	.word	0x200013fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011018:	1ad3      	subs	r3, r2, r3
 801101a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801101c:	8952      	ldrh	r2, [r2, #10]
 801101e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011022:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	2b00      	cmp	r3, #0
 8011028:	d101      	bne.n	801102e <find_volume+0x2ca>
 801102a:	230d      	movs	r3, #13
 801102c:	e0db      	b.n	80111e6 <find_volume+0x482>
		fmt = FS_FAT32;
 801102e:	2303      	movs	r3, #3
 8011030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011036:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801103a:	4293      	cmp	r3, r2
 801103c:	d802      	bhi.n	8011044 <find_volume+0x2e0>
 801103e:	2302      	movs	r3, #2
 8011040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011046:	f640 72f5 	movw	r2, #4085	; 0xff5
 801104a:	4293      	cmp	r3, r2
 801104c:	d802      	bhi.n	8011054 <find_volume+0x2f0>
 801104e:	2301      	movs	r3, #1
 8011050:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	1c9a      	adds	r2, r3, #2
 8011058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801105c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011060:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011062:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011066:	441a      	add	r2, r3
 8011068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801106c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011070:	441a      	add	r2, r3
 8011072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011074:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801107a:	2b03      	cmp	r3, #3
 801107c:	d11e      	bne.n	80110bc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011080:	3334      	adds	r3, #52	; 0x34
 8011082:	332a      	adds	r3, #42	; 0x2a
 8011084:	4618      	mov	r0, r3
 8011086:	f7fe f873 	bl	800f170 <ld_word>
 801108a:	4603      	mov	r3, r0
 801108c:	2b00      	cmp	r3, #0
 801108e:	d001      	beq.n	8011094 <find_volume+0x330>
 8011090:	230d      	movs	r3, #13
 8011092:	e0a8      	b.n	80111e6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011096:	891b      	ldrh	r3, [r3, #8]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d001      	beq.n	80110a0 <find_volume+0x33c>
 801109c:	230d      	movs	r3, #13
 801109e:	e0a2      	b.n	80111e6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80110a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a2:	3334      	adds	r3, #52	; 0x34
 80110a4:	332c      	adds	r3, #44	; 0x2c
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fe f87a 	bl	800f1a0 <ld_dword>
 80110ac:	4602      	mov	r2, r0
 80110ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80110b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b4:	699b      	ldr	r3, [r3, #24]
 80110b6:	009b      	lsls	r3, r3, #2
 80110b8:	647b      	str	r3, [r7, #68]	; 0x44
 80110ba:	e01f      	b.n	80110fc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80110bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110be:	891b      	ldrh	r3, [r3, #8]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d101      	bne.n	80110c8 <find_volume+0x364>
 80110c4:	230d      	movs	r3, #13
 80110c6:	e08e      	b.n	80111e6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80110c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ce:	441a      	add	r2, r3
 80110d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80110d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80110d8:	2b02      	cmp	r3, #2
 80110da:	d103      	bne.n	80110e4 <find_volume+0x380>
 80110dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110de:	699b      	ldr	r3, [r3, #24]
 80110e0:	005b      	lsls	r3, r3, #1
 80110e2:	e00a      	b.n	80110fa <find_volume+0x396>
 80110e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e6:	699a      	ldr	r2, [r3, #24]
 80110e8:	4613      	mov	r3, r2
 80110ea:	005b      	lsls	r3, r3, #1
 80110ec:	4413      	add	r3, r2
 80110ee:	085a      	lsrs	r2, r3, #1
 80110f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110f2:	699b      	ldr	r3, [r3, #24]
 80110f4:	f003 0301 	and.w	r3, r3, #1
 80110f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80110fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80110fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fe:	69da      	ldr	r2, [r3, #28]
 8011100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011102:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011106:	0a5b      	lsrs	r3, r3, #9
 8011108:	429a      	cmp	r2, r3
 801110a:	d201      	bcs.n	8011110 <find_volume+0x3ac>
 801110c:	230d      	movs	r3, #13
 801110e:	e06a      	b.n	80111e6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011112:	f04f 32ff 	mov.w	r2, #4294967295
 8011116:	615a      	str	r2, [r3, #20]
 8011118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111a:	695a      	ldr	r2, [r3, #20]
 801111c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011122:	2280      	movs	r2, #128	; 0x80
 8011124:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011126:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801112a:	2b03      	cmp	r3, #3
 801112c:	d149      	bne.n	80111c2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011130:	3334      	adds	r3, #52	; 0x34
 8011132:	3330      	adds	r3, #48	; 0x30
 8011134:	4618      	mov	r0, r3
 8011136:	f7fe f81b 	bl	800f170 <ld_word>
 801113a:	4603      	mov	r3, r0
 801113c:	2b01      	cmp	r3, #1
 801113e:	d140      	bne.n	80111c2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011142:	3301      	adds	r3, #1
 8011144:	4619      	mov	r1, r3
 8011146:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011148:	f7fe fac2 	bl	800f6d0 <move_window>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d137      	bne.n	80111c2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011154:	2200      	movs	r2, #0
 8011156:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115a:	3334      	adds	r3, #52	; 0x34
 801115c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011160:	4618      	mov	r0, r3
 8011162:	f7fe f805 	bl	800f170 <ld_word>
 8011166:	4603      	mov	r3, r0
 8011168:	461a      	mov	r2, r3
 801116a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801116e:	429a      	cmp	r2, r3
 8011170:	d127      	bne.n	80111c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011174:	3334      	adds	r3, #52	; 0x34
 8011176:	4618      	mov	r0, r3
 8011178:	f7fe f812 	bl	800f1a0 <ld_dword>
 801117c:	4603      	mov	r3, r0
 801117e:	4a1c      	ldr	r2, [pc, #112]	; (80111f0 <find_volume+0x48c>)
 8011180:	4293      	cmp	r3, r2
 8011182:	d11e      	bne.n	80111c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011186:	3334      	adds	r3, #52	; 0x34
 8011188:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe f807 	bl	800f1a0 <ld_dword>
 8011192:	4603      	mov	r3, r0
 8011194:	4a17      	ldr	r2, [pc, #92]	; (80111f4 <find_volume+0x490>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d113      	bne.n	80111c2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801119a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801119c:	3334      	adds	r3, #52	; 0x34
 801119e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fd fffc 	bl	800f1a0 <ld_dword>
 80111a8:	4602      	mov	r2, r0
 80111aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80111ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b0:	3334      	adds	r3, #52	; 0x34
 80111b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fd fff2 	bl	800f1a0 <ld_dword>
 80111bc:	4602      	mov	r2, r0
 80111be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80111c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80111c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80111ca:	4b0b      	ldr	r3, [pc, #44]	; (80111f8 <find_volume+0x494>)
 80111cc:	881b      	ldrh	r3, [r3, #0]
 80111ce:	3301      	adds	r3, #1
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	4b09      	ldr	r3, [pc, #36]	; (80111f8 <find_volume+0x494>)
 80111d4:	801a      	strh	r2, [r3, #0]
 80111d6:	4b08      	ldr	r3, [pc, #32]	; (80111f8 <find_volume+0x494>)
 80111d8:	881a      	ldrh	r2, [r3, #0]
 80111da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80111de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80111e0:	f7fe fa0e 	bl	800f600 <clear_lock>
#endif
	return FR_OK;
 80111e4:	2300      	movs	r3, #0
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3758      	adds	r7, #88	; 0x58
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	41615252 	.word	0x41615252
 80111f4:	61417272 	.word	0x61417272
 80111f8:	20001400 	.word	0x20001400

080111fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011206:	2309      	movs	r3, #9
 8011208:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d01c      	beq.n	801124a <validate+0x4e>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d018      	beq.n	801124a <validate+0x4e>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d013      	beq.n	801124a <validate+0x4e>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	889a      	ldrh	r2, [r3, #4]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	88db      	ldrh	r3, [r3, #6]
 801122c:	429a      	cmp	r2, r3
 801122e:	d10c      	bne.n	801124a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	785b      	ldrb	r3, [r3, #1]
 8011236:	4618      	mov	r0, r3
 8011238:	f7fd fefc 	bl	800f034 <disk_status>
 801123c:	4603      	mov	r3, r0
 801123e:	f003 0301 	and.w	r3, r3, #1
 8011242:	2b00      	cmp	r3, #0
 8011244:	d101      	bne.n	801124a <validate+0x4e>
			res = FR_OK;
 8011246:	2300      	movs	r3, #0
 8011248:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801124a:	7bfb      	ldrb	r3, [r7, #15]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d102      	bne.n	8011256 <validate+0x5a>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	e000      	b.n	8011258 <validate+0x5c>
 8011256:	2300      	movs	r3, #0
 8011258:	683a      	ldr	r2, [r7, #0]
 801125a:	6013      	str	r3, [r2, #0]
	return res;
 801125c:	7bfb      	ldrb	r3, [r7, #15]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
	...

08011268 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b088      	sub	sp, #32
 801126c:	af00      	add	r7, sp, #0
 801126e:	60f8      	str	r0, [r7, #12]
 8011270:	60b9      	str	r1, [r7, #8]
 8011272:	4613      	mov	r3, r2
 8011274:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801127a:	f107 0310 	add.w	r3, r7, #16
 801127e:	4618      	mov	r0, r3
 8011280:	f7ff fcd5 	bl	8010c2e <get_ldnumber>
 8011284:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	2b00      	cmp	r3, #0
 801128a:	da01      	bge.n	8011290 <f_mount+0x28>
 801128c:	230b      	movs	r3, #11
 801128e:	e02b      	b.n	80112e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011290:	4a17      	ldr	r2, [pc, #92]	; (80112f0 <f_mount+0x88>)
 8011292:	69fb      	ldr	r3, [r7, #28]
 8011294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011298:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801129a:	69bb      	ldr	r3, [r7, #24]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d005      	beq.n	80112ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80112a0:	69b8      	ldr	r0, [r7, #24]
 80112a2:	f7fe f9ad 	bl	800f600 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	2200      	movs	r2, #0
 80112aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d002      	beq.n	80112b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2200      	movs	r2, #0
 80112b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80112b8:	68fa      	ldr	r2, [r7, #12]
 80112ba:	490d      	ldr	r1, [pc, #52]	; (80112f0 <f_mount+0x88>)
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d002      	beq.n	80112ce <f_mount+0x66>
 80112c8:	79fb      	ldrb	r3, [r7, #7]
 80112ca:	2b01      	cmp	r3, #1
 80112cc:	d001      	beq.n	80112d2 <f_mount+0x6a>
 80112ce:	2300      	movs	r3, #0
 80112d0:	e00a      	b.n	80112e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80112d2:	f107 010c 	add.w	r1, r7, #12
 80112d6:	f107 0308 	add.w	r3, r7, #8
 80112da:	2200      	movs	r2, #0
 80112dc:	4618      	mov	r0, r3
 80112de:	f7ff fd41 	bl	8010d64 <find_volume>
 80112e2:	4603      	mov	r3, r0
 80112e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80112e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3720      	adds	r7, #32
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	200013fc 	.word	0x200013fc

080112f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b09a      	sub	sp, #104	; 0x68
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	4613      	mov	r3, r2
 8011300:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d101      	bne.n	801130c <f_open+0x18>
 8011308:	2309      	movs	r3, #9
 801130a:	e1bd      	b.n	8011688 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801130c:	79fb      	ldrb	r3, [r7, #7]
 801130e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011312:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011314:	79fa      	ldrb	r2, [r7, #7]
 8011316:	f107 0110 	add.w	r1, r7, #16
 801131a:	f107 0308 	add.w	r3, r7, #8
 801131e:	4618      	mov	r0, r3
 8011320:	f7ff fd20 	bl	8010d64 <find_volume>
 8011324:	4603      	mov	r3, r0
 8011326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801132a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801132e:	2b00      	cmp	r3, #0
 8011330:	f040 81a1 	bne.w	8011676 <f_open+0x382>
		dj.obj.fs = fs;
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8011338:	f44f 7000 	mov.w	r0, #512	; 0x200
 801133c:	f001 fb1c 	bl	8012978 <ff_memalloc>
 8011340:	65b8      	str	r0, [r7, #88]	; 0x58
 8011342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011344:	2b00      	cmp	r3, #0
 8011346:	d101      	bne.n	801134c <f_open+0x58>
 8011348:	2311      	movs	r3, #17
 801134a:	e19d      	b.n	8011688 <f_open+0x394>
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011350:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8011352:	68ba      	ldr	r2, [r7, #8]
 8011354:	f107 0314 	add.w	r3, r7, #20
 8011358:	4611      	mov	r1, r2
 801135a:	4618      	mov	r0, r3
 801135c:	f7ff fbf6 	bl	8010b4c <follow_path>
 8011360:	4603      	mov	r3, r0
 8011362:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011366:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801136a:	2b00      	cmp	r3, #0
 801136c:	d11a      	bne.n	80113a4 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801136e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011372:	b25b      	sxtb	r3, r3
 8011374:	2b00      	cmp	r3, #0
 8011376:	da03      	bge.n	8011380 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8011378:	2306      	movs	r3, #6
 801137a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801137e:	e011      	b.n	80113a4 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011380:	79fb      	ldrb	r3, [r7, #7]
 8011382:	f023 0301 	bic.w	r3, r3, #1
 8011386:	2b00      	cmp	r3, #0
 8011388:	bf14      	ite	ne
 801138a:	2301      	movne	r3, #1
 801138c:	2300      	moveq	r3, #0
 801138e:	b2db      	uxtb	r3, r3
 8011390:	461a      	mov	r2, r3
 8011392:	f107 0314 	add.w	r3, r7, #20
 8011396:	4611      	mov	r1, r2
 8011398:	4618      	mov	r0, r3
 801139a:	f7fd ffe9 	bl	800f370 <chk_lock>
 801139e:	4603      	mov	r3, r0
 80113a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80113a4:	79fb      	ldrb	r3, [r7, #7]
 80113a6:	f003 031c 	and.w	r3, r3, #28
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d07f      	beq.n	80114ae <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 80113ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d017      	beq.n	80113e6 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80113b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80113ba:	2b04      	cmp	r3, #4
 80113bc:	d10e      	bne.n	80113dc <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80113be:	f7fe f833 	bl	800f428 <enq_lock>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d006      	beq.n	80113d6 <f_open+0xe2>
 80113c8:	f107 0314 	add.w	r3, r7, #20
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7ff f90d 	bl	80105ec <dir_register>
 80113d2:	4603      	mov	r3, r0
 80113d4:	e000      	b.n	80113d8 <f_open+0xe4>
 80113d6:	2312      	movs	r3, #18
 80113d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80113dc:	79fb      	ldrb	r3, [r7, #7]
 80113de:	f043 0308 	orr.w	r3, r3, #8
 80113e2:	71fb      	strb	r3, [r7, #7]
 80113e4:	e010      	b.n	8011408 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80113e6:	7ebb      	ldrb	r3, [r7, #26]
 80113e8:	f003 0311 	and.w	r3, r3, #17
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d003      	beq.n	80113f8 <f_open+0x104>
					res = FR_DENIED;
 80113f0:	2307      	movs	r3, #7
 80113f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80113f6:	e007      	b.n	8011408 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80113f8:	79fb      	ldrb	r3, [r7, #7]
 80113fa:	f003 0304 	and.w	r3, r3, #4
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d002      	beq.n	8011408 <f_open+0x114>
 8011402:	2308      	movs	r3, #8
 8011404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011408:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801140c:	2b00      	cmp	r3, #0
 801140e:	d168      	bne.n	80114e2 <f_open+0x1ee>
 8011410:	79fb      	ldrb	r3, [r7, #7]
 8011412:	f003 0308 	and.w	r3, r3, #8
 8011416:	2b00      	cmp	r3, #0
 8011418:	d063      	beq.n	80114e2 <f_open+0x1ee>
				dw = GET_FATTIME();
 801141a:	f7fb ff13 	bl	800d244 <get_fattime>
 801141e:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011422:	330e      	adds	r3, #14
 8011424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011426:	4618      	mov	r0, r3
 8011428:	f7fd fef8 	bl	800f21c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142e:	3316      	adds	r3, #22
 8011430:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011432:	4618      	mov	r0, r3
 8011434:	f7fd fef2 	bl	800f21c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143a:	330b      	adds	r3, #11
 801143c:	2220      	movs	r2, #32
 801143e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011444:	4611      	mov	r1, r2
 8011446:	4618      	mov	r0, r3
 8011448:	f7fe fe49 	bl	80100de <ld_clust>
 801144c:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011452:	2200      	movs	r2, #0
 8011454:	4618      	mov	r0, r3
 8011456:	f7fe fe61 	bl	801011c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801145c:	331c      	adds	r3, #28
 801145e:	2100      	movs	r1, #0
 8011460:	4618      	mov	r0, r3
 8011462:	f7fd fedb 	bl	800f21c <st_dword>
					fs->wflag = 1;
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	2201      	movs	r2, #1
 801146a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801146c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801146e:	2b00      	cmp	r3, #0
 8011470:	d037      	beq.n	80114e2 <f_open+0x1ee>
						dw = fs->winsect;
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011476:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8011478:	f107 0314 	add.w	r3, r7, #20
 801147c:	2200      	movs	r2, #0
 801147e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011480:	4618      	mov	r0, r3
 8011482:	f7fe fb74 	bl	800fb6e <remove_chain>
 8011486:	4603      	mov	r3, r0
 8011488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801148c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011490:	2b00      	cmp	r3, #0
 8011492:	d126      	bne.n	80114e2 <f_open+0x1ee>
							res = move_window(fs, dw);
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011498:	4618      	mov	r0, r3
 801149a:	f7fe f919 	bl	800f6d0 <move_window>
 801149e:	4603      	mov	r3, r0
 80114a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114a8:	3a01      	subs	r2, #1
 80114aa:	611a      	str	r2, [r3, #16]
 80114ac:	e019      	b.n	80114e2 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80114ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d115      	bne.n	80114e2 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80114b6:	7ebb      	ldrb	r3, [r7, #26]
 80114b8:	f003 0310 	and.w	r3, r3, #16
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d003      	beq.n	80114c8 <f_open+0x1d4>
					res = FR_NO_FILE;
 80114c0:	2304      	movs	r3, #4
 80114c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80114c6:	e00c      	b.n	80114e2 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80114c8:	79fb      	ldrb	r3, [r7, #7]
 80114ca:	f003 0302 	and.w	r3, r3, #2
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d007      	beq.n	80114e2 <f_open+0x1ee>
 80114d2:	7ebb      	ldrb	r3, [r7, #26]
 80114d4:	f003 0301 	and.w	r3, r3, #1
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d002      	beq.n	80114e2 <f_open+0x1ee>
						res = FR_DENIED;
 80114dc:	2307      	movs	r3, #7
 80114de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80114e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d128      	bne.n	801153c <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80114ea:	79fb      	ldrb	r3, [r7, #7]
 80114ec:	f003 0308 	and.w	r3, r3, #8
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d003      	beq.n	80114fc <f_open+0x208>
				mode |= FA_MODIFIED;
 80114f4:	79fb      	ldrb	r3, [r7, #7]
 80114f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114fa:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801150a:	79fb      	ldrb	r3, [r7, #7]
 801150c:	f023 0301 	bic.w	r3, r3, #1
 8011510:	2b00      	cmp	r3, #0
 8011512:	bf14      	ite	ne
 8011514:	2301      	movne	r3, #1
 8011516:	2300      	moveq	r3, #0
 8011518:	b2db      	uxtb	r3, r3
 801151a:	461a      	mov	r2, r3
 801151c:	f107 0314 	add.w	r3, r7, #20
 8011520:	4611      	mov	r1, r2
 8011522:	4618      	mov	r0, r3
 8011524:	f7fd ffa2 	bl	800f46c <inc_lock>
 8011528:	4602      	mov	r2, r0
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	691b      	ldr	r3, [r3, #16]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d102      	bne.n	801153c <f_open+0x248>
 8011536:	2302      	movs	r3, #2
 8011538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801153c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011540:	2b00      	cmp	r3, #0
 8011542:	f040 8095 	bne.w	8011670 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801154a:	4611      	mov	r1, r2
 801154c:	4618      	mov	r0, r3
 801154e:	f7fe fdc6 	bl	80100de <ld_clust>
 8011552:	4602      	mov	r2, r0
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801155a:	331c      	adds	r3, #28
 801155c:	4618      	mov	r0, r3
 801155e:	f7fd fe1f 	bl	800f1a0 <ld_dword>
 8011562:	4602      	mov	r2, r0
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2200      	movs	r2, #0
 801156c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801156e:	693a      	ldr	r2, [r7, #16]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	88da      	ldrh	r2, [r3, #6]
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	79fa      	ldrb	r2, [r7, #7]
 8011580:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2200      	movs	r2, #0
 8011586:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2200      	movs	r2, #0
 801158c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2200      	movs	r2, #0
 8011592:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	3330      	adds	r3, #48	; 0x30
 8011598:	f44f 7200 	mov.w	r2, #512	; 0x200
 801159c:	2100      	movs	r1, #0
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fd fe89 	bl	800f2b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80115a4:	79fb      	ldrb	r3, [r7, #7]
 80115a6:	f003 0320 	and.w	r3, r3, #32
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d060      	beq.n	8011670 <f_open+0x37c>
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d05c      	beq.n	8011670 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	68da      	ldr	r2, [r3, #12]
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	895b      	ldrh	r3, [r3, #10]
 80115c2:	025b      	lsls	r3, r3, #9
 80115c4:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	689b      	ldr	r3, [r3, #8]
 80115ca:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80115d2:	e016      	b.n	8011602 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80115d8:	4618      	mov	r0, r3
 80115da:	f7fe f934 	bl	800f846 <get_fat>
 80115de:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80115e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80115e2:	2b01      	cmp	r3, #1
 80115e4:	d802      	bhi.n	80115ec <f_open+0x2f8>
 80115e6:	2302      	movs	r3, #2
 80115e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80115ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80115ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f2:	d102      	bne.n	80115fa <f_open+0x306>
 80115f4:	2301      	movs	r3, #1
 80115f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80115fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115fe:	1ad3      	subs	r3, r2, r3
 8011600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011602:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011606:	2b00      	cmp	r3, #0
 8011608:	d103      	bne.n	8011612 <f_open+0x31e>
 801160a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801160c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801160e:	429a      	cmp	r2, r3
 8011610:	d8e0      	bhi.n	80115d4 <f_open+0x2e0>
				}
				fp->clust = clst;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011616:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011618:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801161c:	2b00      	cmp	r3, #0
 801161e:	d127      	bne.n	8011670 <f_open+0x37c>
 8011620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011626:	2b00      	cmp	r3, #0
 8011628:	d022      	beq.n	8011670 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801162e:	4618      	mov	r0, r3
 8011630:	f7fe f8ea 	bl	800f808 <clust2sect>
 8011634:	64b8      	str	r0, [r7, #72]	; 0x48
 8011636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011638:	2b00      	cmp	r3, #0
 801163a:	d103      	bne.n	8011644 <f_open+0x350>
						res = FR_INT_ERR;
 801163c:	2302      	movs	r3, #2
 801163e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011642:	e015      	b.n	8011670 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011646:	0a5a      	lsrs	r2, r3, #9
 8011648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801164a:	441a      	add	r2, r3
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	7858      	ldrb	r0, [r3, #1]
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	6a1a      	ldr	r2, [r3, #32]
 801165e:	2301      	movs	r3, #1
 8011660:	f7fd fd28 	bl	800f0b4 <disk_read>
 8011664:	4603      	mov	r3, r0
 8011666:	2b00      	cmp	r3, #0
 8011668:	d002      	beq.n	8011670 <f_open+0x37c>
 801166a:	2301      	movs	r3, #1
 801166c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8011670:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011672:	f001 f98d 	bl	8012990 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801167a:	2b00      	cmp	r3, #0
 801167c:	d002      	beq.n	8011684 <f_open+0x390>
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2200      	movs	r2, #0
 8011682:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011684:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011688:	4618      	mov	r0, r3
 801168a:	3768      	adds	r7, #104	; 0x68
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b08c      	sub	sp, #48	; 0x30
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
 801169c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	2200      	movs	r2, #0
 80116a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	f107 0210 	add.w	r2, r7, #16
 80116ae:	4611      	mov	r1, r2
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7ff fda3 	bl	80111fc <validate>
 80116b6:	4603      	mov	r3, r0
 80116b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80116bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d107      	bne.n	80116d4 <f_write+0x44>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	7d5b      	ldrb	r3, [r3, #21]
 80116c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80116cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d002      	beq.n	80116da <f_write+0x4a>
 80116d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116d8:	e14b      	b.n	8011972 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	7d1b      	ldrb	r3, [r3, #20]
 80116de:	f003 0302 	and.w	r3, r3, #2
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d101      	bne.n	80116ea <f_write+0x5a>
 80116e6:	2307      	movs	r3, #7
 80116e8:	e143      	b.n	8011972 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	699a      	ldr	r2, [r3, #24]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	441a      	add	r2, r3
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	699b      	ldr	r3, [r3, #24]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	f080 812d 	bcs.w	8011956 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	699b      	ldr	r3, [r3, #24]
 8011700:	43db      	mvns	r3, r3
 8011702:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011704:	e127      	b.n	8011956 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	699b      	ldr	r3, [r3, #24]
 801170a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801170e:	2b00      	cmp	r3, #0
 8011710:	f040 80e3 	bne.w	80118da <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	699b      	ldr	r3, [r3, #24]
 8011718:	0a5b      	lsrs	r3, r3, #9
 801171a:	693a      	ldr	r2, [r7, #16]
 801171c:	8952      	ldrh	r2, [r2, #10]
 801171e:	3a01      	subs	r2, #1
 8011720:	4013      	ands	r3, r2
 8011722:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d143      	bne.n	80117b2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	699b      	ldr	r3, [r3, #24]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d10c      	bne.n	801174c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	689b      	ldr	r3, [r3, #8]
 8011736:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173a:	2b00      	cmp	r3, #0
 801173c:	d11a      	bne.n	8011774 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2100      	movs	r1, #0
 8011742:	4618      	mov	r0, r3
 8011744:	f7fe fa78 	bl	800fc38 <create_chain>
 8011748:	62b8      	str	r0, [r7, #40]	; 0x28
 801174a:	e013      	b.n	8011774 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011750:	2b00      	cmp	r3, #0
 8011752:	d007      	beq.n	8011764 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	699b      	ldr	r3, [r3, #24]
 8011758:	4619      	mov	r1, r3
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f7fe fb04 	bl	800fd68 <clmt_clust>
 8011760:	62b8      	str	r0, [r7, #40]	; 0x28
 8011762:	e007      	b.n	8011774 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	69db      	ldr	r3, [r3, #28]
 801176a:	4619      	mov	r1, r3
 801176c:	4610      	mov	r0, r2
 801176e:	f7fe fa63 	bl	800fc38 <create_chain>
 8011772:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011776:	2b00      	cmp	r3, #0
 8011778:	f000 80f2 	beq.w	8011960 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801177e:	2b01      	cmp	r3, #1
 8011780:	d104      	bne.n	801178c <f_write+0xfc>
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2202      	movs	r2, #2
 8011786:	755a      	strb	r2, [r3, #21]
 8011788:	2302      	movs	r3, #2
 801178a:	e0f2      	b.n	8011972 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011792:	d104      	bne.n	801179e <f_write+0x10e>
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	2201      	movs	r2, #1
 8011798:	755a      	strb	r2, [r3, #21]
 801179a:	2301      	movs	r3, #1
 801179c:	e0e9      	b.n	8011972 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	689b      	ldr	r3, [r3, #8]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d102      	bne.n	80117b2 <f_write+0x122>
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	7d1b      	ldrb	r3, [r3, #20]
 80117b6:	b25b      	sxtb	r3, r3
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	da18      	bge.n	80117ee <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	7858      	ldrb	r0, [r3, #1]
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	6a1a      	ldr	r2, [r3, #32]
 80117ca:	2301      	movs	r3, #1
 80117cc:	f7fd fc92 	bl	800f0f4 <disk_write>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d004      	beq.n	80117e0 <f_write+0x150>
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2201      	movs	r2, #1
 80117da:	755a      	strb	r2, [r3, #21]
 80117dc:	2301      	movs	r3, #1
 80117de:	e0c8      	b.n	8011972 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117e8:	b2da      	uxtb	r2, r3
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80117ee:	693a      	ldr	r2, [r7, #16]
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	69db      	ldr	r3, [r3, #28]
 80117f4:	4619      	mov	r1, r3
 80117f6:	4610      	mov	r0, r2
 80117f8:	f7fe f806 	bl	800f808 <clust2sect>
 80117fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d104      	bne.n	801180e <f_write+0x17e>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2202      	movs	r2, #2
 8011808:	755a      	strb	r2, [r3, #21]
 801180a:	2302      	movs	r3, #2
 801180c:	e0b1      	b.n	8011972 <f_write+0x2e2>
			sect += csect;
 801180e:	697a      	ldr	r2, [r7, #20]
 8011810:	69bb      	ldr	r3, [r7, #24]
 8011812:	4413      	add	r3, r2
 8011814:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	0a5b      	lsrs	r3, r3, #9
 801181a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801181c:	6a3b      	ldr	r3, [r7, #32]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d03c      	beq.n	801189c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011822:	69ba      	ldr	r2, [r7, #24]
 8011824:	6a3b      	ldr	r3, [r7, #32]
 8011826:	4413      	add	r3, r2
 8011828:	693a      	ldr	r2, [r7, #16]
 801182a:	8952      	ldrh	r2, [r2, #10]
 801182c:	4293      	cmp	r3, r2
 801182e:	d905      	bls.n	801183c <f_write+0x1ac>
					cc = fs->csize - csect;
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	895b      	ldrh	r3, [r3, #10]
 8011834:	461a      	mov	r2, r3
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	1ad3      	subs	r3, r2, r3
 801183a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	7858      	ldrb	r0, [r3, #1]
 8011840:	6a3b      	ldr	r3, [r7, #32]
 8011842:	697a      	ldr	r2, [r7, #20]
 8011844:	69f9      	ldr	r1, [r7, #28]
 8011846:	f7fd fc55 	bl	800f0f4 <disk_write>
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	d004      	beq.n	801185a <f_write+0x1ca>
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2201      	movs	r2, #1
 8011854:	755a      	strb	r2, [r3, #21]
 8011856:	2301      	movs	r3, #1
 8011858:	e08b      	b.n	8011972 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	6a1a      	ldr	r2, [r3, #32]
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	6a3a      	ldr	r2, [r7, #32]
 8011864:	429a      	cmp	r2, r3
 8011866:	d915      	bls.n	8011894 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	6a1a      	ldr	r2, [r3, #32]
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	025b      	lsls	r3, r3, #9
 8011878:	69fa      	ldr	r2, [r7, #28]
 801187a:	4413      	add	r3, r2
 801187c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011880:	4619      	mov	r1, r3
 8011882:	f7fd fcf7 	bl	800f274 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	7d1b      	ldrb	r3, [r3, #20]
 801188a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801188e:	b2da      	uxtb	r2, r3
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011894:	6a3b      	ldr	r3, [r7, #32]
 8011896:	025b      	lsls	r3, r3, #9
 8011898:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801189a:	e03f      	b.n	801191c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	6a1b      	ldr	r3, [r3, #32]
 80118a0:	697a      	ldr	r2, [r7, #20]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d016      	beq.n	80118d4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	699a      	ldr	r2, [r3, #24]
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d210      	bcs.n	80118d4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	7858      	ldrb	r0, [r3, #1]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118bc:	2301      	movs	r3, #1
 80118be:	697a      	ldr	r2, [r7, #20]
 80118c0:	f7fd fbf8 	bl	800f0b4 <disk_read>
 80118c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d004      	beq.n	80118d4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	2201      	movs	r2, #1
 80118ce:	755a      	strb	r2, [r3, #21]
 80118d0:	2301      	movs	r3, #1
 80118d2:	e04e      	b.n	8011972 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	697a      	ldr	r2, [r7, #20]
 80118d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	699b      	ldr	r3, [r3, #24]
 80118de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80118e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80118e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d901      	bls.n	80118f4 <f_write+0x264>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	699b      	ldr	r3, [r3, #24]
 80118fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011902:	4413      	add	r3, r2
 8011904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011906:	69f9      	ldr	r1, [r7, #28]
 8011908:	4618      	mov	r0, r3
 801190a:	f7fd fcb3 	bl	800f274 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	7d1b      	ldrb	r3, [r3, #20]
 8011912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011916:	b2da      	uxtb	r2, r3
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801191c:	69fa      	ldr	r2, [r7, #28]
 801191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011920:	4413      	add	r3, r2
 8011922:	61fb      	str	r3, [r7, #28]
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	699a      	ldr	r2, [r3, #24]
 8011928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192a:	441a      	add	r2, r3
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	619a      	str	r2, [r3, #24]
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	68da      	ldr	r2, [r3, #12]
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	699b      	ldr	r3, [r3, #24]
 8011938:	429a      	cmp	r2, r3
 801193a:	bf38      	it	cc
 801193c:	461a      	movcc	r2, r3
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	60da      	str	r2, [r3, #12]
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	681a      	ldr	r2, [r3, #0]
 8011946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011948:	441a      	add	r2, r3
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	601a      	str	r2, [r3, #0]
 801194e:	687a      	ldr	r2, [r7, #4]
 8011950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011952:	1ad3      	subs	r3, r2, r3
 8011954:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2b00      	cmp	r3, #0
 801195a:	f47f aed4 	bne.w	8011706 <f_write+0x76>
 801195e:	e000      	b.n	8011962 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011960:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	7d1b      	ldrb	r3, [r3, #20]
 8011966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801196a:	b2da      	uxtb	r2, r3
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011970:	2300      	movs	r3, #0
}
 8011972:	4618      	mov	r0, r3
 8011974:	3730      	adds	r7, #48	; 0x30
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801197a:	b580      	push	{r7, lr}
 801197c:	b086      	sub	sp, #24
 801197e:	af00      	add	r7, sp, #0
 8011980:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f107 0208 	add.w	r2, r7, #8
 8011988:	4611      	mov	r1, r2
 801198a:	4618      	mov	r0, r3
 801198c:	f7ff fc36 	bl	80111fc <validate>
 8011990:	4603      	mov	r3, r0
 8011992:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011994:	7dfb      	ldrb	r3, [r7, #23]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d168      	bne.n	8011a6c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	7d1b      	ldrb	r3, [r3, #20]
 801199e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d062      	beq.n	8011a6c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	7d1b      	ldrb	r3, [r3, #20]
 80119aa:	b25b      	sxtb	r3, r3
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	da15      	bge.n	80119dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	7858      	ldrb	r0, [r3, #1]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6a1a      	ldr	r2, [r3, #32]
 80119be:	2301      	movs	r3, #1
 80119c0:	f7fd fb98 	bl	800f0f4 <disk_write>
 80119c4:	4603      	mov	r3, r0
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d001      	beq.n	80119ce <f_sync+0x54>
 80119ca:	2301      	movs	r3, #1
 80119cc:	e04f      	b.n	8011a6e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	7d1b      	ldrb	r3, [r3, #20]
 80119d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119d6:	b2da      	uxtb	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80119dc:	f7fb fc32 	bl	800d244 <get_fattime>
 80119e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80119e2:	68ba      	ldr	r2, [r7, #8]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e8:	4619      	mov	r1, r3
 80119ea:	4610      	mov	r0, r2
 80119ec:	f7fd fe70 	bl	800f6d0 <move_window>
 80119f0:	4603      	mov	r3, r0
 80119f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80119f4:	7dfb      	ldrb	r3, [r7, #23]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d138      	bne.n	8011a6c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	330b      	adds	r3, #11
 8011a04:	781a      	ldrb	r2, [r3, #0]
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	330b      	adds	r3, #11
 8011a0a:	f042 0220 	orr.w	r2, r2, #32
 8011a0e:	b2d2      	uxtb	r2, r2
 8011a10:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6818      	ldr	r0, [r3, #0]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	689b      	ldr	r3, [r3, #8]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	68f9      	ldr	r1, [r7, #12]
 8011a1e:	f7fe fb7d 	bl	801011c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f103 021c 	add.w	r2, r3, #28
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	4610      	mov	r0, r2
 8011a30:	f7fd fbf4 	bl	800f21c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	3316      	adds	r3, #22
 8011a38:	6939      	ldr	r1, [r7, #16]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fd fbee 	bl	800f21c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	3312      	adds	r3, #18
 8011a44:	2100      	movs	r1, #0
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fd fbcd 	bl	800f1e6 <st_word>
					fs->wflag = 1;
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fd fe69 	bl	800f72c <sync_fs>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	7d1b      	ldrb	r3, [r3, #20]
 8011a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a66:	b2da      	uxtb	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3718      	adds	r7, #24
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b084      	sub	sp, #16
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f7ff ff7b 	bl	801197a <f_sync>
 8011a84:	4603      	mov	r3, r0
 8011a86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011a88:	7bfb      	ldrb	r3, [r7, #15]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d118      	bne.n	8011ac0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f107 0208 	add.w	r2, r7, #8
 8011a94:	4611      	mov	r1, r2
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7ff fbb0 	bl	80111fc <validate>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011aa0:	7bfb      	ldrb	r3, [r7, #15]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d10c      	bne.n	8011ac0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	691b      	ldr	r3, [r3, #16]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fd fd6c 	bl	800f588 <dec_lock>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011ab4:	7bfb      	ldrb	r3, [r7, #15]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d102      	bne.n	8011ac0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2200      	movs	r2, #0
 8011abe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3710      	adds	r7, #16
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}

08011aca <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b090      	sub	sp, #64	; 0x40
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
 8011ad2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f107 0208 	add.w	r2, r7, #8
 8011ada:	4611      	mov	r1, r2
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7ff fb8d 	bl	80111fc <validate>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d103      	bne.n	8011af8 <f_lseek+0x2e>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	7d5b      	ldrb	r3, [r3, #21]
 8011af4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011af8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d002      	beq.n	8011b06 <f_lseek+0x3c>
 8011b00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b04:	e1e6      	b.n	8011ed4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	f000 80d1 	beq.w	8011cb2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b16:	d15a      	bne.n	8011bce <f_lseek+0x104>
			tbl = fp->cltbl;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b1c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b20:	1d1a      	adds	r2, r3, #4
 8011b22:	627a      	str	r2, [r7, #36]	; 0x24
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	617b      	str	r3, [r7, #20]
 8011b28:	2302      	movs	r3, #2
 8011b2a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	689b      	ldr	r3, [r3, #8]
 8011b30:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d03a      	beq.n	8011bae <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b3a:	613b      	str	r3, [r7, #16]
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b42:	3302      	adds	r3, #2
 8011b44:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b48:	60fb      	str	r3, [r7, #12]
 8011b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7fd fe76 	bl	800f846 <get_fat>
 8011b5a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d804      	bhi.n	8011b6c <f_lseek+0xa2>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2202      	movs	r2, #2
 8011b66:	755a      	strb	r2, [r3, #21]
 8011b68:	2302      	movs	r3, #2
 8011b6a:	e1b3      	b.n	8011ed4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b72:	d104      	bne.n	8011b7e <f_lseek+0xb4>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2201      	movs	r2, #1
 8011b78:	755a      	strb	r2, [r3, #21]
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e1aa      	b.n	8011ed4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	3301      	adds	r3, #1
 8011b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d0de      	beq.n	8011b46 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d809      	bhi.n	8011ba4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b92:	1d1a      	adds	r2, r3, #4
 8011b94:	627a      	str	r2, [r7, #36]	; 0x24
 8011b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b98:	601a      	str	r2, [r3, #0]
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9c:	1d1a      	adds	r2, r3, #4
 8011b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8011ba0:	693a      	ldr	r2, [r7, #16]
 8011ba2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	699b      	ldr	r3, [r3, #24]
 8011ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d3c4      	bcc.n	8011b38 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bb4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d803      	bhi.n	8011bc6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	601a      	str	r2, [r3, #0]
 8011bc4:	e184      	b.n	8011ed0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011bc6:	2311      	movs	r3, #17
 8011bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011bcc:	e180      	b.n	8011ed0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	68db      	ldr	r3, [r3, #12]
 8011bd2:	683a      	ldr	r2, [r7, #0]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d902      	bls.n	8011bde <f_lseek+0x114>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	683a      	ldr	r2, [r7, #0]
 8011be2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	f000 8172 	beq.w	8011ed0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	3b01      	subs	r3, #1
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f7fe f8b8 	bl	800fd68 <clmt_clust>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011bfe:	68ba      	ldr	r2, [r7, #8]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	69db      	ldr	r3, [r3, #28]
 8011c04:	4619      	mov	r1, r3
 8011c06:	4610      	mov	r0, r2
 8011c08:	f7fd fdfe 	bl	800f808 <clust2sect>
 8011c0c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d104      	bne.n	8011c1e <f_lseek+0x154>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2202      	movs	r2, #2
 8011c18:	755a      	strb	r2, [r3, #21]
 8011c1a:	2302      	movs	r3, #2
 8011c1c:	e15a      	b.n	8011ed4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	3b01      	subs	r3, #1
 8011c22:	0a5b      	lsrs	r3, r3, #9
 8011c24:	68ba      	ldr	r2, [r7, #8]
 8011c26:	8952      	ldrh	r2, [r2, #10]
 8011c28:	3a01      	subs	r2, #1
 8011c2a:	4013      	ands	r3, r2
 8011c2c:	69ba      	ldr	r2, [r7, #24]
 8011c2e:	4413      	add	r3, r2
 8011c30:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	699b      	ldr	r3, [r3, #24]
 8011c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f000 8148 	beq.w	8011ed0 <f_lseek+0x406>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6a1b      	ldr	r3, [r3, #32]
 8011c44:	69ba      	ldr	r2, [r7, #24]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	f000 8142 	beq.w	8011ed0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	7d1b      	ldrb	r3, [r3, #20]
 8011c50:	b25b      	sxtb	r3, r3
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	da18      	bge.n	8011c88 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	7858      	ldrb	r0, [r3, #1]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6a1a      	ldr	r2, [r3, #32]
 8011c64:	2301      	movs	r3, #1
 8011c66:	f7fd fa45 	bl	800f0f4 <disk_write>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d004      	beq.n	8011c7a <f_lseek+0x1b0>
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2201      	movs	r2, #1
 8011c74:	755a      	strb	r2, [r3, #21]
 8011c76:	2301      	movs	r3, #1
 8011c78:	e12c      	b.n	8011ed4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	7d1b      	ldrb	r3, [r3, #20]
 8011c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	7858      	ldrb	r0, [r3, #1]
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c92:	2301      	movs	r3, #1
 8011c94:	69ba      	ldr	r2, [r7, #24]
 8011c96:	f7fd fa0d 	bl	800f0b4 <disk_read>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d004      	beq.n	8011caa <f_lseek+0x1e0>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	755a      	strb	r2, [r3, #21]
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	e114      	b.n	8011ed4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	69ba      	ldr	r2, [r7, #24]
 8011cae:	621a      	str	r2, [r3, #32]
 8011cb0:	e10e      	b.n	8011ed0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	68db      	ldr	r3, [r3, #12]
 8011cb6:	683a      	ldr	r2, [r7, #0]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d908      	bls.n	8011cce <f_lseek+0x204>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	7d1b      	ldrb	r3, [r3, #20]
 8011cc0:	f003 0302 	and.w	r3, r3, #2
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d102      	bne.n	8011cce <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	699b      	ldr	r3, [r3, #24]
 8011cd2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cdc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f000 80a7 	beq.w	8011e34 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	895b      	ldrh	r3, [r3, #10]
 8011cea:	025b      	lsls	r3, r3, #9
 8011cec:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d01b      	beq.n	8011d2c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	1e5a      	subs	r2, r3, #1
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	1e59      	subs	r1, r3, #1
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d30f      	bcc.n	8011d2c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011d0c:	6a3b      	ldr	r3, [r7, #32]
 8011d0e:	1e5a      	subs	r2, r3, #1
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	425b      	negs	r3, r3
 8011d14:	401a      	ands	r2, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	699b      	ldr	r3, [r3, #24]
 8011d1e:	683a      	ldr	r2, [r7, #0]
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	69db      	ldr	r3, [r3, #28]
 8011d28:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d2a:	e022      	b.n	8011d72 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	689b      	ldr	r3, [r3, #8]
 8011d30:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d119      	bne.n	8011d6c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7fd ff7b 	bl	800fc38 <create_chain>
 8011d42:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d46:	2b01      	cmp	r3, #1
 8011d48:	d104      	bne.n	8011d54 <f_lseek+0x28a>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2202      	movs	r2, #2
 8011d4e:	755a      	strb	r2, [r3, #21]
 8011d50:	2302      	movs	r3, #2
 8011d52:	e0bf      	b.n	8011ed4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d5a:	d104      	bne.n	8011d66 <f_lseek+0x29c>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2201      	movs	r2, #1
 8011d60:	755a      	strb	r2, [r3, #21]
 8011d62:	2301      	movs	r3, #1
 8011d64:	e0b6      	b.n	8011ed4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d6a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d70:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d05d      	beq.n	8011e34 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8011d78:	e03a      	b.n	8011df0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8011d7a:	683a      	ldr	r2, [r7, #0]
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	1ad3      	subs	r3, r2, r3
 8011d80:	603b      	str	r3, [r7, #0]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	699a      	ldr	r2, [r3, #24]
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	441a      	add	r2, r3
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	7d1b      	ldrb	r3, [r3, #20]
 8011d92:	f003 0302 	and.w	r3, r3, #2
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d00b      	beq.n	8011db2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7fd ff4a 	bl	800fc38 <create_chain>
 8011da4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d108      	bne.n	8011dbe <f_lseek+0x2f4>
							ofs = 0; break;
 8011dac:	2300      	movs	r3, #0
 8011dae:	603b      	str	r3, [r7, #0]
 8011db0:	e022      	b.n	8011df8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7fd fd45 	bl	800f846 <get_fat>
 8011dbc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dc4:	d104      	bne.n	8011dd0 <f_lseek+0x306>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2201      	movs	r2, #1
 8011dca:	755a      	strb	r2, [r3, #21]
 8011dcc:	2301      	movs	r3, #1
 8011dce:	e081      	b.n	8011ed4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd2:	2b01      	cmp	r3, #1
 8011dd4:	d904      	bls.n	8011de0 <f_lseek+0x316>
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	699b      	ldr	r3, [r3, #24]
 8011dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d304      	bcc.n	8011dea <f_lseek+0x320>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2202      	movs	r2, #2
 8011de4:	755a      	strb	r2, [r3, #21]
 8011de6:	2302      	movs	r3, #2
 8011de8:	e074      	b.n	8011ed4 <f_lseek+0x40a>
					fp->clust = clst;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011dee:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011df0:	683a      	ldr	r2, [r7, #0]
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d8c0      	bhi.n	8011d7a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	699a      	ldr	r2, [r3, #24]
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	441a      	add	r2, r3
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d012      	beq.n	8011e34 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7fd fcf8 	bl	800f808 <clust2sect>
 8011e18:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d104      	bne.n	8011e2a <f_lseek+0x360>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2202      	movs	r2, #2
 8011e24:	755a      	strb	r2, [r3, #21]
 8011e26:	2302      	movs	r3, #2
 8011e28:	e054      	b.n	8011ed4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	0a5b      	lsrs	r3, r3, #9
 8011e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e30:	4413      	add	r3, r2
 8011e32:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	699a      	ldr	r2, [r3, #24]
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d90a      	bls.n	8011e56 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	699a      	ldr	r2, [r3, #24]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	7d1b      	ldrb	r3, [r3, #20]
 8011e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e50:	b2da      	uxtb	r2, r3
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	699b      	ldr	r3, [r3, #24]
 8011e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d036      	beq.n	8011ed0 <f_lseek+0x406>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6a1b      	ldr	r3, [r3, #32]
 8011e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d031      	beq.n	8011ed0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	7d1b      	ldrb	r3, [r3, #20]
 8011e70:	b25b      	sxtb	r3, r3
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	da18      	bge.n	8011ea8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	7858      	ldrb	r0, [r3, #1]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6a1a      	ldr	r2, [r3, #32]
 8011e84:	2301      	movs	r3, #1
 8011e86:	f7fd f935 	bl	800f0f4 <disk_write>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d004      	beq.n	8011e9a <f_lseek+0x3d0>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2201      	movs	r2, #1
 8011e94:	755a      	strb	r2, [r3, #21]
 8011e96:	2301      	movs	r3, #1
 8011e98:	e01c      	b.n	8011ed4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	7d1b      	ldrb	r3, [r3, #20]
 8011e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ea2:	b2da      	uxtb	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	7858      	ldrb	r0, [r3, #1]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011eb6:	f7fd f8fd 	bl	800f0b4 <disk_read>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d004      	beq.n	8011eca <f_lseek+0x400>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2201      	movs	r2, #1
 8011ec4:	755a      	strb	r2, [r3, #21]
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	e004      	b.n	8011ed4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ece:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011ed0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3740      	adds	r7, #64	; 0x40
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8011edc:	b590      	push	{r4, r7, lr}
 8011ede:	b09d      	sub	sp, #116	; 0x74
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	607a      	str	r2, [r7, #4]
 8011ee6:	603b      	str	r3, [r7, #0]
 8011ee8:	460b      	mov	r3, r1
 8011eea:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8011eec:	2301      	movs	r3, #1
 8011eee:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8011ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ef4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8011ef6:	f107 030c 	add.w	r3, r7, #12
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7fe fe97 	bl	8010c2e <get_ldnumber>
 8011f00:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	da02      	bge.n	8011f0e <f_mkfs+0x32>
 8011f08:	230b      	movs	r3, #11
 8011f0a:	f000 bc0d 	b.w	8012728 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8011f0e:	4a94      	ldr	r2, [pc, #592]	; (8012160 <f_mkfs+0x284>)
 8011f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d005      	beq.n	8011f26 <f_mkfs+0x4a>
 8011f1a:	4a91      	ldr	r2, [pc, #580]	; (8012160 <f_mkfs+0x284>)
 8011f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f22:	2200      	movs	r2, #0
 8011f24:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8011f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8011f32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7fd f896 	bl	800f068 <disk_initialize>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8011f42:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011f46:	f003 0301 	and.w	r3, r3, #1
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d001      	beq.n	8011f52 <f_mkfs+0x76>
 8011f4e:	2303      	movs	r3, #3
 8011f50:	e3ea      	b.n	8012728 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8011f52:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011f56:	f003 0304 	and.w	r3, r3, #4
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d001      	beq.n	8011f62 <f_mkfs+0x86>
 8011f5e:	230a      	movs	r3, #10
 8011f60:	e3e2      	b.n	8012728 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8011f62:	f107 0214 	add.w	r2, r7, #20
 8011f66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011f6a:	2103      	movs	r1, #3
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7fd f8e1 	bl	800f134 <disk_ioctl>
 8011f72:	4603      	mov	r3, r0
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d10c      	bne.n	8011f92 <f_mkfs+0xb6>
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d009      	beq.n	8011f92 <f_mkfs+0xb6>
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f84:	d805      	bhi.n	8011f92 <f_mkfs+0xb6>
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	1e5a      	subs	r2, r3, #1
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	4013      	ands	r3, r2
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d001      	beq.n	8011f96 <f_mkfs+0xba>
 8011f92:	2301      	movs	r3, #1
 8011f94:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8011f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011f9a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d003      	beq.n	8011faa <f_mkfs+0xce>
 8011fa2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d309      	bcc.n	8011fbe <f_mkfs+0xe2>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011fb0:	d805      	bhi.n	8011fbe <f_mkfs+0xe2>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	1e5a      	subs	r2, r3, #1
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	4013      	ands	r3, r2
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d001      	beq.n	8011fc2 <f_mkfs+0xe6>
 8011fbe:	2313      	movs	r3, #19
 8011fc0:	e3b2      	b.n	8012728 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8011fc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011fc4:	687a      	ldr	r2, [r7, #4]
 8011fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fca:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8011fd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011fd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fda:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8011fdc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe0:	fb02 f303 	mul.w	r3, r2, r3
 8011fe4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8011fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d101      	bne.n	8011ff0 <f_mkfs+0x114>
 8011fec:	230e      	movs	r3, #14
 8011fee:	e39b      	b.n	8012728 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8011ff0:	f107 0210 	add.w	r2, r7, #16
 8011ff4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011ff8:	2101      	movs	r1, #1
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7fd f89a 	bl	800f134 <disk_ioctl>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d001      	beq.n	801200a <f_mkfs+0x12e>
 8012006:	2301      	movs	r3, #1
 8012008:	e38e      	b.n	8012728 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801200a:	7afb      	ldrb	r3, [r7, #11]
 801200c:	f003 0308 	and.w	r3, r3, #8
 8012010:	2b00      	cmp	r3, #0
 8012012:	d001      	beq.n	8012018 <f_mkfs+0x13c>
 8012014:	2300      	movs	r3, #0
 8012016:	e000      	b.n	801201a <f_mkfs+0x13e>
 8012018:	233f      	movs	r3, #63	; 0x3f
 801201a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012020:	429a      	cmp	r2, r3
 8012022:	d901      	bls.n	8012028 <f_mkfs+0x14c>
 8012024:	230e      	movs	r3, #14
 8012026:	e37f      	b.n	8012728 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8012028:	693a      	ldr	r2, [r7, #16]
 801202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202c:	1ad3      	subs	r3, r2, r3
 801202e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	2b7f      	cmp	r3, #127	; 0x7f
 8012034:	d801      	bhi.n	801203a <f_mkfs+0x15e>
 8012036:	230e      	movs	r3, #14
 8012038:	e376      	b.n	8012728 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2b80      	cmp	r3, #128	; 0x80
 801203e:	d901      	bls.n	8012044 <f_mkfs+0x168>
 8012040:	2313      	movs	r3, #19
 8012042:	e371      	b.n	8012728 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8012044:	7afb      	ldrb	r3, [r7, #11]
 8012046:	f003 0302 	and.w	r3, r3, #2
 801204a:	2b00      	cmp	r3, #0
 801204c:	d00d      	beq.n	801206a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801204e:	7afb      	ldrb	r3, [r7, #11]
 8012050:	f003 0307 	and.w	r3, r3, #7
 8012054:	2b02      	cmp	r3, #2
 8012056:	d004      	beq.n	8012062 <f_mkfs+0x186>
 8012058:	7afb      	ldrb	r3, [r7, #11]
 801205a:	f003 0301 	and.w	r3, r3, #1
 801205e:	2b00      	cmp	r3, #0
 8012060:	d103      	bne.n	801206a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8012062:	2303      	movs	r3, #3
 8012064:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8012068:	e009      	b.n	801207e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801206a:	7afb      	ldrb	r3, [r7, #11]
 801206c:	f003 0301 	and.w	r3, r3, #1
 8012070:	2b00      	cmp	r3, #0
 8012072:	d101      	bne.n	8012078 <f_mkfs+0x19c>
 8012074:	2313      	movs	r3, #19
 8012076:	e357      	b.n	8012728 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8012078:	2302      	movs	r3, #2
 801207a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8012082:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012086:	2b03      	cmp	r3, #3
 8012088:	d13c      	bne.n	8012104 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801208a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801208c:	2b00      	cmp	r3, #0
 801208e:	d11b      	bne.n	80120c8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	0c5b      	lsrs	r3, r3, #17
 8012094:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8012096:	2300      	movs	r3, #0
 8012098:	64bb      	str	r3, [r7, #72]	; 0x48
 801209a:	2301      	movs	r3, #1
 801209c:	653b      	str	r3, [r7, #80]	; 0x50
 801209e:	e005      	b.n	80120ac <f_mkfs+0x1d0>
 80120a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120a2:	3301      	adds	r3, #1
 80120a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80120a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120a8:	005b      	lsls	r3, r3, #1
 80120aa:	653b      	str	r3, [r7, #80]	; 0x50
 80120ac:	4a2d      	ldr	r2, [pc, #180]	; (8012164 <f_mkfs+0x288>)
 80120ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d007      	beq.n	80120c8 <f_mkfs+0x1ec>
 80120b8:	4a2a      	ldr	r2, [pc, #168]	; (8012164 <f_mkfs+0x288>)
 80120ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120c0:	461a      	mov	r2, r3
 80120c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120c4:	4293      	cmp	r3, r2
 80120c6:	d2eb      	bcs.n	80120a0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80120c8:	693a      	ldr	r2, [r7, #16]
 80120ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80120d0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80120d2:	6a3b      	ldr	r3, [r7, #32]
 80120d4:	3302      	adds	r3, #2
 80120d6:	009a      	lsls	r2, r3, #2
 80120d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80120da:	4413      	add	r3, r2
 80120dc:	1e5a      	subs	r2, r3, #1
 80120de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80120e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80120e4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80120e6:	2320      	movs	r3, #32
 80120e8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80120ea:	2300      	movs	r3, #0
 80120ec:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80120ee:	6a3b      	ldr	r3, [r7, #32]
 80120f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80120f4:	4293      	cmp	r3, r2
 80120f6:	d903      	bls.n	8012100 <f_mkfs+0x224>
 80120f8:	6a3b      	ldr	r3, [r7, #32]
 80120fa:	4a1b      	ldr	r2, [pc, #108]	; (8012168 <f_mkfs+0x28c>)
 80120fc:	4293      	cmp	r3, r2
 80120fe:	d952      	bls.n	80121a6 <f_mkfs+0x2ca>
 8012100:	230e      	movs	r3, #14
 8012102:	e311      	b.n	8012728 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8012104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012106:	2b00      	cmp	r3, #0
 8012108:	d11b      	bne.n	8012142 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	0b1b      	lsrs	r3, r3, #12
 801210e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8012110:	2300      	movs	r3, #0
 8012112:	64bb      	str	r3, [r7, #72]	; 0x48
 8012114:	2301      	movs	r3, #1
 8012116:	653b      	str	r3, [r7, #80]	; 0x50
 8012118:	e005      	b.n	8012126 <f_mkfs+0x24a>
 801211a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801211c:	3301      	adds	r3, #1
 801211e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012122:	005b      	lsls	r3, r3, #1
 8012124:	653b      	str	r3, [r7, #80]	; 0x50
 8012126:	4a11      	ldr	r2, [pc, #68]	; (801216c <f_mkfs+0x290>)
 8012128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801212a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d007      	beq.n	8012142 <f_mkfs+0x266>
 8012132:	4a0e      	ldr	r2, [pc, #56]	; (801216c <f_mkfs+0x290>)
 8012134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801213a:	461a      	mov	r2, r3
 801213c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801213e:	4293      	cmp	r3, r2
 8012140:	d2eb      	bcs.n	801211a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8012142:	693a      	ldr	r2, [r7, #16]
 8012144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012146:	fbb2 f3f3 	udiv	r3, r2, r3
 801214a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 801214c:	6a3b      	ldr	r3, [r7, #32]
 801214e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012152:	4293      	cmp	r3, r2
 8012154:	d90c      	bls.n	8012170 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8012156:	6a3b      	ldr	r3, [r7, #32]
 8012158:	3302      	adds	r3, #2
 801215a:	005b      	lsls	r3, r3, #1
 801215c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801215e:	e012      	b.n	8012186 <f_mkfs+0x2aa>
 8012160:	200013fc 	.word	0x200013fc
 8012164:	08018fcc 	.word	0x08018fcc
 8012168:	0ffffff5 	.word	0x0ffffff5
 801216c:	08018fdc 	.word	0x08018fdc
				} else {
					fmt = FS_FAT12;
 8012170:	2301      	movs	r3, #1
 8012172:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8012176:	6a3a      	ldr	r2, [r7, #32]
 8012178:	4613      	mov	r3, r2
 801217a:	005b      	lsls	r3, r3, #1
 801217c:	4413      	add	r3, r2
 801217e:	3301      	adds	r3, #1
 8012180:	085b      	lsrs	r3, r3, #1
 8012182:	3303      	adds	r3, #3
 8012184:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8012186:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801218a:	4413      	add	r3, r2
 801218c:	1e5a      	subs	r2, r3, #1
 801218e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012190:	fbb2 f3f3 	udiv	r3, r2, r3
 8012194:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8012196:	2301      	movs	r3, #1
 8012198:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801219a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801219c:	015a      	lsls	r2, r3, #5
 801219e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80121a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80121a4:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80121a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121aa:	4413      	add	r3, r2
 80121ac:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80121ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80121b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121b2:	fb03 f202 	mul.w	r2, r3, r2
 80121b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121b8:	4413      	add	r3, r2
 80121ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80121bc:	4413      	add	r3, r2
 80121be:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80121c0:	697a      	ldr	r2, [r7, #20]
 80121c2:	69fb      	ldr	r3, [r7, #28]
 80121c4:	4413      	add	r3, r2
 80121c6:	1e5a      	subs	r2, r3, #1
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	425b      	negs	r3, r3
 80121cc:	401a      	ands	r2, r3
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	1ad3      	subs	r3, r2, r3
 80121d2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80121d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80121d8:	2b03      	cmp	r3, #3
 80121da:	d108      	bne.n	80121ee <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80121dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80121de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121e0:	4413      	add	r3, r2
 80121e2:	657b      	str	r3, [r7, #84]	; 0x54
 80121e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80121e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121e8:	4413      	add	r3, r2
 80121ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80121ec:	e006      	b.n	80121fc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80121ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80121f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80121f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80121f8:	4413      	add	r3, r2
 80121fa:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80121fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121fe:	011a      	lsls	r2, r3, #4
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	441a      	add	r2, r3
 8012204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012206:	1ad2      	subs	r2, r2, r3
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	429a      	cmp	r2, r3
 801220c:	d901      	bls.n	8012212 <f_mkfs+0x336>
 801220e:	230e      	movs	r3, #14
 8012210:	e28a      	b.n	8012728 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8012212:	693a      	ldr	r2, [r7, #16]
 8012214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012216:	1ad2      	subs	r2, r2, r3
 8012218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801221a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801221c:	fb01 f303 	mul.w	r3, r1, r3
 8012220:	1ad2      	subs	r2, r2, r3
 8012222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012224:	1ad2      	subs	r2, r2, r3
 8012226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012228:	fbb2 f3f3 	udiv	r3, r2, r3
 801222c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801222e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012232:	2b03      	cmp	r3, #3
 8012234:	d10f      	bne.n	8012256 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8012236:	6a3b      	ldr	r3, [r7, #32]
 8012238:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801223c:	4293      	cmp	r3, r2
 801223e:	d80a      	bhi.n	8012256 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d105      	bne.n	8012252 <f_mkfs+0x376>
 8012246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012248:	085b      	lsrs	r3, r3, #1
 801224a:	607b      	str	r3, [r7, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d144      	bne.n	80122dc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8012252:	230e      	movs	r3, #14
 8012254:	e268      	b.n	8012728 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8012256:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801225a:	2b02      	cmp	r3, #2
 801225c:	d133      	bne.n	80122c6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012264:	4293      	cmp	r3, r2
 8012266:	d91e      	bls.n	80122a6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d107      	bne.n	801227e <f_mkfs+0x3a2>
 801226e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012270:	005b      	lsls	r3, r3, #1
 8012272:	2b40      	cmp	r3, #64	; 0x40
 8012274:	d803      	bhi.n	801227e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8012276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012278:	005b      	lsls	r3, r3, #1
 801227a:	607b      	str	r3, [r7, #4]
 801227c:	e033      	b.n	80122e6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801227e:	7afb      	ldrb	r3, [r7, #11]
 8012280:	f003 0302 	and.w	r3, r3, #2
 8012284:	2b00      	cmp	r3, #0
 8012286:	d003      	beq.n	8012290 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8012288:	2303      	movs	r3, #3
 801228a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801228e:	e02a      	b.n	80122e6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d105      	bne.n	80122a2 <f_mkfs+0x3c6>
 8012296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012298:	005b      	lsls	r3, r3, #1
 801229a:	607b      	str	r3, [r7, #4]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2b80      	cmp	r3, #128	; 0x80
 80122a0:	d91e      	bls.n	80122e0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80122a2:	230e      	movs	r3, #14
 80122a4:	e240      	b.n	8012728 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80122a6:	6a3b      	ldr	r3, [r7, #32]
 80122a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d80a      	bhi.n	80122c6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d105      	bne.n	80122c2 <f_mkfs+0x3e6>
 80122b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b8:	005b      	lsls	r3, r3, #1
 80122ba:	607b      	str	r3, [r7, #4]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2b80      	cmp	r3, #128	; 0x80
 80122c0:	d910      	bls.n	80122e4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80122c2:	230e      	movs	r3, #14
 80122c4:	e230      	b.n	8012728 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80122c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d10c      	bne.n	80122e8 <f_mkfs+0x40c>
 80122ce:	6a3b      	ldr	r3, [r7, #32]
 80122d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80122d4:	4293      	cmp	r3, r2
 80122d6:	d907      	bls.n	80122e8 <f_mkfs+0x40c>
 80122d8:	230e      	movs	r3, #14
 80122da:	e225      	b.n	8012728 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80122dc:	bf00      	nop
 80122de:	e6ce      	b.n	801207e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80122e0:	bf00      	nop
 80122e2:	e6cc      	b.n	801207e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80122e4:	bf00      	nop
			pau = au;
 80122e6:	e6ca      	b.n	801207e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80122e8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80122ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80122ec:	461a      	mov	r2, r3
 80122ee:	2100      	movs	r1, #0
 80122f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122f2:	f7fc ffe0 	bl	800f2b6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80122f6:	220b      	movs	r2, #11
 80122f8:	49b2      	ldr	r1, [pc, #712]	; (80125c4 <f_mkfs+0x6e8>)
 80122fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122fc:	f7fc ffba 	bl	800f274 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8012300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012302:	330b      	adds	r3, #11
 8012304:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012306:	4611      	mov	r1, r2
 8012308:	4618      	mov	r0, r3
 801230a:	f7fc ff6c 	bl	800f1e6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012310:	330d      	adds	r3, #13
 8012312:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012314:	b2d2      	uxtb	r2, r2
 8012316:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8012318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231a:	330e      	adds	r3, #14
 801231c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801231e:	b292      	uxth	r2, r2
 8012320:	4611      	mov	r1, r2
 8012322:	4618      	mov	r0, r3
 8012324:	f7fc ff5f 	bl	800f1e6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8012328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232a:	3310      	adds	r3, #16
 801232c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801232e:	b2d2      	uxtb	r2, r2
 8012330:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8012332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012334:	f103 0211 	add.w	r2, r3, #17
 8012338:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801233c:	2b03      	cmp	r3, #3
 801233e:	d002      	beq.n	8012346 <f_mkfs+0x46a>
 8012340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012342:	b29b      	uxth	r3, r3
 8012344:	e000      	b.n	8012348 <f_mkfs+0x46c>
 8012346:	2300      	movs	r3, #0
 8012348:	4619      	mov	r1, r3
 801234a:	4610      	mov	r0, r2
 801234c:	f7fc ff4b 	bl	800f1e6 <st_word>
		if (sz_vol < 0x10000) {
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012356:	d208      	bcs.n	801236a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8012358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235a:	3313      	adds	r3, #19
 801235c:	693a      	ldr	r2, [r7, #16]
 801235e:	b292      	uxth	r2, r2
 8012360:	4611      	mov	r1, r2
 8012362:	4618      	mov	r0, r3
 8012364:	f7fc ff3f 	bl	800f1e6 <st_word>
 8012368:	e006      	b.n	8012378 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801236c:	3320      	adds	r3, #32
 801236e:	693a      	ldr	r2, [r7, #16]
 8012370:	4611      	mov	r1, r2
 8012372:	4618      	mov	r0, r3
 8012374:	f7fc ff52 	bl	800f21c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8012378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237a:	3315      	adds	r3, #21
 801237c:	22f8      	movs	r2, #248	; 0xf8
 801237e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8012380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012382:	3318      	adds	r3, #24
 8012384:	213f      	movs	r1, #63	; 0x3f
 8012386:	4618      	mov	r0, r3
 8012388:	f7fc ff2d 	bl	800f1e6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	331a      	adds	r3, #26
 8012390:	21ff      	movs	r1, #255	; 0xff
 8012392:	4618      	mov	r0, r3
 8012394:	f7fc ff27 	bl	800f1e6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8012398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239a:	331c      	adds	r3, #28
 801239c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fc ff3c 	bl	800f21c <st_dword>
		if (fmt == FS_FAT32) {
 80123a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80123a8:	2b03      	cmp	r3, #3
 80123aa:	d131      	bne.n	8012410 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80123ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ae:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80123b2:	f7fa ff47 	bl	800d244 <get_fattime>
 80123b6:	4603      	mov	r3, r0
 80123b8:	4619      	mov	r1, r3
 80123ba:	4620      	mov	r0, r4
 80123bc:	f7fc ff2e 	bl	800f21c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80123c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c2:	3324      	adds	r3, #36	; 0x24
 80123c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7fc ff28 	bl	800f21c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80123cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ce:	332c      	adds	r3, #44	; 0x2c
 80123d0:	2102      	movs	r1, #2
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7fc ff22 	bl	800f21c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80123d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123da:	3330      	adds	r3, #48	; 0x30
 80123dc:	2101      	movs	r1, #1
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fc ff01 	bl	800f1e6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80123e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e6:	3332      	adds	r3, #50	; 0x32
 80123e8:	2106      	movs	r1, #6
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fc fefb 	bl	800f1e6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80123f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f2:	3340      	adds	r3, #64	; 0x40
 80123f4:	2280      	movs	r2, #128	; 0x80
 80123f6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80123f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fa:	3342      	adds	r3, #66	; 0x42
 80123fc:	2229      	movs	r2, #41	; 0x29
 80123fe:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8012400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012402:	3347      	adds	r3, #71	; 0x47
 8012404:	2213      	movs	r2, #19
 8012406:	4970      	ldr	r1, [pc, #448]	; (80125c8 <f_mkfs+0x6ec>)
 8012408:	4618      	mov	r0, r3
 801240a:	f7fc ff33 	bl	800f274 <mem_cpy>
 801240e:	e020      	b.n	8012452 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8012410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012412:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8012416:	f7fa ff15 	bl	800d244 <get_fattime>
 801241a:	4603      	mov	r3, r0
 801241c:	4619      	mov	r1, r3
 801241e:	4620      	mov	r0, r4
 8012420:	f7fc fefc 	bl	800f21c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8012424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012426:	3316      	adds	r3, #22
 8012428:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801242a:	b292      	uxth	r2, r2
 801242c:	4611      	mov	r1, r2
 801242e:	4618      	mov	r0, r3
 8012430:	f7fc fed9 	bl	800f1e6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8012434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012436:	3324      	adds	r3, #36	; 0x24
 8012438:	2280      	movs	r2, #128	; 0x80
 801243a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 801243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243e:	3326      	adds	r3, #38	; 0x26
 8012440:	2229      	movs	r2, #41	; 0x29
 8012442:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8012444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012446:	332b      	adds	r3, #43	; 0x2b
 8012448:	2213      	movs	r2, #19
 801244a:	4960      	ldr	r1, [pc, #384]	; (80125cc <f_mkfs+0x6f0>)
 801244c:	4618      	mov	r0, r3
 801244e:	f7fc ff11 	bl	800f274 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8012452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012454:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012458:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801245c:	4618      	mov	r0, r3
 801245e:	f7fc fec2 	bl	800f1e6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8012462:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8012466:	2301      	movs	r3, #1
 8012468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801246a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801246c:	f7fc fe42 	bl	800f0f4 <disk_write>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <f_mkfs+0x59e>
 8012476:	2301      	movs	r3, #1
 8012478:	e156      	b.n	8012728 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801247a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801247e:	2b03      	cmp	r3, #3
 8012480:	d140      	bne.n	8012504 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8012482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012484:	1d9a      	adds	r2, r3, #6
 8012486:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801248a:	2301      	movs	r3, #1
 801248c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801248e:	f7fc fe31 	bl	800f0f4 <disk_write>
			mem_set(buf, 0, ss);
 8012492:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012494:	461a      	mov	r2, r3
 8012496:	2100      	movs	r1, #0
 8012498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801249a:	f7fc ff0c 	bl	800f2b6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801249e:	494c      	ldr	r1, [pc, #304]	; (80125d0 <f_mkfs+0x6f4>)
 80124a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124a2:	f7fc febb 	bl	800f21c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80124a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80124ac:	4949      	ldr	r1, [pc, #292]	; (80125d4 <f_mkfs+0x6f8>)
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7fc feb4 	bl	800f21c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80124b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80124ba:	6a3b      	ldr	r3, [r7, #32]
 80124bc:	3b01      	subs	r3, #1
 80124be:	4619      	mov	r1, r3
 80124c0:	4610      	mov	r0, r2
 80124c2:	f7fc feab 	bl	800f21c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80124c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80124cc:	2102      	movs	r1, #2
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7fc fea4 	bl	800f21c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80124d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80124da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fc fe81 	bl	800f1e6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80124e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e6:	1dda      	adds	r2, r3, #7
 80124e8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80124ec:	2301      	movs	r3, #1
 80124ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80124f0:	f7fc fe00 	bl	800f0f4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80124f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f6:	1c5a      	adds	r2, r3, #1
 80124f8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80124fc:	2301      	movs	r3, #1
 80124fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012500:	f7fc fdf8 	bl	800f0f4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8012504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012506:	2100      	movs	r1, #0
 8012508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801250a:	f7fc fed4 	bl	800f2b6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801250e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012510:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8012512:	2300      	movs	r3, #0
 8012514:	64bb      	str	r3, [r7, #72]	; 0x48
 8012516:	e04b      	b.n	80125b0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8012518:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801251c:	2b03      	cmp	r3, #3
 801251e:	d113      	bne.n	8012548 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8012520:	f06f 0107 	mvn.w	r1, #7
 8012524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012526:	f7fc fe79 	bl	800f21c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252c:	3304      	adds	r3, #4
 801252e:	f04f 31ff 	mov.w	r1, #4294967295
 8012532:	4618      	mov	r0, r3
 8012534:	f7fc fe72 	bl	800f21c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8012538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253a:	3308      	adds	r3, #8
 801253c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8012540:	4618      	mov	r0, r3
 8012542:	f7fc fe6b 	bl	800f21c <st_dword>
 8012546:	e00b      	b.n	8012560 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8012548:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801254c:	2b01      	cmp	r3, #1
 801254e:	d101      	bne.n	8012554 <f_mkfs+0x678>
 8012550:	4b21      	ldr	r3, [pc, #132]	; (80125d8 <f_mkfs+0x6fc>)
 8012552:	e001      	b.n	8012558 <f_mkfs+0x67c>
 8012554:	f06f 0307 	mvn.w	r3, #7
 8012558:	4619      	mov	r1, r3
 801255a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801255c:	f7fc fe5e 	bl	800f21c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8012560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012562:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8012564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012568:	4293      	cmp	r3, r2
 801256a:	bf28      	it	cs
 801256c:	4613      	movcs	r3, r2
 801256e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8012570:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8012574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012576:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801257a:	f7fc fdbb 	bl	800f0f4 <disk_write>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d001      	beq.n	8012588 <f_mkfs+0x6ac>
 8012584:	2301      	movs	r3, #1
 8012586:	e0cf      	b.n	8012728 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8012588:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801258a:	461a      	mov	r2, r3
 801258c:	2100      	movs	r1, #0
 801258e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012590:	f7fc fe91 	bl	800f2b6 <mem_set>
				sect += n; nsect -= n;
 8012594:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012598:	4413      	add	r3, r2
 801259a:	667b      	str	r3, [r7, #100]	; 0x64
 801259c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801259e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125a0:	1ad3      	subs	r3, r2, r3
 80125a2:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80125a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d1dc      	bne.n	8012564 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80125aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125ac:	3301      	adds	r3, #1
 80125ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80125b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80125b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d3af      	bcc.n	8012518 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80125b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80125bc:	2b03      	cmp	r3, #3
 80125be:	d10d      	bne.n	80125dc <f_mkfs+0x700>
 80125c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125c2:	e00c      	b.n	80125de <f_mkfs+0x702>
 80125c4:	08018cb4 	.word	0x08018cb4
 80125c8:	08018cc0 	.word	0x08018cc0
 80125cc:	08018cd4 	.word	0x08018cd4
 80125d0:	41615252 	.word	0x41615252
 80125d4:	61417272 	.word	0x61417272
 80125d8:	00fffff8 	.word	0x00fffff8
 80125dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125de:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80125e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80125e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e4:	4293      	cmp	r3, r2
 80125e6:	bf28      	it	cs
 80125e8:	4613      	movcs	r3, r2
 80125ea:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80125ec:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80125f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80125f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80125f6:	f7fc fd7d 	bl	800f0f4 <disk_write>
 80125fa:	4603      	mov	r3, r0
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d001      	beq.n	8012604 <f_mkfs+0x728>
 8012600:	2301      	movs	r3, #1
 8012602:	e091      	b.n	8012728 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8012604:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012608:	4413      	add	r3, r2
 801260a:	667b      	str	r3, [r7, #100]	; 0x64
 801260c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801260e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012610:	1ad3      	subs	r3, r2, r3
 8012612:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8012614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1e2      	bne.n	80125e0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801261a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801261e:	2b03      	cmp	r3, #3
 8012620:	d103      	bne.n	801262a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8012622:	230c      	movs	r3, #12
 8012624:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8012628:	e010      	b.n	801264c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012630:	d303      	bcc.n	801263a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8012632:	2306      	movs	r3, #6
 8012634:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8012638:	e008      	b.n	801264c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801263a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801263e:	2b02      	cmp	r3, #2
 8012640:	d101      	bne.n	8012646 <f_mkfs+0x76a>
 8012642:	2304      	movs	r3, #4
 8012644:	e000      	b.n	8012648 <f_mkfs+0x76c>
 8012646:	2301      	movs	r3, #1
 8012648:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 801264c:	7afb      	ldrb	r3, [r7, #11]
 801264e:	f003 0308 	and.w	r3, r3, #8
 8012652:	2b00      	cmp	r3, #0
 8012654:	d15b      	bne.n	801270e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8012656:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012658:	461a      	mov	r2, r3
 801265a:	2100      	movs	r1, #0
 801265c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801265e:	f7fc fe2a 	bl	800f2b6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8012662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012664:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012668:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801266c:	4618      	mov	r0, r3
 801266e:	f7fc fdba 	bl	800f1e6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8012672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012674:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012678:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	2200      	movs	r2, #0
 801267e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8012680:	69bb      	ldr	r3, [r7, #24]
 8012682:	3301      	adds	r3, #1
 8012684:	2201      	movs	r2, #1
 8012686:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	3302      	adds	r3, #2
 801268c:	2201      	movs	r2, #1
 801268e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	3303      	adds	r3, #3
 8012694:	2200      	movs	r2, #0
 8012696:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8012698:	69bb      	ldr	r3, [r7, #24]
 801269a:	3304      	adds	r3, #4
 801269c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80126a0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80126a2:	693a      	ldr	r2, [r7, #16]
 80126a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a6:	441a      	add	r2, r3
 80126a8:	4b21      	ldr	r3, [pc, #132]	; (8012730 <f_mkfs+0x854>)
 80126aa:	fba3 1302 	umull	r1, r3, r3, r2
 80126ae:	1ad2      	subs	r2, r2, r3
 80126b0:	0852      	lsrs	r2, r2, #1
 80126b2:	4413      	add	r3, r2
 80126b4:	0b5b      	lsrs	r3, r3, #13
 80126b6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80126b8:	69bb      	ldr	r3, [r7, #24]
 80126ba:	3305      	adds	r3, #5
 80126bc:	22fe      	movs	r2, #254	; 0xfe
 80126be:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80126c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126c2:	089b      	lsrs	r3, r3, #2
 80126c4:	b2da      	uxtb	r2, r3
 80126c6:	69bb      	ldr	r3, [r7, #24]
 80126c8:	3306      	adds	r3, #6
 80126ca:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80126ce:	b2d2      	uxtb	r2, r2
 80126d0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	3307      	adds	r3, #7
 80126d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80126d8:	b2d2      	uxtb	r2, r2
 80126da:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	3308      	adds	r3, #8
 80126e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fc fd9a 	bl	800f21c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80126e8:	69bb      	ldr	r3, [r7, #24]
 80126ea:	330c      	adds	r3, #12
 80126ec:	693a      	ldr	r2, [r7, #16]
 80126ee:	4611      	mov	r1, r2
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7fc fd93 	bl	800f21c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80126f6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80126fa:	2301      	movs	r3, #1
 80126fc:	2200      	movs	r2, #0
 80126fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012700:	f7fc fcf8 	bl	800f0f4 <disk_write>
 8012704:	4603      	mov	r3, r0
 8012706:	2b00      	cmp	r3, #0
 8012708:	d001      	beq.n	801270e <f_mkfs+0x832>
 801270a:	2301      	movs	r3, #1
 801270c:	e00c      	b.n	8012728 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801270e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012712:	2200      	movs	r2, #0
 8012714:	2100      	movs	r1, #0
 8012716:	4618      	mov	r0, r3
 8012718:	f7fc fd0c 	bl	800f134 <disk_ioctl>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <f_mkfs+0x84a>
 8012722:	2301      	movs	r3, #1
 8012724:	e000      	b.n	8012728 <f_mkfs+0x84c>

	return FR_OK;
 8012726:	2300      	movs	r3, #0
}
 8012728:	4618      	mov	r0, r3
 801272a:	3774      	adds	r7, #116	; 0x74
 801272c:	46bd      	mov	sp, r7
 801272e:	bd90      	pop	{r4, r7, pc}
 8012730:	0515565b 	.word	0x0515565b

08012734 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012734:	b480      	push	{r7}
 8012736:	b087      	sub	sp, #28
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	4613      	mov	r3, r2
 8012740:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012742:	2301      	movs	r3, #1
 8012744:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012746:	2300      	movs	r3, #0
 8012748:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801274a:	4b1f      	ldr	r3, [pc, #124]	; (80127c8 <FATFS_LinkDriverEx+0x94>)
 801274c:	7a5b      	ldrb	r3, [r3, #9]
 801274e:	b2db      	uxtb	r3, r3
 8012750:	2b00      	cmp	r3, #0
 8012752:	d131      	bne.n	80127b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012754:	4b1c      	ldr	r3, [pc, #112]	; (80127c8 <FATFS_LinkDriverEx+0x94>)
 8012756:	7a5b      	ldrb	r3, [r3, #9]
 8012758:	b2db      	uxtb	r3, r3
 801275a:	461a      	mov	r2, r3
 801275c:	4b1a      	ldr	r3, [pc, #104]	; (80127c8 <FATFS_LinkDriverEx+0x94>)
 801275e:	2100      	movs	r1, #0
 8012760:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012762:	4b19      	ldr	r3, [pc, #100]	; (80127c8 <FATFS_LinkDriverEx+0x94>)
 8012764:	7a5b      	ldrb	r3, [r3, #9]
 8012766:	b2db      	uxtb	r3, r3
 8012768:	4a17      	ldr	r2, [pc, #92]	; (80127c8 <FATFS_LinkDriverEx+0x94>)
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	4413      	add	r3, r2
 801276e:	68fa      	ldr	r2, [r7, #12]
 8012770:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012772:	4b15      	ldr	r3, [pc, #84]	; (80127c8 <FATFS_LinkDriverEx+0x94>)
 8012774:	7a5b      	ldrb	r3, [r3, #9]
 8012776:	b2db      	uxtb	r3, r3
 8012778:	461a      	mov	r2, r3
 801277a:	4b13      	ldr	r3, [pc, #76]	; (80127c8 <FATFS_LinkDriverEx+0x94>)
 801277c:	4413      	add	r3, r2
 801277e:	79fa      	ldrb	r2, [r7, #7]
 8012780:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012782:	4b11      	ldr	r3, [pc, #68]	; (80127c8 <FATFS_LinkDriverEx+0x94>)
 8012784:	7a5b      	ldrb	r3, [r3, #9]
 8012786:	b2db      	uxtb	r3, r3
 8012788:	1c5a      	adds	r2, r3, #1
 801278a:	b2d1      	uxtb	r1, r2
 801278c:	4a0e      	ldr	r2, [pc, #56]	; (80127c8 <FATFS_LinkDriverEx+0x94>)
 801278e:	7251      	strb	r1, [r2, #9]
 8012790:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012792:	7dbb      	ldrb	r3, [r7, #22]
 8012794:	3330      	adds	r3, #48	; 0x30
 8012796:	b2da      	uxtb	r2, r3
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	3301      	adds	r3, #1
 80127a0:	223a      	movs	r2, #58	; 0x3a
 80127a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	3302      	adds	r3, #2
 80127a8:	222f      	movs	r2, #47	; 0x2f
 80127aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	3303      	adds	r3, #3
 80127b0:	2200      	movs	r2, #0
 80127b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80127b4:	2300      	movs	r3, #0
 80127b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80127b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	371c      	adds	r7, #28
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	20001424 	.word	0x20001424

080127cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80127d6:	2200      	movs	r2, #0
 80127d8:	6839      	ldr	r1, [r7, #0]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7ff ffaa 	bl	8012734 <FATFS_LinkDriverEx>
 80127e0:	4603      	mov	r3, r0
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3708      	adds	r7, #8
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
	...

080127ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b085      	sub	sp, #20
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	4603      	mov	r3, r0
 80127f4:	6039      	str	r1, [r7, #0]
 80127f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80127f8:	88fb      	ldrh	r3, [r7, #6]
 80127fa:	2b7f      	cmp	r3, #127	; 0x7f
 80127fc:	d802      	bhi.n	8012804 <ff_convert+0x18>
		c = chr;
 80127fe:	88fb      	ldrh	r3, [r7, #6]
 8012800:	81fb      	strh	r3, [r7, #14]
 8012802:	e025      	b.n	8012850 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00b      	beq.n	8012822 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801280a:	88fb      	ldrh	r3, [r7, #6]
 801280c:	2bff      	cmp	r3, #255	; 0xff
 801280e:	d805      	bhi.n	801281c <ff_convert+0x30>
 8012810:	88fb      	ldrh	r3, [r7, #6]
 8012812:	3b80      	subs	r3, #128	; 0x80
 8012814:	4a12      	ldr	r2, [pc, #72]	; (8012860 <ff_convert+0x74>)
 8012816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801281a:	e000      	b.n	801281e <ff_convert+0x32>
 801281c:	2300      	movs	r3, #0
 801281e:	81fb      	strh	r3, [r7, #14]
 8012820:	e016      	b.n	8012850 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012822:	2300      	movs	r3, #0
 8012824:	81fb      	strh	r3, [r7, #14]
 8012826:	e009      	b.n	801283c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012828:	89fb      	ldrh	r3, [r7, #14]
 801282a:	4a0d      	ldr	r2, [pc, #52]	; (8012860 <ff_convert+0x74>)
 801282c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012830:	88fa      	ldrh	r2, [r7, #6]
 8012832:	429a      	cmp	r2, r3
 8012834:	d006      	beq.n	8012844 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012836:	89fb      	ldrh	r3, [r7, #14]
 8012838:	3301      	adds	r3, #1
 801283a:	81fb      	strh	r3, [r7, #14]
 801283c:	89fb      	ldrh	r3, [r7, #14]
 801283e:	2b7f      	cmp	r3, #127	; 0x7f
 8012840:	d9f2      	bls.n	8012828 <ff_convert+0x3c>
 8012842:	e000      	b.n	8012846 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012844:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012846:	89fb      	ldrh	r3, [r7, #14]
 8012848:	3380      	adds	r3, #128	; 0x80
 801284a:	b29b      	uxth	r3, r3
 801284c:	b2db      	uxtb	r3, r3
 801284e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012850:	89fb      	ldrh	r3, [r7, #14]
}
 8012852:	4618      	mov	r0, r3
 8012854:	3714      	adds	r7, #20
 8012856:	46bd      	mov	sp, r7
 8012858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285c:	4770      	bx	lr
 801285e:	bf00      	nop
 8012860:	08018fec 	.word	0x08018fec

08012864 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012864:	b480      	push	{r7}
 8012866:	b087      	sub	sp, #28
 8012868:	af00      	add	r7, sp, #0
 801286a:	4603      	mov	r3, r0
 801286c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801286e:	88fb      	ldrh	r3, [r7, #6]
 8012870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012874:	d201      	bcs.n	801287a <ff_wtoupper+0x16>
 8012876:	4b3e      	ldr	r3, [pc, #248]	; (8012970 <ff_wtoupper+0x10c>)
 8012878:	e000      	b.n	801287c <ff_wtoupper+0x18>
 801287a:	4b3e      	ldr	r3, [pc, #248]	; (8012974 <ff_wtoupper+0x110>)
 801287c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	1c9a      	adds	r2, r3, #2
 8012882:	617a      	str	r2, [r7, #20]
 8012884:	881b      	ldrh	r3, [r3, #0]
 8012886:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012888:	8a7b      	ldrh	r3, [r7, #18]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d068      	beq.n	8012960 <ff_wtoupper+0xfc>
 801288e:	88fa      	ldrh	r2, [r7, #6]
 8012890:	8a7b      	ldrh	r3, [r7, #18]
 8012892:	429a      	cmp	r2, r3
 8012894:	d364      	bcc.n	8012960 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	1c9a      	adds	r2, r3, #2
 801289a:	617a      	str	r2, [r7, #20]
 801289c:	881b      	ldrh	r3, [r3, #0]
 801289e:	823b      	strh	r3, [r7, #16]
 80128a0:	8a3b      	ldrh	r3, [r7, #16]
 80128a2:	0a1b      	lsrs	r3, r3, #8
 80128a4:	81fb      	strh	r3, [r7, #14]
 80128a6:	8a3b      	ldrh	r3, [r7, #16]
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80128ac:	88fa      	ldrh	r2, [r7, #6]
 80128ae:	8a79      	ldrh	r1, [r7, #18]
 80128b0:	8a3b      	ldrh	r3, [r7, #16]
 80128b2:	440b      	add	r3, r1
 80128b4:	429a      	cmp	r2, r3
 80128b6:	da49      	bge.n	801294c <ff_wtoupper+0xe8>
			switch (cmd) {
 80128b8:	89fb      	ldrh	r3, [r7, #14]
 80128ba:	2b08      	cmp	r3, #8
 80128bc:	d84f      	bhi.n	801295e <ff_wtoupper+0xfa>
 80128be:	a201      	add	r2, pc, #4	; (adr r2, 80128c4 <ff_wtoupper+0x60>)
 80128c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128c4:	080128e9 	.word	0x080128e9
 80128c8:	080128fb 	.word	0x080128fb
 80128cc:	08012911 	.word	0x08012911
 80128d0:	08012919 	.word	0x08012919
 80128d4:	08012921 	.word	0x08012921
 80128d8:	08012929 	.word	0x08012929
 80128dc:	08012931 	.word	0x08012931
 80128e0:	08012939 	.word	0x08012939
 80128e4:	08012941 	.word	0x08012941
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80128e8:	88fa      	ldrh	r2, [r7, #6]
 80128ea:	8a7b      	ldrh	r3, [r7, #18]
 80128ec:	1ad3      	subs	r3, r2, r3
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	697a      	ldr	r2, [r7, #20]
 80128f2:	4413      	add	r3, r2
 80128f4:	881b      	ldrh	r3, [r3, #0]
 80128f6:	80fb      	strh	r3, [r7, #6]
 80128f8:	e027      	b.n	801294a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80128fa:	88fa      	ldrh	r2, [r7, #6]
 80128fc:	8a7b      	ldrh	r3, [r7, #18]
 80128fe:	1ad3      	subs	r3, r2, r3
 8012900:	b29b      	uxth	r3, r3
 8012902:	f003 0301 	and.w	r3, r3, #1
 8012906:	b29b      	uxth	r3, r3
 8012908:	88fa      	ldrh	r2, [r7, #6]
 801290a:	1ad3      	subs	r3, r2, r3
 801290c:	80fb      	strh	r3, [r7, #6]
 801290e:	e01c      	b.n	801294a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012910:	88fb      	ldrh	r3, [r7, #6]
 8012912:	3b10      	subs	r3, #16
 8012914:	80fb      	strh	r3, [r7, #6]
 8012916:	e018      	b.n	801294a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012918:	88fb      	ldrh	r3, [r7, #6]
 801291a:	3b20      	subs	r3, #32
 801291c:	80fb      	strh	r3, [r7, #6]
 801291e:	e014      	b.n	801294a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012920:	88fb      	ldrh	r3, [r7, #6]
 8012922:	3b30      	subs	r3, #48	; 0x30
 8012924:	80fb      	strh	r3, [r7, #6]
 8012926:	e010      	b.n	801294a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012928:	88fb      	ldrh	r3, [r7, #6]
 801292a:	3b1a      	subs	r3, #26
 801292c:	80fb      	strh	r3, [r7, #6]
 801292e:	e00c      	b.n	801294a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012930:	88fb      	ldrh	r3, [r7, #6]
 8012932:	3308      	adds	r3, #8
 8012934:	80fb      	strh	r3, [r7, #6]
 8012936:	e008      	b.n	801294a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012938:	88fb      	ldrh	r3, [r7, #6]
 801293a:	3b50      	subs	r3, #80	; 0x50
 801293c:	80fb      	strh	r3, [r7, #6]
 801293e:	e004      	b.n	801294a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012940:	88fb      	ldrh	r3, [r7, #6]
 8012942:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8012946:	80fb      	strh	r3, [r7, #6]
 8012948:	bf00      	nop
			}
			break;
 801294a:	e008      	b.n	801295e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801294c:	89fb      	ldrh	r3, [r7, #14]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d195      	bne.n	801287e <ff_wtoupper+0x1a>
 8012952:	8a3b      	ldrh	r3, [r7, #16]
 8012954:	005b      	lsls	r3, r3, #1
 8012956:	697a      	ldr	r2, [r7, #20]
 8012958:	4413      	add	r3, r2
 801295a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801295c:	e78f      	b.n	801287e <ff_wtoupper+0x1a>
			break;
 801295e:	bf00      	nop
	}

	return chr;
 8012960:	88fb      	ldrh	r3, [r7, #6]
}
 8012962:	4618      	mov	r0, r3
 8012964:	371c      	adds	r7, #28
 8012966:	46bd      	mov	sp, r7
 8012968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296c:	4770      	bx	lr
 801296e:	bf00      	nop
 8012970:	080190ec 	.word	0x080190ec
 8012974:	080192e0 	.word	0x080192e0

08012978 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f003 ffed 	bl	8016960 <malloc>
 8012986:	4603      	mov	r3, r0
}
 8012988:	4618      	mov	r0, r3
 801298a:	3708      	adds	r7, #8
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f003 ffe9 	bl	8016970 <free>
}
 801299e:	bf00      	nop
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
	...

080129a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80129ac:	2200      	movs	r2, #0
 80129ae:	4912      	ldr	r1, [pc, #72]	; (80129f8 <MX_USB_DEVICE_Init+0x50>)
 80129b0:	4812      	ldr	r0, [pc, #72]	; (80129fc <MX_USB_DEVICE_Init+0x54>)
 80129b2:	f7fb f9ab 	bl	800dd0c <USBD_Init>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d001      	beq.n	80129c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80129bc:	f7ee feb6 	bl	800172c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80129c0:	490f      	ldr	r1, [pc, #60]	; (8012a00 <MX_USB_DEVICE_Init+0x58>)
 80129c2:	480e      	ldr	r0, [pc, #56]	; (80129fc <MX_USB_DEVICE_Init+0x54>)
 80129c4:	f7fb f9d2 	bl	800dd6c <USBD_RegisterClass>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d001      	beq.n	80129d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80129ce:	f7ee fead 	bl	800172c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80129d2:	490c      	ldr	r1, [pc, #48]	; (8012a04 <MX_USB_DEVICE_Init+0x5c>)
 80129d4:	4809      	ldr	r0, [pc, #36]	; (80129fc <MX_USB_DEVICE_Init+0x54>)
 80129d6:	f7fb f8f3 	bl	800dbc0 <USBD_CDC_RegisterInterface>
 80129da:	4603      	mov	r3, r0
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d001      	beq.n	80129e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80129e0:	f7ee fea4 	bl	800172c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80129e4:	4805      	ldr	r0, [pc, #20]	; (80129fc <MX_USB_DEVICE_Init+0x54>)
 80129e6:	f7fb f9e8 	bl	800ddba <USBD_Start>
 80129ea:	4603      	mov	r3, r0
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d001      	beq.n	80129f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80129f0:	f7ee fe9c 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80129f4:	bf00      	nop
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	20000130 	.word	0x20000130
 80129fc:	20001430 	.word	0x20001430
 8012a00:	20000018 	.word	0x20000018
 8012a04:	2000011c 	.word	0x2000011c

08012a08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	4905      	ldr	r1, [pc, #20]	; (8012a24 <CDC_Init_FS+0x1c>)
 8012a10:	4805      	ldr	r0, [pc, #20]	; (8012a28 <CDC_Init_FS+0x20>)
 8012a12:	f7fb f8ea 	bl	800dbea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012a16:	4905      	ldr	r1, [pc, #20]	; (8012a2c <CDC_Init_FS+0x24>)
 8012a18:	4803      	ldr	r0, [pc, #12]	; (8012a28 <CDC_Init_FS+0x20>)
 8012a1a:	f7fb f904 	bl	800dc26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	20001f00 	.word	0x20001f00
 8012a28:	20001430 	.word	0x20001430
 8012a2c:	20001700 	.word	0x20001700

08012a30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012a30:	b480      	push	{r7}
 8012a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012a34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012a40:	b480      	push	{r7}
 8012a42:	b083      	sub	sp, #12
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	4603      	mov	r3, r0
 8012a48:	6039      	str	r1, [r7, #0]
 8012a4a:	71fb      	strb	r3, [r7, #7]
 8012a4c:	4613      	mov	r3, r2
 8012a4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012a50:	79fb      	ldrb	r3, [r7, #7]
 8012a52:	2b23      	cmp	r3, #35	; 0x23
 8012a54:	d84a      	bhi.n	8012aec <CDC_Control_FS+0xac>
 8012a56:	a201      	add	r2, pc, #4	; (adr r2, 8012a5c <CDC_Control_FS+0x1c>)
 8012a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a5c:	08012aed 	.word	0x08012aed
 8012a60:	08012aed 	.word	0x08012aed
 8012a64:	08012aed 	.word	0x08012aed
 8012a68:	08012aed 	.word	0x08012aed
 8012a6c:	08012aed 	.word	0x08012aed
 8012a70:	08012aed 	.word	0x08012aed
 8012a74:	08012aed 	.word	0x08012aed
 8012a78:	08012aed 	.word	0x08012aed
 8012a7c:	08012aed 	.word	0x08012aed
 8012a80:	08012aed 	.word	0x08012aed
 8012a84:	08012aed 	.word	0x08012aed
 8012a88:	08012aed 	.word	0x08012aed
 8012a8c:	08012aed 	.word	0x08012aed
 8012a90:	08012aed 	.word	0x08012aed
 8012a94:	08012aed 	.word	0x08012aed
 8012a98:	08012aed 	.word	0x08012aed
 8012a9c:	08012aed 	.word	0x08012aed
 8012aa0:	08012aed 	.word	0x08012aed
 8012aa4:	08012aed 	.word	0x08012aed
 8012aa8:	08012aed 	.word	0x08012aed
 8012aac:	08012aed 	.word	0x08012aed
 8012ab0:	08012aed 	.word	0x08012aed
 8012ab4:	08012aed 	.word	0x08012aed
 8012ab8:	08012aed 	.word	0x08012aed
 8012abc:	08012aed 	.word	0x08012aed
 8012ac0:	08012aed 	.word	0x08012aed
 8012ac4:	08012aed 	.word	0x08012aed
 8012ac8:	08012aed 	.word	0x08012aed
 8012acc:	08012aed 	.word	0x08012aed
 8012ad0:	08012aed 	.word	0x08012aed
 8012ad4:	08012aed 	.word	0x08012aed
 8012ad8:	08012aed 	.word	0x08012aed
 8012adc:	08012aed 	.word	0x08012aed
 8012ae0:	08012aed 	.word	0x08012aed
 8012ae4:	08012aed 	.word	0x08012aed
 8012ae8:	08012aed 	.word	0x08012aed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012aec:	bf00      	nop
  }

  return (USBD_OK);
 8012aee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	370c      	adds	r7, #12
 8012af4:	46bd      	mov	sp, r7
 8012af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afa:	4770      	bx	lr

08012afc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012b06:	6879      	ldr	r1, [r7, #4]
 8012b08:	4805      	ldr	r0, [pc, #20]	; (8012b20 <CDC_Receive_FS+0x24>)
 8012b0a:	f7fb f88c 	bl	800dc26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012b0e:	4804      	ldr	r0, [pc, #16]	; (8012b20 <CDC_Receive_FS+0x24>)
 8012b10:	f7fb f8d2 	bl	800dcb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012b14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	20001430 	.word	0x20001430

08012b24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b084      	sub	sp, #16
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012b30:	2300      	movs	r3, #0
 8012b32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012b34:	4b0d      	ldr	r3, [pc, #52]	; (8012b6c <CDC_Transmit_FS+0x48>)
 8012b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d001      	beq.n	8012b4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012b46:	2301      	movs	r3, #1
 8012b48:	e00b      	b.n	8012b62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012b4a:	887b      	ldrh	r3, [r7, #2]
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	6879      	ldr	r1, [r7, #4]
 8012b50:	4806      	ldr	r0, [pc, #24]	; (8012b6c <CDC_Transmit_FS+0x48>)
 8012b52:	f7fb f84a 	bl	800dbea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012b56:	4805      	ldr	r0, [pc, #20]	; (8012b6c <CDC_Transmit_FS+0x48>)
 8012b58:	f7fb f87e 	bl	800dc58 <USBD_CDC_TransmitPacket>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	3710      	adds	r7, #16
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	20001430 	.word	0x20001430

08012b70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012b70:	b480      	push	{r7}
 8012b72:	b087      	sub	sp, #28
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	60f8      	str	r0, [r7, #12]
 8012b78:	60b9      	str	r1, [r7, #8]
 8012b7a:	4613      	mov	r3, r2
 8012b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	371c      	adds	r7, #28
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr
	...

08012b94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b94:	b480      	push	{r7}
 8012b96:	b083      	sub	sp, #12
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	6039      	str	r1, [r7, #0]
 8012b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	2212      	movs	r2, #18
 8012ba4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012ba6:	4b03      	ldr	r3, [pc, #12]	; (8012bb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	370c      	adds	r7, #12
 8012bac:	46bd      	mov	sp, r7
 8012bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb2:	4770      	bx	lr
 8012bb4:	20000150 	.word	0x20000150

08012bb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b083      	sub	sp, #12
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	6039      	str	r1, [r7, #0]
 8012bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	2204      	movs	r2, #4
 8012bc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012bca:	4b03      	ldr	r3, [pc, #12]	; (8012bd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	370c      	adds	r7, #12
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr
 8012bd8:	20000170 	.word	0x20000170

08012bdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	4603      	mov	r3, r0
 8012be4:	6039      	str	r1, [r7, #0]
 8012be6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012be8:	79fb      	ldrb	r3, [r7, #7]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d105      	bne.n	8012bfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	4907      	ldr	r1, [pc, #28]	; (8012c10 <USBD_FS_ProductStrDescriptor+0x34>)
 8012bf2:	4808      	ldr	r0, [pc, #32]	; (8012c14 <USBD_FS_ProductStrDescriptor+0x38>)
 8012bf4:	f7fc f93d 	bl	800ee72 <USBD_GetString>
 8012bf8:	e004      	b.n	8012c04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012bfa:	683a      	ldr	r2, [r7, #0]
 8012bfc:	4904      	ldr	r1, [pc, #16]	; (8012c10 <USBD_FS_ProductStrDescriptor+0x34>)
 8012bfe:	4805      	ldr	r0, [pc, #20]	; (8012c14 <USBD_FS_ProductStrDescriptor+0x38>)
 8012c00:	f7fc f937 	bl	800ee72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c04:	4b02      	ldr	r3, [pc, #8]	; (8012c10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3708      	adds	r7, #8
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	20002700 	.word	0x20002700
 8012c14:	08018ce8 	.word	0x08018ce8

08012c18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	4603      	mov	r3, r0
 8012c20:	6039      	str	r1, [r7, #0]
 8012c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012c24:	683a      	ldr	r2, [r7, #0]
 8012c26:	4904      	ldr	r1, [pc, #16]	; (8012c38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012c28:	4804      	ldr	r0, [pc, #16]	; (8012c3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012c2a:	f7fc f922 	bl	800ee72 <USBD_GetString>
  return USBD_StrDesc;
 8012c2e:	4b02      	ldr	r3, [pc, #8]	; (8012c38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	20002700 	.word	0x20002700
 8012c3c:	08018d00 	.word	0x08018d00

08012c40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	4603      	mov	r3, r0
 8012c48:	6039      	str	r1, [r7, #0]
 8012c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	221a      	movs	r2, #26
 8012c50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012c52:	f000 f855 	bl	8012d00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012c56:	4b02      	ldr	r3, [pc, #8]	; (8012c60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3708      	adds	r7, #8
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	20000174 	.word	0x20000174

08012c64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	6039      	str	r1, [r7, #0]
 8012c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012c70:	79fb      	ldrb	r3, [r7, #7]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d105      	bne.n	8012c82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c76:	683a      	ldr	r2, [r7, #0]
 8012c78:	4907      	ldr	r1, [pc, #28]	; (8012c98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c7a:	4808      	ldr	r0, [pc, #32]	; (8012c9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c7c:	f7fc f8f9 	bl	800ee72 <USBD_GetString>
 8012c80:	e004      	b.n	8012c8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c82:	683a      	ldr	r2, [r7, #0]
 8012c84:	4904      	ldr	r1, [pc, #16]	; (8012c98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c86:	4805      	ldr	r0, [pc, #20]	; (8012c9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c88:	f7fc f8f3 	bl	800ee72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c8c:	4b02      	ldr	r3, [pc, #8]	; (8012c98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3708      	adds	r7, #8
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
 8012c96:	bf00      	nop
 8012c98:	20002700 	.word	0x20002700
 8012c9c:	08018d14 	.word	0x08018d14

08012ca0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	6039      	str	r1, [r7, #0]
 8012caa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012cac:	79fb      	ldrb	r3, [r7, #7]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d105      	bne.n	8012cbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012cb2:	683a      	ldr	r2, [r7, #0]
 8012cb4:	4907      	ldr	r1, [pc, #28]	; (8012cd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012cb6:	4808      	ldr	r0, [pc, #32]	; (8012cd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012cb8:	f7fc f8db 	bl	800ee72 <USBD_GetString>
 8012cbc:	e004      	b.n	8012cc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012cbe:	683a      	ldr	r2, [r7, #0]
 8012cc0:	4904      	ldr	r1, [pc, #16]	; (8012cd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012cc2:	4805      	ldr	r0, [pc, #20]	; (8012cd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012cc4:	f7fc f8d5 	bl	800ee72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012cc8:	4b02      	ldr	r3, [pc, #8]	; (8012cd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	20002700 	.word	0x20002700
 8012cd8:	08018d20 	.word	0x08018d20

08012cdc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b083      	sub	sp, #12
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	6039      	str	r1, [r7, #0]
 8012ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	220c      	movs	r2, #12
 8012cec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012cee:	4b03      	ldr	r3, [pc, #12]	; (8012cfc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	370c      	adds	r7, #12
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr
 8012cfc:	20000164 	.word	0x20000164

08012d00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012d06:	4b0f      	ldr	r3, [pc, #60]	; (8012d44 <Get_SerialNum+0x44>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012d0c:	4b0e      	ldr	r3, [pc, #56]	; (8012d48 <Get_SerialNum+0x48>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012d12:	4b0e      	ldr	r3, [pc, #56]	; (8012d4c <Get_SerialNum+0x4c>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012d18:	68fa      	ldr	r2, [r7, #12]
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d009      	beq.n	8012d3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012d26:	2208      	movs	r2, #8
 8012d28:	4909      	ldr	r1, [pc, #36]	; (8012d50 <Get_SerialNum+0x50>)
 8012d2a:	68f8      	ldr	r0, [r7, #12]
 8012d2c:	f000 f814 	bl	8012d58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012d30:	2204      	movs	r2, #4
 8012d32:	4908      	ldr	r1, [pc, #32]	; (8012d54 <Get_SerialNum+0x54>)
 8012d34:	68b8      	ldr	r0, [r7, #8]
 8012d36:	f000 f80f 	bl	8012d58 <IntToUnicode>
  }
}
 8012d3a:	bf00      	nop
 8012d3c:	3710      	adds	r7, #16
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	1fff7590 	.word	0x1fff7590
 8012d48:	1fff7594 	.word	0x1fff7594
 8012d4c:	1fff7598 	.word	0x1fff7598
 8012d50:	20000176 	.word	0x20000176
 8012d54:	20000186 	.word	0x20000186

08012d58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b087      	sub	sp, #28
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	60f8      	str	r0, [r7, #12]
 8012d60:	60b9      	str	r1, [r7, #8]
 8012d62:	4613      	mov	r3, r2
 8012d64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012d66:	2300      	movs	r3, #0
 8012d68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	75fb      	strb	r3, [r7, #23]
 8012d6e:	e027      	b.n	8012dc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	0f1b      	lsrs	r3, r3, #28
 8012d74:	2b09      	cmp	r3, #9
 8012d76:	d80b      	bhi.n	8012d90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	0f1b      	lsrs	r3, r3, #28
 8012d7c:	b2da      	uxtb	r2, r3
 8012d7e:	7dfb      	ldrb	r3, [r7, #23]
 8012d80:	005b      	lsls	r3, r3, #1
 8012d82:	4619      	mov	r1, r3
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	440b      	add	r3, r1
 8012d88:	3230      	adds	r2, #48	; 0x30
 8012d8a:	b2d2      	uxtb	r2, r2
 8012d8c:	701a      	strb	r2, [r3, #0]
 8012d8e:	e00a      	b.n	8012da6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	0f1b      	lsrs	r3, r3, #28
 8012d94:	b2da      	uxtb	r2, r3
 8012d96:	7dfb      	ldrb	r3, [r7, #23]
 8012d98:	005b      	lsls	r3, r3, #1
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	440b      	add	r3, r1
 8012da0:	3237      	adds	r2, #55	; 0x37
 8012da2:	b2d2      	uxtb	r2, r2
 8012da4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	011b      	lsls	r3, r3, #4
 8012daa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012dac:	7dfb      	ldrb	r3, [r7, #23]
 8012dae:	005b      	lsls	r3, r3, #1
 8012db0:	3301      	adds	r3, #1
 8012db2:	68ba      	ldr	r2, [r7, #8]
 8012db4:	4413      	add	r3, r2
 8012db6:	2200      	movs	r2, #0
 8012db8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012dba:	7dfb      	ldrb	r3, [r7, #23]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	75fb      	strb	r3, [r7, #23]
 8012dc0:	7dfa      	ldrb	r2, [r7, #23]
 8012dc2:	79fb      	ldrb	r3, [r7, #7]
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d3d3      	bcc.n	8012d70 <IntToUnicode+0x18>
  }
}
 8012dc8:	bf00      	nop
 8012dca:	bf00      	nop
 8012dcc:	371c      	adds	r7, #28
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd4:	4770      	bx	lr
	...

08012dd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b0b2      	sub	sp, #200	; 0xc8
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012de0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012de4:	2200      	movs	r2, #0
 8012de6:	601a      	str	r2, [r3, #0]
 8012de8:	605a      	str	r2, [r3, #4]
 8012dea:	609a      	str	r2, [r3, #8]
 8012dec:	60da      	str	r2, [r3, #12]
 8012dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012df0:	f107 0318 	add.w	r3, r7, #24
 8012df4:	229c      	movs	r2, #156	; 0x9c
 8012df6:	2100      	movs	r1, #0
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f003 fdcf 	bl	801699c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012e06:	d163      	bne.n	8012ed0 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012e0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012e14:	f107 0318 	add.w	r3, r7, #24
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f3 fb83 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8012e24:	f7ee fc82 	bl	800172c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e28:	4b2b      	ldr	r3, [pc, #172]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e2c:	4a2a      	ldr	r2, [pc, #168]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012e2e:	f043 0301 	orr.w	r3, r3, #1
 8012e32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e34:	4b28      	ldr	r3, [pc, #160]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e38:	f003 0301 	and.w	r3, r3, #1
 8012e3c:	617b      	str	r3, [r7, #20]
 8012e3e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 8012e40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e48:	2302      	movs	r3, #2
 8012e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e54:	2303      	movs	r3, #3
 8012e56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012e5a:	230a      	movs	r3, #10
 8012e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012e60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012e64:	4619      	mov	r1, r3
 8012e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012e6a:	f7f0 feeb 	bl	8003c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012e6e:	4b1a      	ldr	r3, [pc, #104]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e72:	4a19      	ldr	r2, [pc, #100]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e7a:	4b17      	ldr	r3, [pc, #92]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012e82:	613b      	str	r3, [r7, #16]
 8012e84:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012e86:	4b14      	ldr	r3, [pc, #80]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d114      	bne.n	8012ebc <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012e92:	4b11      	ldr	r3, [pc, #68]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e96:	4a10      	ldr	r2, [pc, #64]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8012e9e:	4b0e      	ldr	r3, [pc, #56]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ea6:	60fb      	str	r3, [r7, #12]
 8012ea8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8012eaa:	f7f2 fc47 	bl	800573c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8012eae:	4b0a      	ldr	r3, [pc, #40]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012eb2:	4a09      	ldr	r2, [pc, #36]	; (8012ed8 <HAL_PCD_MspInit+0x100>)
 8012eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8012eba:	e001      	b.n	8012ec0 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8012ebc:	f7f2 fc3e 	bl	800573c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	2043      	movs	r0, #67	; 0x43
 8012ec6:	f7f0 f9b6 	bl	8003236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012eca:	2043      	movs	r0, #67	; 0x43
 8012ecc:	f7f0 f9cf 	bl	800326e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012ed0:	bf00      	nop
 8012ed2:	37c8      	adds	r7, #200	; 0xc8
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	40021000 	.word	0x40021000

08012edc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	4610      	mov	r0, r2
 8012ef4:	f7fa ffac 	bl	800de50 <USBD_LL_SetupStage>
}
 8012ef8:	bf00      	nop
 8012efa:	3708      	adds	r7, #8
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}

08012f00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	460b      	mov	r3, r1
 8012f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012f12:	78fa      	ldrb	r2, [r7, #3]
 8012f14:	6879      	ldr	r1, [r7, #4]
 8012f16:	4613      	mov	r3, r2
 8012f18:	00db      	lsls	r3, r3, #3
 8012f1a:	4413      	add	r3, r2
 8012f1c:	009b      	lsls	r3, r3, #2
 8012f1e:	440b      	add	r3, r1
 8012f20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	78fb      	ldrb	r3, [r7, #3]
 8012f28:	4619      	mov	r1, r3
 8012f2a:	f7fa ffe6 	bl	800defa <USBD_LL_DataOutStage>
}
 8012f2e:	bf00      	nop
 8012f30:	3708      	adds	r7, #8
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}

08012f36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f36:	b580      	push	{r7, lr}
 8012f38:	b082      	sub	sp, #8
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
 8012f3e:	460b      	mov	r3, r1
 8012f40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012f48:	78fa      	ldrb	r2, [r7, #3]
 8012f4a:	6879      	ldr	r1, [r7, #4]
 8012f4c:	4613      	mov	r3, r2
 8012f4e:	00db      	lsls	r3, r3, #3
 8012f50:	4413      	add	r3, r2
 8012f52:	009b      	lsls	r3, r3, #2
 8012f54:	440b      	add	r3, r1
 8012f56:	334c      	adds	r3, #76	; 0x4c
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	78fb      	ldrb	r3, [r7, #3]
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	f7fb f82f 	bl	800dfc0 <USBD_LL_DataInStage>
}
 8012f62:	bf00      	nop
 8012f64:	3708      	adds	r7, #8
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}

08012f6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f6a:	b580      	push	{r7, lr}
 8012f6c:	b082      	sub	sp, #8
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fb f943 	bl	800e204 <USBD_LL_SOF>
}
 8012f7e:	bf00      	nop
 8012f80:	3708      	adds	r7, #8
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}

08012f86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f86:	b580      	push	{r7, lr}
 8012f88:	b084      	sub	sp, #16
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012f8e:	2301      	movs	r3, #1
 8012f90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	68db      	ldr	r3, [r3, #12]
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	d001      	beq.n	8012f9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012f9a:	f7ee fbc7 	bl	800172c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fa4:	7bfa      	ldrb	r2, [r7, #15]
 8012fa6:	4611      	mov	r1, r2
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7fb f8ed 	bl	800e188 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7fb f899 	bl	800e0ec <USBD_LL_Reset>
}
 8012fba:	bf00      	nop
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
	...

08012fc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	6812      	ldr	r2, [r2, #0]
 8012fda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012fde:	f043 0301 	orr.w	r3, r3, #1
 8012fe2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7fb f8dc 	bl	800e1a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6a1b      	ldr	r3, [r3, #32]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d005      	beq.n	8013004 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012ff8:	4b04      	ldr	r3, [pc, #16]	; (801300c <HAL_PCD_SuspendCallback+0x48>)
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	4a03      	ldr	r2, [pc, #12]	; (801300c <HAL_PCD_SuspendCallback+0x48>)
 8012ffe:	f043 0306 	orr.w	r3, r3, #6
 8013002:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013004:	bf00      	nop
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	e000ed00 	.word	0xe000ed00

08013010 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	687a      	ldr	r2, [r7, #4]
 8013024:	6812      	ldr	r2, [r2, #0]
 8013026:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801302a:	f023 0301 	bic.w	r3, r3, #1
 801302e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6a1b      	ldr	r3, [r3, #32]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d007      	beq.n	8013048 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013038:	4b08      	ldr	r3, [pc, #32]	; (801305c <HAL_PCD_ResumeCallback+0x4c>)
 801303a:	691b      	ldr	r3, [r3, #16]
 801303c:	4a07      	ldr	r2, [pc, #28]	; (801305c <HAL_PCD_ResumeCallback+0x4c>)
 801303e:	f023 0306 	bic.w	r3, r3, #6
 8013042:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013044:	f000 faf4 	bl	8013630 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801304e:	4618      	mov	r0, r3
 8013050:	f7fb f8c0 	bl	800e1d4 <USBD_LL_Resume>
}
 8013054:	bf00      	nop
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}
 801305c:	e000ed00 	.word	0xe000ed00

08013060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	460b      	mov	r3, r1
 801306a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013072:	78fa      	ldrb	r2, [r7, #3]
 8013074:	4611      	mov	r1, r2
 8013076:	4618      	mov	r0, r3
 8013078:	f7fb f90c 	bl	800e294 <USBD_LL_IsoOUTIncomplete>
}
 801307c:	bf00      	nop
 801307e:	3708      	adds	r7, #8
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	460b      	mov	r3, r1
 801308e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013096:	78fa      	ldrb	r2, [r7, #3]
 8013098:	4611      	mov	r1, r2
 801309a:	4618      	mov	r0, r3
 801309c:	f7fb f8d4 	bl	800e248 <USBD_LL_IsoINIncomplete>
}
 80130a0:	bf00      	nop
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7fb f912 	bl	800e2e0 <USBD_LL_DevConnected>
}
 80130bc:	bf00      	nop
 80130be:	3708      	adds	r7, #8
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7fb f90f 	bl	800e2f6 <USBD_LL_DevDisconnected>
}
 80130d8:	bf00      	nop
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}

080130e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d139      	bne.n	8013164 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80130f0:	4a1f      	ldr	r2, [pc, #124]	; (8013170 <USBD_LL_Init+0x90>)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	4a1d      	ldr	r2, [pc, #116]	; (8013170 <USBD_LL_Init+0x90>)
 80130fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013100:	4b1b      	ldr	r3, [pc, #108]	; (8013170 <USBD_LL_Init+0x90>)
 8013102:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8013108:	4b19      	ldr	r3, [pc, #100]	; (8013170 <USBD_LL_Init+0x90>)
 801310a:	2206      	movs	r2, #6
 801310c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801310e:	4b18      	ldr	r3, [pc, #96]	; (8013170 <USBD_LL_Init+0x90>)
 8013110:	2202      	movs	r2, #2
 8013112:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013114:	4b16      	ldr	r3, [pc, #88]	; (8013170 <USBD_LL_Init+0x90>)
 8013116:	2200      	movs	r2, #0
 8013118:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801311a:	4b15      	ldr	r3, [pc, #84]	; (8013170 <USBD_LL_Init+0x90>)
 801311c:	2200      	movs	r2, #0
 801311e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013120:	4b13      	ldr	r3, [pc, #76]	; (8013170 <USBD_LL_Init+0x90>)
 8013122:	2200      	movs	r2, #0
 8013124:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8013126:	4b12      	ldr	r3, [pc, #72]	; (8013170 <USBD_LL_Init+0x90>)
 8013128:	2201      	movs	r2, #1
 801312a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801312c:	4b10      	ldr	r3, [pc, #64]	; (8013170 <USBD_LL_Init+0x90>)
 801312e:	2200      	movs	r2, #0
 8013130:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013132:	4b0f      	ldr	r3, [pc, #60]	; (8013170 <USBD_LL_Init+0x90>)
 8013134:	2200      	movs	r2, #0
 8013136:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013138:	480d      	ldr	r0, [pc, #52]	; (8013170 <USBD_LL_Init+0x90>)
 801313a:	f7f1 f86b 	bl	8004214 <HAL_PCD_Init>
 801313e:	4603      	mov	r3, r0
 8013140:	2b00      	cmp	r3, #0
 8013142:	d001      	beq.n	8013148 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8013144:	f7ee faf2 	bl	800172c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013148:	2180      	movs	r1, #128	; 0x80
 801314a:	4809      	ldr	r0, [pc, #36]	; (8013170 <USBD_LL_Init+0x90>)
 801314c:	f7f2 f9ed 	bl	800552a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013150:	2240      	movs	r2, #64	; 0x40
 8013152:	2100      	movs	r1, #0
 8013154:	4806      	ldr	r0, [pc, #24]	; (8013170 <USBD_LL_Init+0x90>)
 8013156:	f7f2 f9a1 	bl	800549c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801315a:	2280      	movs	r2, #128	; 0x80
 801315c:	2101      	movs	r1, #1
 801315e:	4804      	ldr	r0, [pc, #16]	; (8013170 <USBD_LL_Init+0x90>)
 8013160:	f7f2 f99c 	bl	800549c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013164:	2300      	movs	r3, #0
}
 8013166:	4618      	mov	r0, r3
 8013168:	3708      	adds	r7, #8
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	20002900 	.word	0x20002900

08013174 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b084      	sub	sp, #16
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801317c:	2300      	movs	r3, #0
 801317e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013180:	2300      	movs	r3, #0
 8013182:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801318a:	4618      	mov	r0, r3
 801318c:	f7f1 f966 	bl	800445c <HAL_PCD_Start>
 8013190:	4603      	mov	r3, r0
 8013192:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013194:	7bbb      	ldrb	r3, [r7, #14]
 8013196:	2b03      	cmp	r3, #3
 8013198:	d816      	bhi.n	80131c8 <USBD_LL_Start+0x54>
 801319a:	a201      	add	r2, pc, #4	; (adr r2, 80131a0 <USBD_LL_Start+0x2c>)
 801319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a0:	080131b1 	.word	0x080131b1
 80131a4:	080131b7 	.word	0x080131b7
 80131a8:	080131bd 	.word	0x080131bd
 80131ac:	080131c3 	.word	0x080131c3
    case HAL_OK :
      usb_status = USBD_OK;
 80131b0:	2300      	movs	r3, #0
 80131b2:	73fb      	strb	r3, [r7, #15]
    break;
 80131b4:	e00b      	b.n	80131ce <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80131b6:	2303      	movs	r3, #3
 80131b8:	73fb      	strb	r3, [r7, #15]
    break;
 80131ba:	e008      	b.n	80131ce <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80131bc:	2301      	movs	r3, #1
 80131be:	73fb      	strb	r3, [r7, #15]
    break;
 80131c0:	e005      	b.n	80131ce <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80131c2:	2303      	movs	r3, #3
 80131c4:	73fb      	strb	r3, [r7, #15]
    break;
 80131c6:	e002      	b.n	80131ce <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80131c8:	2303      	movs	r3, #3
 80131ca:	73fb      	strb	r3, [r7, #15]
    break;
 80131cc:	bf00      	nop
  }
  return usb_status;
 80131ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3710      	adds	r7, #16
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	4608      	mov	r0, r1
 80131e2:	4611      	mov	r1, r2
 80131e4:	461a      	mov	r2, r3
 80131e6:	4603      	mov	r3, r0
 80131e8:	70fb      	strb	r3, [r7, #3]
 80131ea:	460b      	mov	r3, r1
 80131ec:	70bb      	strb	r3, [r7, #2]
 80131ee:	4613      	mov	r3, r2
 80131f0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131f2:	2300      	movs	r3, #0
 80131f4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131f6:	2300      	movs	r3, #0
 80131f8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013200:	78bb      	ldrb	r3, [r7, #2]
 8013202:	883a      	ldrh	r2, [r7, #0]
 8013204:	78f9      	ldrb	r1, [r7, #3]
 8013206:	f7f1 fe10 	bl	8004e2a <HAL_PCD_EP_Open>
 801320a:	4603      	mov	r3, r0
 801320c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801320e:	7bbb      	ldrb	r3, [r7, #14]
 8013210:	2b03      	cmp	r3, #3
 8013212:	d817      	bhi.n	8013244 <USBD_LL_OpenEP+0x6c>
 8013214:	a201      	add	r2, pc, #4	; (adr r2, 801321c <USBD_LL_OpenEP+0x44>)
 8013216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801321a:	bf00      	nop
 801321c:	0801322d 	.word	0x0801322d
 8013220:	08013233 	.word	0x08013233
 8013224:	08013239 	.word	0x08013239
 8013228:	0801323f 	.word	0x0801323f
    case HAL_OK :
      usb_status = USBD_OK;
 801322c:	2300      	movs	r3, #0
 801322e:	73fb      	strb	r3, [r7, #15]
    break;
 8013230:	e00b      	b.n	801324a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013232:	2303      	movs	r3, #3
 8013234:	73fb      	strb	r3, [r7, #15]
    break;
 8013236:	e008      	b.n	801324a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013238:	2301      	movs	r3, #1
 801323a:	73fb      	strb	r3, [r7, #15]
    break;
 801323c:	e005      	b.n	801324a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801323e:	2303      	movs	r3, #3
 8013240:	73fb      	strb	r3, [r7, #15]
    break;
 8013242:	e002      	b.n	801324a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013244:	2303      	movs	r3, #3
 8013246:	73fb      	strb	r3, [r7, #15]
    break;
 8013248:	bf00      	nop
  }
  return usb_status;
 801324a:	7bfb      	ldrb	r3, [r7, #15]
}
 801324c:	4618      	mov	r0, r3
 801324e:	3710      	adds	r7, #16
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}

08013254 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b084      	sub	sp, #16
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	460b      	mov	r3, r1
 801325e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013260:	2300      	movs	r3, #0
 8013262:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013264:	2300      	movs	r3, #0
 8013266:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801326e:	78fa      	ldrb	r2, [r7, #3]
 8013270:	4611      	mov	r1, r2
 8013272:	4618      	mov	r0, r3
 8013274:	f7f1 fe41 	bl	8004efa <HAL_PCD_EP_Close>
 8013278:	4603      	mov	r3, r0
 801327a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801327c:	7bbb      	ldrb	r3, [r7, #14]
 801327e:	2b03      	cmp	r3, #3
 8013280:	d816      	bhi.n	80132b0 <USBD_LL_CloseEP+0x5c>
 8013282:	a201      	add	r2, pc, #4	; (adr r2, 8013288 <USBD_LL_CloseEP+0x34>)
 8013284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013288:	08013299 	.word	0x08013299
 801328c:	0801329f 	.word	0x0801329f
 8013290:	080132a5 	.word	0x080132a5
 8013294:	080132ab 	.word	0x080132ab
    case HAL_OK :
      usb_status = USBD_OK;
 8013298:	2300      	movs	r3, #0
 801329a:	73fb      	strb	r3, [r7, #15]
    break;
 801329c:	e00b      	b.n	80132b6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801329e:	2303      	movs	r3, #3
 80132a0:	73fb      	strb	r3, [r7, #15]
    break;
 80132a2:	e008      	b.n	80132b6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80132a4:	2301      	movs	r3, #1
 80132a6:	73fb      	strb	r3, [r7, #15]
    break;
 80132a8:	e005      	b.n	80132b6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80132aa:	2303      	movs	r3, #3
 80132ac:	73fb      	strb	r3, [r7, #15]
    break;
 80132ae:	e002      	b.n	80132b6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80132b0:	2303      	movs	r3, #3
 80132b2:	73fb      	strb	r3, [r7, #15]
    break;
 80132b4:	bf00      	nop
  }
  return usb_status;
 80132b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	460b      	mov	r3, r1
 80132ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132cc:	2300      	movs	r3, #0
 80132ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132d0:	2300      	movs	r3, #0
 80132d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132da:	78fa      	ldrb	r2, [r7, #3]
 80132dc:	4611      	mov	r1, r2
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f1 fee8 	bl	80050b4 <HAL_PCD_EP_SetStall>
 80132e4:	4603      	mov	r3, r0
 80132e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80132e8:	7bbb      	ldrb	r3, [r7, #14]
 80132ea:	2b03      	cmp	r3, #3
 80132ec:	d816      	bhi.n	801331c <USBD_LL_StallEP+0x5c>
 80132ee:	a201      	add	r2, pc, #4	; (adr r2, 80132f4 <USBD_LL_StallEP+0x34>)
 80132f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132f4:	08013305 	.word	0x08013305
 80132f8:	0801330b 	.word	0x0801330b
 80132fc:	08013311 	.word	0x08013311
 8013300:	08013317 	.word	0x08013317
    case HAL_OK :
      usb_status = USBD_OK;
 8013304:	2300      	movs	r3, #0
 8013306:	73fb      	strb	r3, [r7, #15]
    break;
 8013308:	e00b      	b.n	8013322 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801330a:	2303      	movs	r3, #3
 801330c:	73fb      	strb	r3, [r7, #15]
    break;
 801330e:	e008      	b.n	8013322 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013310:	2301      	movs	r3, #1
 8013312:	73fb      	strb	r3, [r7, #15]
    break;
 8013314:	e005      	b.n	8013322 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013316:	2303      	movs	r3, #3
 8013318:	73fb      	strb	r3, [r7, #15]
    break;
 801331a:	e002      	b.n	8013322 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801331c:	2303      	movs	r3, #3
 801331e:	73fb      	strb	r3, [r7, #15]
    break;
 8013320:	bf00      	nop
  }
  return usb_status;
 8013322:	7bfb      	ldrb	r3, [r7, #15]
}
 8013324:	4618      	mov	r0, r3
 8013326:	3710      	adds	r7, #16
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	460b      	mov	r3, r1
 8013336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013338:	2300      	movs	r3, #0
 801333a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801333c:	2300      	movs	r3, #0
 801333e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013346:	78fa      	ldrb	r2, [r7, #3]
 8013348:	4611      	mov	r1, r2
 801334a:	4618      	mov	r0, r3
 801334c:	f7f1 ff14 	bl	8005178 <HAL_PCD_EP_ClrStall>
 8013350:	4603      	mov	r3, r0
 8013352:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013354:	7bbb      	ldrb	r3, [r7, #14]
 8013356:	2b03      	cmp	r3, #3
 8013358:	d816      	bhi.n	8013388 <USBD_LL_ClearStallEP+0x5c>
 801335a:	a201      	add	r2, pc, #4	; (adr r2, 8013360 <USBD_LL_ClearStallEP+0x34>)
 801335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013360:	08013371 	.word	0x08013371
 8013364:	08013377 	.word	0x08013377
 8013368:	0801337d 	.word	0x0801337d
 801336c:	08013383 	.word	0x08013383
    case HAL_OK :
      usb_status = USBD_OK;
 8013370:	2300      	movs	r3, #0
 8013372:	73fb      	strb	r3, [r7, #15]
    break;
 8013374:	e00b      	b.n	801338e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013376:	2303      	movs	r3, #3
 8013378:	73fb      	strb	r3, [r7, #15]
    break;
 801337a:	e008      	b.n	801338e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801337c:	2301      	movs	r3, #1
 801337e:	73fb      	strb	r3, [r7, #15]
    break;
 8013380:	e005      	b.n	801338e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013382:	2303      	movs	r3, #3
 8013384:	73fb      	strb	r3, [r7, #15]
    break;
 8013386:	e002      	b.n	801338e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013388:	2303      	movs	r3, #3
 801338a:	73fb      	strb	r3, [r7, #15]
    break;
 801338c:	bf00      	nop
  }
  return usb_status;
 801338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013390:	4618      	mov	r0, r3
 8013392:	3710      	adds	r7, #16
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}

08013398 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013398:	b480      	push	{r7}
 801339a:	b085      	sub	sp, #20
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	460b      	mov	r3, r1
 80133a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80133aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80133ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	da0b      	bge.n	80133cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80133b4:	78fb      	ldrb	r3, [r7, #3]
 80133b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80133ba:	68f9      	ldr	r1, [r7, #12]
 80133bc:	4613      	mov	r3, r2
 80133be:	00db      	lsls	r3, r3, #3
 80133c0:	4413      	add	r3, r2
 80133c2:	009b      	lsls	r3, r3, #2
 80133c4:	440b      	add	r3, r1
 80133c6:	333e      	adds	r3, #62	; 0x3e
 80133c8:	781b      	ldrb	r3, [r3, #0]
 80133ca:	e00b      	b.n	80133e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80133cc:	78fb      	ldrb	r3, [r7, #3]
 80133ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80133d2:	68f9      	ldr	r1, [r7, #12]
 80133d4:	4613      	mov	r3, r2
 80133d6:	00db      	lsls	r3, r3, #3
 80133d8:	4413      	add	r3, r2
 80133da:	009b      	lsls	r3, r3, #2
 80133dc:	440b      	add	r3, r1
 80133de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80133e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3714      	adds	r7, #20
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr

080133f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	460b      	mov	r3, r1
 80133fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133fc:	2300      	movs	r3, #0
 80133fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013400:	2300      	movs	r3, #0
 8013402:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801340a:	78fa      	ldrb	r2, [r7, #3]
 801340c:	4611      	mov	r1, r2
 801340e:	4618      	mov	r0, r3
 8013410:	f7f1 fce6 	bl	8004de0 <HAL_PCD_SetAddress>
 8013414:	4603      	mov	r3, r0
 8013416:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013418:	7bbb      	ldrb	r3, [r7, #14]
 801341a:	2b03      	cmp	r3, #3
 801341c:	d816      	bhi.n	801344c <USBD_LL_SetUSBAddress+0x5c>
 801341e:	a201      	add	r2, pc, #4	; (adr r2, 8013424 <USBD_LL_SetUSBAddress+0x34>)
 8013420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013424:	08013435 	.word	0x08013435
 8013428:	0801343b 	.word	0x0801343b
 801342c:	08013441 	.word	0x08013441
 8013430:	08013447 	.word	0x08013447
    case HAL_OK :
      usb_status = USBD_OK;
 8013434:	2300      	movs	r3, #0
 8013436:	73fb      	strb	r3, [r7, #15]
    break;
 8013438:	e00b      	b.n	8013452 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801343a:	2303      	movs	r3, #3
 801343c:	73fb      	strb	r3, [r7, #15]
    break;
 801343e:	e008      	b.n	8013452 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013440:	2301      	movs	r3, #1
 8013442:	73fb      	strb	r3, [r7, #15]
    break;
 8013444:	e005      	b.n	8013452 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013446:	2303      	movs	r3, #3
 8013448:	73fb      	strb	r3, [r7, #15]
    break;
 801344a:	e002      	b.n	8013452 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801344c:	2303      	movs	r3, #3
 801344e:	73fb      	strb	r3, [r7, #15]
    break;
 8013450:	bf00      	nop
  }
  return usb_status;
 8013452:	7bfb      	ldrb	r3, [r7, #15]
}
 8013454:	4618      	mov	r0, r3
 8013456:	3710      	adds	r7, #16
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}

0801345c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b086      	sub	sp, #24
 8013460:	af00      	add	r7, sp, #0
 8013462:	60f8      	str	r0, [r7, #12]
 8013464:	607a      	str	r2, [r7, #4]
 8013466:	603b      	str	r3, [r7, #0]
 8013468:	460b      	mov	r3, r1
 801346a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801346c:	2300      	movs	r3, #0
 801346e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013470:	2300      	movs	r3, #0
 8013472:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801347a:	7af9      	ldrb	r1, [r7, #11]
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	f7f1 fddb 	bl	800503a <HAL_PCD_EP_Transmit>
 8013484:	4603      	mov	r3, r0
 8013486:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013488:	7dbb      	ldrb	r3, [r7, #22]
 801348a:	2b03      	cmp	r3, #3
 801348c:	d816      	bhi.n	80134bc <USBD_LL_Transmit+0x60>
 801348e:	a201      	add	r2, pc, #4	; (adr r2, 8013494 <USBD_LL_Transmit+0x38>)
 8013490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013494:	080134a5 	.word	0x080134a5
 8013498:	080134ab 	.word	0x080134ab
 801349c:	080134b1 	.word	0x080134b1
 80134a0:	080134b7 	.word	0x080134b7
    case HAL_OK :
      usb_status = USBD_OK;
 80134a4:	2300      	movs	r3, #0
 80134a6:	75fb      	strb	r3, [r7, #23]
    break;
 80134a8:	e00b      	b.n	80134c2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134aa:	2303      	movs	r3, #3
 80134ac:	75fb      	strb	r3, [r7, #23]
    break;
 80134ae:	e008      	b.n	80134c2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134b0:	2301      	movs	r3, #1
 80134b2:	75fb      	strb	r3, [r7, #23]
    break;
 80134b4:	e005      	b.n	80134c2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80134b6:	2303      	movs	r3, #3
 80134b8:	75fb      	strb	r3, [r7, #23]
    break;
 80134ba:	e002      	b.n	80134c2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80134bc:	2303      	movs	r3, #3
 80134be:	75fb      	strb	r3, [r7, #23]
    break;
 80134c0:	bf00      	nop
  }
  return usb_status;
 80134c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3718      	adds	r7, #24
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b086      	sub	sp, #24
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	607a      	str	r2, [r7, #4]
 80134d6:	603b      	str	r3, [r7, #0]
 80134d8:	460b      	mov	r3, r1
 80134da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134dc:	2300      	movs	r3, #0
 80134de:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134e0:	2300      	movs	r3, #0
 80134e2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134ea:	7af9      	ldrb	r1, [r7, #11]
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	687a      	ldr	r2, [r7, #4]
 80134f0:	f7f1 fd4d 	bl	8004f8e <HAL_PCD_EP_Receive>
 80134f4:	4603      	mov	r3, r0
 80134f6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80134f8:	7dbb      	ldrb	r3, [r7, #22]
 80134fa:	2b03      	cmp	r3, #3
 80134fc:	d816      	bhi.n	801352c <USBD_LL_PrepareReceive+0x60>
 80134fe:	a201      	add	r2, pc, #4	; (adr r2, 8013504 <USBD_LL_PrepareReceive+0x38>)
 8013500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013504:	08013515 	.word	0x08013515
 8013508:	0801351b 	.word	0x0801351b
 801350c:	08013521 	.word	0x08013521
 8013510:	08013527 	.word	0x08013527
    case HAL_OK :
      usb_status = USBD_OK;
 8013514:	2300      	movs	r3, #0
 8013516:	75fb      	strb	r3, [r7, #23]
    break;
 8013518:	e00b      	b.n	8013532 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801351a:	2303      	movs	r3, #3
 801351c:	75fb      	strb	r3, [r7, #23]
    break;
 801351e:	e008      	b.n	8013532 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013520:	2301      	movs	r3, #1
 8013522:	75fb      	strb	r3, [r7, #23]
    break;
 8013524:	e005      	b.n	8013532 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013526:	2303      	movs	r3, #3
 8013528:	75fb      	strb	r3, [r7, #23]
    break;
 801352a:	e002      	b.n	8013532 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 801352c:	2303      	movs	r3, #3
 801352e:	75fb      	strb	r3, [r7, #23]
    break;
 8013530:	bf00      	nop
  }
  return usb_status;
 8013532:	7dfb      	ldrb	r3, [r7, #23]
}
 8013534:	4618      	mov	r0, r3
 8013536:	3718      	adds	r7, #24
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}

0801353c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	460b      	mov	r3, r1
 8013546:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801354e:	78fa      	ldrb	r2, [r7, #3]
 8013550:	4611      	mov	r1, r2
 8013552:	4618      	mov	r0, r3
 8013554:	f7f1 fd59 	bl	800500a <HAL_PCD_EP_GetRxCount>
 8013558:	4603      	mov	r3, r0
}
 801355a:	4618      	mov	r0, r3
 801355c:	3708      	adds	r7, #8
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
	...

08013564 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	460b      	mov	r3, r1
 801356e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013570:	78fb      	ldrb	r3, [r7, #3]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d002      	beq.n	801357c <HAL_PCDEx_LPM_Callback+0x18>
 8013576:	2b01      	cmp	r3, #1
 8013578:	d01f      	beq.n	80135ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801357a:	e03b      	b.n	80135f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6a1b      	ldr	r3, [r3, #32]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d007      	beq.n	8013594 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013584:	f000 f854 	bl	8013630 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013588:	4b1c      	ldr	r3, [pc, #112]	; (80135fc <HAL_PCDEx_LPM_Callback+0x98>)
 801358a:	691b      	ldr	r3, [r3, #16]
 801358c:	4a1b      	ldr	r2, [pc, #108]	; (80135fc <HAL_PCDEx_LPM_Callback+0x98>)
 801358e:	f023 0306 	bic.w	r3, r3, #6
 8013592:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	687a      	ldr	r2, [r7, #4]
 80135a0:	6812      	ldr	r2, [r2, #0]
 80135a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80135a6:	f023 0301 	bic.w	r3, r3, #1
 80135aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7fa fe0e 	bl	800e1d4 <USBD_LL_Resume>
    break;
 80135b8:	e01c      	b.n	80135f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	687a      	ldr	r2, [r7, #4]
 80135c6:	6812      	ldr	r2, [r2, #0]
 80135c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80135cc:	f043 0301 	orr.w	r3, r3, #1
 80135d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135d8:	4618      	mov	r0, r3
 80135da:	f7fa fde5 	bl	800e1a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6a1b      	ldr	r3, [r3, #32]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d005      	beq.n	80135f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80135e6:	4b05      	ldr	r3, [pc, #20]	; (80135fc <HAL_PCDEx_LPM_Callback+0x98>)
 80135e8:	691b      	ldr	r3, [r3, #16]
 80135ea:	4a04      	ldr	r2, [pc, #16]	; (80135fc <HAL_PCDEx_LPM_Callback+0x98>)
 80135ec:	f043 0306 	orr.w	r3, r3, #6
 80135f0:	6113      	str	r3, [r2, #16]
    break;
 80135f2:	bf00      	nop
}
 80135f4:	bf00      	nop
 80135f6:	3708      	adds	r7, #8
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}
 80135fc:	e000ed00 	.word	0xe000ed00

08013600 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013600:	b480      	push	{r7}
 8013602:	b083      	sub	sp, #12
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013608:	4b03      	ldr	r3, [pc, #12]	; (8013618 <USBD_static_malloc+0x18>)
}
 801360a:	4618      	mov	r0, r3
 801360c:	370c      	adds	r7, #12
 801360e:	46bd      	mov	sp, r7
 8013610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013614:	4770      	bx	lr
 8013616:	bf00      	nop
 8013618:	20002e0c 	.word	0x20002e0c

0801361c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801361c:	b480      	push	{r7}
 801361e:	b083      	sub	sp, #12
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]

}
 8013624:	bf00      	nop
 8013626:	370c      	adds	r7, #12
 8013628:	46bd      	mov	sp, r7
 801362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362e:	4770      	bx	lr

08013630 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013634:	f7ed fb26 	bl	8000c84 <SystemClock_Config>
}
 8013638:	bf00      	nop
 801363a:	bd80      	pop	{r7, pc}

0801363c <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d009      	beq.n	8013660 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 801364c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801364e:	461a      	mov	r2, r3
        err.type, err.code);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8013656:	6839      	ldr	r1, [r7, #0]
 8013658:	4806      	ldr	r0, [pc, #24]	; (8013674 <ai_log_err+0x38>)
 801365a:	f003 fa87 	bl	8016b6c <iprintf>
 801365e:	e008      	b.n	8013672 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8013660:	793b      	ldrb	r3, [r7, #4]
 8013662:	4619      	mov	r1, r3
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801366a:	461a      	mov	r2, r3
 801366c:	4802      	ldr	r0, [pc, #8]	; (8013678 <ai_log_err+0x3c>)
 801366e:	f003 fa7d 	bl	8016b6c <iprintf>

  do {} while (1);
 8013672:	e7fe      	b.n	8013672 <ai_log_err+0x36>
 8013674:	08018d58 	.word	0x08018d58
 8013678:	08018d8c 	.word	0x08018d8c

0801367c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b086      	sub	sp, #24
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_randomforest_create_and_init(&randomforest, act_addr, NULL);
 8013684:	2200      	movs	r2, #0
 8013686:	6879      	ldr	r1, [r7, #4]
 8013688:	4828      	ldr	r0, [pc, #160]	; (801372c <ai_boostrap+0xb0>)
 801368a:	f001 fb71 	bl	8014d70 <ai_randomforest_create_and_init>
 801368e:	4603      	mov	r3, r0
 8013690:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8013692:	7b3b      	ldrb	r3, [r7, #12]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d006      	beq.n	80136a6 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_randomforest_create_and_init");
 8013698:	4925      	ldr	r1, [pc, #148]	; (8013730 <ai_boostrap+0xb4>)
 801369a:	68f8      	ldr	r0, [r7, #12]
 801369c:	f7ff ffce 	bl	801363c <ai_log_err>
    return -1;
 80136a0:	f04f 33ff 	mov.w	r3, #4294967295
 80136a4:	e03e      	b.n	8013724 <ai_boostrap+0xa8>
  }

  ai_input = ai_randomforest_inputs_get(randomforest, NULL);
 80136a6:	4b21      	ldr	r3, [pc, #132]	; (801372c <ai_boostrap+0xb0>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	2100      	movs	r1, #0
 80136ac:	4618      	mov	r0, r3
 80136ae:	f001 fbd3 	bl	8014e58 <ai_randomforest_inputs_get>
 80136b2:	4603      	mov	r3, r0
 80136b4:	4a1f      	ldr	r2, [pc, #124]	; (8013734 <ai_boostrap+0xb8>)
 80136b6:	6013      	str	r3, [r2, #0]
  ai_output = ai_randomforest_outputs_get(randomforest, NULL);
 80136b8:	4b1c      	ldr	r3, [pc, #112]	; (801372c <ai_boostrap+0xb0>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	2100      	movs	r1, #0
 80136be:	4618      	mov	r0, r3
 80136c0:	f001 fbe4 	bl	8014e8c <ai_randomforest_outputs_get>
 80136c4:	4603      	mov	r3, r0
 80136c6:	4a1c      	ldr	r2, [pc, #112]	; (8013738 <ai_boostrap+0xbc>)
 80136c8:	6013      	str	r3, [r2, #0]

#if defined(AI_RANDOMFOREST_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++) {
 80136ca:	2300      	movs	r3, #0
 80136cc:	617b      	str	r3, [r7, #20]
 80136ce:	e00f      	b.n	80136f0 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 80136d0:	4b18      	ldr	r3, [pc, #96]	; (8013734 <ai_boostrap+0xb8>)
 80136d2:	6819      	ldr	r1, [r3, #0]
 80136d4:	697a      	ldr	r2, [r7, #20]
 80136d6:	4613      	mov	r3, r2
 80136d8:	00db      	lsls	r3, r3, #3
 80136da:	1a9b      	subs	r3, r3, r2
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	440b      	add	r3, r1
 80136e0:	685a      	ldr	r2, [r3, #4]
 80136e2:	4916      	ldr	r1, [pc, #88]	; (801373c <ai_boostrap+0xc0>)
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++) {
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	3301      	adds	r3, #1
 80136ee:	617b      	str	r3, [r7, #20]
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	ddec      	ble.n	80136d0 <ai_boostrap+0x54>

#if defined(AI_RANDOMFOREST_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
 80136f6:	2300      	movs	r3, #0
 80136f8:	613b      	str	r3, [r7, #16]
 80136fa:	e00f      	b.n	801371c <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 80136fc:	4b0e      	ldr	r3, [pc, #56]	; (8013738 <ai_boostrap+0xbc>)
 80136fe:	6819      	ldr	r1, [r3, #0]
 8013700:	693a      	ldr	r2, [r7, #16]
 8013702:	4613      	mov	r3, r2
 8013704:	00db      	lsls	r3, r3, #3
 8013706:	1a9b      	subs	r3, r3, r2
 8013708:	009b      	lsls	r3, r3, #2
 801370a:	440b      	add	r3, r1
 801370c:	685a      	ldr	r2, [r3, #4]
 801370e:	490c      	ldr	r1, [pc, #48]	; (8013740 <ai_boostrap+0xc4>)
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	3301      	adds	r3, #1
 801371a:	613b      	str	r3, [r7, #16]
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	2b01      	cmp	r3, #1
 8013720:	ddec      	ble.n	80136fc <ai_boostrap+0x80>
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8013722:	2300      	movs	r3, #0
}
 8013724:	4618      	mov	r0, r3
 8013726:	3718      	adds	r7, #24
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}
 801372c:	20003a78 	.word	0x20003a78
 8013730:	08018dbc 	.word	0x08018dbc
 8013734:	20003a7c 	.word	0x20003a7c
 8013738:	20003a80 	.word	0x20003a80
 801373c:	20003a04 	.word	0x20003a04
 8013740:	20003a08 	.word	0x20003a08

08013744 <ai_run>:

static int ai_run(void)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_randomforest_run(randomforest, ai_input, ai_output);
 801374a:	4b0f      	ldr	r3, [pc, #60]	; (8013788 <ai_run+0x44>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	4a0f      	ldr	r2, [pc, #60]	; (801378c <ai_run+0x48>)
 8013750:	6811      	ldr	r1, [r2, #0]
 8013752:	4a0f      	ldr	r2, [pc, #60]	; (8013790 <ai_run+0x4c>)
 8013754:	6812      	ldr	r2, [r2, #0]
 8013756:	4618      	mov	r0, r3
 8013758:	f001 fbee 	bl	8014f38 <ai_randomforest_run>
 801375c:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2b01      	cmp	r3, #1
 8013762:	d00c      	beq.n	801377e <ai_run+0x3a>
    ai_log_err(ai_randomforest_get_error(randomforest),
 8013764:	4b08      	ldr	r3, [pc, #32]	; (8013788 <ai_run+0x44>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	4618      	mov	r0, r3
 801376a:	f001 fadf 	bl	8014d2c <ai_randomforest_get_error>
 801376e:	4603      	mov	r3, r0
 8013770:	4908      	ldr	r1, [pc, #32]	; (8013794 <ai_run+0x50>)
 8013772:	4618      	mov	r0, r3
 8013774:	f7ff ff62 	bl	801363c <ai_log_err>
        "ai_randomforest_run");
    return -1;
 8013778:	f04f 33ff 	mov.w	r3, #4294967295
 801377c:	e000      	b.n	8013780 <ai_run+0x3c>
  }

  return 0;
 801377e:	2300      	movs	r3, #0
}
 8013780:	4618      	mov	r0, r3
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	20003a78 	.word	0x20003a78
 801378c:	20003a7c 	.word	0x20003a7c
 8013790:	20003a80 	.word	0x20003a80
 8013794:	08018ddc 	.word	0x08018ddc

08013798 <accMagnitude>:

/* USER CODE BEGIN 2 */
float accMagnitude(float accX, float accY, float accZ) {
 8013798:	b580      	push	{r7, lr}
 801379a:	b086      	sub	sp, #24
 801379c:	af00      	add	r7, sp, #0
 801379e:	ed87 0a03 	vstr	s0, [r7, #12]
 80137a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80137a6:	ed87 1a01 	vstr	s2, [r7, #4]
	float result = sqrt(accX * accX + accY * accY + accZ * accZ);
 80137aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80137ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80137b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80137b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80137ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80137be:	edd7 7a01 	vldr	s15, [r7, #4]
 80137c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80137c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137ca:	ee17 0a90 	vmov	r0, s15
 80137ce:	f7ec fed3 	bl	8000578 <__aeabi_f2d>
 80137d2:	4602      	mov	r2, r0
 80137d4:	460b      	mov	r3, r1
 80137d6:	ec43 2b10 	vmov	d0, r2, r3
 80137da:	f004 fb43 	bl	8017e64 <sqrt>
 80137de:	ec53 2b10 	vmov	r2, r3, d0
 80137e2:	4610      	mov	r0, r2
 80137e4:	4619      	mov	r1, r3
 80137e6:	f7ed f9cf 	bl	8000b88 <__aeabi_d2f>
 80137ea:	4603      	mov	r3, r0
 80137ec:	617b      	str	r3, [r7, #20]
	return result;
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	ee07 3a90 	vmov	s15, r3
}
 80137f4:	eeb0 0a67 	vmov.f32	s0, s15
 80137f8:	3718      	adds	r7, #24
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
	...

08013800 <acquire_and_process_data>:

int acquire_and_process_data(ai_float* data[])
{
 8013800:	b5b0      	push	{r4, r5, r7, lr}
 8013802:	b098      	sub	sp, #96	; 0x60
 8013804:	af02      	add	r7, sp, #8
 8013806:	6078      	str	r0, [r7, #4]
	while(buf_len < windowLength) {
 8013808:	e166      	b.n	8013ad8 <acquire_and_process_data+0x2d8>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 801380a:	2200      	movs	r2, #0
 801380c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013810:	48ba      	ldr	r0, [pc, #744]	; (8013afc <acquire_and_process_data+0x2fc>)
 8013812:	f7f0 fbc1 	bl	8003f98 <HAL_GPIO_WritePin>
			outdata[0] = 0x1e | 0x80 ; // read status register if there is new accelerometer data
 8013816:	4bba      	ldr	r3, [pc, #744]	; (8013b00 <acquire_and_process_data+0x300>)
 8013818:	229e      	movs	r2, #158	; 0x9e
 801381a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 801381c:	f04f 33ff 	mov.w	r3, #4294967295
 8013820:	9300      	str	r3, [sp, #0]
 8013822:	2302      	movs	r3, #2
 8013824:	4ab7      	ldr	r2, [pc, #732]	; (8013b04 <acquire_and_process_data+0x304>)
 8013826:	49b6      	ldr	r1, [pc, #728]	; (8013b00 <acquire_and_process_data+0x300>)
 8013828:	48b7      	ldr	r0, [pc, #732]	; (8013b08 <acquire_and_process_data+0x308>)
 801382a:	f7f6 fc13 	bl	800a054 <HAL_SPI_TransmitReceive>
			newValueAvailable = indata[1] & 0b1; //only accelerometer state
 801382e:	4bb5      	ldr	r3, [pc, #724]	; (8013b04 <acquire_and_process_data+0x304>)
 8013830:	785b      	ldrb	r3, [r3, #1]
 8013832:	f003 0301 	and.w	r3, r3, #1
 8013836:	b2da      	uxtb	r2, r3
 8013838:	4bb4      	ldr	r3, [pc, #720]	; (8013b0c <acquire_and_process_data+0x30c>)
 801383a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 801383c:	2201      	movs	r2, #1
 801383e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013842:	48ae      	ldr	r0, [pc, #696]	; (8013afc <acquire_and_process_data+0x2fc>)
 8013844:	f7f0 fba8 	bl	8003f98 <HAL_GPIO_WritePin>

			if(newValueAvailable == 1) {
 8013848:	4bb0      	ldr	r3, [pc, #704]	; (8013b0c <acquire_and_process_data+0x30c>)
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	2b01      	cmp	r3, #1
 801384e:	f040 8143 	bne.w	8013ad8 <acquire_and_process_data+0x2d8>
				buf_len++;
 8013852:	4baf      	ldr	r3, [pc, #700]	; (8013b10 <acquire_and_process_data+0x310>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	3301      	adds	r3, #1
 8013858:	4aad      	ldr	r2, [pc, #692]	; (8013b10 <acquire_and_process_data+0x310>)
 801385a:	6013      	str	r3, [r2, #0]

				newValueAvailable = 0;
 801385c:	4bab      	ldr	r3, [pc, #684]	; (8013b0c <acquire_and_process_data+0x30c>)
 801385e:	2200      	movs	r2, #0
 8013860:	701a      	strb	r2, [r3, #0]

				//////////////////////////////////////////Read accelerometer measurements
				outdata[0] = 0x29 | 0x80 ; // read x, high
 8013862:	4ba7      	ldr	r3, [pc, #668]	; (8013b00 <acquire_and_process_data+0x300>)
 8013864:	22a9      	movs	r2, #169	; 0xa9
 8013866:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013868:	2200      	movs	r2, #0
 801386a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801386e:	48a3      	ldr	r0, [pc, #652]	; (8013afc <acquire_and_process_data+0x2fc>)
 8013870:	f7f0 fb92 	bl	8003f98 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8013874:	f04f 33ff 	mov.w	r3, #4294967295
 8013878:	9300      	str	r3, [sp, #0]
 801387a:	2302      	movs	r3, #2
 801387c:	4aa1      	ldr	r2, [pc, #644]	; (8013b04 <acquire_and_process_data+0x304>)
 801387e:	49a0      	ldr	r1, [pc, #640]	; (8013b00 <acquire_and_process_data+0x300>)
 8013880:	48a1      	ldr	r0, [pc, #644]	; (8013b08 <acquire_and_process_data+0x308>)
 8013882:	f7f6 fbe7 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelX1 = indata[1];
 8013886:	4b9f      	ldr	r3, [pc, #636]	; (8013b04 <acquire_and_process_data+0x304>)
 8013888:	785a      	ldrb	r2, [r3, #1]
 801388a:	4ba2      	ldr	r3, [pc, #648]	; (8013b14 <acquire_and_process_data+0x314>)
 801388c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 801388e:	2201      	movs	r2, #1
 8013890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013894:	4899      	ldr	r0, [pc, #612]	; (8013afc <acquire_and_process_data+0x2fc>)
 8013896:	f7f0 fb7f 	bl	8003f98 <HAL_GPIO_WritePin>
				outdata[0] = 0x28 | 0x80 ; // read x, low
 801389a:	4b99      	ldr	r3, [pc, #612]	; (8013b00 <acquire_and_process_data+0x300>)
 801389c:	22a8      	movs	r2, #168	; 0xa8
 801389e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80138a0:	2200      	movs	r2, #0
 80138a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80138a6:	4895      	ldr	r0, [pc, #596]	; (8013afc <acquire_and_process_data+0x2fc>)
 80138a8:	f7f0 fb76 	bl	8003f98 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80138ac:	f04f 33ff 	mov.w	r3, #4294967295
 80138b0:	9300      	str	r3, [sp, #0]
 80138b2:	2302      	movs	r3, #2
 80138b4:	4a93      	ldr	r2, [pc, #588]	; (8013b04 <acquire_and_process_data+0x304>)
 80138b6:	4992      	ldr	r1, [pc, #584]	; (8013b00 <acquire_and_process_data+0x300>)
 80138b8:	4893      	ldr	r0, [pc, #588]	; (8013b08 <acquire_and_process_data+0x308>)
 80138ba:	f7f6 fbcb 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelX2 = indata[1];
 80138be:	4b91      	ldr	r3, [pc, #580]	; (8013b04 <acquire_and_process_data+0x304>)
 80138c0:	785a      	ldrb	r2, [r3, #1]
 80138c2:	4b95      	ldr	r3, [pc, #596]	; (8013b18 <acquire_and_process_data+0x318>)
 80138c4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80138c6:	2201      	movs	r2, #1
 80138c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80138cc:	488b      	ldr	r0, [pc, #556]	; (8013afc <acquire_and_process_data+0x2fc>)
 80138ce:	f7f0 fb63 	bl	8003f98 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80138d2:	2200      	movs	r2, #0
 80138d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80138d8:	4888      	ldr	r0, [pc, #544]	; (8013afc <acquire_and_process_data+0x2fc>)
 80138da:	f7f0 fb5d 	bl	8003f98 <HAL_GPIO_WritePin>
				outdata[0] = 0x2b | 0x80 ; // read y, 0x53
 80138de:	4b88      	ldr	r3, [pc, #544]	; (8013b00 <acquire_and_process_data+0x300>)
 80138e0:	22ab      	movs	r2, #171	; 0xab
 80138e2:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80138e4:	f04f 33ff 	mov.w	r3, #4294967295
 80138e8:	9300      	str	r3, [sp, #0]
 80138ea:	2302      	movs	r3, #2
 80138ec:	4a85      	ldr	r2, [pc, #532]	; (8013b04 <acquire_and_process_data+0x304>)
 80138ee:	4984      	ldr	r1, [pc, #528]	; (8013b00 <acquire_and_process_data+0x300>)
 80138f0:	4885      	ldr	r0, [pc, #532]	; (8013b08 <acquire_and_process_data+0x308>)
 80138f2:	f7f6 fbaf 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelY1 = indata[1];
 80138f6:	4b83      	ldr	r3, [pc, #524]	; (8013b04 <acquire_and_process_data+0x304>)
 80138f8:	785a      	ldrb	r2, [r3, #1]
 80138fa:	4b88      	ldr	r3, [pc, #544]	; (8013b1c <acquire_and_process_data+0x31c>)
 80138fc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80138fe:	2201      	movs	r2, #1
 8013900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013904:	487d      	ldr	r0, [pc, #500]	; (8013afc <acquire_and_process_data+0x2fc>)
 8013906:	f7f0 fb47 	bl	8003f98 <HAL_GPIO_WritePin>
				outdata[0] = 0x2a | 0x80 ; // read y, low
 801390a:	4b7d      	ldr	r3, [pc, #500]	; (8013b00 <acquire_and_process_data+0x300>)
 801390c:	22aa      	movs	r2, #170	; 0xaa
 801390e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013910:	2200      	movs	r2, #0
 8013912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013916:	4879      	ldr	r0, [pc, #484]	; (8013afc <acquire_and_process_data+0x2fc>)
 8013918:	f7f0 fb3e 	bl	8003f98 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 801391c:	f04f 33ff 	mov.w	r3, #4294967295
 8013920:	9300      	str	r3, [sp, #0]
 8013922:	2302      	movs	r3, #2
 8013924:	4a77      	ldr	r2, [pc, #476]	; (8013b04 <acquire_and_process_data+0x304>)
 8013926:	4976      	ldr	r1, [pc, #472]	; (8013b00 <acquire_and_process_data+0x300>)
 8013928:	4877      	ldr	r0, [pc, #476]	; (8013b08 <acquire_and_process_data+0x308>)
 801392a:	f7f6 fb93 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelY2 = indata[1];
 801392e:	4b75      	ldr	r3, [pc, #468]	; (8013b04 <acquire_and_process_data+0x304>)
 8013930:	785a      	ldrb	r2, [r3, #1]
 8013932:	4b7b      	ldr	r3, [pc, #492]	; (8013b20 <acquire_and_process_data+0x320>)
 8013934:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8013936:	2201      	movs	r2, #1
 8013938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801393c:	486f      	ldr	r0, [pc, #444]	; (8013afc <acquire_and_process_data+0x2fc>)
 801393e:	f7f0 fb2b 	bl	8003f98 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013942:	2200      	movs	r2, #0
 8013944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013948:	486c      	ldr	r0, [pc, #432]	; (8013afc <acquire_and_process_data+0x2fc>)
 801394a:	f7f0 fb25 	bl	8003f98 <HAL_GPIO_WritePin>
				outdata[0] = 0x2d | 0x80 ; // read z, 0x55
 801394e:	4b6c      	ldr	r3, [pc, #432]	; (8013b00 <acquire_and_process_data+0x300>)
 8013950:	22ad      	movs	r2, #173	; 0xad
 8013952:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8013954:	f04f 33ff 	mov.w	r3, #4294967295
 8013958:	9300      	str	r3, [sp, #0]
 801395a:	2302      	movs	r3, #2
 801395c:	4a69      	ldr	r2, [pc, #420]	; (8013b04 <acquire_and_process_data+0x304>)
 801395e:	4968      	ldr	r1, [pc, #416]	; (8013b00 <acquire_and_process_data+0x300>)
 8013960:	4869      	ldr	r0, [pc, #420]	; (8013b08 <acquire_and_process_data+0x308>)
 8013962:	f7f6 fb77 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelZ1 = indata[1];
 8013966:	4b67      	ldr	r3, [pc, #412]	; (8013b04 <acquire_and_process_data+0x304>)
 8013968:	785a      	ldrb	r2, [r3, #1]
 801396a:	4b6e      	ldr	r3, [pc, #440]	; (8013b24 <acquire_and_process_data+0x324>)
 801396c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 801396e:	2201      	movs	r2, #1
 8013970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013974:	4861      	ldr	r0, [pc, #388]	; (8013afc <acquire_and_process_data+0x2fc>)
 8013976:	f7f0 fb0f 	bl	8003f98 <HAL_GPIO_WritePin>
				outdata[0] = 0x2c | 0x80 ; // read z, low
 801397a:	4b61      	ldr	r3, [pc, #388]	; (8013b00 <acquire_and_process_data+0x300>)
 801397c:	22ac      	movs	r2, #172	; 0xac
 801397e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013980:	2200      	movs	r2, #0
 8013982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013986:	485d      	ldr	r0, [pc, #372]	; (8013afc <acquire_and_process_data+0x2fc>)
 8013988:	f7f0 fb06 	bl	8003f98 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 801398c:	f04f 33ff 	mov.w	r3, #4294967295
 8013990:	9300      	str	r3, [sp, #0]
 8013992:	2302      	movs	r3, #2
 8013994:	4a5b      	ldr	r2, [pc, #364]	; (8013b04 <acquire_and_process_data+0x304>)
 8013996:	495a      	ldr	r1, [pc, #360]	; (8013b00 <acquire_and_process_data+0x300>)
 8013998:	485b      	ldr	r0, [pc, #364]	; (8013b08 <acquire_and_process_data+0x308>)
 801399a:	f7f6 fb5b 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelZ2 = indata[1];
 801399e:	4b59      	ldr	r3, [pc, #356]	; (8013b04 <acquire_and_process_data+0x304>)
 80139a0:	785a      	ldrb	r2, [r3, #1]
 80139a2:	4b61      	ldr	r3, [pc, #388]	; (8013b28 <acquire_and_process_data+0x328>)
 80139a4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80139a6:	2201      	movs	r2, #1
 80139a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80139ac:	4853      	ldr	r0, [pc, #332]	; (8013afc <acquire_and_process_data+0x2fc>)
 80139ae:	f7f0 faf3 	bl	8003f98 <HAL_GPIO_WritePin>
				int16_t AccelY;
				int32_t AccelY_mg;
				int16_t AccelZ;
				int32_t AccelZ_mg;

				AccelX= ((int16_t)AccelX1 <<8 ) | AccelX2;
 80139b2:	4b58      	ldr	r3, [pc, #352]	; (8013b14 <acquire_and_process_data+0x314>)
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	021b      	lsls	r3, r3, #8
 80139b8:	b21a      	sxth	r2, r3
 80139ba:	4b57      	ldr	r3, [pc, #348]	; (8013b18 <acquire_and_process_data+0x318>)
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	b21b      	sxth	r3, r3
 80139c0:	4313      	orrs	r3, r2
 80139c2:	857b      	strh	r3, [r7, #42]	; 0x2a
				AccelX_mg= (int32_t)((float)AccelX * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 80139c4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80139c8:	ee07 3a90 	vmov	s15, r3
 80139cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139d0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8013b2c <acquire_and_process_data+0x32c>
 80139d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80139d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139dc:	ee17 3a90 	vmov	r3, s15
 80139e0:	627b      	str	r3, [r7, #36]	; 0x24
				AccelY= ((int16_t)AccelY1 <<8 ) | AccelY2;
 80139e2:	4b4e      	ldr	r3, [pc, #312]	; (8013b1c <acquire_and_process_data+0x31c>)
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	021b      	lsls	r3, r3, #8
 80139e8:	b21a      	sxth	r2, r3
 80139ea:	4b4d      	ldr	r3, [pc, #308]	; (8013b20 <acquire_and_process_data+0x320>)
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	b21b      	sxth	r3, r3
 80139f0:	4313      	orrs	r3, r2
 80139f2:	847b      	strh	r3, [r7, #34]	; 0x22
				AccelY_mg= (int32_t)((float)AccelY * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 80139f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80139f8:	ee07 3a90 	vmov	s15, r3
 80139fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a00:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013b2c <acquire_and_process_data+0x32c>
 8013a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a0c:	ee17 3a90 	vmov	r3, s15
 8013a10:	61fb      	str	r3, [r7, #28]
				AccelZ= ((int16_t)AccelZ1 <<8 ) | AccelZ2;
 8013a12:	4b44      	ldr	r3, [pc, #272]	; (8013b24 <acquire_and_process_data+0x324>)
 8013a14:	781b      	ldrb	r3, [r3, #0]
 8013a16:	021b      	lsls	r3, r3, #8
 8013a18:	b21a      	sxth	r2, r3
 8013a1a:	4b43      	ldr	r3, [pc, #268]	; (8013b28 <acquire_and_process_data+0x328>)
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	b21b      	sxth	r3, r3
 8013a20:	4313      	orrs	r3, r2
 8013a22:	837b      	strh	r3, [r7, #26]
				AccelZ_mg= (int32_t)((float)AccelZ * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 8013a24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013a28:	ee07 3a90 	vmov	s15, r3
 8013a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a30:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8013b2c <acquire_and_process_data+0x32c>
 8013a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a3c:	ee17 3a90 	vmov	r3, s15
 8013a40:	617b      	str	r3, [r7, #20]

				float AccelX_inG = AccelX_mg * 0.001f;
 8013a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a44:	ee07 3a90 	vmov	s15, r3
 8013a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a4c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013b30 <acquire_and_process_data+0x330>
 8013a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a54:	edc7 7a04 	vstr	s15, [r7, #16]
				float AccelY_inG = AccelY_mg * 0.001f;
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	ee07 3a90 	vmov	s15, r3
 8013a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a62:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013b30 <acquire_and_process_data+0x330>
 8013a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a6a:	edc7 7a03 	vstr	s15, [r7, #12]
				float AccelZ_inG = AccelZ_mg * 0.001f;
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	ee07 3a90 	vmov	s15, r3
 8013a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a78:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8013b30 <acquire_and_process_data+0x330>
 8013a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a80:	edc7 7a02 	vstr	s15, [r7, #8]


				bufAccX[buf_len - 1] = AccelX_inG;
 8013a84:	4b22      	ldr	r3, [pc, #136]	; (8013b10 <acquire_and_process_data+0x310>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	4a2a      	ldr	r2, [pc, #168]	; (8013b34 <acquire_and_process_data+0x334>)
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	4413      	add	r3, r2
 8013a90:	693a      	ldr	r2, [r7, #16]
 8013a92:	601a      	str	r2, [r3, #0]
				bufAccY[buf_len - 1] = AccelY_inG;
 8013a94:	4b1e      	ldr	r3, [pc, #120]	; (8013b10 <acquire_and_process_data+0x310>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	3b01      	subs	r3, #1
 8013a9a:	4a27      	ldr	r2, [pc, #156]	; (8013b38 <acquire_and_process_data+0x338>)
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	4413      	add	r3, r2
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	601a      	str	r2, [r3, #0]
				bufAccZ[buf_len - 1] = AccelZ_inG;
 8013aa4:	4b1a      	ldr	r3, [pc, #104]	; (8013b10 <acquire_and_process_data+0x310>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	3b01      	subs	r3, #1
 8013aaa:	4a24      	ldr	r2, [pc, #144]	; (8013b3c <acquire_and_process_data+0x33c>)
 8013aac:	009b      	lsls	r3, r3, #2
 8013aae:	4413      	add	r3, r2
 8013ab0:	68ba      	ldr	r2, [r7, #8]
 8013ab2:	601a      	str	r2, [r3, #0]

				bufAccMagnitude[buf_len - 1] = accMagnitude(AccelX_inG, AccelY_inG, AccelZ_inG);
 8013ab4:	4b16      	ldr	r3, [pc, #88]	; (8013b10 <acquire_and_process_data+0x310>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	1e5c      	subs	r4, r3, #1
 8013aba:	ed97 1a02 	vldr	s2, [r7, #8]
 8013abe:	edd7 0a03 	vldr	s1, [r7, #12]
 8013ac2:	ed97 0a04 	vldr	s0, [r7, #16]
 8013ac6:	f7ff fe67 	bl	8013798 <accMagnitude>
 8013aca:	eef0 7a40 	vmov.f32	s15, s0
 8013ace:	4a1c      	ldr	r2, [pc, #112]	; (8013b40 <acquire_and_process_data+0x340>)
 8013ad0:	00a3      	lsls	r3, r4, #2
 8013ad2:	4413      	add	r3, r2
 8013ad4:	edc3 7a00 	vstr	s15, [r3]
	while(buf_len < windowLength) {
 8013ad8:	4b1a      	ldr	r3, [pc, #104]	; (8013b44 <acquire_and_process_data+0x344>)
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	461a      	mov	r2, r3
 8013ade:	4b0c      	ldr	r3, [pc, #48]	; (8013b10 <acquire_and_process_data+0x310>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	f73f ae91 	bgt.w	801380a <acquire_and_process_data+0xa>
			}
		}

		if(buf_len == windowLength) {
 8013ae8:	4b16      	ldr	r3, [pc, #88]	; (8013b44 <acquire_and_process_data+0x344>)
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	461a      	mov	r2, r3
 8013aee:	4b08      	ldr	r3, [pc, #32]	; (8013b10 <acquire_and_process_data+0x310>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	f040 8532 	bne.w	801455c <acquire_and_process_data+0xd5c>
 8013af8:	e026      	b.n	8013b48 <acquire_and_process_data+0x348>
 8013afa:	bf00      	nop
 8013afc:	48001000 	.word	0x48001000
 8013b00:	200037f4 	.word	0x200037f4
 8013b04:	200037f0 	.word	0x200037f0
 8013b08:	20000d40 	.word	0x20000d40
 8013b0c:	200037f7 	.word	0x200037f7
 8013b10:	200037ec 	.word	0x200037ec
 8013b14:	200037f8 	.word	0x200037f8
 8013b18:	200037fb 	.word	0x200037fb
 8013b1c:	200037f9 	.word	0x200037f9
 8013b20:	200037fc 	.word	0x200037fc
 8013b24:	200037fa 	.word	0x200037fa
 8013b28:	200037fd 	.word	0x200037fd
 8013b2c:	3df9db23 	.word	0x3df9db23
 8013b30:	3a83126f 	.word	0x3a83126f
 8013b34:	2000312c 	.word	0x2000312c
 8013b38:	200032cc 	.word	0x200032cc
 8013b3c:	2000346c 	.word	0x2000346c
 8013b40:	2000360c 	.word	0x2000360c
 8013b44:	2000018e 	.word	0x2000018e
			buf_len = windowOverlap;
 8013b48:	4b2f      	ldr	r3, [pc, #188]	; (8013c08 <acquire_and_process_data+0x408>)
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	4b2f      	ldr	r3, [pc, #188]	; (8013c0c <acquire_and_process_data+0x40c>)
 8013b50:	601a      	str	r2, [r3, #0]

			accX_Mean = 0;
 8013b52:	4b2f      	ldr	r3, [pc, #188]	; (8013c10 <acquire_and_process_data+0x410>)
 8013b54:	f04f 0200 	mov.w	r2, #0
 8013b58:	601a      	str	r2, [r3, #0]
			accX_STD = 0;
 8013b5a:	4b2e      	ldr	r3, [pc, #184]	; (8013c14 <acquire_and_process_data+0x414>)
 8013b5c:	f04f 0200 	mov.w	r2, #0
 8013b60:	601a      	str	r2, [r3, #0]
			accX_MinMax = 0;
 8013b62:	4b2d      	ldr	r3, [pc, #180]	; (8013c18 <acquire_and_process_data+0x418>)
 8013b64:	f04f 0200 	mov.w	r2, #0
 8013b68:	601a      	str	r2, [r3, #0]
			accX_RMS = 0;
 8013b6a:	4b2c      	ldr	r3, [pc, #176]	; (8013c1c <acquire_and_process_data+0x41c>)
 8013b6c:	f04f 0200 	mov.w	r2, #0
 8013b70:	601a      	str	r2, [r3, #0]

			accY_Mean = 0;
 8013b72:	4b2b      	ldr	r3, [pc, #172]	; (8013c20 <acquire_and_process_data+0x420>)
 8013b74:	f04f 0200 	mov.w	r2, #0
 8013b78:	601a      	str	r2, [r3, #0]
			accY_STD = 0;
 8013b7a:	4b2a      	ldr	r3, [pc, #168]	; (8013c24 <acquire_and_process_data+0x424>)
 8013b7c:	f04f 0200 	mov.w	r2, #0
 8013b80:	601a      	str	r2, [r3, #0]
			accY_MinMax = 0;
 8013b82:	4b29      	ldr	r3, [pc, #164]	; (8013c28 <acquire_and_process_data+0x428>)
 8013b84:	f04f 0200 	mov.w	r2, #0
 8013b88:	601a      	str	r2, [r3, #0]
			accY_RMS = 0;
 8013b8a:	4b28      	ldr	r3, [pc, #160]	; (8013c2c <acquire_and_process_data+0x42c>)
 8013b8c:	f04f 0200 	mov.w	r2, #0
 8013b90:	601a      	str	r2, [r3, #0]

			accZ_Mean = 0;
 8013b92:	4b27      	ldr	r3, [pc, #156]	; (8013c30 <acquire_and_process_data+0x430>)
 8013b94:	f04f 0200 	mov.w	r2, #0
 8013b98:	601a      	str	r2, [r3, #0]
			accZ_STD = 0;
 8013b9a:	4b26      	ldr	r3, [pc, #152]	; (8013c34 <acquire_and_process_data+0x434>)
 8013b9c:	f04f 0200 	mov.w	r2, #0
 8013ba0:	601a      	str	r2, [r3, #0]
			accZ_MinMax = 0;
 8013ba2:	4b25      	ldr	r3, [pc, #148]	; (8013c38 <acquire_and_process_data+0x438>)
 8013ba4:	f04f 0200 	mov.w	r2, #0
 8013ba8:	601a      	str	r2, [r3, #0]
			accZ_RMS = 0;
 8013baa:	4b24      	ldr	r3, [pc, #144]	; (8013c3c <acquire_and_process_data+0x43c>)
 8013bac:	f04f 0200 	mov.w	r2, #0
 8013bb0:	601a      	str	r2, [r3, #0]

			accMagnitude_Mean = 0;
 8013bb2:	4b23      	ldr	r3, [pc, #140]	; (8013c40 <acquire_and_process_data+0x440>)
 8013bb4:	f04f 0200 	mov.w	r2, #0
 8013bb8:	601a      	str	r2, [r3, #0]
			accMagnitude_STD = 0;
 8013bba:	4b22      	ldr	r3, [pc, #136]	; (8013c44 <acquire_and_process_data+0x444>)
 8013bbc:	f04f 0200 	mov.w	r2, #0
 8013bc0:	601a      	str	r2, [r3, #0]
			accMagnitude_MinMax = 0;
 8013bc2:	4b21      	ldr	r3, [pc, #132]	; (8013c48 <acquire_and_process_data+0x448>)
 8013bc4:	f04f 0200 	mov.w	r2, #0
 8013bc8:	601a      	str	r2, [r3, #0]
			accMagnitude_RMS = 0;
 8013bca:	4b20      	ldr	r3, [pc, #128]	; (8013c4c <acquire_and_process_data+0x44c>)
 8013bcc:	f04f 0200 	mov.w	r2, #0
 8013bd0:	601a      	str	r2, [r3, #0]


			float minX = bufAccX[0];
 8013bd2:	4b1f      	ldr	r3, [pc, #124]	; (8013c50 <acquire_and_process_data+0x450>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	657b      	str	r3, [r7, #84]	; 0x54
			float maxX = bufAccX[0];
 8013bd8:	4b1d      	ldr	r3, [pc, #116]	; (8013c50 <acquire_and_process_data+0x450>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	653b      	str	r3, [r7, #80]	; 0x50
			float minY = bufAccY[0];
 8013bde:	4b1d      	ldr	r3, [pc, #116]	; (8013c54 <acquire_and_process_data+0x454>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	64fb      	str	r3, [r7, #76]	; 0x4c
			float maxY = bufAccY[0];
 8013be4:	4b1b      	ldr	r3, [pc, #108]	; (8013c54 <acquire_and_process_data+0x454>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	64bb      	str	r3, [r7, #72]	; 0x48
			float minZ = bufAccZ[0];
 8013bea:	4b1b      	ldr	r3, [pc, #108]	; (8013c58 <acquire_and_process_data+0x458>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	647b      	str	r3, [r7, #68]	; 0x44
			float maxZ = bufAccZ[0];
 8013bf0:	4b19      	ldr	r3, [pc, #100]	; (8013c58 <acquire_and_process_data+0x458>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	643b      	str	r3, [r7, #64]	; 0x40
			float minMagnitude = bufAccMagnitude[0];
 8013bf6:	4b19      	ldr	r3, [pc, #100]	; (8013c5c <acquire_and_process_data+0x45c>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
			float maxMagnitude = bufAccMagnitude[0];
 8013bfc:	4b17      	ldr	r3, [pc, #92]	; (8013c5c <acquire_and_process_data+0x45c>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	63bb      	str	r3, [r7, #56]	; 0x38


			for (int i = 0; i < windowLength; i++) {
 8013c02:	2300      	movs	r3, #0
 8013c04:	637b      	str	r3, [r7, #52]	; 0x34
 8013c06:	e196      	b.n	8013f36 <acquire_and_process_data+0x736>
 8013c08:	2000018f 	.word	0x2000018f
 8013c0c:	200037ec 	.word	0x200037ec
 8013c10:	200037ac 	.word	0x200037ac
 8013c14:	200037b0 	.word	0x200037b0
 8013c18:	200037b4 	.word	0x200037b4
 8013c1c:	200037b8 	.word	0x200037b8
 8013c20:	200037bc 	.word	0x200037bc
 8013c24:	200037c0 	.word	0x200037c0
 8013c28:	200037c4 	.word	0x200037c4
 8013c2c:	200037c8 	.word	0x200037c8
 8013c30:	200037cc 	.word	0x200037cc
 8013c34:	200037d0 	.word	0x200037d0
 8013c38:	200037d4 	.word	0x200037d4
 8013c3c:	200037d8 	.word	0x200037d8
 8013c40:	200037dc 	.word	0x200037dc
 8013c44:	200037e0 	.word	0x200037e0
 8013c48:	200037e4 	.word	0x200037e4
 8013c4c:	200037e8 	.word	0x200037e8
 8013c50:	2000312c 	.word	0x2000312c
 8013c54:	200032cc 	.word	0x200032cc
 8013c58:	2000346c 	.word	0x2000346c
 8013c5c:	2000360c 	.word	0x2000360c

				accX_Mean += bufAccX[i];
 8013c60:	4abd      	ldr	r2, [pc, #756]	; (8013f58 <acquire_and_process_data+0x758>)
 8013c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c64:	009b      	lsls	r3, r3, #2
 8013c66:	4413      	add	r3, r2
 8013c68:	ed93 7a00 	vldr	s14, [r3]
 8013c6c:	4bbb      	ldr	r3, [pc, #748]	; (8013f5c <acquire_and_process_data+0x75c>)
 8013c6e:	edd3 7a00 	vldr	s15, [r3]
 8013c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c76:	4bb9      	ldr	r3, [pc, #740]	; (8013f5c <acquire_and_process_data+0x75c>)
 8013c78:	edc3 7a00 	vstr	s15, [r3]
				if(minX > bufAccX[i])
 8013c7c:	4ab6      	ldr	r2, [pc, #728]	; (8013f58 <acquire_and_process_data+0x758>)
 8013c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4413      	add	r3, r2
 8013c84:	edd3 7a00 	vldr	s15, [r3]
 8013c88:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8013c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c94:	dd05      	ble.n	8013ca2 <acquire_and_process_data+0x4a2>
					minX = bufAccX[i];
 8013c96:	4ab0      	ldr	r2, [pc, #704]	; (8013f58 <acquire_and_process_data+0x758>)
 8013c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c9a:	009b      	lsls	r3, r3, #2
 8013c9c:	4413      	add	r3, r2
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	657b      	str	r3, [r7, #84]	; 0x54
				if(maxX < bufAccX[i])
 8013ca2:	4aad      	ldr	r2, [pc, #692]	; (8013f58 <acquire_and_process_data+0x758>)
 8013ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	4413      	add	r3, r2
 8013caa:	edd3 7a00 	vldr	s15, [r3]
 8013cae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cba:	d505      	bpl.n	8013cc8 <acquire_and_process_data+0x4c8>
					maxX = bufAccX[i];
 8013cbc:	4aa6      	ldr	r2, [pc, #664]	; (8013f58 <acquire_and_process_data+0x758>)
 8013cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	4413      	add	r3, r2
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	653b      	str	r3, [r7, #80]	; 0x50
				accX_RMS += pow(bufAccX[i], 2);
 8013cc8:	4aa3      	ldr	r2, [pc, #652]	; (8013f58 <acquire_and_process_data+0x758>)
 8013cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	4413      	add	r3, r2
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7ec fc50 	bl	8000578 <__aeabi_f2d>
 8013cd8:	4602      	mov	r2, r0
 8013cda:	460b      	mov	r3, r1
 8013cdc:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 8013f50 <acquire_and_process_data+0x750>
 8013ce0:	ec43 2b10 	vmov	d0, r2, r3
 8013ce4:	f004 f84e 	bl	8017d84 <pow>
 8013ce8:	ec55 4b10 	vmov	r4, r5, d0
 8013cec:	4b9c      	ldr	r3, [pc, #624]	; (8013f60 <acquire_and_process_data+0x760>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7ec fc41 	bl	8000578 <__aeabi_f2d>
 8013cf6:	4602      	mov	r2, r0
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	4620      	mov	r0, r4
 8013cfc:	4629      	mov	r1, r5
 8013cfe:	f7ec fadd 	bl	80002bc <__adddf3>
 8013d02:	4602      	mov	r2, r0
 8013d04:	460b      	mov	r3, r1
 8013d06:	4610      	mov	r0, r2
 8013d08:	4619      	mov	r1, r3
 8013d0a:	f7ec ff3d 	bl	8000b88 <__aeabi_d2f>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	4a93      	ldr	r2, [pc, #588]	; (8013f60 <acquire_and_process_data+0x760>)
 8013d12:	6013      	str	r3, [r2, #0]

				accY_Mean += bufAccY[i];
 8013d14:	4a93      	ldr	r2, [pc, #588]	; (8013f64 <acquire_and_process_data+0x764>)
 8013d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	4413      	add	r3, r2
 8013d1c:	ed93 7a00 	vldr	s14, [r3]
 8013d20:	4b91      	ldr	r3, [pc, #580]	; (8013f68 <acquire_and_process_data+0x768>)
 8013d22:	edd3 7a00 	vldr	s15, [r3]
 8013d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d2a:	4b8f      	ldr	r3, [pc, #572]	; (8013f68 <acquire_and_process_data+0x768>)
 8013d2c:	edc3 7a00 	vstr	s15, [r3]
				if(minY > bufAccY[i])
 8013d30:	4a8c      	ldr	r2, [pc, #560]	; (8013f64 <acquire_and_process_data+0x764>)
 8013d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d34:	009b      	lsls	r3, r3, #2
 8013d36:	4413      	add	r3, r2
 8013d38:	edd3 7a00 	vldr	s15, [r3]
 8013d3c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d48:	dd05      	ble.n	8013d56 <acquire_and_process_data+0x556>
					minY = bufAccY[i];
 8013d4a:	4a86      	ldr	r2, [pc, #536]	; (8013f64 <acquire_and_process_data+0x764>)
 8013d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d4e:	009b      	lsls	r3, r3, #2
 8013d50:	4413      	add	r3, r2
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	64fb      	str	r3, [r7, #76]	; 0x4c
				if(maxY < bufAccY[i])
 8013d56:	4a83      	ldr	r2, [pc, #524]	; (8013f64 <acquire_and_process_data+0x764>)
 8013d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d5a:	009b      	lsls	r3, r3, #2
 8013d5c:	4413      	add	r3, r2
 8013d5e:	edd3 7a00 	vldr	s15, [r3]
 8013d62:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d6e:	d505      	bpl.n	8013d7c <acquire_and_process_data+0x57c>
					maxY = bufAccY[i];
 8013d70:	4a7c      	ldr	r2, [pc, #496]	; (8013f64 <acquire_and_process_data+0x764>)
 8013d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d74:	009b      	lsls	r3, r3, #2
 8013d76:	4413      	add	r3, r2
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	64bb      	str	r3, [r7, #72]	; 0x48
				accY_RMS += pow(bufAccY[i], 2);
 8013d7c:	4a79      	ldr	r2, [pc, #484]	; (8013f64 <acquire_and_process_data+0x764>)
 8013d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d80:	009b      	lsls	r3, r3, #2
 8013d82:	4413      	add	r3, r2
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7ec fbf6 	bl	8000578 <__aeabi_f2d>
 8013d8c:	4602      	mov	r2, r0
 8013d8e:	460b      	mov	r3, r1
 8013d90:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8013f50 <acquire_and_process_data+0x750>
 8013d94:	ec43 2b10 	vmov	d0, r2, r3
 8013d98:	f003 fff4 	bl	8017d84 <pow>
 8013d9c:	ec55 4b10 	vmov	r4, r5, d0
 8013da0:	4b72      	ldr	r3, [pc, #456]	; (8013f6c <acquire_and_process_data+0x76c>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7ec fbe7 	bl	8000578 <__aeabi_f2d>
 8013daa:	4602      	mov	r2, r0
 8013dac:	460b      	mov	r3, r1
 8013dae:	4620      	mov	r0, r4
 8013db0:	4629      	mov	r1, r5
 8013db2:	f7ec fa83 	bl	80002bc <__adddf3>
 8013db6:	4602      	mov	r2, r0
 8013db8:	460b      	mov	r3, r1
 8013dba:	4610      	mov	r0, r2
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	f7ec fee3 	bl	8000b88 <__aeabi_d2f>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	4a69      	ldr	r2, [pc, #420]	; (8013f6c <acquire_and_process_data+0x76c>)
 8013dc6:	6013      	str	r3, [r2, #0]

				accZ_Mean += bufAccZ[i];
 8013dc8:	4a69      	ldr	r2, [pc, #420]	; (8013f70 <acquire_and_process_data+0x770>)
 8013dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dcc:	009b      	lsls	r3, r3, #2
 8013dce:	4413      	add	r3, r2
 8013dd0:	ed93 7a00 	vldr	s14, [r3]
 8013dd4:	4b67      	ldr	r3, [pc, #412]	; (8013f74 <acquire_and_process_data+0x774>)
 8013dd6:	edd3 7a00 	vldr	s15, [r3]
 8013dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013dde:	4b65      	ldr	r3, [pc, #404]	; (8013f74 <acquire_and_process_data+0x774>)
 8013de0:	edc3 7a00 	vstr	s15, [r3]
				if(minZ > bufAccZ[i])
 8013de4:	4a62      	ldr	r2, [pc, #392]	; (8013f70 <acquire_and_process_data+0x770>)
 8013de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013de8:	009b      	lsls	r3, r3, #2
 8013dea:	4413      	add	r3, r2
 8013dec:	edd3 7a00 	vldr	s15, [r3]
 8013df0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8013df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dfc:	dd05      	ble.n	8013e0a <acquire_and_process_data+0x60a>
					minZ = bufAccZ[i];
 8013dfe:	4a5c      	ldr	r2, [pc, #368]	; (8013f70 <acquire_and_process_data+0x770>)
 8013e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e02:	009b      	lsls	r3, r3, #2
 8013e04:	4413      	add	r3, r2
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	647b      	str	r3, [r7, #68]	; 0x44
				if(maxZ < bufAccZ[i])
 8013e0a:	4a59      	ldr	r2, [pc, #356]	; (8013f70 <acquire_and_process_data+0x770>)
 8013e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e0e:	009b      	lsls	r3, r3, #2
 8013e10:	4413      	add	r3, r2
 8013e12:	edd3 7a00 	vldr	s15, [r3]
 8013e16:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013e1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e22:	d505      	bpl.n	8013e30 <acquire_and_process_data+0x630>
					maxZ = bufAccZ[i];
 8013e24:	4a52      	ldr	r2, [pc, #328]	; (8013f70 <acquire_and_process_data+0x770>)
 8013e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	4413      	add	r3, r2
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	643b      	str	r3, [r7, #64]	; 0x40
				accZ_RMS += pow(bufAccZ[i], 2);
 8013e30:	4a4f      	ldr	r2, [pc, #316]	; (8013f70 <acquire_and_process_data+0x770>)
 8013e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e34:	009b      	lsls	r3, r3, #2
 8013e36:	4413      	add	r3, r2
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7ec fb9c 	bl	8000578 <__aeabi_f2d>
 8013e40:	4602      	mov	r2, r0
 8013e42:	460b      	mov	r3, r1
 8013e44:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8013f50 <acquire_and_process_data+0x750>
 8013e48:	ec43 2b10 	vmov	d0, r2, r3
 8013e4c:	f003 ff9a 	bl	8017d84 <pow>
 8013e50:	ec55 4b10 	vmov	r4, r5, d0
 8013e54:	4b48      	ldr	r3, [pc, #288]	; (8013f78 <acquire_and_process_data+0x778>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7ec fb8d 	bl	8000578 <__aeabi_f2d>
 8013e5e:	4602      	mov	r2, r0
 8013e60:	460b      	mov	r3, r1
 8013e62:	4620      	mov	r0, r4
 8013e64:	4629      	mov	r1, r5
 8013e66:	f7ec fa29 	bl	80002bc <__adddf3>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	460b      	mov	r3, r1
 8013e6e:	4610      	mov	r0, r2
 8013e70:	4619      	mov	r1, r3
 8013e72:	f7ec fe89 	bl	8000b88 <__aeabi_d2f>
 8013e76:	4603      	mov	r3, r0
 8013e78:	4a3f      	ldr	r2, [pc, #252]	; (8013f78 <acquire_and_process_data+0x778>)
 8013e7a:	6013      	str	r3, [r2, #0]

				accMagnitude_Mean += bufAccMagnitude[i];
 8013e7c:	4a3f      	ldr	r2, [pc, #252]	; (8013f7c <acquire_and_process_data+0x77c>)
 8013e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e80:	009b      	lsls	r3, r3, #2
 8013e82:	4413      	add	r3, r2
 8013e84:	ed93 7a00 	vldr	s14, [r3]
 8013e88:	4b3d      	ldr	r3, [pc, #244]	; (8013f80 <acquire_and_process_data+0x780>)
 8013e8a:	edd3 7a00 	vldr	s15, [r3]
 8013e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e92:	4b3b      	ldr	r3, [pc, #236]	; (8013f80 <acquire_and_process_data+0x780>)
 8013e94:	edc3 7a00 	vstr	s15, [r3]
				if(minMagnitude > bufAccMagnitude[i])
 8013e98:	4a38      	ldr	r2, [pc, #224]	; (8013f7c <acquire_and_process_data+0x77c>)
 8013e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e9c:	009b      	lsls	r3, r3, #2
 8013e9e:	4413      	add	r3, r2
 8013ea0:	edd3 7a00 	vldr	s15, [r3]
 8013ea4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8013ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb0:	dd05      	ble.n	8013ebe <acquire_and_process_data+0x6be>
					minMagnitude = bufAccMagnitude[i];
 8013eb2:	4a32      	ldr	r2, [pc, #200]	; (8013f7c <acquire_and_process_data+0x77c>)
 8013eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eb6:	009b      	lsls	r3, r3, #2
 8013eb8:	4413      	add	r3, r2
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
				if(maxMagnitude < bufAccMagnitude[i])
 8013ebe:	4a2f      	ldr	r2, [pc, #188]	; (8013f7c <acquire_and_process_data+0x77c>)
 8013ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec2:	009b      	lsls	r3, r3, #2
 8013ec4:	4413      	add	r3, r2
 8013ec6:	edd3 7a00 	vldr	s15, [r3]
 8013eca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed6:	d505      	bpl.n	8013ee4 <acquire_and_process_data+0x6e4>
					maxMagnitude = bufAccMagnitude[i];
 8013ed8:	4a28      	ldr	r2, [pc, #160]	; (8013f7c <acquire_and_process_data+0x77c>)
 8013eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013edc:	009b      	lsls	r3, r3, #2
 8013ede:	4413      	add	r3, r2
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	63bb      	str	r3, [r7, #56]	; 0x38
				accMagnitude_RMS += pow(bufAccMagnitude[i], 2);
 8013ee4:	4a25      	ldr	r2, [pc, #148]	; (8013f7c <acquire_and_process_data+0x77c>)
 8013ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ee8:	009b      	lsls	r3, r3, #2
 8013eea:	4413      	add	r3, r2
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7ec fb42 	bl	8000578 <__aeabi_f2d>
 8013ef4:	4602      	mov	r2, r0
 8013ef6:	460b      	mov	r3, r1
 8013ef8:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8013f50 <acquire_and_process_data+0x750>
 8013efc:	ec43 2b10 	vmov	d0, r2, r3
 8013f00:	f003 ff40 	bl	8017d84 <pow>
 8013f04:	ec55 4b10 	vmov	r4, r5, d0
 8013f08:	4b1e      	ldr	r3, [pc, #120]	; (8013f84 <acquire_and_process_data+0x784>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7ec fb33 	bl	8000578 <__aeabi_f2d>
 8013f12:	4602      	mov	r2, r0
 8013f14:	460b      	mov	r3, r1
 8013f16:	4620      	mov	r0, r4
 8013f18:	4629      	mov	r1, r5
 8013f1a:	f7ec f9cf 	bl	80002bc <__adddf3>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	460b      	mov	r3, r1
 8013f22:	4610      	mov	r0, r2
 8013f24:	4619      	mov	r1, r3
 8013f26:	f7ec fe2f 	bl	8000b88 <__aeabi_d2f>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	4a15      	ldr	r2, [pc, #84]	; (8013f84 <acquire_and_process_data+0x784>)
 8013f2e:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < windowLength; i++) {
 8013f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f32:	3301      	adds	r3, #1
 8013f34:	637b      	str	r3, [r7, #52]	; 0x34
 8013f36:	4b14      	ldr	r3, [pc, #80]	; (8013f88 <acquire_and_process_data+0x788>)
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	f6ff ae8e 	blt.w	8013c60 <acquire_and_process_data+0x460>

			}

			accX_Mean /= windowLength;
 8013f44:	4b05      	ldr	r3, [pc, #20]	; (8013f5c <acquire_and_process_data+0x75c>)
 8013f46:	edd3 6a00 	vldr	s13, [r3]
 8013f4a:	e01f      	b.n	8013f8c <acquire_and_process_data+0x78c>
 8013f4c:	f3af 8000 	nop.w
 8013f50:	00000000 	.word	0x00000000
 8013f54:	40000000 	.word	0x40000000
 8013f58:	2000312c 	.word	0x2000312c
 8013f5c:	200037ac 	.word	0x200037ac
 8013f60:	200037b8 	.word	0x200037b8
 8013f64:	200032cc 	.word	0x200032cc
 8013f68:	200037bc 	.word	0x200037bc
 8013f6c:	200037c8 	.word	0x200037c8
 8013f70:	2000346c 	.word	0x2000346c
 8013f74:	200037cc 	.word	0x200037cc
 8013f78:	200037d8 	.word	0x200037d8
 8013f7c:	2000360c 	.word	0x2000360c
 8013f80:	200037dc 	.word	0x200037dc
 8013f84:	200037e8 	.word	0x200037e8
 8013f88:	2000018e 	.word	0x2000018e
 8013f8c:	4b69      	ldr	r3, [pc, #420]	; (8014134 <acquire_and_process_data+0x934>)
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	ee07 3a90 	vmov	s15, r3
 8013f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f9c:	4b66      	ldr	r3, [pc, #408]	; (8014138 <acquire_and_process_data+0x938>)
 8013f9e:	edc3 7a00 	vstr	s15, [r3]
			accX_MinMax = maxX - minX;
 8013fa2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013fa6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fae:	4b63      	ldr	r3, [pc, #396]	; (801413c <acquire_and_process_data+0x93c>)
 8013fb0:	edc3 7a00 	vstr	s15, [r3]
			accX_RMS = sqrt(accX_RMS/windowLength);
 8013fb4:	4b62      	ldr	r3, [pc, #392]	; (8014140 <acquire_and_process_data+0x940>)
 8013fb6:	ed93 7a00 	vldr	s14, [r3]
 8013fba:	4b5e      	ldr	r3, [pc, #376]	; (8014134 <acquire_and_process_data+0x934>)
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	ee07 3a90 	vmov	s15, r3
 8013fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fc6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013fca:	ee16 0a90 	vmov	r0, s13
 8013fce:	f7ec fad3 	bl	8000578 <__aeabi_f2d>
 8013fd2:	4602      	mov	r2, r0
 8013fd4:	460b      	mov	r3, r1
 8013fd6:	ec43 2b10 	vmov	d0, r2, r3
 8013fda:	f003 ff43 	bl	8017e64 <sqrt>
 8013fde:	ec53 2b10 	vmov	r2, r3, d0
 8013fe2:	4610      	mov	r0, r2
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	f7ec fdcf 	bl	8000b88 <__aeabi_d2f>
 8013fea:	4603      	mov	r3, r0
 8013fec:	4a54      	ldr	r2, [pc, #336]	; (8014140 <acquire_and_process_data+0x940>)
 8013fee:	6013      	str	r3, [r2, #0]

			accY_Mean /= windowLength;
 8013ff0:	4b54      	ldr	r3, [pc, #336]	; (8014144 <acquire_and_process_data+0x944>)
 8013ff2:	edd3 6a00 	vldr	s13, [r3]
 8013ff6:	4b4f      	ldr	r3, [pc, #316]	; (8014134 <acquire_and_process_data+0x934>)
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	ee07 3a90 	vmov	s15, r3
 8013ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014006:	4b4f      	ldr	r3, [pc, #316]	; (8014144 <acquire_and_process_data+0x944>)
 8014008:	edc3 7a00 	vstr	s15, [r3]
			accY_MinMax = maxY - minY;
 801400c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014010:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8014014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014018:	4b4b      	ldr	r3, [pc, #300]	; (8014148 <acquire_and_process_data+0x948>)
 801401a:	edc3 7a00 	vstr	s15, [r3]
			accY_RMS = sqrt(accY_RMS/windowLength);
 801401e:	4b4b      	ldr	r3, [pc, #300]	; (801414c <acquire_and_process_data+0x94c>)
 8014020:	ed93 7a00 	vldr	s14, [r3]
 8014024:	4b43      	ldr	r3, [pc, #268]	; (8014134 <acquire_and_process_data+0x934>)
 8014026:	781b      	ldrb	r3, [r3, #0]
 8014028:	ee07 3a90 	vmov	s15, r3
 801402c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014030:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014034:	ee16 0a90 	vmov	r0, s13
 8014038:	f7ec fa9e 	bl	8000578 <__aeabi_f2d>
 801403c:	4602      	mov	r2, r0
 801403e:	460b      	mov	r3, r1
 8014040:	ec43 2b10 	vmov	d0, r2, r3
 8014044:	f003 ff0e 	bl	8017e64 <sqrt>
 8014048:	ec53 2b10 	vmov	r2, r3, d0
 801404c:	4610      	mov	r0, r2
 801404e:	4619      	mov	r1, r3
 8014050:	f7ec fd9a 	bl	8000b88 <__aeabi_d2f>
 8014054:	4603      	mov	r3, r0
 8014056:	4a3d      	ldr	r2, [pc, #244]	; (801414c <acquire_and_process_data+0x94c>)
 8014058:	6013      	str	r3, [r2, #0]

			accZ_Mean /= windowLength;
 801405a:	4b3d      	ldr	r3, [pc, #244]	; (8014150 <acquire_and_process_data+0x950>)
 801405c:	edd3 6a00 	vldr	s13, [r3]
 8014060:	4b34      	ldr	r3, [pc, #208]	; (8014134 <acquire_and_process_data+0x934>)
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	ee07 3a90 	vmov	s15, r3
 8014068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801406c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014070:	4b37      	ldr	r3, [pc, #220]	; (8014150 <acquire_and_process_data+0x950>)
 8014072:	edc3 7a00 	vstr	s15, [r3]
			accZ_MinMax = maxZ - minZ;
 8014076:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801407a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801407e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014082:	4b34      	ldr	r3, [pc, #208]	; (8014154 <acquire_and_process_data+0x954>)
 8014084:	edc3 7a00 	vstr	s15, [r3]
			accZ_RMS = sqrt(accZ_RMS/windowLength);
 8014088:	4b33      	ldr	r3, [pc, #204]	; (8014158 <acquire_and_process_data+0x958>)
 801408a:	ed93 7a00 	vldr	s14, [r3]
 801408e:	4b29      	ldr	r3, [pc, #164]	; (8014134 <acquire_and_process_data+0x934>)
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	ee07 3a90 	vmov	s15, r3
 8014096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801409a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801409e:	ee16 0a90 	vmov	r0, s13
 80140a2:	f7ec fa69 	bl	8000578 <__aeabi_f2d>
 80140a6:	4602      	mov	r2, r0
 80140a8:	460b      	mov	r3, r1
 80140aa:	ec43 2b10 	vmov	d0, r2, r3
 80140ae:	f003 fed9 	bl	8017e64 <sqrt>
 80140b2:	ec53 2b10 	vmov	r2, r3, d0
 80140b6:	4610      	mov	r0, r2
 80140b8:	4619      	mov	r1, r3
 80140ba:	f7ec fd65 	bl	8000b88 <__aeabi_d2f>
 80140be:	4603      	mov	r3, r0
 80140c0:	4a25      	ldr	r2, [pc, #148]	; (8014158 <acquire_and_process_data+0x958>)
 80140c2:	6013      	str	r3, [r2, #0]

			accMagnitude_Mean /= windowLength;
 80140c4:	4b25      	ldr	r3, [pc, #148]	; (801415c <acquire_and_process_data+0x95c>)
 80140c6:	edd3 6a00 	vldr	s13, [r3]
 80140ca:	4b1a      	ldr	r3, [pc, #104]	; (8014134 <acquire_and_process_data+0x934>)
 80140cc:	781b      	ldrb	r3, [r3, #0]
 80140ce:	ee07 3a90 	vmov	s15, r3
 80140d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80140d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140da:	4b20      	ldr	r3, [pc, #128]	; (801415c <acquire_and_process_data+0x95c>)
 80140dc:	edc3 7a00 	vstr	s15, [r3]
			accMagnitude_MinMax = maxMagnitude - minMagnitude;
 80140e0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80140e4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80140e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140ec:	4b1c      	ldr	r3, [pc, #112]	; (8014160 <acquire_and_process_data+0x960>)
 80140ee:	edc3 7a00 	vstr	s15, [r3]
			accMagnitude_RMS = sqrt(accMagnitude_RMS/windowLength);
 80140f2:	4b1c      	ldr	r3, [pc, #112]	; (8014164 <acquire_and_process_data+0x964>)
 80140f4:	ed93 7a00 	vldr	s14, [r3]
 80140f8:	4b0e      	ldr	r3, [pc, #56]	; (8014134 <acquire_and_process_data+0x934>)
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	ee07 3a90 	vmov	s15, r3
 8014100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014104:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014108:	ee16 0a90 	vmov	r0, s13
 801410c:	f7ec fa34 	bl	8000578 <__aeabi_f2d>
 8014110:	4602      	mov	r2, r0
 8014112:	460b      	mov	r3, r1
 8014114:	ec43 2b10 	vmov	d0, r2, r3
 8014118:	f003 fea4 	bl	8017e64 <sqrt>
 801411c:	ec53 2b10 	vmov	r2, r3, d0
 8014120:	4610      	mov	r0, r2
 8014122:	4619      	mov	r1, r3
 8014124:	f7ec fd30 	bl	8000b88 <__aeabi_d2f>
 8014128:	4603      	mov	r3, r0
 801412a:	4a0e      	ldr	r2, [pc, #56]	; (8014164 <acquire_and_process_data+0x964>)
 801412c:	6013      	str	r3, [r2, #0]

			for (int i = 0; i < windowLength; i++) {
 801412e:	2300      	movs	r3, #0
 8014130:	633b      	str	r3, [r7, #48]	; 0x30
 8014132:	e0d0      	b.n	80142d6 <acquire_and_process_data+0xad6>
 8014134:	2000018e 	.word	0x2000018e
 8014138:	200037ac 	.word	0x200037ac
 801413c:	200037b4 	.word	0x200037b4
 8014140:	200037b8 	.word	0x200037b8
 8014144:	200037bc 	.word	0x200037bc
 8014148:	200037c4 	.word	0x200037c4
 801414c:	200037c8 	.word	0x200037c8
 8014150:	200037cc 	.word	0x200037cc
 8014154:	200037d4 	.word	0x200037d4
 8014158:	200037d8 	.word	0x200037d8
 801415c:	200037dc 	.word	0x200037dc
 8014160:	200037e4 	.word	0x200037e4
 8014164:	200037e8 	.word	0x200037e8
				accX_STD += pow(bufAccX[i] - accX_Mean, 2);
 8014168:	4a9f      	ldr	r2, [pc, #636]	; (80143e8 <acquire_and_process_data+0xbe8>)
 801416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801416c:	009b      	lsls	r3, r3, #2
 801416e:	4413      	add	r3, r2
 8014170:	ed93 7a00 	vldr	s14, [r3]
 8014174:	4b9d      	ldr	r3, [pc, #628]	; (80143ec <acquire_and_process_data+0xbec>)
 8014176:	edd3 7a00 	vldr	s15, [r3]
 801417a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801417e:	ee17 0a90 	vmov	r0, s15
 8014182:	f7ec f9f9 	bl	8000578 <__aeabi_f2d>
 8014186:	4602      	mov	r2, r0
 8014188:	460b      	mov	r3, r1
 801418a:	ed9f 1b95 	vldr	d1, [pc, #596]	; 80143e0 <acquire_and_process_data+0xbe0>
 801418e:	ec43 2b10 	vmov	d0, r2, r3
 8014192:	f003 fdf7 	bl	8017d84 <pow>
 8014196:	ec55 4b10 	vmov	r4, r5, d0
 801419a:	4b95      	ldr	r3, [pc, #596]	; (80143f0 <acquire_and_process_data+0xbf0>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	4618      	mov	r0, r3
 80141a0:	f7ec f9ea 	bl	8000578 <__aeabi_f2d>
 80141a4:	4602      	mov	r2, r0
 80141a6:	460b      	mov	r3, r1
 80141a8:	4620      	mov	r0, r4
 80141aa:	4629      	mov	r1, r5
 80141ac:	f7ec f886 	bl	80002bc <__adddf3>
 80141b0:	4602      	mov	r2, r0
 80141b2:	460b      	mov	r3, r1
 80141b4:	4610      	mov	r0, r2
 80141b6:	4619      	mov	r1, r3
 80141b8:	f7ec fce6 	bl	8000b88 <__aeabi_d2f>
 80141bc:	4603      	mov	r3, r0
 80141be:	4a8c      	ldr	r2, [pc, #560]	; (80143f0 <acquire_and_process_data+0xbf0>)
 80141c0:	6013      	str	r3, [r2, #0]
				accY_STD += pow(bufAccY[i] - accY_Mean, 2);
 80141c2:	4a8c      	ldr	r2, [pc, #560]	; (80143f4 <acquire_and_process_data+0xbf4>)
 80141c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c6:	009b      	lsls	r3, r3, #2
 80141c8:	4413      	add	r3, r2
 80141ca:	ed93 7a00 	vldr	s14, [r3]
 80141ce:	4b8a      	ldr	r3, [pc, #552]	; (80143f8 <acquire_and_process_data+0xbf8>)
 80141d0:	edd3 7a00 	vldr	s15, [r3]
 80141d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141d8:	ee17 0a90 	vmov	r0, s15
 80141dc:	f7ec f9cc 	bl	8000578 <__aeabi_f2d>
 80141e0:	4602      	mov	r2, r0
 80141e2:	460b      	mov	r3, r1
 80141e4:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 80143e0 <acquire_and_process_data+0xbe0>
 80141e8:	ec43 2b10 	vmov	d0, r2, r3
 80141ec:	f003 fdca 	bl	8017d84 <pow>
 80141f0:	ec55 4b10 	vmov	r4, r5, d0
 80141f4:	4b81      	ldr	r3, [pc, #516]	; (80143fc <acquire_and_process_data+0xbfc>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7ec f9bd 	bl	8000578 <__aeabi_f2d>
 80141fe:	4602      	mov	r2, r0
 8014200:	460b      	mov	r3, r1
 8014202:	4620      	mov	r0, r4
 8014204:	4629      	mov	r1, r5
 8014206:	f7ec f859 	bl	80002bc <__adddf3>
 801420a:	4602      	mov	r2, r0
 801420c:	460b      	mov	r3, r1
 801420e:	4610      	mov	r0, r2
 8014210:	4619      	mov	r1, r3
 8014212:	f7ec fcb9 	bl	8000b88 <__aeabi_d2f>
 8014216:	4603      	mov	r3, r0
 8014218:	4a78      	ldr	r2, [pc, #480]	; (80143fc <acquire_and_process_data+0xbfc>)
 801421a:	6013      	str	r3, [r2, #0]
				accZ_STD += pow(bufAccZ[i] - accZ_Mean, 2);
 801421c:	4a78      	ldr	r2, [pc, #480]	; (8014400 <acquire_and_process_data+0xc00>)
 801421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014220:	009b      	lsls	r3, r3, #2
 8014222:	4413      	add	r3, r2
 8014224:	ed93 7a00 	vldr	s14, [r3]
 8014228:	4b76      	ldr	r3, [pc, #472]	; (8014404 <acquire_and_process_data+0xc04>)
 801422a:	edd3 7a00 	vldr	s15, [r3]
 801422e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014232:	ee17 0a90 	vmov	r0, s15
 8014236:	f7ec f99f 	bl	8000578 <__aeabi_f2d>
 801423a:	4602      	mov	r2, r0
 801423c:	460b      	mov	r3, r1
 801423e:	ed9f 1b68 	vldr	d1, [pc, #416]	; 80143e0 <acquire_and_process_data+0xbe0>
 8014242:	ec43 2b10 	vmov	d0, r2, r3
 8014246:	f003 fd9d 	bl	8017d84 <pow>
 801424a:	ec55 4b10 	vmov	r4, r5, d0
 801424e:	4b6e      	ldr	r3, [pc, #440]	; (8014408 <acquire_and_process_data+0xc08>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	4618      	mov	r0, r3
 8014254:	f7ec f990 	bl	8000578 <__aeabi_f2d>
 8014258:	4602      	mov	r2, r0
 801425a:	460b      	mov	r3, r1
 801425c:	4620      	mov	r0, r4
 801425e:	4629      	mov	r1, r5
 8014260:	f7ec f82c 	bl	80002bc <__adddf3>
 8014264:	4602      	mov	r2, r0
 8014266:	460b      	mov	r3, r1
 8014268:	4610      	mov	r0, r2
 801426a:	4619      	mov	r1, r3
 801426c:	f7ec fc8c 	bl	8000b88 <__aeabi_d2f>
 8014270:	4603      	mov	r3, r0
 8014272:	4a65      	ldr	r2, [pc, #404]	; (8014408 <acquire_and_process_data+0xc08>)
 8014274:	6013      	str	r3, [r2, #0]
				accMagnitude_STD += pow(bufAccMagnitude[i] - accMagnitude_Mean, 2);
 8014276:	4a65      	ldr	r2, [pc, #404]	; (801440c <acquire_and_process_data+0xc0c>)
 8014278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427a:	009b      	lsls	r3, r3, #2
 801427c:	4413      	add	r3, r2
 801427e:	ed93 7a00 	vldr	s14, [r3]
 8014282:	4b63      	ldr	r3, [pc, #396]	; (8014410 <acquire_and_process_data+0xc10>)
 8014284:	edd3 7a00 	vldr	s15, [r3]
 8014288:	ee77 7a67 	vsub.f32	s15, s14, s15
 801428c:	ee17 0a90 	vmov	r0, s15
 8014290:	f7ec f972 	bl	8000578 <__aeabi_f2d>
 8014294:	4602      	mov	r2, r0
 8014296:	460b      	mov	r3, r1
 8014298:	ed9f 1b51 	vldr	d1, [pc, #324]	; 80143e0 <acquire_and_process_data+0xbe0>
 801429c:	ec43 2b10 	vmov	d0, r2, r3
 80142a0:	f003 fd70 	bl	8017d84 <pow>
 80142a4:	ec55 4b10 	vmov	r4, r5, d0
 80142a8:	4b5a      	ldr	r3, [pc, #360]	; (8014414 <acquire_and_process_data+0xc14>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7ec f963 	bl	8000578 <__aeabi_f2d>
 80142b2:	4602      	mov	r2, r0
 80142b4:	460b      	mov	r3, r1
 80142b6:	4620      	mov	r0, r4
 80142b8:	4629      	mov	r1, r5
 80142ba:	f7eb ffff 	bl	80002bc <__adddf3>
 80142be:	4602      	mov	r2, r0
 80142c0:	460b      	mov	r3, r1
 80142c2:	4610      	mov	r0, r2
 80142c4:	4619      	mov	r1, r3
 80142c6:	f7ec fc5f 	bl	8000b88 <__aeabi_d2f>
 80142ca:	4603      	mov	r3, r0
 80142cc:	4a51      	ldr	r2, [pc, #324]	; (8014414 <acquire_and_process_data+0xc14>)
 80142ce:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < windowLength; i++) {
 80142d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d2:	3301      	adds	r3, #1
 80142d4:	633b      	str	r3, [r7, #48]	; 0x30
 80142d6:	4b50      	ldr	r3, [pc, #320]	; (8014418 <acquire_and_process_data+0xc18>)
 80142d8:	781b      	ldrb	r3, [r3, #0]
 80142da:	461a      	mov	r2, r3
 80142dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142de:	4293      	cmp	r3, r2
 80142e0:	f6ff af42 	blt.w	8014168 <acquire_and_process_data+0x968>
			}

			accX_STD = sqrt(accX_STD / windowLength);
 80142e4:	4b42      	ldr	r3, [pc, #264]	; (80143f0 <acquire_and_process_data+0xbf0>)
 80142e6:	ed93 7a00 	vldr	s14, [r3]
 80142ea:	4b4b      	ldr	r3, [pc, #300]	; (8014418 <acquire_and_process_data+0xc18>)
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	ee07 3a90 	vmov	s15, r3
 80142f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80142fa:	ee16 0a90 	vmov	r0, s13
 80142fe:	f7ec f93b 	bl	8000578 <__aeabi_f2d>
 8014302:	4602      	mov	r2, r0
 8014304:	460b      	mov	r3, r1
 8014306:	ec43 2b10 	vmov	d0, r2, r3
 801430a:	f003 fdab 	bl	8017e64 <sqrt>
 801430e:	ec53 2b10 	vmov	r2, r3, d0
 8014312:	4610      	mov	r0, r2
 8014314:	4619      	mov	r1, r3
 8014316:	f7ec fc37 	bl	8000b88 <__aeabi_d2f>
 801431a:	4603      	mov	r3, r0
 801431c:	4a34      	ldr	r2, [pc, #208]	; (80143f0 <acquire_and_process_data+0xbf0>)
 801431e:	6013      	str	r3, [r2, #0]
			accY_STD = sqrt(accY_STD / windowLength);
 8014320:	4b36      	ldr	r3, [pc, #216]	; (80143fc <acquire_and_process_data+0xbfc>)
 8014322:	ed93 7a00 	vldr	s14, [r3]
 8014326:	4b3c      	ldr	r3, [pc, #240]	; (8014418 <acquire_and_process_data+0xc18>)
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	ee07 3a90 	vmov	s15, r3
 801432e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014332:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014336:	ee16 0a90 	vmov	r0, s13
 801433a:	f7ec f91d 	bl	8000578 <__aeabi_f2d>
 801433e:	4602      	mov	r2, r0
 8014340:	460b      	mov	r3, r1
 8014342:	ec43 2b10 	vmov	d0, r2, r3
 8014346:	f003 fd8d 	bl	8017e64 <sqrt>
 801434a:	ec53 2b10 	vmov	r2, r3, d0
 801434e:	4610      	mov	r0, r2
 8014350:	4619      	mov	r1, r3
 8014352:	f7ec fc19 	bl	8000b88 <__aeabi_d2f>
 8014356:	4603      	mov	r3, r0
 8014358:	4a28      	ldr	r2, [pc, #160]	; (80143fc <acquire_and_process_data+0xbfc>)
 801435a:	6013      	str	r3, [r2, #0]
			accZ_STD = sqrt(accZ_STD / windowLength);
 801435c:	4b2a      	ldr	r3, [pc, #168]	; (8014408 <acquire_and_process_data+0xc08>)
 801435e:	ed93 7a00 	vldr	s14, [r3]
 8014362:	4b2d      	ldr	r3, [pc, #180]	; (8014418 <acquire_and_process_data+0xc18>)
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	ee07 3a90 	vmov	s15, r3
 801436a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801436e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014372:	ee16 0a90 	vmov	r0, s13
 8014376:	f7ec f8ff 	bl	8000578 <__aeabi_f2d>
 801437a:	4602      	mov	r2, r0
 801437c:	460b      	mov	r3, r1
 801437e:	ec43 2b10 	vmov	d0, r2, r3
 8014382:	f003 fd6f 	bl	8017e64 <sqrt>
 8014386:	ec53 2b10 	vmov	r2, r3, d0
 801438a:	4610      	mov	r0, r2
 801438c:	4619      	mov	r1, r3
 801438e:	f7ec fbfb 	bl	8000b88 <__aeabi_d2f>
 8014392:	4603      	mov	r3, r0
 8014394:	4a1c      	ldr	r2, [pc, #112]	; (8014408 <acquire_and_process_data+0xc08>)
 8014396:	6013      	str	r3, [r2, #0]
			accMagnitude_STD = sqrt(accMagnitude_STD / windowLength);
 8014398:	4b1e      	ldr	r3, [pc, #120]	; (8014414 <acquire_and_process_data+0xc14>)
 801439a:	ed93 7a00 	vldr	s14, [r3]
 801439e:	4b1e      	ldr	r3, [pc, #120]	; (8014418 <acquire_and_process_data+0xc18>)
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	ee07 3a90 	vmov	s15, r3
 80143a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80143ae:	ee16 0a90 	vmov	r0, s13
 80143b2:	f7ec f8e1 	bl	8000578 <__aeabi_f2d>
 80143b6:	4602      	mov	r2, r0
 80143b8:	460b      	mov	r3, r1
 80143ba:	ec43 2b10 	vmov	d0, r2, r3
 80143be:	f003 fd51 	bl	8017e64 <sqrt>
 80143c2:	ec53 2b10 	vmov	r2, r3, d0
 80143c6:	4610      	mov	r0, r2
 80143c8:	4619      	mov	r1, r3
 80143ca:	f7ec fbdd 	bl	8000b88 <__aeabi_d2f>
 80143ce:	4603      	mov	r3, r0
 80143d0:	4a10      	ldr	r2, [pc, #64]	; (8014414 <acquire_and_process_data+0xc14>)
 80143d2:	6013      	str	r3, [r2, #0]


			//Replace first half of buffers with their second half
			for (int i = 0; i < windowOverlap; i++) {
 80143d4:	2300      	movs	r3, #0
 80143d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143d8:	e05b      	b.n	8014492 <acquire_and_process_data+0xc92>
 80143da:	bf00      	nop
 80143dc:	f3af 8000 	nop.w
 80143e0:	00000000 	.word	0x00000000
 80143e4:	40000000 	.word	0x40000000
 80143e8:	2000312c 	.word	0x2000312c
 80143ec:	200037ac 	.word	0x200037ac
 80143f0:	200037b0 	.word	0x200037b0
 80143f4:	200032cc 	.word	0x200032cc
 80143f8:	200037bc 	.word	0x200037bc
 80143fc:	200037c0 	.word	0x200037c0
 8014400:	2000346c 	.word	0x2000346c
 8014404:	200037cc 	.word	0x200037cc
 8014408:	200037d0 	.word	0x200037d0
 801440c:	2000360c 	.word	0x2000360c
 8014410:	200037dc 	.word	0x200037dc
 8014414:	200037e0 	.word	0x200037e0
 8014418:	2000018e 	.word	0x2000018e
				bufAccX[i] = bufAccX[i + windowOverlap];
 801441c:	4b52      	ldr	r3, [pc, #328]	; (8014568 <acquire_and_process_data+0xd68>)
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	461a      	mov	r2, r3
 8014422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014424:	4413      	add	r3, r2
 8014426:	4a51      	ldr	r2, [pc, #324]	; (801456c <acquire_and_process_data+0xd6c>)
 8014428:	009b      	lsls	r3, r3, #2
 801442a:	4413      	add	r3, r2
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	494f      	ldr	r1, [pc, #316]	; (801456c <acquire_and_process_data+0xd6c>)
 8014430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014432:	009b      	lsls	r3, r3, #2
 8014434:	440b      	add	r3, r1
 8014436:	601a      	str	r2, [r3, #0]
				bufAccY[i] = bufAccY[i + windowOverlap];
 8014438:	4b4b      	ldr	r3, [pc, #300]	; (8014568 <acquire_and_process_data+0xd68>)
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	461a      	mov	r2, r3
 801443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014440:	4413      	add	r3, r2
 8014442:	4a4b      	ldr	r2, [pc, #300]	; (8014570 <acquire_and_process_data+0xd70>)
 8014444:	009b      	lsls	r3, r3, #2
 8014446:	4413      	add	r3, r2
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	4949      	ldr	r1, [pc, #292]	; (8014570 <acquire_and_process_data+0xd70>)
 801444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801444e:	009b      	lsls	r3, r3, #2
 8014450:	440b      	add	r3, r1
 8014452:	601a      	str	r2, [r3, #0]
				bufAccZ[i] = bufAccZ[i + windowOverlap];
 8014454:	4b44      	ldr	r3, [pc, #272]	; (8014568 <acquire_and_process_data+0xd68>)
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	461a      	mov	r2, r3
 801445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801445c:	4413      	add	r3, r2
 801445e:	4a45      	ldr	r2, [pc, #276]	; (8014574 <acquire_and_process_data+0xd74>)
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	4413      	add	r3, r2
 8014464:	681a      	ldr	r2, [r3, #0]
 8014466:	4943      	ldr	r1, [pc, #268]	; (8014574 <acquire_and_process_data+0xd74>)
 8014468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446a:	009b      	lsls	r3, r3, #2
 801446c:	440b      	add	r3, r1
 801446e:	601a      	str	r2, [r3, #0]
				bufAccMagnitude[i] = bufAccMagnitude[i + windowOverlap];
 8014470:	4b3d      	ldr	r3, [pc, #244]	; (8014568 <acquire_and_process_data+0xd68>)
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	461a      	mov	r2, r3
 8014476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014478:	4413      	add	r3, r2
 801447a:	4a3f      	ldr	r2, [pc, #252]	; (8014578 <acquire_and_process_data+0xd78>)
 801447c:	009b      	lsls	r3, r3, #2
 801447e:	4413      	add	r3, r2
 8014480:	681a      	ldr	r2, [r3, #0]
 8014482:	493d      	ldr	r1, [pc, #244]	; (8014578 <acquire_and_process_data+0xd78>)
 8014484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014486:	009b      	lsls	r3, r3, #2
 8014488:	440b      	add	r3, r1
 801448a:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < windowOverlap; i++) {
 801448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448e:	3301      	adds	r3, #1
 8014490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014492:	4b35      	ldr	r3, [pc, #212]	; (8014568 <acquire_and_process_data+0xd68>)
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	461a      	mov	r2, r3
 8014498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801449a:	4293      	cmp	r3, r2
 801449c:	dbbe      	blt.n	801441c <acquire_and_process_data+0xc1c>
			}


			data[0][0] = accX_Mean;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	4a36      	ldr	r2, [pc, #216]	; (801457c <acquire_and_process_data+0xd7c>)
 80144a4:	6812      	ldr	r2, [r2, #0]
 80144a6:	601a      	str	r2, [r3, #0]
			data[0][1] = accX_STD;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	3304      	adds	r3, #4
 80144ae:	4a34      	ldr	r2, [pc, #208]	; (8014580 <acquire_and_process_data+0xd80>)
 80144b0:	6812      	ldr	r2, [r2, #0]
 80144b2:	601a      	str	r2, [r3, #0]
			data[0][2] = accX_MinMax;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	3308      	adds	r3, #8
 80144ba:	4a32      	ldr	r2, [pc, #200]	; (8014584 <acquire_and_process_data+0xd84>)
 80144bc:	6812      	ldr	r2, [r2, #0]
 80144be:	601a      	str	r2, [r3, #0]
			data[0][3] = accX_RMS;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	330c      	adds	r3, #12
 80144c6:	4a30      	ldr	r2, [pc, #192]	; (8014588 <acquire_and_process_data+0xd88>)
 80144c8:	6812      	ldr	r2, [r2, #0]
 80144ca:	601a      	str	r2, [r3, #0]

			data[0][4] = accY_Mean;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	3310      	adds	r3, #16
 80144d2:	4a2e      	ldr	r2, [pc, #184]	; (801458c <acquire_and_process_data+0xd8c>)
 80144d4:	6812      	ldr	r2, [r2, #0]
 80144d6:	601a      	str	r2, [r3, #0]
			data[0][5] = accY_STD;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	3314      	adds	r3, #20
 80144de:	4a2c      	ldr	r2, [pc, #176]	; (8014590 <acquire_and_process_data+0xd90>)
 80144e0:	6812      	ldr	r2, [r2, #0]
 80144e2:	601a      	str	r2, [r3, #0]
			data[0][6] = accY_MinMax;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	3318      	adds	r3, #24
 80144ea:	4a2a      	ldr	r2, [pc, #168]	; (8014594 <acquire_and_process_data+0xd94>)
 80144ec:	6812      	ldr	r2, [r2, #0]
 80144ee:	601a      	str	r2, [r3, #0]
			data[0][7] = accY_RMS;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	331c      	adds	r3, #28
 80144f6:	4a28      	ldr	r2, [pc, #160]	; (8014598 <acquire_and_process_data+0xd98>)
 80144f8:	6812      	ldr	r2, [r2, #0]
 80144fa:	601a      	str	r2, [r3, #0]

			data[0][8] = accZ_Mean;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	3320      	adds	r3, #32
 8014502:	4a26      	ldr	r2, [pc, #152]	; (801459c <acquire_and_process_data+0xd9c>)
 8014504:	6812      	ldr	r2, [r2, #0]
 8014506:	601a      	str	r2, [r3, #0]
			data[0][9] = accZ_STD;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	3324      	adds	r3, #36	; 0x24
 801450e:	4a24      	ldr	r2, [pc, #144]	; (80145a0 <acquire_and_process_data+0xda0>)
 8014510:	6812      	ldr	r2, [r2, #0]
 8014512:	601a      	str	r2, [r3, #0]
			data[0][10] = accZ_MinMax;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	3328      	adds	r3, #40	; 0x28
 801451a:	4a22      	ldr	r2, [pc, #136]	; (80145a4 <acquire_and_process_data+0xda4>)
 801451c:	6812      	ldr	r2, [r2, #0]
 801451e:	601a      	str	r2, [r3, #0]
			data[0][11] = accZ_RMS;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	332c      	adds	r3, #44	; 0x2c
 8014526:	4a20      	ldr	r2, [pc, #128]	; (80145a8 <acquire_and_process_data+0xda8>)
 8014528:	6812      	ldr	r2, [r2, #0]
 801452a:	601a      	str	r2, [r3, #0]

			data[0][12] = accMagnitude_Mean;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	3330      	adds	r3, #48	; 0x30
 8014532:	4a1e      	ldr	r2, [pc, #120]	; (80145ac <acquire_and_process_data+0xdac>)
 8014534:	6812      	ldr	r2, [r2, #0]
 8014536:	601a      	str	r2, [r3, #0]
			data[0][13] = accMagnitude_STD;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	3334      	adds	r3, #52	; 0x34
 801453e:	4a1c      	ldr	r2, [pc, #112]	; (80145b0 <acquire_and_process_data+0xdb0>)
 8014540:	6812      	ldr	r2, [r2, #0]
 8014542:	601a      	str	r2, [r3, #0]
			data[0][14] = accMagnitude_MinMax;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	3338      	adds	r3, #56	; 0x38
 801454a:	4a1a      	ldr	r2, [pc, #104]	; (80145b4 <acquire_and_process_data+0xdb4>)
 801454c:	6812      	ldr	r2, [r2, #0]
 801454e:	601a      	str	r2, [r3, #0]
			data[0][15] = accMagnitude_RMS;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	333c      	adds	r3, #60	; 0x3c
 8014556:	4a18      	ldr	r2, [pc, #96]	; (80145b8 <acquire_and_process_data+0xdb8>)
 8014558:	6812      	ldr	r2, [r2, #0]
 801455a:	601a      	str	r2, [r3, #0]
		}
  return 0;
 801455c:	2300      	movs	r3, #0
}
 801455e:	4618      	mov	r0, r3
 8014560:	3758      	adds	r7, #88	; 0x58
 8014562:	46bd      	mov	sp, r7
 8014564:	bdb0      	pop	{r4, r5, r7, pc}
 8014566:	bf00      	nop
 8014568:	2000018f 	.word	0x2000018f
 801456c:	2000312c 	.word	0x2000312c
 8014570:	200032cc 	.word	0x200032cc
 8014574:	2000346c 	.word	0x2000346c
 8014578:	2000360c 	.word	0x2000360c
 801457c:	200037ac 	.word	0x200037ac
 8014580:	200037b0 	.word	0x200037b0
 8014584:	200037b4 	.word	0x200037b4
 8014588:	200037b8 	.word	0x200037b8
 801458c:	200037bc 	.word	0x200037bc
 8014590:	200037c0 	.word	0x200037c0
 8014594:	200037c4 	.word	0x200037c4
 8014598:	200037c8 	.word	0x200037c8
 801459c:	200037cc 	.word	0x200037cc
 80145a0:	200037d0 	.word	0x200037d0
 80145a4:	200037d4 	.word	0x200037d4
 80145a8:	200037d8 	.word	0x200037d8
 80145ac:	200037dc 	.word	0x200037dc
 80145b0:	200037e0 	.word	0x200037e0
 80145b4:	200037e4 	.word	0x200037e4
 80145b8:	200037e8 	.word	0x200037e8

080145bc <post_process>:

int post_process(ai_i8* data[])
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b084      	sub	sp, #16
 80145c0:	af02      	add	r7, sp, #8
 80145c2:	6078      	str	r0, [r7, #4]
	snprintf(SendBuffer,BUFSIZE,"Razred: %lu, %s \r\n", (int32_t) *data[0], classes[(int) ((int32_t) *data[0])]);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f993 3000 	ldrsb.w	r3, [r3]
 80145cc:	4619      	mov	r1, r3
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	f993 3000 	ldrsb.w	r3, [r3]
 80145d6:	461a      	mov	r2, r3
 80145d8:	4b44      	ldr	r3, [pc, #272]	; (80146ec <post_process+0x130>)
 80145da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145de:	9300      	str	r3, [sp, #0]
 80145e0:	460b      	mov	r3, r1
 80145e2:	4a43      	ldr	r2, [pc, #268]	; (80146f0 <post_process+0x134>)
 80145e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80145e8:	4842      	ldr	r0, [pc, #264]	; (80146f4 <post_process+0x138>)
 80145ea:	f002 fb5d 	bl	8016ca8 <sniprintf>
	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80145ee:	4841      	ldr	r0, [pc, #260]	; (80146f4 <post_process+0x138>)
 80145f0:	f7eb fe06 	bl	8000200 <strlen>
 80145f4:	4603      	mov	r3, r0
 80145f6:	4619      	mov	r1, r3
 80145f8:	483e      	ldr	r0, [pc, #248]	; (80146f4 <post_process+0x138>)
 80145fa:	f7fe fa93 	bl	8012b24 <CDC_Transmit_FS>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80145fe:	2200      	movs	r2, #0
 8014600:	2104      	movs	r1, #4
 8014602:	483d      	ldr	r0, [pc, #244]	; (80146f8 <post_process+0x13c>)
 8014604:	f7ef fcc8 	bl	8003f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 8014608:	2201      	movs	r2, #1
 801460a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801460e:	483b      	ldr	r0, [pc, #236]	; (80146fc <post_process+0x140>)
 8014610:	f7ef fcc2 	bl	8003f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8014614:	2200      	movs	r2, #0
 8014616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801461a:	4839      	ldr	r0, [pc, #228]	; (8014700 <post_process+0x144>)
 801461c:	f7ef fcbc 	bl	8003f98 <HAL_GPIO_WritePin>

	switch((int32_t) *data[0])
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	f993 3000 	ldrsb.w	r3, [r3]
 8014628:	2b04      	cmp	r3, #4
 801462a:	d83a      	bhi.n	80146a2 <post_process+0xe6>
 801462c:	a201      	add	r2, pc, #4	; (adr r2, 8014634 <post_process+0x78>)
 801462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014632:	bf00      	nop
 8014634:	08014649 	.word	0x08014649
 8014638:	08014655 	.word	0x08014655
 801463c:	08014663 	.word	0x08014663
 8014640:	08014671 	.word	0x08014671
 8014644:	08014689 	.word	0x08014689
		    {
		        case 0:
		        	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8014648:	2201      	movs	r2, #1
 801464a:	2104      	movs	r1, #4
 801464c:	482a      	ldr	r0, [pc, #168]	; (80146f8 <post_process+0x13c>)
 801464e:	f7ef fca3 	bl	8003f98 <HAL_GPIO_WritePin>
		            break;
 8014652:	e026      	b.n	80146a2 <post_process+0xe6>
		        case 1:
		        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8014654:	2200      	movs	r2, #0
 8014656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801465a:	4828      	ldr	r0, [pc, #160]	; (80146fc <post_process+0x140>)
 801465c:	f7ef fc9c 	bl	8003f98 <HAL_GPIO_WritePin>
		        	break;
 8014660:	e01f      	b.n	80146a2 <post_process+0xe6>
		        case 2:
		        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8014662:	2201      	movs	r2, #1
 8014664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014668:	4825      	ldr	r0, [pc, #148]	; (8014700 <post_process+0x144>)
 801466a:	f7ef fc95 	bl	8003f98 <HAL_GPIO_WritePin>
		        	break;
 801466e:	e018      	b.n	80146a2 <post_process+0xe6>
		        case 3:
		        	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8014670:	2201      	movs	r2, #1
 8014672:	2104      	movs	r1, #4
 8014674:	4820      	ldr	r0, [pc, #128]	; (80146f8 <post_process+0x13c>)
 8014676:	f7ef fc8f 	bl	8003f98 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 801467a:	2200      	movs	r2, #0
 801467c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014680:	481e      	ldr	r0, [pc, #120]	; (80146fc <post_process+0x140>)
 8014682:	f7ef fc89 	bl	8003f98 <HAL_GPIO_WritePin>
		        	break;
 8014686:	e00c      	b.n	80146a2 <post_process+0xe6>
		        case 4:
		        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8014688:	2201      	movs	r2, #1
 801468a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801468e:	481c      	ldr	r0, [pc, #112]	; (8014700 <post_process+0x144>)
 8014690:	f7ef fc82 	bl	8003f98 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8014694:	2200      	movs	r2, #0
 8014696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801469a:	4818      	ldr	r0, [pc, #96]	; (80146fc <post_process+0x140>)
 801469c:	f7ef fc7c 	bl	8003f98 <HAL_GPIO_WritePin>
		        	break;
 80146a0:	bf00      	nop
		    }

	///////////////////////////////////////////////////////////////////SD card

	f_open(&SDFile, "Podatki.TXT", FA_OPEN_APPEND | FA_WRITE);
 80146a2:	2232      	movs	r2, #50	; 0x32
 80146a4:	4917      	ldr	r1, [pc, #92]	; (8014704 <post_process+0x148>)
 80146a6:	4818      	ldr	r0, [pc, #96]	; (8014708 <post_process+0x14c>)
 80146a8:	f7fc fe24 	bl	80112f4 <f_open>
	f_lseek(&SDFile, f_size(&SDFile));
 80146ac:	4b16      	ldr	r3, [pc, #88]	; (8014708 <post_process+0x14c>)
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	4619      	mov	r1, r3
 80146b2:	4815      	ldr	r0, [pc, #84]	; (8014708 <post_process+0x14c>)
 80146b4:	f7fd fa09 	bl	8011aca <f_lseek>

	strcpy(wtext, SendBuffer);
 80146b8:	490e      	ldr	r1, [pc, #56]	; (80146f4 <post_process+0x138>)
 80146ba:	4814      	ldr	r0, [pc, #80]	; (801470c <post_process+0x150>)
 80146bc:	f002 fb28 	bl	8016d10 <strcpy>

	res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80146c0:	4812      	ldr	r0, [pc, #72]	; (801470c <post_process+0x150>)
 80146c2:	f7eb fd9d 	bl	8000200 <strlen>
 80146c6:	4602      	mov	r2, r0
 80146c8:	4b11      	ldr	r3, [pc, #68]	; (8014710 <post_process+0x154>)
 80146ca:	4910      	ldr	r1, [pc, #64]	; (801470c <post_process+0x150>)
 80146cc:	480e      	ldr	r0, [pc, #56]	; (8014708 <post_process+0x14c>)
 80146ce:	f7fc ffdf 	bl	8011690 <f_write>
 80146d2:	4603      	mov	r3, r0
 80146d4:	461a      	mov	r2, r3
 80146d6:	4b0f      	ldr	r3, [pc, #60]	; (8014714 <post_process+0x158>)
 80146d8:	701a      	strb	r2, [r3, #0]

	f_close(&SDFile);
 80146da:	480b      	ldr	r0, [pc, #44]	; (8014708 <post_process+0x14c>)
 80146dc:	f7fd f9cb 	bl	8011a76 <f_close>

	///////////////////////////////////////////////////////////////////
  return 0;
 80146e0:	2300      	movs	r3, #0
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3708      	adds	r7, #8
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	20000190 	.word	0x20000190
 80146f0:	08018df0 	.word	0x08018df0
 80146f4:	2000302c 	.word	0x2000302c
 80146f8:	48001400 	.word	0x48001400
 80146fc:	48001800 	.word	0x48001800
 8014700:	48000400 	.word	0x48000400
 8014704:	08018e04 	.word	0x08018e04
 8014708:	200011c0 	.word	0x200011c0
 801470c:	200001a4 	.word	0x200001a4
 8014710:	20003800 	.word	0x20003800
 8014714:	200037fe 	.word	0x200037fe

08014718 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b084      	sub	sp, #16
 801471c:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 5 */

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 801471e:	2200      	movs	r2, #0
 8014720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014724:	488d      	ldr	r0, [pc, #564]	; (801495c <MX_X_CUBE_AI_Init+0x244>)
 8014726:	f7ef fc37 	bl	8003f98 <HAL_GPIO_WritePin>
	outdata[0] = 0x0f | 0x80 ; // read whoami
 801472a:	4b8d      	ldr	r3, [pc, #564]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 801472c:	228f      	movs	r2, #143	; 0x8f
 801472e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8014730:	f04f 33ff 	mov.w	r3, #4294967295
 8014734:	9300      	str	r3, [sp, #0]
 8014736:	2302      	movs	r3, #2
 8014738:	4a8a      	ldr	r2, [pc, #552]	; (8014964 <MX_X_CUBE_AI_Init+0x24c>)
 801473a:	4989      	ldr	r1, [pc, #548]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 801473c:	488a      	ldr	r0, [pc, #552]	; (8014968 <MX_X_CUBE_AI_Init+0x250>)
 801473e:	f7f5 fc89 	bl	800a054 <HAL_SPI_TransmitReceive>
	lis_id = indata[1];
 8014742:	4b88      	ldr	r3, [pc, #544]	; (8014964 <MX_X_CUBE_AI_Init+0x24c>)
 8014744:	785a      	ldrb	r2, [r3, #1]
 8014746:	4b89      	ldr	r3, [pc, #548]	; (801496c <MX_X_CUBE_AI_Init+0x254>)
 8014748:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 801474a:	2201      	movs	r2, #1
 801474c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014750:	4882      	ldr	r0, [pc, #520]	; (801495c <MX_X_CUBE_AI_Init+0x244>)
 8014752:	f7ef fc21 	bl	8003f98 <HAL_GPIO_WritePin>

	snprintf(SendBuffer,BUFSIZE,"[ID:%02x] \r\n",lis_id);
 8014756:	4b85      	ldr	r3, [pc, #532]	; (801496c <MX_X_CUBE_AI_Init+0x254>)
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	4a85      	ldr	r2, [pc, #532]	; (8014970 <MX_X_CUBE_AI_Init+0x258>)
 801475c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014760:	4884      	ldr	r0, [pc, #528]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 8014762:	f002 faa1 	bl	8016ca8 <sniprintf>
	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8014766:	4883      	ldr	r0, [pc, #524]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 8014768:	f7eb fd4a 	bl	8000200 <strlen>
 801476c:	4603      	mov	r3, r0
 801476e:	4619      	mov	r1, r3
 8014770:	4880      	ldr	r0, [pc, #512]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 8014772:	f7fe f9d7 	bl	8012b24 <CDC_Transmit_FS>


	// sensor setup (activation and setting frequency)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8014776:	2200      	movs	r2, #0
 8014778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801477c:	4877      	ldr	r0, [pc, #476]	; (801495c <MX_X_CUBE_AI_Init+0x244>)
 801477e:	f7ef fc0b 	bl	8003f98 <HAL_GPIO_WritePin>

	outdata[0] = 0x10 ; // register used for setting up the accelerometer
 8014782:	4b77      	ldr	r3, [pc, #476]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 8014784:	2210      	movs	r2, #16
 8014786:	701a      	strb	r2, [r3, #0]
	outdata[1] = 0x48 ;//0x4a ;//0x40 ; // set frequency to 104Hz and FS to 4g
 8014788:	4b75      	ldr	r3, [pc, #468]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 801478a:	2248      	movs	r2, #72	; 0x48
 801478c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 801478e:	f04f 33ff 	mov.w	r3, #4294967295
 8014792:	9300      	str	r3, [sp, #0]
 8014794:	2302      	movs	r3, #2
 8014796:	4a73      	ldr	r2, [pc, #460]	; (8014964 <MX_X_CUBE_AI_Init+0x24c>)
 8014798:	4971      	ldr	r1, [pc, #452]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 801479a:	4873      	ldr	r0, [pc, #460]	; (8014968 <MX_X_CUBE_AI_Init+0x250>)
 801479c:	f7f5 fc5a 	bl	800a054 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80147a0:	2201      	movs	r2, #1
 80147a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80147a6:	486d      	ldr	r0, [pc, #436]	; (801495c <MX_X_CUBE_AI_Init+0x244>)
 80147a8:	f7ef fbf6 	bl	8003f98 <HAL_GPIO_WritePin>


	outdata[0] = 0x15 | 0x80 ; // read CTRL6_C
 80147ac:	4b6c      	ldr	r3, [pc, #432]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 80147ae:	2295      	movs	r2, #149	; 0x95
 80147b0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80147b2:	2200      	movs	r2, #0
 80147b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80147b8:	4868      	ldr	r0, [pc, #416]	; (801495c <MX_X_CUBE_AI_Init+0x244>)
 80147ba:	f7ef fbed 	bl	8003f98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80147be:	f04f 33ff 	mov.w	r3, #4294967295
 80147c2:	9300      	str	r3, [sp, #0]
 80147c4:	2302      	movs	r3, #2
 80147c6:	4a67      	ldr	r2, [pc, #412]	; (8014964 <MX_X_CUBE_AI_Init+0x24c>)
 80147c8:	4965      	ldr	r1, [pc, #404]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 80147ca:	4867      	ldr	r0, [pc, #412]	; (8014968 <MX_X_CUBE_AI_Init+0x250>)
 80147cc:	f7f5 fc42 	bl	800a054 <HAL_SPI_TransmitReceive>
	uint8_t existingValue = indata[1];
 80147d0:	4b64      	ldr	r3, [pc, #400]	; (8014964 <MX_X_CUBE_AI_Init+0x24c>)
 80147d2:	785b      	ldrb	r3, [r3, #1]
 80147d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80147d6:	2201      	movs	r2, #1
 80147d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80147dc:	485f      	ldr	r0, [pc, #380]	; (801495c <MX_X_CUBE_AI_Init+0x244>)
 80147de:	f7ef fbdb 	bl	8003f98 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80147e2:	2200      	movs	r2, #0
 80147e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80147e8:	485c      	ldr	r0, [pc, #368]	; (801495c <MX_X_CUBE_AI_Init+0x244>)
 80147ea:	f7ef fbd5 	bl	8003f98 <HAL_GPIO_WritePin>
	outdata[0] = 0x15 ; // write to register CTRL6_C
 80147ee:	4b5c      	ldr	r3, [pc, #368]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 80147f0:	2215      	movs	r2, #21
 80147f2:	701a      	strb	r2, [r3, #0]
	outdata[1] = existingValue | 0x10 ; //disable high performance
 80147f4:	79fb      	ldrb	r3, [r7, #7]
 80147f6:	f043 0310 	orr.w	r3, r3, #16
 80147fa:	b2da      	uxtb	r2, r3
 80147fc:	4b58      	ldr	r3, [pc, #352]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 80147fe:	705a      	strb	r2, [r3, #1]
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8014800:	f04f 33ff 	mov.w	r3, #4294967295
 8014804:	9300      	str	r3, [sp, #0]
 8014806:	2302      	movs	r3, #2
 8014808:	4a56      	ldr	r2, [pc, #344]	; (8014964 <MX_X_CUBE_AI_Init+0x24c>)
 801480a:	4955      	ldr	r1, [pc, #340]	; (8014960 <MX_X_CUBE_AI_Init+0x248>)
 801480c:	4856      	ldr	r0, [pc, #344]	; (8014968 <MX_X_CUBE_AI_Init+0x250>)
 801480e:	f7f5 fc21 	bl	800a054 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8014812:	2201      	movs	r2, #1
 8014814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014818:	4850      	ldr	r0, [pc, #320]	; (801495c <MX_X_CUBE_AI_Init+0x244>)
 801481a:	f7ef fbbd 	bl	8003f98 <HAL_GPIO_WritePin>


	///////////////////////////////////////////////////////////////////SD card
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 801481e:	2200      	movs	r2, #0
 8014820:	4955      	ldr	r1, [pc, #340]	; (8014978 <MX_X_CUBE_AI_Init+0x260>)
 8014822:	4856      	ldr	r0, [pc, #344]	; (801497c <MX_X_CUBE_AI_Init+0x264>)
 8014824:	f7fc fd20 	bl	8011268 <f_mount>
 8014828:	4603      	mov	r3, r0
 801482a:	2b00      	cmp	r3, #0
 801482c:	d013      	beq.n	8014856 <MX_X_CUBE_AI_Init+0x13e>
	{
		//Error_Handler();
		snprintf(SendBuffer,BUFSIZE,"Error1 \r\n");
 801482e:	4a54      	ldr	r2, [pc, #336]	; (8014980 <MX_X_CUBE_AI_Init+0x268>)
 8014830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014834:	484f      	ldr	r0, [pc, #316]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 8014836:	f002 fa37 	bl	8016ca8 <sniprintf>
		CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 801483a:	484e      	ldr	r0, [pc, #312]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 801483c:	f7eb fce0 	bl	8000200 <strlen>
 8014840:	4603      	mov	r3, r0
 8014842:	4619      	mov	r1, r3
 8014844:	484b      	ldr	r0, [pc, #300]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 8014846:	f7fe f96d 	bl	8012b24 <CDC_Transmit_FS>
		strcpy(errorValue, "Error1 \r\n");
 801484a:	4b4e      	ldr	r3, [pc, #312]	; (8014984 <MX_X_CUBE_AI_Init+0x26c>)
 801484c:	4a4c      	ldr	r2, [pc, #304]	; (8014980 <MX_X_CUBE_AI_Init+0x268>)
 801484e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014850:	c303      	stmia	r3!, {r0, r1}
 8014852:	801a      	strh	r2, [r3, #0]
 8014854:	e073      	b.n	801493e <MX_X_CUBE_AI_Init+0x226>
	}
	else
	{
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8014856:	f44f 7300 	mov.w	r3, #512	; 0x200
 801485a:	9300      	str	r3, [sp, #0]
 801485c:	4b4a      	ldr	r3, [pc, #296]	; (8014988 <MX_X_CUBE_AI_Init+0x270>)
 801485e:	2200      	movs	r2, #0
 8014860:	2107      	movs	r1, #7
 8014862:	4845      	ldr	r0, [pc, #276]	; (8014978 <MX_X_CUBE_AI_Init+0x260>)
 8014864:	f7fd fb3a 	bl	8011edc <f_mkfs>
 8014868:	4603      	mov	r3, r0
 801486a:	2b00      	cmp	r3, #0
 801486c:	d01f      	beq.n	80148ae <MX_X_CUBE_AI_Init+0x196>
	    {
			//Error_Handler();
			snprintf(SendBuffer,BUFSIZE,"Error2 \r\n");
 801486e:	4a47      	ldr	r2, [pc, #284]	; (801498c <MX_X_CUBE_AI_Init+0x274>)
 8014870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014874:	483f      	ldr	r0, [pc, #252]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 8014876:	f002 fa17 	bl	8016ca8 <sniprintf>
			CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 801487a:	483e      	ldr	r0, [pc, #248]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 801487c:	f7eb fcc0 	bl	8000200 <strlen>
 8014880:	4603      	mov	r3, r0
 8014882:	4619      	mov	r1, r3
 8014884:	483b      	ldr	r0, [pc, #236]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 8014886:	f7fe f94d 	bl	8012b24 <CDC_Transmit_FS>

			FRESULT errorState = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 801488a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801488e:	9300      	str	r3, [sp, #0]
 8014890:	4b3d      	ldr	r3, [pc, #244]	; (8014988 <MX_X_CUBE_AI_Init+0x270>)
 8014892:	2200      	movs	r2, #0
 8014894:	2107      	movs	r1, #7
 8014896:	4838      	ldr	r0, [pc, #224]	; (8014978 <MX_X_CUBE_AI_Init+0x260>)
 8014898:	f7fd fb20 	bl	8011edc <f_mkfs>
 801489c:	4603      	mov	r3, r0
 801489e:	71bb      	strb	r3, [r7, #6]

			snprintf(errorValue, 20, "Error2 [%d]\r\n", errorState);
 80148a0:	79bb      	ldrb	r3, [r7, #6]
 80148a2:	4a3b      	ldr	r2, [pc, #236]	; (8014990 <MX_X_CUBE_AI_Init+0x278>)
 80148a4:	2114      	movs	r1, #20
 80148a6:	4837      	ldr	r0, [pc, #220]	; (8014984 <MX_X_CUBE_AI_Init+0x26c>)
 80148a8:	f002 f9fe 	bl	8016ca8 <sniprintf>
 80148ac:	e047      	b.n	801493e <MX_X_CUBE_AI_Init+0x226>
	    }
		else
		{
			//Open file for writing (Create)
			if(f_open(&SDFile, "Podatki.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80148ae:	220a      	movs	r2, #10
 80148b0:	4938      	ldr	r1, [pc, #224]	; (8014994 <MX_X_CUBE_AI_Init+0x27c>)
 80148b2:	4839      	ldr	r0, [pc, #228]	; (8014998 <MX_X_CUBE_AI_Init+0x280>)
 80148b4:	f7fc fd1e 	bl	80112f4 <f_open>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d013      	beq.n	80148e6 <MX_X_CUBE_AI_Init+0x1ce>
			{
				//Error_Handler();
				snprintf(SendBuffer,BUFSIZE,"Error3 \r\n");
 80148be:	4a37      	ldr	r2, [pc, #220]	; (801499c <MX_X_CUBE_AI_Init+0x284>)
 80148c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80148c4:	482b      	ldr	r0, [pc, #172]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 80148c6:	f002 f9ef 	bl	8016ca8 <sniprintf>
				CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80148ca:	482a      	ldr	r0, [pc, #168]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 80148cc:	f7eb fc98 	bl	8000200 <strlen>
 80148d0:	4603      	mov	r3, r0
 80148d2:	4619      	mov	r1, r3
 80148d4:	4827      	ldr	r0, [pc, #156]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 80148d6:	f7fe f925 	bl	8012b24 <CDC_Transmit_FS>
				strcpy(errorValue, "Error3 \r\n");
 80148da:	4b2a      	ldr	r3, [pc, #168]	; (8014984 <MX_X_CUBE_AI_Init+0x26c>)
 80148dc:	4a2f      	ldr	r2, [pc, #188]	; (801499c <MX_X_CUBE_AI_Init+0x284>)
 80148de:	ca07      	ldmia	r2, {r0, r1, r2}
 80148e0:	c303      	stmia	r3!, {r0, r1}
 80148e2:	801a      	strh	r2, [r3, #0]
 80148e4:	e02b      	b.n	801493e <MX_X_CUBE_AI_Init+0x226>
			}
			else
			{

				//Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80148e6:	482e      	ldr	r0, [pc, #184]	; (80149a0 <MX_X_CUBE_AI_Init+0x288>)
 80148e8:	f7eb fc8a 	bl	8000200 <strlen>
 80148ec:	4602      	mov	r2, r0
 80148ee:	4b2d      	ldr	r3, [pc, #180]	; (80149a4 <MX_X_CUBE_AI_Init+0x28c>)
 80148f0:	492b      	ldr	r1, [pc, #172]	; (80149a0 <MX_X_CUBE_AI_Init+0x288>)
 80148f2:	4829      	ldr	r0, [pc, #164]	; (8014998 <MX_X_CUBE_AI_Init+0x280>)
 80148f4:	f7fc fecc 	bl	8011690 <f_write>
 80148f8:	4603      	mov	r3, r0
 80148fa:	461a      	mov	r2, r3
 80148fc:	4b2a      	ldr	r3, [pc, #168]	; (80149a8 <MX_X_CUBE_AI_Init+0x290>)
 80148fe:	701a      	strb	r2, [r3, #0]
				if((byteswritten == 0) || (res != FR_OK))
 8014900:	4b28      	ldr	r3, [pc, #160]	; (80149a4 <MX_X_CUBE_AI_Init+0x28c>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d003      	beq.n	8014910 <MX_X_CUBE_AI_Init+0x1f8>
 8014908:	4b27      	ldr	r3, [pc, #156]	; (80149a8 <MX_X_CUBE_AI_Init+0x290>)
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d013      	beq.n	8014938 <MX_X_CUBE_AI_Init+0x220>
				{
					//Error_Handler();
					snprintf(SendBuffer,BUFSIZE,"Error4 \r\n");
 8014910:	4a26      	ldr	r2, [pc, #152]	; (80149ac <MX_X_CUBE_AI_Init+0x294>)
 8014912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014916:	4817      	ldr	r0, [pc, #92]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 8014918:	f002 f9c6 	bl	8016ca8 <sniprintf>
					CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 801491c:	4815      	ldr	r0, [pc, #84]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 801491e:	f7eb fc6f 	bl	8000200 <strlen>
 8014922:	4603      	mov	r3, r0
 8014924:	4619      	mov	r1, r3
 8014926:	4813      	ldr	r0, [pc, #76]	; (8014974 <MX_X_CUBE_AI_Init+0x25c>)
 8014928:	f7fe f8fc 	bl	8012b24 <CDC_Transmit_FS>
					strcpy(errorValue, "Error4 \r\n");
 801492c:	4b15      	ldr	r3, [pc, #84]	; (8014984 <MX_X_CUBE_AI_Init+0x26c>)
 801492e:	4a1f      	ldr	r2, [pc, #124]	; (80149ac <MX_X_CUBE_AI_Init+0x294>)
 8014930:	ca07      	ldmia	r2, {r0, r1, r2}
 8014932:	c303      	stmia	r3!, {r0, r1}
 8014934:	801a      	strh	r2, [r3, #0]
 8014936:	e002      	b.n	801493e <MX_X_CUBE_AI_Init+0x226>
				}
				else
				{

					f_close(&SDFile);
 8014938:	4817      	ldr	r0, [pc, #92]	; (8014998 <MX_X_CUBE_AI_Init+0x280>)
 801493a:	f7fd f89c 	bl	8011a76 <f_close>
				}
			}
		}
	}

	f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 801493e:	2200      	movs	r2, #0
 8014940:	490d      	ldr	r1, [pc, #52]	; (8014978 <MX_X_CUBE_AI_Init+0x260>)
 8014942:	480e      	ldr	r0, [pc, #56]	; (801497c <MX_X_CUBE_AI_Init+0x264>)
 8014944:	f7fc fc90 	bl	8011268 <f_mount>
	///////////////////////////////////////////////////////////////////



  printf("\r\nTEMPLATE - initialization\r\n");
 8014948:	4819      	ldr	r0, [pc, #100]	; (80149b0 <MX_X_CUBE_AI_Init+0x298>)
 801494a:	f002 f995 	bl	8016c78 <puts>

  ai_boostrap(data_activations0);
 801494e:	4819      	ldr	r0, [pc, #100]	; (80149b4 <MX_X_CUBE_AI_Init+0x29c>)
 8014950:	f7fe fe94 	bl	801367c <ai_boostrap>
    /* USER CODE END 5 */
}
 8014954:	bf00      	nop
 8014956:	3708      	adds	r7, #8
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}
 801495c:	48001000 	.word	0x48001000
 8014960:	200037f4 	.word	0x200037f4
 8014964:	200037f0 	.word	0x200037f0
 8014968:	20000d40 	.word	0x20000d40
 801496c:	200037f6 	.word	0x200037f6
 8014970:	08018e10 	.word	0x08018e10
 8014974:	2000302c 	.word	0x2000302c
 8014978:	20000f88 	.word	0x20000f88
 801497c:	20000f8c 	.word	0x20000f8c
 8014980:	08018e20 	.word	0x08018e20
 8014984:	200002a4 	.word	0x200002a4
 8014988:	20003804 	.word	0x20003804
 801498c:	08018e2c 	.word	0x08018e2c
 8014990:	08018e38 	.word	0x08018e38
 8014994:	08018e04 	.word	0x08018e04
 8014998:	200011c0 	.word	0x200011c0
 801499c:	08018e48 	.word	0x08018e48
 80149a0:	200001a4 	.word	0x200001a4
 80149a4:	20003800 	.word	0x20003800
 80149a8:	200037fe 	.word	0x200037fe
 80149ac:	08018e54 	.word	0x08018e54
 80149b0:	08018e60 	.word	0x08018e60
 80149b4:	200002b8 	.word	0x200002b8

080149b8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 80149be:	f04f 33ff 	mov.w	r3, #4294967295
 80149c2:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 80149c4:	4816      	ldr	r0, [pc, #88]	; (8014a20 <MX_X_CUBE_AI_Process+0x68>)
 80149c6:	f002 f957 	bl	8016c78 <puts>

  if (randomforest) {
 80149ca:	4b16      	ldr	r3, [pc, #88]	; (8014a24 <MX_X_CUBE_AI_Process+0x6c>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d013      	beq.n	80149fa <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 80149d2:	4815      	ldr	r0, [pc, #84]	; (8014a28 <MX_X_CUBE_AI_Process+0x70>)
 80149d4:	f7fe ff14 	bl	8013800 <acquire_and_process_data>
 80149d8:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d102      	bne.n	80149e6 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 80149e0:	f7fe feb0 	bl	8013744 <ai_run>
 80149e4:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d103      	bne.n	80149f4 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 80149ec:	480f      	ldr	r0, [pc, #60]	; (8014a2c <MX_X_CUBE_AI_Process+0x74>)
 80149ee:	f7ff fde5 	bl	80145bc <post_process>
 80149f2:	6078      	str	r0, [r7, #4]
    } while (res==0);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d0eb      	beq.n	80149d2 <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d00a      	beq.n	8014a16 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8014a00:	2311      	movs	r3, #17
 8014a02:	703b      	strb	r3, [r7, #0]
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	2210      	movs	r2, #16
 8014a08:	f362 231f 	bfi	r3, r2, #8, #24
 8014a0c:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 8014a0e:	4908      	ldr	r1, [pc, #32]	; (8014a30 <MX_X_CUBE_AI_Process+0x78>)
 8014a10:	6838      	ldr	r0, [r7, #0]
 8014a12:	f7fe fe13 	bl	801363c <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8014a16:	bf00      	nop
 8014a18:	3708      	adds	r7, #8
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
 8014a1e:	bf00      	nop
 8014a20:	08018e80 	.word	0x08018e80
 8014a24:	20003a78 	.word	0x20003a78
 8014a28:	20003a04 	.word	0x20003a04
 8014a2c:	20003a08 	.word	0x20003a08
 8014a30:	08018e9c 	.word	0x08018e9c

08014a34 <randomforest_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool randomforest_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_randomforest_activations_map, 1, params)) {
 8014a3e:	683a      	ldr	r2, [r7, #0]
 8014a40:	2101      	movs	r1, #1
 8014a42:	481b      	ldr	r0, [pc, #108]	; (8014ab0 <randomforest_configure_activations+0x7c>)
 8014a44:	f000 fb56 	bl	80150f4 <ai_platform_get_activations_map>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d025      	beq.n	8014a9a <randomforest_configure_activations+0x66>
    /* Updating activations (byte) offsets */
    
    float_input_output_array.data = AI_PTR(g_randomforest_activations_map[0] + 0);
 8014a4e:	4b18      	ldr	r3, [pc, #96]	; (8014ab0 <randomforest_configure_activations+0x7c>)
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	4a18      	ldr	r2, [pc, #96]	; (8014ab4 <randomforest_configure_activations+0x80>)
 8014a54:	6093      	str	r3, [r2, #8]
    float_input_output_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 0);
 8014a56:	4b16      	ldr	r3, [pc, #88]	; (8014ab0 <randomforest_configure_activations+0x7c>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	4a16      	ldr	r2, [pc, #88]	; (8014ab4 <randomforest_configure_activations+0x80>)
 8014a5c:	60d3      	str	r3, [r2, #12]
    
    label_output0_array.data = AI_PTR(g_randomforest_activations_map[0] + 64);
 8014a5e:	4b14      	ldr	r3, [pc, #80]	; (8014ab0 <randomforest_configure_activations+0x7c>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	3340      	adds	r3, #64	; 0x40
 8014a64:	4a14      	ldr	r2, [pc, #80]	; (8014ab8 <randomforest_configure_activations+0x84>)
 8014a66:	6093      	str	r3, [r2, #8]
    label_output0_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 64);
 8014a68:	4b11      	ldr	r3, [pc, #68]	; (8014ab0 <randomforest_configure_activations+0x7c>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	3340      	adds	r3, #64	; 0x40
 8014a6e:	4a12      	ldr	r2, [pc, #72]	; (8014ab8 <randomforest_configure_activations+0x84>)
 8014a70:	60d3      	str	r3, [r2, #12]
    
    label_output1_array.data = AI_PTR(g_randomforest_activations_map[0] + 68);
 8014a72:	4b0f      	ldr	r3, [pc, #60]	; (8014ab0 <randomforest_configure_activations+0x7c>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	3344      	adds	r3, #68	; 0x44
 8014a78:	4a10      	ldr	r2, [pc, #64]	; (8014abc <randomforest_configure_activations+0x88>)
 8014a7a:	6093      	str	r3, [r2, #8]
    label_output1_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 68);
 8014a7c:	4b0c      	ldr	r3, [pc, #48]	; (8014ab0 <randomforest_configure_activations+0x7c>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	3344      	adds	r3, #68	; 0x44
 8014a82:	4a0e      	ldr	r2, [pc, #56]	; (8014abc <randomforest_configure_activations+0x88>)
 8014a84:	60d3      	str	r3, [r2, #12]
    
    output_probability_output_array.data = AI_PTR(g_randomforest_activations_map[0] + 0);
 8014a86:	4b0a      	ldr	r3, [pc, #40]	; (8014ab0 <randomforest_configure_activations+0x7c>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	4a0d      	ldr	r2, [pc, #52]	; (8014ac0 <randomforest_configure_activations+0x8c>)
 8014a8c:	6093      	str	r3, [r2, #8]
    output_probability_output_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 0);
 8014a8e:	4b08      	ldr	r3, [pc, #32]	; (8014ab0 <randomforest_configure_activations+0x7c>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	4a0b      	ldr	r2, [pc, #44]	; (8014ac0 <randomforest_configure_activations+0x8c>)
 8014a94:	60d3      	str	r3, [r2, #12]
    
    return true;
 8014a96:	2301      	movs	r3, #1
 8014a98:	e005      	b.n	8014aa6 <randomforest_configure_activations+0x72>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8014a9a:	2213      	movs	r2, #19
 8014a9c:	2130      	movs	r1, #48	; 0x30
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f000 fc0c 	bl	80152bc <ai_platform_network_set_error>
  return false;
 8014aa4:	2300      	movs	r3, #0
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3708      	adds	r7, #8
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	20003a84 	.word	0x20003a84
 8014ab4:	200003ac 	.word	0x200003ac
 8014ab8:	200002bc 	.word	0x200002bc
 8014abc:	200002cc 	.word	0x200002cc
 8014ac0:	200002ec 	.word	0x200002ec

08014ac4 <randomforest_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool randomforest_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_randomforest_weights_map, 1, params)) {
 8014ace:	683a      	ldr	r2, [r7, #0]
 8014ad0:	2101      	movs	r1, #1
 8014ad2:	4888      	ldr	r0, [pc, #544]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014ad4:	f000 faba 	bl	801504c <ai_platform_get_weights_map>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	f000 8100 	beq.w	8014ce0 <randomforest_configure_weights+0x21c>
    /* Updating weights (byte) offsets */
    
    label_class_nodeids_array.format |= AI_FMT_FLAG_CONST;
 8014ae0:	4b85      	ldr	r3, [pc, #532]	; (8014cf8 <randomforest_configure_weights+0x234>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014ae8:	4a83      	ldr	r2, [pc, #524]	; (8014cf8 <randomforest_configure_weights+0x234>)
 8014aea:	6013      	str	r3, [r2, #0]
    label_class_nodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 0);
 8014aec:	4b81      	ldr	r3, [pc, #516]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	4a81      	ldr	r2, [pc, #516]	; (8014cf8 <randomforest_configure_weights+0x234>)
 8014af2:	6093      	str	r3, [r2, #8]
    label_class_nodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 0);
 8014af4:	4b7f      	ldr	r3, [pc, #508]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	4a7f      	ldr	r2, [pc, #508]	; (8014cf8 <randomforest_configure_weights+0x234>)
 8014afa:	60d3      	str	r3, [r2, #12]
    
    label_branch_mode_array.format |= AI_FMT_FLAG_CONST;
 8014afc:	4b7f      	ldr	r3, [pc, #508]	; (8014cfc <randomforest_configure_weights+0x238>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014b04:	4a7d      	ldr	r2, [pc, #500]	; (8014cfc <randomforest_configure_weights+0x238>)
 8014b06:	6013      	str	r3, [r2, #0]
    label_branch_mode_array.data = AI_PTR(g_randomforest_weights_map[0] + 13880);
 8014b08:	4b7a      	ldr	r3, [pc, #488]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8014b10:	3338      	adds	r3, #56	; 0x38
 8014b12:	4a7a      	ldr	r2, [pc, #488]	; (8014cfc <randomforest_configure_weights+0x238>)
 8014b14:	6093      	str	r3, [r2, #8]
    label_branch_mode_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 13880);
 8014b16:	4b77      	ldr	r3, [pc, #476]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8014b1e:	3338      	adds	r3, #56	; 0x38
 8014b20:	4a76      	ldr	r2, [pc, #472]	; (8014cfc <randomforest_configure_weights+0x238>)
 8014b22:	60d3      	str	r3, [r2, #12]
    
    label_nb_class_by_estimator_array.format |= AI_FMT_FLAG_CONST;
 8014b24:	4b76      	ldr	r3, [pc, #472]	; (8014d00 <randomforest_configure_weights+0x23c>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014b2c:	4a74      	ldr	r2, [pc, #464]	; (8014d00 <randomforest_configure_weights+0x23c>)
 8014b2e:	6013      	str	r3, [r2, #0]
    label_nb_class_by_estimator_array.data = AI_PTR(g_randomforest_weights_map[0] + 13900);
 8014b30:	4b70      	ldr	r3, [pc, #448]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8014b38:	330c      	adds	r3, #12
 8014b3a:	4a71      	ldr	r2, [pc, #452]	; (8014d00 <randomforest_configure_weights+0x23c>)
 8014b3c:	6093      	str	r3, [r2, #8]
    label_nb_class_by_estimator_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 13900);
 8014b3e:	4b6d      	ldr	r3, [pc, #436]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8014b46:	330c      	adds	r3, #12
 8014b48:	4a6d      	ldr	r2, [pc, #436]	; (8014d00 <randomforest_configure_weights+0x23c>)
 8014b4a:	60d3      	str	r3, [r2, #12]
    
    label_nodes_featureids_array.format |= AI_FMT_FLAG_CONST;
 8014b4c:	4b6d      	ldr	r3, [pc, #436]	; (8014d04 <randomforest_configure_weights+0x240>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014b54:	4a6b      	ldr	r2, [pc, #428]	; (8014d04 <randomforest_configure_weights+0x240>)
 8014b56:	6013      	str	r3, [r2, #0]
    label_nodes_featureids_array.data = AI_PTR(g_randomforest_weights_map[0] + 13936);
 8014b58:	4b66      	ldr	r3, [pc, #408]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8014b60:	3330      	adds	r3, #48	; 0x30
 8014b62:	4a68      	ldr	r2, [pc, #416]	; (8014d04 <randomforest_configure_weights+0x240>)
 8014b64:	6093      	str	r3, [r2, #8]
    label_nodes_featureids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 13936);
 8014b66:	4b63      	ldr	r3, [pc, #396]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8014b6e:	3330      	adds	r3, #48	; 0x30
 8014b70:	4a64      	ldr	r2, [pc, #400]	; (8014d04 <randomforest_configure_weights+0x240>)
 8014b72:	60d3      	str	r3, [r2, #12]
    
    label_classlabels_int64s_array.format |= AI_FMT_FLAG_CONST;
 8014b74:	4b64      	ldr	r3, [pc, #400]	; (8014d08 <randomforest_configure_weights+0x244>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014b7c:	4a62      	ldr	r2, [pc, #392]	; (8014d08 <randomforest_configure_weights+0x244>)
 8014b7e:	6013      	str	r3, [r2, #0]
    label_classlabels_int64s_array.data = AI_PTR(g_randomforest_weights_map[0] + 16696);
 8014b80:	4b5c      	ldr	r3, [pc, #368]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8014b88:	3338      	adds	r3, #56	; 0x38
 8014b8a:	4a5f      	ldr	r2, [pc, #380]	; (8014d08 <randomforest_configure_weights+0x244>)
 8014b8c:	6093      	str	r3, [r2, #8]
    label_classlabels_int64s_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 16696);
 8014b8e:	4b59      	ldr	r3, [pc, #356]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8014b96:	3338      	adds	r3, #56	; 0x38
 8014b98:	4a5b      	ldr	r2, [pc, #364]	; (8014d08 <randomforest_configure_weights+0x244>)
 8014b9a:	60d3      	str	r3, [r2, #12]
    
    label_nodes_values_array.format |= AI_FMT_FLAG_CONST;
 8014b9c:	4b5b      	ldr	r3, [pc, #364]	; (8014d0c <randomforest_configure_weights+0x248>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014ba4:	4a59      	ldr	r2, [pc, #356]	; (8014d0c <randomforest_configure_weights+0x248>)
 8014ba6:	6013      	str	r3, [r2, #0]
    label_nodes_values_array.data = AI_PTR(g_randomforest_weights_map[0] + 16716);
 8014ba8:	4b52      	ldr	r3, [pc, #328]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8014bb0:	334c      	adds	r3, #76	; 0x4c
 8014bb2:	4a56      	ldr	r2, [pc, #344]	; (8014d0c <randomforest_configure_weights+0x248>)
 8014bb4:	6093      	str	r3, [r2, #8]
    label_nodes_values_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 16716);
 8014bb6:	4b4f      	ldr	r3, [pc, #316]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8014bbe:	334c      	adds	r3, #76	; 0x4c
 8014bc0:	4a52      	ldr	r2, [pc, #328]	; (8014d0c <randomforest_configure_weights+0x248>)
 8014bc2:	60d3      	str	r3, [r2, #12]
    
    label_base_values_array.format |= AI_FMT_FLAG_CONST;
 8014bc4:	4b52      	ldr	r3, [pc, #328]	; (8014d10 <randomforest_configure_weights+0x24c>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014bcc:	4a50      	ldr	r2, [pc, #320]	; (8014d10 <randomforest_configure_weights+0x24c>)
 8014bce:	6013      	str	r3, [r2, #0]
    label_base_values_array.data = AI_PTR(g_randomforest_weights_map[0] + 27752);
 8014bd0:	4b48      	ldr	r3, [pc, #288]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8014bd8:	3368      	adds	r3, #104	; 0x68
 8014bda:	4a4d      	ldr	r2, [pc, #308]	; (8014d10 <randomforest_configure_weights+0x24c>)
 8014bdc:	6093      	str	r3, [r2, #8]
    label_base_values_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 27752);
 8014bde:	4b45      	ldr	r3, [pc, #276]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8014be6:	3368      	adds	r3, #104	; 0x68
 8014be8:	4a49      	ldr	r2, [pc, #292]	; (8014d10 <randomforest_configure_weights+0x24c>)
 8014bea:	60d3      	str	r3, [r2, #12]
    
    label_nodes_truenodeids_array.format |= AI_FMT_FLAG_CONST;
 8014bec:	4b49      	ldr	r3, [pc, #292]	; (8014d14 <randomforest_configure_weights+0x250>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014bf4:	4a47      	ldr	r2, [pc, #284]	; (8014d14 <randomforest_configure_weights+0x250>)
 8014bf6:	6013      	str	r3, [r2, #0]
    label_nodes_truenodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 27772);
 8014bf8:	4b3e      	ldr	r3, [pc, #248]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8014c00:	337c      	adds	r3, #124	; 0x7c
 8014c02:	4a44      	ldr	r2, [pc, #272]	; (8014d14 <randomforest_configure_weights+0x250>)
 8014c04:	6093      	str	r3, [r2, #8]
    label_nodes_truenodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 27772);
 8014c06:	4b3b      	ldr	r3, [pc, #236]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8014c0e:	337c      	adds	r3, #124	; 0x7c
 8014c10:	4a40      	ldr	r2, [pc, #256]	; (8014d14 <randomforest_configure_weights+0x250>)
 8014c12:	60d3      	str	r3, [r2, #12]
    
    label_class_ids_array.format |= AI_FMT_FLAG_CONST;
 8014c14:	4b40      	ldr	r3, [pc, #256]	; (8014d18 <randomforest_configure_weights+0x254>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014c1c:	4a3e      	ldr	r2, [pc, #248]	; (8014d18 <randomforest_configure_weights+0x254>)
 8014c1e:	6013      	str	r3, [r2, #0]
    label_class_ids_array.data = AI_PTR(g_randomforest_weights_map[0] + 33292);
 8014c20:	4b34      	ldr	r3, [pc, #208]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8014c28:	330c      	adds	r3, #12
 8014c2a:	4a3b      	ldr	r2, [pc, #236]	; (8014d18 <randomforest_configure_weights+0x254>)
 8014c2c:	6093      	str	r3, [r2, #8]
    label_class_ids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 33292);
 8014c2e:	4b31      	ldr	r3, [pc, #196]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8014c36:	330c      	adds	r3, #12
 8014c38:	4a37      	ldr	r2, [pc, #220]	; (8014d18 <randomforest_configure_weights+0x254>)
 8014c3a:	60d3      	str	r3, [r2, #12]
    
    output_probability_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 8014c3c:	4b37      	ldr	r3, [pc, #220]	; (8014d1c <randomforest_configure_weights+0x258>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014c44:	4a35      	ldr	r2, [pc, #212]	; (8014d1c <randomforest_configure_weights+0x258>)
 8014c46:	6013      	str	r3, [r2, #0]
    output_probability_classlabels_ints_array.data = AI_PTR(g_randomforest_weights_map[0] + 47172);
 8014c48:	4b2a      	ldr	r3, [pc, #168]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8014c50:	3344      	adds	r3, #68	; 0x44
 8014c52:	4a32      	ldr	r2, [pc, #200]	; (8014d1c <randomforest_configure_weights+0x258>)
 8014c54:	6093      	str	r3, [r2, #8]
    output_probability_classlabels_ints_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 47172);
 8014c56:	4b27      	ldr	r3, [pc, #156]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8014c5e:	3344      	adds	r3, #68	; 0x44
 8014c60:	4a2e      	ldr	r2, [pc, #184]	; (8014d1c <randomforest_configure_weights+0x258>)
 8014c62:	60d3      	str	r3, [r2, #12]
    
    label_nodes_falsenodeids_array.format |= AI_FMT_FLAG_CONST;
 8014c64:	4b2e      	ldr	r3, [pc, #184]	; (8014d20 <randomforest_configure_weights+0x25c>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014c6c:	4a2c      	ldr	r2, [pc, #176]	; (8014d20 <randomforest_configure_weights+0x25c>)
 8014c6e:	6013      	str	r3, [r2, #0]
    label_nodes_falsenodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 47180);
 8014c70:	4b20      	ldr	r3, [pc, #128]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8014c78:	334c      	adds	r3, #76	; 0x4c
 8014c7a:	4a29      	ldr	r2, [pc, #164]	; (8014d20 <randomforest_configure_weights+0x25c>)
 8014c7c:	6093      	str	r3, [r2, #8]
    label_nodes_falsenodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 47180);
 8014c7e:	4b1d      	ldr	r3, [pc, #116]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8014c86:	334c      	adds	r3, #76	; 0x4c
 8014c88:	4a25      	ldr	r2, [pc, #148]	; (8014d20 <randomforest_configure_weights+0x25c>)
 8014c8a:	60d3      	str	r3, [r2, #12]
    
    label_class_weights_array.format |= AI_FMT_FLAG_CONST;
 8014c8c:	4b25      	ldr	r3, [pc, #148]	; (8014d24 <randomforest_configure_weights+0x260>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014c94:	4a23      	ldr	r2, [pc, #140]	; (8014d24 <randomforest_configure_weights+0x260>)
 8014c96:	6013      	str	r3, [r2, #0]
    label_class_weights_array.data = AI_PTR(g_randomforest_weights_map[0] + 52700);
 8014c98:	4b16      	ldr	r3, [pc, #88]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8014ca0:	33dc      	adds	r3, #220	; 0xdc
 8014ca2:	4a20      	ldr	r2, [pc, #128]	; (8014d24 <randomforest_configure_weights+0x260>)
 8014ca4:	6093      	str	r3, [r2, #8]
    label_class_weights_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 52700);
 8014ca6:	4b13      	ldr	r3, [pc, #76]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8014cae:	33dc      	adds	r3, #220	; 0xdc
 8014cb0:	4a1c      	ldr	r2, [pc, #112]	; (8014d24 <randomforest_configure_weights+0x260>)
 8014cb2:	60d3      	str	r3, [r2, #12]
    
    label_nb_node_by_estimator_array.format |= AI_FMT_FLAG_CONST;
 8014cb4:	4b1c      	ldr	r3, [pc, #112]	; (8014d28 <randomforest_configure_weights+0x264>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014cbc:	4a1a      	ldr	r2, [pc, #104]	; (8014d28 <randomforest_configure_weights+0x264>)
 8014cbe:	6013      	str	r3, [r2, #0]
    label_nb_node_by_estimator_array.data = AI_PTR(g_randomforest_weights_map[0] + 80460);
 8014cc0:	4b0c      	ldr	r3, [pc, #48]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	f503 339d 	add.w	r3, r3, #80384	; 0x13a00
 8014cc8:	334c      	adds	r3, #76	; 0x4c
 8014cca:	4a17      	ldr	r2, [pc, #92]	; (8014d28 <randomforest_configure_weights+0x264>)
 8014ccc:	6093      	str	r3, [r2, #8]
    label_nb_node_by_estimator_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 80460);
 8014cce:	4b09      	ldr	r3, [pc, #36]	; (8014cf4 <randomforest_configure_weights+0x230>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	f503 339d 	add.w	r3, r3, #80384	; 0x13a00
 8014cd6:	334c      	adds	r3, #76	; 0x4c
 8014cd8:	4a13      	ldr	r2, [pc, #76]	; (8014d28 <randomforest_configure_weights+0x264>)
 8014cda:	60d3      	str	r3, [r2, #12]
    
    return true;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	e005      	b.n	8014cec <randomforest_configure_weights+0x228>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8014ce0:	2212      	movs	r2, #18
 8014ce2:	2130      	movs	r1, #48	; 0x30
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f000 fae9 	bl	80152bc <ai_platform_network_set_error>
  return false;
 8014cea:	2300      	movs	r3, #0
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	3708      	adds	r7, #8
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	20003a88 	.word	0x20003a88
 8014cf8:	200002dc 	.word	0x200002dc
 8014cfc:	200002fc 	.word	0x200002fc
 8014d00:	2000030c 	.word	0x2000030c
 8014d04:	2000031c 	.word	0x2000031c
 8014d08:	2000032c 	.word	0x2000032c
 8014d0c:	2000033c 	.word	0x2000033c
 8014d10:	2000034c 	.word	0x2000034c
 8014d14:	2000035c 	.word	0x2000035c
 8014d18:	2000036c 	.word	0x2000036c
 8014d1c:	2000037c 	.word	0x2000037c
 8014d20:	2000038c 	.word	0x2000038c
 8014d24:	2000039c 	.word	0x2000039c
 8014d28:	200003bc 	.word	0x200003bc

08014d2c <ai_randomforest_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_randomforest_get_error(ai_handle network)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b082      	sub	sp, #8
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f000 fa53 	bl	80151e0 <ai_platform_network_get_error>
 8014d3a:	4603      	mov	r3, r0
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3708      	adds	r7, #8
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <ai_randomforest_create>:

AI_API_ENTRY
ai_error ai_randomforest_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b084      	sub	sp, #16
 8014d48:	af02      	add	r7, sp, #8
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8014d4e:	2300      	movs	r3, #0
 8014d50:	9301      	str	r3, [sp, #4]
 8014d52:	2305      	movs	r3, #5
 8014d54:	9300      	str	r3, [sp, #0]
 8014d56:	2301      	movs	r3, #1
 8014d58:	4a04      	ldr	r2, [pc, #16]	; (8014d6c <ai_randomforest_create+0x28>)
 8014d5a:	6839      	ldr	r1, [r7, #0]
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f000 fc59 	bl	8015614 <ai_platform_network_create>
 8014d62:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8014d64:	4618      	mov	r0, r3
 8014d66:	3708      	adds	r7, #8
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	20000958 	.word	0x20000958

08014d70 <ai_randomforest_create_and_init>:

AI_API_ENTRY
ai_error ai_randomforest_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b096      	sub	sp, #88	; 0x58
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60f8      	str	r0, [r7, #12]
 8014d78:	60b9      	str	r1, [r7, #8]
 8014d7a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_randomforest_create(network, AI_RANDOMFOREST_DATA_CONFIG);
 8014d7c:	2100      	movs	r1, #0
 8014d7e:	68f8      	ldr	r0, [r7, #12]
 8014d80:	f7ff ffe0 	bl	8014d44 <ai_randomforest_create>
 8014d84:	4603      	mov	r3, r0
 8014d86:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8014d88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d001      	beq.n	8014d94 <ai_randomforest_create_and_init+0x24>
        return err;
 8014d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d92:	e05d      	b.n	8014e50 <ai_randomforest_create_and_init+0xe0>
    if (ai_randomforest_data_params_get(&params) != true) {
 8014d94:	f107 0314 	add.w	r3, r7, #20
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f000 f8dd 	bl	8014f58 <ai_randomforest_data_params_get>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	f083 0301 	eor.w	r3, r3, #1
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d008      	beq.n	8014dbc <ai_randomforest_create_and_init+0x4c>
        err = ai_randomforest_get_error(*network);
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	4618      	mov	r0, r3
 8014db0:	f7ff ffbc 	bl	8014d2c <ai_randomforest_get_error>
 8014db4:	4603      	mov	r3, r0
 8014db6:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8014db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dba:	e049      	b.n	8014e50 <ai_randomforest_create_and_init+0xe0>
    }
#if defined(AI_RANDOMFOREST_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d016      	beq.n	8014df0 <ai_randomforest_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8014dc6:	e00e      	b.n	8014de6 <ai_randomforest_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8014dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	68ba      	ldr	r2, [r7, #8]
 8014dd0:	4413      	add	r3, r2
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	f107 0314 	add.w	r3, r7, #20
 8014dd8:	330c      	adds	r3, #12
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f000 f922 	bl	8015024 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8014de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014de2:	3301      	adds	r3, #1
 8014de4:	657b      	str	r3, [r7, #84]	; 0x54
 8014de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014de8:	461a      	mov	r2, r3
 8014dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dec:	4293      	cmp	r3, r2
 8014dee:	dbeb      	blt.n	8014dc8 <ai_randomforest_create_and_init+0x58>
    }
#endif
#if defined(AI_RANDOMFOREST_DATA_WEIGHTS_COUNT)
    if (weights) {
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d016      	beq.n	8014e24 <ai_randomforest_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8014df6:	2300      	movs	r3, #0
 8014df8:	653b      	str	r3, [r7, #80]	; 0x50
 8014dfa:	e00e      	b.n	8014e1a <ai_randomforest_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8014dfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	4413      	add	r3, r2
 8014e06:	681a      	ldr	r2, [r3, #0]
 8014e08:	f107 0314 	add.w	r3, r7, #20
 8014e0c:	3304      	adds	r3, #4
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f000 f908 	bl	8015024 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8014e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e16:	3301      	adds	r3, #1
 8014e18:	653b      	str	r3, [r7, #80]	; 0x50
 8014e1a:	8b7b      	ldrh	r3, [r7, #26]
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e20:	4293      	cmp	r3, r2
 8014e22:	dbeb      	blt.n	8014dfc <ai_randomforest_create_and_init+0x8c>
    }
#endif
    if (ai_randomforest_init(*network, &params) != true) {
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	f107 0214 	add.w	r2, r7, #20
 8014e2c:	4611      	mov	r1, r2
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f000 f846 	bl	8014ec0 <ai_randomforest_init>
 8014e34:	4603      	mov	r3, r0
 8014e36:	f083 0301 	eor.w	r3, r3, #1
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d006      	beq.n	8014e4e <ai_randomforest_create_and_init+0xde>
        err = ai_randomforest_get_error(*network);
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7ff ff71 	bl	8014d2c <ai_randomforest_get_error>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8014e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3758      	adds	r7, #88	; 0x58
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <ai_randomforest_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_randomforest_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b082      	sub	sp, #8
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d104      	bne.n	8014e72 <ai_randomforest_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8014e68:	4b06      	ldr	r3, [pc, #24]	; (8014e84 <ai_randomforest_inputs_get+0x2c>)
 8014e6a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	4a06      	ldr	r2, [pc, #24]	; (8014e88 <ai_randomforest_inputs_get+0x30>)
 8014e70:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8014e72:	6839      	ldr	r1, [r7, #0]
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f000 fa27 	bl	80152c8 <ai_platform_inputs_get>
 8014e7a:	4603      	mov	r3, r0
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3708      	adds	r7, #8
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	20000958 	.word	0x20000958
 8014e88:	a1c00100 	.word	0xa1c00100

08014e8c <ai_randomforest_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_randomforest_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d104      	bne.n	8014ea6 <ai_randomforest_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8014e9c:	4b06      	ldr	r3, [pc, #24]	; (8014eb8 <ai_randomforest_outputs_get+0x2c>)
 8014e9e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	4a06      	ldr	r2, [pc, #24]	; (8014ebc <ai_randomforest_outputs_get+0x30>)
 8014ea4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8014ea6:	6839      	ldr	r1, [r7, #0]
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f000 fae3 	bl	8015474 <ai_platform_outputs_get>
 8014eae:	4603      	mov	r3, r0
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3708      	adds	r7, #8
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	20000958 	.word	0x20000958
 8014ebc:	a1c00100 	.word	0xa1c00100

08014ec0 <ai_randomforest_init>:
}

AI_API_ENTRY
ai_bool ai_randomforest_init(
  ai_handle network, const ai_network_params* params)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b084      	sub	sp, #16
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
 8014ec8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8014eca:	6839      	ldr	r1, [r7, #0]
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f000 fc77 	bl	80157c0 <ai_platform_network_init>
 8014ed2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d101      	bne.n	8014ede <ai_randomforest_init+0x1e>
 8014eda:	2300      	movs	r3, #0
 8014edc:	e028      	b.n	8014f30 <ai_randomforest_init+0x70>

  ai_bool ok = true;
 8014ede:	2301      	movs	r3, #1
 8014ee0:	72fb      	strb	r3, [r7, #11]
  ok &= randomforest_configure_weights(net_ctx, params);
 8014ee2:	6839      	ldr	r1, [r7, #0]
 8014ee4:	68f8      	ldr	r0, [r7, #12]
 8014ee6:	f7ff fded 	bl	8014ac4 <randomforest_configure_weights>
 8014eea:	4603      	mov	r3, r0
 8014eec:	461a      	mov	r2, r3
 8014eee:	7afb      	ldrb	r3, [r7, #11]
 8014ef0:	4013      	ands	r3, r2
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	bf14      	ite	ne
 8014ef6:	2301      	movne	r3, #1
 8014ef8:	2300      	moveq	r3, #0
 8014efa:	72fb      	strb	r3, [r7, #11]
  ok &= randomforest_configure_activations(net_ctx, params);
 8014efc:	6839      	ldr	r1, [r7, #0]
 8014efe:	68f8      	ldr	r0, [r7, #12]
 8014f00:	f7ff fd98 	bl	8014a34 <randomforest_configure_activations>
 8014f04:	4603      	mov	r3, r0
 8014f06:	461a      	mov	r2, r3
 8014f08:	7afb      	ldrb	r3, [r7, #11]
 8014f0a:	4013      	ands	r3, r2
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	bf14      	ite	ne
 8014f10:	2301      	movne	r3, #1
 8014f12:	2300      	moveq	r3, #0
 8014f14:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f000 fd40 	bl	801599c <ai_platform_network_post_init>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	461a      	mov	r2, r3
 8014f20:	7afb      	ldrb	r3, [r7, #11]
 8014f22:	4013      	ands	r3, r2
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	bf14      	ite	ne
 8014f28:	2301      	movne	r3, #1
 8014f2a:	2300      	moveq	r3, #0
 8014f2c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8014f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3710      	adds	r7, #16
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}

08014f38 <ai_randomforest_run>:


AI_API_ENTRY
ai_i32 ai_randomforest_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b084      	sub	sp, #16
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	60f8      	str	r0, [r7, #12]
 8014f40:	60b9      	str	r1, [r7, #8]
 8014f42:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8014f44:	687a      	ldr	r2, [r7, #4]
 8014f46:	68b9      	ldr	r1, [r7, #8]
 8014f48:	68f8      	ldr	r0, [r7, #12]
 8014f4a:	f000 fdaf 	bl	8015aac <ai_platform_network_process>
 8014f4e:	4603      	mov	r3, r0
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3710      	adds	r7, #16
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <ai_randomforest_data_params_get>:
 * @ingroup randomforest_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_randomforest_data_params_get(ai_network_params* params)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b086      	sub	sp, #24
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d101      	bne.n	8014f6a <ai_randomforest_data_params_get+0x12>
 8014f66:	2300      	movs	r3, #0
 8014f68:	e016      	b.n	8014f98 <ai_randomforest_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8014f6a:	4a0d      	ldr	r2, [pc, #52]	; (8014fa0 <ai_randomforest_data_params_get+0x48>)
 8014f6c:	f107 0310 	add.w	r3, r7, #16
 8014f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f74:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_RANDOMFOREST_DATA_ACTIVATIONS_COUNT, g_randomforest_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8014f78:	4a0a      	ldr	r2, [pc, #40]	; (8014fa4 <ai_randomforest_data_params_get+0x4c>)
 8014f7a:	f107 0308 	add.w	r3, r7, #8
 8014f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f82:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_RANDOMFOREST_DATA_WEIGHTS_COUNT, g_randomforest_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8014f86:	f107 0210 	add.w	r2, r7, #16
 8014f8a:	f107 0308 	add.w	r3, r7, #8
 8014f8e:	4619      	mov	r1, r3
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f000 f903 	bl	801519c <ai_platform_bind_network_params>
 8014f96:	4603      	mov	r3, r0
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3718      	adds	r7, #24
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}
 8014fa0:	08018ed0 	.word	0x08018ed0
 8014fa4:	08018ed8 	.word	0x08018ed8

08014fa8 <ai_buffer_get_size>:
 8014fa8:	b378      	cbz	r0, 801500a <ai_buffer_get_size+0x62>
 8014faa:	b410      	push	{r4}
 8014fac:	6803      	ldr	r3, [r0, #0]
 8014fae:	4a17      	ldr	r2, [pc, #92]	; (801500c <ai_buffer_get_size+0x64>)
 8014fb0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8014fb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014fb8:	4293      	cmp	r3, r2
 8014fba:	d01e      	beq.n	8014ffa <ai_buffer_get_size+0x52>
 8014fbc:	6984      	ldr	r4, [r0, #24]
 8014fbe:	6862      	ldr	r2, [r4, #4]
 8014fc0:	7d03      	ldrb	r3, [r0, #20]
 8014fc2:	6941      	ldr	r1, [r0, #20]
 8014fc4:	f1a3 0301 	sub.w	r3, r3, #1
 8014fc8:	fab3 f383 	clz	r3, r3
 8014fcc:	095b      	lsrs	r3, r3, #5
 8014fce:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8014fd2:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8014fd6:	da0b      	bge.n	8014ff0 <ai_buffer_get_size+0x48>
 8014fd8:	2b01      	cmp	r3, #1
 8014fda:	d102      	bne.n	8014fe2 <ai_buffer_get_size+0x3a>
 8014fdc:	2802      	cmp	r0, #2
 8014fde:	d007      	beq.n	8014ff0 <ai_buffer_get_size+0x48>
 8014fe0:	2302      	movs	r3, #2
 8014fe2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8014fe6:	3301      	adds	r3, #1
 8014fe8:	4298      	cmp	r0, r3
 8014fea:	fb01 f202 	mul.w	r2, r1, r2
 8014fee:	d1f3      	bne.n	8014fd8 <ai_buffer_get_size+0x30>
 8014ff0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8014ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ff8:	4770      	bx	lr
 8014ffa:	2900      	cmp	r1, #0
 8014ffc:	d0de      	beq.n	8014fbc <ai_buffer_get_size+0x14>
 8014ffe:	6984      	ldr	r4, [r0, #24]
 8015000:	6863      	ldr	r3, [r4, #4]
 8015002:	331f      	adds	r3, #31
 8015004:	f023 021f 	bic.w	r2, r3, #31
 8015008:	e7da      	b.n	8014fc0 <ai_buffer_get_size+0x18>
 801500a:	4770      	bx	lr
 801500c:	000400c0 	.word	0x000400c0

08015010 <ai_buffer_array_sane>:
 8015010:	b138      	cbz	r0, 8015022 <ai_buffer_array_sane+0x12>
 8015012:	6843      	ldr	r3, [r0, #4]
 8015014:	b123      	cbz	r3, 8015020 <ai_buffer_array_sane+0x10>
 8015016:	8840      	ldrh	r0, [r0, #2]
 8015018:	3800      	subs	r0, #0
 801501a:	bf18      	it	ne
 801501c:	2001      	movne	r0, #1
 801501e:	4770      	bx	lr
 8015020:	4618      	mov	r0, r3
 8015022:	4770      	bx	lr

08015024 <ai_buffer_array_item_set_address>:
 8015024:	b150      	cbz	r0, 801503c <ai_buffer_array_item_set_address+0x18>
 8015026:	6843      	ldr	r3, [r0, #4]
 8015028:	b14b      	cbz	r3, 801503e <ai_buffer_array_item_set_address+0x1a>
 801502a:	8840      	ldrh	r0, [r0, #2]
 801502c:	b900      	cbnz	r0, 8015030 <ai_buffer_array_item_set_address+0xc>
 801502e:	4770      	bx	lr
 8015030:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8015034:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8015038:	2001      	movs	r0, #1
 801503a:	604a      	str	r2, [r1, #4]
 801503c:	4770      	bx	lr
 801503e:	4618      	mov	r0, r3
 8015040:	4770      	bx	lr
 8015042:	bf00      	nop

08015044 <_ai_platform_acquire_crc>:
 8015044:	2001      	movs	r0, #1
 8015046:	4770      	bx	lr

08015048 <_ai_platform_release_crc>:
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop

0801504c <ai_platform_get_weights_map>:
 801504c:	2a00      	cmp	r2, #0
 801504e:	d037      	beq.n	80150c0 <ai_platform_get_weights_map+0x74>
 8015050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015052:	4604      	mov	r4, r0
 8015054:	b1a0      	cbz	r0, 8015080 <ai_platform_get_weights_map+0x34>
 8015056:	460f      	mov	r7, r1
 8015058:	b191      	cbz	r1, 8015080 <ai_platform_get_weights_map+0x34>
 801505a:	4b25      	ldr	r3, [pc, #148]	; (80150f0 <ai_platform_get_weights_map+0xa4>)
 801505c:	6810      	ldr	r0, [r2, #0]
 801505e:	4298      	cmp	r0, r3
 8015060:	4615      	mov	r5, r2
 8015062:	d00f      	beq.n	8015084 <ai_platform_get_weights_map+0x38>
 8015064:	6855      	ldr	r5, [r2, #4]
 8015066:	b15d      	cbz	r5, 8015080 <ai_platform_get_weights_map+0x34>
 8015068:	682e      	ldr	r6, [r5, #0]
 801506a:	429e      	cmp	r6, r3
 801506c:	d02a      	beq.n	80150c4 <ai_platform_get_weights_map+0x78>
 801506e:	f1a1 0001 	sub.w	r0, r1, #1
 8015072:	6025      	str	r5, [r4, #0]
 8015074:	fab0 f080 	clz	r0, r0
 8015078:	0940      	lsrs	r0, r0, #5
 801507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801507c:	42a7      	cmp	r7, r4
 801507e:	d034      	beq.n	80150ea <ai_platform_get_weights_map+0x9e>
 8015080:	2000      	movs	r0, #0
 8015082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015084:	1d10      	adds	r0, r2, #4
 8015086:	f7ff ffc3 	bl	8015010 <ai_buffer_array_sane>
 801508a:	2800      	cmp	r0, #0
 801508c:	d0f8      	beq.n	8015080 <ai_platform_get_weights_map+0x34>
 801508e:	88eb      	ldrh	r3, [r5, #6]
 8015090:	429f      	cmp	r7, r3
 8015092:	d1f5      	bne.n	8015080 <ai_platform_get_weights_map+0x34>
 8015094:	f04f 0e00 	mov.w	lr, #0
 8015098:	1f23      	subs	r3, r4, #4
 801509a:	4670      	mov	r0, lr
 801509c:	68aa      	ldr	r2, [r5, #8]
 801509e:	eb02 0c0e 	add.w	ip, r2, lr
 80150a2:	f10e 0e1c 	add.w	lr, lr, #28
 80150a6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80150aa:	b124      	cbz	r4, 80150b6 <ai_platform_get_weights_map+0x6a>
 80150ac:	3001      	adds	r0, #1
 80150ae:	4287      	cmp	r7, r0
 80150b0:	f843 4f04 	str.w	r4, [r3, #4]!
 80150b4:	d1f2      	bne.n	801509c <ai_platform_get_weights_map+0x50>
 80150b6:	1a38      	subs	r0, r7, r0
 80150b8:	fab0 f080 	clz	r0, r0
 80150bc:	0940      	lsrs	r0, r0, #5
 80150be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150c0:	2000      	movs	r0, #0
 80150c2:	4770      	bx	lr
 80150c4:	1f23      	subs	r3, r4, #4
 80150c6:	4628      	mov	r0, r5
 80150c8:	2400      	movs	r4, #0
 80150ca:	e000      	b.n	80150ce <ai_platform_get_weights_map+0x82>
 80150cc:	4614      	mov	r4, r2
 80150ce:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80150d2:	42b2      	cmp	r2, r6
 80150d4:	d0d2      	beq.n	801507c <ai_platform_get_weights_map+0x30>
 80150d6:	f843 2f04 	str.w	r2, [r3, #4]!
 80150da:	1c62      	adds	r2, r4, #1
 80150dc:	4297      	cmp	r7, r2
 80150de:	d1f5      	bne.n	80150cc <ai_platform_get_weights_map+0x80>
 80150e0:	3402      	adds	r4, #2
 80150e2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80150e6:	42b3      	cmp	r3, r6
 80150e8:	d1ca      	bne.n	8015080 <ai_platform_get_weights_map+0x34>
 80150ea:	2001      	movs	r0, #1
 80150ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150ee:	bf00      	nop
 80150f0:	a1facade 	.word	0xa1facade

080150f4 <ai_platform_get_activations_map>:
 80150f4:	2a00      	cmp	r2, #0
 80150f6:	d038      	beq.n	801516a <ai_platform_get_activations_map+0x76>
 80150f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150fa:	4604      	mov	r4, r0
 80150fc:	b1a0      	cbz	r0, 8015128 <ai_platform_get_activations_map+0x34>
 80150fe:	460f      	mov	r7, r1
 8015100:	b191      	cbz	r1, 8015128 <ai_platform_get_activations_map+0x34>
 8015102:	4b25      	ldr	r3, [pc, #148]	; (8015198 <ai_platform_get_activations_map+0xa4>)
 8015104:	6810      	ldr	r0, [r2, #0]
 8015106:	4298      	cmp	r0, r3
 8015108:	4615      	mov	r5, r2
 801510a:	d00f      	beq.n	801512c <ai_platform_get_activations_map+0x38>
 801510c:	6a15      	ldr	r5, [r2, #32]
 801510e:	b15d      	cbz	r5, 8015128 <ai_platform_get_activations_map+0x34>
 8015110:	682e      	ldr	r6, [r5, #0]
 8015112:	429e      	cmp	r6, r3
 8015114:	d02b      	beq.n	801516e <ai_platform_get_activations_map+0x7a>
 8015116:	f1a1 0001 	sub.w	r0, r1, #1
 801511a:	6025      	str	r5, [r4, #0]
 801511c:	fab0 f080 	clz	r0, r0
 8015120:	0940      	lsrs	r0, r0, #5
 8015122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015124:	42a7      	cmp	r7, r4
 8015126:	d035      	beq.n	8015194 <ai_platform_get_activations_map+0xa0>
 8015128:	2000      	movs	r0, #0
 801512a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801512c:	f102 000c 	add.w	r0, r2, #12
 8015130:	f7ff ff6e 	bl	8015010 <ai_buffer_array_sane>
 8015134:	2800      	cmp	r0, #0
 8015136:	d0f7      	beq.n	8015128 <ai_platform_get_activations_map+0x34>
 8015138:	89eb      	ldrh	r3, [r5, #14]
 801513a:	429f      	cmp	r7, r3
 801513c:	d1f4      	bne.n	8015128 <ai_platform_get_activations_map+0x34>
 801513e:	f04f 0e00 	mov.w	lr, #0
 8015142:	1f23      	subs	r3, r4, #4
 8015144:	4670      	mov	r0, lr
 8015146:	692a      	ldr	r2, [r5, #16]
 8015148:	eb02 0c0e 	add.w	ip, r2, lr
 801514c:	f10e 0e1c 	add.w	lr, lr, #28
 8015150:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015154:	b124      	cbz	r4, 8015160 <ai_platform_get_activations_map+0x6c>
 8015156:	3001      	adds	r0, #1
 8015158:	4287      	cmp	r7, r0
 801515a:	f843 4f04 	str.w	r4, [r3, #4]!
 801515e:	d1f2      	bne.n	8015146 <ai_platform_get_activations_map+0x52>
 8015160:	1a38      	subs	r0, r7, r0
 8015162:	fab0 f080 	clz	r0, r0
 8015166:	0940      	lsrs	r0, r0, #5
 8015168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801516a:	2000      	movs	r0, #0
 801516c:	4770      	bx	lr
 801516e:	1f23      	subs	r3, r4, #4
 8015170:	4628      	mov	r0, r5
 8015172:	2400      	movs	r4, #0
 8015174:	e000      	b.n	8015178 <ai_platform_get_activations_map+0x84>
 8015176:	4614      	mov	r4, r2
 8015178:	f850 2f04 	ldr.w	r2, [r0, #4]!
 801517c:	42b2      	cmp	r2, r6
 801517e:	d0d1      	beq.n	8015124 <ai_platform_get_activations_map+0x30>
 8015180:	f843 2f04 	str.w	r2, [r3, #4]!
 8015184:	1c62      	adds	r2, r4, #1
 8015186:	4297      	cmp	r7, r2
 8015188:	d1f5      	bne.n	8015176 <ai_platform_get_activations_map+0x82>
 801518a:	3402      	adds	r4, #2
 801518c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8015190:	42b3      	cmp	r3, r6
 8015192:	d1c9      	bne.n	8015128 <ai_platform_get_activations_map+0x34>
 8015194:	2001      	movs	r0, #1
 8015196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015198:	a1facade 	.word	0xa1facade

0801519c <ai_platform_bind_network_params>:
 801519c:	b1a0      	cbz	r0, 80151c8 <ai_platform_bind_network_params+0x2c>
 801519e:	b1b1      	cbz	r1, 80151ce <ai_platform_bind_network_params+0x32>
 80151a0:	b1c2      	cbz	r2, 80151d4 <ai_platform_bind_network_params+0x38>
 80151a2:	b410      	push	{r4}
 80151a4:	4603      	mov	r3, r0
 80151a6:	4c0d      	ldr	r4, [pc, #52]	; (80151dc <ai_platform_bind_network_params+0x40>)
 80151a8:	f843 4b04 	str.w	r4, [r3], #4
 80151ac:	f100 0c0c 	add.w	ip, r0, #12
 80151b0:	c903      	ldmia	r1, {r0, r1}
 80151b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80151b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151ba:	e88c 0003 	stmia.w	ip, {r0, r1}
 80151be:	2301      	movs	r3, #1
 80151c0:	4618      	mov	r0, r3
 80151c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151c6:	4770      	bx	lr
 80151c8:	4603      	mov	r3, r0
 80151ca:	4618      	mov	r0, r3
 80151cc:	4770      	bx	lr
 80151ce:	460b      	mov	r3, r1
 80151d0:	4618      	mov	r0, r3
 80151d2:	4770      	bx	lr
 80151d4:	4613      	mov	r3, r2
 80151d6:	4618      	mov	r0, r3
 80151d8:	4770      	bx	lr
 80151da:	bf00      	nop
 80151dc:	a1facade 	.word	0xa1facade

080151e0 <ai_platform_network_get_error>:
 80151e0:	b510      	push	{r4, lr}
 80151e2:	b1f0      	cbz	r0, 8015222 <ai_platform_network_get_error+0x42>
 80151e4:	4b2f      	ldr	r3, [pc, #188]	; (80152a4 <ai_platform_network_get_error+0xc4>)
 80151e6:	6802      	ldr	r2, [r0, #0]
 80151e8:	429a      	cmp	r2, r3
 80151ea:	4604      	mov	r4, r0
 80151ec:	d119      	bne.n	8015222 <ai_platform_network_get_error+0x42>
 80151ee:	f7ff ff29 	bl	8015044 <_ai_platform_acquire_crc>
 80151f2:	4b2d      	ldr	r3, [pc, #180]	; (80152a8 <ai_platform_network_get_error+0xc8>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80151fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80151fe:	d03c      	beq.n	801527a <ai_platform_network_get_error+0x9a>
 8015200:	4a2a      	ldr	r2, [pc, #168]	; (80152ac <ai_platform_network_get_error+0xcc>)
 8015202:	2301      	movs	r3, #1
 8015204:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015208:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801520c:	2b00      	cmp	r3, #0
 801520e:	d1fb      	bne.n	8015208 <ai_platform_network_get_error+0x28>
 8015210:	4b27      	ldr	r3, [pc, #156]	; (80152b0 <ai_platform_network_get_error+0xd0>)
 8015212:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015216:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801521a:	4b26      	ldr	r3, [pc, #152]	; (80152b4 <ai_platform_network_get_error+0xd4>)
 801521c:	429a      	cmp	r2, r3
 801521e:	d038      	beq.n	8015292 <ai_platform_network_get_error+0xb2>
 8015220:	e7fe      	b.n	8015220 <ai_platform_network_get_error+0x40>
 8015222:	f7ff ff0f 	bl	8015044 <_ai_platform_acquire_crc>
 8015226:	4b20      	ldr	r3, [pc, #128]	; (80152a8 <ai_platform_network_get_error+0xc8>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801522e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015232:	d010      	beq.n	8015256 <ai_platform_network_get_error+0x76>
 8015234:	4a1d      	ldr	r2, [pc, #116]	; (80152ac <ai_platform_network_get_error+0xcc>)
 8015236:	2301      	movs	r3, #1
 8015238:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801523c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015240:	2b00      	cmp	r3, #0
 8015242:	d1fb      	bne.n	801523c <ai_platform_network_get_error+0x5c>
 8015244:	4b1a      	ldr	r3, [pc, #104]	; (80152b0 <ai_platform_network_get_error+0xd0>)
 8015246:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801524a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801524e:	4b19      	ldr	r3, [pc, #100]	; (80152b4 <ai_platform_network_get_error+0xd4>)
 8015250:	429a      	cmp	r2, r3
 8015252:	d00d      	beq.n	8015270 <ai_platform_network_get_error+0x90>
 8015254:	e7fe      	b.n	8015254 <ai_platform_network_get_error+0x74>
 8015256:	4a18      	ldr	r2, [pc, #96]	; (80152b8 <ai_platform_network_get_error+0xd8>)
 8015258:	2301      	movs	r3, #1
 801525a:	6093      	str	r3, [r2, #8]
 801525c:	6893      	ldr	r3, [r2, #8]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d1fc      	bne.n	801525c <ai_platform_network_get_error+0x7c>
 8015262:	4b13      	ldr	r3, [pc, #76]	; (80152b0 <ai_platform_network_get_error+0xd0>)
 8015264:	6013      	str	r3, [r2, #0]
 8015266:	6812      	ldr	r2, [r2, #0]
 8015268:	4b12      	ldr	r3, [pc, #72]	; (80152b4 <ai_platform_network_get_error+0xd4>)
 801526a:	429a      	cmp	r2, r3
 801526c:	d000      	beq.n	8015270 <ai_platform_network_get_error+0x90>
 801526e:	e7fe      	b.n	801526e <ai_platform_network_get_error+0x8e>
 8015270:	f7ff feea 	bl	8015048 <_ai_platform_release_crc>
 8015274:	f241 0010 	movw	r0, #4112	; 0x1010
 8015278:	bd10      	pop	{r4, pc}
 801527a:	4a0f      	ldr	r2, [pc, #60]	; (80152b8 <ai_platform_network_get_error+0xd8>)
 801527c:	2301      	movs	r3, #1
 801527e:	6093      	str	r3, [r2, #8]
 8015280:	6893      	ldr	r3, [r2, #8]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d1fc      	bne.n	8015280 <ai_platform_network_get_error+0xa0>
 8015286:	4b0a      	ldr	r3, [pc, #40]	; (80152b0 <ai_platform_network_get_error+0xd0>)
 8015288:	6013      	str	r3, [r2, #0]
 801528a:	6812      	ldr	r2, [r2, #0]
 801528c:	4b09      	ldr	r3, [pc, #36]	; (80152b4 <ai_platform_network_get_error+0xd4>)
 801528e:	429a      	cmp	r2, r3
 8015290:	d107      	bne.n	80152a2 <ai_platform_network_get_error+0xc2>
 8015292:	f7ff fed9 	bl	8015048 <_ai_platform_release_crc>
 8015296:	f104 0010 	add.w	r0, r4, #16
 801529a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801529e:	f000 be8d 	b.w	8015fbc <core_get_error>
 80152a2:	e7fe      	b.n	80152a2 <ai_platform_network_get_error+0xc2>
 80152a4:	a1c00100 	.word	0xa1c00100
 80152a8:	e0042000 	.word	0xe0042000
 80152ac:	58024000 	.word	0x58024000
 80152b0:	f407a5c2 	.word	0xf407a5c2
 80152b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80152b8:	40023000 	.word	0x40023000

080152bc <ai_platform_network_set_error>:
 80152bc:	b110      	cbz	r0, 80152c4 <ai_platform_network_set_error+0x8>
 80152be:	3010      	adds	r0, #16
 80152c0:	f000 be82 	b.w	8015fc8 <core_set_error>
 80152c4:	4770      	bx	lr
 80152c6:	bf00      	nop

080152c8 <ai_platform_inputs_get>:
 80152c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152cc:	b085      	sub	sp, #20
 80152ce:	9102      	str	r1, [sp, #8]
 80152d0:	b1f0      	cbz	r0, 8015310 <ai_platform_inputs_get+0x48>
 80152d2:	4b62      	ldr	r3, [pc, #392]	; (801545c <ai_platform_inputs_get+0x194>)
 80152d4:	6802      	ldr	r2, [r0, #0]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	4607      	mov	r7, r0
 80152da:	d119      	bne.n	8015310 <ai_platform_inputs_get+0x48>
 80152dc:	f7ff feb2 	bl	8015044 <_ai_platform_acquire_crc>
 80152e0:	4b5f      	ldr	r3, [pc, #380]	; (8015460 <ai_platform_inputs_get+0x198>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80152e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80152ec:	d03d      	beq.n	801536a <ai_platform_inputs_get+0xa2>
 80152ee:	4a5d      	ldr	r2, [pc, #372]	; (8015464 <ai_platform_inputs_get+0x19c>)
 80152f0:	2301      	movs	r3, #1
 80152f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80152f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d1fb      	bne.n	80152f6 <ai_platform_inputs_get+0x2e>
 80152fe:	4b5a      	ldr	r3, [pc, #360]	; (8015468 <ai_platform_inputs_get+0x1a0>)
 8015300:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015304:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015308:	4b58      	ldr	r3, [pc, #352]	; (801546c <ai_platform_inputs_get+0x1a4>)
 801530a:	429a      	cmp	r2, r3
 801530c:	d039      	beq.n	8015382 <ai_platform_inputs_get+0xba>
 801530e:	e7fe      	b.n	801530e <ai_platform_inputs_get+0x46>
 8015310:	f7ff fe98 	bl	8015044 <_ai_platform_acquire_crc>
 8015314:	4b52      	ldr	r3, [pc, #328]	; (8015460 <ai_platform_inputs_get+0x198>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015320:	d010      	beq.n	8015344 <ai_platform_inputs_get+0x7c>
 8015322:	4a50      	ldr	r2, [pc, #320]	; (8015464 <ai_platform_inputs_get+0x19c>)
 8015324:	2301      	movs	r3, #1
 8015326:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801532a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801532e:	2b00      	cmp	r3, #0
 8015330:	d1fb      	bne.n	801532a <ai_platform_inputs_get+0x62>
 8015332:	4b4d      	ldr	r3, [pc, #308]	; (8015468 <ai_platform_inputs_get+0x1a0>)
 8015334:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015338:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801533c:	4b4b      	ldr	r3, [pc, #300]	; (801546c <ai_platform_inputs_get+0x1a4>)
 801533e:	429a      	cmp	r2, r3
 8015340:	d00d      	beq.n	801535e <ai_platform_inputs_get+0x96>
 8015342:	e7fe      	b.n	8015342 <ai_platform_inputs_get+0x7a>
 8015344:	4a4a      	ldr	r2, [pc, #296]	; (8015470 <ai_platform_inputs_get+0x1a8>)
 8015346:	2301      	movs	r3, #1
 8015348:	6093      	str	r3, [r2, #8]
 801534a:	6893      	ldr	r3, [r2, #8]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d1fc      	bne.n	801534a <ai_platform_inputs_get+0x82>
 8015350:	4b45      	ldr	r3, [pc, #276]	; (8015468 <ai_platform_inputs_get+0x1a0>)
 8015352:	6013      	str	r3, [r2, #0]
 8015354:	6812      	ldr	r2, [r2, #0]
 8015356:	4b45      	ldr	r3, [pc, #276]	; (801546c <ai_platform_inputs_get+0x1a4>)
 8015358:	429a      	cmp	r2, r3
 801535a:	d000      	beq.n	801535e <ai_platform_inputs_get+0x96>
 801535c:	e7fe      	b.n	801535c <ai_platform_inputs_get+0x94>
 801535e:	f7ff fe73 	bl	8015048 <_ai_platform_release_crc>
 8015362:	2000      	movs	r0, #0
 8015364:	b005      	add	sp, #20
 8015366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801536a:	4a41      	ldr	r2, [pc, #260]	; (8015470 <ai_platform_inputs_get+0x1a8>)
 801536c:	2301      	movs	r3, #1
 801536e:	6093      	str	r3, [r2, #8]
 8015370:	6893      	ldr	r3, [r2, #8]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d1fc      	bne.n	8015370 <ai_platform_inputs_get+0xa8>
 8015376:	4b3c      	ldr	r3, [pc, #240]	; (8015468 <ai_platform_inputs_get+0x1a0>)
 8015378:	6013      	str	r3, [r2, #0]
 801537a:	6812      	ldr	r2, [r2, #0]
 801537c:	4b3b      	ldr	r3, [pc, #236]	; (801546c <ai_platform_inputs_get+0x1a4>)
 801537e:	429a      	cmp	r2, r3
 8015380:	d155      	bne.n	801542e <ai_platform_inputs_get+0x166>
 8015382:	f7ff fe61 	bl	8015048 <_ai_platform_release_crc>
 8015386:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015388:	2b00      	cmp	r3, #0
 801538a:	d051      	beq.n	8015430 <ai_platform_inputs_get+0x168>
 801538c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8015390:	f1ba 0f00 	cmp.w	sl, #0
 8015394:	d04c      	beq.n	8015430 <ai_platform_inputs_get+0x168>
 8015396:	f04f 0b00 	mov.w	fp, #0
 801539a:	465d      	mov	r5, fp
 801539c:	9703      	str	r7, [sp, #12]
 801539e:	e016      	b.n	80153ce <ai_platform_inputs_get+0x106>
 80153a0:	9901      	ldr	r1, [sp, #4]
 80153a2:	2301      	movs	r3, #1
 80153a4:	507b      	str	r3, [r7, r1]
 80153a6:	69b1      	ldr	r1, [r6, #24]
 80153a8:	6849      	ldr	r1, [r1, #4]
 80153aa:	6121      	str	r1, [r4, #16]
 80153ac:	f04f 0301 	mov.w	r3, #1
 80153b0:	7523      	strb	r3, [r4, #20]
 80153b2:	e9c4 c200 	strd	ip, r2, [r4]
 80153b6:	6962      	ldr	r2, [r4, #20]
 80153b8:	60a0      	str	r0, [r4, #8]
 80153ba:	2300      	movs	r3, #0
 80153bc:	f369 221f 	bfi	r2, r9, #8, #24
 80153c0:	f8c4 8018 	str.w	r8, [r4, #24]
 80153c4:	60e3      	str	r3, [r4, #12]
 80153c6:	3501      	adds	r5, #1
 80153c8:	f10b 0b1c 	add.w	fp, fp, #28
 80153cc:	6162      	str	r2, [r4, #20]
 80153ce:	f8ba 3000 	ldrh.w	r3, [sl]
 80153d2:	42ab      	cmp	r3, r5
 80153d4:	b2aa      	uxth	r2, r5
 80153d6:	d93a      	bls.n	801544e <ai_platform_inputs_get+0x186>
 80153d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80153dc:	00e9      	lsls	r1, r5, #3
 80153de:	9101      	str	r1, [sp, #4]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d034      	beq.n	801544e <ai_platform_inputs_get+0x186>
 80153e4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80153e8:	2e00      	cmp	r6, #0
 80153ea:	d030      	beq.n	801544e <ai_platform_inputs_get+0x186>
 80153ec:	f8da 3008 	ldr.w	r3, [sl, #8]
 80153f0:	69b2      	ldr	r2, [r6, #24]
 80153f2:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80153f6:	6810      	ldr	r0, [r2, #0]
 80153f8:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80153fc:	68b3      	ldr	r3, [r6, #8]
 80153fe:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8015402:	f001 fa05 	bl	8016810 <ai_array_to_buffer_fmt>
 8015406:	69b1      	ldr	r1, [r6, #24]
 8015408:	4684      	mov	ip, r0
 801540a:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 801540e:	688a      	ldr	r2, [r1, #8]
 8015410:	445c      	add	r4, fp
 8015412:	2800      	cmp	r0, #0
 8015414:	d0c8      	beq.n	80153a8 <ai_platform_inputs_get+0xe0>
 8015416:	2100      	movs	r1, #0
 8015418:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 801541c:	6831      	ldr	r1, [r6, #0]
 801541e:	6041      	str	r1, [r0, #4]
 8015420:	b111      	cbz	r1, 8015428 <ai_platform_inputs_get+0x160>
 8015422:	8849      	ldrh	r1, [r1, #2]
 8015424:	2900      	cmp	r1, #0
 8015426:	d1bb      	bne.n	80153a0 <ai_platform_inputs_get+0xd8>
 8015428:	69b1      	ldr	r1, [r6, #24]
 801542a:	2000      	movs	r0, #0
 801542c:	e7bc      	b.n	80153a8 <ai_platform_inputs_get+0xe0>
 801542e:	e7fe      	b.n	801542e <ai_platform_inputs_get+0x166>
 8015430:	2218      	movs	r2, #24
 8015432:	2111      	movs	r1, #17
 8015434:	f107 0010 	add.w	r0, r7, #16
 8015438:	f000 fdc6 	bl	8015fc8 <core_set_error>
 801543c:	2200      	movs	r2, #0
 801543e:	4610      	mov	r0, r2
 8015440:	9b02      	ldr	r3, [sp, #8]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d08e      	beq.n	8015364 <ai_platform_inputs_get+0x9c>
 8015446:	801a      	strh	r2, [r3, #0]
 8015448:	b005      	add	sp, #20
 801544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801544e:	9f03      	ldr	r7, [sp, #12]
 8015450:	2a00      	cmp	r2, #0
 8015452:	d0ed      	beq.n	8015430 <ai_platform_inputs_get+0x168>
 8015454:	f8da 3008 	ldr.w	r3, [sl, #8]
 8015458:	6858      	ldr	r0, [r3, #4]
 801545a:	e7f1      	b.n	8015440 <ai_platform_inputs_get+0x178>
 801545c:	a1c00100 	.word	0xa1c00100
 8015460:	e0042000 	.word	0xe0042000
 8015464:	58024000 	.word	0x58024000
 8015468:	f407a5c2 	.word	0xf407a5c2
 801546c:	b5e8b5cd 	.word	0xb5e8b5cd
 8015470:	40023000 	.word	0x40023000

08015474 <ai_platform_outputs_get>:
 8015474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015478:	b085      	sub	sp, #20
 801547a:	9102      	str	r1, [sp, #8]
 801547c:	b1f0      	cbz	r0, 80154bc <ai_platform_outputs_get+0x48>
 801547e:	4b5f      	ldr	r3, [pc, #380]	; (80155fc <ai_platform_outputs_get+0x188>)
 8015480:	6802      	ldr	r2, [r0, #0]
 8015482:	429a      	cmp	r2, r3
 8015484:	4607      	mov	r7, r0
 8015486:	d119      	bne.n	80154bc <ai_platform_outputs_get+0x48>
 8015488:	f7ff fddc 	bl	8015044 <_ai_platform_acquire_crc>
 801548c:	4b5c      	ldr	r3, [pc, #368]	; (8015600 <ai_platform_outputs_get+0x18c>)
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015498:	d03d      	beq.n	8015516 <ai_platform_outputs_get+0xa2>
 801549a:	4a5a      	ldr	r2, [pc, #360]	; (8015604 <ai_platform_outputs_get+0x190>)
 801549c:	2301      	movs	r3, #1
 801549e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80154a2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d1fb      	bne.n	80154a2 <ai_platform_outputs_get+0x2e>
 80154aa:	4b57      	ldr	r3, [pc, #348]	; (8015608 <ai_platform_outputs_get+0x194>)
 80154ac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80154b0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80154b4:	4b55      	ldr	r3, [pc, #340]	; (801560c <ai_platform_outputs_get+0x198>)
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d039      	beq.n	801552e <ai_platform_outputs_get+0xba>
 80154ba:	e7fe      	b.n	80154ba <ai_platform_outputs_get+0x46>
 80154bc:	f7ff fdc2 	bl	8015044 <_ai_platform_acquire_crc>
 80154c0:	4b4f      	ldr	r3, [pc, #316]	; (8015600 <ai_platform_outputs_get+0x18c>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80154c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80154cc:	d010      	beq.n	80154f0 <ai_platform_outputs_get+0x7c>
 80154ce:	4a4d      	ldr	r2, [pc, #308]	; (8015604 <ai_platform_outputs_get+0x190>)
 80154d0:	2301      	movs	r3, #1
 80154d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80154d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d1fb      	bne.n	80154d6 <ai_platform_outputs_get+0x62>
 80154de:	4b4a      	ldr	r3, [pc, #296]	; (8015608 <ai_platform_outputs_get+0x194>)
 80154e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80154e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80154e8:	4b48      	ldr	r3, [pc, #288]	; (801560c <ai_platform_outputs_get+0x198>)
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d00d      	beq.n	801550a <ai_platform_outputs_get+0x96>
 80154ee:	e7fe      	b.n	80154ee <ai_platform_outputs_get+0x7a>
 80154f0:	4a47      	ldr	r2, [pc, #284]	; (8015610 <ai_platform_outputs_get+0x19c>)
 80154f2:	2301      	movs	r3, #1
 80154f4:	6093      	str	r3, [r2, #8]
 80154f6:	6893      	ldr	r3, [r2, #8]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d1fc      	bne.n	80154f6 <ai_platform_outputs_get+0x82>
 80154fc:	4b42      	ldr	r3, [pc, #264]	; (8015608 <ai_platform_outputs_get+0x194>)
 80154fe:	6013      	str	r3, [r2, #0]
 8015500:	6812      	ldr	r2, [r2, #0]
 8015502:	4b42      	ldr	r3, [pc, #264]	; (801560c <ai_platform_outputs_get+0x198>)
 8015504:	429a      	cmp	r2, r3
 8015506:	d000      	beq.n	801550a <ai_platform_outputs_get+0x96>
 8015508:	e7fe      	b.n	8015508 <ai_platform_outputs_get+0x94>
 801550a:	f7ff fd9d 	bl	8015048 <_ai_platform_release_crc>
 801550e:	2000      	movs	r0, #0
 8015510:	b005      	add	sp, #20
 8015512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015516:	4a3e      	ldr	r2, [pc, #248]	; (8015610 <ai_platform_outputs_get+0x19c>)
 8015518:	2301      	movs	r3, #1
 801551a:	6093      	str	r3, [r2, #8]
 801551c:	6893      	ldr	r3, [r2, #8]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d1fc      	bne.n	801551c <ai_platform_outputs_get+0xa8>
 8015522:	4b39      	ldr	r3, [pc, #228]	; (8015608 <ai_platform_outputs_get+0x194>)
 8015524:	6013      	str	r3, [r2, #0]
 8015526:	6812      	ldr	r2, [r2, #0]
 8015528:	4b38      	ldr	r3, [pc, #224]	; (801560c <ai_platform_outputs_get+0x198>)
 801552a:	429a      	cmp	r2, r3
 801552c:	d150      	bne.n	80155d0 <ai_platform_outputs_get+0x15c>
 801552e:	f7ff fd8b 	bl	8015048 <_ai_platform_release_crc>
 8015532:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015534:	2b01      	cmp	r3, #1
 8015536:	d958      	bls.n	80155ea <ai_platform_outputs_get+0x176>
 8015538:	f04f 0b00 	mov.w	fp, #0
 801553c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8015540:	9703      	str	r7, [sp, #12]
 8015542:	465d      	mov	r5, fp
 8015544:	e016      	b.n	8015574 <ai_platform_outputs_get+0x100>
 8015546:	9901      	ldr	r1, [sp, #4]
 8015548:	2301      	movs	r3, #1
 801554a:	507b      	str	r3, [r7, r1]
 801554c:	69b1      	ldr	r1, [r6, #24]
 801554e:	6849      	ldr	r1, [r1, #4]
 8015550:	6121      	str	r1, [r4, #16]
 8015552:	f04f 0301 	mov.w	r3, #1
 8015556:	7523      	strb	r3, [r4, #20]
 8015558:	e9c4 c200 	strd	ip, r2, [r4]
 801555c:	6962      	ldr	r2, [r4, #20]
 801555e:	60a0      	str	r0, [r4, #8]
 8015560:	2300      	movs	r3, #0
 8015562:	f369 221f 	bfi	r2, r9, #8, #24
 8015566:	f8c4 8018 	str.w	r8, [r4, #24]
 801556a:	60e3      	str	r3, [r4, #12]
 801556c:	3501      	adds	r5, #1
 801556e:	f10b 0b1c 	add.w	fp, fp, #28
 8015572:	6162      	str	r2, [r4, #20]
 8015574:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8015578:	42ab      	cmp	r3, r5
 801557a:	b2aa      	uxth	r2, r5
 801557c:	d929      	bls.n	80155d2 <ai_platform_outputs_get+0x15e>
 801557e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8015582:	00e9      	lsls	r1, r5, #3
 8015584:	9101      	str	r1, [sp, #4]
 8015586:	b323      	cbz	r3, 80155d2 <ai_platform_outputs_get+0x15e>
 8015588:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801558c:	b30e      	cbz	r6, 80155d2 <ai_platform_outputs_get+0x15e>
 801558e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8015592:	69b2      	ldr	r2, [r6, #24]
 8015594:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8015598:	6810      	ldr	r0, [r2, #0]
 801559a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801559e:	68b3      	ldr	r3, [r6, #8]
 80155a0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80155a4:	f001 f934 	bl	8016810 <ai_array_to_buffer_fmt>
 80155a8:	69b1      	ldr	r1, [r6, #24]
 80155aa:	4684      	mov	ip, r0
 80155ac:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80155b0:	688a      	ldr	r2, [r1, #8]
 80155b2:	445c      	add	r4, fp
 80155b4:	2800      	cmp	r0, #0
 80155b6:	d0ca      	beq.n	801554e <ai_platform_outputs_get+0xda>
 80155b8:	2100      	movs	r1, #0
 80155ba:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80155be:	6831      	ldr	r1, [r6, #0]
 80155c0:	6041      	str	r1, [r0, #4]
 80155c2:	b111      	cbz	r1, 80155ca <ai_platform_outputs_get+0x156>
 80155c4:	8849      	ldrh	r1, [r1, #2]
 80155c6:	2900      	cmp	r1, #0
 80155c8:	d1bd      	bne.n	8015546 <ai_platform_outputs_get+0xd2>
 80155ca:	69b1      	ldr	r1, [r6, #24]
 80155cc:	2000      	movs	r0, #0
 80155ce:	e7be      	b.n	801554e <ai_platform_outputs_get+0xda>
 80155d0:	e7fe      	b.n	80155d0 <ai_platform_outputs_get+0x15c>
 80155d2:	9f03      	ldr	r7, [sp, #12]
 80155d4:	b14a      	cbz	r2, 80155ea <ai_platform_outputs_get+0x176>
 80155d6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80155da:	6858      	ldr	r0, [r3, #4]
 80155dc:	9b02      	ldr	r3, [sp, #8]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d096      	beq.n	8015510 <ai_platform_outputs_get+0x9c>
 80155e2:	801a      	strh	r2, [r3, #0]
 80155e4:	b005      	add	sp, #20
 80155e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ea:	2218      	movs	r2, #24
 80155ec:	2111      	movs	r1, #17
 80155ee:	f107 0010 	add.w	r0, r7, #16
 80155f2:	f000 fce9 	bl	8015fc8 <core_set_error>
 80155f6:	2200      	movs	r2, #0
 80155f8:	4610      	mov	r0, r2
 80155fa:	e7ef      	b.n	80155dc <ai_platform_outputs_get+0x168>
 80155fc:	a1c00100 	.word	0xa1c00100
 8015600:	e0042000 	.word	0xe0042000
 8015604:	58024000 	.word	0x58024000
 8015608:	f407a5c2 	.word	0xf407a5c2
 801560c:	b5e8b5cd 	.word	0xb5e8b5cd
 8015610:	40023000 	.word	0x40023000

08015614 <ai_platform_network_create>:
 8015614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015618:	b083      	sub	sp, #12
 801561a:	4606      	mov	r6, r0
 801561c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8015620:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8015624:	4615      	mov	r5, r2
 8015626:	461f      	mov	r7, r3
 8015628:	f7ff fd0c 	bl	8015044 <_ai_platform_acquire_crc>
 801562c:	b188      	cbz	r0, 8015652 <ai_platform_network_create+0x3e>
 801562e:	4a5d      	ldr	r2, [pc, #372]	; (80157a4 <ai_platform_network_create+0x190>)
 8015630:	6812      	ldr	r2, [r2, #0]
 8015632:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8015636:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801563a:	4603      	mov	r3, r0
 801563c:	d00e      	beq.n	801565c <ai_platform_network_create+0x48>
 801563e:	4a5a      	ldr	r2, [pc, #360]	; (80157a8 <ai_platform_network_create+0x194>)
 8015640:	2118      	movs	r1, #24
 8015642:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8015646:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 801564a:	2918      	cmp	r1, #24
 801564c:	d018      	beq.n	8015680 <ai_platform_network_create+0x6c>
 801564e:	f7ff fcfb 	bl	8015048 <_ai_platform_release_crc>
 8015652:	f244 1033 	movw	r0, #16691	; 0x4133
 8015656:	b003      	add	sp, #12
 8015658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801565c:	4a53      	ldr	r2, [pc, #332]	; (80157ac <ai_platform_network_create+0x198>)
 801565e:	2101      	movs	r1, #1
 8015660:	6091      	str	r1, [r2, #8]
 8015662:	2114      	movs	r1, #20
 8015664:	e001      	b.n	801566a <ai_platform_network_create+0x56>
 8015666:	3901      	subs	r1, #1
 8015668:	d002      	beq.n	8015670 <ai_platform_network_create+0x5c>
 801566a:	6894      	ldr	r4, [r2, #8]
 801566c:	2c00      	cmp	r4, #0
 801566e:	d1fa      	bne.n	8015666 <ai_platform_network_create+0x52>
 8015670:	4a4e      	ldr	r2, [pc, #312]	; (80157ac <ai_platform_network_create+0x198>)
 8015672:	6891      	ldr	r1, [r2, #8]
 8015674:	b911      	cbnz	r1, 801567c <ai_platform_network_create+0x68>
 8015676:	6812      	ldr	r2, [r2, #0]
 8015678:	3201      	adds	r2, #1
 801567a:	d008      	beq.n	801568e <ai_platform_network_create+0x7a>
 801567c:	4618      	mov	r0, r3
 801567e:	e7e6      	b.n	801564e <ai_platform_network_create+0x3a>
 8015680:	2101      	movs	r1, #1
 8015682:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8015686:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 801568a:	2900      	cmp	r1, #0
 801568c:	d1fb      	bne.n	8015686 <ai_platform_network_create+0x72>
 801568e:	4618      	mov	r0, r3
 8015690:	f7ff fcda 	bl	8015048 <_ai_platform_release_crc>
 8015694:	f7ff fcd6 	bl	8015044 <_ai_platform_acquire_crc>
 8015698:	4b42      	ldr	r3, [pc, #264]	; (80157a4 <ai_platform_network_create+0x190>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80156a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80156a4:	d010      	beq.n	80156c8 <ai_platform_network_create+0xb4>
 80156a6:	4b40      	ldr	r3, [pc, #256]	; (80157a8 <ai_platform_network_create+0x194>)
 80156a8:	2201      	movs	r2, #1
 80156aa:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80156ae:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80156b2:	2900      	cmp	r1, #0
 80156b4:	d1fb      	bne.n	80156ae <ai_platform_network_create+0x9a>
 80156b6:	4a3e      	ldr	r2, [pc, #248]	; (80157b0 <ai_platform_network_create+0x19c>)
 80156b8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80156bc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80156c0:	4b3c      	ldr	r3, [pc, #240]	; (80157b4 <ai_platform_network_create+0x1a0>)
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d00c      	beq.n	80156e0 <ai_platform_network_create+0xcc>
 80156c6:	e7fe      	b.n	80156c6 <ai_platform_network_create+0xb2>
 80156c8:	4a38      	ldr	r2, [pc, #224]	; (80157ac <ai_platform_network_create+0x198>)
 80156ca:	2301      	movs	r3, #1
 80156cc:	6093      	str	r3, [r2, #8]
 80156ce:	6893      	ldr	r3, [r2, #8]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d1fc      	bne.n	80156ce <ai_platform_network_create+0xba>
 80156d4:	4b36      	ldr	r3, [pc, #216]	; (80157b0 <ai_platform_network_create+0x19c>)
 80156d6:	6013      	str	r3, [r2, #0]
 80156d8:	6812      	ldr	r2, [r2, #0]
 80156da:	4b36      	ldr	r3, [pc, #216]	; (80157b4 <ai_platform_network_create+0x1a0>)
 80156dc:	429a      	cmp	r2, r3
 80156de:	d122      	bne.n	8015726 <ai_platform_network_create+0x112>
 80156e0:	f7ff fcb2 	bl	8015048 <_ai_platform_release_crc>
 80156e4:	b38e      	cbz	r6, 801574a <ai_platform_network_create+0x136>
 80156e6:	4b34      	ldr	r3, [pc, #208]	; (80157b8 <ai_platform_network_create+0x1a4>)
 80156e8:	602b      	str	r3, [r5, #0]
 80156ea:	6035      	str	r5, [r6, #0]
 80156ec:	f000 fc64 	bl	8015fb8 <core_init>
 80156f0:	b1d0      	cbz	r0, 8015728 <ai_platform_network_create+0x114>
 80156f2:	f7ff fca7 	bl	8015044 <_ai_platform_acquire_crc>
 80156f6:	4b2b      	ldr	r3, [pc, #172]	; (80157a4 <ai_platform_network_create+0x190>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80156fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015702:	d025      	beq.n	8015750 <ai_platform_network_create+0x13c>
 8015704:	4a28      	ldr	r2, [pc, #160]	; (80157a8 <ai_platform_network_create+0x194>)
 8015706:	2301      	movs	r3, #1
 8015708:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801570c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015710:	2b00      	cmp	r3, #0
 8015712:	d1fb      	bne.n	801570c <ai_platform_network_create+0xf8>
 8015714:	4b26      	ldr	r3, [pc, #152]	; (80157b0 <ai_platform_network_create+0x19c>)
 8015716:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801571a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801571e:	4b25      	ldr	r3, [pc, #148]	; (80157b4 <ai_platform_network_create+0x1a0>)
 8015720:	429a      	cmp	r2, r3
 8015722:	d022      	beq.n	801576a <ai_platform_network_create+0x156>
 8015724:	e7fe      	b.n	8015724 <ai_platform_network_create+0x110>
 8015726:	e7fe      	b.n	8015726 <ai_platform_network_create+0x112>
 8015728:	2430      	movs	r4, #48	; 0x30
 801572a:	2300      	movs	r3, #0
 801572c:	6033      	str	r3, [r6, #0]
 801572e:	2610      	movs	r6, #16
 8015730:	464a      	mov	r2, r9
 8015732:	4641      	mov	r1, r8
 8015734:	4638      	mov	r0, r7
 8015736:	f001 f84d 	bl	80167d4 <ai_version_get>
 801573a:	4603      	mov	r3, r0
 801573c:	2000      	movs	r0, #0
 801573e:	f364 0007 	bfi	r0, r4, #0, #8
 8015742:	64ab      	str	r3, [r5, #72]	; 0x48
 8015744:	f366 201f 	bfi	r0, r6, #8, #24
 8015748:	e785      	b.n	8015656 <ai_platform_network_create+0x42>
 801574a:	f241 0010 	movw	r0, #4112	; 0x1010
 801574e:	e782      	b.n	8015656 <ai_platform_network_create+0x42>
 8015750:	4a16      	ldr	r2, [pc, #88]	; (80157ac <ai_platform_network_create+0x198>)
 8015752:	2301      	movs	r3, #1
 8015754:	6093      	str	r3, [r2, #8]
 8015756:	6893      	ldr	r3, [r2, #8]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d1fc      	bne.n	8015756 <ai_platform_network_create+0x142>
 801575c:	4b14      	ldr	r3, [pc, #80]	; (80157b0 <ai_platform_network_create+0x19c>)
 801575e:	6013      	str	r3, [r2, #0]
 8015760:	6812      	ldr	r2, [r2, #0]
 8015762:	4b14      	ldr	r3, [pc, #80]	; (80157b4 <ai_platform_network_create+0x1a0>)
 8015764:	429a      	cmp	r2, r3
 8015766:	d000      	beq.n	801576a <ai_platform_network_create+0x156>
 8015768:	e7fe      	b.n	8015768 <ai_platform_network_create+0x154>
 801576a:	f7ff fc6d 	bl	8015048 <_ai_platform_release_crc>
 801576e:	2200      	movs	r2, #0
 8015770:	4641      	mov	r1, r8
 8015772:	4638      	mov	r0, r7
 8015774:	f001 f82e 	bl	80167d4 <ai_version_get>
 8015778:	2200      	movs	r2, #0
 801577a:	4604      	mov	r4, r0
 801577c:	2105      	movs	r1, #5
 801577e:	2001      	movs	r0, #1
 8015780:	f001 f828 	bl	80167d4 <ai_version_get>
 8015784:	4284      	cmp	r4, r0
 8015786:	d001      	beq.n	801578c <ai_platform_network_create+0x178>
 8015788:	2401      	movs	r4, #1
 801578a:	e7ce      	b.n	801572a <ai_platform_network_create+0x116>
 801578c:	4b0b      	ldr	r3, [pc, #44]	; (80157bc <ai_platform_network_create+0x1a8>)
 801578e:	9301      	str	r3, [sp, #4]
 8015790:	a801      	add	r0, sp, #4
 8015792:	f000 ff89 	bl	80166a8 <ai_check_custom_types>
 8015796:	b110      	cbz	r0, 801579e <ai_platform_network_create+0x18a>
 8015798:	2600      	movs	r6, #0
 801579a:	4634      	mov	r4, r6
 801579c:	e7c8      	b.n	8015730 <ai_platform_network_create+0x11c>
 801579e:	2402      	movs	r4, #2
 80157a0:	e7c3      	b.n	801572a <ai_platform_network_create+0x116>
 80157a2:	bf00      	nop
 80157a4:	e0042000 	.word	0xe0042000
 80157a8:	58024000 	.word	0x58024000
 80157ac:	40023000 	.word	0x40023000
 80157b0:	f407a5c2 	.word	0xf407a5c2
 80157b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80157b8:	a1c00100 	.word	0xa1c00100
 80157bc:	84048403 	.word	0x84048403

080157c0 <ai_platform_network_init>:
 80157c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157c4:	b1f8      	cbz	r0, 8015806 <ai_platform_network_init+0x46>
 80157c6:	4b6e      	ldr	r3, [pc, #440]	; (8015980 <ai_platform_network_init+0x1c0>)
 80157c8:	6802      	ldr	r2, [r0, #0]
 80157ca:	429a      	cmp	r2, r3
 80157cc:	4604      	mov	r4, r0
 80157ce:	d11a      	bne.n	8015806 <ai_platform_network_init+0x46>
 80157d0:	460e      	mov	r6, r1
 80157d2:	f7ff fc37 	bl	8015044 <_ai_platform_acquire_crc>
 80157d6:	4b6b      	ldr	r3, [pc, #428]	; (8015984 <ai_platform_network_init+0x1c4>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80157de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80157e2:	d03d      	beq.n	8015860 <ai_platform_network_init+0xa0>
 80157e4:	4a68      	ldr	r2, [pc, #416]	; (8015988 <ai_platform_network_init+0x1c8>)
 80157e6:	2301      	movs	r3, #1
 80157e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80157ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d1fb      	bne.n	80157ec <ai_platform_network_init+0x2c>
 80157f4:	4b65      	ldr	r3, [pc, #404]	; (801598c <ai_platform_network_init+0x1cc>)
 80157f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80157fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80157fe:	4b64      	ldr	r3, [pc, #400]	; (8015990 <ai_platform_network_init+0x1d0>)
 8015800:	429a      	cmp	r2, r3
 8015802:	d039      	beq.n	8015878 <ai_platform_network_init+0xb8>
 8015804:	e7fe      	b.n	8015804 <ai_platform_network_init+0x44>
 8015806:	f7ff fc1d 	bl	8015044 <_ai_platform_acquire_crc>
 801580a:	4b5e      	ldr	r3, [pc, #376]	; (8015984 <ai_platform_network_init+0x1c4>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015816:	d010      	beq.n	801583a <ai_platform_network_init+0x7a>
 8015818:	4a5b      	ldr	r2, [pc, #364]	; (8015988 <ai_platform_network_init+0x1c8>)
 801581a:	2301      	movs	r3, #1
 801581c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015820:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015824:	2b00      	cmp	r3, #0
 8015826:	d1fb      	bne.n	8015820 <ai_platform_network_init+0x60>
 8015828:	4b58      	ldr	r3, [pc, #352]	; (801598c <ai_platform_network_init+0x1cc>)
 801582a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801582e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015832:	4b57      	ldr	r3, [pc, #348]	; (8015990 <ai_platform_network_init+0x1d0>)
 8015834:	429a      	cmp	r2, r3
 8015836:	d00d      	beq.n	8015854 <ai_platform_network_init+0x94>
 8015838:	e7fe      	b.n	8015838 <ai_platform_network_init+0x78>
 801583a:	4a56      	ldr	r2, [pc, #344]	; (8015994 <ai_platform_network_init+0x1d4>)
 801583c:	2301      	movs	r3, #1
 801583e:	6093      	str	r3, [r2, #8]
 8015840:	6893      	ldr	r3, [r2, #8]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d1fc      	bne.n	8015840 <ai_platform_network_init+0x80>
 8015846:	4b51      	ldr	r3, [pc, #324]	; (801598c <ai_platform_network_init+0x1cc>)
 8015848:	6013      	str	r3, [r2, #0]
 801584a:	6812      	ldr	r2, [r2, #0]
 801584c:	4b50      	ldr	r3, [pc, #320]	; (8015990 <ai_platform_network_init+0x1d0>)
 801584e:	429a      	cmp	r2, r3
 8015850:	d000      	beq.n	8015854 <ai_platform_network_init+0x94>
 8015852:	e7fe      	b.n	8015852 <ai_platform_network_init+0x92>
 8015854:	f7ff fbf8 	bl	8015048 <_ai_platform_release_crc>
 8015858:	2600      	movs	r6, #0
 801585a:	4630      	mov	r0, r6
 801585c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015860:	4a4c      	ldr	r2, [pc, #304]	; (8015994 <ai_platform_network_init+0x1d4>)
 8015862:	2301      	movs	r3, #1
 8015864:	6093      	str	r3, [r2, #8]
 8015866:	6893      	ldr	r3, [r2, #8]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d1fc      	bne.n	8015866 <ai_platform_network_init+0xa6>
 801586c:	4b47      	ldr	r3, [pc, #284]	; (801598c <ai_platform_network_init+0x1cc>)
 801586e:	6013      	str	r3, [r2, #0]
 8015870:	6812      	ldr	r2, [r2, #0]
 8015872:	4b47      	ldr	r3, [pc, #284]	; (8015990 <ai_platform_network_init+0x1d0>)
 8015874:	429a      	cmp	r2, r3
 8015876:	d11c      	bne.n	80158b2 <ai_platform_network_init+0xf2>
 8015878:	f7ff fbe6 	bl	8015048 <_ai_platform_release_crc>
 801587c:	2e00      	cmp	r6, #0
 801587e:	d06f      	beq.n	8015960 <ai_platform_network_init+0x1a0>
 8015880:	4b45      	ldr	r3, [pc, #276]	; (8015998 <ai_platform_network_init+0x1d8>)
 8015882:	6832      	ldr	r2, [r6, #0]
 8015884:	429a      	cmp	r2, r3
 8015886:	d115      	bne.n	80158b4 <ai_platform_network_init+0xf4>
 8015888:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801588c:	6933      	ldr	r3, [r6, #16]
 801588e:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8015892:	89f7      	ldrh	r7, [r6, #14]
 8015894:	62a3      	str	r3, [r4, #40]	; 0x28
 8015896:	e9c4 2107 	strd	r2, r1, [r4, #28]
 801589a:	2303      	movs	r3, #3
 801589c:	84e7      	strh	r7, [r4, #38]	; 0x26
 801589e:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80158a2:	60e3      	str	r3, [r4, #12]
 80158a4:	4620      	mov	r0, r4
 80158a6:	4626      	mov	r6, r4
 80158a8:	f000 ff28 	bl	80166fc <ai_layers_init_all>
 80158ac:	4630      	mov	r0, r6
 80158ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158b2:	e7fe      	b.n	80158b2 <ai_platform_network_init+0xf2>
 80158b4:	2101      	movs	r1, #1
 80158b6:	4630      	mov	r0, r6
 80158b8:	4635      	mov	r5, r6
 80158ba:	6876      	ldr	r6, [r6, #4]
 80158bc:	f7ff fb74 	bl	8014fa8 <ai_buffer_get_size>
 80158c0:	f105 081c 	add.w	r8, r5, #28
 80158c4:	4681      	mov	r9, r0
 80158c6:	2101      	movs	r1, #1
 80158c8:	4640      	mov	r0, r8
 80158ca:	6a2f      	ldr	r7, [r5, #32]
 80158cc:	f7ff fb6c 	bl	8014fa8 <ai_buffer_get_size>
 80158d0:	f1b9 0f00 	cmp.w	r9, #0
 80158d4:	d025      	beq.n	8015922 <ai_platform_network_init+0x162>
 80158d6:	2201      	movs	r2, #1
 80158d8:	4696      	mov	lr, r2
 80158da:	bb30      	cbnz	r0, 801592a <ai_platform_network_init+0x16a>
 80158dc:	4680      	mov	r8, r0
 80158de:	4607      	mov	r7, r0
 80158e0:	b376      	cbz	r6, 8015940 <ai_platform_network_init+0x180>
 80158e2:	8be3      	ldrh	r3, [r4, #30]
 80158e4:	4573      	cmp	r3, lr
 80158e6:	d323      	bcc.n	8015930 <ai_platform_network_init+0x170>
 80158e8:	b142      	cbz	r2, 80158fc <ai_platform_network_init+0x13c>
 80158ea:	46ac      	mov	ip, r5
 80158ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80158f0:	6a25      	ldr	r5, [r4, #32]
 80158f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80158f4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80158f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80158fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80158fe:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8015902:	2600      	movs	r6, #0
 8015904:	42bb      	cmp	r3, r7
 8015906:	83a6      	strh	r6, [r4, #28]
 8015908:	d323      	bcc.n	8015952 <ai_platform_network_init+0x192>
 801590a:	b37f      	cbz	r7, 801596c <ai_platform_network_init+0x1ac>
 801590c:	46c4      	mov	ip, r8
 801590e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015912:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8015914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015916:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801591a:	46b6      	mov	lr, r6
 801591c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015920:	e7bb      	b.n	801589a <ai_platform_network_init+0xda>
 8015922:	464a      	mov	r2, r9
 8015924:	46ce      	mov	lr, r9
 8015926:	464d      	mov	r5, r9
 8015928:	e7d7      	b.n	80158da <ai_platform_network_init+0x11a>
 801592a:	b30f      	cbz	r7, 8015970 <ai_platform_network_init+0x1b0>
 801592c:	2701      	movs	r7, #1
 801592e:	e7d7      	b.n	80158e0 <ai_platform_network_init+0x120>
 8015930:	2212      	movs	r2, #18
 8015932:	2116      	movs	r1, #22
 8015934:	f104 0010 	add.w	r0, r4, #16
 8015938:	f000 fb46 	bl	8015fc8 <core_set_error>
 801593c:	2600      	movs	r6, #0
 801593e:	e78c      	b.n	801585a <ai_platform_network_init+0x9a>
 8015940:	f1b9 0f00 	cmp.w	r9, #0
 8015944:	d0cd      	beq.n	80158e2 <ai_platform_network_init+0x122>
 8015946:	2110      	movs	r1, #16
 8015948:	2212      	movs	r2, #18
 801594a:	1860      	adds	r0, r4, r1
 801594c:	f000 fb3c 	bl	8015fc8 <core_set_error>
 8015950:	e783      	b.n	801585a <ai_platform_network_init+0x9a>
 8015952:	2213      	movs	r2, #19
 8015954:	2116      	movs	r1, #22
 8015956:	f104 0010 	add.w	r0, r4, #16
 801595a:	f000 fb35 	bl	8015fc8 <core_set_error>
 801595e:	e77c      	b.n	801585a <ai_platform_network_init+0x9a>
 8015960:	2110      	movs	r1, #16
 8015962:	2211      	movs	r2, #17
 8015964:	1860      	adds	r0, r4, r1
 8015966:	f000 fb2f 	bl	8015fc8 <core_set_error>
 801596a:	e776      	b.n	801585a <ai_platform_network_init+0x9a>
 801596c:	46be      	mov	lr, r7
 801596e:	e794      	b.n	801589a <ai_platform_network_init+0xda>
 8015970:	2110      	movs	r1, #16
 8015972:	2213      	movs	r2, #19
 8015974:	1860      	adds	r0, r4, r1
 8015976:	f000 fb27 	bl	8015fc8 <core_set_error>
 801597a:	463e      	mov	r6, r7
 801597c:	e76d      	b.n	801585a <ai_platform_network_init+0x9a>
 801597e:	bf00      	nop
 8015980:	a1c00100 	.word	0xa1c00100
 8015984:	e0042000 	.word	0xe0042000
 8015988:	58024000 	.word	0x58024000
 801598c:	f407a5c2 	.word	0xf407a5c2
 8015990:	b5e8b5cd 	.word	0xb5e8b5cd
 8015994:	40023000 	.word	0x40023000
 8015998:	a1facade 	.word	0xa1facade

0801599c <ai_platform_network_post_init>:
 801599c:	b538      	push	{r3, r4, r5, lr}
 801599e:	b1f0      	cbz	r0, 80159de <ai_platform_network_post_init+0x42>
 80159a0:	4b3c      	ldr	r3, [pc, #240]	; (8015a94 <ai_platform_network_post_init+0xf8>)
 80159a2:	6802      	ldr	r2, [r0, #0]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	4604      	mov	r4, r0
 80159a8:	d119      	bne.n	80159de <ai_platform_network_post_init+0x42>
 80159aa:	f7ff fb4b 	bl	8015044 <_ai_platform_acquire_crc>
 80159ae:	4b3a      	ldr	r3, [pc, #232]	; (8015a98 <ai_platform_network_post_init+0xfc>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80159b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80159ba:	d03b      	beq.n	8015a34 <ai_platform_network_post_init+0x98>
 80159bc:	4a37      	ldr	r2, [pc, #220]	; (8015a9c <ai_platform_network_post_init+0x100>)
 80159be:	2301      	movs	r3, #1
 80159c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80159c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d1fb      	bne.n	80159c4 <ai_platform_network_post_init+0x28>
 80159cc:	4b34      	ldr	r3, [pc, #208]	; (8015aa0 <ai_platform_network_post_init+0x104>)
 80159ce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80159d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80159d6:	4b33      	ldr	r3, [pc, #204]	; (8015aa4 <ai_platform_network_post_init+0x108>)
 80159d8:	429a      	cmp	r2, r3
 80159da:	d037      	beq.n	8015a4c <ai_platform_network_post_init+0xb0>
 80159dc:	e7fe      	b.n	80159dc <ai_platform_network_post_init+0x40>
 80159de:	f7ff fb31 	bl	8015044 <_ai_platform_acquire_crc>
 80159e2:	4b2d      	ldr	r3, [pc, #180]	; (8015a98 <ai_platform_network_post_init+0xfc>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80159ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80159ee:	d010      	beq.n	8015a12 <ai_platform_network_post_init+0x76>
 80159f0:	4a2a      	ldr	r2, [pc, #168]	; (8015a9c <ai_platform_network_post_init+0x100>)
 80159f2:	2301      	movs	r3, #1
 80159f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80159f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d1fb      	bne.n	80159f8 <ai_platform_network_post_init+0x5c>
 8015a00:	4b27      	ldr	r3, [pc, #156]	; (8015aa0 <ai_platform_network_post_init+0x104>)
 8015a02:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015a06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015a0a:	4b26      	ldr	r3, [pc, #152]	; (8015aa4 <ai_platform_network_post_init+0x108>)
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d00d      	beq.n	8015a2c <ai_platform_network_post_init+0x90>
 8015a10:	e7fe      	b.n	8015a10 <ai_platform_network_post_init+0x74>
 8015a12:	4a25      	ldr	r2, [pc, #148]	; (8015aa8 <ai_platform_network_post_init+0x10c>)
 8015a14:	2301      	movs	r3, #1
 8015a16:	6093      	str	r3, [r2, #8]
 8015a18:	6893      	ldr	r3, [r2, #8]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d1fc      	bne.n	8015a18 <ai_platform_network_post_init+0x7c>
 8015a1e:	4b20      	ldr	r3, [pc, #128]	; (8015aa0 <ai_platform_network_post_init+0x104>)
 8015a20:	6013      	str	r3, [r2, #0]
 8015a22:	6812      	ldr	r2, [r2, #0]
 8015a24:	4b1f      	ldr	r3, [pc, #124]	; (8015aa4 <ai_platform_network_post_init+0x108>)
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d000      	beq.n	8015a2c <ai_platform_network_post_init+0x90>
 8015a2a:	e7fe      	b.n	8015a2a <ai_platform_network_post_init+0x8e>
 8015a2c:	f7ff fb0c 	bl	8015048 <_ai_platform_release_crc>
 8015a30:	2000      	movs	r0, #0
 8015a32:	bd38      	pop	{r3, r4, r5, pc}
 8015a34:	4a1c      	ldr	r2, [pc, #112]	; (8015aa8 <ai_platform_network_post_init+0x10c>)
 8015a36:	2301      	movs	r3, #1
 8015a38:	6093      	str	r3, [r2, #8]
 8015a3a:	6893      	ldr	r3, [r2, #8]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d1fc      	bne.n	8015a3a <ai_platform_network_post_init+0x9e>
 8015a40:	4b17      	ldr	r3, [pc, #92]	; (8015aa0 <ai_platform_network_post_init+0x104>)
 8015a42:	6013      	str	r3, [r2, #0]
 8015a44:	6812      	ldr	r2, [r2, #0]
 8015a46:	4b17      	ldr	r3, [pc, #92]	; (8015aa4 <ai_platform_network_post_init+0x108>)
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d11a      	bne.n	8015a82 <ai_platform_network_post_init+0xe6>
 8015a4c:	f7ff fafc 	bl	8015048 <_ai_platform_release_crc>
 8015a50:	68e3      	ldr	r3, [r4, #12]
 8015a52:	f013 0502 	ands.w	r5, r3, #2
 8015a56:	d015      	beq.n	8015a84 <ai_platform_network_post_init+0xe8>
 8015a58:	4620      	mov	r0, r4
 8015a5a:	f000 fe5d 	bl	8016718 <ai_layers_post_init_all>
 8015a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015a60:	b16b      	cbz	r3, 8015a7e <ai_platform_network_post_init+0xe2>
 8015a62:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8015a64:	e007      	b.n	8015a76 <ai_platform_network_post_init+0xda>
 8015a66:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8015a6a:	4798      	blx	r3
 8015a6c:	692b      	ldr	r3, [r5, #16]
 8015a6e:	42ab      	cmp	r3, r5
 8015a70:	d005      	beq.n	8015a7e <ai_platform_network_post_init+0xe2>
 8015a72:	b123      	cbz	r3, 8015a7e <ai_platform_network_post_init+0xe2>
 8015a74:	461d      	mov	r5, r3
 8015a76:	4629      	mov	r1, r5
 8015a78:	2000      	movs	r0, #0
 8015a7a:	2d00      	cmp	r5, #0
 8015a7c:	d1f3      	bne.n	8015a66 <ai_platform_network_post_init+0xca>
 8015a7e:	2001      	movs	r0, #1
 8015a80:	bd38      	pop	{r3, r4, r5, pc}
 8015a82:	e7fe      	b.n	8015a82 <ai_platform_network_post_init+0xe6>
 8015a84:	2210      	movs	r2, #16
 8015a86:	2111      	movs	r1, #17
 8015a88:	18a0      	adds	r0, r4, r2
 8015a8a:	f000 fa9d 	bl	8015fc8 <core_set_error>
 8015a8e:	4628      	mov	r0, r5
 8015a90:	bd38      	pop	{r3, r4, r5, pc}
 8015a92:	bf00      	nop
 8015a94:	a1c00100 	.word	0xa1c00100
 8015a98:	e0042000 	.word	0xe0042000
 8015a9c:	58024000 	.word	0x58024000
 8015aa0:	f407a5c2 	.word	0xf407a5c2
 8015aa4:	b5e8b5cd 	.word	0xb5e8b5cd
 8015aa8:	40023000 	.word	0x40023000

08015aac <ai_platform_network_process>:
 8015aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ab0:	460e      	mov	r6, r1
 8015ab2:	b085      	sub	sp, #20
 8015ab4:	4693      	mov	fp, r2
 8015ab6:	4605      	mov	r5, r0
 8015ab8:	b120      	cbz	r0, 8015ac4 <ai_platform_network_process+0x18>
 8015aba:	4bb8      	ldr	r3, [pc, #736]	; (8015d9c <ai_platform_network_process+0x2f0>)
 8015abc:	6802      	ldr	r2, [r0, #0]
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	bf18      	it	ne
 8015ac2:	2500      	movne	r5, #0
 8015ac4:	f7ff fabe 	bl	8015044 <_ai_platform_acquire_crc>
 8015ac8:	4bb5      	ldr	r3, [pc, #724]	; (8015da0 <ai_platform_network_process+0x2f4>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015ad4:	d010      	beq.n	8015af8 <ai_platform_network_process+0x4c>
 8015ad6:	4ab3      	ldr	r2, [pc, #716]	; (8015da4 <ai_platform_network_process+0x2f8>)
 8015ad8:	2301      	movs	r3, #1
 8015ada:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015ade:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d1fb      	bne.n	8015ade <ai_platform_network_process+0x32>
 8015ae6:	4bb0      	ldr	r3, [pc, #704]	; (8015da8 <ai_platform_network_process+0x2fc>)
 8015ae8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015aec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015af0:	4bae      	ldr	r3, [pc, #696]	; (8015dac <ai_platform_network_process+0x300>)
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d00d      	beq.n	8015b12 <ai_platform_network_process+0x66>
 8015af6:	e7fe      	b.n	8015af6 <ai_platform_network_process+0x4a>
 8015af8:	4aad      	ldr	r2, [pc, #692]	; (8015db0 <ai_platform_network_process+0x304>)
 8015afa:	2301      	movs	r3, #1
 8015afc:	6093      	str	r3, [r2, #8]
 8015afe:	6893      	ldr	r3, [r2, #8]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d1fc      	bne.n	8015afe <ai_platform_network_process+0x52>
 8015b04:	4ba8      	ldr	r3, [pc, #672]	; (8015da8 <ai_platform_network_process+0x2fc>)
 8015b06:	6013      	str	r3, [r2, #0]
 8015b08:	6812      	ldr	r2, [r2, #0]
 8015b0a:	4ba8      	ldr	r3, [pc, #672]	; (8015dac <ai_platform_network_process+0x300>)
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	f040 812c 	bne.w	8015d6a <ai_platform_network_process+0x2be>
 8015b12:	f7ff fa99 	bl	8015048 <_ai_platform_release_crc>
 8015b16:	2d00      	cmp	r5, #0
 8015b18:	f000 8154 	beq.w	8015dc4 <ai_platform_network_process+0x318>
 8015b1c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	f000 8124 	beq.w	8015d6c <ai_platform_network_process+0x2c0>
 8015b24:	68eb      	ldr	r3, [r5, #12]
 8015b26:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8015b2a:	f003 0303 	and.w	r3, r3, #3
 8015b2e:	2700      	movs	r7, #0
 8015b30:	2b03      	cmp	r3, #3
 8015b32:	616f      	str	r7, [r5, #20]
 8015b34:	f040 813e 	bne.w	8015db4 <ai_platform_network_process+0x308>
 8015b38:	2e00      	cmp	r6, #0
 8015b3a:	f000 811d 	beq.w	8015d78 <ai_platform_network_process+0x2cc>
 8015b3e:	f1ba 0f00 	cmp.w	sl, #0
 8015b42:	f000 8119 	beq.w	8015d78 <ai_platform_network_process+0x2cc>
 8015b46:	f8ba 3000 	ldrh.w	r3, [sl]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	f000 8114 	beq.w	8015d78 <ai_platform_network_process+0x2cc>
 8015b50:	69b3      	ldr	r3, [r6, #24]
 8015b52:	f8cd b00c 	str.w	fp, [sp, #12]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8015b5c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d072      	beq.n	8015c4a <ai_platform_network_process+0x19e>
 8015b64:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8015b68:	2c00      	cmp	r4, #0
 8015b6a:	d06e      	beq.n	8015c4a <ai_platform_network_process+0x19e>
 8015b6c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8015b70:	f8d3 9000 	ldr.w	r9, [r3]
 8015b74:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8015b78:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8015b7c:	f000 81e0 	beq.w	8015f40 <ai_platform_network_process+0x494>
 8015b80:	69a3      	ldr	r3, [r4, #24]
 8015b82:	2101      	movs	r1, #1
 8015b84:	4630      	mov	r0, r6
 8015b86:	685d      	ldr	r5, [r3, #4]
 8015b88:	f7ff fa0e 	bl	8014fa8 <ai_buffer_get_size>
 8015b8c:	4285      	cmp	r5, r0
 8015b8e:	f0c0 811b 	bcc.w	8015dc8 <ai_platform_network_process+0x31c>
 8015b92:	68e0      	ldr	r0, [r4, #12]
 8015b94:	69b1      	ldr	r1, [r6, #24]
 8015b96:	68c2      	ldr	r2, [r0, #12]
 8015b98:	68cb      	ldr	r3, [r1, #12]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	f040 8114 	bne.w	8015dc8 <ai_platform_network_process+0x31c>
 8015ba0:	6882      	ldr	r2, [r0, #8]
 8015ba2:	688b      	ldr	r3, [r1, #8]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	f040 810f 	bne.w	8015dc8 <ai_platform_network_process+0x31c>
 8015baa:	6842      	ldr	r2, [r0, #4]
 8015bac:	684b      	ldr	r3, [r1, #4]
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	f040 810a 	bne.w	8015dc8 <ai_platform_network_process+0x31c>
 8015bb4:	69a3      	ldr	r3, [r4, #24]
 8015bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015bba:	f000 fe95 	bl	80168e8 <ai_array_get_data_byte_size>
 8015bbe:	4605      	mov	r5, r0
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	f000 fe0d 	bl	80167e0 <get_tensor_byte_size>
 8015bc6:	4285      	cmp	r5, r0
 8015bc8:	f0c0 80fe 	bcc.w	8015dc8 <ai_platform_network_process+0x31c>
 8015bcc:	69a3      	ldr	r3, [r4, #24]
 8015bce:	6818      	ldr	r0, [r3, #0]
 8015bd0:	f000 fe1e 	bl	8016810 <ai_array_to_buffer_fmt>
 8015bd4:	6833      	ldr	r3, [r6, #0]
 8015bd6:	4058      	eors	r0, r3
 8015bd8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8015bdc:	f040 81bb 	bne.w	8015f56 <ai_platform_network_process+0x4aa>
 8015be0:	6873      	ldr	r3, [r6, #4]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	f000 81ae 	beq.w	8015f44 <ai_platform_network_process+0x498>
 8015be8:	69b3      	ldr	r3, [r6, #24]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	f000 819e 	beq.w	8015f2e <ai_platform_network_process+0x482>
 8015bf2:	9a01      	ldr	r2, [sp, #4]
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	bf38      	it	cc
 8015bf8:	461a      	movcc	r2, r3
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	9201      	str	r2, [sp, #4]
 8015bfe:	f000 fdef 	bl	80167e0 <get_tensor_byte_size>
 8015c02:	f8c8 0008 	str.w	r0, [r8, #8]
 8015c06:	69b3      	ldr	r3, [r6, #24]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	fb00 f303 	mul.w	r3, r0, r3
 8015c0e:	f8c8 300c 	str.w	r3, [r8, #12]
 8015c12:	6871      	ldr	r1, [r6, #4]
 8015c14:	f8c8 1004 	str.w	r1, [r8, #4]
 8015c18:	440b      	add	r3, r1
 8015c1a:	f849 300b 	str.w	r3, [r9, fp]
 8015c1e:	69a0      	ldr	r0, [r4, #24]
 8015c20:	6803      	ldr	r3, [r0, #0]
 8015c22:	009a      	lsls	r2, r3, #2
 8015c24:	f107 0701 	add.w	r7, r7, #1
 8015c28:	f106 061c 	add.w	r6, r6, #28
 8015c2c:	f100 80af 	bmi.w	8015d8e <ai_platform_network_process+0x2e2>
 8015c30:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8015c34:	1a9b      	subs	r3, r3, r2
 8015c36:	4419      	add	r1, r3
 8015c38:	6081      	str	r1, [r0, #8]
 8015c3a:	69a3      	ldr	r3, [r4, #24]
 8015c3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015c40:	60da      	str	r2, [r3, #12]
 8015c42:	f8ba 3000 	ldrh.w	r3, [sl]
 8015c46:	42bb      	cmp	r3, r7
 8015c48:	d888      	bhi.n	8015b5c <ai_platform_network_process+0xb0>
 8015c4a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8015c4e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8015c50:	f1bb 0f00 	cmp.w	fp, #0
 8015c54:	f000 8188 	beq.w	8015f68 <ai_platform_network_process+0x4bc>
 8015c58:	2a01      	cmp	r2, #1
 8015c5a:	f240 8160 	bls.w	8015f1e <ai_platform_network_process+0x472>
 8015c5e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8015c62:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	f000 8159 	beq.w	8015f1e <ai_platform_network_process+0x472>
 8015c6c:	465e      	mov	r6, fp
 8015c6e:	2700      	movs	r7, #0
 8015c70:	462c      	mov	r4, r5
 8015c72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	f000 80b4 	beq.w	8015de4 <ai_platform_network_process+0x338>
 8015c7c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8015c80:	2d00      	cmp	r5, #0
 8015c82:	f000 80af 	beq.w	8015de4 <ai_platform_network_process+0x338>
 8015c86:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015c8a:	f8d3 8000 	ldr.w	r8, [r3]
 8015c8e:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8015c92:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8015c96:	f000 8173 	beq.w	8015f80 <ai_platform_network_process+0x4d4>
 8015c9a:	69ab      	ldr	r3, [r5, #24]
 8015c9c:	2101      	movs	r1, #1
 8015c9e:	685b      	ldr	r3, [r3, #4]
 8015ca0:	9302      	str	r3, [sp, #8]
 8015ca2:	4630      	mov	r0, r6
 8015ca4:	f7ff f980 	bl	8014fa8 <ai_buffer_get_size>
 8015ca8:	9b02      	ldr	r3, [sp, #8]
 8015caa:	4283      	cmp	r3, r0
 8015cac:	f0c0 8136 	bcc.w	8015f1c <ai_platform_network_process+0x470>
 8015cb0:	68e8      	ldr	r0, [r5, #12]
 8015cb2:	69b1      	ldr	r1, [r6, #24]
 8015cb4:	68c2      	ldr	r2, [r0, #12]
 8015cb6:	68cb      	ldr	r3, [r1, #12]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	f040 812f 	bne.w	8015f1c <ai_platform_network_process+0x470>
 8015cbe:	6882      	ldr	r2, [r0, #8]
 8015cc0:	688b      	ldr	r3, [r1, #8]
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	f040 812a 	bne.w	8015f1c <ai_platform_network_process+0x470>
 8015cc8:	6842      	ldr	r2, [r0, #4]
 8015cca:	684b      	ldr	r3, [r1, #4]
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	f040 8125 	bne.w	8015f1c <ai_platform_network_process+0x470>
 8015cd2:	69ab      	ldr	r3, [r5, #24]
 8015cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015cd8:	f000 fe06 	bl	80168e8 <ai_array_get_data_byte_size>
 8015cdc:	9002      	str	r0, [sp, #8]
 8015cde:	4628      	mov	r0, r5
 8015ce0:	f000 fd7e 	bl	80167e0 <get_tensor_byte_size>
 8015ce4:	9b02      	ldr	r3, [sp, #8]
 8015ce6:	4283      	cmp	r3, r0
 8015ce8:	f0c0 8118 	bcc.w	8015f1c <ai_platform_network_process+0x470>
 8015cec:	69ab      	ldr	r3, [r5, #24]
 8015cee:	6818      	ldr	r0, [r3, #0]
 8015cf0:	f000 fd8e 	bl	8016810 <ai_array_to_buffer_fmt>
 8015cf4:	6833      	ldr	r3, [r6, #0]
 8015cf6:	4058      	eors	r0, r3
 8015cf8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8015cfc:	f040 8138 	bne.w	8015f70 <ai_platform_network_process+0x4c4>
 8015d00:	6873      	ldr	r3, [r6, #4]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	f000 814f 	beq.w	8015fa6 <ai_platform_network_process+0x4fa>
 8015d08:	69b3      	ldr	r3, [r6, #24]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	f000 8141 	beq.w	8015f94 <ai_platform_network_process+0x4e8>
 8015d12:	9a01      	ldr	r2, [sp, #4]
 8015d14:	429a      	cmp	r2, r3
 8015d16:	bf38      	it	cc
 8015d18:	461a      	movcc	r2, r3
 8015d1a:	4628      	mov	r0, r5
 8015d1c:	9201      	str	r2, [sp, #4]
 8015d1e:	f000 fd5f 	bl	80167e0 <get_tensor_byte_size>
 8015d22:	f8ca 0008 	str.w	r0, [sl, #8]
 8015d26:	69b3      	ldr	r3, [r6, #24]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	fb00 f303 	mul.w	r3, r0, r3
 8015d2e:	f8ca 300c 	str.w	r3, [sl, #12]
 8015d32:	6871      	ldr	r1, [r6, #4]
 8015d34:	f8ca 1004 	str.w	r1, [sl, #4]
 8015d38:	440b      	add	r3, r1
 8015d3a:	f848 300b 	str.w	r3, [r8, fp]
 8015d3e:	69a8      	ldr	r0, [r5, #24]
 8015d40:	6803      	ldr	r3, [r0, #0]
 8015d42:	009b      	lsls	r3, r3, #2
 8015d44:	f107 0701 	add.w	r7, r7, #1
 8015d48:	f106 061c 	add.w	r6, r6, #28
 8015d4c:	d445      	bmi.n	8015dda <ai_platform_network_process+0x32e>
 8015d4e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8015d52:	1a9b      	subs	r3, r3, r2
 8015d54:	4419      	add	r1, r3
 8015d56:	6081      	str	r1, [r0, #8]
 8015d58:	69ab      	ldr	r3, [r5, #24]
 8015d5a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8015d5e:	60da      	str	r2, [r3, #12]
 8015d60:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015d64:	429f      	cmp	r7, r3
 8015d66:	d384      	bcc.n	8015c72 <ai_platform_network_process+0x1c6>
 8015d68:	e03c      	b.n	8015de4 <ai_platform_network_process+0x338>
 8015d6a:	e7fe      	b.n	8015d6a <ai_platform_network_process+0x2be>
 8015d6c:	68ea      	ldr	r2, [r5, #12]
 8015d6e:	616b      	str	r3, [r5, #20]
 8015d70:	f002 0203 	and.w	r2, r2, #3
 8015d74:	2a03      	cmp	r2, #3
 8015d76:	d11d      	bne.n	8015db4 <ai_platform_network_process+0x308>
 8015d78:	2217      	movs	r2, #23
 8015d7a:	2112      	movs	r1, #18
 8015d7c:	f105 0010 	add.w	r0, r5, #16
 8015d80:	f000 f922 	bl	8015fc8 <core_set_error>
 8015d84:	2400      	movs	r4, #0
 8015d86:	4620      	mov	r0, r4
 8015d88:	b005      	add	sp, #20
 8015d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d8e:	f8ba 3000 	ldrh.w	r3, [sl]
 8015d92:	429f      	cmp	r7, r3
 8015d94:	f4ff aee2 	bcc.w	8015b5c <ai_platform_network_process+0xb0>
 8015d98:	e757      	b.n	8015c4a <ai_platform_network_process+0x19e>
 8015d9a:	bf00      	nop
 8015d9c:	a1c00100 	.word	0xa1c00100
 8015da0:	e0042000 	.word	0xe0042000
 8015da4:	58024000 	.word	0x58024000
 8015da8:	f407a5c2 	.word	0xf407a5c2
 8015dac:	b5e8b5cd 	.word	0xb5e8b5cd
 8015db0:	40023000 	.word	0x40023000
 8015db4:	2230      	movs	r2, #48	; 0x30
 8015db6:	2111      	movs	r1, #17
 8015db8:	f105 0010 	add.w	r0, r5, #16
 8015dbc:	f000 f904 	bl	8015fc8 <core_set_error>
 8015dc0:	2400      	movs	r4, #0
 8015dc2:	e7e0      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015dc4:	462c      	mov	r4, r5
 8015dc6:	e7de      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015dc8:	9d02      	ldr	r5, [sp, #8]
 8015dca:	2218      	movs	r2, #24
 8015dcc:	2112      	movs	r1, #18
 8015dce:	f105 0010 	add.w	r0, r5, #16
 8015dd2:	f000 f8f9 	bl	8015fc8 <core_set_error>
 8015dd6:	2400      	movs	r4, #0
 8015dd8:	e7d5      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015dda:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015dde:	429f      	cmp	r7, r3
 8015de0:	f4ff af47 	bcc.w	8015c72 <ai_platform_network_process+0x1c6>
 8015de4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015de8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015dea:	82a3      	strh	r3, [r4, #20]
 8015dec:	4625      	mov	r5, r4
 8015dee:	2a00      	cmp	r2, #0
 8015df0:	f040 808e 	bne.w	8015f10 <ai_platform_network_process+0x464>
 8015df4:	4616      	mov	r6, r2
 8015df6:	4617      	mov	r7, r2
 8015df8:	8aec      	ldrh	r4, [r5, #22]
 8015dfa:	429c      	cmp	r4, r3
 8015dfc:	bf38      	it	cc
 8015dfe:	46ab      	movcc	fp, r5
 8015e00:	d2c1      	bcs.n	8015d86 <ai_platform_network_process+0x2da>
 8015e02:	2e00      	cmp	r6, #0
 8015e04:	d030      	beq.n	8015e68 <ai_platform_network_process+0x3bc>
 8015e06:	f04f 0800 	mov.w	r8, #0
 8015e0a:	e014      	b.n	8015e36 <ai_platform_network_process+0x38a>
 8015e0c:	6882      	ldr	r2, [r0, #8]
 8015e0e:	68c5      	ldr	r5, [r0, #12]
 8015e10:	6863      	ldr	r3, [r4, #4]
 8015e12:	1b52      	subs	r2, r2, r5
 8015e14:	4413      	add	r3, r2
 8015e16:	6083      	str	r3, [r0, #8]
 8015e18:	698b      	ldr	r3, [r1, #24]
 8015e1a:	6862      	ldr	r2, [r4, #4]
 8015e1c:	60da      	str	r2, [r3, #12]
 8015e1e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8015e22:	f859 200a 	ldr.w	r2, [r9, sl]
 8015e26:	440b      	add	r3, r1
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	bf24      	itt	cs
 8015e2c:	68e3      	ldrcs	r3, [r4, #12]
 8015e2e:	1ad3      	subcs	r3, r2, r3
 8015e30:	6063      	str	r3, [r4, #4]
 8015e32:	f108 0801 	add.w	r8, r8, #1
 8015e36:	8833      	ldrh	r3, [r6, #0]
 8015e38:	4543      	cmp	r3, r8
 8015e3a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8015e3e:	d913      	bls.n	8015e68 <ai_platform_network_process+0x3bc>
 8015e40:	6873      	ldr	r3, [r6, #4]
 8015e42:	b18b      	cbz	r3, 8015e68 <ai_platform_network_process+0x3bc>
 8015e44:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8015e48:	b171      	cbz	r1, 8015e68 <ai_platform_network_process+0x3bc>
 8015e4a:	6988      	ldr	r0, [r1, #24]
 8015e4c:	68b2      	ldr	r2, [r6, #8]
 8015e4e:	6803      	ldr	r3, [r0, #0]
 8015e50:	f8d2 9000 	ldr.w	r9, [r2]
 8015e54:	009d      	lsls	r5, r3, #2
 8015e56:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8015e5a:	d5d7      	bpl.n	8015e0c <ai_platform_network_process+0x360>
 8015e5c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8015e60:	6880      	ldr	r0, [r0, #8]
 8015e62:	f000 fd8d 	bl	8016980 <memcpy>
 8015e66:	e7da      	b.n	8015e1e <ai_platform_network_process+0x372>
 8015e68:	4658      	mov	r0, fp
 8015e6a:	f000 fc69 	bl	8016740 <ai_layers_forward_all>
 8015e6e:	2f00      	cmp	r7, #0
 8015e70:	d03f      	beq.n	8015ef2 <ai_platform_network_process+0x446>
 8015e72:	2400      	movs	r4, #0
 8015e74:	e016      	b.n	8015ea4 <ai_platform_network_process+0x3f8>
 8015e76:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8015e7a:	f859 100a 	ldr.w	r1, [r9, sl]
 8015e7e:	4413      	add	r3, r2
 8015e80:	428b      	cmp	r3, r1
 8015e82:	bf24      	itt	cs
 8015e84:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8015e88:	1acb      	subcs	r3, r1, r3
 8015e8a:	f8c8 3004 	str.w	r3, [r8, #4]
 8015e8e:	6981      	ldr	r1, [r0, #24]
 8015e90:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8015e94:	1b52      	subs	r2, r2, r5
 8015e96:	4413      	add	r3, r2
 8015e98:	608b      	str	r3, [r1, #8]
 8015e9a:	6983      	ldr	r3, [r0, #24]
 8015e9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015ea0:	60da      	str	r2, [r3, #12]
 8015ea2:	3401      	adds	r4, #1
 8015ea4:	883b      	ldrh	r3, [r7, #0]
 8015ea6:	42a3      	cmp	r3, r4
 8015ea8:	d923      	bls.n	8015ef2 <ai_platform_network_process+0x446>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	b30b      	cbz	r3, 8015ef2 <ai_platform_network_process+0x446>
 8015eae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015eb2:	b1f0      	cbz	r0, 8015ef2 <ai_platform_network_process+0x446>
 8015eb4:	68ba      	ldr	r2, [r7, #8]
 8015eb6:	6983      	ldr	r3, [r0, #24]
 8015eb8:	f8d2 9000 	ldr.w	r9, [r2]
 8015ebc:	681a      	ldr	r2, [r3, #0]
 8015ebe:	0092      	lsls	r2, r2, #2
 8015ec0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8015ec4:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8015ec8:	d5d5      	bpl.n	8015e76 <ai_platform_network_process+0x3ca>
 8015eca:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015ece:	6899      	ldr	r1, [r3, #8]
 8015ed0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015ed4:	f000 fd54 	bl	8016980 <memcpy>
 8015ed8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8015edc:	f859 200a 	ldr.w	r2, [r9, sl]
 8015ee0:	440b      	add	r3, r1
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	bf24      	itt	cs
 8015ee6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8015eea:	1ad3      	subcs	r3, r2, r3
 8015eec:	f8c8 3004 	str.w	r3, [r8, #4]
 8015ef0:	e7d7      	b.n	8015ea2 <ai_platform_network_process+0x3f6>
 8015ef2:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8015ef6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8015efa:	3401      	adds	r4, #1
 8015efc:	b2a4      	uxth	r4, r4
 8015efe:	42a3      	cmp	r3, r4
 8015f00:	f8ab 4016 	strh.w	r4, [fp, #22]
 8015f04:	f63f af7d 	bhi.w	8015e02 <ai_platform_network_process+0x356>
 8015f08:	4620      	mov	r0, r4
 8015f0a:	b005      	add	sp, #20
 8015f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f10:	2a01      	cmp	r2, #1
 8015f12:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8015f14:	d03c      	beq.n	8015f90 <ai_platform_network_process+0x4e4>
 8015f16:	f106 070c 	add.w	r7, r6, #12
 8015f1a:	e76d      	b.n	8015df8 <ai_platform_network_process+0x34c>
 8015f1c:	4625      	mov	r5, r4
 8015f1e:	2218      	movs	r2, #24
 8015f20:	2113      	movs	r1, #19
 8015f22:	f105 0010 	add.w	r0, r5, #16
 8015f26:	f000 f84f 	bl	8015fc8 <core_set_error>
 8015f2a:	2400      	movs	r4, #0
 8015f2c:	e72b      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015f2e:	9d02      	ldr	r5, [sp, #8]
 8015f30:	4604      	mov	r4, r0
 8015f32:	2221      	movs	r2, #33	; 0x21
 8015f34:	2112      	movs	r1, #18
 8015f36:	f105 0010 	add.w	r0, r5, #16
 8015f3a:	f000 f845 	bl	8015fc8 <core_set_error>
 8015f3e:	e722      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015f40:	9d02      	ldr	r5, [sp, #8]
 8015f42:	e719      	b.n	8015d78 <ai_platform_network_process+0x2cc>
 8015f44:	9d02      	ldr	r5, [sp, #8]
 8015f46:	4604      	mov	r4, r0
 8015f48:	2217      	movs	r2, #23
 8015f4a:	2112      	movs	r1, #18
 8015f4c:	f105 0010 	add.w	r0, r5, #16
 8015f50:	f000 f83a 	bl	8015fc8 <core_set_error>
 8015f54:	e717      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015f56:	9d02      	ldr	r5, [sp, #8]
 8015f58:	2219      	movs	r2, #25
 8015f5a:	2112      	movs	r1, #18
 8015f5c:	f105 0010 	add.w	r0, r5, #16
 8015f60:	f000 f832 	bl	8015fc8 <core_set_error>
 8015f64:	2400      	movs	r4, #0
 8015f66:	e70e      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015f68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015f6c:	82ab      	strh	r3, [r5, #20]
 8015f6e:	e73e      	b.n	8015dee <ai_platform_network_process+0x342>
 8015f70:	f104 0010 	add.w	r0, r4, #16
 8015f74:	2219      	movs	r2, #25
 8015f76:	2113      	movs	r1, #19
 8015f78:	f000 f826 	bl	8015fc8 <core_set_error>
 8015f7c:	2400      	movs	r4, #0
 8015f7e:	e702      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015f80:	f104 0010 	add.w	r0, r4, #16
 8015f84:	2217      	movs	r2, #23
 8015f86:	2113      	movs	r1, #19
 8015f88:	f000 f81e 	bl	8015fc8 <core_set_error>
 8015f8c:	4654      	mov	r4, sl
 8015f8e:	e6fa      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015f90:	2700      	movs	r7, #0
 8015f92:	e731      	b.n	8015df8 <ai_platform_network_process+0x34c>
 8015f94:	4625      	mov	r5, r4
 8015f96:	2221      	movs	r2, #33	; 0x21
 8015f98:	4604      	mov	r4, r0
 8015f9a:	2113      	movs	r1, #19
 8015f9c:	f105 0010 	add.w	r0, r5, #16
 8015fa0:	f000 f812 	bl	8015fc8 <core_set_error>
 8015fa4:	e6ef      	b.n	8015d86 <ai_platform_network_process+0x2da>
 8015fa6:	4625      	mov	r5, r4
 8015fa8:	2217      	movs	r2, #23
 8015faa:	4604      	mov	r4, r0
 8015fac:	2113      	movs	r1, #19
 8015fae:	f105 0010 	add.w	r0, r5, #16
 8015fb2:	f000 f809 	bl	8015fc8 <core_set_error>
 8015fb6:	e6e6      	b.n	8015d86 <ai_platform_network_process+0x2da>

08015fb8 <core_init>:
 8015fb8:	2001      	movs	r0, #1
 8015fba:	4770      	bx	lr

08015fbc <core_get_error>:
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	6800      	ldr	r0, [r0, #0]
 8015fc2:	601a      	str	r2, [r3, #0]
 8015fc4:	4770      	bx	lr
 8015fc6:	bf00      	nop

08015fc8 <core_set_error>:
 8015fc8:	4603      	mov	r3, r0
 8015fca:	7800      	ldrb	r0, [r0, #0]
 8015fcc:	b108      	cbz	r0, 8015fd2 <core_set_error+0xa>
 8015fce:	2000      	movs	r0, #0
 8015fd0:	4770      	bx	lr
 8015fd2:	7019      	strb	r1, [r3, #0]
 8015fd4:	6819      	ldr	r1, [r3, #0]
 8015fd6:	f362 211f 	bfi	r1, r2, #8, #24
 8015fda:	2001      	movs	r0, #1
 8015fdc:	6019      	str	r1, [r3, #0]
 8015fde:	4770      	bx	lr

08015fe0 <func_dummy>:
 8015fe0:	4770      	bx	lr
 8015fe2:	bf00      	nop

08015fe4 <decodeEstimator_LEQ_8Bits>:
 8015fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8015fec:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8015ff0:	e9dd a909 	ldrd	sl, r9, [sp, #36]	; 0x24
 8015ff4:	f242 7511 	movw	r5, #10001	; 0x2711
 8015ff8:	f04f 0c00 	mov.w	ip, #0
 8015ffc:	e00e      	b.n	801601c <decodeEstimator_LEQ_8Bits+0x38>
 8015ffe:	ed94 7a00 	vldr	s14, [r4]
 8016002:	edde 7a00 	vldr	s15, [lr]
 8016006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801600a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801600e:	fa1f fc86 	uxth.w	ip, r6
 8016012:	bf88      	it	hi
 8016014:	fa1f fc87 	uxthhi.w	ip, r7
 8016018:	3d01      	subs	r5, #1
 801601a:	d05c      	beq.n	80160d6 <decodeEstimator_LEQ_8Bits+0xf2>
 801601c:	f81a 600c 	ldrb.w	r6, [sl, ip]
 8016020:	f819 700c 	ldrb.w	r7, [r9, ip]
 8016024:	f812 400c 	ldrb.w	r4, [r2, ip]
 8016028:	42be      	cmp	r6, r7
 801602a:	eb03 0e8c 	add.w	lr, r3, ip, lsl #2
 801602e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8016032:	d1e4      	bne.n	8015ffe <decodeEstimator_LEQ_8Bits+0x1a>
 8016034:	f1b8 0f00 	cmp.w	r8, #0
 8016038:	d021      	beq.n	801607e <decodeEstimator_LEQ_8Bits+0x9a>
 801603a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801603c:	2b08      	cmp	r3, #8
 801603e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016042:	d029      	beq.n	8016098 <decodeEstimator_LEQ_8Bits+0xb4>
 8016044:	2b20      	cmp	r3, #32
 8016046:	f10b 33ff 	add.w	r3, fp, #4294967295
 801604a:	fa1b fb88 	uxtah	fp, fp, r8
 801604e:	d11b      	bne.n	8016088 <decodeEstimator_LEQ_8Bits+0xa4>
 8016050:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016052:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016054:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8016058:	4564      	cmp	r4, ip
 801605a:	d10a      	bne.n	8016072 <decodeEstimator_LEQ_8Bits+0x8e>
 801605c:	7804      	ldrb	r4, [r0, #0]
 801605e:	ed92 7a00 	vldr	s14, [r2]
 8016062:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8016066:	edd4 7a00 	vldr	s15, [r4]
 801606a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801606e:	edc4 7a00 	vstr	s15, [r4]
 8016072:	459b      	cmp	fp, r3
 8016074:	f100 0001 	add.w	r0, r0, #1
 8016078:	f102 0204 	add.w	r2, r2, #4
 801607c:	d1ea      	bne.n	8016054 <decodeEstimator_LEQ_8Bits+0x70>
 801607e:	2000      	movs	r0, #0
 8016080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016084:	455b      	cmp	r3, fp
 8016086:	d0fa      	beq.n	801607e <decodeEstimator_LEQ_8Bits+0x9a>
 8016088:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801608c:	4562      	cmp	r2, ip
 801608e:	d1f9      	bne.n	8016084 <decodeEstimator_LEQ_8Bits+0xa0>
 8016090:	f06f 0003 	mvn.w	r0, #3
 8016094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016098:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801609a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801609c:	f10b 33ff 	add.w	r3, fp, #4294967295
 80160a0:	fa1b fb88 	uxtah	fp, fp, r8
 80160a4:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80160a8:	4564      	cmp	r4, ip
 80160aa:	d10d      	bne.n	80160c8 <decodeEstimator_LEQ_8Bits+0xe4>
 80160ac:	7815      	ldrb	r5, [r2, #0]
 80160ae:	7804      	ldrb	r4, [r0, #0]
 80160b0:	ee07 5a90 	vmov	s15, r5
 80160b4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80160b8:	ed94 7a00 	vldr	s14, [r4]
 80160bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80160c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160c4:	edc4 7a00 	vstr	s15, [r4]
 80160c8:	459b      	cmp	fp, r3
 80160ca:	f100 0001 	add.w	r0, r0, #1
 80160ce:	f102 0201 	add.w	r2, r2, #1
 80160d2:	d1e7      	bne.n	80160a4 <decodeEstimator_LEQ_8Bits+0xc0>
 80160d4:	e7d3      	b.n	801607e <decodeEstimator_LEQ_8Bits+0x9a>
 80160d6:	f06f 0001 	mvn.w	r0, #1
 80160da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160de:	bf00      	nop

080160e0 <tree_ensemble_classifier_decoder>:
 80160e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e4:	b09b      	sub	sp, #108	; 0x6c
 80160e6:	4604      	mov	r4, r0
 80160e8:	9218      	str	r2, [sp, #96]	; 0x60
 80160ea:	4622      	mov	r2, r4
 80160ec:	460d      	mov	r5, r1
 80160ee:	6911      	ldr	r1, [r2, #16]
 80160f0:	9110      	str	r1, [sp, #64]	; 0x40
 80160f2:	6891      	ldr	r1, [r2, #8]
 80160f4:	9111      	str	r1, [sp, #68]	; 0x44
 80160f6:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80160f8:	910d      	str	r1, [sp, #52]	; 0x34
 80160fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80160fc:	9114      	str	r1, [sp, #80]	; 0x50
 80160fe:	e9d2 910b 	ldrd	r9, r1, [r2, #44]	; 0x2c
 8016102:	900f      	str	r0, [sp, #60]	; 0x3c
 8016104:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 8016108:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801610c:	9117      	str	r1, [sp, #92]	; 0x5c
 801610e:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
 8016112:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8016114:	68d2      	ldr	r2, [r2, #12]
 8016116:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 801611a:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 801611e:	9016      	str	r0, [sp, #88]	; 0x58
 8016120:	6824      	ldr	r4, [r4, #0]
 8016122:	9312      	str	r3, [sp, #72]	; 0x48
 8016124:	9119      	str	r1, [sp, #100]	; 0x64
 8016126:	9215      	str	r2, [sp, #84]	; 0x54
 8016128:	2800      	cmp	r0, #0
 801612a:	f000 813a 	beq.w	80163a2 <tree_ensemble_classifier_decoder+0x2c2>
 801612e:	0082      	lsls	r2, r0, #2
 8016130:	2100      	movs	r1, #0
 8016132:	4618      	mov	r0, r3
 8016134:	f000 fc32 	bl	801699c <memset>
 8016138:	f1bb 0f00 	cmp.w	fp, #0
 801613c:	f000 8088 	beq.w	8016250 <tree_ensemble_classifier_decoder+0x170>
 8016140:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016144:	18e3      	adds	r3, r4, r3
 8016146:	f1aa 0202 	sub.w	r2, sl, #2
 801614a:	920c      	str	r2, [sp, #48]	; 0x30
 801614c:	9313      	str	r3, [sp, #76]	; 0x4c
 801614e:	f1a9 0202 	sub.w	r2, r9, #2
 8016152:	1e63      	subs	r3, r4, #1
 8016154:	f04f 0900 	mov.w	r9, #0
 8016158:	920b      	str	r2, [sp, #44]	; 0x2c
 801615a:	9309      	str	r3, [sp, #36]	; 0x24
 801615c:	464c      	mov	r4, r9
 801615e:	46cb      	mov	fp, r9
 8016160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016162:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016166:	9209      	str	r2, [sp, #36]	; 0x24
 8016168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801616a:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 801616e:	920c      	str	r2, [sp, #48]	; 0x30
 8016170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016172:	910e      	str	r1, [sp, #56]	; 0x38
 8016174:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8016178:	2b01      	cmp	r3, #1
 801617a:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 801617e:	f040 80e6 	bne.w	801634e <tree_ensemble_classifier_decoder+0x26e>
 8016182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016186:	2a08      	cmp	r2, #8
 8016188:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801618c:	f000 80b2 	beq.w	80162f4 <tree_ensemble_classifier_decoder+0x214>
 8016190:	2a20      	cmp	r2, #32
 8016192:	f040 80d7 	bne.w	8016344 <tree_ensemble_classifier_decoder+0x264>
 8016196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016198:	9911      	ldr	r1, [sp, #68]	; 0x44
 801619a:	6a12      	ldr	r2, [r2, #32]
 801619c:	2a08      	cmp	r2, #8
 801619e:	eb01 0a8b 	add.w	sl, r1, fp, lsl #2
 80161a2:	f000 80ae 	beq.w	8016302 <tree_ensemble_classifier_decoder+0x222>
 80161a6:	f242 7e11 	movw	lr, #10001	; 0x2711
 80161aa:	2100      	movs	r1, #0
 80161ac:	e00e      	b.n	80161cc <tree_ensemble_classifier_decoder+0xec>
 80161ae:	ed92 7a00 	vldr	s14, [r2]
 80161b2:	edd9 7a00 	vldr	s15, [r9]
 80161b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80161ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161be:	bf94      	ite	ls
 80161c0:	4661      	movls	r1, ip
 80161c2:	4601      	movhi	r1, r0
 80161c4:	f1be 0e01 	subs.w	lr, lr, #1
 80161c8:	f000 80b7 	beq.w	801633a <tree_ensemble_classifier_decoder+0x25a>
 80161cc:	1862      	adds	r2, r4, r1
 80161ce:	eb03 0981 	add.w	r9, r3, r1, lsl #2
 80161d2:	f836 c012 	ldrh.w	ip, [r6, r2, lsl #1]
 80161d6:	f837 0012 	ldrh.w	r0, [r7, r2, lsl #1]
 80161da:	f818 2002 	ldrb.w	r2, [r8, r2]
 80161de:	4584      	cmp	ip, r0
 80161e0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80161e4:	d1e3      	bne.n	80161ae <tree_ensemble_classifier_decoder+0xce>
 80161e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161e8:	b332      	cbz	r2, 8016238 <tree_ensemble_classifier_decoder+0x158>
 80161ea:	f102 3cff 	add.w	ip, r2, #4294967295
 80161ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80161f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80161f4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80161f6:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 80161fa:	3b01      	subs	r3, #1
 80161fc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8016200:	fa1b fc8c 	uxtah	ip, fp, ip
 8016204:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 8016208:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801620c:	3202      	adds	r2, #2
 801620e:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 8016212:	4288      	cmp	r0, r1
 8016214:	d10a      	bne.n	801622c <tree_ensemble_classifier_decoder+0x14c>
 8016216:	8810      	ldrh	r0, [r2, #0]
 8016218:	ed9a 7a00 	vldr	s14, [sl]
 801621c:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8016220:	edd0 7a00 	vldr	s15, [r0]
 8016224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016228:	edc0 7a00 	vstr	s15, [r0]
 801622c:	459c      	cmp	ip, r3
 801622e:	f102 0202 	add.w	r2, r2, #2
 8016232:	f10a 0a04 	add.w	sl, sl, #4
 8016236:	d1ea      	bne.n	801620e <tree_ensemble_classifier_decoder+0x12e>
 8016238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801623a:	441c      	add	r4, r3
 801623c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801623e:	449b      	add	fp, r3
 8016240:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016244:	4293      	cmp	r3, r2
 8016246:	d18b      	bne.n	8016160 <tree_ensemble_classifier_decoder+0x80>
 8016248:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801624a:	2b00      	cmp	r3, #0
 801624c:	f000 80ad 	beq.w	80163aa <tree_ensemble_classifier_decoder+0x2ca>
 8016250:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016252:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016254:	3b01      	subs	r3, #1
 8016256:	b29b      	uxth	r3, r3
 8016258:	1d10      	adds	r0, r2, #4
 801625a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801625e:	4614      	mov	r4, r2
 8016260:	4613      	mov	r3, r2
 8016262:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016264:	edd3 6a00 	vldr	s13, [r3]
 8016268:	edd2 7a16 	vldr	s15, [r2, #88]	; 0x58
 801626c:	ed92 7a15 	vldr	s14, [r2, #84]	; 0x54
 8016270:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8016274:	ece3 7a01 	vstmia	r3!, {s15}
 8016278:	4298      	cmp	r0, r3
 801627a:	d1f3      	bne.n	8016264 <tree_ensemble_classifier_decoder+0x184>
 801627c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801627e:	2b02      	cmp	r3, #2
 8016280:	d06a      	beq.n	8016358 <tree_ensemble_classifier_decoder+0x278>
 8016282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016284:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016286:	2100      	movs	r1, #0
 8016288:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801628a:	ed93 7a00 	vldr	s14, [r3]
 801628e:	440a      	add	r2, r1
 8016290:	edd2 7a00 	vldr	s15, [r2]
 8016294:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016298:	3104      	adds	r1, #4
 801629a:	ece3 7a01 	vstmia	r3!, {s15}
 801629e:	4283      	cmp	r3, r0
 80162a0:	d1f2      	bne.n	8016288 <tree_ensemble_classifier_decoder+0x1a8>
 80162a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80162a4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80162a6:	ed93 7a00 	vldr	s14, [r3]
 80162aa:	2300      	movs	r3, #0
 80162ac:	4619      	mov	r1, r3
 80162ae:	461a      	mov	r2, r3
 80162b0:	ecf4 7a01 	vldmia	r4!, {s15}
 80162b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162bc:	f103 0301 	add.w	r3, r3, #1
 80162c0:	bf48      	it	mi
 80162c2:	4611      	movmi	r1, r2
 80162c4:	b29a      	uxth	r2, r3
 80162c6:	bf48      	it	mi
 80162c8:	eeb0 7a67 	vmovmi.f32	s14, s15
 80162cc:	4282      	cmp	r2, r0
 80162ce:	d3ef      	bcc.n	80162b0 <tree_ensemble_classifier_decoder+0x1d0>
 80162d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162d2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80162d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80162d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	6013      	str	r3, [r2, #0]
 80162de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80162e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80162e4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80162e6:	4608      	mov	r0, r1
 80162e8:	2300      	movs	r3, #0
 80162ea:	47a0      	blx	r4
 80162ec:	2000      	movs	r0, #0
 80162ee:	b01b      	add	sp, #108	; 0x6c
 80162f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80162f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80162f8:	6a12      	ldr	r2, [r2, #32]
 80162fa:	2a08      	cmp	r2, #8
 80162fc:	eb01 0a0b 	add.w	sl, r1, fp
 8016300:	d120      	bne.n	8016344 <tree_ensemble_classifier_decoder+0x264>
 8016302:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016304:	9203      	str	r2, [sp, #12]
 8016306:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016308:	990a      	ldr	r1, [sp, #40]	; 0x28
 801630a:	9105      	str	r1, [sp, #20]
 801630c:	445a      	add	r2, fp
 801630e:	9206      	str	r2, [sp, #24]
 8016310:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016312:	f8cd a008 	str.w	sl, [sp, #8]
 8016316:	445a      	add	r2, fp
 8016318:	9204      	str	r2, [sp, #16]
 801631a:	448b      	add	fp, r1
 801631c:	193a      	adds	r2, r7, r4
 801631e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016320:	9201      	str	r2, [sp, #4]
 8016322:	1932      	adds	r2, r6, r4
 8016324:	9200      	str	r2, [sp, #0]
 8016326:	4628      	mov	r0, r5
 8016328:	eb08 0204 	add.w	r2, r8, r4
 801632c:	440c      	add	r4, r1
 801632e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016330:	f7ff fe58 	bl	8015fe4 <decodeEstimator_LEQ_8Bits>
 8016334:	2800      	cmp	r0, #0
 8016336:	d083      	beq.n	8016240 <tree_ensemble_classifier_decoder+0x160>
 8016338:	e001      	b.n	801633e <tree_ensemble_classifier_decoder+0x25e>
 801633a:	f06f 0001 	mvn.w	r0, #1
 801633e:	b01b      	add	sp, #108	; 0x6c
 8016340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016344:	f06f 0003 	mvn.w	r0, #3
 8016348:	b01b      	add	sp, #108	; 0x6c
 801634a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801634e:	f06f 0002 	mvn.w	r0, #2
 8016352:	b01b      	add	sp, #108	; 0x6c
 8016354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016358:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801635a:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 801635e:	b333      	cbz	r3, 80163ae <tree_ensemble_classifier_decoder+0x2ce>
 8016360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016362:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016364:	ed93 7a00 	vldr	s14, [r3]
 8016368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801636a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801636e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016376:	bfcc      	ite	gt
 8016378:	685b      	ldrgt	r3, [r3, #4]
 801637a:	681b      	ldrle	r3, [r3, #0]
 801637c:	6013      	str	r3, [r2, #0]
 801637e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016380:	ed93 7a00 	vldr	s14, [r3]
 8016384:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016388:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801638c:	ed83 7a01 	vstr	s14, [r3, #4]
 8016390:	edc3 7a00 	vstr	s15, [r3]
 8016394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801639a:	2b01      	cmp	r3, #1
 801639c:	d19f      	bne.n	80162de <tree_ensemble_classifier_decoder+0x1fe>
 801639e:	2000      	movs	r0, #0
 80163a0:	e7cd      	b.n	801633e <tree_ensemble_classifier_decoder+0x25e>
 80163a2:	f1bb 0f00 	cmp.w	fp, #0
 80163a6:	f47f aecb 	bne.w	8016140 <tree_ensemble_classifier_decoder+0x60>
 80163aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80163ac:	e794      	b.n	80162d8 <tree_ensemble_classifier_decoder+0x1f8>
 80163ae:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80163b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80163b2:	edd3 7a00 	vldr	s15, [r3]
 80163b6:	edd2 6a00 	vldr	s13, [r2]
 80163ba:	ed92 7a01 	vldr	s14, [r2, #4]
 80163be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80163c2:	edc2 7a00 	vstr	s15, [r2]
 80163c6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80163c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80163cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80163ce:	ee37 7a26 	vadd.f32	s14, s14, s13
 80163d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80163d6:	ed82 7a01 	vstr	s14, [r2, #4]
 80163da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80163e0:	bfcc      	ite	gt
 80163e2:	685b      	ldrgt	r3, [r3, #4]
 80163e4:	681b      	ldrle	r3, [r3, #0]
 80163e6:	6013      	str	r3, [r2, #0]
 80163e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80163ea:	edd3 7a00 	vldr	s15, [r3]
 80163ee:	eeb1 7a67 	vneg.f32	s14, s15
 80163f2:	edc3 7a01 	vstr	s15, [r3, #4]
 80163f6:	ed83 7a00 	vstr	s14, [r3]
 80163fa:	e7cb      	b.n	8016394 <tree_ensemble_classifier_decoder+0x2b4>

080163fc <forward_tree_ensemble_classifier>:
 80163fc:	6982      	ldr	r2, [r0, #24]
 80163fe:	8813      	ldrh	r3, [r2, #0]
 8016400:	2b00      	cmp	r3, #0
 8016402:	f000 80a1 	beq.w	8016548 <forward_tree_ensemble_classifier+0x14c>
 8016406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801640a:	6855      	ldr	r5, [r2, #4]
 801640c:	686a      	ldr	r2, [r5, #4]
 801640e:	2b01      	cmp	r3, #1
 8016410:	b0a1      	sub	sp, #132	; 0x84
 8016412:	bf14      	ite	ne
 8016414:	f105 010c 	addne.w	r1, r5, #12
 8016418:	2100      	moveq	r1, #0
 801641a:	b102      	cbz	r2, 801641e <forward_tree_ensemble_classifier+0x22>
 801641c:	6812      	ldr	r2, [r2, #0]
 801641e:	684c      	ldr	r4, [r1, #4]
 8016420:	2c00      	cmp	r4, #0
 8016422:	f000 808f 	beq.w	8016544 <forward_tree_ensemble_classifier+0x148>
 8016426:	e9d4 1400 	ldrd	r1, r4, [r4]
 801642a:	2b02      	cmp	r3, #2
 801642c:	f240 8090 	bls.w	8016550 <forward_tree_ensemble_classifier+0x154>
 8016430:	69eb      	ldr	r3, [r5, #28]
 8016432:	2b00      	cmp	r3, #0
 8016434:	f000 808a 	beq.w	801654c <forward_tree_ensemble_classifier+0x150>
 8016438:	681d      	ldr	r5, [r3, #0]
 801643a:	699e      	ldr	r6, [r3, #24]
 801643c:	69ad      	ldr	r5, [r5, #24]
 801643e:	f8d6 a018 	ldr.w	sl, [r6, #24]
 8016442:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8016446:	685d      	ldr	r5, [r3, #4]
 8016448:	69ad      	ldr	r5, [r5, #24]
 801644a:	68af      	ldr	r7, [r5, #8]
 801644c:	689d      	ldr	r5, [r3, #8]
 801644e:	f8d5 e018 	ldr.w	lr, [r5, #24]
 8016452:	68dd      	ldr	r5, [r3, #12]
 8016454:	f8de b008 	ldr.w	fp, [lr, #8]
 8016458:	f8d5 8018 	ldr.w	r8, [r5, #24]
 801645c:	691d      	ldr	r5, [r3, #16]
 801645e:	69ad      	ldr	r5, [r5, #24]
 8016460:	68ad      	ldr	r5, [r5, #8]
 8016462:	9503      	str	r5, [sp, #12]
 8016464:	695d      	ldr	r5, [r3, #20]
 8016466:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801646a:	69dd      	ldr	r5, [r3, #28]
 801646c:	69ad      	ldr	r5, [r5, #24]
 801646e:	68ad      	ldr	r5, [r5, #8]
 8016470:	9506      	str	r5, [sp, #24]
 8016472:	6a1d      	ldr	r5, [r3, #32]
 8016474:	69ad      	ldr	r5, [r5, #24]
 8016476:	68ad      	ldr	r5, [r5, #8]
 8016478:	9507      	str	r5, [sp, #28]
 801647a:	68f5      	ldr	r5, [r6, #12]
 801647c:	f8da 6008 	ldr.w	r6, [sl, #8]
 8016480:	686d      	ldr	r5, [r5, #4]
 8016482:	9604      	str	r6, [sp, #16]
 8016484:	9505      	str	r5, [sp, #20]
 8016486:	f8de 5000 	ldr.w	r5, [lr]
 801648a:	f8d8 6000 	ldr.w	r6, [r8]
 801648e:	f8d9 e008 	ldr.w	lr, [r9, #8]
 8016492:	f3c5 1ac6 	ubfx	sl, r5, #7, #7
 8016496:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801649a:	9502      	str	r5, [sp, #8]
 801649c:	f8d9 5000 	ldr.w	r5, [r9]
 80164a0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80164a4:	f8d2 c018 	ldr.w	ip, [r2, #24]
 80164a8:	698a      	ldr	r2, [r1, #24]
 80164aa:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80164ae:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80164b2:	68e2      	ldr	r2, [r4, #12]
 80164b4:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 80164b8:	970a      	str	r7, [sp, #40]	; 0x28
 80164ba:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80164bc:	69bf      	ldr	r7, [r7, #24]
 80164be:	4642      	mov	r2, r8
 80164c0:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80164c4:	e9d3 730a 	ldrd	r7, r3, [r3, #40]	; 0x28
 80164c8:	69bf      	ldr	r7, [r7, #24]
 80164ca:	699b      	ldr	r3, [r3, #24]
 80164cc:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80164d0:	689f      	ldr	r7, [r3, #8]
 80164d2:	69a3      	ldr	r3, [r4, #24]
 80164d4:	f3c6 16c6 	ubfx	r6, r6, #7, #7
 80164d8:	689b      	ldr	r3, [r3, #8]
 80164da:	9611      	str	r6, [sp, #68]	; 0x44
 80164dc:	9e02      	ldr	r6, [sp, #8]
 80164de:	960e      	str	r6, [sp, #56]	; 0x38
 80164e0:	9e03      	ldr	r6, [sp, #12]
 80164e2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80164e6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80164ea:	960f      	str	r6, [sp, #60]	; 0x3c
 80164ec:	9e04      	ldr	r6, [sp, #16]
 80164ee:	9610      	str	r6, [sp, #64]	; 0x40
 80164f0:	9e05      	ldr	r6, [sp, #20]
 80164f2:	9612      	str	r6, [sp, #72]	; 0x48
 80164f4:	9e06      	ldr	r6, [sp, #24]
 80164f6:	9613      	str	r6, [sp, #76]	; 0x4c
 80164f8:	9e07      	ldr	r6, [sp, #28]
 80164fa:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8016558 <forward_tree_ensemble_classifier+0x15c>
 80164fe:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8016502:	e9cd 6814 	strd	r6, r8, [sp, #80]	; 0x50
 8016506:	69c6      	ldr	r6, [r0, #28]
 8016508:	f8cd c000 	str.w	ip, [sp]
 801650c:	2e00      	cmp	r6, #0
 801650e:	bf08      	it	eq
 8016510:	4676      	moveq	r6, lr
 8016512:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
 8016516:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016518:	941c      	str	r4, [sp, #112]	; 0x70
 801651a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801651c:	941d      	str	r4, [sp, #116]	; 0x74
 801651e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8016520:	941e      	str	r4, [sp, #120]	; 0x78
 8016522:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8016524:	f890 0020 	ldrb.w	r0, [r0, #32]
 8016528:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
 801652c:	f3c5 15c6 	ubfx	r5, r5, #7, #7
 8016530:	a809      	add	r0, sp, #36	; 0x24
 8016532:	e9cd a51a 	strd	sl, r5, [sp, #104]	; 0x68
 8016536:	970c      	str	r7, [sp, #48]	; 0x30
 8016538:	941f      	str	r4, [sp, #124]	; 0x7c
 801653a:	f7ff fdd1 	bl	80160e0 <tree_ensemble_classifier_decoder>
 801653e:	b021      	add	sp, #132	; 0x84
 8016540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016544:	4621      	mov	r1, r4
 8016546:	e770      	b.n	801642a <forward_tree_ensemble_classifier+0x2e>
 8016548:	685b      	ldr	r3, [r3, #4]
 801654a:	deff      	udf	#255	; 0xff
 801654c:	699b      	ldr	r3, [r3, #24]
 801654e:	deff      	udf	#255	; 0xff
 8016550:	2300      	movs	r3, #0
 8016552:	685b      	ldr	r3, [r3, #4]
 8016554:	deff      	udf	#255	; 0xff
 8016556:	bf00      	nop
 8016558:	08015fe1 	.word	0x08015fe1

0801655c <forward_zipmap>:
 801655c:	6983      	ldr	r3, [r0, #24]
 801655e:	881a      	ldrh	r2, [r3, #0]
 8016560:	2a00      	cmp	r2, #0
 8016562:	d047      	beq.n	80165f4 <forward_zipmap+0x98>
 8016564:	b470      	push	{r4, r5, r6}
 8016566:	685d      	ldr	r5, [r3, #4]
 8016568:	686b      	ldr	r3, [r5, #4]
 801656a:	b103      	cbz	r3, 801656e <forward_zipmap+0x12>
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	2a01      	cmp	r2, #1
 8016570:	f000 8094 	beq.w	801669c <forward_zipmap+0x140>
 8016574:	6929      	ldr	r1, [r5, #16]
 8016576:	2900      	cmp	r1, #0
 8016578:	f000 808c 	beq.w	8016694 <forward_zipmap+0x138>
 801657c:	680c      	ldr	r4, [r1, #0]
 801657e:	68d8      	ldr	r0, [r3, #12]
 8016580:	6999      	ldr	r1, [r3, #24]
 8016582:	69a3      	ldr	r3, [r4, #24]
 8016584:	68c4      	ldr	r4, [r0, #12]
 8016586:	6840      	ldr	r0, [r0, #4]
 8016588:	6889      	ldr	r1, [r1, #8]
 801658a:	689b      	ldr	r3, [r3, #8]
 801658c:	2a02      	cmp	r2, #2
 801658e:	fb00 f404 	mul.w	r4, r0, r4
 8016592:	f000 8086 	beq.w	80166a2 <forward_zipmap+0x146>
 8016596:	69ea      	ldr	r2, [r5, #28]
 8016598:	2a00      	cmp	r2, #0
 801659a:	d07d      	beq.n	8016698 <forward_zipmap+0x13c>
 801659c:	6812      	ldr	r2, [r2, #0]
 801659e:	6990      	ldr	r0, [r2, #24]
 80165a0:	68d5      	ldr	r5, [r2, #12]
 80165a2:	6802      	ldr	r2, [r0, #0]
 80165a4:	686d      	ldr	r5, [r5, #4]
 80165a6:	6886      	ldr	r6, [r0, #8]
 80165a8:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80165ac:	b304      	cbz	r4, 80165f0 <forward_zipmap+0x94>
 80165ae:	2a10      	cmp	r2, #16
 80165b0:	d022      	beq.n	80165f8 <forward_zipmap+0x9c>
 80165b2:	2a08      	cmp	r2, #8
 80165b4:	d03f      	beq.n	8016636 <forward_zipmap+0xda>
 80165b6:	2000      	movs	r0, #0
 80165b8:	4684      	mov	ip, r0
 80165ba:	4285      	cmp	r5, r0
 80165bc:	bf14      	ite	ne
 80165be:	4602      	movne	r2, r0
 80165c0:	2200      	moveq	r2, #0
 80165c2:	f103 0308 	add.w	r3, r3, #8
 80165c6:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80165ca:	ee07 2a90 	vmov	s15, r2
 80165ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80165d2:	f10c 0c01 	add.w	ip, ip, #1
 80165d6:	ee17 2a90 	vmov	r2, s15
 80165da:	f843 2c08 	str.w	r2, [r3, #-8]
 80165de:	f851 2b04 	ldr.w	r2, [r1], #4
 80165e2:	f843 2c04 	str.w	r2, [r3, #-4]
 80165e6:	bf14      	ite	ne
 80165e8:	3001      	addne	r0, #1
 80165ea:	2001      	moveq	r0, #1
 80165ec:	4564      	cmp	r4, ip
 80165ee:	d1e4      	bne.n	80165ba <forward_zipmap+0x5e>
 80165f0:	bc70      	pop	{r4, r5, r6}
 80165f2:	4770      	bx	lr
 80165f4:	6853      	ldr	r3, [r2, #4]
 80165f6:	deff      	udf	#255	; 0xff
 80165f8:	2000      	movs	r0, #0
 80165fa:	4684      	mov	ip, r0
 80165fc:	4285      	cmp	r5, r0
 80165fe:	bf14      	ite	ne
 8016600:	4602      	movne	r2, r0
 8016602:	2200      	moveq	r2, #0
 8016604:	f103 0308 	add.w	r3, r3, #8
 8016608:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801660c:	ee07 2a90 	vmov	s15, r2
 8016610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016614:	f10c 0c01 	add.w	ip, ip, #1
 8016618:	ee17 2a90 	vmov	r2, s15
 801661c:	f843 2c08 	str.w	r2, [r3, #-8]
 8016620:	f851 2b04 	ldr.w	r2, [r1], #4
 8016624:	f843 2c04 	str.w	r2, [r3, #-4]
 8016628:	bf14      	ite	ne
 801662a:	3001      	addne	r0, #1
 801662c:	2001      	moveq	r0, #1
 801662e:	4564      	cmp	r4, ip
 8016630:	d1e4      	bne.n	80165fc <forward_zipmap+0xa0>
 8016632:	bc70      	pop	{r4, r5, r6}
 8016634:	4770      	bx	lr
 8016636:	2200      	movs	r2, #0
 8016638:	4610      	mov	r0, r2
 801663a:	4295      	cmp	r5, r2
 801663c:	f100 0001 	add.w	r0, r0, #1
 8016640:	d017      	beq.n	8016672 <forward_zipmap+0x116>
 8016642:	f816 c002 	ldrb.w	ip, [r6, r2]
 8016646:	ee07 ca90 	vmov	s15, ip
 801664a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801664e:	4284      	cmp	r4, r0
 8016650:	ee17 ca90 	vmov	ip, s15
 8016654:	f8c3 c000 	str.w	ip, [r3]
 8016658:	f851 cb04 	ldr.w	ip, [r1], #4
 801665c:	f8c3 c004 	str.w	ip, [r3, #4]
 8016660:	f102 0201 	add.w	r2, r2, #1
 8016664:	f103 0308 	add.w	r3, r3, #8
 8016668:	d0c2      	beq.n	80165f0 <forward_zipmap+0x94>
 801666a:	4295      	cmp	r5, r2
 801666c:	f100 0001 	add.w	r0, r0, #1
 8016670:	d1e7      	bne.n	8016642 <forward_zipmap+0xe6>
 8016672:	7832      	ldrb	r2, [r6, #0]
 8016674:	ee07 2a90 	vmov	s15, r2
 8016678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801667c:	4284      	cmp	r4, r0
 801667e:	ee17 2a90 	vmov	r2, s15
 8016682:	601a      	str	r2, [r3, #0]
 8016684:	f851 2b04 	ldr.w	r2, [r1], #4
 8016688:	605a      	str	r2, [r3, #4]
 801668a:	f103 0308 	add.w	r3, r3, #8
 801668e:	d0af      	beq.n	80165f0 <forward_zipmap+0x94>
 8016690:	2201      	movs	r2, #1
 8016692:	e7d2      	b.n	801663a <forward_zipmap+0xde>
 8016694:	698b      	ldr	r3, [r1, #24]
 8016696:	deff      	udf	#255	; 0xff
 8016698:	68d3      	ldr	r3, [r2, #12]
 801669a:	deff      	udf	#255	; 0xff
 801669c:	2300      	movs	r3, #0
 801669e:	685b      	ldr	r3, [r3, #4]
 80166a0:	deff      	udf	#255	; 0xff
 80166a2:	2300      	movs	r3, #0
 80166a4:	685b      	ldr	r3, [r3, #4]
 80166a6:	deff      	udf	#255	; 0xff

080166a8 <ai_check_custom_types>:
 80166a8:	b082      	sub	sp, #8
 80166aa:	4b13      	ldr	r3, [pc, #76]	; (80166f8 <ai_check_custom_types+0x50>)
 80166ac:	9301      	str	r3, [sp, #4]
 80166ae:	b118      	cbz	r0, 80166b8 <ai_check_custom_types+0x10>
 80166b0:	7803      	ldrb	r3, [r0, #0]
 80166b2:	2b03      	cmp	r3, #3
 80166b4:	d002      	beq.n	80166bc <ai_check_custom_types+0x14>
 80166b6:	2000      	movs	r0, #0
 80166b8:	b002      	add	sp, #8
 80166ba:	4770      	bx	lr
 80166bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80166c0:	4293      	cmp	r3, r2
 80166c2:	d004      	beq.n	80166ce <ai_check_custom_types+0x26>
 80166c4:	2001      	movs	r0, #1
 80166c6:	f080 0001 	eor.w	r0, r0, #1
 80166ca:	b002      	add	sp, #8
 80166cc:	4770      	bx	lr
 80166ce:	7842      	ldrb	r2, [r0, #1]
 80166d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80166d4:	429a      	cmp	r2, r3
 80166d6:	f100 0001 	add.w	r0, r0, #1
 80166da:	d1f3      	bne.n	80166c4 <ai_check_custom_types+0x1c>
 80166dc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80166e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d1ed      	bne.n	80166c4 <ai_check_custom_types+0x1c>
 80166e8:	7842      	ldrb	r2, [r0, #1]
 80166ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80166ee:	429a      	cmp	r2, r3
 80166f0:	d1e8      	bne.n	80166c4 <ai_check_custom_types+0x1c>
 80166f2:	2000      	movs	r0, #0
 80166f4:	e7e7      	b.n	80166c6 <ai_check_custom_types+0x1e>
 80166f6:	bf00      	nop
 80166f8:	84048403 	.word	0x84048403

080166fc <ai_layers_init_all>:
 80166fc:	4601      	mov	r1, r0
 80166fe:	2000      	movs	r0, #0
 8016700:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8016702:	b143      	cbz	r3, 8016716 <ai_layers_init_all+0x1a>
 8016704:	691a      	ldr	r2, [r3, #16]
 8016706:	60d9      	str	r1, [r3, #12]
 8016708:	429a      	cmp	r2, r3
 801670a:	f100 0001 	add.w	r0, r0, #1
 801670e:	d002      	beq.n	8016716 <ai_layers_init_all+0x1a>
 8016710:	b10a      	cbz	r2, 8016716 <ai_layers_init_all+0x1a>
 8016712:	4613      	mov	r3, r2
 8016714:	e7f5      	b.n	8016702 <ai_layers_init_all+0x6>
 8016716:	4770      	bx	lr

08016718 <ai_layers_post_init_all>:
 8016718:	b538      	push	{r3, r4, r5, lr}
 801671a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801671c:	2500      	movs	r5, #0
 801671e:	b16c      	cbz	r4, 801673c <ai_layers_post_init_all+0x24>
 8016720:	6863      	ldr	r3, [r4, #4]
 8016722:	07db      	lsls	r3, r3, #31
 8016724:	d504      	bpl.n	8016730 <ai_layers_post_init_all+0x18>
 8016726:	6a23      	ldr	r3, [r4, #32]
 8016728:	4620      	mov	r0, r4
 801672a:	b10b      	cbz	r3, 8016730 <ai_layers_post_init_all+0x18>
 801672c:	4798      	blx	r3
 801672e:	3501      	adds	r5, #1
 8016730:	6923      	ldr	r3, [r4, #16]
 8016732:	42a3      	cmp	r3, r4
 8016734:	d002      	beq.n	801673c <ai_layers_post_init_all+0x24>
 8016736:	b10b      	cbz	r3, 801673c <ai_layers_post_init_all+0x24>
 8016738:	461c      	mov	r4, r3
 801673a:	e7f0      	b.n	801671e <ai_layers_post_init_all+0x6>
 801673c:	4628      	mov	r0, r5
 801673e:	bd38      	pop	{r3, r4, r5, pc}

08016740 <ai_layers_forward_all>:
 8016740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016744:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8016748:	4604      	mov	r4, r0
 801674a:	f1b8 0f00 	cmp.w	r8, #0
 801674e:	d02b      	beq.n	80167a8 <ai_layers_forward_all+0x68>
 8016750:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8016752:	6381      	str	r1, [r0, #56]	; 0x38
 8016754:	b321      	cbz	r1, 80167a0 <ai_layers_forward_all+0x60>
 8016756:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8016758:	2001      	movs	r0, #1
 801675a:	47c0      	blx	r8
 801675c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801675e:	b1fe      	cbz	r6, 80167a0 <ai_layers_forward_all+0x60>
 8016760:	2700      	movs	r7, #0
 8016762:	4631      	mov	r1, r6
 8016764:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016766:	2002      	movs	r0, #2
 8016768:	47c0      	blx	r8
 801676a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801676c:	4628      	mov	r0, r5
 801676e:	696b      	ldr	r3, [r5, #20]
 8016770:	4798      	blx	r3
 8016772:	692e      	ldr	r6, [r5, #16]
 8016774:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016776:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016778:	42b5      	cmp	r5, r6
 801677a:	f04f 0003 	mov.w	r0, #3
 801677e:	d007      	beq.n	8016790 <ai_layers_forward_all+0x50>
 8016780:	47c0      	blx	r8
 8016782:	3701      	adds	r7, #1
 8016784:	63a6      	str	r6, [r4, #56]	; 0x38
 8016786:	2e00      	cmp	r6, #0
 8016788:	d1eb      	bne.n	8016762 <ai_layers_forward_all+0x22>
 801678a:	4638      	mov	r0, r7
 801678c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016790:	2003      	movs	r0, #3
 8016792:	47c0      	blx	r8
 8016794:	2300      	movs	r3, #0
 8016796:	3701      	adds	r7, #1
 8016798:	63a3      	str	r3, [r4, #56]	; 0x38
 801679a:	4638      	mov	r0, r7
 801679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a0:	2700      	movs	r7, #0
 80167a2:	4638      	mov	r0, r7
 80167a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80167aa:	6385      	str	r5, [r0, #56]	; 0x38
 80167ac:	2d00      	cmp	r5, #0
 80167ae:	d0f7      	beq.n	80167a0 <ai_layers_forward_all+0x60>
 80167b0:	4647      	mov	r7, r8
 80167b2:	696b      	ldr	r3, [r5, #20]
 80167b4:	4628      	mov	r0, r5
 80167b6:	4798      	blx	r3
 80167b8:	462b      	mov	r3, r5
 80167ba:	692d      	ldr	r5, [r5, #16]
 80167bc:	429d      	cmp	r5, r3
 80167be:	d004      	beq.n	80167ca <ai_layers_forward_all+0x8a>
 80167c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80167c2:	3701      	adds	r7, #1
 80167c4:	2d00      	cmp	r5, #0
 80167c6:	d1f4      	bne.n	80167b2 <ai_layers_forward_all+0x72>
 80167c8:	e7df      	b.n	801678a <ai_layers_forward_all+0x4a>
 80167ca:	2300      	movs	r3, #0
 80167cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80167ce:	3701      	adds	r7, #1
 80167d0:	e7db      	b.n	801678a <ai_layers_forward_all+0x4a>
 80167d2:	bf00      	nop

080167d4 <ai_version_get>:
 80167d4:	0212      	lsls	r2, r2, #8
 80167d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80167da:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80167de:	4770      	bx	lr

080167e0 <get_tensor_byte_size>:
 80167e0:	b410      	push	{r4}
 80167e2:	6983      	ldr	r3, [r0, #24]
 80167e4:	68c4      	ldr	r4, [r0, #12]
 80167e6:	6941      	ldr	r1, [r0, #20]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	68e0      	ldr	r0, [r4, #12]
 80167ec:	4a07      	ldr	r2, [pc, #28]	; (801680c <get_tensor_byte_size+0x2c>)
 80167ee:	68c9      	ldr	r1, [r1, #12]
 80167f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80167f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80167fc:	fb01 f000 	mul.w	r0, r1, r0
 8016800:	4293      	cmp	r3, r2
 8016802:	bf04      	itt	eq
 8016804:	3007      	addeq	r0, #7
 8016806:	08c0      	lsreq	r0, r0, #3
 8016808:	4770      	bx	lr
 801680a:	bf00      	nop
 801680c:	000400c0 	.word	0x000400c0

08016810 <ai_array_to_buffer_fmt>:
 8016810:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8016814:	2b02      	cmp	r3, #2
 8016816:	d050      	beq.n	80168ba <ai_array_to_buffer_fmt+0xaa>
 8016818:	4b2a      	ldr	r3, [pc, #168]	; (80168c4 <ai_array_to_buffer_fmt+0xb4>)
 801681a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 801681e:	429a      	cmp	r2, r3
 8016820:	d00b      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 8016822:	dc1c      	bgt.n	801685e <ai_array_to_buffer_fmt+0x4e>
 8016824:	4b28      	ldr	r3, [pc, #160]	; (80168c8 <ai_array_to_buffer_fmt+0xb8>)
 8016826:	429a      	cmp	r2, r3
 8016828:	d007      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 801682a:	dd0b      	ble.n	8016844 <ai_array_to_buffer_fmt+0x34>
 801682c:	4b27      	ldr	r3, [pc, #156]	; (80168cc <ai_array_to_buffer_fmt+0xbc>)
 801682e:	429a      	cmp	r2, r3
 8016830:	d003      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 8016832:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8016836:	429a      	cmp	r2, r3
 8016838:	d131      	bne.n	801689e <ai_array_to_buffer_fmt+0x8e>
 801683a:	4613      	mov	r3, r2
 801683c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8016840:	4318      	orrs	r0, r3
 8016842:	4770      	bx	lr
 8016844:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8016848:	429a      	cmp	r2, r3
 801684a:	d0f6      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 801684c:	dd2c      	ble.n	80168a8 <ai_array_to_buffer_fmt+0x98>
 801684e:	4b20      	ldr	r3, [pc, #128]	; (80168d0 <ai_array_to_buffer_fmt+0xc0>)
 8016850:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8016854:	429a      	cmp	r2, r3
 8016856:	bf18      	it	ne
 8016858:	2340      	movne	r3, #64	; 0x40
 801685a:	4318      	orrs	r0, r3
 801685c:	4770      	bx	lr
 801685e:	4b1d      	ldr	r3, [pc, #116]	; (80168d4 <ai_array_to_buffer_fmt+0xc4>)
 8016860:	429a      	cmp	r2, r3
 8016862:	d0ea      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 8016864:	dd0e      	ble.n	8016884 <ai_array_to_buffer_fmt+0x74>
 8016866:	4b1c      	ldr	r3, [pc, #112]	; (80168d8 <ai_array_to_buffer_fmt+0xc8>)
 8016868:	429a      	cmp	r2, r3
 801686a:	d0e6      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 801686c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8016870:	429a      	cmp	r2, r3
 8016872:	d0e2      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 8016874:	4b19      	ldr	r3, [pc, #100]	; (80168dc <ai_array_to_buffer_fmt+0xcc>)
 8016876:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801687a:	429a      	cmp	r2, r3
 801687c:	bf18      	it	ne
 801687e:	2340      	movne	r3, #64	; 0x40
 8016880:	4318      	orrs	r0, r3
 8016882:	4770      	bx	lr
 8016884:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8016888:	429a      	cmp	r2, r3
 801688a:	d0d6      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 801688c:	3307      	adds	r3, #7
 801688e:	429a      	cmp	r2, r3
 8016890:	d0d3      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 8016892:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8016896:	429a      	cmp	r2, r3
 8016898:	bf18      	it	ne
 801689a:	2340      	movne	r3, #64	; 0x40
 801689c:	e7ce      	b.n	801683c <ai_array_to_buffer_fmt+0x2c>
 801689e:	4b10      	ldr	r3, [pc, #64]	; (80168e0 <ai_array_to_buffer_fmt+0xd0>)
 80168a0:	429a      	cmp	r2, r3
 80168a2:	bf18      	it	ne
 80168a4:	2340      	movne	r3, #64	; 0x40
 80168a6:	e7c9      	b.n	801683c <ai_array_to_buffer_fmt+0x2c>
 80168a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80168ac:	429a      	cmp	r2, r3
 80168ae:	d0c4      	beq.n	801683a <ai_array_to_buffer_fmt+0x2a>
 80168b0:	3380      	adds	r3, #128	; 0x80
 80168b2:	429a      	cmp	r2, r3
 80168b4:	bf18      	it	ne
 80168b6:	2340      	movne	r3, #64	; 0x40
 80168b8:	e7c0      	b.n	801683c <ai_array_to_buffer_fmt+0x2c>
 80168ba:	4b0a      	ldr	r3, [pc, #40]	; (80168e4 <ai_array_to_buffer_fmt+0xd4>)
 80168bc:	4003      	ands	r3, r0
 80168be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80168c2:	e7bb      	b.n	801683c <ai_array_to_buffer_fmt+0x2c>
 80168c4:	00840040 	.word	0x00840040
 80168c8:	00040840 	.word	0x00040840
 80168cc:	00041040 	.word	0x00041040
 80168d0:	00040447 	.word	0x00040447
 80168d4:	00840840 	.word	0x00840840
 80168d8:	00841040 	.word	0x00841040
 80168dc:	0084084f 	.word	0x0084084f
 80168e0:	0004084f 	.word	0x0004084f
 80168e4:	00803fff 	.word	0x00803fff

080168e8 <ai_array_get_data_byte_size>:
 80168e8:	b169      	cbz	r1, 8016906 <ai_array_get_data_byte_size+0x1e>
 80168ea:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80168ee:	fb02 f101 	mul.w	r1, r2, r1
 80168f2:	1dcb      	adds	r3, r1, #7
 80168f4:	f023 0307 	bic.w	r3, r3, #7
 80168f8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80168fc:	fa23 f000 	lsr.w	r0, r3, r0
 8016900:	3007      	adds	r0, #7
 8016902:	08c0      	lsrs	r0, r0, #3
 8016904:	4770      	bx	lr
 8016906:	4608      	mov	r0, r1
 8016908:	4770      	bx	lr
 801690a:	bf00      	nop

0801690c <__errno>:
 801690c:	4b01      	ldr	r3, [pc, #4]	; (8016914 <__errno+0x8>)
 801690e:	6818      	ldr	r0, [r3, #0]
 8016910:	4770      	bx	lr
 8016912:	bf00      	nop
 8016914:	200009fc 	.word	0x200009fc

08016918 <__libc_init_array>:
 8016918:	b570      	push	{r4, r5, r6, lr}
 801691a:	4d0d      	ldr	r5, [pc, #52]	; (8016950 <__libc_init_array+0x38>)
 801691c:	4c0d      	ldr	r4, [pc, #52]	; (8016954 <__libc_init_array+0x3c>)
 801691e:	1b64      	subs	r4, r4, r5
 8016920:	10a4      	asrs	r4, r4, #2
 8016922:	2600      	movs	r6, #0
 8016924:	42a6      	cmp	r6, r4
 8016926:	d109      	bne.n	801693c <__libc_init_array+0x24>
 8016928:	4d0b      	ldr	r5, [pc, #44]	; (8016958 <__libc_init_array+0x40>)
 801692a:	4c0c      	ldr	r4, [pc, #48]	; (801695c <__libc_init_array+0x44>)
 801692c:	f002 f9a2 	bl	8018c74 <_init>
 8016930:	1b64      	subs	r4, r4, r5
 8016932:	10a4      	asrs	r4, r4, #2
 8016934:	2600      	movs	r6, #0
 8016936:	42a6      	cmp	r6, r4
 8016938:	d105      	bne.n	8016946 <__libc_init_array+0x2e>
 801693a:	bd70      	pop	{r4, r5, r6, pc}
 801693c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016940:	4798      	blx	r3
 8016942:	3601      	adds	r6, #1
 8016944:	e7ee      	b.n	8016924 <__libc_init_array+0xc>
 8016946:	f855 3b04 	ldr.w	r3, [r5], #4
 801694a:	4798      	blx	r3
 801694c:	3601      	adds	r6, #1
 801694e:	e7f2      	b.n	8016936 <__libc_init_array+0x1e>
 8016950:	0802cef8 	.word	0x0802cef8
 8016954:	0802cef8 	.word	0x0802cef8
 8016958:	0802cef8 	.word	0x0802cef8
 801695c:	0802cefc 	.word	0x0802cefc

08016960 <malloc>:
 8016960:	4b02      	ldr	r3, [pc, #8]	; (801696c <malloc+0xc>)
 8016962:	4601      	mov	r1, r0
 8016964:	6818      	ldr	r0, [r3, #0]
 8016966:	f000 b88d 	b.w	8016a84 <_malloc_r>
 801696a:	bf00      	nop
 801696c:	200009fc 	.word	0x200009fc

08016970 <free>:
 8016970:	4b02      	ldr	r3, [pc, #8]	; (801697c <free+0xc>)
 8016972:	4601      	mov	r1, r0
 8016974:	6818      	ldr	r0, [r3, #0]
 8016976:	f000 b819 	b.w	80169ac <_free_r>
 801697a:	bf00      	nop
 801697c:	200009fc 	.word	0x200009fc

08016980 <memcpy>:
 8016980:	440a      	add	r2, r1
 8016982:	4291      	cmp	r1, r2
 8016984:	f100 33ff 	add.w	r3, r0, #4294967295
 8016988:	d100      	bne.n	801698c <memcpy+0xc>
 801698a:	4770      	bx	lr
 801698c:	b510      	push	{r4, lr}
 801698e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016996:	4291      	cmp	r1, r2
 8016998:	d1f9      	bne.n	801698e <memcpy+0xe>
 801699a:	bd10      	pop	{r4, pc}

0801699c <memset>:
 801699c:	4402      	add	r2, r0
 801699e:	4603      	mov	r3, r0
 80169a0:	4293      	cmp	r3, r2
 80169a2:	d100      	bne.n	80169a6 <memset+0xa>
 80169a4:	4770      	bx	lr
 80169a6:	f803 1b01 	strb.w	r1, [r3], #1
 80169aa:	e7f9      	b.n	80169a0 <memset+0x4>

080169ac <_free_r>:
 80169ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80169ae:	2900      	cmp	r1, #0
 80169b0:	d044      	beq.n	8016a3c <_free_r+0x90>
 80169b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169b6:	9001      	str	r0, [sp, #4]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	f1a1 0404 	sub.w	r4, r1, #4
 80169be:	bfb8      	it	lt
 80169c0:	18e4      	addlt	r4, r4, r3
 80169c2:	f000 fc8d 	bl	80172e0 <__malloc_lock>
 80169c6:	4a1e      	ldr	r2, [pc, #120]	; (8016a40 <_free_r+0x94>)
 80169c8:	9801      	ldr	r0, [sp, #4]
 80169ca:	6813      	ldr	r3, [r2, #0]
 80169cc:	b933      	cbnz	r3, 80169dc <_free_r+0x30>
 80169ce:	6063      	str	r3, [r4, #4]
 80169d0:	6014      	str	r4, [r2, #0]
 80169d2:	b003      	add	sp, #12
 80169d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80169d8:	f000 bc88 	b.w	80172ec <__malloc_unlock>
 80169dc:	42a3      	cmp	r3, r4
 80169de:	d908      	bls.n	80169f2 <_free_r+0x46>
 80169e0:	6825      	ldr	r5, [r4, #0]
 80169e2:	1961      	adds	r1, r4, r5
 80169e4:	428b      	cmp	r3, r1
 80169e6:	bf01      	itttt	eq
 80169e8:	6819      	ldreq	r1, [r3, #0]
 80169ea:	685b      	ldreq	r3, [r3, #4]
 80169ec:	1949      	addeq	r1, r1, r5
 80169ee:	6021      	streq	r1, [r4, #0]
 80169f0:	e7ed      	b.n	80169ce <_free_r+0x22>
 80169f2:	461a      	mov	r2, r3
 80169f4:	685b      	ldr	r3, [r3, #4]
 80169f6:	b10b      	cbz	r3, 80169fc <_free_r+0x50>
 80169f8:	42a3      	cmp	r3, r4
 80169fa:	d9fa      	bls.n	80169f2 <_free_r+0x46>
 80169fc:	6811      	ldr	r1, [r2, #0]
 80169fe:	1855      	adds	r5, r2, r1
 8016a00:	42a5      	cmp	r5, r4
 8016a02:	d10b      	bne.n	8016a1c <_free_r+0x70>
 8016a04:	6824      	ldr	r4, [r4, #0]
 8016a06:	4421      	add	r1, r4
 8016a08:	1854      	adds	r4, r2, r1
 8016a0a:	42a3      	cmp	r3, r4
 8016a0c:	6011      	str	r1, [r2, #0]
 8016a0e:	d1e0      	bne.n	80169d2 <_free_r+0x26>
 8016a10:	681c      	ldr	r4, [r3, #0]
 8016a12:	685b      	ldr	r3, [r3, #4]
 8016a14:	6053      	str	r3, [r2, #4]
 8016a16:	4421      	add	r1, r4
 8016a18:	6011      	str	r1, [r2, #0]
 8016a1a:	e7da      	b.n	80169d2 <_free_r+0x26>
 8016a1c:	d902      	bls.n	8016a24 <_free_r+0x78>
 8016a1e:	230c      	movs	r3, #12
 8016a20:	6003      	str	r3, [r0, #0]
 8016a22:	e7d6      	b.n	80169d2 <_free_r+0x26>
 8016a24:	6825      	ldr	r5, [r4, #0]
 8016a26:	1961      	adds	r1, r4, r5
 8016a28:	428b      	cmp	r3, r1
 8016a2a:	bf04      	itt	eq
 8016a2c:	6819      	ldreq	r1, [r3, #0]
 8016a2e:	685b      	ldreq	r3, [r3, #4]
 8016a30:	6063      	str	r3, [r4, #4]
 8016a32:	bf04      	itt	eq
 8016a34:	1949      	addeq	r1, r1, r5
 8016a36:	6021      	streq	r1, [r4, #0]
 8016a38:	6054      	str	r4, [r2, #4]
 8016a3a:	e7ca      	b.n	80169d2 <_free_r+0x26>
 8016a3c:	b003      	add	sp, #12
 8016a3e:	bd30      	pop	{r4, r5, pc}
 8016a40:	20003b30 	.word	0x20003b30

08016a44 <sbrk_aligned>:
 8016a44:	b570      	push	{r4, r5, r6, lr}
 8016a46:	4e0e      	ldr	r6, [pc, #56]	; (8016a80 <sbrk_aligned+0x3c>)
 8016a48:	460c      	mov	r4, r1
 8016a4a:	6831      	ldr	r1, [r6, #0]
 8016a4c:	4605      	mov	r5, r0
 8016a4e:	b911      	cbnz	r1, 8016a56 <sbrk_aligned+0x12>
 8016a50:	f000 f91a 	bl	8016c88 <_sbrk_r>
 8016a54:	6030      	str	r0, [r6, #0]
 8016a56:	4621      	mov	r1, r4
 8016a58:	4628      	mov	r0, r5
 8016a5a:	f000 f915 	bl	8016c88 <_sbrk_r>
 8016a5e:	1c43      	adds	r3, r0, #1
 8016a60:	d00a      	beq.n	8016a78 <sbrk_aligned+0x34>
 8016a62:	1cc4      	adds	r4, r0, #3
 8016a64:	f024 0403 	bic.w	r4, r4, #3
 8016a68:	42a0      	cmp	r0, r4
 8016a6a:	d007      	beq.n	8016a7c <sbrk_aligned+0x38>
 8016a6c:	1a21      	subs	r1, r4, r0
 8016a6e:	4628      	mov	r0, r5
 8016a70:	f000 f90a 	bl	8016c88 <_sbrk_r>
 8016a74:	3001      	adds	r0, #1
 8016a76:	d101      	bne.n	8016a7c <sbrk_aligned+0x38>
 8016a78:	f04f 34ff 	mov.w	r4, #4294967295
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	bd70      	pop	{r4, r5, r6, pc}
 8016a80:	20003b34 	.word	0x20003b34

08016a84 <_malloc_r>:
 8016a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a88:	1ccd      	adds	r5, r1, #3
 8016a8a:	f025 0503 	bic.w	r5, r5, #3
 8016a8e:	3508      	adds	r5, #8
 8016a90:	2d0c      	cmp	r5, #12
 8016a92:	bf38      	it	cc
 8016a94:	250c      	movcc	r5, #12
 8016a96:	2d00      	cmp	r5, #0
 8016a98:	4607      	mov	r7, r0
 8016a9a:	db01      	blt.n	8016aa0 <_malloc_r+0x1c>
 8016a9c:	42a9      	cmp	r1, r5
 8016a9e:	d905      	bls.n	8016aac <_malloc_r+0x28>
 8016aa0:	230c      	movs	r3, #12
 8016aa2:	603b      	str	r3, [r7, #0]
 8016aa4:	2600      	movs	r6, #0
 8016aa6:	4630      	mov	r0, r6
 8016aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aac:	4e2e      	ldr	r6, [pc, #184]	; (8016b68 <_malloc_r+0xe4>)
 8016aae:	f000 fc17 	bl	80172e0 <__malloc_lock>
 8016ab2:	6833      	ldr	r3, [r6, #0]
 8016ab4:	461c      	mov	r4, r3
 8016ab6:	bb34      	cbnz	r4, 8016b06 <_malloc_r+0x82>
 8016ab8:	4629      	mov	r1, r5
 8016aba:	4638      	mov	r0, r7
 8016abc:	f7ff ffc2 	bl	8016a44 <sbrk_aligned>
 8016ac0:	1c43      	adds	r3, r0, #1
 8016ac2:	4604      	mov	r4, r0
 8016ac4:	d14d      	bne.n	8016b62 <_malloc_r+0xde>
 8016ac6:	6834      	ldr	r4, [r6, #0]
 8016ac8:	4626      	mov	r6, r4
 8016aca:	2e00      	cmp	r6, #0
 8016acc:	d140      	bne.n	8016b50 <_malloc_r+0xcc>
 8016ace:	6823      	ldr	r3, [r4, #0]
 8016ad0:	4631      	mov	r1, r6
 8016ad2:	4638      	mov	r0, r7
 8016ad4:	eb04 0803 	add.w	r8, r4, r3
 8016ad8:	f000 f8d6 	bl	8016c88 <_sbrk_r>
 8016adc:	4580      	cmp	r8, r0
 8016ade:	d13a      	bne.n	8016b56 <_malloc_r+0xd2>
 8016ae0:	6821      	ldr	r1, [r4, #0]
 8016ae2:	3503      	adds	r5, #3
 8016ae4:	1a6d      	subs	r5, r5, r1
 8016ae6:	f025 0503 	bic.w	r5, r5, #3
 8016aea:	3508      	adds	r5, #8
 8016aec:	2d0c      	cmp	r5, #12
 8016aee:	bf38      	it	cc
 8016af0:	250c      	movcc	r5, #12
 8016af2:	4629      	mov	r1, r5
 8016af4:	4638      	mov	r0, r7
 8016af6:	f7ff ffa5 	bl	8016a44 <sbrk_aligned>
 8016afa:	3001      	adds	r0, #1
 8016afc:	d02b      	beq.n	8016b56 <_malloc_r+0xd2>
 8016afe:	6823      	ldr	r3, [r4, #0]
 8016b00:	442b      	add	r3, r5
 8016b02:	6023      	str	r3, [r4, #0]
 8016b04:	e00e      	b.n	8016b24 <_malloc_r+0xa0>
 8016b06:	6822      	ldr	r2, [r4, #0]
 8016b08:	1b52      	subs	r2, r2, r5
 8016b0a:	d41e      	bmi.n	8016b4a <_malloc_r+0xc6>
 8016b0c:	2a0b      	cmp	r2, #11
 8016b0e:	d916      	bls.n	8016b3e <_malloc_r+0xba>
 8016b10:	1961      	adds	r1, r4, r5
 8016b12:	42a3      	cmp	r3, r4
 8016b14:	6025      	str	r5, [r4, #0]
 8016b16:	bf18      	it	ne
 8016b18:	6059      	strne	r1, [r3, #4]
 8016b1a:	6863      	ldr	r3, [r4, #4]
 8016b1c:	bf08      	it	eq
 8016b1e:	6031      	streq	r1, [r6, #0]
 8016b20:	5162      	str	r2, [r4, r5]
 8016b22:	604b      	str	r3, [r1, #4]
 8016b24:	4638      	mov	r0, r7
 8016b26:	f104 060b 	add.w	r6, r4, #11
 8016b2a:	f000 fbdf 	bl	80172ec <__malloc_unlock>
 8016b2e:	f026 0607 	bic.w	r6, r6, #7
 8016b32:	1d23      	adds	r3, r4, #4
 8016b34:	1af2      	subs	r2, r6, r3
 8016b36:	d0b6      	beq.n	8016aa6 <_malloc_r+0x22>
 8016b38:	1b9b      	subs	r3, r3, r6
 8016b3a:	50a3      	str	r3, [r4, r2]
 8016b3c:	e7b3      	b.n	8016aa6 <_malloc_r+0x22>
 8016b3e:	6862      	ldr	r2, [r4, #4]
 8016b40:	42a3      	cmp	r3, r4
 8016b42:	bf0c      	ite	eq
 8016b44:	6032      	streq	r2, [r6, #0]
 8016b46:	605a      	strne	r2, [r3, #4]
 8016b48:	e7ec      	b.n	8016b24 <_malloc_r+0xa0>
 8016b4a:	4623      	mov	r3, r4
 8016b4c:	6864      	ldr	r4, [r4, #4]
 8016b4e:	e7b2      	b.n	8016ab6 <_malloc_r+0x32>
 8016b50:	4634      	mov	r4, r6
 8016b52:	6876      	ldr	r6, [r6, #4]
 8016b54:	e7b9      	b.n	8016aca <_malloc_r+0x46>
 8016b56:	230c      	movs	r3, #12
 8016b58:	603b      	str	r3, [r7, #0]
 8016b5a:	4638      	mov	r0, r7
 8016b5c:	f000 fbc6 	bl	80172ec <__malloc_unlock>
 8016b60:	e7a1      	b.n	8016aa6 <_malloc_r+0x22>
 8016b62:	6025      	str	r5, [r4, #0]
 8016b64:	e7de      	b.n	8016b24 <_malloc_r+0xa0>
 8016b66:	bf00      	nop
 8016b68:	20003b30 	.word	0x20003b30

08016b6c <iprintf>:
 8016b6c:	b40f      	push	{r0, r1, r2, r3}
 8016b6e:	4b0a      	ldr	r3, [pc, #40]	; (8016b98 <iprintf+0x2c>)
 8016b70:	b513      	push	{r0, r1, r4, lr}
 8016b72:	681c      	ldr	r4, [r3, #0]
 8016b74:	b124      	cbz	r4, 8016b80 <iprintf+0x14>
 8016b76:	69a3      	ldr	r3, [r4, #24]
 8016b78:	b913      	cbnz	r3, 8016b80 <iprintf+0x14>
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	f000 faaa 	bl	80170d4 <__sinit>
 8016b80:	ab05      	add	r3, sp, #20
 8016b82:	9a04      	ldr	r2, [sp, #16]
 8016b84:	68a1      	ldr	r1, [r4, #8]
 8016b86:	9301      	str	r3, [sp, #4]
 8016b88:	4620      	mov	r0, r4
 8016b8a:	f000 fd69 	bl	8017660 <_vfiprintf_r>
 8016b8e:	b002      	add	sp, #8
 8016b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b94:	b004      	add	sp, #16
 8016b96:	4770      	bx	lr
 8016b98:	200009fc 	.word	0x200009fc

08016b9c <_puts_r>:
 8016b9c:	b570      	push	{r4, r5, r6, lr}
 8016b9e:	460e      	mov	r6, r1
 8016ba0:	4605      	mov	r5, r0
 8016ba2:	b118      	cbz	r0, 8016bac <_puts_r+0x10>
 8016ba4:	6983      	ldr	r3, [r0, #24]
 8016ba6:	b90b      	cbnz	r3, 8016bac <_puts_r+0x10>
 8016ba8:	f000 fa94 	bl	80170d4 <__sinit>
 8016bac:	69ab      	ldr	r3, [r5, #24]
 8016bae:	68ac      	ldr	r4, [r5, #8]
 8016bb0:	b913      	cbnz	r3, 8016bb8 <_puts_r+0x1c>
 8016bb2:	4628      	mov	r0, r5
 8016bb4:	f000 fa8e 	bl	80170d4 <__sinit>
 8016bb8:	4b2c      	ldr	r3, [pc, #176]	; (8016c6c <_puts_r+0xd0>)
 8016bba:	429c      	cmp	r4, r3
 8016bbc:	d120      	bne.n	8016c00 <_puts_r+0x64>
 8016bbe:	686c      	ldr	r4, [r5, #4]
 8016bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bc2:	07db      	lsls	r3, r3, #31
 8016bc4:	d405      	bmi.n	8016bd2 <_puts_r+0x36>
 8016bc6:	89a3      	ldrh	r3, [r4, #12]
 8016bc8:	0598      	lsls	r0, r3, #22
 8016bca:	d402      	bmi.n	8016bd2 <_puts_r+0x36>
 8016bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bce:	f000 fb1f 	bl	8017210 <__retarget_lock_acquire_recursive>
 8016bd2:	89a3      	ldrh	r3, [r4, #12]
 8016bd4:	0719      	lsls	r1, r3, #28
 8016bd6:	d51d      	bpl.n	8016c14 <_puts_r+0x78>
 8016bd8:	6923      	ldr	r3, [r4, #16]
 8016bda:	b1db      	cbz	r3, 8016c14 <_puts_r+0x78>
 8016bdc:	3e01      	subs	r6, #1
 8016bde:	68a3      	ldr	r3, [r4, #8]
 8016be0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016be4:	3b01      	subs	r3, #1
 8016be6:	60a3      	str	r3, [r4, #8]
 8016be8:	bb39      	cbnz	r1, 8016c3a <_puts_r+0x9e>
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	da38      	bge.n	8016c60 <_puts_r+0xc4>
 8016bee:	4622      	mov	r2, r4
 8016bf0:	210a      	movs	r1, #10
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	f000 f894 	bl	8016d20 <__swbuf_r>
 8016bf8:	3001      	adds	r0, #1
 8016bfa:	d011      	beq.n	8016c20 <_puts_r+0x84>
 8016bfc:	250a      	movs	r5, #10
 8016bfe:	e011      	b.n	8016c24 <_puts_r+0x88>
 8016c00:	4b1b      	ldr	r3, [pc, #108]	; (8016c70 <_puts_r+0xd4>)
 8016c02:	429c      	cmp	r4, r3
 8016c04:	d101      	bne.n	8016c0a <_puts_r+0x6e>
 8016c06:	68ac      	ldr	r4, [r5, #8]
 8016c08:	e7da      	b.n	8016bc0 <_puts_r+0x24>
 8016c0a:	4b1a      	ldr	r3, [pc, #104]	; (8016c74 <_puts_r+0xd8>)
 8016c0c:	429c      	cmp	r4, r3
 8016c0e:	bf08      	it	eq
 8016c10:	68ec      	ldreq	r4, [r5, #12]
 8016c12:	e7d5      	b.n	8016bc0 <_puts_r+0x24>
 8016c14:	4621      	mov	r1, r4
 8016c16:	4628      	mov	r0, r5
 8016c18:	f000 f8d4 	bl	8016dc4 <__swsetup_r>
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	d0dd      	beq.n	8016bdc <_puts_r+0x40>
 8016c20:	f04f 35ff 	mov.w	r5, #4294967295
 8016c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c26:	07da      	lsls	r2, r3, #31
 8016c28:	d405      	bmi.n	8016c36 <_puts_r+0x9a>
 8016c2a:	89a3      	ldrh	r3, [r4, #12]
 8016c2c:	059b      	lsls	r3, r3, #22
 8016c2e:	d402      	bmi.n	8016c36 <_puts_r+0x9a>
 8016c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c32:	f000 faee 	bl	8017212 <__retarget_lock_release_recursive>
 8016c36:	4628      	mov	r0, r5
 8016c38:	bd70      	pop	{r4, r5, r6, pc}
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	da04      	bge.n	8016c48 <_puts_r+0xac>
 8016c3e:	69a2      	ldr	r2, [r4, #24]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	dc06      	bgt.n	8016c52 <_puts_r+0xb6>
 8016c44:	290a      	cmp	r1, #10
 8016c46:	d004      	beq.n	8016c52 <_puts_r+0xb6>
 8016c48:	6823      	ldr	r3, [r4, #0]
 8016c4a:	1c5a      	adds	r2, r3, #1
 8016c4c:	6022      	str	r2, [r4, #0]
 8016c4e:	7019      	strb	r1, [r3, #0]
 8016c50:	e7c5      	b.n	8016bde <_puts_r+0x42>
 8016c52:	4622      	mov	r2, r4
 8016c54:	4628      	mov	r0, r5
 8016c56:	f000 f863 	bl	8016d20 <__swbuf_r>
 8016c5a:	3001      	adds	r0, #1
 8016c5c:	d1bf      	bne.n	8016bde <_puts_r+0x42>
 8016c5e:	e7df      	b.n	8016c20 <_puts_r+0x84>
 8016c60:	6823      	ldr	r3, [r4, #0]
 8016c62:	250a      	movs	r5, #10
 8016c64:	1c5a      	adds	r2, r3, #1
 8016c66:	6022      	str	r2, [r4, #0]
 8016c68:	701d      	strb	r5, [r3, #0]
 8016c6a:	e7db      	b.n	8016c24 <_puts_r+0x88>
 8016c6c:	0802ce54 	.word	0x0802ce54
 8016c70:	0802ce74 	.word	0x0802ce74
 8016c74:	0802ce34 	.word	0x0802ce34

08016c78 <puts>:
 8016c78:	4b02      	ldr	r3, [pc, #8]	; (8016c84 <puts+0xc>)
 8016c7a:	4601      	mov	r1, r0
 8016c7c:	6818      	ldr	r0, [r3, #0]
 8016c7e:	f7ff bf8d 	b.w	8016b9c <_puts_r>
 8016c82:	bf00      	nop
 8016c84:	200009fc 	.word	0x200009fc

08016c88 <_sbrk_r>:
 8016c88:	b538      	push	{r3, r4, r5, lr}
 8016c8a:	4d06      	ldr	r5, [pc, #24]	; (8016ca4 <_sbrk_r+0x1c>)
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	4604      	mov	r4, r0
 8016c90:	4608      	mov	r0, r1
 8016c92:	602b      	str	r3, [r5, #0]
 8016c94:	f7eb fa02 	bl	800209c <_sbrk>
 8016c98:	1c43      	adds	r3, r0, #1
 8016c9a:	d102      	bne.n	8016ca2 <_sbrk_r+0x1a>
 8016c9c:	682b      	ldr	r3, [r5, #0]
 8016c9e:	b103      	cbz	r3, 8016ca2 <_sbrk_r+0x1a>
 8016ca0:	6023      	str	r3, [r4, #0]
 8016ca2:	bd38      	pop	{r3, r4, r5, pc}
 8016ca4:	20003b3c 	.word	0x20003b3c

08016ca8 <sniprintf>:
 8016ca8:	b40c      	push	{r2, r3}
 8016caa:	b530      	push	{r4, r5, lr}
 8016cac:	4b17      	ldr	r3, [pc, #92]	; (8016d0c <sniprintf+0x64>)
 8016cae:	1e0c      	subs	r4, r1, #0
 8016cb0:	681d      	ldr	r5, [r3, #0]
 8016cb2:	b09d      	sub	sp, #116	; 0x74
 8016cb4:	da08      	bge.n	8016cc8 <sniprintf+0x20>
 8016cb6:	238b      	movs	r3, #139	; 0x8b
 8016cb8:	602b      	str	r3, [r5, #0]
 8016cba:	f04f 30ff 	mov.w	r0, #4294967295
 8016cbe:	b01d      	add	sp, #116	; 0x74
 8016cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016cc4:	b002      	add	sp, #8
 8016cc6:	4770      	bx	lr
 8016cc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016ccc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016cd0:	bf14      	ite	ne
 8016cd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016cd6:	4623      	moveq	r3, r4
 8016cd8:	9304      	str	r3, [sp, #16]
 8016cda:	9307      	str	r3, [sp, #28]
 8016cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ce0:	9002      	str	r0, [sp, #8]
 8016ce2:	9006      	str	r0, [sp, #24]
 8016ce4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016ce8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016cea:	ab21      	add	r3, sp, #132	; 0x84
 8016cec:	a902      	add	r1, sp, #8
 8016cee:	4628      	mov	r0, r5
 8016cf0:	9301      	str	r3, [sp, #4]
 8016cf2:	f000 fb8b 	bl	801740c <_svfiprintf_r>
 8016cf6:	1c43      	adds	r3, r0, #1
 8016cf8:	bfbc      	itt	lt
 8016cfa:	238b      	movlt	r3, #139	; 0x8b
 8016cfc:	602b      	strlt	r3, [r5, #0]
 8016cfe:	2c00      	cmp	r4, #0
 8016d00:	d0dd      	beq.n	8016cbe <sniprintf+0x16>
 8016d02:	9b02      	ldr	r3, [sp, #8]
 8016d04:	2200      	movs	r2, #0
 8016d06:	701a      	strb	r2, [r3, #0]
 8016d08:	e7d9      	b.n	8016cbe <sniprintf+0x16>
 8016d0a:	bf00      	nop
 8016d0c:	200009fc 	.word	0x200009fc

08016d10 <strcpy>:
 8016d10:	4603      	mov	r3, r0
 8016d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d16:	f803 2b01 	strb.w	r2, [r3], #1
 8016d1a:	2a00      	cmp	r2, #0
 8016d1c:	d1f9      	bne.n	8016d12 <strcpy+0x2>
 8016d1e:	4770      	bx	lr

08016d20 <__swbuf_r>:
 8016d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d22:	460e      	mov	r6, r1
 8016d24:	4614      	mov	r4, r2
 8016d26:	4605      	mov	r5, r0
 8016d28:	b118      	cbz	r0, 8016d32 <__swbuf_r+0x12>
 8016d2a:	6983      	ldr	r3, [r0, #24]
 8016d2c:	b90b      	cbnz	r3, 8016d32 <__swbuf_r+0x12>
 8016d2e:	f000 f9d1 	bl	80170d4 <__sinit>
 8016d32:	4b21      	ldr	r3, [pc, #132]	; (8016db8 <__swbuf_r+0x98>)
 8016d34:	429c      	cmp	r4, r3
 8016d36:	d12b      	bne.n	8016d90 <__swbuf_r+0x70>
 8016d38:	686c      	ldr	r4, [r5, #4]
 8016d3a:	69a3      	ldr	r3, [r4, #24]
 8016d3c:	60a3      	str	r3, [r4, #8]
 8016d3e:	89a3      	ldrh	r3, [r4, #12]
 8016d40:	071a      	lsls	r2, r3, #28
 8016d42:	d52f      	bpl.n	8016da4 <__swbuf_r+0x84>
 8016d44:	6923      	ldr	r3, [r4, #16]
 8016d46:	b36b      	cbz	r3, 8016da4 <__swbuf_r+0x84>
 8016d48:	6923      	ldr	r3, [r4, #16]
 8016d4a:	6820      	ldr	r0, [r4, #0]
 8016d4c:	1ac0      	subs	r0, r0, r3
 8016d4e:	6963      	ldr	r3, [r4, #20]
 8016d50:	b2f6      	uxtb	r6, r6
 8016d52:	4283      	cmp	r3, r0
 8016d54:	4637      	mov	r7, r6
 8016d56:	dc04      	bgt.n	8016d62 <__swbuf_r+0x42>
 8016d58:	4621      	mov	r1, r4
 8016d5a:	4628      	mov	r0, r5
 8016d5c:	f000 f926 	bl	8016fac <_fflush_r>
 8016d60:	bb30      	cbnz	r0, 8016db0 <__swbuf_r+0x90>
 8016d62:	68a3      	ldr	r3, [r4, #8]
 8016d64:	3b01      	subs	r3, #1
 8016d66:	60a3      	str	r3, [r4, #8]
 8016d68:	6823      	ldr	r3, [r4, #0]
 8016d6a:	1c5a      	adds	r2, r3, #1
 8016d6c:	6022      	str	r2, [r4, #0]
 8016d6e:	701e      	strb	r6, [r3, #0]
 8016d70:	6963      	ldr	r3, [r4, #20]
 8016d72:	3001      	adds	r0, #1
 8016d74:	4283      	cmp	r3, r0
 8016d76:	d004      	beq.n	8016d82 <__swbuf_r+0x62>
 8016d78:	89a3      	ldrh	r3, [r4, #12]
 8016d7a:	07db      	lsls	r3, r3, #31
 8016d7c:	d506      	bpl.n	8016d8c <__swbuf_r+0x6c>
 8016d7e:	2e0a      	cmp	r6, #10
 8016d80:	d104      	bne.n	8016d8c <__swbuf_r+0x6c>
 8016d82:	4621      	mov	r1, r4
 8016d84:	4628      	mov	r0, r5
 8016d86:	f000 f911 	bl	8016fac <_fflush_r>
 8016d8a:	b988      	cbnz	r0, 8016db0 <__swbuf_r+0x90>
 8016d8c:	4638      	mov	r0, r7
 8016d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d90:	4b0a      	ldr	r3, [pc, #40]	; (8016dbc <__swbuf_r+0x9c>)
 8016d92:	429c      	cmp	r4, r3
 8016d94:	d101      	bne.n	8016d9a <__swbuf_r+0x7a>
 8016d96:	68ac      	ldr	r4, [r5, #8]
 8016d98:	e7cf      	b.n	8016d3a <__swbuf_r+0x1a>
 8016d9a:	4b09      	ldr	r3, [pc, #36]	; (8016dc0 <__swbuf_r+0xa0>)
 8016d9c:	429c      	cmp	r4, r3
 8016d9e:	bf08      	it	eq
 8016da0:	68ec      	ldreq	r4, [r5, #12]
 8016da2:	e7ca      	b.n	8016d3a <__swbuf_r+0x1a>
 8016da4:	4621      	mov	r1, r4
 8016da6:	4628      	mov	r0, r5
 8016da8:	f000 f80c 	bl	8016dc4 <__swsetup_r>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d0cb      	beq.n	8016d48 <__swbuf_r+0x28>
 8016db0:	f04f 37ff 	mov.w	r7, #4294967295
 8016db4:	e7ea      	b.n	8016d8c <__swbuf_r+0x6c>
 8016db6:	bf00      	nop
 8016db8:	0802ce54 	.word	0x0802ce54
 8016dbc:	0802ce74 	.word	0x0802ce74
 8016dc0:	0802ce34 	.word	0x0802ce34

08016dc4 <__swsetup_r>:
 8016dc4:	4b32      	ldr	r3, [pc, #200]	; (8016e90 <__swsetup_r+0xcc>)
 8016dc6:	b570      	push	{r4, r5, r6, lr}
 8016dc8:	681d      	ldr	r5, [r3, #0]
 8016dca:	4606      	mov	r6, r0
 8016dcc:	460c      	mov	r4, r1
 8016dce:	b125      	cbz	r5, 8016dda <__swsetup_r+0x16>
 8016dd0:	69ab      	ldr	r3, [r5, #24]
 8016dd2:	b913      	cbnz	r3, 8016dda <__swsetup_r+0x16>
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	f000 f97d 	bl	80170d4 <__sinit>
 8016dda:	4b2e      	ldr	r3, [pc, #184]	; (8016e94 <__swsetup_r+0xd0>)
 8016ddc:	429c      	cmp	r4, r3
 8016dde:	d10f      	bne.n	8016e00 <__swsetup_r+0x3c>
 8016de0:	686c      	ldr	r4, [r5, #4]
 8016de2:	89a3      	ldrh	r3, [r4, #12]
 8016de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016de8:	0719      	lsls	r1, r3, #28
 8016dea:	d42c      	bmi.n	8016e46 <__swsetup_r+0x82>
 8016dec:	06dd      	lsls	r5, r3, #27
 8016dee:	d411      	bmi.n	8016e14 <__swsetup_r+0x50>
 8016df0:	2309      	movs	r3, #9
 8016df2:	6033      	str	r3, [r6, #0]
 8016df4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016df8:	81a3      	strh	r3, [r4, #12]
 8016dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8016dfe:	e03e      	b.n	8016e7e <__swsetup_r+0xba>
 8016e00:	4b25      	ldr	r3, [pc, #148]	; (8016e98 <__swsetup_r+0xd4>)
 8016e02:	429c      	cmp	r4, r3
 8016e04:	d101      	bne.n	8016e0a <__swsetup_r+0x46>
 8016e06:	68ac      	ldr	r4, [r5, #8]
 8016e08:	e7eb      	b.n	8016de2 <__swsetup_r+0x1e>
 8016e0a:	4b24      	ldr	r3, [pc, #144]	; (8016e9c <__swsetup_r+0xd8>)
 8016e0c:	429c      	cmp	r4, r3
 8016e0e:	bf08      	it	eq
 8016e10:	68ec      	ldreq	r4, [r5, #12]
 8016e12:	e7e6      	b.n	8016de2 <__swsetup_r+0x1e>
 8016e14:	0758      	lsls	r0, r3, #29
 8016e16:	d512      	bpl.n	8016e3e <__swsetup_r+0x7a>
 8016e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e1a:	b141      	cbz	r1, 8016e2e <__swsetup_r+0x6a>
 8016e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e20:	4299      	cmp	r1, r3
 8016e22:	d002      	beq.n	8016e2a <__swsetup_r+0x66>
 8016e24:	4630      	mov	r0, r6
 8016e26:	f7ff fdc1 	bl	80169ac <_free_r>
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	6363      	str	r3, [r4, #52]	; 0x34
 8016e2e:	89a3      	ldrh	r3, [r4, #12]
 8016e30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e34:	81a3      	strh	r3, [r4, #12]
 8016e36:	2300      	movs	r3, #0
 8016e38:	6063      	str	r3, [r4, #4]
 8016e3a:	6923      	ldr	r3, [r4, #16]
 8016e3c:	6023      	str	r3, [r4, #0]
 8016e3e:	89a3      	ldrh	r3, [r4, #12]
 8016e40:	f043 0308 	orr.w	r3, r3, #8
 8016e44:	81a3      	strh	r3, [r4, #12]
 8016e46:	6923      	ldr	r3, [r4, #16]
 8016e48:	b94b      	cbnz	r3, 8016e5e <__swsetup_r+0x9a>
 8016e4a:	89a3      	ldrh	r3, [r4, #12]
 8016e4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e54:	d003      	beq.n	8016e5e <__swsetup_r+0x9a>
 8016e56:	4621      	mov	r1, r4
 8016e58:	4630      	mov	r0, r6
 8016e5a:	f000 fa01 	bl	8017260 <__smakebuf_r>
 8016e5e:	89a0      	ldrh	r0, [r4, #12]
 8016e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e64:	f010 0301 	ands.w	r3, r0, #1
 8016e68:	d00a      	beq.n	8016e80 <__swsetup_r+0xbc>
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	60a3      	str	r3, [r4, #8]
 8016e6e:	6963      	ldr	r3, [r4, #20]
 8016e70:	425b      	negs	r3, r3
 8016e72:	61a3      	str	r3, [r4, #24]
 8016e74:	6923      	ldr	r3, [r4, #16]
 8016e76:	b943      	cbnz	r3, 8016e8a <__swsetup_r+0xc6>
 8016e78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016e7c:	d1ba      	bne.n	8016df4 <__swsetup_r+0x30>
 8016e7e:	bd70      	pop	{r4, r5, r6, pc}
 8016e80:	0781      	lsls	r1, r0, #30
 8016e82:	bf58      	it	pl
 8016e84:	6963      	ldrpl	r3, [r4, #20]
 8016e86:	60a3      	str	r3, [r4, #8]
 8016e88:	e7f4      	b.n	8016e74 <__swsetup_r+0xb0>
 8016e8a:	2000      	movs	r0, #0
 8016e8c:	e7f7      	b.n	8016e7e <__swsetup_r+0xba>
 8016e8e:	bf00      	nop
 8016e90:	200009fc 	.word	0x200009fc
 8016e94:	0802ce54 	.word	0x0802ce54
 8016e98:	0802ce74 	.word	0x0802ce74
 8016e9c:	0802ce34 	.word	0x0802ce34

08016ea0 <__sflush_r>:
 8016ea0:	898a      	ldrh	r2, [r1, #12]
 8016ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ea6:	4605      	mov	r5, r0
 8016ea8:	0710      	lsls	r0, r2, #28
 8016eaa:	460c      	mov	r4, r1
 8016eac:	d458      	bmi.n	8016f60 <__sflush_r+0xc0>
 8016eae:	684b      	ldr	r3, [r1, #4]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	dc05      	bgt.n	8016ec0 <__sflush_r+0x20>
 8016eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	dc02      	bgt.n	8016ec0 <__sflush_r+0x20>
 8016eba:	2000      	movs	r0, #0
 8016ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ec2:	2e00      	cmp	r6, #0
 8016ec4:	d0f9      	beq.n	8016eba <__sflush_r+0x1a>
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ecc:	682f      	ldr	r7, [r5, #0]
 8016ece:	602b      	str	r3, [r5, #0]
 8016ed0:	d032      	beq.n	8016f38 <__sflush_r+0x98>
 8016ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016ed4:	89a3      	ldrh	r3, [r4, #12]
 8016ed6:	075a      	lsls	r2, r3, #29
 8016ed8:	d505      	bpl.n	8016ee6 <__sflush_r+0x46>
 8016eda:	6863      	ldr	r3, [r4, #4]
 8016edc:	1ac0      	subs	r0, r0, r3
 8016ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016ee0:	b10b      	cbz	r3, 8016ee6 <__sflush_r+0x46>
 8016ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ee4:	1ac0      	subs	r0, r0, r3
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	4602      	mov	r2, r0
 8016eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016eec:	6a21      	ldr	r1, [r4, #32]
 8016eee:	4628      	mov	r0, r5
 8016ef0:	47b0      	blx	r6
 8016ef2:	1c43      	adds	r3, r0, #1
 8016ef4:	89a3      	ldrh	r3, [r4, #12]
 8016ef6:	d106      	bne.n	8016f06 <__sflush_r+0x66>
 8016ef8:	6829      	ldr	r1, [r5, #0]
 8016efa:	291d      	cmp	r1, #29
 8016efc:	d82c      	bhi.n	8016f58 <__sflush_r+0xb8>
 8016efe:	4a2a      	ldr	r2, [pc, #168]	; (8016fa8 <__sflush_r+0x108>)
 8016f00:	40ca      	lsrs	r2, r1
 8016f02:	07d6      	lsls	r6, r2, #31
 8016f04:	d528      	bpl.n	8016f58 <__sflush_r+0xb8>
 8016f06:	2200      	movs	r2, #0
 8016f08:	6062      	str	r2, [r4, #4]
 8016f0a:	04d9      	lsls	r1, r3, #19
 8016f0c:	6922      	ldr	r2, [r4, #16]
 8016f0e:	6022      	str	r2, [r4, #0]
 8016f10:	d504      	bpl.n	8016f1c <__sflush_r+0x7c>
 8016f12:	1c42      	adds	r2, r0, #1
 8016f14:	d101      	bne.n	8016f1a <__sflush_r+0x7a>
 8016f16:	682b      	ldr	r3, [r5, #0]
 8016f18:	b903      	cbnz	r3, 8016f1c <__sflush_r+0x7c>
 8016f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8016f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f1e:	602f      	str	r7, [r5, #0]
 8016f20:	2900      	cmp	r1, #0
 8016f22:	d0ca      	beq.n	8016eba <__sflush_r+0x1a>
 8016f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f28:	4299      	cmp	r1, r3
 8016f2a:	d002      	beq.n	8016f32 <__sflush_r+0x92>
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	f7ff fd3d 	bl	80169ac <_free_r>
 8016f32:	2000      	movs	r0, #0
 8016f34:	6360      	str	r0, [r4, #52]	; 0x34
 8016f36:	e7c1      	b.n	8016ebc <__sflush_r+0x1c>
 8016f38:	6a21      	ldr	r1, [r4, #32]
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	4628      	mov	r0, r5
 8016f3e:	47b0      	blx	r6
 8016f40:	1c41      	adds	r1, r0, #1
 8016f42:	d1c7      	bne.n	8016ed4 <__sflush_r+0x34>
 8016f44:	682b      	ldr	r3, [r5, #0]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d0c4      	beq.n	8016ed4 <__sflush_r+0x34>
 8016f4a:	2b1d      	cmp	r3, #29
 8016f4c:	d001      	beq.n	8016f52 <__sflush_r+0xb2>
 8016f4e:	2b16      	cmp	r3, #22
 8016f50:	d101      	bne.n	8016f56 <__sflush_r+0xb6>
 8016f52:	602f      	str	r7, [r5, #0]
 8016f54:	e7b1      	b.n	8016eba <__sflush_r+0x1a>
 8016f56:	89a3      	ldrh	r3, [r4, #12]
 8016f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f5c:	81a3      	strh	r3, [r4, #12]
 8016f5e:	e7ad      	b.n	8016ebc <__sflush_r+0x1c>
 8016f60:	690f      	ldr	r7, [r1, #16]
 8016f62:	2f00      	cmp	r7, #0
 8016f64:	d0a9      	beq.n	8016eba <__sflush_r+0x1a>
 8016f66:	0793      	lsls	r3, r2, #30
 8016f68:	680e      	ldr	r6, [r1, #0]
 8016f6a:	bf08      	it	eq
 8016f6c:	694b      	ldreq	r3, [r1, #20]
 8016f6e:	600f      	str	r7, [r1, #0]
 8016f70:	bf18      	it	ne
 8016f72:	2300      	movne	r3, #0
 8016f74:	eba6 0807 	sub.w	r8, r6, r7
 8016f78:	608b      	str	r3, [r1, #8]
 8016f7a:	f1b8 0f00 	cmp.w	r8, #0
 8016f7e:	dd9c      	ble.n	8016eba <__sflush_r+0x1a>
 8016f80:	6a21      	ldr	r1, [r4, #32]
 8016f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f84:	4643      	mov	r3, r8
 8016f86:	463a      	mov	r2, r7
 8016f88:	4628      	mov	r0, r5
 8016f8a:	47b0      	blx	r6
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	dc06      	bgt.n	8016f9e <__sflush_r+0xfe>
 8016f90:	89a3      	ldrh	r3, [r4, #12]
 8016f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f96:	81a3      	strh	r3, [r4, #12]
 8016f98:	f04f 30ff 	mov.w	r0, #4294967295
 8016f9c:	e78e      	b.n	8016ebc <__sflush_r+0x1c>
 8016f9e:	4407      	add	r7, r0
 8016fa0:	eba8 0800 	sub.w	r8, r8, r0
 8016fa4:	e7e9      	b.n	8016f7a <__sflush_r+0xda>
 8016fa6:	bf00      	nop
 8016fa8:	20400001 	.word	0x20400001

08016fac <_fflush_r>:
 8016fac:	b538      	push	{r3, r4, r5, lr}
 8016fae:	690b      	ldr	r3, [r1, #16]
 8016fb0:	4605      	mov	r5, r0
 8016fb2:	460c      	mov	r4, r1
 8016fb4:	b913      	cbnz	r3, 8016fbc <_fflush_r+0x10>
 8016fb6:	2500      	movs	r5, #0
 8016fb8:	4628      	mov	r0, r5
 8016fba:	bd38      	pop	{r3, r4, r5, pc}
 8016fbc:	b118      	cbz	r0, 8016fc6 <_fflush_r+0x1a>
 8016fbe:	6983      	ldr	r3, [r0, #24]
 8016fc0:	b90b      	cbnz	r3, 8016fc6 <_fflush_r+0x1a>
 8016fc2:	f000 f887 	bl	80170d4 <__sinit>
 8016fc6:	4b14      	ldr	r3, [pc, #80]	; (8017018 <_fflush_r+0x6c>)
 8016fc8:	429c      	cmp	r4, r3
 8016fca:	d11b      	bne.n	8017004 <_fflush_r+0x58>
 8016fcc:	686c      	ldr	r4, [r5, #4]
 8016fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d0ef      	beq.n	8016fb6 <_fflush_r+0xa>
 8016fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016fd8:	07d0      	lsls	r0, r2, #31
 8016fda:	d404      	bmi.n	8016fe6 <_fflush_r+0x3a>
 8016fdc:	0599      	lsls	r1, r3, #22
 8016fde:	d402      	bmi.n	8016fe6 <_fflush_r+0x3a>
 8016fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fe2:	f000 f915 	bl	8017210 <__retarget_lock_acquire_recursive>
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	4621      	mov	r1, r4
 8016fea:	f7ff ff59 	bl	8016ea0 <__sflush_r>
 8016fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ff0:	07da      	lsls	r2, r3, #31
 8016ff2:	4605      	mov	r5, r0
 8016ff4:	d4e0      	bmi.n	8016fb8 <_fflush_r+0xc>
 8016ff6:	89a3      	ldrh	r3, [r4, #12]
 8016ff8:	059b      	lsls	r3, r3, #22
 8016ffa:	d4dd      	bmi.n	8016fb8 <_fflush_r+0xc>
 8016ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ffe:	f000 f908 	bl	8017212 <__retarget_lock_release_recursive>
 8017002:	e7d9      	b.n	8016fb8 <_fflush_r+0xc>
 8017004:	4b05      	ldr	r3, [pc, #20]	; (801701c <_fflush_r+0x70>)
 8017006:	429c      	cmp	r4, r3
 8017008:	d101      	bne.n	801700e <_fflush_r+0x62>
 801700a:	68ac      	ldr	r4, [r5, #8]
 801700c:	e7df      	b.n	8016fce <_fflush_r+0x22>
 801700e:	4b04      	ldr	r3, [pc, #16]	; (8017020 <_fflush_r+0x74>)
 8017010:	429c      	cmp	r4, r3
 8017012:	bf08      	it	eq
 8017014:	68ec      	ldreq	r4, [r5, #12]
 8017016:	e7da      	b.n	8016fce <_fflush_r+0x22>
 8017018:	0802ce54 	.word	0x0802ce54
 801701c:	0802ce74 	.word	0x0802ce74
 8017020:	0802ce34 	.word	0x0802ce34

08017024 <std>:
 8017024:	2300      	movs	r3, #0
 8017026:	b510      	push	{r4, lr}
 8017028:	4604      	mov	r4, r0
 801702a:	e9c0 3300 	strd	r3, r3, [r0]
 801702e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017032:	6083      	str	r3, [r0, #8]
 8017034:	8181      	strh	r1, [r0, #12]
 8017036:	6643      	str	r3, [r0, #100]	; 0x64
 8017038:	81c2      	strh	r2, [r0, #14]
 801703a:	6183      	str	r3, [r0, #24]
 801703c:	4619      	mov	r1, r3
 801703e:	2208      	movs	r2, #8
 8017040:	305c      	adds	r0, #92	; 0x5c
 8017042:	f7ff fcab 	bl	801699c <memset>
 8017046:	4b05      	ldr	r3, [pc, #20]	; (801705c <std+0x38>)
 8017048:	6263      	str	r3, [r4, #36]	; 0x24
 801704a:	4b05      	ldr	r3, [pc, #20]	; (8017060 <std+0x3c>)
 801704c:	62a3      	str	r3, [r4, #40]	; 0x28
 801704e:	4b05      	ldr	r3, [pc, #20]	; (8017064 <std+0x40>)
 8017050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017052:	4b05      	ldr	r3, [pc, #20]	; (8017068 <std+0x44>)
 8017054:	6224      	str	r4, [r4, #32]
 8017056:	6323      	str	r3, [r4, #48]	; 0x30
 8017058:	bd10      	pop	{r4, pc}
 801705a:	bf00      	nop
 801705c:	08017be9 	.word	0x08017be9
 8017060:	08017c0b 	.word	0x08017c0b
 8017064:	08017c43 	.word	0x08017c43
 8017068:	08017c67 	.word	0x08017c67

0801706c <_cleanup_r>:
 801706c:	4901      	ldr	r1, [pc, #4]	; (8017074 <_cleanup_r+0x8>)
 801706e:	f000 b8af 	b.w	80171d0 <_fwalk_reent>
 8017072:	bf00      	nop
 8017074:	08016fad 	.word	0x08016fad

08017078 <__sfmoreglue>:
 8017078:	b570      	push	{r4, r5, r6, lr}
 801707a:	2268      	movs	r2, #104	; 0x68
 801707c:	1e4d      	subs	r5, r1, #1
 801707e:	4355      	muls	r5, r2
 8017080:	460e      	mov	r6, r1
 8017082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017086:	f7ff fcfd 	bl	8016a84 <_malloc_r>
 801708a:	4604      	mov	r4, r0
 801708c:	b140      	cbz	r0, 80170a0 <__sfmoreglue+0x28>
 801708e:	2100      	movs	r1, #0
 8017090:	e9c0 1600 	strd	r1, r6, [r0]
 8017094:	300c      	adds	r0, #12
 8017096:	60a0      	str	r0, [r4, #8]
 8017098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801709c:	f7ff fc7e 	bl	801699c <memset>
 80170a0:	4620      	mov	r0, r4
 80170a2:	bd70      	pop	{r4, r5, r6, pc}

080170a4 <__sfp_lock_acquire>:
 80170a4:	4801      	ldr	r0, [pc, #4]	; (80170ac <__sfp_lock_acquire+0x8>)
 80170a6:	f000 b8b3 	b.w	8017210 <__retarget_lock_acquire_recursive>
 80170aa:	bf00      	nop
 80170ac:	20003b39 	.word	0x20003b39

080170b0 <__sfp_lock_release>:
 80170b0:	4801      	ldr	r0, [pc, #4]	; (80170b8 <__sfp_lock_release+0x8>)
 80170b2:	f000 b8ae 	b.w	8017212 <__retarget_lock_release_recursive>
 80170b6:	bf00      	nop
 80170b8:	20003b39 	.word	0x20003b39

080170bc <__sinit_lock_acquire>:
 80170bc:	4801      	ldr	r0, [pc, #4]	; (80170c4 <__sinit_lock_acquire+0x8>)
 80170be:	f000 b8a7 	b.w	8017210 <__retarget_lock_acquire_recursive>
 80170c2:	bf00      	nop
 80170c4:	20003b3a 	.word	0x20003b3a

080170c8 <__sinit_lock_release>:
 80170c8:	4801      	ldr	r0, [pc, #4]	; (80170d0 <__sinit_lock_release+0x8>)
 80170ca:	f000 b8a2 	b.w	8017212 <__retarget_lock_release_recursive>
 80170ce:	bf00      	nop
 80170d0:	20003b3a 	.word	0x20003b3a

080170d4 <__sinit>:
 80170d4:	b510      	push	{r4, lr}
 80170d6:	4604      	mov	r4, r0
 80170d8:	f7ff fff0 	bl	80170bc <__sinit_lock_acquire>
 80170dc:	69a3      	ldr	r3, [r4, #24]
 80170de:	b11b      	cbz	r3, 80170e8 <__sinit+0x14>
 80170e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170e4:	f7ff bff0 	b.w	80170c8 <__sinit_lock_release>
 80170e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80170ec:	6523      	str	r3, [r4, #80]	; 0x50
 80170ee:	4b13      	ldr	r3, [pc, #76]	; (801713c <__sinit+0x68>)
 80170f0:	4a13      	ldr	r2, [pc, #76]	; (8017140 <__sinit+0x6c>)
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80170f6:	42a3      	cmp	r3, r4
 80170f8:	bf04      	itt	eq
 80170fa:	2301      	moveq	r3, #1
 80170fc:	61a3      	streq	r3, [r4, #24]
 80170fe:	4620      	mov	r0, r4
 8017100:	f000 f820 	bl	8017144 <__sfp>
 8017104:	6060      	str	r0, [r4, #4]
 8017106:	4620      	mov	r0, r4
 8017108:	f000 f81c 	bl	8017144 <__sfp>
 801710c:	60a0      	str	r0, [r4, #8]
 801710e:	4620      	mov	r0, r4
 8017110:	f000 f818 	bl	8017144 <__sfp>
 8017114:	2200      	movs	r2, #0
 8017116:	60e0      	str	r0, [r4, #12]
 8017118:	2104      	movs	r1, #4
 801711a:	6860      	ldr	r0, [r4, #4]
 801711c:	f7ff ff82 	bl	8017024 <std>
 8017120:	68a0      	ldr	r0, [r4, #8]
 8017122:	2201      	movs	r2, #1
 8017124:	2109      	movs	r1, #9
 8017126:	f7ff ff7d 	bl	8017024 <std>
 801712a:	68e0      	ldr	r0, [r4, #12]
 801712c:	2202      	movs	r2, #2
 801712e:	2112      	movs	r1, #18
 8017130:	f7ff ff78 	bl	8017024 <std>
 8017134:	2301      	movs	r3, #1
 8017136:	61a3      	str	r3, [r4, #24]
 8017138:	e7d2      	b.n	80170e0 <__sinit+0xc>
 801713a:	bf00      	nop
 801713c:	0802ce30 	.word	0x0802ce30
 8017140:	0801706d 	.word	0x0801706d

08017144 <__sfp>:
 8017144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017146:	4607      	mov	r7, r0
 8017148:	f7ff ffac 	bl	80170a4 <__sfp_lock_acquire>
 801714c:	4b1e      	ldr	r3, [pc, #120]	; (80171c8 <__sfp+0x84>)
 801714e:	681e      	ldr	r6, [r3, #0]
 8017150:	69b3      	ldr	r3, [r6, #24]
 8017152:	b913      	cbnz	r3, 801715a <__sfp+0x16>
 8017154:	4630      	mov	r0, r6
 8017156:	f7ff ffbd 	bl	80170d4 <__sinit>
 801715a:	3648      	adds	r6, #72	; 0x48
 801715c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017160:	3b01      	subs	r3, #1
 8017162:	d503      	bpl.n	801716c <__sfp+0x28>
 8017164:	6833      	ldr	r3, [r6, #0]
 8017166:	b30b      	cbz	r3, 80171ac <__sfp+0x68>
 8017168:	6836      	ldr	r6, [r6, #0]
 801716a:	e7f7      	b.n	801715c <__sfp+0x18>
 801716c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017170:	b9d5      	cbnz	r5, 80171a8 <__sfp+0x64>
 8017172:	4b16      	ldr	r3, [pc, #88]	; (80171cc <__sfp+0x88>)
 8017174:	60e3      	str	r3, [r4, #12]
 8017176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801717a:	6665      	str	r5, [r4, #100]	; 0x64
 801717c:	f000 f847 	bl	801720e <__retarget_lock_init_recursive>
 8017180:	f7ff ff96 	bl	80170b0 <__sfp_lock_release>
 8017184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801718c:	6025      	str	r5, [r4, #0]
 801718e:	61a5      	str	r5, [r4, #24]
 8017190:	2208      	movs	r2, #8
 8017192:	4629      	mov	r1, r5
 8017194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017198:	f7ff fc00 	bl	801699c <memset>
 801719c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80171a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80171a4:	4620      	mov	r0, r4
 80171a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171a8:	3468      	adds	r4, #104	; 0x68
 80171aa:	e7d9      	b.n	8017160 <__sfp+0x1c>
 80171ac:	2104      	movs	r1, #4
 80171ae:	4638      	mov	r0, r7
 80171b0:	f7ff ff62 	bl	8017078 <__sfmoreglue>
 80171b4:	4604      	mov	r4, r0
 80171b6:	6030      	str	r0, [r6, #0]
 80171b8:	2800      	cmp	r0, #0
 80171ba:	d1d5      	bne.n	8017168 <__sfp+0x24>
 80171bc:	f7ff ff78 	bl	80170b0 <__sfp_lock_release>
 80171c0:	230c      	movs	r3, #12
 80171c2:	603b      	str	r3, [r7, #0]
 80171c4:	e7ee      	b.n	80171a4 <__sfp+0x60>
 80171c6:	bf00      	nop
 80171c8:	0802ce30 	.word	0x0802ce30
 80171cc:	ffff0001 	.word	0xffff0001

080171d0 <_fwalk_reent>:
 80171d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171d4:	4606      	mov	r6, r0
 80171d6:	4688      	mov	r8, r1
 80171d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80171dc:	2700      	movs	r7, #0
 80171de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80171e2:	f1b9 0901 	subs.w	r9, r9, #1
 80171e6:	d505      	bpl.n	80171f4 <_fwalk_reent+0x24>
 80171e8:	6824      	ldr	r4, [r4, #0]
 80171ea:	2c00      	cmp	r4, #0
 80171ec:	d1f7      	bne.n	80171de <_fwalk_reent+0xe>
 80171ee:	4638      	mov	r0, r7
 80171f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171f4:	89ab      	ldrh	r3, [r5, #12]
 80171f6:	2b01      	cmp	r3, #1
 80171f8:	d907      	bls.n	801720a <_fwalk_reent+0x3a>
 80171fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80171fe:	3301      	adds	r3, #1
 8017200:	d003      	beq.n	801720a <_fwalk_reent+0x3a>
 8017202:	4629      	mov	r1, r5
 8017204:	4630      	mov	r0, r6
 8017206:	47c0      	blx	r8
 8017208:	4307      	orrs	r7, r0
 801720a:	3568      	adds	r5, #104	; 0x68
 801720c:	e7e9      	b.n	80171e2 <_fwalk_reent+0x12>

0801720e <__retarget_lock_init_recursive>:
 801720e:	4770      	bx	lr

08017210 <__retarget_lock_acquire_recursive>:
 8017210:	4770      	bx	lr

08017212 <__retarget_lock_release_recursive>:
 8017212:	4770      	bx	lr

08017214 <__swhatbuf_r>:
 8017214:	b570      	push	{r4, r5, r6, lr}
 8017216:	460e      	mov	r6, r1
 8017218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801721c:	2900      	cmp	r1, #0
 801721e:	b096      	sub	sp, #88	; 0x58
 8017220:	4614      	mov	r4, r2
 8017222:	461d      	mov	r5, r3
 8017224:	da08      	bge.n	8017238 <__swhatbuf_r+0x24>
 8017226:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801722a:	2200      	movs	r2, #0
 801722c:	602a      	str	r2, [r5, #0]
 801722e:	061a      	lsls	r2, r3, #24
 8017230:	d410      	bmi.n	8017254 <__swhatbuf_r+0x40>
 8017232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017236:	e00e      	b.n	8017256 <__swhatbuf_r+0x42>
 8017238:	466a      	mov	r2, sp
 801723a:	f000 fd3b 	bl	8017cb4 <_fstat_r>
 801723e:	2800      	cmp	r0, #0
 8017240:	dbf1      	blt.n	8017226 <__swhatbuf_r+0x12>
 8017242:	9a01      	ldr	r2, [sp, #4]
 8017244:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017248:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801724c:	425a      	negs	r2, r3
 801724e:	415a      	adcs	r2, r3
 8017250:	602a      	str	r2, [r5, #0]
 8017252:	e7ee      	b.n	8017232 <__swhatbuf_r+0x1e>
 8017254:	2340      	movs	r3, #64	; 0x40
 8017256:	2000      	movs	r0, #0
 8017258:	6023      	str	r3, [r4, #0]
 801725a:	b016      	add	sp, #88	; 0x58
 801725c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017260 <__smakebuf_r>:
 8017260:	898b      	ldrh	r3, [r1, #12]
 8017262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017264:	079d      	lsls	r5, r3, #30
 8017266:	4606      	mov	r6, r0
 8017268:	460c      	mov	r4, r1
 801726a:	d507      	bpl.n	801727c <__smakebuf_r+0x1c>
 801726c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017270:	6023      	str	r3, [r4, #0]
 8017272:	6123      	str	r3, [r4, #16]
 8017274:	2301      	movs	r3, #1
 8017276:	6163      	str	r3, [r4, #20]
 8017278:	b002      	add	sp, #8
 801727a:	bd70      	pop	{r4, r5, r6, pc}
 801727c:	ab01      	add	r3, sp, #4
 801727e:	466a      	mov	r2, sp
 8017280:	f7ff ffc8 	bl	8017214 <__swhatbuf_r>
 8017284:	9900      	ldr	r1, [sp, #0]
 8017286:	4605      	mov	r5, r0
 8017288:	4630      	mov	r0, r6
 801728a:	f7ff fbfb 	bl	8016a84 <_malloc_r>
 801728e:	b948      	cbnz	r0, 80172a4 <__smakebuf_r+0x44>
 8017290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017294:	059a      	lsls	r2, r3, #22
 8017296:	d4ef      	bmi.n	8017278 <__smakebuf_r+0x18>
 8017298:	f023 0303 	bic.w	r3, r3, #3
 801729c:	f043 0302 	orr.w	r3, r3, #2
 80172a0:	81a3      	strh	r3, [r4, #12]
 80172a2:	e7e3      	b.n	801726c <__smakebuf_r+0xc>
 80172a4:	4b0d      	ldr	r3, [pc, #52]	; (80172dc <__smakebuf_r+0x7c>)
 80172a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80172a8:	89a3      	ldrh	r3, [r4, #12]
 80172aa:	6020      	str	r0, [r4, #0]
 80172ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172b0:	81a3      	strh	r3, [r4, #12]
 80172b2:	9b00      	ldr	r3, [sp, #0]
 80172b4:	6163      	str	r3, [r4, #20]
 80172b6:	9b01      	ldr	r3, [sp, #4]
 80172b8:	6120      	str	r0, [r4, #16]
 80172ba:	b15b      	cbz	r3, 80172d4 <__smakebuf_r+0x74>
 80172bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172c0:	4630      	mov	r0, r6
 80172c2:	f000 fd09 	bl	8017cd8 <_isatty_r>
 80172c6:	b128      	cbz	r0, 80172d4 <__smakebuf_r+0x74>
 80172c8:	89a3      	ldrh	r3, [r4, #12]
 80172ca:	f023 0303 	bic.w	r3, r3, #3
 80172ce:	f043 0301 	orr.w	r3, r3, #1
 80172d2:	81a3      	strh	r3, [r4, #12]
 80172d4:	89a0      	ldrh	r0, [r4, #12]
 80172d6:	4305      	orrs	r5, r0
 80172d8:	81a5      	strh	r5, [r4, #12]
 80172da:	e7cd      	b.n	8017278 <__smakebuf_r+0x18>
 80172dc:	0801706d 	.word	0x0801706d

080172e0 <__malloc_lock>:
 80172e0:	4801      	ldr	r0, [pc, #4]	; (80172e8 <__malloc_lock+0x8>)
 80172e2:	f7ff bf95 	b.w	8017210 <__retarget_lock_acquire_recursive>
 80172e6:	bf00      	nop
 80172e8:	20003b38 	.word	0x20003b38

080172ec <__malloc_unlock>:
 80172ec:	4801      	ldr	r0, [pc, #4]	; (80172f4 <__malloc_unlock+0x8>)
 80172ee:	f7ff bf90 	b.w	8017212 <__retarget_lock_release_recursive>
 80172f2:	bf00      	nop
 80172f4:	20003b38 	.word	0x20003b38

080172f8 <_realloc_r>:
 80172f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172fc:	4680      	mov	r8, r0
 80172fe:	4614      	mov	r4, r2
 8017300:	460e      	mov	r6, r1
 8017302:	b921      	cbnz	r1, 801730e <_realloc_r+0x16>
 8017304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017308:	4611      	mov	r1, r2
 801730a:	f7ff bbbb 	b.w	8016a84 <_malloc_r>
 801730e:	b92a      	cbnz	r2, 801731c <_realloc_r+0x24>
 8017310:	f7ff fb4c 	bl	80169ac <_free_r>
 8017314:	4625      	mov	r5, r4
 8017316:	4628      	mov	r0, r5
 8017318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801731c:	f000 fd18 	bl	8017d50 <_malloc_usable_size_r>
 8017320:	4284      	cmp	r4, r0
 8017322:	4607      	mov	r7, r0
 8017324:	d802      	bhi.n	801732c <_realloc_r+0x34>
 8017326:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801732a:	d812      	bhi.n	8017352 <_realloc_r+0x5a>
 801732c:	4621      	mov	r1, r4
 801732e:	4640      	mov	r0, r8
 8017330:	f7ff fba8 	bl	8016a84 <_malloc_r>
 8017334:	4605      	mov	r5, r0
 8017336:	2800      	cmp	r0, #0
 8017338:	d0ed      	beq.n	8017316 <_realloc_r+0x1e>
 801733a:	42bc      	cmp	r4, r7
 801733c:	4622      	mov	r2, r4
 801733e:	4631      	mov	r1, r6
 8017340:	bf28      	it	cs
 8017342:	463a      	movcs	r2, r7
 8017344:	f7ff fb1c 	bl	8016980 <memcpy>
 8017348:	4631      	mov	r1, r6
 801734a:	4640      	mov	r0, r8
 801734c:	f7ff fb2e 	bl	80169ac <_free_r>
 8017350:	e7e1      	b.n	8017316 <_realloc_r+0x1e>
 8017352:	4635      	mov	r5, r6
 8017354:	e7df      	b.n	8017316 <_realloc_r+0x1e>

08017356 <__ssputs_r>:
 8017356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801735a:	688e      	ldr	r6, [r1, #8]
 801735c:	429e      	cmp	r6, r3
 801735e:	4682      	mov	sl, r0
 8017360:	460c      	mov	r4, r1
 8017362:	4690      	mov	r8, r2
 8017364:	461f      	mov	r7, r3
 8017366:	d838      	bhi.n	80173da <__ssputs_r+0x84>
 8017368:	898a      	ldrh	r2, [r1, #12]
 801736a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801736e:	d032      	beq.n	80173d6 <__ssputs_r+0x80>
 8017370:	6825      	ldr	r5, [r4, #0]
 8017372:	6909      	ldr	r1, [r1, #16]
 8017374:	eba5 0901 	sub.w	r9, r5, r1
 8017378:	6965      	ldr	r5, [r4, #20]
 801737a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801737e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017382:	3301      	adds	r3, #1
 8017384:	444b      	add	r3, r9
 8017386:	106d      	asrs	r5, r5, #1
 8017388:	429d      	cmp	r5, r3
 801738a:	bf38      	it	cc
 801738c:	461d      	movcc	r5, r3
 801738e:	0553      	lsls	r3, r2, #21
 8017390:	d531      	bpl.n	80173f6 <__ssputs_r+0xa0>
 8017392:	4629      	mov	r1, r5
 8017394:	f7ff fb76 	bl	8016a84 <_malloc_r>
 8017398:	4606      	mov	r6, r0
 801739a:	b950      	cbnz	r0, 80173b2 <__ssputs_r+0x5c>
 801739c:	230c      	movs	r3, #12
 801739e:	f8ca 3000 	str.w	r3, [sl]
 80173a2:	89a3      	ldrh	r3, [r4, #12]
 80173a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173a8:	81a3      	strh	r3, [r4, #12]
 80173aa:	f04f 30ff 	mov.w	r0, #4294967295
 80173ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173b2:	6921      	ldr	r1, [r4, #16]
 80173b4:	464a      	mov	r2, r9
 80173b6:	f7ff fae3 	bl	8016980 <memcpy>
 80173ba:	89a3      	ldrh	r3, [r4, #12]
 80173bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80173c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173c4:	81a3      	strh	r3, [r4, #12]
 80173c6:	6126      	str	r6, [r4, #16]
 80173c8:	6165      	str	r5, [r4, #20]
 80173ca:	444e      	add	r6, r9
 80173cc:	eba5 0509 	sub.w	r5, r5, r9
 80173d0:	6026      	str	r6, [r4, #0]
 80173d2:	60a5      	str	r5, [r4, #8]
 80173d4:	463e      	mov	r6, r7
 80173d6:	42be      	cmp	r6, r7
 80173d8:	d900      	bls.n	80173dc <__ssputs_r+0x86>
 80173da:	463e      	mov	r6, r7
 80173dc:	6820      	ldr	r0, [r4, #0]
 80173de:	4632      	mov	r2, r6
 80173e0:	4641      	mov	r1, r8
 80173e2:	f000 fc9b 	bl	8017d1c <memmove>
 80173e6:	68a3      	ldr	r3, [r4, #8]
 80173e8:	1b9b      	subs	r3, r3, r6
 80173ea:	60a3      	str	r3, [r4, #8]
 80173ec:	6823      	ldr	r3, [r4, #0]
 80173ee:	4433      	add	r3, r6
 80173f0:	6023      	str	r3, [r4, #0]
 80173f2:	2000      	movs	r0, #0
 80173f4:	e7db      	b.n	80173ae <__ssputs_r+0x58>
 80173f6:	462a      	mov	r2, r5
 80173f8:	f7ff ff7e 	bl	80172f8 <_realloc_r>
 80173fc:	4606      	mov	r6, r0
 80173fe:	2800      	cmp	r0, #0
 8017400:	d1e1      	bne.n	80173c6 <__ssputs_r+0x70>
 8017402:	6921      	ldr	r1, [r4, #16]
 8017404:	4650      	mov	r0, sl
 8017406:	f7ff fad1 	bl	80169ac <_free_r>
 801740a:	e7c7      	b.n	801739c <__ssputs_r+0x46>

0801740c <_svfiprintf_r>:
 801740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017410:	4698      	mov	r8, r3
 8017412:	898b      	ldrh	r3, [r1, #12]
 8017414:	061b      	lsls	r3, r3, #24
 8017416:	b09d      	sub	sp, #116	; 0x74
 8017418:	4607      	mov	r7, r0
 801741a:	460d      	mov	r5, r1
 801741c:	4614      	mov	r4, r2
 801741e:	d50e      	bpl.n	801743e <_svfiprintf_r+0x32>
 8017420:	690b      	ldr	r3, [r1, #16]
 8017422:	b963      	cbnz	r3, 801743e <_svfiprintf_r+0x32>
 8017424:	2140      	movs	r1, #64	; 0x40
 8017426:	f7ff fb2d 	bl	8016a84 <_malloc_r>
 801742a:	6028      	str	r0, [r5, #0]
 801742c:	6128      	str	r0, [r5, #16]
 801742e:	b920      	cbnz	r0, 801743a <_svfiprintf_r+0x2e>
 8017430:	230c      	movs	r3, #12
 8017432:	603b      	str	r3, [r7, #0]
 8017434:	f04f 30ff 	mov.w	r0, #4294967295
 8017438:	e0d1      	b.n	80175de <_svfiprintf_r+0x1d2>
 801743a:	2340      	movs	r3, #64	; 0x40
 801743c:	616b      	str	r3, [r5, #20]
 801743e:	2300      	movs	r3, #0
 8017440:	9309      	str	r3, [sp, #36]	; 0x24
 8017442:	2320      	movs	r3, #32
 8017444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017448:	f8cd 800c 	str.w	r8, [sp, #12]
 801744c:	2330      	movs	r3, #48	; 0x30
 801744e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80175f8 <_svfiprintf_r+0x1ec>
 8017452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017456:	f04f 0901 	mov.w	r9, #1
 801745a:	4623      	mov	r3, r4
 801745c:	469a      	mov	sl, r3
 801745e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017462:	b10a      	cbz	r2, 8017468 <_svfiprintf_r+0x5c>
 8017464:	2a25      	cmp	r2, #37	; 0x25
 8017466:	d1f9      	bne.n	801745c <_svfiprintf_r+0x50>
 8017468:	ebba 0b04 	subs.w	fp, sl, r4
 801746c:	d00b      	beq.n	8017486 <_svfiprintf_r+0x7a>
 801746e:	465b      	mov	r3, fp
 8017470:	4622      	mov	r2, r4
 8017472:	4629      	mov	r1, r5
 8017474:	4638      	mov	r0, r7
 8017476:	f7ff ff6e 	bl	8017356 <__ssputs_r>
 801747a:	3001      	adds	r0, #1
 801747c:	f000 80aa 	beq.w	80175d4 <_svfiprintf_r+0x1c8>
 8017480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017482:	445a      	add	r2, fp
 8017484:	9209      	str	r2, [sp, #36]	; 0x24
 8017486:	f89a 3000 	ldrb.w	r3, [sl]
 801748a:	2b00      	cmp	r3, #0
 801748c:	f000 80a2 	beq.w	80175d4 <_svfiprintf_r+0x1c8>
 8017490:	2300      	movs	r3, #0
 8017492:	f04f 32ff 	mov.w	r2, #4294967295
 8017496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801749a:	f10a 0a01 	add.w	sl, sl, #1
 801749e:	9304      	str	r3, [sp, #16]
 80174a0:	9307      	str	r3, [sp, #28]
 80174a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80174a6:	931a      	str	r3, [sp, #104]	; 0x68
 80174a8:	4654      	mov	r4, sl
 80174aa:	2205      	movs	r2, #5
 80174ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174b0:	4851      	ldr	r0, [pc, #324]	; (80175f8 <_svfiprintf_r+0x1ec>)
 80174b2:	f7e8 fead 	bl	8000210 <memchr>
 80174b6:	9a04      	ldr	r2, [sp, #16]
 80174b8:	b9d8      	cbnz	r0, 80174f2 <_svfiprintf_r+0xe6>
 80174ba:	06d0      	lsls	r0, r2, #27
 80174bc:	bf44      	itt	mi
 80174be:	2320      	movmi	r3, #32
 80174c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80174c4:	0711      	lsls	r1, r2, #28
 80174c6:	bf44      	itt	mi
 80174c8:	232b      	movmi	r3, #43	; 0x2b
 80174ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80174ce:	f89a 3000 	ldrb.w	r3, [sl]
 80174d2:	2b2a      	cmp	r3, #42	; 0x2a
 80174d4:	d015      	beq.n	8017502 <_svfiprintf_r+0xf6>
 80174d6:	9a07      	ldr	r2, [sp, #28]
 80174d8:	4654      	mov	r4, sl
 80174da:	2000      	movs	r0, #0
 80174dc:	f04f 0c0a 	mov.w	ip, #10
 80174e0:	4621      	mov	r1, r4
 80174e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80174e6:	3b30      	subs	r3, #48	; 0x30
 80174e8:	2b09      	cmp	r3, #9
 80174ea:	d94e      	bls.n	801758a <_svfiprintf_r+0x17e>
 80174ec:	b1b0      	cbz	r0, 801751c <_svfiprintf_r+0x110>
 80174ee:	9207      	str	r2, [sp, #28]
 80174f0:	e014      	b.n	801751c <_svfiprintf_r+0x110>
 80174f2:	eba0 0308 	sub.w	r3, r0, r8
 80174f6:	fa09 f303 	lsl.w	r3, r9, r3
 80174fa:	4313      	orrs	r3, r2
 80174fc:	9304      	str	r3, [sp, #16]
 80174fe:	46a2      	mov	sl, r4
 8017500:	e7d2      	b.n	80174a8 <_svfiprintf_r+0x9c>
 8017502:	9b03      	ldr	r3, [sp, #12]
 8017504:	1d19      	adds	r1, r3, #4
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	9103      	str	r1, [sp, #12]
 801750a:	2b00      	cmp	r3, #0
 801750c:	bfbb      	ittet	lt
 801750e:	425b      	neglt	r3, r3
 8017510:	f042 0202 	orrlt.w	r2, r2, #2
 8017514:	9307      	strge	r3, [sp, #28]
 8017516:	9307      	strlt	r3, [sp, #28]
 8017518:	bfb8      	it	lt
 801751a:	9204      	strlt	r2, [sp, #16]
 801751c:	7823      	ldrb	r3, [r4, #0]
 801751e:	2b2e      	cmp	r3, #46	; 0x2e
 8017520:	d10c      	bne.n	801753c <_svfiprintf_r+0x130>
 8017522:	7863      	ldrb	r3, [r4, #1]
 8017524:	2b2a      	cmp	r3, #42	; 0x2a
 8017526:	d135      	bne.n	8017594 <_svfiprintf_r+0x188>
 8017528:	9b03      	ldr	r3, [sp, #12]
 801752a:	1d1a      	adds	r2, r3, #4
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	9203      	str	r2, [sp, #12]
 8017530:	2b00      	cmp	r3, #0
 8017532:	bfb8      	it	lt
 8017534:	f04f 33ff 	movlt.w	r3, #4294967295
 8017538:	3402      	adds	r4, #2
 801753a:	9305      	str	r3, [sp, #20]
 801753c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017608 <_svfiprintf_r+0x1fc>
 8017540:	7821      	ldrb	r1, [r4, #0]
 8017542:	2203      	movs	r2, #3
 8017544:	4650      	mov	r0, sl
 8017546:	f7e8 fe63 	bl	8000210 <memchr>
 801754a:	b140      	cbz	r0, 801755e <_svfiprintf_r+0x152>
 801754c:	2340      	movs	r3, #64	; 0x40
 801754e:	eba0 000a 	sub.w	r0, r0, sl
 8017552:	fa03 f000 	lsl.w	r0, r3, r0
 8017556:	9b04      	ldr	r3, [sp, #16]
 8017558:	4303      	orrs	r3, r0
 801755a:	3401      	adds	r4, #1
 801755c:	9304      	str	r3, [sp, #16]
 801755e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017562:	4826      	ldr	r0, [pc, #152]	; (80175fc <_svfiprintf_r+0x1f0>)
 8017564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017568:	2206      	movs	r2, #6
 801756a:	f7e8 fe51 	bl	8000210 <memchr>
 801756e:	2800      	cmp	r0, #0
 8017570:	d038      	beq.n	80175e4 <_svfiprintf_r+0x1d8>
 8017572:	4b23      	ldr	r3, [pc, #140]	; (8017600 <_svfiprintf_r+0x1f4>)
 8017574:	bb1b      	cbnz	r3, 80175be <_svfiprintf_r+0x1b2>
 8017576:	9b03      	ldr	r3, [sp, #12]
 8017578:	3307      	adds	r3, #7
 801757a:	f023 0307 	bic.w	r3, r3, #7
 801757e:	3308      	adds	r3, #8
 8017580:	9303      	str	r3, [sp, #12]
 8017582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017584:	4433      	add	r3, r6
 8017586:	9309      	str	r3, [sp, #36]	; 0x24
 8017588:	e767      	b.n	801745a <_svfiprintf_r+0x4e>
 801758a:	fb0c 3202 	mla	r2, ip, r2, r3
 801758e:	460c      	mov	r4, r1
 8017590:	2001      	movs	r0, #1
 8017592:	e7a5      	b.n	80174e0 <_svfiprintf_r+0xd4>
 8017594:	2300      	movs	r3, #0
 8017596:	3401      	adds	r4, #1
 8017598:	9305      	str	r3, [sp, #20]
 801759a:	4619      	mov	r1, r3
 801759c:	f04f 0c0a 	mov.w	ip, #10
 80175a0:	4620      	mov	r0, r4
 80175a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175a6:	3a30      	subs	r2, #48	; 0x30
 80175a8:	2a09      	cmp	r2, #9
 80175aa:	d903      	bls.n	80175b4 <_svfiprintf_r+0x1a8>
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d0c5      	beq.n	801753c <_svfiprintf_r+0x130>
 80175b0:	9105      	str	r1, [sp, #20]
 80175b2:	e7c3      	b.n	801753c <_svfiprintf_r+0x130>
 80175b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80175b8:	4604      	mov	r4, r0
 80175ba:	2301      	movs	r3, #1
 80175bc:	e7f0      	b.n	80175a0 <_svfiprintf_r+0x194>
 80175be:	ab03      	add	r3, sp, #12
 80175c0:	9300      	str	r3, [sp, #0]
 80175c2:	462a      	mov	r2, r5
 80175c4:	4b0f      	ldr	r3, [pc, #60]	; (8017604 <_svfiprintf_r+0x1f8>)
 80175c6:	a904      	add	r1, sp, #16
 80175c8:	4638      	mov	r0, r7
 80175ca:	f3af 8000 	nop.w
 80175ce:	1c42      	adds	r2, r0, #1
 80175d0:	4606      	mov	r6, r0
 80175d2:	d1d6      	bne.n	8017582 <_svfiprintf_r+0x176>
 80175d4:	89ab      	ldrh	r3, [r5, #12]
 80175d6:	065b      	lsls	r3, r3, #25
 80175d8:	f53f af2c 	bmi.w	8017434 <_svfiprintf_r+0x28>
 80175dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80175de:	b01d      	add	sp, #116	; 0x74
 80175e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175e4:	ab03      	add	r3, sp, #12
 80175e6:	9300      	str	r3, [sp, #0]
 80175e8:	462a      	mov	r2, r5
 80175ea:	4b06      	ldr	r3, [pc, #24]	; (8017604 <_svfiprintf_r+0x1f8>)
 80175ec:	a904      	add	r1, sp, #16
 80175ee:	4638      	mov	r0, r7
 80175f0:	f000 f9d4 	bl	801799c <_printf_i>
 80175f4:	e7eb      	b.n	80175ce <_svfiprintf_r+0x1c2>
 80175f6:	bf00      	nop
 80175f8:	0802ce94 	.word	0x0802ce94
 80175fc:	0802ce9e 	.word	0x0802ce9e
 8017600:	00000000 	.word	0x00000000
 8017604:	08017357 	.word	0x08017357
 8017608:	0802ce9a 	.word	0x0802ce9a

0801760c <__sfputc_r>:
 801760c:	6893      	ldr	r3, [r2, #8]
 801760e:	3b01      	subs	r3, #1
 8017610:	2b00      	cmp	r3, #0
 8017612:	b410      	push	{r4}
 8017614:	6093      	str	r3, [r2, #8]
 8017616:	da08      	bge.n	801762a <__sfputc_r+0x1e>
 8017618:	6994      	ldr	r4, [r2, #24]
 801761a:	42a3      	cmp	r3, r4
 801761c:	db01      	blt.n	8017622 <__sfputc_r+0x16>
 801761e:	290a      	cmp	r1, #10
 8017620:	d103      	bne.n	801762a <__sfputc_r+0x1e>
 8017622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017626:	f7ff bb7b 	b.w	8016d20 <__swbuf_r>
 801762a:	6813      	ldr	r3, [r2, #0]
 801762c:	1c58      	adds	r0, r3, #1
 801762e:	6010      	str	r0, [r2, #0]
 8017630:	7019      	strb	r1, [r3, #0]
 8017632:	4608      	mov	r0, r1
 8017634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017638:	4770      	bx	lr

0801763a <__sfputs_r>:
 801763a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801763c:	4606      	mov	r6, r0
 801763e:	460f      	mov	r7, r1
 8017640:	4614      	mov	r4, r2
 8017642:	18d5      	adds	r5, r2, r3
 8017644:	42ac      	cmp	r4, r5
 8017646:	d101      	bne.n	801764c <__sfputs_r+0x12>
 8017648:	2000      	movs	r0, #0
 801764a:	e007      	b.n	801765c <__sfputs_r+0x22>
 801764c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017650:	463a      	mov	r2, r7
 8017652:	4630      	mov	r0, r6
 8017654:	f7ff ffda 	bl	801760c <__sfputc_r>
 8017658:	1c43      	adds	r3, r0, #1
 801765a:	d1f3      	bne.n	8017644 <__sfputs_r+0xa>
 801765c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017660 <_vfiprintf_r>:
 8017660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017664:	460d      	mov	r5, r1
 8017666:	b09d      	sub	sp, #116	; 0x74
 8017668:	4614      	mov	r4, r2
 801766a:	4698      	mov	r8, r3
 801766c:	4606      	mov	r6, r0
 801766e:	b118      	cbz	r0, 8017678 <_vfiprintf_r+0x18>
 8017670:	6983      	ldr	r3, [r0, #24]
 8017672:	b90b      	cbnz	r3, 8017678 <_vfiprintf_r+0x18>
 8017674:	f7ff fd2e 	bl	80170d4 <__sinit>
 8017678:	4b89      	ldr	r3, [pc, #548]	; (80178a0 <_vfiprintf_r+0x240>)
 801767a:	429d      	cmp	r5, r3
 801767c:	d11b      	bne.n	80176b6 <_vfiprintf_r+0x56>
 801767e:	6875      	ldr	r5, [r6, #4]
 8017680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017682:	07d9      	lsls	r1, r3, #31
 8017684:	d405      	bmi.n	8017692 <_vfiprintf_r+0x32>
 8017686:	89ab      	ldrh	r3, [r5, #12]
 8017688:	059a      	lsls	r2, r3, #22
 801768a:	d402      	bmi.n	8017692 <_vfiprintf_r+0x32>
 801768c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801768e:	f7ff fdbf 	bl	8017210 <__retarget_lock_acquire_recursive>
 8017692:	89ab      	ldrh	r3, [r5, #12]
 8017694:	071b      	lsls	r3, r3, #28
 8017696:	d501      	bpl.n	801769c <_vfiprintf_r+0x3c>
 8017698:	692b      	ldr	r3, [r5, #16]
 801769a:	b9eb      	cbnz	r3, 80176d8 <_vfiprintf_r+0x78>
 801769c:	4629      	mov	r1, r5
 801769e:	4630      	mov	r0, r6
 80176a0:	f7ff fb90 	bl	8016dc4 <__swsetup_r>
 80176a4:	b1c0      	cbz	r0, 80176d8 <_vfiprintf_r+0x78>
 80176a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176a8:	07dc      	lsls	r4, r3, #31
 80176aa:	d50e      	bpl.n	80176ca <_vfiprintf_r+0x6a>
 80176ac:	f04f 30ff 	mov.w	r0, #4294967295
 80176b0:	b01d      	add	sp, #116	; 0x74
 80176b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176b6:	4b7b      	ldr	r3, [pc, #492]	; (80178a4 <_vfiprintf_r+0x244>)
 80176b8:	429d      	cmp	r5, r3
 80176ba:	d101      	bne.n	80176c0 <_vfiprintf_r+0x60>
 80176bc:	68b5      	ldr	r5, [r6, #8]
 80176be:	e7df      	b.n	8017680 <_vfiprintf_r+0x20>
 80176c0:	4b79      	ldr	r3, [pc, #484]	; (80178a8 <_vfiprintf_r+0x248>)
 80176c2:	429d      	cmp	r5, r3
 80176c4:	bf08      	it	eq
 80176c6:	68f5      	ldreq	r5, [r6, #12]
 80176c8:	e7da      	b.n	8017680 <_vfiprintf_r+0x20>
 80176ca:	89ab      	ldrh	r3, [r5, #12]
 80176cc:	0598      	lsls	r0, r3, #22
 80176ce:	d4ed      	bmi.n	80176ac <_vfiprintf_r+0x4c>
 80176d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176d2:	f7ff fd9e 	bl	8017212 <__retarget_lock_release_recursive>
 80176d6:	e7e9      	b.n	80176ac <_vfiprintf_r+0x4c>
 80176d8:	2300      	movs	r3, #0
 80176da:	9309      	str	r3, [sp, #36]	; 0x24
 80176dc:	2320      	movs	r3, #32
 80176de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80176e6:	2330      	movs	r3, #48	; 0x30
 80176e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80178ac <_vfiprintf_r+0x24c>
 80176ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176f0:	f04f 0901 	mov.w	r9, #1
 80176f4:	4623      	mov	r3, r4
 80176f6:	469a      	mov	sl, r3
 80176f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176fc:	b10a      	cbz	r2, 8017702 <_vfiprintf_r+0xa2>
 80176fe:	2a25      	cmp	r2, #37	; 0x25
 8017700:	d1f9      	bne.n	80176f6 <_vfiprintf_r+0x96>
 8017702:	ebba 0b04 	subs.w	fp, sl, r4
 8017706:	d00b      	beq.n	8017720 <_vfiprintf_r+0xc0>
 8017708:	465b      	mov	r3, fp
 801770a:	4622      	mov	r2, r4
 801770c:	4629      	mov	r1, r5
 801770e:	4630      	mov	r0, r6
 8017710:	f7ff ff93 	bl	801763a <__sfputs_r>
 8017714:	3001      	adds	r0, #1
 8017716:	f000 80aa 	beq.w	801786e <_vfiprintf_r+0x20e>
 801771a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801771c:	445a      	add	r2, fp
 801771e:	9209      	str	r2, [sp, #36]	; 0x24
 8017720:	f89a 3000 	ldrb.w	r3, [sl]
 8017724:	2b00      	cmp	r3, #0
 8017726:	f000 80a2 	beq.w	801786e <_vfiprintf_r+0x20e>
 801772a:	2300      	movs	r3, #0
 801772c:	f04f 32ff 	mov.w	r2, #4294967295
 8017730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017734:	f10a 0a01 	add.w	sl, sl, #1
 8017738:	9304      	str	r3, [sp, #16]
 801773a:	9307      	str	r3, [sp, #28]
 801773c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017740:	931a      	str	r3, [sp, #104]	; 0x68
 8017742:	4654      	mov	r4, sl
 8017744:	2205      	movs	r2, #5
 8017746:	f814 1b01 	ldrb.w	r1, [r4], #1
 801774a:	4858      	ldr	r0, [pc, #352]	; (80178ac <_vfiprintf_r+0x24c>)
 801774c:	f7e8 fd60 	bl	8000210 <memchr>
 8017750:	9a04      	ldr	r2, [sp, #16]
 8017752:	b9d8      	cbnz	r0, 801778c <_vfiprintf_r+0x12c>
 8017754:	06d1      	lsls	r1, r2, #27
 8017756:	bf44      	itt	mi
 8017758:	2320      	movmi	r3, #32
 801775a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801775e:	0713      	lsls	r3, r2, #28
 8017760:	bf44      	itt	mi
 8017762:	232b      	movmi	r3, #43	; 0x2b
 8017764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017768:	f89a 3000 	ldrb.w	r3, [sl]
 801776c:	2b2a      	cmp	r3, #42	; 0x2a
 801776e:	d015      	beq.n	801779c <_vfiprintf_r+0x13c>
 8017770:	9a07      	ldr	r2, [sp, #28]
 8017772:	4654      	mov	r4, sl
 8017774:	2000      	movs	r0, #0
 8017776:	f04f 0c0a 	mov.w	ip, #10
 801777a:	4621      	mov	r1, r4
 801777c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017780:	3b30      	subs	r3, #48	; 0x30
 8017782:	2b09      	cmp	r3, #9
 8017784:	d94e      	bls.n	8017824 <_vfiprintf_r+0x1c4>
 8017786:	b1b0      	cbz	r0, 80177b6 <_vfiprintf_r+0x156>
 8017788:	9207      	str	r2, [sp, #28]
 801778a:	e014      	b.n	80177b6 <_vfiprintf_r+0x156>
 801778c:	eba0 0308 	sub.w	r3, r0, r8
 8017790:	fa09 f303 	lsl.w	r3, r9, r3
 8017794:	4313      	orrs	r3, r2
 8017796:	9304      	str	r3, [sp, #16]
 8017798:	46a2      	mov	sl, r4
 801779a:	e7d2      	b.n	8017742 <_vfiprintf_r+0xe2>
 801779c:	9b03      	ldr	r3, [sp, #12]
 801779e:	1d19      	adds	r1, r3, #4
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	9103      	str	r1, [sp, #12]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	bfbb      	ittet	lt
 80177a8:	425b      	neglt	r3, r3
 80177aa:	f042 0202 	orrlt.w	r2, r2, #2
 80177ae:	9307      	strge	r3, [sp, #28]
 80177b0:	9307      	strlt	r3, [sp, #28]
 80177b2:	bfb8      	it	lt
 80177b4:	9204      	strlt	r2, [sp, #16]
 80177b6:	7823      	ldrb	r3, [r4, #0]
 80177b8:	2b2e      	cmp	r3, #46	; 0x2e
 80177ba:	d10c      	bne.n	80177d6 <_vfiprintf_r+0x176>
 80177bc:	7863      	ldrb	r3, [r4, #1]
 80177be:	2b2a      	cmp	r3, #42	; 0x2a
 80177c0:	d135      	bne.n	801782e <_vfiprintf_r+0x1ce>
 80177c2:	9b03      	ldr	r3, [sp, #12]
 80177c4:	1d1a      	adds	r2, r3, #4
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	9203      	str	r2, [sp, #12]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	bfb8      	it	lt
 80177ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80177d2:	3402      	adds	r4, #2
 80177d4:	9305      	str	r3, [sp, #20]
 80177d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80178bc <_vfiprintf_r+0x25c>
 80177da:	7821      	ldrb	r1, [r4, #0]
 80177dc:	2203      	movs	r2, #3
 80177de:	4650      	mov	r0, sl
 80177e0:	f7e8 fd16 	bl	8000210 <memchr>
 80177e4:	b140      	cbz	r0, 80177f8 <_vfiprintf_r+0x198>
 80177e6:	2340      	movs	r3, #64	; 0x40
 80177e8:	eba0 000a 	sub.w	r0, r0, sl
 80177ec:	fa03 f000 	lsl.w	r0, r3, r0
 80177f0:	9b04      	ldr	r3, [sp, #16]
 80177f2:	4303      	orrs	r3, r0
 80177f4:	3401      	adds	r4, #1
 80177f6:	9304      	str	r3, [sp, #16]
 80177f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177fc:	482c      	ldr	r0, [pc, #176]	; (80178b0 <_vfiprintf_r+0x250>)
 80177fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017802:	2206      	movs	r2, #6
 8017804:	f7e8 fd04 	bl	8000210 <memchr>
 8017808:	2800      	cmp	r0, #0
 801780a:	d03f      	beq.n	801788c <_vfiprintf_r+0x22c>
 801780c:	4b29      	ldr	r3, [pc, #164]	; (80178b4 <_vfiprintf_r+0x254>)
 801780e:	bb1b      	cbnz	r3, 8017858 <_vfiprintf_r+0x1f8>
 8017810:	9b03      	ldr	r3, [sp, #12]
 8017812:	3307      	adds	r3, #7
 8017814:	f023 0307 	bic.w	r3, r3, #7
 8017818:	3308      	adds	r3, #8
 801781a:	9303      	str	r3, [sp, #12]
 801781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801781e:	443b      	add	r3, r7
 8017820:	9309      	str	r3, [sp, #36]	; 0x24
 8017822:	e767      	b.n	80176f4 <_vfiprintf_r+0x94>
 8017824:	fb0c 3202 	mla	r2, ip, r2, r3
 8017828:	460c      	mov	r4, r1
 801782a:	2001      	movs	r0, #1
 801782c:	e7a5      	b.n	801777a <_vfiprintf_r+0x11a>
 801782e:	2300      	movs	r3, #0
 8017830:	3401      	adds	r4, #1
 8017832:	9305      	str	r3, [sp, #20]
 8017834:	4619      	mov	r1, r3
 8017836:	f04f 0c0a 	mov.w	ip, #10
 801783a:	4620      	mov	r0, r4
 801783c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017840:	3a30      	subs	r2, #48	; 0x30
 8017842:	2a09      	cmp	r2, #9
 8017844:	d903      	bls.n	801784e <_vfiprintf_r+0x1ee>
 8017846:	2b00      	cmp	r3, #0
 8017848:	d0c5      	beq.n	80177d6 <_vfiprintf_r+0x176>
 801784a:	9105      	str	r1, [sp, #20]
 801784c:	e7c3      	b.n	80177d6 <_vfiprintf_r+0x176>
 801784e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017852:	4604      	mov	r4, r0
 8017854:	2301      	movs	r3, #1
 8017856:	e7f0      	b.n	801783a <_vfiprintf_r+0x1da>
 8017858:	ab03      	add	r3, sp, #12
 801785a:	9300      	str	r3, [sp, #0]
 801785c:	462a      	mov	r2, r5
 801785e:	4b16      	ldr	r3, [pc, #88]	; (80178b8 <_vfiprintf_r+0x258>)
 8017860:	a904      	add	r1, sp, #16
 8017862:	4630      	mov	r0, r6
 8017864:	f3af 8000 	nop.w
 8017868:	4607      	mov	r7, r0
 801786a:	1c78      	adds	r0, r7, #1
 801786c:	d1d6      	bne.n	801781c <_vfiprintf_r+0x1bc>
 801786e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017870:	07d9      	lsls	r1, r3, #31
 8017872:	d405      	bmi.n	8017880 <_vfiprintf_r+0x220>
 8017874:	89ab      	ldrh	r3, [r5, #12]
 8017876:	059a      	lsls	r2, r3, #22
 8017878:	d402      	bmi.n	8017880 <_vfiprintf_r+0x220>
 801787a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801787c:	f7ff fcc9 	bl	8017212 <__retarget_lock_release_recursive>
 8017880:	89ab      	ldrh	r3, [r5, #12]
 8017882:	065b      	lsls	r3, r3, #25
 8017884:	f53f af12 	bmi.w	80176ac <_vfiprintf_r+0x4c>
 8017888:	9809      	ldr	r0, [sp, #36]	; 0x24
 801788a:	e711      	b.n	80176b0 <_vfiprintf_r+0x50>
 801788c:	ab03      	add	r3, sp, #12
 801788e:	9300      	str	r3, [sp, #0]
 8017890:	462a      	mov	r2, r5
 8017892:	4b09      	ldr	r3, [pc, #36]	; (80178b8 <_vfiprintf_r+0x258>)
 8017894:	a904      	add	r1, sp, #16
 8017896:	4630      	mov	r0, r6
 8017898:	f000 f880 	bl	801799c <_printf_i>
 801789c:	e7e4      	b.n	8017868 <_vfiprintf_r+0x208>
 801789e:	bf00      	nop
 80178a0:	0802ce54 	.word	0x0802ce54
 80178a4:	0802ce74 	.word	0x0802ce74
 80178a8:	0802ce34 	.word	0x0802ce34
 80178ac:	0802ce94 	.word	0x0802ce94
 80178b0:	0802ce9e 	.word	0x0802ce9e
 80178b4:	00000000 	.word	0x00000000
 80178b8:	0801763b 	.word	0x0801763b
 80178bc:	0802ce9a 	.word	0x0802ce9a

080178c0 <_printf_common>:
 80178c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178c4:	4616      	mov	r6, r2
 80178c6:	4699      	mov	r9, r3
 80178c8:	688a      	ldr	r2, [r1, #8]
 80178ca:	690b      	ldr	r3, [r1, #16]
 80178cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80178d0:	4293      	cmp	r3, r2
 80178d2:	bfb8      	it	lt
 80178d4:	4613      	movlt	r3, r2
 80178d6:	6033      	str	r3, [r6, #0]
 80178d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80178dc:	4607      	mov	r7, r0
 80178de:	460c      	mov	r4, r1
 80178e0:	b10a      	cbz	r2, 80178e6 <_printf_common+0x26>
 80178e2:	3301      	adds	r3, #1
 80178e4:	6033      	str	r3, [r6, #0]
 80178e6:	6823      	ldr	r3, [r4, #0]
 80178e8:	0699      	lsls	r1, r3, #26
 80178ea:	bf42      	ittt	mi
 80178ec:	6833      	ldrmi	r3, [r6, #0]
 80178ee:	3302      	addmi	r3, #2
 80178f0:	6033      	strmi	r3, [r6, #0]
 80178f2:	6825      	ldr	r5, [r4, #0]
 80178f4:	f015 0506 	ands.w	r5, r5, #6
 80178f8:	d106      	bne.n	8017908 <_printf_common+0x48>
 80178fa:	f104 0a19 	add.w	sl, r4, #25
 80178fe:	68e3      	ldr	r3, [r4, #12]
 8017900:	6832      	ldr	r2, [r6, #0]
 8017902:	1a9b      	subs	r3, r3, r2
 8017904:	42ab      	cmp	r3, r5
 8017906:	dc26      	bgt.n	8017956 <_printf_common+0x96>
 8017908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801790c:	1e13      	subs	r3, r2, #0
 801790e:	6822      	ldr	r2, [r4, #0]
 8017910:	bf18      	it	ne
 8017912:	2301      	movne	r3, #1
 8017914:	0692      	lsls	r2, r2, #26
 8017916:	d42b      	bmi.n	8017970 <_printf_common+0xb0>
 8017918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801791c:	4649      	mov	r1, r9
 801791e:	4638      	mov	r0, r7
 8017920:	47c0      	blx	r8
 8017922:	3001      	adds	r0, #1
 8017924:	d01e      	beq.n	8017964 <_printf_common+0xa4>
 8017926:	6823      	ldr	r3, [r4, #0]
 8017928:	68e5      	ldr	r5, [r4, #12]
 801792a:	6832      	ldr	r2, [r6, #0]
 801792c:	f003 0306 	and.w	r3, r3, #6
 8017930:	2b04      	cmp	r3, #4
 8017932:	bf08      	it	eq
 8017934:	1aad      	subeq	r5, r5, r2
 8017936:	68a3      	ldr	r3, [r4, #8]
 8017938:	6922      	ldr	r2, [r4, #16]
 801793a:	bf0c      	ite	eq
 801793c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017940:	2500      	movne	r5, #0
 8017942:	4293      	cmp	r3, r2
 8017944:	bfc4      	itt	gt
 8017946:	1a9b      	subgt	r3, r3, r2
 8017948:	18ed      	addgt	r5, r5, r3
 801794a:	2600      	movs	r6, #0
 801794c:	341a      	adds	r4, #26
 801794e:	42b5      	cmp	r5, r6
 8017950:	d11a      	bne.n	8017988 <_printf_common+0xc8>
 8017952:	2000      	movs	r0, #0
 8017954:	e008      	b.n	8017968 <_printf_common+0xa8>
 8017956:	2301      	movs	r3, #1
 8017958:	4652      	mov	r2, sl
 801795a:	4649      	mov	r1, r9
 801795c:	4638      	mov	r0, r7
 801795e:	47c0      	blx	r8
 8017960:	3001      	adds	r0, #1
 8017962:	d103      	bne.n	801796c <_printf_common+0xac>
 8017964:	f04f 30ff 	mov.w	r0, #4294967295
 8017968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801796c:	3501      	adds	r5, #1
 801796e:	e7c6      	b.n	80178fe <_printf_common+0x3e>
 8017970:	18e1      	adds	r1, r4, r3
 8017972:	1c5a      	adds	r2, r3, #1
 8017974:	2030      	movs	r0, #48	; 0x30
 8017976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801797a:	4422      	add	r2, r4
 801797c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017984:	3302      	adds	r3, #2
 8017986:	e7c7      	b.n	8017918 <_printf_common+0x58>
 8017988:	2301      	movs	r3, #1
 801798a:	4622      	mov	r2, r4
 801798c:	4649      	mov	r1, r9
 801798e:	4638      	mov	r0, r7
 8017990:	47c0      	blx	r8
 8017992:	3001      	adds	r0, #1
 8017994:	d0e6      	beq.n	8017964 <_printf_common+0xa4>
 8017996:	3601      	adds	r6, #1
 8017998:	e7d9      	b.n	801794e <_printf_common+0x8e>
	...

0801799c <_printf_i>:
 801799c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80179a0:	7e0f      	ldrb	r7, [r1, #24]
 80179a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80179a4:	2f78      	cmp	r7, #120	; 0x78
 80179a6:	4691      	mov	r9, r2
 80179a8:	4680      	mov	r8, r0
 80179aa:	460c      	mov	r4, r1
 80179ac:	469a      	mov	sl, r3
 80179ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80179b2:	d807      	bhi.n	80179c4 <_printf_i+0x28>
 80179b4:	2f62      	cmp	r7, #98	; 0x62
 80179b6:	d80a      	bhi.n	80179ce <_printf_i+0x32>
 80179b8:	2f00      	cmp	r7, #0
 80179ba:	f000 80d8 	beq.w	8017b6e <_printf_i+0x1d2>
 80179be:	2f58      	cmp	r7, #88	; 0x58
 80179c0:	f000 80a3 	beq.w	8017b0a <_printf_i+0x16e>
 80179c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80179c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80179cc:	e03a      	b.n	8017a44 <_printf_i+0xa8>
 80179ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80179d2:	2b15      	cmp	r3, #21
 80179d4:	d8f6      	bhi.n	80179c4 <_printf_i+0x28>
 80179d6:	a101      	add	r1, pc, #4	; (adr r1, 80179dc <_printf_i+0x40>)
 80179d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80179dc:	08017a35 	.word	0x08017a35
 80179e0:	08017a49 	.word	0x08017a49
 80179e4:	080179c5 	.word	0x080179c5
 80179e8:	080179c5 	.word	0x080179c5
 80179ec:	080179c5 	.word	0x080179c5
 80179f0:	080179c5 	.word	0x080179c5
 80179f4:	08017a49 	.word	0x08017a49
 80179f8:	080179c5 	.word	0x080179c5
 80179fc:	080179c5 	.word	0x080179c5
 8017a00:	080179c5 	.word	0x080179c5
 8017a04:	080179c5 	.word	0x080179c5
 8017a08:	08017b55 	.word	0x08017b55
 8017a0c:	08017a79 	.word	0x08017a79
 8017a10:	08017b37 	.word	0x08017b37
 8017a14:	080179c5 	.word	0x080179c5
 8017a18:	080179c5 	.word	0x080179c5
 8017a1c:	08017b77 	.word	0x08017b77
 8017a20:	080179c5 	.word	0x080179c5
 8017a24:	08017a79 	.word	0x08017a79
 8017a28:	080179c5 	.word	0x080179c5
 8017a2c:	080179c5 	.word	0x080179c5
 8017a30:	08017b3f 	.word	0x08017b3f
 8017a34:	682b      	ldr	r3, [r5, #0]
 8017a36:	1d1a      	adds	r2, r3, #4
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	602a      	str	r2, [r5, #0]
 8017a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a44:	2301      	movs	r3, #1
 8017a46:	e0a3      	b.n	8017b90 <_printf_i+0x1f4>
 8017a48:	6820      	ldr	r0, [r4, #0]
 8017a4a:	6829      	ldr	r1, [r5, #0]
 8017a4c:	0606      	lsls	r6, r0, #24
 8017a4e:	f101 0304 	add.w	r3, r1, #4
 8017a52:	d50a      	bpl.n	8017a6a <_printf_i+0xce>
 8017a54:	680e      	ldr	r6, [r1, #0]
 8017a56:	602b      	str	r3, [r5, #0]
 8017a58:	2e00      	cmp	r6, #0
 8017a5a:	da03      	bge.n	8017a64 <_printf_i+0xc8>
 8017a5c:	232d      	movs	r3, #45	; 0x2d
 8017a5e:	4276      	negs	r6, r6
 8017a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a64:	485e      	ldr	r0, [pc, #376]	; (8017be0 <_printf_i+0x244>)
 8017a66:	230a      	movs	r3, #10
 8017a68:	e019      	b.n	8017a9e <_printf_i+0x102>
 8017a6a:	680e      	ldr	r6, [r1, #0]
 8017a6c:	602b      	str	r3, [r5, #0]
 8017a6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017a72:	bf18      	it	ne
 8017a74:	b236      	sxthne	r6, r6
 8017a76:	e7ef      	b.n	8017a58 <_printf_i+0xbc>
 8017a78:	682b      	ldr	r3, [r5, #0]
 8017a7a:	6820      	ldr	r0, [r4, #0]
 8017a7c:	1d19      	adds	r1, r3, #4
 8017a7e:	6029      	str	r1, [r5, #0]
 8017a80:	0601      	lsls	r1, r0, #24
 8017a82:	d501      	bpl.n	8017a88 <_printf_i+0xec>
 8017a84:	681e      	ldr	r6, [r3, #0]
 8017a86:	e002      	b.n	8017a8e <_printf_i+0xf2>
 8017a88:	0646      	lsls	r6, r0, #25
 8017a8a:	d5fb      	bpl.n	8017a84 <_printf_i+0xe8>
 8017a8c:	881e      	ldrh	r6, [r3, #0]
 8017a8e:	4854      	ldr	r0, [pc, #336]	; (8017be0 <_printf_i+0x244>)
 8017a90:	2f6f      	cmp	r7, #111	; 0x6f
 8017a92:	bf0c      	ite	eq
 8017a94:	2308      	moveq	r3, #8
 8017a96:	230a      	movne	r3, #10
 8017a98:	2100      	movs	r1, #0
 8017a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017a9e:	6865      	ldr	r5, [r4, #4]
 8017aa0:	60a5      	str	r5, [r4, #8]
 8017aa2:	2d00      	cmp	r5, #0
 8017aa4:	bfa2      	ittt	ge
 8017aa6:	6821      	ldrge	r1, [r4, #0]
 8017aa8:	f021 0104 	bicge.w	r1, r1, #4
 8017aac:	6021      	strge	r1, [r4, #0]
 8017aae:	b90e      	cbnz	r6, 8017ab4 <_printf_i+0x118>
 8017ab0:	2d00      	cmp	r5, #0
 8017ab2:	d04d      	beq.n	8017b50 <_printf_i+0x1b4>
 8017ab4:	4615      	mov	r5, r2
 8017ab6:	fbb6 f1f3 	udiv	r1, r6, r3
 8017aba:	fb03 6711 	mls	r7, r3, r1, r6
 8017abe:	5dc7      	ldrb	r7, [r0, r7]
 8017ac0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017ac4:	4637      	mov	r7, r6
 8017ac6:	42bb      	cmp	r3, r7
 8017ac8:	460e      	mov	r6, r1
 8017aca:	d9f4      	bls.n	8017ab6 <_printf_i+0x11a>
 8017acc:	2b08      	cmp	r3, #8
 8017ace:	d10b      	bne.n	8017ae8 <_printf_i+0x14c>
 8017ad0:	6823      	ldr	r3, [r4, #0]
 8017ad2:	07de      	lsls	r6, r3, #31
 8017ad4:	d508      	bpl.n	8017ae8 <_printf_i+0x14c>
 8017ad6:	6923      	ldr	r3, [r4, #16]
 8017ad8:	6861      	ldr	r1, [r4, #4]
 8017ada:	4299      	cmp	r1, r3
 8017adc:	bfde      	ittt	le
 8017ade:	2330      	movle	r3, #48	; 0x30
 8017ae0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017ae4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017ae8:	1b52      	subs	r2, r2, r5
 8017aea:	6122      	str	r2, [r4, #16]
 8017aec:	f8cd a000 	str.w	sl, [sp]
 8017af0:	464b      	mov	r3, r9
 8017af2:	aa03      	add	r2, sp, #12
 8017af4:	4621      	mov	r1, r4
 8017af6:	4640      	mov	r0, r8
 8017af8:	f7ff fee2 	bl	80178c0 <_printf_common>
 8017afc:	3001      	adds	r0, #1
 8017afe:	d14c      	bne.n	8017b9a <_printf_i+0x1fe>
 8017b00:	f04f 30ff 	mov.w	r0, #4294967295
 8017b04:	b004      	add	sp, #16
 8017b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b0a:	4835      	ldr	r0, [pc, #212]	; (8017be0 <_printf_i+0x244>)
 8017b0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017b10:	6829      	ldr	r1, [r5, #0]
 8017b12:	6823      	ldr	r3, [r4, #0]
 8017b14:	f851 6b04 	ldr.w	r6, [r1], #4
 8017b18:	6029      	str	r1, [r5, #0]
 8017b1a:	061d      	lsls	r5, r3, #24
 8017b1c:	d514      	bpl.n	8017b48 <_printf_i+0x1ac>
 8017b1e:	07df      	lsls	r7, r3, #31
 8017b20:	bf44      	itt	mi
 8017b22:	f043 0320 	orrmi.w	r3, r3, #32
 8017b26:	6023      	strmi	r3, [r4, #0]
 8017b28:	b91e      	cbnz	r6, 8017b32 <_printf_i+0x196>
 8017b2a:	6823      	ldr	r3, [r4, #0]
 8017b2c:	f023 0320 	bic.w	r3, r3, #32
 8017b30:	6023      	str	r3, [r4, #0]
 8017b32:	2310      	movs	r3, #16
 8017b34:	e7b0      	b.n	8017a98 <_printf_i+0xfc>
 8017b36:	6823      	ldr	r3, [r4, #0]
 8017b38:	f043 0320 	orr.w	r3, r3, #32
 8017b3c:	6023      	str	r3, [r4, #0]
 8017b3e:	2378      	movs	r3, #120	; 0x78
 8017b40:	4828      	ldr	r0, [pc, #160]	; (8017be4 <_printf_i+0x248>)
 8017b42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b46:	e7e3      	b.n	8017b10 <_printf_i+0x174>
 8017b48:	0659      	lsls	r1, r3, #25
 8017b4a:	bf48      	it	mi
 8017b4c:	b2b6      	uxthmi	r6, r6
 8017b4e:	e7e6      	b.n	8017b1e <_printf_i+0x182>
 8017b50:	4615      	mov	r5, r2
 8017b52:	e7bb      	b.n	8017acc <_printf_i+0x130>
 8017b54:	682b      	ldr	r3, [r5, #0]
 8017b56:	6826      	ldr	r6, [r4, #0]
 8017b58:	6961      	ldr	r1, [r4, #20]
 8017b5a:	1d18      	adds	r0, r3, #4
 8017b5c:	6028      	str	r0, [r5, #0]
 8017b5e:	0635      	lsls	r5, r6, #24
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	d501      	bpl.n	8017b68 <_printf_i+0x1cc>
 8017b64:	6019      	str	r1, [r3, #0]
 8017b66:	e002      	b.n	8017b6e <_printf_i+0x1d2>
 8017b68:	0670      	lsls	r0, r6, #25
 8017b6a:	d5fb      	bpl.n	8017b64 <_printf_i+0x1c8>
 8017b6c:	8019      	strh	r1, [r3, #0]
 8017b6e:	2300      	movs	r3, #0
 8017b70:	6123      	str	r3, [r4, #16]
 8017b72:	4615      	mov	r5, r2
 8017b74:	e7ba      	b.n	8017aec <_printf_i+0x150>
 8017b76:	682b      	ldr	r3, [r5, #0]
 8017b78:	1d1a      	adds	r2, r3, #4
 8017b7a:	602a      	str	r2, [r5, #0]
 8017b7c:	681d      	ldr	r5, [r3, #0]
 8017b7e:	6862      	ldr	r2, [r4, #4]
 8017b80:	2100      	movs	r1, #0
 8017b82:	4628      	mov	r0, r5
 8017b84:	f7e8 fb44 	bl	8000210 <memchr>
 8017b88:	b108      	cbz	r0, 8017b8e <_printf_i+0x1f2>
 8017b8a:	1b40      	subs	r0, r0, r5
 8017b8c:	6060      	str	r0, [r4, #4]
 8017b8e:	6863      	ldr	r3, [r4, #4]
 8017b90:	6123      	str	r3, [r4, #16]
 8017b92:	2300      	movs	r3, #0
 8017b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b98:	e7a8      	b.n	8017aec <_printf_i+0x150>
 8017b9a:	6923      	ldr	r3, [r4, #16]
 8017b9c:	462a      	mov	r2, r5
 8017b9e:	4649      	mov	r1, r9
 8017ba0:	4640      	mov	r0, r8
 8017ba2:	47d0      	blx	sl
 8017ba4:	3001      	adds	r0, #1
 8017ba6:	d0ab      	beq.n	8017b00 <_printf_i+0x164>
 8017ba8:	6823      	ldr	r3, [r4, #0]
 8017baa:	079b      	lsls	r3, r3, #30
 8017bac:	d413      	bmi.n	8017bd6 <_printf_i+0x23a>
 8017bae:	68e0      	ldr	r0, [r4, #12]
 8017bb0:	9b03      	ldr	r3, [sp, #12]
 8017bb2:	4298      	cmp	r0, r3
 8017bb4:	bfb8      	it	lt
 8017bb6:	4618      	movlt	r0, r3
 8017bb8:	e7a4      	b.n	8017b04 <_printf_i+0x168>
 8017bba:	2301      	movs	r3, #1
 8017bbc:	4632      	mov	r2, r6
 8017bbe:	4649      	mov	r1, r9
 8017bc0:	4640      	mov	r0, r8
 8017bc2:	47d0      	blx	sl
 8017bc4:	3001      	adds	r0, #1
 8017bc6:	d09b      	beq.n	8017b00 <_printf_i+0x164>
 8017bc8:	3501      	adds	r5, #1
 8017bca:	68e3      	ldr	r3, [r4, #12]
 8017bcc:	9903      	ldr	r1, [sp, #12]
 8017bce:	1a5b      	subs	r3, r3, r1
 8017bd0:	42ab      	cmp	r3, r5
 8017bd2:	dcf2      	bgt.n	8017bba <_printf_i+0x21e>
 8017bd4:	e7eb      	b.n	8017bae <_printf_i+0x212>
 8017bd6:	2500      	movs	r5, #0
 8017bd8:	f104 0619 	add.w	r6, r4, #25
 8017bdc:	e7f5      	b.n	8017bca <_printf_i+0x22e>
 8017bde:	bf00      	nop
 8017be0:	0802cea5 	.word	0x0802cea5
 8017be4:	0802ceb6 	.word	0x0802ceb6

08017be8 <__sread>:
 8017be8:	b510      	push	{r4, lr}
 8017bea:	460c      	mov	r4, r1
 8017bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bf0:	f000 f8b6 	bl	8017d60 <_read_r>
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	bfab      	itete	ge
 8017bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8017bfc:	181b      	addge	r3, r3, r0
 8017bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c02:	bfac      	ite	ge
 8017c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c06:	81a3      	strhlt	r3, [r4, #12]
 8017c08:	bd10      	pop	{r4, pc}

08017c0a <__swrite>:
 8017c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c0e:	461f      	mov	r7, r3
 8017c10:	898b      	ldrh	r3, [r1, #12]
 8017c12:	05db      	lsls	r3, r3, #23
 8017c14:	4605      	mov	r5, r0
 8017c16:	460c      	mov	r4, r1
 8017c18:	4616      	mov	r6, r2
 8017c1a:	d505      	bpl.n	8017c28 <__swrite+0x1e>
 8017c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c20:	2302      	movs	r3, #2
 8017c22:	2200      	movs	r2, #0
 8017c24:	f000 f868 	bl	8017cf8 <_lseek_r>
 8017c28:	89a3      	ldrh	r3, [r4, #12]
 8017c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c32:	81a3      	strh	r3, [r4, #12]
 8017c34:	4632      	mov	r2, r6
 8017c36:	463b      	mov	r3, r7
 8017c38:	4628      	mov	r0, r5
 8017c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c3e:	f000 b817 	b.w	8017c70 <_write_r>

08017c42 <__sseek>:
 8017c42:	b510      	push	{r4, lr}
 8017c44:	460c      	mov	r4, r1
 8017c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c4a:	f000 f855 	bl	8017cf8 <_lseek_r>
 8017c4e:	1c43      	adds	r3, r0, #1
 8017c50:	89a3      	ldrh	r3, [r4, #12]
 8017c52:	bf15      	itete	ne
 8017c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017c5e:	81a3      	strheq	r3, [r4, #12]
 8017c60:	bf18      	it	ne
 8017c62:	81a3      	strhne	r3, [r4, #12]
 8017c64:	bd10      	pop	{r4, pc}

08017c66 <__sclose>:
 8017c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c6a:	f000 b813 	b.w	8017c94 <_close_r>
	...

08017c70 <_write_r>:
 8017c70:	b538      	push	{r3, r4, r5, lr}
 8017c72:	4d07      	ldr	r5, [pc, #28]	; (8017c90 <_write_r+0x20>)
 8017c74:	4604      	mov	r4, r0
 8017c76:	4608      	mov	r0, r1
 8017c78:	4611      	mov	r1, r2
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	602a      	str	r2, [r5, #0]
 8017c7e:	461a      	mov	r2, r3
 8017c80:	f000 fff0 	bl	8018c64 <_write>
 8017c84:	1c43      	adds	r3, r0, #1
 8017c86:	d102      	bne.n	8017c8e <_write_r+0x1e>
 8017c88:	682b      	ldr	r3, [r5, #0]
 8017c8a:	b103      	cbz	r3, 8017c8e <_write_r+0x1e>
 8017c8c:	6023      	str	r3, [r4, #0]
 8017c8e:	bd38      	pop	{r3, r4, r5, pc}
 8017c90:	20003b3c 	.word	0x20003b3c

08017c94 <_close_r>:
 8017c94:	b538      	push	{r3, r4, r5, lr}
 8017c96:	4d06      	ldr	r5, [pc, #24]	; (8017cb0 <_close_r+0x1c>)
 8017c98:	2300      	movs	r3, #0
 8017c9a:	4604      	mov	r4, r0
 8017c9c:	4608      	mov	r0, r1
 8017c9e:	602b      	str	r3, [r5, #0]
 8017ca0:	f000 ffb8 	bl	8018c14 <_close>
 8017ca4:	1c43      	adds	r3, r0, #1
 8017ca6:	d102      	bne.n	8017cae <_close_r+0x1a>
 8017ca8:	682b      	ldr	r3, [r5, #0]
 8017caa:	b103      	cbz	r3, 8017cae <_close_r+0x1a>
 8017cac:	6023      	str	r3, [r4, #0]
 8017cae:	bd38      	pop	{r3, r4, r5, pc}
 8017cb0:	20003b3c 	.word	0x20003b3c

08017cb4 <_fstat_r>:
 8017cb4:	b538      	push	{r3, r4, r5, lr}
 8017cb6:	4d07      	ldr	r5, [pc, #28]	; (8017cd4 <_fstat_r+0x20>)
 8017cb8:	2300      	movs	r3, #0
 8017cba:	4604      	mov	r4, r0
 8017cbc:	4608      	mov	r0, r1
 8017cbe:	4611      	mov	r1, r2
 8017cc0:	602b      	str	r3, [r5, #0]
 8017cc2:	f000 ffaf 	bl	8018c24 <_fstat>
 8017cc6:	1c43      	adds	r3, r0, #1
 8017cc8:	d102      	bne.n	8017cd0 <_fstat_r+0x1c>
 8017cca:	682b      	ldr	r3, [r5, #0]
 8017ccc:	b103      	cbz	r3, 8017cd0 <_fstat_r+0x1c>
 8017cce:	6023      	str	r3, [r4, #0]
 8017cd0:	bd38      	pop	{r3, r4, r5, pc}
 8017cd2:	bf00      	nop
 8017cd4:	20003b3c 	.word	0x20003b3c

08017cd8 <_isatty_r>:
 8017cd8:	b538      	push	{r3, r4, r5, lr}
 8017cda:	4d06      	ldr	r5, [pc, #24]	; (8017cf4 <_isatty_r+0x1c>)
 8017cdc:	2300      	movs	r3, #0
 8017cde:	4604      	mov	r4, r0
 8017ce0:	4608      	mov	r0, r1
 8017ce2:	602b      	str	r3, [r5, #0]
 8017ce4:	f000 ffa6 	bl	8018c34 <_isatty>
 8017ce8:	1c43      	adds	r3, r0, #1
 8017cea:	d102      	bne.n	8017cf2 <_isatty_r+0x1a>
 8017cec:	682b      	ldr	r3, [r5, #0]
 8017cee:	b103      	cbz	r3, 8017cf2 <_isatty_r+0x1a>
 8017cf0:	6023      	str	r3, [r4, #0]
 8017cf2:	bd38      	pop	{r3, r4, r5, pc}
 8017cf4:	20003b3c 	.word	0x20003b3c

08017cf8 <_lseek_r>:
 8017cf8:	b538      	push	{r3, r4, r5, lr}
 8017cfa:	4d07      	ldr	r5, [pc, #28]	; (8017d18 <_lseek_r+0x20>)
 8017cfc:	4604      	mov	r4, r0
 8017cfe:	4608      	mov	r0, r1
 8017d00:	4611      	mov	r1, r2
 8017d02:	2200      	movs	r2, #0
 8017d04:	602a      	str	r2, [r5, #0]
 8017d06:	461a      	mov	r2, r3
 8017d08:	f000 ff9c 	bl	8018c44 <_lseek>
 8017d0c:	1c43      	adds	r3, r0, #1
 8017d0e:	d102      	bne.n	8017d16 <_lseek_r+0x1e>
 8017d10:	682b      	ldr	r3, [r5, #0]
 8017d12:	b103      	cbz	r3, 8017d16 <_lseek_r+0x1e>
 8017d14:	6023      	str	r3, [r4, #0]
 8017d16:	bd38      	pop	{r3, r4, r5, pc}
 8017d18:	20003b3c 	.word	0x20003b3c

08017d1c <memmove>:
 8017d1c:	4288      	cmp	r0, r1
 8017d1e:	b510      	push	{r4, lr}
 8017d20:	eb01 0402 	add.w	r4, r1, r2
 8017d24:	d902      	bls.n	8017d2c <memmove+0x10>
 8017d26:	4284      	cmp	r4, r0
 8017d28:	4623      	mov	r3, r4
 8017d2a:	d807      	bhi.n	8017d3c <memmove+0x20>
 8017d2c:	1e43      	subs	r3, r0, #1
 8017d2e:	42a1      	cmp	r1, r4
 8017d30:	d008      	beq.n	8017d44 <memmove+0x28>
 8017d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d3a:	e7f8      	b.n	8017d2e <memmove+0x12>
 8017d3c:	4402      	add	r2, r0
 8017d3e:	4601      	mov	r1, r0
 8017d40:	428a      	cmp	r2, r1
 8017d42:	d100      	bne.n	8017d46 <memmove+0x2a>
 8017d44:	bd10      	pop	{r4, pc}
 8017d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d4e:	e7f7      	b.n	8017d40 <memmove+0x24>

08017d50 <_malloc_usable_size_r>:
 8017d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d54:	1f18      	subs	r0, r3, #4
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	bfbc      	itt	lt
 8017d5a:	580b      	ldrlt	r3, [r1, r0]
 8017d5c:	18c0      	addlt	r0, r0, r3
 8017d5e:	4770      	bx	lr

08017d60 <_read_r>:
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	4d07      	ldr	r5, [pc, #28]	; (8017d80 <_read_r+0x20>)
 8017d64:	4604      	mov	r4, r0
 8017d66:	4608      	mov	r0, r1
 8017d68:	4611      	mov	r1, r2
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	602a      	str	r2, [r5, #0]
 8017d6e:	461a      	mov	r2, r3
 8017d70:	f000 ff70 	bl	8018c54 <_read>
 8017d74:	1c43      	adds	r3, r0, #1
 8017d76:	d102      	bne.n	8017d7e <_read_r+0x1e>
 8017d78:	682b      	ldr	r3, [r5, #0]
 8017d7a:	b103      	cbz	r3, 8017d7e <_read_r+0x1e>
 8017d7c:	6023      	str	r3, [r4, #0]
 8017d7e:	bd38      	pop	{r3, r4, r5, pc}
 8017d80:	20003b3c 	.word	0x20003b3c

08017d84 <pow>:
 8017d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d86:	ed2d 8b02 	vpush	{d8}
 8017d8a:	eeb0 8a40 	vmov.f32	s16, s0
 8017d8e:	eef0 8a60 	vmov.f32	s17, s1
 8017d92:	ec55 4b11 	vmov	r4, r5, d1
 8017d96:	f000 f893 	bl	8017ec0 <__ieee754_pow>
 8017d9a:	4622      	mov	r2, r4
 8017d9c:	462b      	mov	r3, r5
 8017d9e:	4620      	mov	r0, r4
 8017da0:	4629      	mov	r1, r5
 8017da2:	ec57 6b10 	vmov	r6, r7, d0
 8017da6:	f7e8 fed9 	bl	8000b5c <__aeabi_dcmpun>
 8017daa:	2800      	cmp	r0, #0
 8017dac:	d13b      	bne.n	8017e26 <pow+0xa2>
 8017dae:	ec51 0b18 	vmov	r0, r1, d8
 8017db2:	2200      	movs	r2, #0
 8017db4:	2300      	movs	r3, #0
 8017db6:	f7e8 fe9f 	bl	8000af8 <__aeabi_dcmpeq>
 8017dba:	b1b8      	cbz	r0, 8017dec <pow+0x68>
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	4629      	mov	r1, r5
 8017dc4:	f7e8 fe98 	bl	8000af8 <__aeabi_dcmpeq>
 8017dc8:	2800      	cmp	r0, #0
 8017dca:	d146      	bne.n	8017e5a <pow+0xd6>
 8017dcc:	ec45 4b10 	vmov	d0, r4, r5
 8017dd0:	f000 fe8f 	bl	8018af2 <finite>
 8017dd4:	b338      	cbz	r0, 8017e26 <pow+0xa2>
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	2300      	movs	r3, #0
 8017dda:	4620      	mov	r0, r4
 8017ddc:	4629      	mov	r1, r5
 8017dde:	f7e8 fe95 	bl	8000b0c <__aeabi_dcmplt>
 8017de2:	b300      	cbz	r0, 8017e26 <pow+0xa2>
 8017de4:	f7fe fd92 	bl	801690c <__errno>
 8017de8:	2322      	movs	r3, #34	; 0x22
 8017dea:	e01b      	b.n	8017e24 <pow+0xa0>
 8017dec:	ec47 6b10 	vmov	d0, r6, r7
 8017df0:	f000 fe7f 	bl	8018af2 <finite>
 8017df4:	b9e0      	cbnz	r0, 8017e30 <pow+0xac>
 8017df6:	eeb0 0a48 	vmov.f32	s0, s16
 8017dfa:	eef0 0a68 	vmov.f32	s1, s17
 8017dfe:	f000 fe78 	bl	8018af2 <finite>
 8017e02:	b1a8      	cbz	r0, 8017e30 <pow+0xac>
 8017e04:	ec45 4b10 	vmov	d0, r4, r5
 8017e08:	f000 fe73 	bl	8018af2 <finite>
 8017e0c:	b180      	cbz	r0, 8017e30 <pow+0xac>
 8017e0e:	4632      	mov	r2, r6
 8017e10:	463b      	mov	r3, r7
 8017e12:	4630      	mov	r0, r6
 8017e14:	4639      	mov	r1, r7
 8017e16:	f7e8 fea1 	bl	8000b5c <__aeabi_dcmpun>
 8017e1a:	2800      	cmp	r0, #0
 8017e1c:	d0e2      	beq.n	8017de4 <pow+0x60>
 8017e1e:	f7fe fd75 	bl	801690c <__errno>
 8017e22:	2321      	movs	r3, #33	; 0x21
 8017e24:	6003      	str	r3, [r0, #0]
 8017e26:	ecbd 8b02 	vpop	{d8}
 8017e2a:	ec47 6b10 	vmov	d0, r6, r7
 8017e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e30:	2200      	movs	r2, #0
 8017e32:	2300      	movs	r3, #0
 8017e34:	4630      	mov	r0, r6
 8017e36:	4639      	mov	r1, r7
 8017e38:	f7e8 fe5e 	bl	8000af8 <__aeabi_dcmpeq>
 8017e3c:	2800      	cmp	r0, #0
 8017e3e:	d0f2      	beq.n	8017e26 <pow+0xa2>
 8017e40:	eeb0 0a48 	vmov.f32	s0, s16
 8017e44:	eef0 0a68 	vmov.f32	s1, s17
 8017e48:	f000 fe53 	bl	8018af2 <finite>
 8017e4c:	2800      	cmp	r0, #0
 8017e4e:	d0ea      	beq.n	8017e26 <pow+0xa2>
 8017e50:	ec45 4b10 	vmov	d0, r4, r5
 8017e54:	f000 fe4d 	bl	8018af2 <finite>
 8017e58:	e7c3      	b.n	8017de2 <pow+0x5e>
 8017e5a:	4f01      	ldr	r7, [pc, #4]	; (8017e60 <pow+0xdc>)
 8017e5c:	2600      	movs	r6, #0
 8017e5e:	e7e2      	b.n	8017e26 <pow+0xa2>
 8017e60:	3ff00000 	.word	0x3ff00000

08017e64 <sqrt>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	ed2d 8b02 	vpush	{d8}
 8017e6a:	ec55 4b10 	vmov	r4, r5, d0
 8017e6e:	f000 fd55 	bl	801891c <__ieee754_sqrt>
 8017e72:	4622      	mov	r2, r4
 8017e74:	462b      	mov	r3, r5
 8017e76:	4620      	mov	r0, r4
 8017e78:	4629      	mov	r1, r5
 8017e7a:	eeb0 8a40 	vmov.f32	s16, s0
 8017e7e:	eef0 8a60 	vmov.f32	s17, s1
 8017e82:	f7e8 fe6b 	bl	8000b5c <__aeabi_dcmpun>
 8017e86:	b990      	cbnz	r0, 8017eae <sqrt+0x4a>
 8017e88:	2200      	movs	r2, #0
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	4629      	mov	r1, r5
 8017e90:	f7e8 fe3c 	bl	8000b0c <__aeabi_dcmplt>
 8017e94:	b158      	cbz	r0, 8017eae <sqrt+0x4a>
 8017e96:	f7fe fd39 	bl	801690c <__errno>
 8017e9a:	2321      	movs	r3, #33	; 0x21
 8017e9c:	6003      	str	r3, [r0, #0]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	4610      	mov	r0, r2
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	f7e8 fce9 	bl	800087c <__aeabi_ddiv>
 8017eaa:	ec41 0b18 	vmov	d8, r0, r1
 8017eae:	eeb0 0a48 	vmov.f32	s0, s16
 8017eb2:	eef0 0a68 	vmov.f32	s1, s17
 8017eb6:	ecbd 8b02 	vpop	{d8}
 8017eba:	bd38      	pop	{r3, r4, r5, pc}
 8017ebc:	0000      	movs	r0, r0
	...

08017ec0 <__ieee754_pow>:
 8017ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec4:	ed2d 8b06 	vpush	{d8-d10}
 8017ec8:	b089      	sub	sp, #36	; 0x24
 8017eca:	ed8d 1b00 	vstr	d1, [sp]
 8017ece:	e9dd 2900 	ldrd	r2, r9, [sp]
 8017ed2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8017ed6:	ea58 0102 	orrs.w	r1, r8, r2
 8017eda:	ec57 6b10 	vmov	r6, r7, d0
 8017ede:	d115      	bne.n	8017f0c <__ieee754_pow+0x4c>
 8017ee0:	19b3      	adds	r3, r6, r6
 8017ee2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8017ee6:	4152      	adcs	r2, r2
 8017ee8:	4299      	cmp	r1, r3
 8017eea:	4b89      	ldr	r3, [pc, #548]	; (8018110 <__ieee754_pow+0x250>)
 8017eec:	4193      	sbcs	r3, r2
 8017eee:	f080 84d2 	bcs.w	8018896 <__ieee754_pow+0x9d6>
 8017ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ef6:	4630      	mov	r0, r6
 8017ef8:	4639      	mov	r1, r7
 8017efa:	f7e8 f9df 	bl	80002bc <__adddf3>
 8017efe:	ec41 0b10 	vmov	d0, r0, r1
 8017f02:	b009      	add	sp, #36	; 0x24
 8017f04:	ecbd 8b06 	vpop	{d8-d10}
 8017f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f0c:	4b81      	ldr	r3, [pc, #516]	; (8018114 <__ieee754_pow+0x254>)
 8017f0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8017f12:	429c      	cmp	r4, r3
 8017f14:	ee10 aa10 	vmov	sl, s0
 8017f18:	463d      	mov	r5, r7
 8017f1a:	dc06      	bgt.n	8017f2a <__ieee754_pow+0x6a>
 8017f1c:	d101      	bne.n	8017f22 <__ieee754_pow+0x62>
 8017f1e:	2e00      	cmp	r6, #0
 8017f20:	d1e7      	bne.n	8017ef2 <__ieee754_pow+0x32>
 8017f22:	4598      	cmp	r8, r3
 8017f24:	dc01      	bgt.n	8017f2a <__ieee754_pow+0x6a>
 8017f26:	d10f      	bne.n	8017f48 <__ieee754_pow+0x88>
 8017f28:	b172      	cbz	r2, 8017f48 <__ieee754_pow+0x88>
 8017f2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8017f2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8017f32:	ea55 050a 	orrs.w	r5, r5, sl
 8017f36:	d1dc      	bne.n	8017ef2 <__ieee754_pow+0x32>
 8017f38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017f3c:	18db      	adds	r3, r3, r3
 8017f3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8017f42:	4152      	adcs	r2, r2
 8017f44:	429d      	cmp	r5, r3
 8017f46:	e7d0      	b.n	8017eea <__ieee754_pow+0x2a>
 8017f48:	2d00      	cmp	r5, #0
 8017f4a:	da3b      	bge.n	8017fc4 <__ieee754_pow+0x104>
 8017f4c:	4b72      	ldr	r3, [pc, #456]	; (8018118 <__ieee754_pow+0x258>)
 8017f4e:	4598      	cmp	r8, r3
 8017f50:	dc51      	bgt.n	8017ff6 <__ieee754_pow+0x136>
 8017f52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8017f56:	4598      	cmp	r8, r3
 8017f58:	f340 84ac 	ble.w	80188b4 <__ieee754_pow+0x9f4>
 8017f5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017f60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017f64:	2b14      	cmp	r3, #20
 8017f66:	dd0f      	ble.n	8017f88 <__ieee754_pow+0xc8>
 8017f68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017f6c:	fa22 f103 	lsr.w	r1, r2, r3
 8017f70:	fa01 f303 	lsl.w	r3, r1, r3
 8017f74:	4293      	cmp	r3, r2
 8017f76:	f040 849d 	bne.w	80188b4 <__ieee754_pow+0x9f4>
 8017f7a:	f001 0101 	and.w	r1, r1, #1
 8017f7e:	f1c1 0302 	rsb	r3, r1, #2
 8017f82:	9304      	str	r3, [sp, #16]
 8017f84:	b182      	cbz	r2, 8017fa8 <__ieee754_pow+0xe8>
 8017f86:	e05f      	b.n	8018048 <__ieee754_pow+0x188>
 8017f88:	2a00      	cmp	r2, #0
 8017f8a:	d15b      	bne.n	8018044 <__ieee754_pow+0x184>
 8017f8c:	f1c3 0314 	rsb	r3, r3, #20
 8017f90:	fa48 f103 	asr.w	r1, r8, r3
 8017f94:	fa01 f303 	lsl.w	r3, r1, r3
 8017f98:	4543      	cmp	r3, r8
 8017f9a:	f040 8488 	bne.w	80188ae <__ieee754_pow+0x9ee>
 8017f9e:	f001 0101 	and.w	r1, r1, #1
 8017fa2:	f1c1 0302 	rsb	r3, r1, #2
 8017fa6:	9304      	str	r3, [sp, #16]
 8017fa8:	4b5c      	ldr	r3, [pc, #368]	; (801811c <__ieee754_pow+0x25c>)
 8017faa:	4598      	cmp	r8, r3
 8017fac:	d132      	bne.n	8018014 <__ieee754_pow+0x154>
 8017fae:	f1b9 0f00 	cmp.w	r9, #0
 8017fb2:	f280 8478 	bge.w	80188a6 <__ieee754_pow+0x9e6>
 8017fb6:	4959      	ldr	r1, [pc, #356]	; (801811c <__ieee754_pow+0x25c>)
 8017fb8:	4632      	mov	r2, r6
 8017fba:	463b      	mov	r3, r7
 8017fbc:	2000      	movs	r0, #0
 8017fbe:	f7e8 fc5d 	bl	800087c <__aeabi_ddiv>
 8017fc2:	e79c      	b.n	8017efe <__ieee754_pow+0x3e>
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	9304      	str	r3, [sp, #16]
 8017fc8:	2a00      	cmp	r2, #0
 8017fca:	d13d      	bne.n	8018048 <__ieee754_pow+0x188>
 8017fcc:	4b51      	ldr	r3, [pc, #324]	; (8018114 <__ieee754_pow+0x254>)
 8017fce:	4598      	cmp	r8, r3
 8017fd0:	d1ea      	bne.n	8017fa8 <__ieee754_pow+0xe8>
 8017fd2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017fd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017fda:	ea53 030a 	orrs.w	r3, r3, sl
 8017fde:	f000 845a 	beq.w	8018896 <__ieee754_pow+0x9d6>
 8017fe2:	4b4f      	ldr	r3, [pc, #316]	; (8018120 <__ieee754_pow+0x260>)
 8017fe4:	429c      	cmp	r4, r3
 8017fe6:	dd08      	ble.n	8017ffa <__ieee754_pow+0x13a>
 8017fe8:	f1b9 0f00 	cmp.w	r9, #0
 8017fec:	f2c0 8457 	blt.w	801889e <__ieee754_pow+0x9de>
 8017ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ff4:	e783      	b.n	8017efe <__ieee754_pow+0x3e>
 8017ff6:	2302      	movs	r3, #2
 8017ff8:	e7e5      	b.n	8017fc6 <__ieee754_pow+0x106>
 8017ffa:	f1b9 0f00 	cmp.w	r9, #0
 8017ffe:	f04f 0000 	mov.w	r0, #0
 8018002:	f04f 0100 	mov.w	r1, #0
 8018006:	f6bf af7a 	bge.w	8017efe <__ieee754_pow+0x3e>
 801800a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801800e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018012:	e774      	b.n	8017efe <__ieee754_pow+0x3e>
 8018014:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018018:	d106      	bne.n	8018028 <__ieee754_pow+0x168>
 801801a:	4632      	mov	r2, r6
 801801c:	463b      	mov	r3, r7
 801801e:	4630      	mov	r0, r6
 8018020:	4639      	mov	r1, r7
 8018022:	f7e8 fb01 	bl	8000628 <__aeabi_dmul>
 8018026:	e76a      	b.n	8017efe <__ieee754_pow+0x3e>
 8018028:	4b3e      	ldr	r3, [pc, #248]	; (8018124 <__ieee754_pow+0x264>)
 801802a:	4599      	cmp	r9, r3
 801802c:	d10c      	bne.n	8018048 <__ieee754_pow+0x188>
 801802e:	2d00      	cmp	r5, #0
 8018030:	db0a      	blt.n	8018048 <__ieee754_pow+0x188>
 8018032:	ec47 6b10 	vmov	d0, r6, r7
 8018036:	b009      	add	sp, #36	; 0x24
 8018038:	ecbd 8b06 	vpop	{d8-d10}
 801803c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018040:	f000 bc6c 	b.w	801891c <__ieee754_sqrt>
 8018044:	2300      	movs	r3, #0
 8018046:	9304      	str	r3, [sp, #16]
 8018048:	ec47 6b10 	vmov	d0, r6, r7
 801804c:	f000 fd48 	bl	8018ae0 <fabs>
 8018050:	ec51 0b10 	vmov	r0, r1, d0
 8018054:	f1ba 0f00 	cmp.w	sl, #0
 8018058:	d129      	bne.n	80180ae <__ieee754_pow+0x1ee>
 801805a:	b124      	cbz	r4, 8018066 <__ieee754_pow+0x1a6>
 801805c:	4b2f      	ldr	r3, [pc, #188]	; (801811c <__ieee754_pow+0x25c>)
 801805e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018062:	429a      	cmp	r2, r3
 8018064:	d123      	bne.n	80180ae <__ieee754_pow+0x1ee>
 8018066:	f1b9 0f00 	cmp.w	r9, #0
 801806a:	da05      	bge.n	8018078 <__ieee754_pow+0x1b8>
 801806c:	4602      	mov	r2, r0
 801806e:	460b      	mov	r3, r1
 8018070:	2000      	movs	r0, #0
 8018072:	492a      	ldr	r1, [pc, #168]	; (801811c <__ieee754_pow+0x25c>)
 8018074:	f7e8 fc02 	bl	800087c <__aeabi_ddiv>
 8018078:	2d00      	cmp	r5, #0
 801807a:	f6bf af40 	bge.w	8017efe <__ieee754_pow+0x3e>
 801807e:	9b04      	ldr	r3, [sp, #16]
 8018080:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018084:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018088:	4323      	orrs	r3, r4
 801808a:	d108      	bne.n	801809e <__ieee754_pow+0x1de>
 801808c:	4602      	mov	r2, r0
 801808e:	460b      	mov	r3, r1
 8018090:	4610      	mov	r0, r2
 8018092:	4619      	mov	r1, r3
 8018094:	f7e8 f910 	bl	80002b8 <__aeabi_dsub>
 8018098:	4602      	mov	r2, r0
 801809a:	460b      	mov	r3, r1
 801809c:	e78f      	b.n	8017fbe <__ieee754_pow+0xfe>
 801809e:	9b04      	ldr	r3, [sp, #16]
 80180a0:	2b01      	cmp	r3, #1
 80180a2:	f47f af2c 	bne.w	8017efe <__ieee754_pow+0x3e>
 80180a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80180aa:	4619      	mov	r1, r3
 80180ac:	e727      	b.n	8017efe <__ieee754_pow+0x3e>
 80180ae:	0feb      	lsrs	r3, r5, #31
 80180b0:	3b01      	subs	r3, #1
 80180b2:	9306      	str	r3, [sp, #24]
 80180b4:	9a06      	ldr	r2, [sp, #24]
 80180b6:	9b04      	ldr	r3, [sp, #16]
 80180b8:	4313      	orrs	r3, r2
 80180ba:	d102      	bne.n	80180c2 <__ieee754_pow+0x202>
 80180bc:	4632      	mov	r2, r6
 80180be:	463b      	mov	r3, r7
 80180c0:	e7e6      	b.n	8018090 <__ieee754_pow+0x1d0>
 80180c2:	4b19      	ldr	r3, [pc, #100]	; (8018128 <__ieee754_pow+0x268>)
 80180c4:	4598      	cmp	r8, r3
 80180c6:	f340 80fb 	ble.w	80182c0 <__ieee754_pow+0x400>
 80180ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80180ce:	4598      	cmp	r8, r3
 80180d0:	4b13      	ldr	r3, [pc, #76]	; (8018120 <__ieee754_pow+0x260>)
 80180d2:	dd0c      	ble.n	80180ee <__ieee754_pow+0x22e>
 80180d4:	429c      	cmp	r4, r3
 80180d6:	dc0f      	bgt.n	80180f8 <__ieee754_pow+0x238>
 80180d8:	f1b9 0f00 	cmp.w	r9, #0
 80180dc:	da0f      	bge.n	80180fe <__ieee754_pow+0x23e>
 80180de:	2000      	movs	r0, #0
 80180e0:	b009      	add	sp, #36	; 0x24
 80180e2:	ecbd 8b06 	vpop	{d8-d10}
 80180e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180ea:	f000 bcf0 	b.w	8018ace <__math_oflow>
 80180ee:	429c      	cmp	r4, r3
 80180f0:	dbf2      	blt.n	80180d8 <__ieee754_pow+0x218>
 80180f2:	4b0a      	ldr	r3, [pc, #40]	; (801811c <__ieee754_pow+0x25c>)
 80180f4:	429c      	cmp	r4, r3
 80180f6:	dd19      	ble.n	801812c <__ieee754_pow+0x26c>
 80180f8:	f1b9 0f00 	cmp.w	r9, #0
 80180fc:	dcef      	bgt.n	80180de <__ieee754_pow+0x21e>
 80180fe:	2000      	movs	r0, #0
 8018100:	b009      	add	sp, #36	; 0x24
 8018102:	ecbd 8b06 	vpop	{d8-d10}
 8018106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801810a:	f000 bcd7 	b.w	8018abc <__math_uflow>
 801810e:	bf00      	nop
 8018110:	fff00000 	.word	0xfff00000
 8018114:	7ff00000 	.word	0x7ff00000
 8018118:	433fffff 	.word	0x433fffff
 801811c:	3ff00000 	.word	0x3ff00000
 8018120:	3fefffff 	.word	0x3fefffff
 8018124:	3fe00000 	.word	0x3fe00000
 8018128:	41e00000 	.word	0x41e00000
 801812c:	4b60      	ldr	r3, [pc, #384]	; (80182b0 <__ieee754_pow+0x3f0>)
 801812e:	2200      	movs	r2, #0
 8018130:	f7e8 f8c2 	bl	80002b8 <__aeabi_dsub>
 8018134:	a354      	add	r3, pc, #336	; (adr r3, 8018288 <__ieee754_pow+0x3c8>)
 8018136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801813a:	4604      	mov	r4, r0
 801813c:	460d      	mov	r5, r1
 801813e:	f7e8 fa73 	bl	8000628 <__aeabi_dmul>
 8018142:	a353      	add	r3, pc, #332	; (adr r3, 8018290 <__ieee754_pow+0x3d0>)
 8018144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018148:	4606      	mov	r6, r0
 801814a:	460f      	mov	r7, r1
 801814c:	4620      	mov	r0, r4
 801814e:	4629      	mov	r1, r5
 8018150:	f7e8 fa6a 	bl	8000628 <__aeabi_dmul>
 8018154:	4b57      	ldr	r3, [pc, #348]	; (80182b4 <__ieee754_pow+0x3f4>)
 8018156:	4682      	mov	sl, r0
 8018158:	468b      	mov	fp, r1
 801815a:	2200      	movs	r2, #0
 801815c:	4620      	mov	r0, r4
 801815e:	4629      	mov	r1, r5
 8018160:	f7e8 fa62 	bl	8000628 <__aeabi_dmul>
 8018164:	4602      	mov	r2, r0
 8018166:	460b      	mov	r3, r1
 8018168:	a14b      	add	r1, pc, #300	; (adr r1, 8018298 <__ieee754_pow+0x3d8>)
 801816a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801816e:	f7e8 f8a3 	bl	80002b8 <__aeabi_dsub>
 8018172:	4622      	mov	r2, r4
 8018174:	462b      	mov	r3, r5
 8018176:	f7e8 fa57 	bl	8000628 <__aeabi_dmul>
 801817a:	4602      	mov	r2, r0
 801817c:	460b      	mov	r3, r1
 801817e:	2000      	movs	r0, #0
 8018180:	494d      	ldr	r1, [pc, #308]	; (80182b8 <__ieee754_pow+0x3f8>)
 8018182:	f7e8 f899 	bl	80002b8 <__aeabi_dsub>
 8018186:	4622      	mov	r2, r4
 8018188:	4680      	mov	r8, r0
 801818a:	4689      	mov	r9, r1
 801818c:	462b      	mov	r3, r5
 801818e:	4620      	mov	r0, r4
 8018190:	4629      	mov	r1, r5
 8018192:	f7e8 fa49 	bl	8000628 <__aeabi_dmul>
 8018196:	4602      	mov	r2, r0
 8018198:	460b      	mov	r3, r1
 801819a:	4640      	mov	r0, r8
 801819c:	4649      	mov	r1, r9
 801819e:	f7e8 fa43 	bl	8000628 <__aeabi_dmul>
 80181a2:	a33f      	add	r3, pc, #252	; (adr r3, 80182a0 <__ieee754_pow+0x3e0>)
 80181a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181a8:	f7e8 fa3e 	bl	8000628 <__aeabi_dmul>
 80181ac:	4602      	mov	r2, r0
 80181ae:	460b      	mov	r3, r1
 80181b0:	4650      	mov	r0, sl
 80181b2:	4659      	mov	r1, fp
 80181b4:	f7e8 f880 	bl	80002b8 <__aeabi_dsub>
 80181b8:	4602      	mov	r2, r0
 80181ba:	460b      	mov	r3, r1
 80181bc:	4680      	mov	r8, r0
 80181be:	4689      	mov	r9, r1
 80181c0:	4630      	mov	r0, r6
 80181c2:	4639      	mov	r1, r7
 80181c4:	f7e8 f87a 	bl	80002bc <__adddf3>
 80181c8:	2000      	movs	r0, #0
 80181ca:	4632      	mov	r2, r6
 80181cc:	463b      	mov	r3, r7
 80181ce:	4604      	mov	r4, r0
 80181d0:	460d      	mov	r5, r1
 80181d2:	f7e8 f871 	bl	80002b8 <__aeabi_dsub>
 80181d6:	4602      	mov	r2, r0
 80181d8:	460b      	mov	r3, r1
 80181da:	4640      	mov	r0, r8
 80181dc:	4649      	mov	r1, r9
 80181de:	f7e8 f86b 	bl	80002b8 <__aeabi_dsub>
 80181e2:	9b04      	ldr	r3, [sp, #16]
 80181e4:	9a06      	ldr	r2, [sp, #24]
 80181e6:	3b01      	subs	r3, #1
 80181e8:	4313      	orrs	r3, r2
 80181ea:	4682      	mov	sl, r0
 80181ec:	468b      	mov	fp, r1
 80181ee:	f040 81e7 	bne.w	80185c0 <__ieee754_pow+0x700>
 80181f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80182a8 <__ieee754_pow+0x3e8>
 80181f6:	eeb0 8a47 	vmov.f32	s16, s14
 80181fa:	eef0 8a67 	vmov.f32	s17, s15
 80181fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018202:	2600      	movs	r6, #0
 8018204:	4632      	mov	r2, r6
 8018206:	463b      	mov	r3, r7
 8018208:	e9dd 0100 	ldrd	r0, r1, [sp]
 801820c:	f7e8 f854 	bl	80002b8 <__aeabi_dsub>
 8018210:	4622      	mov	r2, r4
 8018212:	462b      	mov	r3, r5
 8018214:	f7e8 fa08 	bl	8000628 <__aeabi_dmul>
 8018218:	e9dd 2300 	ldrd	r2, r3, [sp]
 801821c:	4680      	mov	r8, r0
 801821e:	4689      	mov	r9, r1
 8018220:	4650      	mov	r0, sl
 8018222:	4659      	mov	r1, fp
 8018224:	f7e8 fa00 	bl	8000628 <__aeabi_dmul>
 8018228:	4602      	mov	r2, r0
 801822a:	460b      	mov	r3, r1
 801822c:	4640      	mov	r0, r8
 801822e:	4649      	mov	r1, r9
 8018230:	f7e8 f844 	bl	80002bc <__adddf3>
 8018234:	4632      	mov	r2, r6
 8018236:	463b      	mov	r3, r7
 8018238:	4680      	mov	r8, r0
 801823a:	4689      	mov	r9, r1
 801823c:	4620      	mov	r0, r4
 801823e:	4629      	mov	r1, r5
 8018240:	f7e8 f9f2 	bl	8000628 <__aeabi_dmul>
 8018244:	460b      	mov	r3, r1
 8018246:	4604      	mov	r4, r0
 8018248:	460d      	mov	r5, r1
 801824a:	4602      	mov	r2, r0
 801824c:	4649      	mov	r1, r9
 801824e:	4640      	mov	r0, r8
 8018250:	f7e8 f834 	bl	80002bc <__adddf3>
 8018254:	4b19      	ldr	r3, [pc, #100]	; (80182bc <__ieee754_pow+0x3fc>)
 8018256:	4299      	cmp	r1, r3
 8018258:	ec45 4b19 	vmov	d9, r4, r5
 801825c:	4606      	mov	r6, r0
 801825e:	460f      	mov	r7, r1
 8018260:	468b      	mov	fp, r1
 8018262:	f340 82f1 	ble.w	8018848 <__ieee754_pow+0x988>
 8018266:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801826a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801826e:	4303      	orrs	r3, r0
 8018270:	f000 81e4 	beq.w	801863c <__ieee754_pow+0x77c>
 8018274:	ec51 0b18 	vmov	r0, r1, d8
 8018278:	2200      	movs	r2, #0
 801827a:	2300      	movs	r3, #0
 801827c:	f7e8 fc46 	bl	8000b0c <__aeabi_dcmplt>
 8018280:	3800      	subs	r0, #0
 8018282:	bf18      	it	ne
 8018284:	2001      	movne	r0, #1
 8018286:	e72b      	b.n	80180e0 <__ieee754_pow+0x220>
 8018288:	60000000 	.word	0x60000000
 801828c:	3ff71547 	.word	0x3ff71547
 8018290:	f85ddf44 	.word	0xf85ddf44
 8018294:	3e54ae0b 	.word	0x3e54ae0b
 8018298:	55555555 	.word	0x55555555
 801829c:	3fd55555 	.word	0x3fd55555
 80182a0:	652b82fe 	.word	0x652b82fe
 80182a4:	3ff71547 	.word	0x3ff71547
 80182a8:	00000000 	.word	0x00000000
 80182ac:	bff00000 	.word	0xbff00000
 80182b0:	3ff00000 	.word	0x3ff00000
 80182b4:	3fd00000 	.word	0x3fd00000
 80182b8:	3fe00000 	.word	0x3fe00000
 80182bc:	408fffff 	.word	0x408fffff
 80182c0:	4bd5      	ldr	r3, [pc, #852]	; (8018618 <__ieee754_pow+0x758>)
 80182c2:	402b      	ands	r3, r5
 80182c4:	2200      	movs	r2, #0
 80182c6:	b92b      	cbnz	r3, 80182d4 <__ieee754_pow+0x414>
 80182c8:	4bd4      	ldr	r3, [pc, #848]	; (801861c <__ieee754_pow+0x75c>)
 80182ca:	f7e8 f9ad 	bl	8000628 <__aeabi_dmul>
 80182ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80182d2:	460c      	mov	r4, r1
 80182d4:	1523      	asrs	r3, r4, #20
 80182d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80182da:	4413      	add	r3, r2
 80182dc:	9305      	str	r3, [sp, #20]
 80182de:	4bd0      	ldr	r3, [pc, #832]	; (8018620 <__ieee754_pow+0x760>)
 80182e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80182e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80182e8:	429c      	cmp	r4, r3
 80182ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80182ee:	dd08      	ble.n	8018302 <__ieee754_pow+0x442>
 80182f0:	4bcc      	ldr	r3, [pc, #816]	; (8018624 <__ieee754_pow+0x764>)
 80182f2:	429c      	cmp	r4, r3
 80182f4:	f340 8162 	ble.w	80185bc <__ieee754_pow+0x6fc>
 80182f8:	9b05      	ldr	r3, [sp, #20]
 80182fa:	3301      	adds	r3, #1
 80182fc:	9305      	str	r3, [sp, #20]
 80182fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018302:	2400      	movs	r4, #0
 8018304:	00e3      	lsls	r3, r4, #3
 8018306:	9307      	str	r3, [sp, #28]
 8018308:	4bc7      	ldr	r3, [pc, #796]	; (8018628 <__ieee754_pow+0x768>)
 801830a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801830e:	ed93 7b00 	vldr	d7, [r3]
 8018312:	4629      	mov	r1, r5
 8018314:	ec53 2b17 	vmov	r2, r3, d7
 8018318:	eeb0 9a47 	vmov.f32	s18, s14
 801831c:	eef0 9a67 	vmov.f32	s19, s15
 8018320:	4682      	mov	sl, r0
 8018322:	f7e7 ffc9 	bl	80002b8 <__aeabi_dsub>
 8018326:	4652      	mov	r2, sl
 8018328:	4606      	mov	r6, r0
 801832a:	460f      	mov	r7, r1
 801832c:	462b      	mov	r3, r5
 801832e:	ec51 0b19 	vmov	r0, r1, d9
 8018332:	f7e7 ffc3 	bl	80002bc <__adddf3>
 8018336:	4602      	mov	r2, r0
 8018338:	460b      	mov	r3, r1
 801833a:	2000      	movs	r0, #0
 801833c:	49bb      	ldr	r1, [pc, #748]	; (801862c <__ieee754_pow+0x76c>)
 801833e:	f7e8 fa9d 	bl	800087c <__aeabi_ddiv>
 8018342:	ec41 0b1a 	vmov	d10, r0, r1
 8018346:	4602      	mov	r2, r0
 8018348:	460b      	mov	r3, r1
 801834a:	4630      	mov	r0, r6
 801834c:	4639      	mov	r1, r7
 801834e:	f7e8 f96b 	bl	8000628 <__aeabi_dmul>
 8018352:	2300      	movs	r3, #0
 8018354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018358:	9302      	str	r3, [sp, #8]
 801835a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801835e:	46ab      	mov	fp, r5
 8018360:	106d      	asrs	r5, r5, #1
 8018362:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018366:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801836a:	ec41 0b18 	vmov	d8, r0, r1
 801836e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018372:	2200      	movs	r2, #0
 8018374:	4640      	mov	r0, r8
 8018376:	4649      	mov	r1, r9
 8018378:	4614      	mov	r4, r2
 801837a:	461d      	mov	r5, r3
 801837c:	f7e8 f954 	bl	8000628 <__aeabi_dmul>
 8018380:	4602      	mov	r2, r0
 8018382:	460b      	mov	r3, r1
 8018384:	4630      	mov	r0, r6
 8018386:	4639      	mov	r1, r7
 8018388:	f7e7 ff96 	bl	80002b8 <__aeabi_dsub>
 801838c:	ec53 2b19 	vmov	r2, r3, d9
 8018390:	4606      	mov	r6, r0
 8018392:	460f      	mov	r7, r1
 8018394:	4620      	mov	r0, r4
 8018396:	4629      	mov	r1, r5
 8018398:	f7e7 ff8e 	bl	80002b8 <__aeabi_dsub>
 801839c:	4602      	mov	r2, r0
 801839e:	460b      	mov	r3, r1
 80183a0:	4650      	mov	r0, sl
 80183a2:	4659      	mov	r1, fp
 80183a4:	f7e7 ff88 	bl	80002b8 <__aeabi_dsub>
 80183a8:	4642      	mov	r2, r8
 80183aa:	464b      	mov	r3, r9
 80183ac:	f7e8 f93c 	bl	8000628 <__aeabi_dmul>
 80183b0:	4602      	mov	r2, r0
 80183b2:	460b      	mov	r3, r1
 80183b4:	4630      	mov	r0, r6
 80183b6:	4639      	mov	r1, r7
 80183b8:	f7e7 ff7e 	bl	80002b8 <__aeabi_dsub>
 80183bc:	ec53 2b1a 	vmov	r2, r3, d10
 80183c0:	f7e8 f932 	bl	8000628 <__aeabi_dmul>
 80183c4:	ec53 2b18 	vmov	r2, r3, d8
 80183c8:	ec41 0b19 	vmov	d9, r0, r1
 80183cc:	ec51 0b18 	vmov	r0, r1, d8
 80183d0:	f7e8 f92a 	bl	8000628 <__aeabi_dmul>
 80183d4:	a37c      	add	r3, pc, #496	; (adr r3, 80185c8 <__ieee754_pow+0x708>)
 80183d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183da:	4604      	mov	r4, r0
 80183dc:	460d      	mov	r5, r1
 80183de:	f7e8 f923 	bl	8000628 <__aeabi_dmul>
 80183e2:	a37b      	add	r3, pc, #492	; (adr r3, 80185d0 <__ieee754_pow+0x710>)
 80183e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e8:	f7e7 ff68 	bl	80002bc <__adddf3>
 80183ec:	4622      	mov	r2, r4
 80183ee:	462b      	mov	r3, r5
 80183f0:	f7e8 f91a 	bl	8000628 <__aeabi_dmul>
 80183f4:	a378      	add	r3, pc, #480	; (adr r3, 80185d8 <__ieee754_pow+0x718>)
 80183f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183fa:	f7e7 ff5f 	bl	80002bc <__adddf3>
 80183fe:	4622      	mov	r2, r4
 8018400:	462b      	mov	r3, r5
 8018402:	f7e8 f911 	bl	8000628 <__aeabi_dmul>
 8018406:	a376      	add	r3, pc, #472	; (adr r3, 80185e0 <__ieee754_pow+0x720>)
 8018408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801840c:	f7e7 ff56 	bl	80002bc <__adddf3>
 8018410:	4622      	mov	r2, r4
 8018412:	462b      	mov	r3, r5
 8018414:	f7e8 f908 	bl	8000628 <__aeabi_dmul>
 8018418:	a373      	add	r3, pc, #460	; (adr r3, 80185e8 <__ieee754_pow+0x728>)
 801841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801841e:	f7e7 ff4d 	bl	80002bc <__adddf3>
 8018422:	4622      	mov	r2, r4
 8018424:	462b      	mov	r3, r5
 8018426:	f7e8 f8ff 	bl	8000628 <__aeabi_dmul>
 801842a:	a371      	add	r3, pc, #452	; (adr r3, 80185f0 <__ieee754_pow+0x730>)
 801842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018430:	f7e7 ff44 	bl	80002bc <__adddf3>
 8018434:	4622      	mov	r2, r4
 8018436:	4606      	mov	r6, r0
 8018438:	460f      	mov	r7, r1
 801843a:	462b      	mov	r3, r5
 801843c:	4620      	mov	r0, r4
 801843e:	4629      	mov	r1, r5
 8018440:	f7e8 f8f2 	bl	8000628 <__aeabi_dmul>
 8018444:	4602      	mov	r2, r0
 8018446:	460b      	mov	r3, r1
 8018448:	4630      	mov	r0, r6
 801844a:	4639      	mov	r1, r7
 801844c:	f7e8 f8ec 	bl	8000628 <__aeabi_dmul>
 8018450:	4642      	mov	r2, r8
 8018452:	4604      	mov	r4, r0
 8018454:	460d      	mov	r5, r1
 8018456:	464b      	mov	r3, r9
 8018458:	ec51 0b18 	vmov	r0, r1, d8
 801845c:	f7e7 ff2e 	bl	80002bc <__adddf3>
 8018460:	ec53 2b19 	vmov	r2, r3, d9
 8018464:	f7e8 f8e0 	bl	8000628 <__aeabi_dmul>
 8018468:	4622      	mov	r2, r4
 801846a:	462b      	mov	r3, r5
 801846c:	f7e7 ff26 	bl	80002bc <__adddf3>
 8018470:	4642      	mov	r2, r8
 8018472:	4682      	mov	sl, r0
 8018474:	468b      	mov	fp, r1
 8018476:	464b      	mov	r3, r9
 8018478:	4640      	mov	r0, r8
 801847a:	4649      	mov	r1, r9
 801847c:	f7e8 f8d4 	bl	8000628 <__aeabi_dmul>
 8018480:	4b6b      	ldr	r3, [pc, #428]	; (8018630 <__ieee754_pow+0x770>)
 8018482:	2200      	movs	r2, #0
 8018484:	4606      	mov	r6, r0
 8018486:	460f      	mov	r7, r1
 8018488:	f7e7 ff18 	bl	80002bc <__adddf3>
 801848c:	4652      	mov	r2, sl
 801848e:	465b      	mov	r3, fp
 8018490:	f7e7 ff14 	bl	80002bc <__adddf3>
 8018494:	2000      	movs	r0, #0
 8018496:	4604      	mov	r4, r0
 8018498:	460d      	mov	r5, r1
 801849a:	4602      	mov	r2, r0
 801849c:	460b      	mov	r3, r1
 801849e:	4640      	mov	r0, r8
 80184a0:	4649      	mov	r1, r9
 80184a2:	f7e8 f8c1 	bl	8000628 <__aeabi_dmul>
 80184a6:	4b62      	ldr	r3, [pc, #392]	; (8018630 <__ieee754_pow+0x770>)
 80184a8:	4680      	mov	r8, r0
 80184aa:	4689      	mov	r9, r1
 80184ac:	2200      	movs	r2, #0
 80184ae:	4620      	mov	r0, r4
 80184b0:	4629      	mov	r1, r5
 80184b2:	f7e7 ff01 	bl	80002b8 <__aeabi_dsub>
 80184b6:	4632      	mov	r2, r6
 80184b8:	463b      	mov	r3, r7
 80184ba:	f7e7 fefd 	bl	80002b8 <__aeabi_dsub>
 80184be:	4602      	mov	r2, r0
 80184c0:	460b      	mov	r3, r1
 80184c2:	4650      	mov	r0, sl
 80184c4:	4659      	mov	r1, fp
 80184c6:	f7e7 fef7 	bl	80002b8 <__aeabi_dsub>
 80184ca:	ec53 2b18 	vmov	r2, r3, d8
 80184ce:	f7e8 f8ab 	bl	8000628 <__aeabi_dmul>
 80184d2:	4622      	mov	r2, r4
 80184d4:	4606      	mov	r6, r0
 80184d6:	460f      	mov	r7, r1
 80184d8:	462b      	mov	r3, r5
 80184da:	ec51 0b19 	vmov	r0, r1, d9
 80184de:	f7e8 f8a3 	bl	8000628 <__aeabi_dmul>
 80184e2:	4602      	mov	r2, r0
 80184e4:	460b      	mov	r3, r1
 80184e6:	4630      	mov	r0, r6
 80184e8:	4639      	mov	r1, r7
 80184ea:	f7e7 fee7 	bl	80002bc <__adddf3>
 80184ee:	4606      	mov	r6, r0
 80184f0:	460f      	mov	r7, r1
 80184f2:	4602      	mov	r2, r0
 80184f4:	460b      	mov	r3, r1
 80184f6:	4640      	mov	r0, r8
 80184f8:	4649      	mov	r1, r9
 80184fa:	f7e7 fedf 	bl	80002bc <__adddf3>
 80184fe:	a33e      	add	r3, pc, #248	; (adr r3, 80185f8 <__ieee754_pow+0x738>)
 8018500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018504:	2000      	movs	r0, #0
 8018506:	4604      	mov	r4, r0
 8018508:	460d      	mov	r5, r1
 801850a:	f7e8 f88d 	bl	8000628 <__aeabi_dmul>
 801850e:	4642      	mov	r2, r8
 8018510:	ec41 0b18 	vmov	d8, r0, r1
 8018514:	464b      	mov	r3, r9
 8018516:	4620      	mov	r0, r4
 8018518:	4629      	mov	r1, r5
 801851a:	f7e7 fecd 	bl	80002b8 <__aeabi_dsub>
 801851e:	4602      	mov	r2, r0
 8018520:	460b      	mov	r3, r1
 8018522:	4630      	mov	r0, r6
 8018524:	4639      	mov	r1, r7
 8018526:	f7e7 fec7 	bl	80002b8 <__aeabi_dsub>
 801852a:	a335      	add	r3, pc, #212	; (adr r3, 8018600 <__ieee754_pow+0x740>)
 801852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018530:	f7e8 f87a 	bl	8000628 <__aeabi_dmul>
 8018534:	a334      	add	r3, pc, #208	; (adr r3, 8018608 <__ieee754_pow+0x748>)
 8018536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801853a:	4606      	mov	r6, r0
 801853c:	460f      	mov	r7, r1
 801853e:	4620      	mov	r0, r4
 8018540:	4629      	mov	r1, r5
 8018542:	f7e8 f871 	bl	8000628 <__aeabi_dmul>
 8018546:	4602      	mov	r2, r0
 8018548:	460b      	mov	r3, r1
 801854a:	4630      	mov	r0, r6
 801854c:	4639      	mov	r1, r7
 801854e:	f7e7 feb5 	bl	80002bc <__adddf3>
 8018552:	9a07      	ldr	r2, [sp, #28]
 8018554:	4b37      	ldr	r3, [pc, #220]	; (8018634 <__ieee754_pow+0x774>)
 8018556:	4413      	add	r3, r2
 8018558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801855c:	f7e7 feae 	bl	80002bc <__adddf3>
 8018560:	4682      	mov	sl, r0
 8018562:	9805      	ldr	r0, [sp, #20]
 8018564:	468b      	mov	fp, r1
 8018566:	f7e7 fff5 	bl	8000554 <__aeabi_i2d>
 801856a:	9a07      	ldr	r2, [sp, #28]
 801856c:	4b32      	ldr	r3, [pc, #200]	; (8018638 <__ieee754_pow+0x778>)
 801856e:	4413      	add	r3, r2
 8018570:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018574:	4606      	mov	r6, r0
 8018576:	460f      	mov	r7, r1
 8018578:	4652      	mov	r2, sl
 801857a:	465b      	mov	r3, fp
 801857c:	ec51 0b18 	vmov	r0, r1, d8
 8018580:	f7e7 fe9c 	bl	80002bc <__adddf3>
 8018584:	4642      	mov	r2, r8
 8018586:	464b      	mov	r3, r9
 8018588:	f7e7 fe98 	bl	80002bc <__adddf3>
 801858c:	4632      	mov	r2, r6
 801858e:	463b      	mov	r3, r7
 8018590:	f7e7 fe94 	bl	80002bc <__adddf3>
 8018594:	2000      	movs	r0, #0
 8018596:	4632      	mov	r2, r6
 8018598:	463b      	mov	r3, r7
 801859a:	4604      	mov	r4, r0
 801859c:	460d      	mov	r5, r1
 801859e:	f7e7 fe8b 	bl	80002b8 <__aeabi_dsub>
 80185a2:	4642      	mov	r2, r8
 80185a4:	464b      	mov	r3, r9
 80185a6:	f7e7 fe87 	bl	80002b8 <__aeabi_dsub>
 80185aa:	ec53 2b18 	vmov	r2, r3, d8
 80185ae:	f7e7 fe83 	bl	80002b8 <__aeabi_dsub>
 80185b2:	4602      	mov	r2, r0
 80185b4:	460b      	mov	r3, r1
 80185b6:	4650      	mov	r0, sl
 80185b8:	4659      	mov	r1, fp
 80185ba:	e610      	b.n	80181de <__ieee754_pow+0x31e>
 80185bc:	2401      	movs	r4, #1
 80185be:	e6a1      	b.n	8018304 <__ieee754_pow+0x444>
 80185c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8018610 <__ieee754_pow+0x750>
 80185c4:	e617      	b.n	80181f6 <__ieee754_pow+0x336>
 80185c6:	bf00      	nop
 80185c8:	4a454eef 	.word	0x4a454eef
 80185cc:	3fca7e28 	.word	0x3fca7e28
 80185d0:	93c9db65 	.word	0x93c9db65
 80185d4:	3fcd864a 	.word	0x3fcd864a
 80185d8:	a91d4101 	.word	0xa91d4101
 80185dc:	3fd17460 	.word	0x3fd17460
 80185e0:	518f264d 	.word	0x518f264d
 80185e4:	3fd55555 	.word	0x3fd55555
 80185e8:	db6fabff 	.word	0xdb6fabff
 80185ec:	3fdb6db6 	.word	0x3fdb6db6
 80185f0:	33333303 	.word	0x33333303
 80185f4:	3fe33333 	.word	0x3fe33333
 80185f8:	e0000000 	.word	0xe0000000
 80185fc:	3feec709 	.word	0x3feec709
 8018600:	dc3a03fd 	.word	0xdc3a03fd
 8018604:	3feec709 	.word	0x3feec709
 8018608:	145b01f5 	.word	0x145b01f5
 801860c:	be3e2fe0 	.word	0xbe3e2fe0
 8018610:	00000000 	.word	0x00000000
 8018614:	3ff00000 	.word	0x3ff00000
 8018618:	7ff00000 	.word	0x7ff00000
 801861c:	43400000 	.word	0x43400000
 8018620:	0003988e 	.word	0x0003988e
 8018624:	000bb679 	.word	0x000bb679
 8018628:	0802cec8 	.word	0x0802cec8
 801862c:	3ff00000 	.word	0x3ff00000
 8018630:	40080000 	.word	0x40080000
 8018634:	0802cee8 	.word	0x0802cee8
 8018638:	0802ced8 	.word	0x0802ced8
 801863c:	a3b5      	add	r3, pc, #724	; (adr r3, 8018914 <__ieee754_pow+0xa54>)
 801863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018642:	4640      	mov	r0, r8
 8018644:	4649      	mov	r1, r9
 8018646:	f7e7 fe39 	bl	80002bc <__adddf3>
 801864a:	4622      	mov	r2, r4
 801864c:	ec41 0b1a 	vmov	d10, r0, r1
 8018650:	462b      	mov	r3, r5
 8018652:	4630      	mov	r0, r6
 8018654:	4639      	mov	r1, r7
 8018656:	f7e7 fe2f 	bl	80002b8 <__aeabi_dsub>
 801865a:	4602      	mov	r2, r0
 801865c:	460b      	mov	r3, r1
 801865e:	ec51 0b1a 	vmov	r0, r1, d10
 8018662:	f7e8 fa71 	bl	8000b48 <__aeabi_dcmpgt>
 8018666:	2800      	cmp	r0, #0
 8018668:	f47f ae04 	bne.w	8018274 <__ieee754_pow+0x3b4>
 801866c:	4aa4      	ldr	r2, [pc, #656]	; (8018900 <__ieee754_pow+0xa40>)
 801866e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018672:	4293      	cmp	r3, r2
 8018674:	f340 8108 	ble.w	8018888 <__ieee754_pow+0x9c8>
 8018678:	151b      	asrs	r3, r3, #20
 801867a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801867e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018682:	fa4a f303 	asr.w	r3, sl, r3
 8018686:	445b      	add	r3, fp
 8018688:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801868c:	4e9d      	ldr	r6, [pc, #628]	; (8018904 <__ieee754_pow+0xa44>)
 801868e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018692:	4116      	asrs	r6, r2
 8018694:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018698:	2000      	movs	r0, #0
 801869a:	ea23 0106 	bic.w	r1, r3, r6
 801869e:	f1c2 0214 	rsb	r2, r2, #20
 80186a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80186a6:	fa4a fa02 	asr.w	sl, sl, r2
 80186aa:	f1bb 0f00 	cmp.w	fp, #0
 80186ae:	4602      	mov	r2, r0
 80186b0:	460b      	mov	r3, r1
 80186b2:	4620      	mov	r0, r4
 80186b4:	4629      	mov	r1, r5
 80186b6:	bfb8      	it	lt
 80186b8:	f1ca 0a00 	rsblt	sl, sl, #0
 80186bc:	f7e7 fdfc 	bl	80002b8 <__aeabi_dsub>
 80186c0:	ec41 0b19 	vmov	d9, r0, r1
 80186c4:	4642      	mov	r2, r8
 80186c6:	464b      	mov	r3, r9
 80186c8:	ec51 0b19 	vmov	r0, r1, d9
 80186cc:	f7e7 fdf6 	bl	80002bc <__adddf3>
 80186d0:	a37b      	add	r3, pc, #492	; (adr r3, 80188c0 <__ieee754_pow+0xa00>)
 80186d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186d6:	2000      	movs	r0, #0
 80186d8:	4604      	mov	r4, r0
 80186da:	460d      	mov	r5, r1
 80186dc:	f7e7 ffa4 	bl	8000628 <__aeabi_dmul>
 80186e0:	ec53 2b19 	vmov	r2, r3, d9
 80186e4:	4606      	mov	r6, r0
 80186e6:	460f      	mov	r7, r1
 80186e8:	4620      	mov	r0, r4
 80186ea:	4629      	mov	r1, r5
 80186ec:	f7e7 fde4 	bl	80002b8 <__aeabi_dsub>
 80186f0:	4602      	mov	r2, r0
 80186f2:	460b      	mov	r3, r1
 80186f4:	4640      	mov	r0, r8
 80186f6:	4649      	mov	r1, r9
 80186f8:	f7e7 fdde 	bl	80002b8 <__aeabi_dsub>
 80186fc:	a372      	add	r3, pc, #456	; (adr r3, 80188c8 <__ieee754_pow+0xa08>)
 80186fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018702:	f7e7 ff91 	bl	8000628 <__aeabi_dmul>
 8018706:	a372      	add	r3, pc, #456	; (adr r3, 80188d0 <__ieee754_pow+0xa10>)
 8018708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801870c:	4680      	mov	r8, r0
 801870e:	4689      	mov	r9, r1
 8018710:	4620      	mov	r0, r4
 8018712:	4629      	mov	r1, r5
 8018714:	f7e7 ff88 	bl	8000628 <__aeabi_dmul>
 8018718:	4602      	mov	r2, r0
 801871a:	460b      	mov	r3, r1
 801871c:	4640      	mov	r0, r8
 801871e:	4649      	mov	r1, r9
 8018720:	f7e7 fdcc 	bl	80002bc <__adddf3>
 8018724:	4604      	mov	r4, r0
 8018726:	460d      	mov	r5, r1
 8018728:	4602      	mov	r2, r0
 801872a:	460b      	mov	r3, r1
 801872c:	4630      	mov	r0, r6
 801872e:	4639      	mov	r1, r7
 8018730:	f7e7 fdc4 	bl	80002bc <__adddf3>
 8018734:	4632      	mov	r2, r6
 8018736:	463b      	mov	r3, r7
 8018738:	4680      	mov	r8, r0
 801873a:	4689      	mov	r9, r1
 801873c:	f7e7 fdbc 	bl	80002b8 <__aeabi_dsub>
 8018740:	4602      	mov	r2, r0
 8018742:	460b      	mov	r3, r1
 8018744:	4620      	mov	r0, r4
 8018746:	4629      	mov	r1, r5
 8018748:	f7e7 fdb6 	bl	80002b8 <__aeabi_dsub>
 801874c:	4642      	mov	r2, r8
 801874e:	4606      	mov	r6, r0
 8018750:	460f      	mov	r7, r1
 8018752:	464b      	mov	r3, r9
 8018754:	4640      	mov	r0, r8
 8018756:	4649      	mov	r1, r9
 8018758:	f7e7 ff66 	bl	8000628 <__aeabi_dmul>
 801875c:	a35e      	add	r3, pc, #376	; (adr r3, 80188d8 <__ieee754_pow+0xa18>)
 801875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018762:	4604      	mov	r4, r0
 8018764:	460d      	mov	r5, r1
 8018766:	f7e7 ff5f 	bl	8000628 <__aeabi_dmul>
 801876a:	a35d      	add	r3, pc, #372	; (adr r3, 80188e0 <__ieee754_pow+0xa20>)
 801876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018770:	f7e7 fda2 	bl	80002b8 <__aeabi_dsub>
 8018774:	4622      	mov	r2, r4
 8018776:	462b      	mov	r3, r5
 8018778:	f7e7 ff56 	bl	8000628 <__aeabi_dmul>
 801877c:	a35a      	add	r3, pc, #360	; (adr r3, 80188e8 <__ieee754_pow+0xa28>)
 801877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018782:	f7e7 fd9b 	bl	80002bc <__adddf3>
 8018786:	4622      	mov	r2, r4
 8018788:	462b      	mov	r3, r5
 801878a:	f7e7 ff4d 	bl	8000628 <__aeabi_dmul>
 801878e:	a358      	add	r3, pc, #352	; (adr r3, 80188f0 <__ieee754_pow+0xa30>)
 8018790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018794:	f7e7 fd90 	bl	80002b8 <__aeabi_dsub>
 8018798:	4622      	mov	r2, r4
 801879a:	462b      	mov	r3, r5
 801879c:	f7e7 ff44 	bl	8000628 <__aeabi_dmul>
 80187a0:	a355      	add	r3, pc, #340	; (adr r3, 80188f8 <__ieee754_pow+0xa38>)
 80187a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187a6:	f7e7 fd89 	bl	80002bc <__adddf3>
 80187aa:	4622      	mov	r2, r4
 80187ac:	462b      	mov	r3, r5
 80187ae:	f7e7 ff3b 	bl	8000628 <__aeabi_dmul>
 80187b2:	4602      	mov	r2, r0
 80187b4:	460b      	mov	r3, r1
 80187b6:	4640      	mov	r0, r8
 80187b8:	4649      	mov	r1, r9
 80187ba:	f7e7 fd7d 	bl	80002b8 <__aeabi_dsub>
 80187be:	4604      	mov	r4, r0
 80187c0:	460d      	mov	r5, r1
 80187c2:	4602      	mov	r2, r0
 80187c4:	460b      	mov	r3, r1
 80187c6:	4640      	mov	r0, r8
 80187c8:	4649      	mov	r1, r9
 80187ca:	f7e7 ff2d 	bl	8000628 <__aeabi_dmul>
 80187ce:	2200      	movs	r2, #0
 80187d0:	ec41 0b19 	vmov	d9, r0, r1
 80187d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80187d8:	4620      	mov	r0, r4
 80187da:	4629      	mov	r1, r5
 80187dc:	f7e7 fd6c 	bl	80002b8 <__aeabi_dsub>
 80187e0:	4602      	mov	r2, r0
 80187e2:	460b      	mov	r3, r1
 80187e4:	ec51 0b19 	vmov	r0, r1, d9
 80187e8:	f7e8 f848 	bl	800087c <__aeabi_ddiv>
 80187ec:	4632      	mov	r2, r6
 80187ee:	4604      	mov	r4, r0
 80187f0:	460d      	mov	r5, r1
 80187f2:	463b      	mov	r3, r7
 80187f4:	4640      	mov	r0, r8
 80187f6:	4649      	mov	r1, r9
 80187f8:	f7e7 ff16 	bl	8000628 <__aeabi_dmul>
 80187fc:	4632      	mov	r2, r6
 80187fe:	463b      	mov	r3, r7
 8018800:	f7e7 fd5c 	bl	80002bc <__adddf3>
 8018804:	4602      	mov	r2, r0
 8018806:	460b      	mov	r3, r1
 8018808:	4620      	mov	r0, r4
 801880a:	4629      	mov	r1, r5
 801880c:	f7e7 fd54 	bl	80002b8 <__aeabi_dsub>
 8018810:	4642      	mov	r2, r8
 8018812:	464b      	mov	r3, r9
 8018814:	f7e7 fd50 	bl	80002b8 <__aeabi_dsub>
 8018818:	460b      	mov	r3, r1
 801881a:	4602      	mov	r2, r0
 801881c:	493a      	ldr	r1, [pc, #232]	; (8018908 <__ieee754_pow+0xa48>)
 801881e:	2000      	movs	r0, #0
 8018820:	f7e7 fd4a 	bl	80002b8 <__aeabi_dsub>
 8018824:	ec41 0b10 	vmov	d0, r0, r1
 8018828:	ee10 3a90 	vmov	r3, s1
 801882c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018834:	da2b      	bge.n	801888e <__ieee754_pow+0x9ce>
 8018836:	4650      	mov	r0, sl
 8018838:	f000 f966 	bl	8018b08 <scalbn>
 801883c:	ec51 0b10 	vmov	r0, r1, d0
 8018840:	ec53 2b18 	vmov	r2, r3, d8
 8018844:	f7ff bbed 	b.w	8018022 <__ieee754_pow+0x162>
 8018848:	4b30      	ldr	r3, [pc, #192]	; (801890c <__ieee754_pow+0xa4c>)
 801884a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801884e:	429e      	cmp	r6, r3
 8018850:	f77f af0c 	ble.w	801866c <__ieee754_pow+0x7ac>
 8018854:	4b2e      	ldr	r3, [pc, #184]	; (8018910 <__ieee754_pow+0xa50>)
 8018856:	440b      	add	r3, r1
 8018858:	4303      	orrs	r3, r0
 801885a:	d009      	beq.n	8018870 <__ieee754_pow+0x9b0>
 801885c:	ec51 0b18 	vmov	r0, r1, d8
 8018860:	2200      	movs	r2, #0
 8018862:	2300      	movs	r3, #0
 8018864:	f7e8 f952 	bl	8000b0c <__aeabi_dcmplt>
 8018868:	3800      	subs	r0, #0
 801886a:	bf18      	it	ne
 801886c:	2001      	movne	r0, #1
 801886e:	e447      	b.n	8018100 <__ieee754_pow+0x240>
 8018870:	4622      	mov	r2, r4
 8018872:	462b      	mov	r3, r5
 8018874:	f7e7 fd20 	bl	80002b8 <__aeabi_dsub>
 8018878:	4642      	mov	r2, r8
 801887a:	464b      	mov	r3, r9
 801887c:	f7e8 f95a 	bl	8000b34 <__aeabi_dcmpge>
 8018880:	2800      	cmp	r0, #0
 8018882:	f43f aef3 	beq.w	801866c <__ieee754_pow+0x7ac>
 8018886:	e7e9      	b.n	801885c <__ieee754_pow+0x99c>
 8018888:	f04f 0a00 	mov.w	sl, #0
 801888c:	e71a      	b.n	80186c4 <__ieee754_pow+0x804>
 801888e:	ec51 0b10 	vmov	r0, r1, d0
 8018892:	4619      	mov	r1, r3
 8018894:	e7d4      	b.n	8018840 <__ieee754_pow+0x980>
 8018896:	491c      	ldr	r1, [pc, #112]	; (8018908 <__ieee754_pow+0xa48>)
 8018898:	2000      	movs	r0, #0
 801889a:	f7ff bb30 	b.w	8017efe <__ieee754_pow+0x3e>
 801889e:	2000      	movs	r0, #0
 80188a0:	2100      	movs	r1, #0
 80188a2:	f7ff bb2c 	b.w	8017efe <__ieee754_pow+0x3e>
 80188a6:	4630      	mov	r0, r6
 80188a8:	4639      	mov	r1, r7
 80188aa:	f7ff bb28 	b.w	8017efe <__ieee754_pow+0x3e>
 80188ae:	9204      	str	r2, [sp, #16]
 80188b0:	f7ff bb7a 	b.w	8017fa8 <__ieee754_pow+0xe8>
 80188b4:	2300      	movs	r3, #0
 80188b6:	f7ff bb64 	b.w	8017f82 <__ieee754_pow+0xc2>
 80188ba:	bf00      	nop
 80188bc:	f3af 8000 	nop.w
 80188c0:	00000000 	.word	0x00000000
 80188c4:	3fe62e43 	.word	0x3fe62e43
 80188c8:	fefa39ef 	.word	0xfefa39ef
 80188cc:	3fe62e42 	.word	0x3fe62e42
 80188d0:	0ca86c39 	.word	0x0ca86c39
 80188d4:	be205c61 	.word	0xbe205c61
 80188d8:	72bea4d0 	.word	0x72bea4d0
 80188dc:	3e663769 	.word	0x3e663769
 80188e0:	c5d26bf1 	.word	0xc5d26bf1
 80188e4:	3ebbbd41 	.word	0x3ebbbd41
 80188e8:	af25de2c 	.word	0xaf25de2c
 80188ec:	3f11566a 	.word	0x3f11566a
 80188f0:	16bebd93 	.word	0x16bebd93
 80188f4:	3f66c16c 	.word	0x3f66c16c
 80188f8:	5555553e 	.word	0x5555553e
 80188fc:	3fc55555 	.word	0x3fc55555
 8018900:	3fe00000 	.word	0x3fe00000
 8018904:	000fffff 	.word	0x000fffff
 8018908:	3ff00000 	.word	0x3ff00000
 801890c:	4090cbff 	.word	0x4090cbff
 8018910:	3f6f3400 	.word	0x3f6f3400
 8018914:	652b82fe 	.word	0x652b82fe
 8018918:	3c971547 	.word	0x3c971547

0801891c <__ieee754_sqrt>:
 801891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018920:	ec55 4b10 	vmov	r4, r5, d0
 8018924:	4e55      	ldr	r6, [pc, #340]	; (8018a7c <__ieee754_sqrt+0x160>)
 8018926:	43ae      	bics	r6, r5
 8018928:	ee10 0a10 	vmov	r0, s0
 801892c:	ee10 3a10 	vmov	r3, s0
 8018930:	462a      	mov	r2, r5
 8018932:	4629      	mov	r1, r5
 8018934:	d110      	bne.n	8018958 <__ieee754_sqrt+0x3c>
 8018936:	ee10 2a10 	vmov	r2, s0
 801893a:	462b      	mov	r3, r5
 801893c:	f7e7 fe74 	bl	8000628 <__aeabi_dmul>
 8018940:	4602      	mov	r2, r0
 8018942:	460b      	mov	r3, r1
 8018944:	4620      	mov	r0, r4
 8018946:	4629      	mov	r1, r5
 8018948:	f7e7 fcb8 	bl	80002bc <__adddf3>
 801894c:	4604      	mov	r4, r0
 801894e:	460d      	mov	r5, r1
 8018950:	ec45 4b10 	vmov	d0, r4, r5
 8018954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018958:	2d00      	cmp	r5, #0
 801895a:	dc10      	bgt.n	801897e <__ieee754_sqrt+0x62>
 801895c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018960:	4330      	orrs	r0, r6
 8018962:	d0f5      	beq.n	8018950 <__ieee754_sqrt+0x34>
 8018964:	b15d      	cbz	r5, 801897e <__ieee754_sqrt+0x62>
 8018966:	ee10 2a10 	vmov	r2, s0
 801896a:	462b      	mov	r3, r5
 801896c:	ee10 0a10 	vmov	r0, s0
 8018970:	f7e7 fca2 	bl	80002b8 <__aeabi_dsub>
 8018974:	4602      	mov	r2, r0
 8018976:	460b      	mov	r3, r1
 8018978:	f7e7 ff80 	bl	800087c <__aeabi_ddiv>
 801897c:	e7e6      	b.n	801894c <__ieee754_sqrt+0x30>
 801897e:	1512      	asrs	r2, r2, #20
 8018980:	d074      	beq.n	8018a6c <__ieee754_sqrt+0x150>
 8018982:	07d4      	lsls	r4, r2, #31
 8018984:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018988:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801898c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018990:	bf5e      	ittt	pl
 8018992:	0fda      	lsrpl	r2, r3, #31
 8018994:	005b      	lslpl	r3, r3, #1
 8018996:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801899a:	2400      	movs	r4, #0
 801899c:	0fda      	lsrs	r2, r3, #31
 801899e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80189a2:	107f      	asrs	r7, r7, #1
 80189a4:	005b      	lsls	r3, r3, #1
 80189a6:	2516      	movs	r5, #22
 80189a8:	4620      	mov	r0, r4
 80189aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80189ae:	1886      	adds	r6, r0, r2
 80189b0:	428e      	cmp	r6, r1
 80189b2:	bfde      	ittt	le
 80189b4:	1b89      	suble	r1, r1, r6
 80189b6:	18b0      	addle	r0, r6, r2
 80189b8:	18a4      	addle	r4, r4, r2
 80189ba:	0049      	lsls	r1, r1, #1
 80189bc:	3d01      	subs	r5, #1
 80189be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80189c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80189c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80189ca:	d1f0      	bne.n	80189ae <__ieee754_sqrt+0x92>
 80189cc:	462a      	mov	r2, r5
 80189ce:	f04f 0e20 	mov.w	lr, #32
 80189d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80189d6:	4281      	cmp	r1, r0
 80189d8:	eb06 0c05 	add.w	ip, r6, r5
 80189dc:	dc02      	bgt.n	80189e4 <__ieee754_sqrt+0xc8>
 80189de:	d113      	bne.n	8018a08 <__ieee754_sqrt+0xec>
 80189e0:	459c      	cmp	ip, r3
 80189e2:	d811      	bhi.n	8018a08 <__ieee754_sqrt+0xec>
 80189e4:	f1bc 0f00 	cmp.w	ip, #0
 80189e8:	eb0c 0506 	add.w	r5, ip, r6
 80189ec:	da43      	bge.n	8018a76 <__ieee754_sqrt+0x15a>
 80189ee:	2d00      	cmp	r5, #0
 80189f0:	db41      	blt.n	8018a76 <__ieee754_sqrt+0x15a>
 80189f2:	f100 0801 	add.w	r8, r0, #1
 80189f6:	1a09      	subs	r1, r1, r0
 80189f8:	459c      	cmp	ip, r3
 80189fa:	bf88      	it	hi
 80189fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018a00:	eba3 030c 	sub.w	r3, r3, ip
 8018a04:	4432      	add	r2, r6
 8018a06:	4640      	mov	r0, r8
 8018a08:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018a0c:	f1be 0e01 	subs.w	lr, lr, #1
 8018a10:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8018a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018a18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018a1c:	d1db      	bne.n	80189d6 <__ieee754_sqrt+0xba>
 8018a1e:	430b      	orrs	r3, r1
 8018a20:	d006      	beq.n	8018a30 <__ieee754_sqrt+0x114>
 8018a22:	1c50      	adds	r0, r2, #1
 8018a24:	bf13      	iteet	ne
 8018a26:	3201      	addne	r2, #1
 8018a28:	3401      	addeq	r4, #1
 8018a2a:	4672      	moveq	r2, lr
 8018a2c:	f022 0201 	bicne.w	r2, r2, #1
 8018a30:	1063      	asrs	r3, r4, #1
 8018a32:	0852      	lsrs	r2, r2, #1
 8018a34:	07e1      	lsls	r1, r4, #31
 8018a36:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018a3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018a3e:	bf48      	it	mi
 8018a40:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018a44:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018a48:	4614      	mov	r4, r2
 8018a4a:	e781      	b.n	8018950 <__ieee754_sqrt+0x34>
 8018a4c:	0ad9      	lsrs	r1, r3, #11
 8018a4e:	3815      	subs	r0, #21
 8018a50:	055b      	lsls	r3, r3, #21
 8018a52:	2900      	cmp	r1, #0
 8018a54:	d0fa      	beq.n	8018a4c <__ieee754_sqrt+0x130>
 8018a56:	02cd      	lsls	r5, r1, #11
 8018a58:	d50a      	bpl.n	8018a70 <__ieee754_sqrt+0x154>
 8018a5a:	f1c2 0420 	rsb	r4, r2, #32
 8018a5e:	fa23 f404 	lsr.w	r4, r3, r4
 8018a62:	1e55      	subs	r5, r2, #1
 8018a64:	4093      	lsls	r3, r2
 8018a66:	4321      	orrs	r1, r4
 8018a68:	1b42      	subs	r2, r0, r5
 8018a6a:	e78a      	b.n	8018982 <__ieee754_sqrt+0x66>
 8018a6c:	4610      	mov	r0, r2
 8018a6e:	e7f0      	b.n	8018a52 <__ieee754_sqrt+0x136>
 8018a70:	0049      	lsls	r1, r1, #1
 8018a72:	3201      	adds	r2, #1
 8018a74:	e7ef      	b.n	8018a56 <__ieee754_sqrt+0x13a>
 8018a76:	4680      	mov	r8, r0
 8018a78:	e7bd      	b.n	80189f6 <__ieee754_sqrt+0xda>
 8018a7a:	bf00      	nop
 8018a7c:	7ff00000 	.word	0x7ff00000

08018a80 <with_errno>:
 8018a80:	b570      	push	{r4, r5, r6, lr}
 8018a82:	4604      	mov	r4, r0
 8018a84:	460d      	mov	r5, r1
 8018a86:	4616      	mov	r6, r2
 8018a88:	f7fd ff40 	bl	801690c <__errno>
 8018a8c:	4629      	mov	r1, r5
 8018a8e:	6006      	str	r6, [r0, #0]
 8018a90:	4620      	mov	r0, r4
 8018a92:	bd70      	pop	{r4, r5, r6, pc}

08018a94 <xflow>:
 8018a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018a96:	4614      	mov	r4, r2
 8018a98:	461d      	mov	r5, r3
 8018a9a:	b108      	cbz	r0, 8018aa0 <xflow+0xc>
 8018a9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8018aa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018aa8:	4620      	mov	r0, r4
 8018aaa:	4629      	mov	r1, r5
 8018aac:	f7e7 fdbc 	bl	8000628 <__aeabi_dmul>
 8018ab0:	2222      	movs	r2, #34	; 0x22
 8018ab2:	b003      	add	sp, #12
 8018ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ab8:	f7ff bfe2 	b.w	8018a80 <with_errno>

08018abc <__math_uflow>:
 8018abc:	b508      	push	{r3, lr}
 8018abe:	2200      	movs	r2, #0
 8018ac0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8018ac4:	f7ff ffe6 	bl	8018a94 <xflow>
 8018ac8:	ec41 0b10 	vmov	d0, r0, r1
 8018acc:	bd08      	pop	{r3, pc}

08018ace <__math_oflow>:
 8018ace:	b508      	push	{r3, lr}
 8018ad0:	2200      	movs	r2, #0
 8018ad2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8018ad6:	f7ff ffdd 	bl	8018a94 <xflow>
 8018ada:	ec41 0b10 	vmov	d0, r0, r1
 8018ade:	bd08      	pop	{r3, pc}

08018ae0 <fabs>:
 8018ae0:	ec51 0b10 	vmov	r0, r1, d0
 8018ae4:	ee10 2a10 	vmov	r2, s0
 8018ae8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018aec:	ec43 2b10 	vmov	d0, r2, r3
 8018af0:	4770      	bx	lr

08018af2 <finite>:
 8018af2:	b082      	sub	sp, #8
 8018af4:	ed8d 0b00 	vstr	d0, [sp]
 8018af8:	9801      	ldr	r0, [sp, #4]
 8018afa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8018afe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018b02:	0fc0      	lsrs	r0, r0, #31
 8018b04:	b002      	add	sp, #8
 8018b06:	4770      	bx	lr

08018b08 <scalbn>:
 8018b08:	b570      	push	{r4, r5, r6, lr}
 8018b0a:	ec55 4b10 	vmov	r4, r5, d0
 8018b0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018b12:	4606      	mov	r6, r0
 8018b14:	462b      	mov	r3, r5
 8018b16:	b99a      	cbnz	r2, 8018b40 <scalbn+0x38>
 8018b18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018b1c:	4323      	orrs	r3, r4
 8018b1e:	d036      	beq.n	8018b8e <scalbn+0x86>
 8018b20:	4b39      	ldr	r3, [pc, #228]	; (8018c08 <scalbn+0x100>)
 8018b22:	4629      	mov	r1, r5
 8018b24:	ee10 0a10 	vmov	r0, s0
 8018b28:	2200      	movs	r2, #0
 8018b2a:	f7e7 fd7d 	bl	8000628 <__aeabi_dmul>
 8018b2e:	4b37      	ldr	r3, [pc, #220]	; (8018c0c <scalbn+0x104>)
 8018b30:	429e      	cmp	r6, r3
 8018b32:	4604      	mov	r4, r0
 8018b34:	460d      	mov	r5, r1
 8018b36:	da10      	bge.n	8018b5a <scalbn+0x52>
 8018b38:	a32b      	add	r3, pc, #172	; (adr r3, 8018be8 <scalbn+0xe0>)
 8018b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b3e:	e03a      	b.n	8018bb6 <scalbn+0xae>
 8018b40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018b44:	428a      	cmp	r2, r1
 8018b46:	d10c      	bne.n	8018b62 <scalbn+0x5a>
 8018b48:	ee10 2a10 	vmov	r2, s0
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	4629      	mov	r1, r5
 8018b50:	f7e7 fbb4 	bl	80002bc <__adddf3>
 8018b54:	4604      	mov	r4, r0
 8018b56:	460d      	mov	r5, r1
 8018b58:	e019      	b.n	8018b8e <scalbn+0x86>
 8018b5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018b5e:	460b      	mov	r3, r1
 8018b60:	3a36      	subs	r2, #54	; 0x36
 8018b62:	4432      	add	r2, r6
 8018b64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018b68:	428a      	cmp	r2, r1
 8018b6a:	dd08      	ble.n	8018b7e <scalbn+0x76>
 8018b6c:	2d00      	cmp	r5, #0
 8018b6e:	a120      	add	r1, pc, #128	; (adr r1, 8018bf0 <scalbn+0xe8>)
 8018b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b74:	da1c      	bge.n	8018bb0 <scalbn+0xa8>
 8018b76:	a120      	add	r1, pc, #128	; (adr r1, 8018bf8 <scalbn+0xf0>)
 8018b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b7c:	e018      	b.n	8018bb0 <scalbn+0xa8>
 8018b7e:	2a00      	cmp	r2, #0
 8018b80:	dd08      	ble.n	8018b94 <scalbn+0x8c>
 8018b82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018b86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018b8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018b8e:	ec45 4b10 	vmov	d0, r4, r5
 8018b92:	bd70      	pop	{r4, r5, r6, pc}
 8018b94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018b98:	da19      	bge.n	8018bce <scalbn+0xc6>
 8018b9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018b9e:	429e      	cmp	r6, r3
 8018ba0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8018ba4:	dd0a      	ble.n	8018bbc <scalbn+0xb4>
 8018ba6:	a112      	add	r1, pc, #72	; (adr r1, 8018bf0 <scalbn+0xe8>)
 8018ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d1e2      	bne.n	8018b76 <scalbn+0x6e>
 8018bb0:	a30f      	add	r3, pc, #60	; (adr r3, 8018bf0 <scalbn+0xe8>)
 8018bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bb6:	f7e7 fd37 	bl	8000628 <__aeabi_dmul>
 8018bba:	e7cb      	b.n	8018b54 <scalbn+0x4c>
 8018bbc:	a10a      	add	r1, pc, #40	; (adr r1, 8018be8 <scalbn+0xe0>)
 8018bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d0b8      	beq.n	8018b38 <scalbn+0x30>
 8018bc6:	a10e      	add	r1, pc, #56	; (adr r1, 8018c00 <scalbn+0xf8>)
 8018bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018bcc:	e7b4      	b.n	8018b38 <scalbn+0x30>
 8018bce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018bd2:	3236      	adds	r2, #54	; 0x36
 8018bd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018bd8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018bdc:	4620      	mov	r0, r4
 8018bde:	4b0c      	ldr	r3, [pc, #48]	; (8018c10 <scalbn+0x108>)
 8018be0:	2200      	movs	r2, #0
 8018be2:	e7e8      	b.n	8018bb6 <scalbn+0xae>
 8018be4:	f3af 8000 	nop.w
 8018be8:	c2f8f359 	.word	0xc2f8f359
 8018bec:	01a56e1f 	.word	0x01a56e1f
 8018bf0:	8800759c 	.word	0x8800759c
 8018bf4:	7e37e43c 	.word	0x7e37e43c
 8018bf8:	8800759c 	.word	0x8800759c
 8018bfc:	fe37e43c 	.word	0xfe37e43c
 8018c00:	c2f8f359 	.word	0xc2f8f359
 8018c04:	81a56e1f 	.word	0x81a56e1f
 8018c08:	43500000 	.word	0x43500000
 8018c0c:	ffff3cb0 	.word	0xffff3cb0
 8018c10:	3c900000 	.word	0x3c900000

08018c14 <_close>:
 8018c14:	4b02      	ldr	r3, [pc, #8]	; (8018c20 <_close+0xc>)
 8018c16:	2258      	movs	r2, #88	; 0x58
 8018c18:	601a      	str	r2, [r3, #0]
 8018c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c1e:	4770      	bx	lr
 8018c20:	20003b3c 	.word	0x20003b3c

08018c24 <_fstat>:
 8018c24:	4b02      	ldr	r3, [pc, #8]	; (8018c30 <_fstat+0xc>)
 8018c26:	2258      	movs	r2, #88	; 0x58
 8018c28:	601a      	str	r2, [r3, #0]
 8018c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c2e:	4770      	bx	lr
 8018c30:	20003b3c 	.word	0x20003b3c

08018c34 <_isatty>:
 8018c34:	4b02      	ldr	r3, [pc, #8]	; (8018c40 <_isatty+0xc>)
 8018c36:	2258      	movs	r2, #88	; 0x58
 8018c38:	601a      	str	r2, [r3, #0]
 8018c3a:	2000      	movs	r0, #0
 8018c3c:	4770      	bx	lr
 8018c3e:	bf00      	nop
 8018c40:	20003b3c 	.word	0x20003b3c

08018c44 <_lseek>:
 8018c44:	4b02      	ldr	r3, [pc, #8]	; (8018c50 <_lseek+0xc>)
 8018c46:	2258      	movs	r2, #88	; 0x58
 8018c48:	601a      	str	r2, [r3, #0]
 8018c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c4e:	4770      	bx	lr
 8018c50:	20003b3c 	.word	0x20003b3c

08018c54 <_read>:
 8018c54:	4b02      	ldr	r3, [pc, #8]	; (8018c60 <_read+0xc>)
 8018c56:	2258      	movs	r2, #88	; 0x58
 8018c58:	601a      	str	r2, [r3, #0]
 8018c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c5e:	4770      	bx	lr
 8018c60:	20003b3c 	.word	0x20003b3c

08018c64 <_write>:
 8018c64:	4b02      	ldr	r3, [pc, #8]	; (8018c70 <_write+0xc>)
 8018c66:	2258      	movs	r2, #88	; 0x58
 8018c68:	601a      	str	r2, [r3, #0]
 8018c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c6e:	4770      	bx	lr
 8018c70:	20003b3c 	.word	0x20003b3c

08018c74 <_init>:
 8018c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c76:	bf00      	nop
 8018c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c7a:	bc08      	pop	{r3}
 8018c7c:	469e      	mov	lr, r3
 8018c7e:	4770      	bx	lr

08018c80 <_fini>:
 8018c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c82:	bf00      	nop
 8018c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c86:	bc08      	pop	{r3}
 8018c88:	469e      	mov	lr, r3
 8018c8a:	4770      	bx	lr
