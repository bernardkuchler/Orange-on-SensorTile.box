
SensorTile.box-SVM_Hoja.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e148  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d5a8  0801e320  0801e320  0002e320  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b8c8  0802b8c8  000409bc  2**0
                  CONTENTS
  4 .ARM          00000000  0802b8c8  0802b8c8  000409bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802b8c8  0802b8c8  000409bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b8c8  0802b8c8  0003b8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b8cc  0802b8cc  0003b8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009bc  20000000  0802b8d0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c48  200009c0  0802c28c  000409c0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20004608  0802c28c  00044608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000409bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031a01  00000000  00000000  000409ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068d5  00000000  00000000  000723ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002948  00000000  00000000  00078cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002618  00000000  00000000  0007b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003eac3  00000000  00000000  0007dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e885  00000000  00000000  000bc6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00159fe3  00000000  00000000  000faf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00254f53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bfe4  00000000  00000000  00254fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  00260f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00261024  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200009c0 	.word	0x200009c0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801e2f0 	.word	0x0801e2f0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200009c4 	.word	0x200009c4
 80001fc:	0801e2f0 	.word	0x0801e2f0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_frsub>:
 8000c28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	e002      	b.n	8000c34 <__addsf3>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_fsub>:
 8000c30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c34 <__addsf3>:
 8000c34:	0042      	lsls	r2, r0, #1
 8000c36:	bf1f      	itttt	ne
 8000c38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c3c:	ea92 0f03 	teqne	r2, r3
 8000c40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c48:	d06a      	beq.n	8000d20 <__addsf3+0xec>
 8000c4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c52:	bfc1      	itttt	gt
 8000c54:	18d2      	addgt	r2, r2, r3
 8000c56:	4041      	eorgt	r1, r0
 8000c58:	4048      	eorgt	r0, r1
 8000c5a:	4041      	eorgt	r1, r0
 8000c5c:	bfb8      	it	lt
 8000c5e:	425b      	neglt	r3, r3
 8000c60:	2b19      	cmp	r3, #25
 8000c62:	bf88      	it	hi
 8000c64:	4770      	bxhi	lr
 8000c66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4249      	negne	r1, r1
 8000c86:	ea92 0f03 	teq	r2, r3
 8000c8a:	d03f      	beq.n	8000d0c <__addsf3+0xd8>
 8000c8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c90:	fa41 fc03 	asr.w	ip, r1, r3
 8000c94:	eb10 000c 	adds.w	r0, r0, ip
 8000c98:	f1c3 0320 	rsb	r3, r3, #32
 8000c9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	d502      	bpl.n	8000cac <__addsf3+0x78>
 8000ca6:	4249      	negs	r1, r1
 8000ca8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb0:	d313      	bcc.n	8000cda <__addsf3+0xa6>
 8000cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cb6:	d306      	bcc.n	8000cc6 <__addsf3+0x92>
 8000cb8:	0840      	lsrs	r0, r0, #1
 8000cba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cbe:	f102 0201 	add.w	r2, r2, #1
 8000cc2:	2afe      	cmp	r2, #254	; 0xfe
 8000cc4:	d251      	bcs.n	8000d6a <__addsf3+0x136>
 8000cc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cce:	bf08      	it	eq
 8000cd0:	f020 0001 	biceq.w	r0, r0, #1
 8000cd4:	ea40 0003 	orr.w	r0, r0, r3
 8000cd8:	4770      	bx	lr
 8000cda:	0049      	lsls	r1, r1, #1
 8000cdc:	eb40 0000 	adc.w	r0, r0, r0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ce8:	d2ed      	bcs.n	8000cc6 <__addsf3+0x92>
 8000cea:	fab0 fc80 	clz	ip, r0
 8000cee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cfa:	bfaa      	itet	ge
 8000cfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d00:	4252      	neglt	r2, r2
 8000d02:	4318      	orrge	r0, r3
 8000d04:	bfbc      	itt	lt
 8000d06:	40d0      	lsrlt	r0, r2
 8000d08:	4318      	orrlt	r0, r3
 8000d0a:	4770      	bx	lr
 8000d0c:	f092 0f00 	teq	r2, #0
 8000d10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d14:	bf06      	itte	eq
 8000d16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d1a:	3201      	addeq	r2, #1
 8000d1c:	3b01      	subne	r3, #1
 8000d1e:	e7b5      	b.n	8000c8c <__addsf3+0x58>
 8000d20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d28:	bf18      	it	ne
 8000d2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d2e:	d021      	beq.n	8000d74 <__addsf3+0x140>
 8000d30:	ea92 0f03 	teq	r2, r3
 8000d34:	d004      	beq.n	8000d40 <__addsf3+0x10c>
 8000d36:	f092 0f00 	teq	r2, #0
 8000d3a:	bf08      	it	eq
 8000d3c:	4608      	moveq	r0, r1
 8000d3e:	4770      	bx	lr
 8000d40:	ea90 0f01 	teq	r0, r1
 8000d44:	bf1c      	itt	ne
 8000d46:	2000      	movne	r0, #0
 8000d48:	4770      	bxne	lr
 8000d4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d4e:	d104      	bne.n	8000d5a <__addsf3+0x126>
 8000d50:	0040      	lsls	r0, r0, #1
 8000d52:	bf28      	it	cs
 8000d54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d58:	4770      	bx	lr
 8000d5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d5e:	bf3c      	itt	cc
 8000d60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bxcc	lr
 8000d66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d72:	4770      	bx	lr
 8000d74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d78:	bf16      	itet	ne
 8000d7a:	4608      	movne	r0, r1
 8000d7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d80:	4601      	movne	r1, r0
 8000d82:	0242      	lsls	r2, r0, #9
 8000d84:	bf06      	itte	eq
 8000d86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d8a:	ea90 0f01 	teqeq	r0, r1
 8000d8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_ui2f>:
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e004      	b.n	8000da4 <__aeabi_i2f+0x8>
 8000d9a:	bf00      	nop

08000d9c <__aeabi_i2f>:
 8000d9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da0:	bf48      	it	mi
 8000da2:	4240      	negmi	r0, r0
 8000da4:	ea5f 0c00 	movs.w	ip, r0
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db0:	4601      	mov	r1, r0
 8000db2:	f04f 0000 	mov.w	r0, #0
 8000db6:	e01c      	b.n	8000df2 <__aeabi_l2f+0x2a>

08000db8 <__aeabi_ul2f>:
 8000db8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dbc:	bf08      	it	eq
 8000dbe:	4770      	bxeq	lr
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e00a      	b.n	8000ddc <__aeabi_l2f+0x14>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_l2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dd4:	d502      	bpl.n	8000ddc <__aeabi_l2f+0x14>
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ddc:	ea5f 0c01 	movs.w	ip, r1
 8000de0:	bf02      	ittt	eq
 8000de2:	4684      	moveq	ip, r0
 8000de4:	4601      	moveq	r1, r0
 8000de6:	2000      	moveq	r0, #0
 8000de8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dec:	bf08      	it	eq
 8000dee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000df2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000df6:	fabc f28c 	clz	r2, ip
 8000dfa:	3a08      	subs	r2, #8
 8000dfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e00:	db10      	blt.n	8000e24 <__aeabi_l2f+0x5c>
 8000e02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e06:	4463      	add	r3, ip
 8000e08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e14:	fa20 f202 	lsr.w	r2, r0, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	f020 0001 	biceq.w	r0, r0, #1
 8000e22:	4770      	bx	lr
 8000e24:	f102 0220 	add.w	r2, r2, #32
 8000e28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e34:	fa21 f202 	lsr.w	r2, r1, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e42:	4770      	bx	lr

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f001 faa7 	bl	800239a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f828 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 fc0e 	bl	8001670 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e54:	f000 fbe2 	bl	800161c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e58:	f000 f880 	bl	8000f5c <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000e5c:	f000 f908 	bl	8001070 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000e60:	f000 f96a 	bl	8001138 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000e64:	f000 f9a8 	bl	80011b8 <MX_I2C3_Init>
  MX_RTC_Init();
 8000e68:	f000 f9e6 	bl	8001238 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000e6c:	f000 fa40 	bl	80012f0 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000e70:	f000 fa60 	bl	8001334 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e74:	f000 fa9c 	bl	80013b0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000e78:	f000 fad8 	bl	800142c <MX_SPI3_Init>
  MX_TIM2_Init();
 8000e7c:	f000 fb14 	bl	80014a8 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e80:	f000 fb60 	bl	8001544 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000e84:	f000 fb94 	bl	80015b0 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000e88:	f00c fad8 	bl	800d43c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000e8c:	f011 fe9a 	bl	8012bc4 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000e90:	f000 f8cc 	bl	800102c <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000e94:	f013 ff60 	bl	8014d58 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000e98:	f014 f8ae 	bl	8014ff8 <MX_X_CUBE_AI_Process>
 8000e9c:	e7fc      	b.n	8000e98 <main+0x54>
	...

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b096      	sub	sp, #88	; 0x58
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2244      	movs	r2, #68	; 0x44
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f01a fa6c 	bl	801b38c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f004 fca4 	bl	8005810 <HAL_PWREx_ControlVoltageScaling>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000ece:	f000 fd3b 	bl	8001948 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ed2:	f004 fc6d 	bl	80057b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <SystemClock_Config+0xb8>)
 8000ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000edc:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <SystemClock_Config+0xb8>)
 8000ede:	f023 0318 	bic.w	r3, r3, #24
 8000ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000ee6:	2325      	movs	r3, #37	; 0x25
 8000ee8:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efc:	2303      	movs	r3, #3
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f00:	2304      	movs	r3, #4
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f04:	233c      	movs	r3, #60	; 0x3c
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fd3d 	bl	8005998 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f24:	f000 fd10 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2105      	movs	r1, #5
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 f943 	bl	80061cc <HAL_RCC_ClockConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f4c:	f000 fcfc 	bl	8001948 <Error_Handler>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3758      	adds	r7, #88	; 0x58
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f74:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <MX_ADC1_Init+0xc8>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fdc:	f001 fc16 	bl	800280c <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fe6:	f000 fcaf 	bl	8001948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_ADC1_Init+0xcc>)
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ff6:	237f      	movs	r3, #127	; 0x7f
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_ADC1_Init+0xc4>)
 8001008:	f001 fd4c 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8001012:	f000 fc99 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200009dc 	.word	0x200009dc
 8001024:	50040000 	.word	0x50040000
 8001028:	21800100 	.word	0x21800100

0800102c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <MX_CRC_Init+0x3c>)
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <MX_CRC_Init+0x40>)
 8001034:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_CRC_Init+0x3c>)
 8001038:	2200      	movs	r2, #0
 800103a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_CRC_Init+0x3c>)
 800103e:	2200      	movs	r2, #0
 8001040:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_CRC_Init+0x3c>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_CRC_Init+0x3c>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_CRC_Init+0x3c>)
 8001050:	2201      	movs	r2, #1
 8001052:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_CRC_Init+0x3c>)
 8001056:	f002 fa33 	bl	80034c0 <HAL_CRC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001060:	f000 fc72 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000a44 	.word	0x20000a44
 800106c:	40023000 	.word	0x40023000

08001070 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <MX_DFSDM1_Init+0xbc>)
 8001078:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001082:	2201      	movs	r2, #1
 8001084:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001088:	2201      	movs	r2, #1
 800108a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 800108e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001092:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001096:	22c0      	movs	r2, #192	; 0xc0
 8001098:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 800109c:	2201      	movs	r2, #1
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80010a0:	4821      	ldr	r0, [pc, #132]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 80010a2:	f002 fbb7 	bl	8003814 <HAL_DFSDM_FilterInit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80010ac:	f000 fc4c 	bl	8001948 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010b2:	4a20      	ldr	r2, [pc, #128]	; (8001134 <MX_DFSDM1_Init+0xc4>)
 80010b4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ce:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 8001102:	f002 fac7 	bl	8003694 <HAL_DFSDM_ChannelInit>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 800110c:	f000 fc1c 	bl	8001948 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001110:	2201      	movs	r2, #1
 8001112:	2101      	movs	r1, #1
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001116:	f002 fc57 	bl	80039c8 <HAL_DFSDM_FilterConfigRegChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8001120:	f000 fc12 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000a68 	.word	0x20000a68
 800112c:	40016100 	.word	0x40016100
 8001130:	20000abc 	.word	0x20000abc
 8001134:	40016000 	.word	0x40016000

08001138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_I2C1_Init+0x74>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <MX_I2C1_Init+0x78>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_I2C1_Init+0x74>)
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <MX_I2C1_Init+0x7c>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_I2C1_Init+0x74>)
 8001150:	2201      	movs	r2, #1
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_I2C1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001172:	480e      	ldr	r0, [pc, #56]	; (80011ac <MX_I2C1_Init+0x74>)
 8001174:	f003 f836 	bl	80041e4 <HAL_I2C_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117e:	f000 fbe3 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <MX_I2C1_Init+0x74>)
 8001186:	f003 f8bc 	bl	8004302 <HAL_I2CEx_ConfigAnalogFilter>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001190:	f000 fbda 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_I2C1_Init+0x74>)
 8001198:	f003 f8fe 	bl	8004398 <HAL_I2CEx_ConfigDigitalFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 fbd1 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000b54 	.word	0x20000b54
 80011b0:	40005400 	.word	0x40005400
 80011b4:	00b03fdb 	.word	0x00b03fdb

080011b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_I2C3_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_I2C3_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_I2C3_Init+0x74>)
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <MX_I2C3_Init+0x7c>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_I2C3_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_I2C3_Init+0x74>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_I2C3_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_I2C3_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C3_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <MX_I2C3_Init+0x74>)
 80011f4:	f002 fff6 	bl	80041e4 <HAL_I2C_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80011fe:	f000 fba3 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <MX_I2C3_Init+0x74>)
 8001206:	f003 f87c 	bl	8004302 <HAL_I2CEx_ConfigAnalogFilter>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001210:	f000 fb9a 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_I2C3_Init+0x74>)
 8001218:	f003 f8be 	bl	8004398 <HAL_I2CEx_ConfigDigitalFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 fb91 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000ba8 	.word	0x20000ba8
 8001230:	40005c00 	.word	0x40005c00
 8001234:	00b03fdb 	.word	0x00b03fdb

08001238 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001252:	4a26      	ldr	r2, [pc, #152]	; (80012ec <MX_RTC_Init+0xb4>)
 8001254:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_RTC_Init+0xb0>)
 800125e:	227f      	movs	r2, #127	; 0x7f
 8001260:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001264:	22ff      	movs	r2, #255	; 0xff
 8001266:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_RTC_Init+0xb0>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_RTC_Init+0xb0>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001282:	f007 f807 	bl	8008294 <HAL_RTC_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800128c:	f000 fb5c 	bl	8001948 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	480f      	ldr	r0, [pc, #60]	; (80012e8 <MX_RTC_Init+0xb0>)
 80012ac:	f007 f86d 	bl	800838a <HAL_RTC_SetTime>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012b6:	f000 fb47 	bl	8001948 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80012ba:	2302      	movs	r3, #2
 80012bc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80012be:	2304      	movs	r3, #4
 80012c0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 80012c2:	2303      	movs	r3, #3
 80012c4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80012c6:	2314      	movs	r3, #20
 80012c8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_RTC_Init+0xb0>)
 80012d2:	f007 f8f7 	bl	80084c4 <HAL_RTC_SetDate>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012dc:	f000 fb34 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000bfc 	.word	0x20000bfc
 80012ec:	40002800 	.word	0x40002800

080012f0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <MX_SDMMC1_SD_Init+0x40>)
 80012f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 8001308:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 800131c:	2201      	movs	r2, #1
 800131e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000c20 	.word	0x20000c20
 8001330:	50062400 	.word	0x50062400

08001334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_SPI1_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_SPI1_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI1_Init+0x74>)
 800134e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001356:	2202      	movs	r2, #2
 8001358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_SPI1_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001366:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI1_Init+0x74>)
 800136a:	2218      	movs	r2, #24
 800136c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_SPI1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001382:	2207      	movs	r2, #7
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001394:	f008 fec9 	bl	800a12a <HAL_SPI_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 fad3 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000ca0 	.word	0x20000ca0
 80013ac:	40013000 	.word	0x40013000

080013b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_SPI2_Init+0x74>)
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <MX_SPI2_Init+0x78>)
 80013b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_SPI2_Init+0x74>)
 80013bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_SPI2_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_SPI2_Init+0x74>)
 80013ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_SPI2_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_SPI2_Init+0x74>)
 80013d8:	2201      	movs	r2, #1
 80013da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_SPI2_Init+0x74>)
 80013de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_SPI2_Init+0x74>)
 80013e6:	2230      	movs	r2, #48	; 0x30
 80013e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_SPI2_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_SPI2_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_SPI2_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_SPI2_Init+0x74>)
 80013fe:	2207      	movs	r2, #7
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_SPI2_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_SPI2_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_SPI2_Init+0x74>)
 8001410:	f008 fe8b 	bl	800a12a <HAL_SPI_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800141a:	f000 fa95 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000d04 	.word	0x20000d04
 8001428:	40003800 	.word	0x40003800

0800142c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <MX_SPI3_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800143c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001446:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800144a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_SPI3_Init+0x74>)
 800144e:	2202      	movs	r2, #2
 8001450:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001454:	2201      	movs	r2, #1
 8001456:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_SPI3_Init+0x74>)
 800145a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001462:	2218      	movs	r2, #24
 8001464:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_SPI3_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_SPI3_Init+0x74>)
 800147a:	2207      	movs	r2, #7
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_SPI3_Init+0x74>)
 800148c:	f008 fe4d 	bl	800a12a <HAL_SPI_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 fa57 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000d68 	.word	0x20000d68
 80014a4:	40003c00 	.word	0x40003c00

080014a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_TIM2_Init+0x98>)
 80014c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_TIM2_Init+0x98>)
 80014d0:	2277      	movs	r2, #119	; 0x77
 80014d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM2_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_TIM2_Init+0x98>)
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_TIM2_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_TIM2_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ee:	4814      	ldr	r0, [pc, #80]	; (8001540 <MX_TIM2_Init+0x98>)
 80014f0:	f009 fa36 	bl	800a960 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014fa:	f000 fa25 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <MX_TIM2_Init+0x98>)
 800150c:	f009 fb9e 	bl	800ac4c <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001516:	f000 fa17 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_TIM2_Init+0x98>)
 8001528:	f009 fdc0 	bl	800b0ac <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001532:	f000 fa09 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000dcc 	.word	0x20000dcc

08001544 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_TIM6_Init+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_TIM6_Init+0x64>)
 800155c:	2277      	movs	r2, #119	; 0x77
 800155e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800156c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001576:	f009 f9f3 	bl	800a960 <HAL_TIM_Base_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001580:	f000 f9e2 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001592:	f009 fd8b 	bl	800b0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800159c:	f000 f9d4 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000e18 	.word	0x20000e18
 80015ac:	40001000 	.word	0x40001000

080015b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_TIM7_Init+0x64>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_TIM7_Init+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_TIM7_Init+0x64>)
 80015c8:	2277      	movs	r2, #119	; 0x77
 80015ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_TIM7_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_TIM7_Init+0x64>)
 80015d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM7_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_TIM7_Init+0x64>)
 80015e2:	f009 f9bd 	bl	800a960 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015ec:	f000 f9ac 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_TIM7_Init+0x64>)
 80015fe:	f009 fd55 	bl	800b0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001608:	f000 f99e 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000e64 	.word	0x20000e64
 8001618:	40001400 	.word	0x40001400

0800161c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_DMA_Init+0x50>)
 8001624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001626:	4a11      	ldr	r2, [pc, #68]	; (800166c <MX_DMA_Init+0x50>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6493      	str	r3, [r2, #72]	; 0x48
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_DMA_Init+0x50>)
 8001630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_DMA_Init+0x50>)
 800163c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <MX_DMA_Init+0x50>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6493      	str	r3, [r2, #72]	; 0x48
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_DMA_Init+0x50>)
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	200e      	movs	r0, #14
 8001658:	f001 fefb 	bl	8003452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800165c:	200e      	movs	r0, #14
 800165e:	f001 ff14 	bl	800348a <HAL_NVIC_EnableIRQ>

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	; 0x38
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4ba9      	ldr	r3, [pc, #676]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4aa8      	ldr	r2, [pc, #672]	; (800192c <MX_GPIO_Init+0x2bc>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4ba6      	ldr	r3, [pc, #664]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	623b      	str	r3, [r7, #32]
 800169c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	4ba3      	ldr	r3, [pc, #652]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4aa2      	ldr	r2, [pc, #648]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4ba0      	ldr	r3, [pc, #640]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	4b9d      	ldr	r3, [pc, #628]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a9c      	ldr	r2, [pc, #624]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b9a      	ldr	r3, [pc, #616]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b97      	ldr	r3, [pc, #604]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a96      	ldr	r2, [pc, #600]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b94      	ldr	r3, [pc, #592]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b91      	ldr	r3, [pc, #580]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a90      	ldr	r2, [pc, #576]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b8e      	ldr	r3, [pc, #568]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a8a      	ldr	r2, [pc, #552]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <MX_GPIO_Init+0x2bc>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001716:	4b85      	ldr	r3, [pc, #532]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a84      	ldr	r2, [pc, #528]	; (800192c <MX_GPIO_Init+0x2bc>)
 800171c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b82      	ldr	r3, [pc, #520]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800172e:	f004 f923 	bl	8005978 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001732:	4b7e      	ldr	r3, [pc, #504]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a7d      	ldr	r2, [pc, #500]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b7b      	ldr	r3, [pc, #492]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f002 fd2e 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8001758:	2201      	movs	r2, #1
 800175a:	f641 4130 	movw	r1, #7216	; 0x1c30
 800175e:	4874      	ldr	r0, [pc, #464]	; (8001930 <MX_GPIO_Init+0x2c0>)
 8001760:	f002 fd28 	bl	80041b4 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2105      	movs	r1, #5
 8001768:	4872      	ldr	r0, [pc, #456]	; (8001934 <MX_GPIO_Init+0x2c4>)
 800176a:	f002 fd23 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001774:	4870      	ldr	r0, [pc, #448]	; (8001938 <MX_GPIO_Init+0x2c8>)
 8001776:	f002 fd1d 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	486d      	ldr	r0, [pc, #436]	; (8001934 <MX_GPIO_Init+0x2c4>)
 8001780:	f002 fd18 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2110      	movs	r1, #16
 8001788:	486b      	ldr	r0, [pc, #428]	; (8001938 <MX_GPIO_Init+0x2c8>)
 800178a:	f002 fd13 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	4869      	ldr	r0, [pc, #420]	; (800193c <MX_GPIO_Init+0x2cc>)
 8001796:	f002 fd0d 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 800179a:	2348      	movs	r3, #72	; 0x48
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4860      	ldr	r0, [pc, #384]	; (8001930 <MX_GPIO_Init+0x2c0>)
 80017b0:	f002 fb56 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80017b4:	2360      	movs	r3, #96	; 0x60
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c4:	2307      	movs	r3, #7
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	485c      	ldr	r0, [pc, #368]	; (8001940 <MX_GPIO_Init+0x2d0>)
 80017d0:	f002 fb46 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 80017d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017da:	2311      	movs	r3, #17
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f002 fb36 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 80017f4:	2330      	movs	r3, #48	; 0x30
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4849      	ldr	r0, [pc, #292]	; (8001930 <MX_GPIO_Init+0x2c0>)
 800180c:	f002 fb28 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 8001810:	2385      	movs	r3, #133	; 0x85
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4843      	ldr	r0, [pc, #268]	; (8001934 <MX_GPIO_Init+0x2c4>)
 8001828:	f002 fb1a 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 800182c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	4619      	mov	r1, r3
 8001844:	483c      	ldr	r0, [pc, #240]	; (8001938 <MX_GPIO_Init+0x2c8>)
 8001846:	f002 fb0b 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 800184a:	2308      	movs	r3, #8
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4836      	ldr	r0, [pc, #216]	; (8001938 <MX_GPIO_Init+0x2c8>)
 800185e:	f002 faff 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8001862:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001868:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4831      	ldr	r0, [pc, #196]	; (8001940 <MX_GPIO_Init+0x2d0>)
 800187a:	f002 faf1 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 800187e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001884:	2311      	movs	r3, #17
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	4826      	ldr	r0, [pc, #152]	; (8001930 <MX_GPIO_Init+0x2c0>)
 8001898:	f002 fae2 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 800189c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4821      	ldr	r0, [pc, #132]	; (800193c <MX_GPIO_Init+0x2cc>)
 80018b6:	f002 fad3 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 80018ba:	2320      	movs	r3, #32
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	481d      	ldr	r0, [pc, #116]	; (8001944 <MX_GPIO_Init+0x2d4>)
 80018d0:	f002 fac6 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 80018d4:	2304      	movs	r3, #4
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f002 fab8 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	4619      	mov	r1, r3
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_GPIO_Init+0x2cc>)
 8001906:	f002 faab 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 800190a:	2302      	movs	r3, #2
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800190e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <MX_GPIO_Init+0x2c8>)
 8001920:	f002 fa9e 	bl	8003e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001924:	bf00      	nop
 8001926:	3738      	adds	r7, #56	; 0x38
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	48001000 	.word	0x48001000
 8001934:	48001400 	.word	0x48001400
 8001938:	48001800 	.word	0x48001800
 800193c:	48000400 	.word	0x48000400
 8001940:	48000c00 	.word	0x48000c00
 8001944:	48000800 	.word	0x48000800

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_MspInit+0x44>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_MspInit+0x44>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	; 0x60
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_MspInit+0x44>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x44>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x44>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x44>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0b2      	sub	sp, #200	; 0xc8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 0318 	add.w	r3, r7, #24
 80019b8:	229c      	movs	r2, #156	; 0x9c
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f019 fce5 	bl	801b38c <memset>
  if(hadc->Instance==ADC1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a35      	ldr	r2, [pc, #212]	; (8001a9c <HAL_ADC_MspInit+0x100>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d162      	bne.n	8001a92 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80019da:	2303      	movs	r3, #3
 80019dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80019de:	2305      	movs	r3, #5
 80019e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80019e2:	2360      	movs	r3, #96	; 0x60
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80019ea:	2304      	movs	r3, #4
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80019ee:	2304      	movs	r3, #4
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fe9f 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001a08:	f7ff ff9e 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8001a54:	2310      	movs	r3, #16
 8001a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a5a:	230b      	movs	r3, #11
 8001a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <HAL_ADC_MspInit+0x108>)
 8001a6e:	f002 f9f7 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8001a72:	2308      	movs	r3, #8
 8001a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a78:	230b      	movs	r3, #11
 8001a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f002 f9e7 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	37c8      	adds	r7, #200	; 0xc8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	50040000 	.word	0x50040000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48000800 	.word	0x48000800

08001aa8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_CRC_MspInit+0x38>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_CRC_MspInit+0x3c>)
 8001abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_CRC_MspInit+0x3c>)
 8001ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_CRC_MspInit+0x3c>)
 8001ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40023000 	.word	0x40023000
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0aa      	sub	sp, #168	; 0xa8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	229c      	movs	r2, #156	; 0x9c
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f019 fc47 	bl	801b38c <memset>
  if(DFSDM1_Init == 0)
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d129      	bne.n	8001b5a <HAL_DFSDM_FilterMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 fe12 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 8001b22:	f7ff ff11 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_DFSDM_FilterMspInit+0xec>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <HAL_DFSDM_FilterMspInit+0xec>)
 8001b2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_DFSDM_FilterMspInit+0xec>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d10b      	bne.n	8001b50 <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_DFSDM_FilterMspInit+0xf0>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3c:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_DFSDM_FilterMspInit+0xf0>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	6613      	str	r3, [r2, #96]	; 0x60
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_DFSDM_FilterMspInit+0xf0>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001b58:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_DFSDM_FilterMspInit+0xf4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d131      	bne.n	8001bc8 <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b66:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <HAL_DFSDM_FilterMspInit+0xfc>)
 8001b68:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b6c:	2256      	movs	r2, #86	; 0x56
 8001b6e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b94:	2220      	movs	r2, #32
 8001b96:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001ba0:	480f      	ldr	r0, [pc, #60]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001ba2:	f001 ffa3 	bl	8003aec <HAL_DMA_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 8001bac:	f7ff fecc 	bl	8001948 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001bc8:	bf00      	nop
 8001bca:	37a8      	adds	r7, #168	; 0xa8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000eb4 	.word	0x20000eb4
 8001bd4:	20000eb0 	.word	0x20000eb0
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40016100 	.word	0x40016100
 8001be0:	20000af4 	.word	0x20000af4
 8001be4:	40020044 	.word	0x40020044

08001be8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0aa      	sub	sp, #168	; 0xa8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	229c      	movs	r2, #156	; 0x9c
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f019 fbc7 	bl	801b38c <memset>
  if(DFSDM1_Init == 0)
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d129      	bne.n	8001c5a <HAL_DFSDM_ChannelMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 fd92 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 8001c22:	f7ff fe91 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d10b      	bne.n	8001c50 <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	6613      	str	r3, [r2, #96]	; 0x60
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001c58:	6013      	str	r3, [r2, #0]
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	37a8      	adds	r7, #168	; 0xa8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000eb4 	.word	0x20000eb4
 8001c68:	20000eb0 	.word	0x20000eb0
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b0b2      	sub	sp, #200	; 0xc8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	229c      	movs	r2, #156	; 0x9c
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f019 fb7b 	bl	801b38c <memset>
  if(hi2c->Instance==I2C1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a43      	ldr	r2, [pc, #268]	; (8001da8 <HAL_I2C_MspInit+0x138>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d13b      	bne.n	8001d18 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	4618      	mov	r0, r3
 8001cae:	f004 fd47 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cb8:	f7ff fe46 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	4a3a      	ldr	r2, [pc, #232]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8001cd4:	23c0      	movs	r3, #192	; 0xc0
 8001cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cda:	2312      	movs	r3, #18
 8001cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cec:	2304      	movs	r3, #4
 8001cee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	482d      	ldr	r0, [pc, #180]	; (8001db0 <HAL_I2C_MspInit+0x140>)
 8001cfa:	f002 f8b1 	bl	8003e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d16:	e043      	b.n	8001da0 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <HAL_I2C_MspInit+0x144>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d13e      	bne.n	8001da0 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 fd05 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001d3c:	f7ff fe04 	bl	8001948 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001d58:	f003 fe0e 	bl	8005978 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001d5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d64:	2312      	movs	r3, #18
 8001d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d76:	2304      	movs	r3, #4
 8001d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <HAL_I2C_MspInit+0x148>)
 8001d84:	f002 f86c 	bl	8003e60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d92:	6593      	str	r3, [r2, #88]	; 0x58
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
}
 8001da0:	bf00      	nop
 8001da2:	37c8      	adds	r7, #200	; 0xc8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40005400 	.word	0x40005400
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000400 	.word	0x48000400
 8001db4:	40005c00 	.word	0x40005c00
 8001db8:	48001800 	.word	0x48001800

08001dbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b0aa      	sub	sp, #168	; 0xa8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	229c      	movs	r2, #156	; 0x9c
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f019 fadd 	bl	801b38c <memset>
  if(hrtc->Instance==RTC)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <HAL_RTC_MspInit+0x5c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d118      	bne.n	8001e0e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fca6 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dfa:	f7ff fda5 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RTC_MspInit+0x60>)
 8001e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e04:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_RTC_MspInit+0x60>)
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	37a8      	adds	r7, #168	; 0xa8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40002800 	.word	0x40002800
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0b2      	sub	sp, #200	; 0xc8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	229c      	movs	r2, #156	; 0x9c
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f019 faa3 	bl	801b38c <memset>
  if(hsd->Instance==SDMMC1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a53      	ldr	r2, [pc, #332]	; (8001f98 <HAL_SD_MspInit+0x178>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	f040 809f 	bne.w	8001f90 <HAL_SD_MspInit+0x170>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001e52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001e58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 fc6b 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001e70:	f7ff fd6a 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e74:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e80:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e90:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	4a3c      	ldr	r2, [pc, #240]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb0:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ebc:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	4a36      	ldr	r2, [pc, #216]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001ec2:	f043 0308 	orr.w	r3, r3, #8
 8001ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 8001ed4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4829      	ldr	r0, [pc, #164]	; (8001fa0 <HAL_SD_MspInit+0x180>)
 8001efc:	f001 ffb0 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 8001f00:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f24:	4619      	mov	r1, r3
 8001f26:	481f      	ldr	r0, [pc, #124]	; (8001fa4 <HAL_SD_MspInit+0x184>)
 8001f28:	f001 ff9a 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f44:	230c      	movs	r3, #12
 8001f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4815      	ldr	r0, [pc, #84]	; (8001fa8 <HAL_SD_MspInit+0x188>)
 8001f52:	f001 ff85 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001f6e:	2308      	movs	r3, #8
 8001f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <HAL_SD_MspInit+0x184>)
 8001f7c:	f001 ff70 	bl	8003e60 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	2031      	movs	r0, #49	; 0x31
 8001f86:	f001 fa64 	bl	8003452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001f8a:	2031      	movs	r0, #49	; 0x31
 8001f8c:	f001 fa7d 	bl	800348a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001f90:	bf00      	nop
 8001f92:	37c8      	adds	r7, #200	; 0xc8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	50062400 	.word	0x50062400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00

08001fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08e      	sub	sp, #56	; 0x38
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a64      	ldr	r2, [pc, #400]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d13a      	bne.n	8002044 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fce:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fda:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	623b      	str	r3, [r7, #32]
 8001fe4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe6:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 8001ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002008:	2301      	movs	r3, #1
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002010:	2305      	movs	r3, #5
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4852      	ldr	r0, [pc, #328]	; (8002164 <HAL_SPI_MspInit+0x1b8>)
 800201c:	f001 ff20 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 8002020:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002032:	2305      	movs	r3, #5
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	4849      	ldr	r0, [pc, #292]	; (8002164 <HAL_SPI_MspInit+0x1b8>)
 800203e:	f001 ff0f 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002042:	e086      	b.n	8002152 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_SPI_MspInit+0x1bc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d144      	bne.n	80020d8 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a43      	ldr	r2, [pc, #268]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	4a37      	ldr	r2, [pc, #220]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208a:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 8002096:	230a      	movs	r3, #10
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020a6:	2305      	movs	r3, #5
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	482e      	ldr	r0, [pc, #184]	; (800216c <HAL_SPI_MspInit+0x1c0>)
 80020b2:	f001 fed5 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80020b6:	2308      	movs	r3, #8
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c6:	2305      	movs	r3, #5
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	4827      	ldr	r0, [pc, #156]	; (8002170 <HAL_SPI_MspInit+0x1c4>)
 80020d2:	f001 fec5 	bl	8003e60 <HAL_GPIO_Init>
}
 80020d6:	e03c      	b.n	8002152 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_SPI_MspInit+0x1c8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d137      	bne.n	8002152 <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 80020e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8002112:	2330      	movs	r3, #48	; 0x30
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002122:	2306      	movs	r3, #6
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212a:	4619      	mov	r1, r3
 800212c:	4812      	ldr	r0, [pc, #72]	; (8002178 <HAL_SPI_MspInit+0x1cc>)
 800212e:	f001 fe97 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 8002132:	2308      	movs	r3, #8
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213a:	2301      	movs	r3, #1
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002142:	2306      	movs	r3, #6
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	480a      	ldr	r0, [pc, #40]	; (8002178 <HAL_SPI_MspInit+0x1cc>)
 800214e:	f001 fe87 	bl	8003e60 <HAL_GPIO_Init>
}
 8002152:	bf00      	nop
 8002154:	3738      	adds	r7, #56	; 0x38
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40013000 	.word	0x40013000
 8002160:	40021000 	.word	0x40021000
 8002164:	48001000 	.word	0x48001000
 8002168:	40003800 	.word	0x40003800
 800216c:	48000c00 	.word	0x48000c00
 8002170:	48000800 	.word	0x48000800
 8002174:	40003c00 	.word	0x40003c00
 8002178:	48000400 	.word	0x48000400

0800217c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218c:	d10c      	bne.n	80021a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80021a6:	e02a      	b.n	80021fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_TIM_Base_MspInit+0x90>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d114      	bne.n	80021dc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	6593      	str	r3, [r2, #88]	; 0x58
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	2036      	movs	r0, #54	; 0x36
 80021d0:	f001 f93f 	bl	8003452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021d4:	2036      	movs	r0, #54	; 0x36
 80021d6:	f001 f958 	bl	800348a <HAL_NVIC_EnableIRQ>
}
 80021da:	e010      	b.n	80021fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <HAL_TIM_Base_MspInit+0x94>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10b      	bne.n	80021fe <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021ec:	f043 0320 	orr.w	r3, r3, #32
 80021f0:	6593      	str	r3, [r2, #88]	; 0x58
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40001000 	.word	0x40001000
 8002210:	40001400 	.word	0x40001400

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <NMI_Handler+0x4>

0800221a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <UsageFault_Handler+0x4>

08002232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002260:	f000 f8f0 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <DMA1_Channel4_IRQHandler+0x10>)
 800226e:	f001 fce5 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000af4 	.word	0x20000af4

0800227c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <SDMMC1_IRQHandler+0x10>)
 8002282:	f006 fcd5 	bl	8008c30 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000c20 	.word	0x20000c20

08002290 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <TIM6_DAC_IRQHandler+0x10>)
 8002296:	f008 fbba 	bl	800aa0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000e18 	.word	0x20000e18

080022a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <OTG_FS_IRQHandler+0x10>)
 80022aa:	f002 fa14 	bl	80046d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20002860 	.word	0x20002860

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f019 f808 	bl	801b2fc <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200a0000 	.word	0x200a0000
 8002318:	00000800 	.word	0x00000800
 800231c:	20000eb8 	.word	0x20000eb8
 8002320:	20004608 	.word	0x20004608

08002324 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <SystemInit+0x20>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <SystemInit+0x20>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800234c:	f7ff ffea 	bl	8002324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002350:	480c      	ldr	r0, [pc, #48]	; (8002384 <LoopForever+0x6>)
  ldr r1, =_edata
 8002352:	490d      	ldr	r1, [pc, #52]	; (8002388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <LoopForever+0xe>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002368:	4c0a      	ldr	r4, [pc, #40]	; (8002394 <LoopForever+0x16>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002376:	f018 ffc7 	bl	801b308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800237a:	f7fe fd63 	bl	8000e44 <main>

0800237e <LoopForever>:

LoopForever:
    b LoopForever
 800237e:	e7fe      	b.n	800237e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002380:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002388:	200009bc 	.word	0x200009bc
  ldr r2, =_sidata
 800238c:	0802b8d0 	.word	0x0802b8d0
  ldr r2, =_sbss
 8002390:	200009c0 	.word	0x200009c0
  ldr r4, =_ebss
 8002394:	20004608 	.word	0x20004608

08002398 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC1_IRQHandler>

0800239a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f001 f849 	bl	800343c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023aa:	2000      	movs	r0, #0
 80023ac:	f000 f80e 	bl	80023cc <HAL_InitTick>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	71fb      	strb	r3, [r7, #7]
 80023ba:	e001      	b.n	80023c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023bc:	f7ff faca 	bl	8001954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023c0:	79fb      	ldrb	r3, [r7, #7]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_InitTick+0x6c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_InitTick+0x70>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_InitTick+0x6c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 f855 	bl	80034a6 <HAL_SYSTICK_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10f      	bne.n	8002422 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d809      	bhi.n	800241c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f001 f81f 	bl	8003452 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_InitTick+0x74>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e007      	b.n	800242c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e004      	b.n	800242c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	e001      	b.n	800242c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000008 	.word	0x20000008
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000008 	.word	0x20000008
 8002468:	20000ebc 	.word	0x20000ebc

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000ebc 	.word	0x20000ebc

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff ffee 	bl	800246c <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffde 	bl	800246c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008

080024cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	609a      	str	r2, [r3, #8]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3360      	adds	r3, #96	; 0x60
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <LL_ADC_SetOffset+0x44>)
 8002556:	4013      	ands	r3, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	4313      	orrs	r3, r2
 8002564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	03fff000 	.word	0x03fff000

0800257c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3360      	adds	r3, #96	; 0x60
 800258a:	461a      	mov	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3360      	adds	r3, #96	; 0x60
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	615a      	str	r2, [r3, #20]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3330      	adds	r3, #48	; 0x30
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	4413      	add	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	211f      	movs	r1, #31
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	401a      	ands	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	f003 011f 	and.w	r1, r3, #31
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3314      	adds	r3, #20
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	0e5b      	lsrs	r3, r3, #25
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	0d1b      	lsrs	r3, r3, #20
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2107      	movs	r1, #7
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	401a      	ands	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	0d1b      	lsrs	r3, r3, #20
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	431a      	orrs	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	43db      	mvns	r3, r3
 80026ce:	401a      	ands	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f003 0318 	and.w	r3, r3, #24
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026d8:	40d9      	lsrs	r1, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	400b      	ands	r3, r1
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	431a      	orrs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	0007ffff 	.word	0x0007ffff

080026fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800270c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6093      	str	r3, [r2, #8]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002734:	d101      	bne.n	800273a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800275c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002784:	d101      	bne.n	800278a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <LL_ADC_IsEnabled+0x18>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <LL_ADC_IsEnabled+0x1a>
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d101      	bne.n	80027d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d101      	bne.n	80027fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e12f      	b.n	8002a86 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff f8b1 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff67 	bl	8002720 <LL_ADC_IsDeepPowerDownEnabled>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff4d 	bl	80026fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff82 	bl	8002770 <LL_ADC_IsInternalRegulatorEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff66 	bl	8002748 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800287c:	4b84      	ldr	r3, [pc, #528]	; (8002a90 <HAL_ADC_Init+0x284>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	4a84      	ldr	r2, [pc, #528]	; (8002a94 <HAL_ADC_Init+0x288>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002890:	e002      	b.n	8002898 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3b01      	subs	r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f9      	bne.n	8002892 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff64 	bl	8002770 <LL_ADC_IsInternalRegulatorEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	f043 0210 	orr.w	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff75 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 80028d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 80c8 	bne.w	8002a74 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 80c4 	bne.w	8002a74 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028f4:	f043 0202 	orr.w	r2, r3, #2
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff49 	bl	8002798 <LL_ADC_IsEnabled>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800290c:	4862      	ldr	r0, [pc, #392]	; (8002a98 <HAL_ADC_Init+0x28c>)
 800290e:	f7ff ff43 	bl	8002798 <LL_ADC_IsEnabled>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4619      	mov	r1, r3
 800291e:	485f      	ldr	r0, [pc, #380]	; (8002a9c <HAL_ADC_Init+0x290>)
 8002920:	f7ff fdd4 	bl	80024cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e5b      	ldrb	r3, [r3, #25]
 8002928:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800292e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002934:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800293a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002942:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d106      	bne.n	8002960 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	3b01      	subs	r3, #1
 8002958:	045b      	lsls	r3, r3, #17
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_ADC_Init+0x294>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	430b      	orrs	r3, r1
 800298e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff12 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 800299a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff1f 	bl	80027e4 <LL_ADC_INJ_IsConversionOngoing>
 80029a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d140      	bne.n	8002a30 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d13d      	bne.n	8002a30 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7e1b      	ldrb	r3, [r3, #24]
 80029bc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029be:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029c6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d6:	f023 0306 	bic.w	r3, r3, #6
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	69b9      	ldr	r1, [r7, #24]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d118      	bne.n	8002a20 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a10:	430a      	orrs	r2, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	e007      	b.n	8002a30 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d10c      	bne.n	8002a52 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f023 010f 	bic.w	r1, r3, #15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a50:	e007      	b.n	8002a62 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 020f 	bic.w	r2, r2, #15
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	659a      	str	r2, [r3, #88]	; 0x58
 8002a72:	e007      	b.n	8002a84 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f043 0210 	orr.w	r2, r3, #16
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000000 	.word	0x20000000
 8002a94:	053e2d63 	.word	0x053e2d63
 8002a98:	50040000 	.word	0x50040000
 8002a9c:	50040300 	.word	0x50040300
 8002aa0:	fff0c007 	.word	0xfff0c007

08002aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0b6      	sub	sp, #216	; 0xd8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x22>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e3d5      	b.n	8003272 <HAL_ADC_ConfigChannel+0x7ce>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fe73 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 83ba 	bne.w	8003254 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d824      	bhi.n	8002b32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	3b02      	subs	r3, #2
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d81b      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0x86>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <HAL_ADC_ConfigChannel+0x54>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b11 	.word	0x08002b11
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b21 	.word	0x08002b21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	605a      	str	r2, [r3, #4]
          break;
 8002b0e:	e011      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2212      	movs	r2, #18
 8002b14:	605a      	str	r2, [r3, #4]
          break;
 8002b16:	e00d      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2218      	movs	r2, #24
 8002b1c:	605a      	str	r2, [r3, #4]
          break;
 8002b1e:	e009      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b26:	605a      	str	r2, [r3, #4]
          break;
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	605a      	str	r2, [r3, #4]
          break;
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	f7ff fd5f 	bl	8002604 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fe37 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 8002b50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fe43 	bl	80027e4 <LL_ADC_INJ_IsConversionOngoing>
 8002b5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 81c1 	bne.w	8002eee <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 81bc 	bne.w	8002eee <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7ff fd66 	bl	800265c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fd20 	bl	80025de <LL_ADC_SetSamplingTimeCommonConfig>
 8002b9e:	e00e      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	461a      	mov	r2, r3
 8002bae:	f7ff fd55 	bl	800265c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fd10 	bl	80025de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d00a      	beq.n	8002bf6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6919      	ldr	r1, [r3, #16]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bf0:	f7ff fca0 	bl	8002534 <LL_ADC_SetOffset>
 8002bf4:	e17b      	b.n	8002eee <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fcbd 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x17e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fcb2 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	0e9b      	lsrs	r3, r3, #26
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	e01e      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x1bc>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fca7 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e004      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x1d4>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	e018      	b.n	8002caa <HAL_ADC_ConfigChannel+0x206>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e004      	b.n	8002caa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002ca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d106      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fc76 	bl	80025a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fc5a 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x244>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fc4f 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	0e9b      	lsrs	r3, r3, #26
 8002ce2:	f003 021f 	and.w	r2, r3, #31
 8002ce6:	e01e      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x282>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fc44 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002d16:	2320      	movs	r3, #32
 8002d18:	e004      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x29a>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	e018      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x2cc>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e004      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002d66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d106      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fc13 	bl	80025a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fbf7 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x30a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fbec 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	0e9b      	lsrs	r3, r3, #26
 8002da8:	f003 021f 	and.w	r2, r3, #31
 8002dac:	e01e      	b.n	8002dec <HAL_ADC_ConfigChannel+0x348>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2102      	movs	r1, #2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fbe1 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e004      	b.n	8002dea <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x360>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	e016      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x38e>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e004      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d106      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fbb2 	bl	80025a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2103      	movs	r1, #3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fb96 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x3cc>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2103      	movs	r1, #3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fb8b 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 021f 	and.w	r2, r3, #31
 8002e6e:	e017      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x3fc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2103      	movs	r1, #3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fb80 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002e92:	2320      	movs	r3, #32
 8002e94:	e003      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x414>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	e011      	b.n	8002edc <HAL_ADC_ConfigChannel+0x438>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e003      	b.n	8002edc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d106      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fb5d 	bl	80025a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fc50 	bl	8002798 <LL_ADC_IsEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 8140 	bne.w	8003180 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6819      	ldr	r1, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f7ff fbd1 	bl	80026b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	4a8f      	ldr	r2, [pc, #572]	; (8003154 <HAL_ADC_ConfigChannel+0x6b0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	f040 8131 	bne.w	8003180 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x4a2>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0e9b      	lsrs	r3, r3, #26
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	bf94      	ite	ls
 8002f3e:	2301      	movls	r3, #1
 8002f40:	2300      	movhi	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	e019      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x4d6>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f56:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	bf94      	ite	ls
 8002f74:	2301      	movls	r3, #1
 8002f76:	2300      	movhi	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d079      	beq.n	8003072 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d107      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x4f6>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	0e9b      	lsrs	r3, r3, #26
 8002f90:	3301      	adds	r3, #1
 8002f92:	069b      	lsls	r3, r3, #26
 8002f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f98:	e015      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x522>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002faa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	e003      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	069b      	lsls	r3, r3, #26
 8002fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x542>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	e017      	b.n	8003016 <HAL_ADC_ConfigChannel+0x572>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002ffe:	2320      	movs	r3, #32
 8003000:	e003      	b.n	800300a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3301      	adds	r3, #1
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2101      	movs	r1, #1
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	ea42 0103 	orr.w	r1, r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <HAL_ADC_ConfigChannel+0x598>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0e9b      	lsrs	r3, r3, #26
 800302c:	3301      	adds	r3, #1
 800302e:	f003 021f 	and.w	r2, r3, #31
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	051b      	lsls	r3, r3, #20
 800303a:	e018      	b.n	800306e <HAL_ADC_ConfigChannel+0x5ca>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800304e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e003      	b.n	8003060 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f003 021f 	and.w	r2, r3, #31
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800306e:	430b      	orrs	r3, r1
 8003070:	e081      	b.n	8003176 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_ADC_ConfigChannel+0x5ea>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	3301      	adds	r3, #1
 8003086:	069b      	lsls	r3, r3, #26
 8003088:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800308c:	e015      	b.n	80030ba <HAL_ADC_ConfigChannel+0x616>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80030a6:	2320      	movs	r3, #32
 80030a8:	e003      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	3301      	adds	r3, #1
 80030b4:	069b      	lsls	r3, r3, #26
 80030b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_ADC_ConfigChannel+0x636>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0e9b      	lsrs	r3, r3, #26
 80030cc:	3301      	adds	r3, #1
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	e017      	b.n	800310a <HAL_ADC_ConfigChannel+0x666>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	61fb      	str	r3, [r7, #28]
  return result;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e003      	b.n	80030fe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	ea42 0103 	orr.w	r1, r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10d      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x692>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	0e9b      	lsrs	r3, r3, #26
 8003120:	3301      	adds	r3, #1
 8003122:	f003 021f 	and.w	r2, r3, #31
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	3b1e      	subs	r3, #30
 800312e:	051b      	lsls	r3, r3, #20
 8003130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003134:	e01e      	b.n	8003174 <HAL_ADC_ConfigChannel+0x6d0>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	613b      	str	r3, [r7, #16]
  return result;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800314e:	2320      	movs	r3, #32
 8003150:	e006      	b.n	8003160 <HAL_ADC_ConfigChannel+0x6bc>
 8003152:	bf00      	nop
 8003154:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f003 021f 	and.w	r2, r3, #31
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	3b1e      	subs	r3, #30
 800316e:	051b      	lsls	r3, r3, #20
 8003170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003174:	430b      	orrs	r3, r1
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	6892      	ldr	r2, [r2, #8]
 800317a:	4619      	mov	r1, r3
 800317c:	f7ff fa6e 	bl	800265c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_ADC_ConfigChannel+0x7d8>)
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d06c      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800318c:	483c      	ldr	r0, [pc, #240]	; (8003280 <HAL_ADC_ConfigChannel+0x7dc>)
 800318e:	f7ff f9c3 	bl	8002518 <LL_ADC_GetCommonPathInternalCh>
 8003192:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a3a      	ldr	r2, [pc, #232]	; (8003284 <HAL_ADC_ConfigChannel+0x7e0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d127      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d121      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a35      	ldr	r2, [pc, #212]	; (8003288 <HAL_ADC_ConfigChannel+0x7e4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d157      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031be:	4619      	mov	r1, r3
 80031c0:	482f      	ldr	r0, [pc, #188]	; (8003280 <HAL_ADC_ConfigChannel+0x7dc>)
 80031c2:	f7ff f996 	bl	80024f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c6:	4b31      	ldr	r3, [pc, #196]	; (800328c <HAL_ADC_ConfigChannel+0x7e8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	4a30      	ldr	r2, [pc, #192]	; (8003290 <HAL_ADC_ConfigChannel+0x7ec>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031e0:	e002      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f9      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ee:	e03a      	b.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a27      	ldr	r2, [pc, #156]	; (8003294 <HAL_ADC_ConfigChannel+0x7f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d113      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x77e>
 80031fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_ADC_ConfigChannel+0x7e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d12a      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003218:	4619      	mov	r1, r3
 800321a:	4819      	ldr	r0, [pc, #100]	; (8003280 <HAL_ADC_ConfigChannel+0x7dc>)
 800321c:	f7ff f969 	bl	80024f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003220:	e021      	b.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_ADC_ConfigChannel+0x7f4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d11c      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800322c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d116      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a12      	ldr	r2, [pc, #72]	; (8003288 <HAL_ADC_ConfigChannel+0x7e4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800324a:	4619      	mov	r1, r3
 800324c:	480c      	ldr	r0, [pc, #48]	; (8003280 <HAL_ADC_ConfigChannel+0x7dc>)
 800324e:	f7ff f950 	bl	80024f2 <LL_ADC_SetCommonPathInternalCh>
 8003252:	e008      	b.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800326e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003272:	4618      	mov	r0, r3
 8003274:	37d8      	adds	r7, #216	; 0xd8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	80080000 	.word	0x80080000
 8003280:	50040300 	.word	0x50040300
 8003284:	c7520000 	.word	0xc7520000
 8003288:	50040000 	.word	0x50040000
 800328c:	20000000 	.word	0x20000000
 8003290:	053e2d63 	.word	0x053e2d63
 8003294:	cb840000 	.word	0xcb840000
 8003298:	80000001 	.word	0x80000001

0800329c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b8:	4013      	ands	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ce:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	60d3      	str	r3, [r2, #12]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <__NVIC_GetPriorityGrouping+0x18>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 0307 	and.w	r3, r3, #7
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db0b      	blt.n	800332a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <__NVIC_EnableIRQ+0x38>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2001      	movs	r0, #1
 8003322:	fa00 f202 	lsl.w	r2, r0, r2
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000e100 	.word	0xe000e100

0800333c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	2b00      	cmp	r3, #0
 800334e:	db0a      	blt.n	8003366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	490c      	ldr	r1, [pc, #48]	; (8003388 <__NVIC_SetPriority+0x4c>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	0112      	lsls	r2, r2, #4
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	440b      	add	r3, r1
 8003360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003364:	e00a      	b.n	800337c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4908      	ldr	r1, [pc, #32]	; (800338c <__NVIC_SetPriority+0x50>)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	3b04      	subs	r3, #4
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	440b      	add	r3, r1
 800337a:	761a      	strb	r2, [r3, #24]
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000e100 	.word	0xe000e100
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f1c3 0307 	rsb	r3, r3, #7
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	bf28      	it	cs
 80033ae:	2304      	movcs	r3, #4
 80033b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d902      	bls.n	80033c0 <NVIC_EncodePriority+0x30>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3b03      	subs	r3, #3
 80033be:	e000      	b.n	80033c2 <NVIC_EncodePriority+0x32>
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	401a      	ands	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	43d9      	mvns	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	4313      	orrs	r3, r2
         );
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003408:	d301      	bcc.n	800340e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800340a:	2301      	movs	r3, #1
 800340c:	e00f      	b.n	800342e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <SysTick_Config+0x40>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003416:	210f      	movs	r1, #15
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	f7ff ff8e 	bl	800333c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <SysTick_Config+0x40>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003426:	4b04      	ldr	r3, [pc, #16]	; (8003438 <SysTick_Config+0x40>)
 8003428:	2207      	movs	r2, #7
 800342a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	e000e010 	.word	0xe000e010

0800343c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ff29 	bl	800329c <__NVIC_SetPriorityGrouping>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b086      	sub	sp, #24
 8003456:	af00      	add	r7, sp, #0
 8003458:	4603      	mov	r3, r0
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003464:	f7ff ff3e 	bl	80032e4 <__NVIC_GetPriorityGrouping>
 8003468:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	6978      	ldr	r0, [r7, #20]
 8003470:	f7ff ff8e 	bl	8003390 <NVIC_EncodePriority>
 8003474:	4602      	mov	r2, r0
 8003476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff5d 	bl	800333c <__NVIC_SetPriority>
}
 8003482:	bf00      	nop
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	4603      	mov	r3, r0
 8003492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff31 	bl	8003300 <__NVIC_EnableIRQ>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffa2 	bl	80033f8 <SysTick_Config>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e054      	b.n	800357c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7f5b      	ldrb	r3, [r3, #29]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fe fae0 	bl	8001aa8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	791b      	ldrb	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_CRC_Init+0xc4>)
 80034fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0218 	bic.w	r2, r2, #24
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	e00c      	b.n	800352a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6899      	ldr	r1, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	461a      	mov	r2, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f834 	bl	8003588 <HAL_CRCEx_Polynomial_Set>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e028      	b.n	800357c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	795b      	ldrb	r3, [r3, #5]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d105      	bne.n	800353e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f04f 32ff 	mov.w	r2, #4294967295
 800353a:	611a      	str	r2, [r3, #16]
 800353c:	e004      	b.n	8003548 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6912      	ldr	r2, [r2, #16]
 8003546:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	04c11db7 	.word	0x04c11db7

08003588 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003598:	231f      	movs	r3, #31
 800359a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800359c:	bf00      	nop
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1e5a      	subs	r2, r3, #1
 80035a2:	613a      	str	r2, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <HAL_CRCEx_Polynomial_Set+0x34>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b18      	cmp	r3, #24
 80035c0:	d846      	bhi.n	8003650 <HAL_CRCEx_Polynomial_Set+0xc8>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	08003657 	.word	0x08003657
 80035cc:	08003651 	.word	0x08003651
 80035d0:	08003651 	.word	0x08003651
 80035d4:	08003651 	.word	0x08003651
 80035d8:	08003651 	.word	0x08003651
 80035dc:	08003651 	.word	0x08003651
 80035e0:	08003651 	.word	0x08003651
 80035e4:	08003651 	.word	0x08003651
 80035e8:	08003645 	.word	0x08003645
 80035ec:	08003651 	.word	0x08003651
 80035f0:	08003651 	.word	0x08003651
 80035f4:	08003651 	.word	0x08003651
 80035f8:	08003651 	.word	0x08003651
 80035fc:	08003651 	.word	0x08003651
 8003600:	08003651 	.word	0x08003651
 8003604:	08003651 	.word	0x08003651
 8003608:	08003639 	.word	0x08003639
 800360c:	08003651 	.word	0x08003651
 8003610:	08003651 	.word	0x08003651
 8003614:	08003651 	.word	0x08003651
 8003618:	08003651 	.word	0x08003651
 800361c:	08003651 	.word	0x08003651
 8003620:	08003651 	.word	0x08003651
 8003624:	08003651 	.word	0x08003651
 8003628:	0800362d 	.word	0x0800362d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b06      	cmp	r3, #6
 8003630:	d913      	bls.n	800365a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003636:	e010      	b.n	800365a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	2b07      	cmp	r3, #7
 800363c:	d90f      	bls.n	800365e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003642:	e00c      	b.n	800365e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b0f      	cmp	r3, #15
 8003648:	d90b      	bls.n	8003662 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800364e:	e008      	b.n	8003662 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	75fb      	strb	r3, [r7, #23]
      break;
 8003654:	e006      	b.n	8003664 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003656:	bf00      	nop
 8003658:	e004      	b.n	8003664 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800365a:	bf00      	nop
 800365c:	e002      	b.n	8003664 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003662:	bf00      	nop
  }
  if (status == HAL_OK)
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10d      	bne.n	8003686 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 0118 	bic.w	r1, r3, #24
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
}
 8003688:	4618      	mov	r0, r3
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0ac      	b.n	8003800 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f9d2 	bl	8003a54 <DFSDM_GetChannelFromInstance>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4a55      	ldr	r2, [pc, #340]	; (8003808 <HAL_DFSDM_ChannelInit+0x174>)
 80036b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e09f      	b.n	8003800 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fe fa91 	bl	8001be8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_DFSDM_ChannelInit+0x178>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a4f      	ldr	r2, [pc, #316]	; (800380c <HAL_DFSDM_ChannelInit+0x178>)
 80036ce:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80036d0:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_DFSDM_ChannelInit+0x178>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d125      	bne.n	8003724 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80036d8:	4b4d      	ldr	r3, [pc, #308]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4c      	ldr	r2, [pc, #304]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036e2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80036e4:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4948      	ldr	r1, [pc, #288]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a46      	ldr	r2, [pc, #280]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036f8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80036fc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	791b      	ldrb	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d108      	bne.n	8003718 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003706:	4b42      	ldr	r3, [pc, #264]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	3b01      	subs	r3, #1
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	493f      	ldr	r1, [pc, #252]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003718:	4b3d      	ldr	r3, [pc, #244]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 800371e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003722:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003732:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003742:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003748:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 020f 	bic.w	r2, r2, #15
 8003760:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003788:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f002 0207 	and.w	r2, r2, #7
 80037b4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037e0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f930 	bl	8003a54 <DFSDM_GetChannelFromInstance>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4904      	ldr	r1, [pc, #16]	; (8003808 <HAL_DFSDM_ChannelInit+0x174>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000ec4 	.word	0x20000ec4
 800380c:	20000ec0 	.word	0x20000ec0
 8003810:	40016000 	.word	0x40016000

08003814 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0ca      	b.n	80039bc <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a66      	ldr	r2, [pc, #408]	; (80039c4 <HAL_DFSDM_FilterInit+0x1b0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d109      	bne.n	8003844 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003834:	2b01      	cmp	r3, #1
 8003836:	d003      	beq.n	8003840 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0bb      	b.n	80039bc <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fe f943 	bl	8001ae8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003870:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7a1b      	ldrb	r3, [r3, #8]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d108      	bne.n	800388c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e007      	b.n	800389c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800389a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	7a5b      	ldrb	r3, [r3, #9]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d108      	bne.n	80038b6 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e007      	b.n	80038c6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80038c4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038d4:	f023 0308 	bic.w	r3, r3, #8
 80038d8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d108      	bne.n	80038f4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7c1b      	ldrb	r3, [r3, #16]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d108      	bne.n	800390e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0210 	orr.w	r2, r2, #16
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e007      	b.n	800391e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0210 	bic.w	r2, r2, #16
 800391c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7c5b      	ldrb	r3, [r3, #17]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d108      	bne.n	8003938 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e007      	b.n	8003948 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0220 	bic.w	r2, r2, #32
 8003946:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003956:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800395a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6959      	ldr	r1, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	3b01      	subs	r3, #1
 800396c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800396e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003976:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7c1a      	ldrb	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40016100 	.word	0x40016100

080039c8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d02e      	beq.n	8003a40 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80039e8:	2bff      	cmp	r3, #255	; 0xff
 80039ea:	d029      	beq.n	8003a40 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10d      	bne.n	8003a22 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e00a      	b.n	8003a38 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3e:	e001      	b.n	8003a44 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d102      	bne.n	8003a6a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e02b      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <DFSDM_GetChannelFromInstance+0x80>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d102      	bne.n	8003a78 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e024      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <DFSDM_GetChannelFromInstance+0x84>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d102      	bne.n	8003a86 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003a80:	2302      	movs	r3, #2
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e01d      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <DFSDM_GetChannelFromInstance+0x88>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d102      	bne.n	8003a94 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003a8e:	2304      	movs	r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e016      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d102      	bne.n	8003aa2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003a9c:	2305      	movs	r3, #5
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e00f      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <DFSDM_GetChannelFromInstance+0x90>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d102      	bne.n	8003ab0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003aaa:	2306      	movs	r3, #6
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	e008      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <DFSDM_GetChannelFromInstance+0x94>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d102      	bne.n	8003abe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003ab8:	2307      	movs	r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e001      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40016000 	.word	0x40016000
 8003ad4:	40016020 	.word	0x40016020
 8003ad8:	40016040 	.word	0x40016040
 8003adc:	40016080 	.word	0x40016080
 8003ae0:	400160a0 	.word	0x400160a0
 8003ae4:	400160c0 	.word	0x400160c0
 8003ae8:	400160e0 	.word	0x400160e0

08003aec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e08d      	b.n	8003c1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_DMA_Init+0x138>)
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d80f      	bhi.n	8003b2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b45      	ldr	r3, [pc, #276]	; (8003c28 <HAL_DMA_Init+0x13c>)
 8003b12:	4413      	add	r3, r2
 8003b14:	4a45      	ldr	r2, [pc, #276]	; (8003c2c <HAL_DMA_Init+0x140>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	009a      	lsls	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a42      	ldr	r2, [pc, #264]	; (8003c30 <HAL_DMA_Init+0x144>)
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
 8003b28:	e00e      	b.n	8003b48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b40      	ldr	r3, [pc, #256]	; (8003c34 <HAL_DMA_Init+0x148>)
 8003b32:	4413      	add	r3, r2
 8003b34:	4a3d      	ldr	r2, [pc, #244]	; (8003c2c <HAL_DMA_Init+0x140>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	009a      	lsls	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a3c      	ldr	r2, [pc, #240]	; (8003c38 <HAL_DMA_Init+0x14c>)
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8fe 	bl	8003d9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba8:	d102      	bne.n	8003bb0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bc4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d010      	beq.n	8003bf0 <HAL_DMA_Init+0x104>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d80c      	bhi.n	8003bf0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f91e 	bl	8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	e008      	b.n	8003c02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40020407 	.word	0x40020407
 8003c28:	bffdfff8 	.word	0xbffdfff8
 8003c2c:	cccccccd 	.word	0xcccccccd
 8003c30:	40020000 	.word	0x40020000
 8003c34:	bffdfbf8 	.word	0xbffdfbf8
 8003c38:	40020400 	.word	0x40020400

08003c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f003 031c 	and.w	r3, r3, #28
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d026      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x7a>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d021      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	f003 021c 	and.w	r2, r3, #28
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	2104      	movs	r1, #4
 8003c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d071      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003cb4:	e06c      	b.n	8003d90 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f003 031c 	and.w	r3, r3, #28
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02e      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xec>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d029      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 020a 	bic.w	r2, r2, #10
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f003 021c 	and.w	r2, r3, #28
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	2102      	movs	r1, #2
 8003d08:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d038      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d26:	e033      	b.n	8003d90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	f003 031c 	and.w	r3, r3, #28
 8003d30:	2208      	movs	r2, #8
 8003d32:	409a      	lsls	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02a      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x156>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d025      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 020e 	bic.w	r2, r2, #14
 8003d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f003 021c 	and.w	r2, r3, #28
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f202 	lsl.w	r2, r1, r2
 8003d68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
}
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d80a      	bhi.n	8003dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dbc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6493      	str	r3, [r2, #72]	; 0x48
 8003dc4:	e007      	b.n	8003dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	009a      	lsls	r2, r3, #2
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	3b08      	subs	r3, #8
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003dec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40020407 	.word	0x40020407
 8003e0c:	4002081c 	.word	0x4002081c
 8003e10:	cccccccd 	.word	0xcccccccd
 8003e14:	40020880 	.word	0x40020880

08003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	461a      	mov	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e3a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2201      	movs	r2, #1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	1000823f 	.word	0x1000823f
 8003e5c:	40020940 	.word	0x40020940

08003e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6e:	e166      	b.n	800413e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8158 	beq.w	8004138 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d005      	beq.n	8003ea0 <HAL_GPIO_Init+0x40>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d130      	bne.n	8003f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f003 0201 	and.w	r2, r3, #1
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d017      	beq.n	8003f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d123      	bne.n	8003f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3208      	adds	r2, #8
 8003f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	08da      	lsrs	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3208      	adds	r2, #8
 8003f8c:	6939      	ldr	r1, [r7, #16]
 8003f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0203 	and.w	r2, r3, #3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80b2 	beq.w	8004138 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd4:	4b61      	ldr	r3, [pc, #388]	; (800415c <HAL_GPIO_Init+0x2fc>)
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd8:	4a60      	ldr	r2, [pc, #384]	; (800415c <HAL_GPIO_Init+0x2fc>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6613      	str	r3, [r2, #96]	; 0x60
 8003fe0:	4b5e      	ldr	r3, [pc, #376]	; (800415c <HAL_GPIO_Init+0x2fc>)
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fec:	4a5c      	ldr	r2, [pc, #368]	; (8004160 <HAL_GPIO_Init+0x300>)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	220f      	movs	r2, #15
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004016:	d02b      	beq.n	8004070 <HAL_GPIO_Init+0x210>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a52      	ldr	r2, [pc, #328]	; (8004164 <HAL_GPIO_Init+0x304>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d025      	beq.n	800406c <HAL_GPIO_Init+0x20c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a51      	ldr	r2, [pc, #324]	; (8004168 <HAL_GPIO_Init+0x308>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d01f      	beq.n	8004068 <HAL_GPIO_Init+0x208>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a50      	ldr	r2, [pc, #320]	; (800416c <HAL_GPIO_Init+0x30c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d019      	beq.n	8004064 <HAL_GPIO_Init+0x204>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a4f      	ldr	r2, [pc, #316]	; (8004170 <HAL_GPIO_Init+0x310>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <HAL_GPIO_Init+0x200>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a4e      	ldr	r2, [pc, #312]	; (8004174 <HAL_GPIO_Init+0x314>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00d      	beq.n	800405c <HAL_GPIO_Init+0x1fc>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a4d      	ldr	r2, [pc, #308]	; (8004178 <HAL_GPIO_Init+0x318>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <HAL_GPIO_Init+0x1f8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a4c      	ldr	r2, [pc, #304]	; (800417c <HAL_GPIO_Init+0x31c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <HAL_GPIO_Init+0x1f4>
 8004050:	2307      	movs	r3, #7
 8004052:	e00e      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004054:	2308      	movs	r3, #8
 8004056:	e00c      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004058:	2306      	movs	r3, #6
 800405a:	e00a      	b.n	8004072 <HAL_GPIO_Init+0x212>
 800405c:	2305      	movs	r3, #5
 800405e:	e008      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004060:	2304      	movs	r3, #4
 8004062:	e006      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004064:	2303      	movs	r3, #3
 8004066:	e004      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004068:	2302      	movs	r3, #2
 800406a:	e002      	b.n	8004072 <HAL_GPIO_Init+0x212>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004070:	2300      	movs	r3, #0
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	f002 0203 	and.w	r2, r2, #3
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	4093      	lsls	r3, r2
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004082:	4937      	ldr	r1, [pc, #220]	; (8004160 <HAL_GPIO_Init+0x300>)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	3302      	adds	r3, #2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004090:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_GPIO_Init+0x320>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	43db      	mvns	r3, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4013      	ands	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040b4:	4a32      	ldr	r2, [pc, #200]	; (8004180 <HAL_GPIO_Init+0x320>)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_GPIO_Init+0x320>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040de:	4a28      	ldr	r2, [pc, #160]	; (8004180 <HAL_GPIO_Init+0x320>)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040e4:	4b26      	ldr	r3, [pc, #152]	; (8004180 <HAL_GPIO_Init+0x320>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_GPIO_Init+0x320>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <HAL_GPIO_Init+0x320>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004132:	4a13      	ldr	r2, [pc, #76]	; (8004180 <HAL_GPIO_Init+0x320>)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3301      	adds	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f ae91 	bne.w	8003e70 <HAL_GPIO_Init+0x10>
  }
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40021000 	.word	0x40021000
 8004160:	40010000 	.word	0x40010000
 8004164:	48000400 	.word	0x48000400
 8004168:	48000800 	.word	0x48000800
 800416c:	48000c00 	.word	0x48000c00
 8004170:	48001000 	.word	0x48001000
 8004174:	48001400 	.word	0x48001400
 8004178:	48001800 	.word	0x48001800
 800417c:	48001c00 	.word	0x48001c00
 8004180:	40010400 	.word	0x40010400

08004184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e001      	b.n	80041a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
 80041c0:	4613      	mov	r3, r2
 80041c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c4:	787b      	ldrb	r3, [r7, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041d0:	e002      	b.n	80041d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041d2:	887a      	ldrh	r2, [r7, #2]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e081      	b.n	80042fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd fd30 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	e006      	b.n	800426c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800426a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d104      	bne.n	800427e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800427c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800428c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004290:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69d9      	ldr	r1, [r3, #28]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	d138      	bne.n	800438a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004322:	2302      	movs	r3, #2
 8004324:	e032      	b.n	800438c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2224      	movs	r2, #36	; 0x24
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004354:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0201 	orr.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d139      	bne.n	8004422 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e033      	b.n	8004424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2224      	movs	r2, #36	; 0x24
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004432:	b08f      	sub	sp, #60	; 0x3c
 8004434:	af0a      	add	r7, sp, #40	; 0x28
 8004436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e116      	b.n	8004670 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f00e fdc9 	bl	8012ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2203      	movs	r2, #3
 8004466:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f007 fd78 	bl	800bf76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	687e      	ldr	r6, [r7, #4]
 800448e:	466d      	mov	r5, sp
 8004490:	f106 0410 	add.w	r4, r6, #16
 8004494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800449a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800449c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80044a4:	1d33      	adds	r3, r6, #4
 80044a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044a8:	6838      	ldr	r0, [r7, #0]
 80044aa:	f007 fc8b 	bl	800bdc4 <USB_CoreInit>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0d7      	b.n	8004670 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f007 fd66 	bl	800bf98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e04a      	b.n	8004568 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	333d      	adds	r3, #61	; 0x3d
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	333c      	adds	r3, #60	; 0x3c
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	b298      	uxth	r0, r3
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	3344      	adds	r3, #68	; 0x44
 800450e:	4602      	mov	r2, r0
 8004510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004512:	7bfa      	ldrb	r2, [r7, #15]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	3340      	adds	r3, #64	; 0x40
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	3348      	adds	r3, #72	; 0x48
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	334c      	adds	r3, #76	; 0x4c
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800454e:	7bfa      	ldrb	r2, [r7, #15]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3354      	adds	r3, #84	; 0x54
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	3301      	adds	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	d3af      	bcc.n	80044d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	e044      	b.n	8004602 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80045a0:	7bfa      	ldrb	r2, [r7, #15]
 80045a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	3301      	adds	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d3b5      	bcc.n	8004578 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	687e      	ldr	r6, [r7, #4]
 8004614:	466d      	mov	r5, sp
 8004616:	f106 0410 	add.w	r4, r6, #16
 800461a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800461c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004626:	e885 0003 	stmia.w	r5, {r0, r1}
 800462a:	1d33      	adds	r3, r6, #4
 800462c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800462e:	6838      	ldr	r0, [r7, #0]
 8004630:	f007 fcfe 	bl	800c030 <USB_DevInit>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e014      	b.n	8004670 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b01      	cmp	r3, #1
 800465c:	d102      	bne.n	8004664 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 f882 	bl	8005768 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f008 fd86 	bl	800d17a <USB_DevDisconnect>

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004678 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_PCD_Start+0x1c>
 8004690:	2302      	movs	r3, #2
 8004692:	e01c      	b.n	80046ce <HAL_PCD_Start+0x56>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d105      	bne.n	80046b0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f007 fc4d 	bl	800bf54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f008 fd3a 	bl	800d138 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046d6:	b590      	push	{r4, r7, lr}
 80046d8:	b08d      	sub	sp, #52	; 0x34
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f008 fdf8 	bl	800d2e2 <USB_GetMode>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 847e 	bne.w	8004ff6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f008 fd5c 	bl	800d1bc <USB_ReadInterrupts>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8474 	beq.w	8004ff4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	0a1b      	lsrs	r3, r3, #8
 8004716:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f008 fd49 	bl	800d1bc <USB_ReadInterrupts>
 800472a:	4603      	mov	r3, r0
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b02      	cmp	r3, #2
 8004732:	d107      	bne.n	8004744 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f002 0202 	and.w	r2, r2, #2
 8004742:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f008 fd37 	bl	800d1bc <USB_ReadInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b10      	cmp	r3, #16
 8004756:	d161      	bne.n	800481c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0210 	bic.w	r2, r2, #16
 8004766:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	0c5b      	lsrs	r3, r3, #17
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	2b02      	cmp	r3, #2
 8004792:	d124      	bne.n	80047de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d035      	beq.n	800480c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	6a38      	ldr	r0, [r7, #32]
 80047b4:	f008 fb6e 	bl	800ce94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047c4:	441a      	add	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047d6:	441a      	add	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
 80047dc:	e016      	b.n	800480c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	0c5b      	lsrs	r3, r3, #17
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d110      	bne.n	800480c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047f0:	2208      	movs	r2, #8
 80047f2:	4619      	mov	r1, r3
 80047f4:	6a38      	ldr	r0, [r7, #32]
 80047f6:	f008 fb4d 	bl	800ce94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004806:	441a      	add	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0210 	orr.w	r2, r2, #16
 800481a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f008 fccb 	bl	800d1bc <USB_ReadInterrupts>
 8004826:	4603      	mov	r3, r0
 8004828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004830:	f040 80a7 	bne.w	8004982 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f008 fcd0 	bl	800d1e2 <USB_ReadDevAllOutEpInterrupt>
 8004842:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004844:	e099      	b.n	800497a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 808e 	beq.w	800496e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f008 fcf4 	bl	800d24a <USB_ReadDevOutEPInterrupt>
 8004862:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00c      	beq.n	8004888 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	461a      	mov	r2, r3
 800487c:	2301      	movs	r3, #1
 800487e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fe96 	bl	80055b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	461a      	mov	r2, r3
 80048a0:	2308      	movs	r3, #8
 80048a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80048a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fed2 	bl	8005650 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	461a      	mov	r2, r3
 80048c4:	2310      	movs	r3, #16
 80048c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d030      	beq.n	8004934 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d109      	bne.n	80048f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	3304      	adds	r3, #4
 8004906:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	78db      	ldrb	r3, [r3, #3]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d108      	bne.n	8004922 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2200      	movs	r2, #0
 8004914:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	b2db      	uxtb	r3, r3
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f00e fcad 	bl	801327c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	2302      	movs	r3, #2
 8004932:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	461a      	mov	r2, r3
 800494c:	2320      	movs	r3, #32
 800494e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	461a      	mov	r2, r3
 8004968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800496c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	3301      	adds	r3, #1
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f af62 	bne.w	8004846 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f008 fc18 	bl	800d1bc <USB_ReadInterrupts>
 800498c:	4603      	mov	r3, r0
 800498e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004996:	f040 80a4 	bne.w	8004ae2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f008 fc39 	bl	800d216 <USB_ReadDevAllInEpInterrupt>
 80049a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80049aa:	e096      	b.n	8004ada <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 808b 	beq.w	8004ace <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f008 fc5f 	bl	800d286 <USB_ReadDevInEPInterrupt>
 80049c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	2201      	movs	r2, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69f9      	ldr	r1, [r7, #28]
 80049f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f4:	4013      	ands	r3, r2
 80049f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	461a      	mov	r2, r3
 8004a06:	2301      	movs	r3, #1
 8004a08:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f00e fb9e 	bl	8013152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2308      	movs	r3, #8
 8004a30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2310      	movs	r3, #16
 8004a4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	461a      	mov	r2, r3
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d023      	beq.n	8004abc <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a76:	6a38      	ldr	r0, [r7, #32]
 8004a78:	f007 fc26 	bl	800c2c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	3338      	adds	r3, #56	; 0x38
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	78db      	ldrb	r3, [r3, #3]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d108      	bne.n	8004aaa <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f00e fbfb 	bl	80132a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2302      	movs	r3, #2
 8004aba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fcea 	bl	80054a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f47f af65 	bne.w	80049ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f008 fb68 	bl	800d1bc <USB_ReadInterrupts>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af6:	d122      	bne.n	8004b3e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d108      	bne.n	8004b28 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f00e fe2d 	bl	8013780 <HAL_PCDEx_LPM_Callback>
 8004b26:	e002      	b.n	8004b2e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f00e fb7f 	bl	801322c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f008 fb3a 	bl	800d1bc <USB_ReadInterrupts>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b52:	d112      	bne.n	8004b7a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d102      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f00e fb3b 	bl	80131e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f008 fb1c 	bl	800d1bc <USB_ReadInterrupts>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b8e:	d121      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004b9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d111      	bne.n	8004bce <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	f003 020f 	and.w	r2, r3, #15
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f00e fdda 	bl	8013780 <HAL_PCDEx_LPM_Callback>
 8004bcc:	e002      	b.n	8004bd4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f00e fb06 	bl	80131e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f008 faef 	bl	800d1bc <USB_ReadInterrupts>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be8:	f040 80b5 	bne.w	8004d56 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2110      	movs	r1, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f007 fb5e 	bl	800c2c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c10:	e046      	b.n	8004ca0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c36:	0151      	lsls	r1, r2, #5
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	461a      	mov	r2, r3
 8004c54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d3b3      	bcc.n	8004c12 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004cbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd6:	f043 030b 	orr.w	r3, r3, #11
 8004cda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cec:	f043 030b 	orr.w	r3, r3, #11
 8004cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf2:	e015      	b.n	8004d20 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f043 030b 	orr.w	r3, r3, #11
 8004d1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f008 faff 	bl	800d344 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f008 fa2e 	bl	800d1bc <USB_ReadInterrupts>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6a:	d124      	bne.n	8004db6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f008 fac4 	bl	800d2fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f007 fb21 	bl	800c3c2 <USB_GetDevSpeed>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681c      	ldr	r4, [r3, #0]
 8004d8c:	f001 fbe2 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 8004d90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f007 f83e 	bl	800be1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f00e f9fe 	bl	80131a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f008 f9fe 	bl	800d1bc <USB_ReadInterrupts>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d10a      	bne.n	8004de0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f00e f9db 	bl	8013186 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f002 0208 	and.w	r2, r2, #8
 8004dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f008 f9e9 	bl	800d1bc <USB_ReadInterrupts>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df0:	2b80      	cmp	r3, #128	; 0x80
 8004df2:	d122      	bne.n	8004e3a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e00:	2301      	movs	r3, #1
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
 8004e04:	e014      	b.n	8004e30 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fb0b 	bl	8005440 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d3e5      	bcc.n	8004e06 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f008 f9bc 	bl	800d1bc <USB_ReadInterrupts>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4e:	d13b      	bne.n	8004ec8 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e50:	2301      	movs	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
 8004e54:	e02b      	b.n	8004eae <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	3340      	adds	r3, #64	; 0x40
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d115      	bne.n	8004ea8 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004e7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da12      	bge.n	8004ea8 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	4613      	mov	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	333f      	adds	r3, #63	; 0x3f
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 facc 	bl	8005440 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	3301      	adds	r3, #1
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d3ce      	bcc.n	8004e56 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f008 f975 	bl	800d1bc <USB_ReadInterrupts>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004edc:	d155      	bne.n	8004f8a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ede:	2301      	movs	r3, #1
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee2:	e045      	b.n	8004f70 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d12e      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da2b      	bge.n	8004f6a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004f1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d121      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f38:	2201      	movs	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f66:	6053      	str	r3, [r2, #4]
            break;
 8004f68:	e007      	b.n	8004f7a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d3b4      	bcc.n	8004ee4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f008 f914 	bl	800d1bc <USB_ReadInterrupts>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d10a      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f00e f98f 	bl	80132c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f008 f8fe 	bl	800d1bc <USB_ReadInterrupts>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d115      	bne.n	8004ff6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f00e f97f 	bl	80132e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	e000      	b.n	8004ff6 <HAL_PCD_IRQHandler+0x920>
      return;
 8004ff4:	bf00      	nop
    }
  }
}
 8004ff6:	3734      	adds	r7, #52	; 0x34
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd90      	pop	{r4, r7, pc}

08004ffc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_PCD_SetAddress+0x1a>
 8005012:	2302      	movs	r3, #2
 8005014:	e013      	b.n	800503e <HAL_PCD_SetAddress+0x42>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f008 f85c 	bl	800d0ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	461a      	mov	r2, r3
 8005054:	4603      	mov	r3, r0
 8005056:	70fb      	strb	r3, [r7, #3]
 8005058:	460b      	mov	r3, r1
 800505a:	803b      	strh	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005068:	2b00      	cmp	r3, #0
 800506a:	da0f      	bge.n	800508c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	4613      	mov	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	3338      	adds	r3, #56	; 0x38
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4413      	add	r3, r2
 8005080:	3304      	adds	r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	705a      	strb	r2, [r3, #1]
 800508a:	e00f      	b.n	80050ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	f003 020f 	and.w	r2, r3, #15
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	3304      	adds	r3, #4
 80050a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050b8:	883a      	ldrh	r2, [r7, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	78ba      	ldrb	r2, [r7, #2]
 80050c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050d6:	78bb      	ldrb	r3, [r7, #2]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d102      	bne.n	80050e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_PCD_EP_Open+0xaa>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e00e      	b.n	800510e <HAL_PCD_EP_Open+0xc8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68f9      	ldr	r1, [r7, #12]
 80050fe:	4618      	mov	r0, r3
 8005100:	f007 f97e 	bl	800c400 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800510c:	7afb      	ldrb	r3, [r7, #11]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005126:	2b00      	cmp	r3, #0
 8005128:	da0f      	bge.n	800514a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	f003 020f 	and.w	r2, r3, #15
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	3338      	adds	r3, #56	; 0x38
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	3304      	adds	r3, #4
 8005140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	705a      	strb	r2, [r3, #1]
 8005148:	e00f      	b.n	800516a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	f003 020f 	and.w	r2, r3, #15
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	3304      	adds	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	b2da      	uxtb	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_PCD_EP_Close+0x6e>
 8005180:	2302      	movs	r3, #2
 8005182:	e00e      	b.n	80051a2 <HAL_PCD_EP_Close+0x8c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68f9      	ldr	r1, [r7, #12]
 8005192:	4618      	mov	r0, r3
 8005194:	f007 f9bc 	bl	800c510 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b086      	sub	sp, #24
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	460b      	mov	r3, r1
 80051b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	f003 020f 	and.w	r2, r3, #15
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	3304      	adds	r3, #4
 80051d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ec:	7afb      	ldrb	r3, [r7, #11]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051f8:	7afb      	ldrb	r3, [r7, #11]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6979      	ldr	r1, [r7, #20]
 8005208:	4618      	mov	r0, r3
 800520a:	f007 fc3d 	bl	800ca88 <USB_EP0StartXfer>
 800520e:	e005      	b.n	800521c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6979      	ldr	r1, [r7, #20]
 8005216:	4618      	mov	r0, r3
 8005218:	f007 fa56 	bl	800c6c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	f003 020f 	and.w	r2, r3, #15
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005248:	681b      	ldr	r3, [r3, #0]
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	460b      	mov	r3, r1
 8005264:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005266:	7afb      	ldrb	r3, [r7, #11]
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	3338      	adds	r3, #56	; 0x38
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	3304      	adds	r3, #4
 800527c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2201      	movs	r2, #1
 8005294:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	b2da      	uxtb	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052a2:	7afb      	ldrb	r3, [r7, #11]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f007 fbe8 	bl	800ca88 <USB_EP0StartXfer>
 80052b8:	e005      	b.n	80052c6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6979      	ldr	r1, [r7, #20]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f007 fa01 	bl	800c6c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	f003 020f 	and.w	r2, r3, #15
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d901      	bls.n	80052ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e04e      	b.n	800538c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da0f      	bge.n	8005316 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	f003 020f 	and.w	r2, r3, #15
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	3338      	adds	r3, #56	; 0x38
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	3304      	adds	r3, #4
 800530c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	705a      	strb	r2, [r3, #1]
 8005314:	e00d      	b.n	8005332 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	4413      	add	r3, r2
 8005328:	3304      	adds	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_PCD_EP_SetStall+0x82>
 800534e:	2302      	movs	r3, #2
 8005350:	e01c      	b.n	800538c <HAL_PCD_EP_SetStall+0xbc>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	4618      	mov	r0, r3
 8005362:	f007 fdef 	bl	800cf44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f007 ffe1 	bl	800d344 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	f003 020f 	and.w	r2, r3, #15
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d901      	bls.n	80053b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e042      	b.n	8005438 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da0f      	bge.n	80053da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	3338      	adds	r3, #56	; 0x38
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	3304      	adds	r3, #4
 80053d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	705a      	strb	r2, [r3, #1]
 80053d8:	e00f      	b.n	80053fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	4613      	mov	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	3304      	adds	r3, #4
 80053f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_PCD_EP_ClrStall+0x86>
 8005416:	2302      	movs	r3, #2
 8005418:	e00e      	b.n	8005438 <HAL_PCD_EP_ClrStall+0xa4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	4618      	mov	r0, r3
 800542a:	f007 fdf9 	bl	800d020 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800544c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005450:	2b00      	cmp	r3, #0
 8005452:	da0c      	bge.n	800546e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	f003 020f 	and.w	r2, r3, #15
 800545a:	4613      	mov	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	3338      	adds	r3, #56	; 0x38
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	3304      	adds	r3, #4
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e00c      	b.n	8005488 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 020f 	and.w	r2, r3, #15
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4413      	add	r3, r2
 8005484:	3304      	adds	r3, #4
 8005486:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	4618      	mov	r0, r3
 8005490:	f007 fc1c 	bl	800cccc <USB_EPStopXfer>
 8005494:	4603      	mov	r3, r0
 8005496:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005498:	7afb      	ldrb	r3, [r7, #11]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b088      	sub	sp, #32
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	3338      	adds	r3, #56	; 0x38
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	3304      	adds	r3, #4
 80054c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1a      	ldr	r2, [r3, #32]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d901      	bls.n	80054da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e067      	b.n	80055aa <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d902      	bls.n	80054f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3303      	adds	r3, #3
 80054fa:	089b      	lsrs	r3, r3, #2
 80054fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054fe:	e026      	b.n	800554e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	429a      	cmp	r2, r3
 8005514:	d902      	bls.n	800551c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	3303      	adds	r3, #3
 8005520:	089b      	lsrs	r3, r3, #2
 8005522:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6919      	ldr	r1, [r3, #16]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	b29b      	uxth	r3, r3
 8005530:	6978      	ldr	r0, [r7, #20]
 8005532:	f007 fc75 	bl	800ce20 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	441a      	add	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	441a      	add	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	b29b      	uxth	r3, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	429a      	cmp	r2, r3
 8005562:	d809      	bhi.n	8005578 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800556c:	429a      	cmp	r2, r3
 800556e:	d203      	bcs.n	8005578 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1c3      	bne.n	8005500 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	429a      	cmp	r2, r3
 8005582:	d811      	bhi.n	80055a8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	2201      	movs	r2, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	43db      	mvns	r3, r3
 800559e:	6939      	ldr	r1, [r7, #16]
 80055a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a4:	4013      	ands	r3, r2
 80055a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	333c      	adds	r3, #60	; 0x3c
 80055cc:	3304      	adds	r3, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <PCD_EP_OutXfrComplete_int+0x98>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d124      	bne.n	8005634 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	461a      	mov	r2, r3
 8005602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005606:	6093      	str	r3, [r2, #8]
 8005608:	e01a      	b.n	8005640 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	461a      	mov	r2, r3
 8005622:	2320      	movs	r3, #32
 8005624:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f00d fd75 	bl	801311c <HAL_PCD_DataOutStageCallback>
 8005632:	e005      	b.n	8005640 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f00d fd6e 	bl	801311c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	4f54310a 	.word	0x4f54310a

08005650 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	333c      	adds	r3, #60	; 0x3c
 8005668:	3304      	adds	r3, #4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <PCD_EP_OutSetupPacket_int+0x64>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d90e      	bls.n	80056a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569c:	461a      	mov	r2, r3
 800569e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f00d fd27 	bl	80130f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	4f54300a 	.word	0x4f54300a

080056b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
 80056c4:	4613      	mov	r3, r2
 80056c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d107      	bne.n	80056e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80056d6:	883b      	ldrh	r3, [r7, #0]
 80056d8:	0419      	lsls	r1, r3, #16
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28
 80056e4:	e028      	b.n	8005738 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	4413      	add	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	73fb      	strb	r3, [r7, #15]
 80056f8:	e00d      	b.n	8005716 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	3340      	adds	r3, #64	; 0x40
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	0c1b      	lsrs	r3, r3, #16
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4413      	add	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	3301      	adds	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	3b01      	subs	r3, #1
 800571c:	429a      	cmp	r2, r3
 800571e:	d3ec      	bcc.n	80056fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005720:	883b      	ldrh	r3, [r7, #0]
 8005722:	0418      	lsls	r0, r3, #16
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6819      	ldr	r1, [r3, #0]
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	3b01      	subs	r3, #1
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	4302      	orrs	r2, r0
 8005730:	3340      	adds	r3, #64	; 0x40
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	887a      	ldrh	r2, [r7, #2]
 8005758:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579a:	f043 0303 	orr.w	r3, r3, #3
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a04      	ldr	r2, [pc, #16]	; (80057cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40007000 	.word	0x40007000

080057d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <HAL_PWREx_GetVoltageRange+0x3c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e0:	d102      	bne.n	80057e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80057e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e6:	e00b      	b.n	8005800 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80057e8:	4b08      	ldr	r3, [pc, #32]	; (800580c <HAL_PWREx_GetVoltageRange+0x3c>)
 80057ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f6:	d102      	bne.n	80057fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80057f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fc:	e000      	b.n	8005800 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80057fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005800:	4618      	mov	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40007000 	.word	0x40007000

08005810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d141      	bne.n	80058a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800581e:	4b4b      	ldr	r3, [pc, #300]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582a:	d131      	bne.n	8005890 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800582c:	4b47      	ldr	r3, [pc, #284]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005832:	4a46      	ldr	r2, [pc, #280]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800583c:	4b43      	ldr	r3, [pc, #268]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005844:	4a41      	ldr	r2, [pc, #260]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800584c:	4b40      	ldr	r3, [pc, #256]	; (8005950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2232      	movs	r2, #50	; 0x32
 8005852:	fb02 f303 	mul.w	r3, r2, r3
 8005856:	4a3f      	ldr	r2, [pc, #252]	; (8005954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	0c9b      	lsrs	r3, r3, #18
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005862:	e002      	b.n	800586a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3b01      	subs	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800586a:	4b38      	ldr	r3, [pc, #224]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005876:	d102      	bne.n	800587e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f2      	bne.n	8005864 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800587e:	4b33      	ldr	r3, [pc, #204]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588a:	d158      	bne.n	800593e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e057      	b.n	8005940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005890:	4b2e      	ldr	r3, [pc, #184]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005896:	4a2d      	ldr	r2, [pc, #180]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800589c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058a0:	e04d      	b.n	800593e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a8:	d141      	bne.n	800592e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058aa:	4b28      	ldr	r3, [pc, #160]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b6:	d131      	bne.n	800591c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058b8:	4b24      	ldr	r3, [pc, #144]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058be:	4a23      	ldr	r2, [pc, #140]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058c8:	4b20      	ldr	r3, [pc, #128]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058d0:	4a1e      	ldr	r2, [pc, #120]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80058d8:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2232      	movs	r2, #50	; 0x32
 80058de:	fb02 f303 	mul.w	r3, r2, r3
 80058e2:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058e4:	fba2 2303 	umull	r2, r3, r2, r3
 80058e8:	0c9b      	lsrs	r3, r3, #18
 80058ea:	3301      	adds	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ee:	e002      	b.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005902:	d102      	bne.n	800590a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f2      	bne.n	80058f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800590a:	4b10      	ldr	r3, [pc, #64]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005916:	d112      	bne.n	800593e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e011      	b.n	8005940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800591e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005922:	4a0a      	ldr	r2, [pc, #40]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800592c:	e007      	b.n	800593e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005936:	4a05      	ldr	r2, [pc, #20]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005938:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800593c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40007000 	.word	0x40007000
 8005950:	20000000 	.word	0x20000000
 8005954:	431bde83 	.word	0x431bde83

08005958 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <HAL_PWREx_EnableVddUSB+0x1c>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4a04      	ldr	r2, [pc, #16]	; (8005974 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005966:	6053      	str	r3, [r2, #4]
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40007000 	.word	0x40007000

08005978 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <HAL_PWREx_EnableVddIO2+0x1c>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4a04      	ldr	r2, [pc, #16]	; (8005994 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005986:	6053      	str	r3, [r2, #4]
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40007000 	.word	0x40007000

08005998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f000 bc08 	b.w	80061bc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ac:	4b96      	ldr	r3, [pc, #600]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 030c 	and.w	r3, r3, #12
 80059b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059b6:	4b94      	ldr	r3, [pc, #592]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80e4 	beq.w	8005b96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <HAL_RCC_OscConfig+0x4c>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b0c      	cmp	r3, #12
 80059d8:	f040 808b 	bne.w	8005af2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	f040 8087 	bne.w	8005af2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059e4:	4b88      	ldr	r3, [pc, #544]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <HAL_RCC_OscConfig+0x64>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e3df      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1a      	ldr	r2, [r3, #32]
 8005a00:	4b81      	ldr	r3, [pc, #516]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <HAL_RCC_OscConfig+0x7e>
 8005a0c:	4b7e      	ldr	r3, [pc, #504]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a14:	e005      	b.n	8005a22 <HAL_RCC_OscConfig+0x8a>
 8005a16:	4b7c      	ldr	r3, [pc, #496]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d223      	bcs.n	8005a6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fdca 	bl	80065c4 <RCC_SetFlashLatencyFromMSIRange>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e3c0      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a3a:	4b73      	ldr	r3, [pc, #460]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a72      	ldr	r2, [pc, #456]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a40:	f043 0308 	orr.w	r3, r3, #8
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	4b70      	ldr	r3, [pc, #448]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	496d      	ldr	r1, [pc, #436]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a58:	4b6b      	ldr	r3, [pc, #428]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	4968      	ldr	r1, [pc, #416]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	604b      	str	r3, [r1, #4]
 8005a6c:	e025      	b.n	8005aba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a6e:	4b66      	ldr	r3, [pc, #408]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a65      	ldr	r2, [pc, #404]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a74:	f043 0308 	orr.w	r3, r3, #8
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	4b63      	ldr	r3, [pc, #396]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	4960      	ldr	r1, [pc, #384]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a8c:	4b5e      	ldr	r3, [pc, #376]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	495b      	ldr	r1, [pc, #364]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fd8a 	bl	80065c4 <RCC_SetFlashLatencyFromMSIRange>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e380      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aba:	f000 fcc1 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4b51      	ldr	r3, [pc, #324]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	4950      	ldr	r1, [pc, #320]	; (8005c0c <HAL_RCC_OscConfig+0x274>)
 8005acc:	5ccb      	ldrb	r3, [r1, r3]
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad6:	4a4e      	ldr	r2, [pc, #312]	; (8005c10 <HAL_RCC_OscConfig+0x278>)
 8005ad8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ada:	4b4e      	ldr	r3, [pc, #312]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fc fc74 	bl	80023cc <HAL_InitTick>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d052      	beq.n	8005b94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	e364      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d032      	beq.n	8005b60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005afa:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a42      	ldr	r2, [pc, #264]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b06:	f7fc fcb1 	bl	800246c <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b0e:	f7fc fcad 	bl	800246c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e34d      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b20:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0f0      	beq.n	8005b0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a35      	ldr	r2, [pc, #212]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b32:	f043 0308 	orr.w	r3, r3, #8
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	4b33      	ldr	r3, [pc, #204]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	4930      	ldr	r1, [pc, #192]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b4a:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	492b      	ldr	r1, [pc, #172]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	604b      	str	r3, [r1, #4]
 8005b5e:	e01a      	b.n	8005b96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b60:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a28      	ldr	r2, [pc, #160]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b66:	f023 0301 	bic.w	r3, r3, #1
 8005b6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b6c:	f7fc fc7e 	bl	800246c <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b74:	f7fc fc7a 	bl	800246c <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e31a      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b86:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x1dc>
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d073      	beq.n	8005c8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d005      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x21c>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b0c      	cmp	r3, #12
 8005bac:	d10e      	bne.n	8005bcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d10b      	bne.n	8005bcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d063      	beq.n	8005c88 <HAL_RCC_OscConfig+0x2f0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d15f      	bne.n	8005c88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e2f7      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd4:	d106      	bne.n	8005be4 <HAL_RCC_OscConfig+0x24c>
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a0b      	ldr	r2, [pc, #44]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e025      	b.n	8005c30 <HAL_RCC_OscConfig+0x298>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bec:	d114      	bne.n	8005c18 <HAL_RCC_OscConfig+0x280>
 8005bee:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a05      	ldr	r2, [pc, #20]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a02      	ldr	r2, [pc, #8]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e013      	b.n	8005c30 <HAL_RCC_OscConfig+0x298>
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	0801e550 	.word	0x0801e550
 8005c10:	20000000 	.word	0x20000000
 8005c14:	20000004 	.word	0x20000004
 8005c18:	4ba0      	ldr	r3, [pc, #640]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a9f      	ldr	r2, [pc, #636]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	4b9d      	ldr	r3, [pc, #628]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a9c      	ldr	r2, [pc, #624]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d013      	beq.n	8005c60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c38:	f7fc fc18 	bl	800246c <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c40:	f7fc fc14 	bl	800246c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b64      	cmp	r3, #100	; 0x64
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e2b4      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c52:	4b92      	ldr	r3, [pc, #584]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0x2a8>
 8005c5e:	e014      	b.n	8005c8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fc fc04 	bl	800246c <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c68:	f7fc fc00 	bl	800246c <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b64      	cmp	r3, #100	; 0x64
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e2a0      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c7a:	4b88      	ldr	r3, [pc, #544]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x2d0>
 8005c86:	e000      	b.n	8005c8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d060      	beq.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x310>
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b0c      	cmp	r3, #12
 8005ca0:	d119      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d116      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ca8:	4b7c      	ldr	r3, [pc, #496]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x328>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e27d      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc0:	4b76      	ldr	r3, [pc, #472]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	4973      	ldr	r1, [pc, #460]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd4:	e040      	b.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d023      	beq.n	8005d26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cde:	4b6f      	ldr	r3, [pc, #444]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a6e      	ldr	r2, [pc, #440]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fc fbbf 	bl	800246c <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf2:	f7fc fbbb 	bl	800246c <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e25b      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d04:	4b65      	ldr	r3, [pc, #404]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d10:	4b62      	ldr	r3, [pc, #392]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	495f      	ldr	r1, [pc, #380]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	604b      	str	r3, [r1, #4]
 8005d24:	e018      	b.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d26:	4b5d      	ldr	r3, [pc, #372]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a5c      	ldr	r2, [pc, #368]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fc fb9b 	bl	800246c <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3a:	f7fc fb97 	bl	800246c <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e237      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d4c:	4b53      	ldr	r3, [pc, #332]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f0      	bne.n	8005d3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d03c      	beq.n	8005dde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01c      	beq.n	8005da6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d6c:	4b4b      	ldr	r3, [pc, #300]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d72:	4a4a      	ldr	r2, [pc, #296]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7c:	f7fc fb76 	bl	800246c <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d84:	f7fc fb72 	bl	800246c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e212      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d96:	4b41      	ldr	r3, [pc, #260]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ef      	beq.n	8005d84 <HAL_RCC_OscConfig+0x3ec>
 8005da4:	e01b      	b.n	8005dde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005da6:	4b3d      	ldr	r3, [pc, #244]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dac:	4a3b      	ldr	r2, [pc, #236]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db6:	f7fc fb59 	bl	800246c <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dbe:	f7fc fb55 	bl	800246c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e1f5      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dd0:	4b32      	ldr	r3, [pc, #200]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1ef      	bne.n	8005dbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80a6 	beq.w	8005f38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dec:	2300      	movs	r3, #0
 8005dee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005df0:	4b2a      	ldr	r3, [pc, #168]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfc:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e00:	4a26      	ldr	r2, [pc, #152]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e06:	6593      	str	r3, [r2, #88]	; 0x58
 8005e08:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e18:	4b21      	ldr	r3, [pc, #132]	; (8005ea0 <HAL_RCC_OscConfig+0x508>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d118      	bne.n	8005e56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e24:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <HAL_RCC_OscConfig+0x508>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1d      	ldr	r2, [pc, #116]	; (8005ea0 <HAL_RCC_OscConfig+0x508>)
 8005e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e30:	f7fc fb1c 	bl	800246c <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e38:	f7fc fb18 	bl	800246c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e1b8      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <HAL_RCC_OscConfig+0x508>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d108      	bne.n	8005e70 <HAL_RCC_OscConfig+0x4d8>
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e6e:	e029      	b.n	8005ec4 <HAL_RCC_OscConfig+0x52c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b05      	cmp	r3, #5
 8005e76:	d115      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x50c>
 8005e78:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7e:	4a07      	ldr	r2, [pc, #28]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e80:	f043 0304 	orr.w	r3, r3, #4
 8005e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e88:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8e:	4a03      	ldr	r2, [pc, #12]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e90:	f043 0301 	orr.w	r3, r3, #1
 8005e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e98:	e014      	b.n	8005ec4 <HAL_RCC_OscConfig+0x52c>
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	40007000 	.word	0x40007000
 8005ea4:	4b9d      	ldr	r3, [pc, #628]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eaa:	4a9c      	ldr	r2, [pc, #624]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005eac:	f023 0301 	bic.w	r3, r3, #1
 8005eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eb4:	4b99      	ldr	r3, [pc, #612]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eba:	4a98      	ldr	r2, [pc, #608]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005ebc:	f023 0304 	bic.w	r3, r3, #4
 8005ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d016      	beq.n	8005efa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ecc:	f7fc face 	bl	800246c <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f7fc faca 	bl	800246c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e168      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eea:	4b8c      	ldr	r3, [pc, #560]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ed      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x53c>
 8005ef8:	e015      	b.n	8005f26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efa:	f7fc fab7 	bl	800246c <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f00:	e00a      	b.n	8005f18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f02:	f7fc fab3 	bl	800246c <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e151      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f18:	4b80      	ldr	r3, [pc, #512]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1ed      	bne.n	8005f02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d105      	bne.n	8005f38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f2c:	4b7b      	ldr	r3, [pc, #492]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f30:	4a7a      	ldr	r2, [pc, #488]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d03c      	beq.n	8005fbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01c      	beq.n	8005f86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f4c:	4b73      	ldr	r3, [pc, #460]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f52:	4a72      	ldr	r2, [pc, #456]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fc fa86 	bl	800246c <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f64:	f7fc fa82 	bl	800246c <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e122      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f76:	4b69      	ldr	r3, [pc, #420]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0ef      	beq.n	8005f64 <HAL_RCC_OscConfig+0x5cc>
 8005f84:	e01b      	b.n	8005fbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f86:	4b65      	ldr	r3, [pc, #404]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f8c:	4a63      	ldr	r2, [pc, #396]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f96:	f7fc fa69 	bl	800246c <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f9e:	f7fc fa65 	bl	800246c <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e105      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fb0:	4b5a      	ldr	r3, [pc, #360]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1ef      	bne.n	8005f9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80f9 	beq.w	80061ba <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	f040 80cf 	bne.w	8006170 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005fd2:	4b52      	ldr	r3, [pc, #328]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 0203 	and.w	r2, r3, #3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d12c      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d123      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006002:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d11b      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006014:	429a      	cmp	r2, r3
 8006016:	d113      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	3b01      	subs	r3, #1
 8006026:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d109      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	3b01      	subs	r3, #1
 800603a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d071      	beq.n	8006124 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	2b0c      	cmp	r3, #12
 8006044:	d068      	beq.n	8006118 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006046:	4b35      	ldr	r3, [pc, #212]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006052:	4b32      	ldr	r3, [pc, #200]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e0ac      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006062:	4b2e      	ldr	r3, [pc, #184]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2d      	ldr	r2, [pc, #180]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800606e:	f7fc f9fd 	bl	800246c <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006076:	f7fc f9f9 	bl	800246c <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e099      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006088:	4b24      	ldr	r3, [pc, #144]	; (800611c <HAL_RCC_OscConfig+0x784>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f0      	bne.n	8006076 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006094:	4b21      	ldr	r3, [pc, #132]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	4b21      	ldr	r3, [pc, #132]	; (8006120 <HAL_RCC_OscConfig+0x788>)
 800609a:	4013      	ands	r3, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80060a4:	3a01      	subs	r2, #1
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	4311      	orrs	r1, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060ae:	0212      	lsls	r2, r2, #8
 80060b0:	4311      	orrs	r1, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060b6:	0852      	lsrs	r2, r2, #1
 80060b8:	3a01      	subs	r2, #1
 80060ba:	0552      	lsls	r2, r2, #21
 80060bc:	4311      	orrs	r1, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060c2:	0852      	lsrs	r2, r2, #1
 80060c4:	3a01      	subs	r2, #1
 80060c6:	0652      	lsls	r2, r2, #25
 80060c8:	4311      	orrs	r1, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060ce:	06d2      	lsls	r2, r2, #27
 80060d0:	430a      	orrs	r2, r1
 80060d2:	4912      	ldr	r1, [pc, #72]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80060d8:	4b10      	ldr	r3, [pc, #64]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0f      	ldr	r2, [pc, #60]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4a0c      	ldr	r2, [pc, #48]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060f0:	f7fc f9bc 	bl	800246c <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f8:	f7fc f9b8 	bl	800246c <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e058      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800610a:	4b04      	ldr	r3, [pc, #16]	; (800611c <HAL_RCC_OscConfig+0x784>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0f0      	beq.n	80060f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006116:	e050      	b.n	80061ba <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e04f      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
 800611c:	40021000 	.word	0x40021000
 8006120:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006124:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d144      	bne.n	80061ba <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006130:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800613a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800613c:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	4a20      	ldr	r2, [pc, #128]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006146:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006148:	f7fc f990 	bl	800246c <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006150:	f7fc f98c 	bl	800246c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e02c      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006162:	4b18      	ldr	r3, [pc, #96]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0f0      	beq.n	8006150 <HAL_RCC_OscConfig+0x7b8>
 800616e:	e024      	b.n	80061ba <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d01f      	beq.n	80061b6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006176:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a12      	ldr	r2, [pc, #72]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 800617c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006182:	f7fc f973 	bl	800246c <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618a:	f7fc f96f 	bl	800246c <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e00f      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f0      	bne.n	800618a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	4905      	ldr	r1, [pc, #20]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 80061ae:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <HAL_RCC_OscConfig+0x830>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	60cb      	str	r3, [r1, #12]
 80061b4:	e001      	b.n	80061ba <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3720      	adds	r7, #32
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40021000 	.word	0x40021000
 80061c8:	feeefffc 	.word	0xfeeefffc

080061cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e11d      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061e4:	4b90      	ldr	r3, [pc, #576]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d910      	bls.n	8006214 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b8d      	ldr	r3, [pc, #564]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f023 020f 	bic.w	r2, r3, #15
 80061fa:	498b      	ldr	r1, [pc, #556]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	4313      	orrs	r3, r2
 8006200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006202:	4b89      	ldr	r3, [pc, #548]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d001      	beq.n	8006214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e105      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d010      	beq.n	8006242 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	4b81      	ldr	r3, [pc, #516]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800622c:	429a      	cmp	r2, r3
 800622e:	d908      	bls.n	8006242 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006230:	4b7e      	ldr	r3, [pc, #504]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	497b      	ldr	r1, [pc, #492]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800623e:	4313      	orrs	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d079      	beq.n	8006342 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b03      	cmp	r3, #3
 8006254:	d11e      	bne.n	8006294 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006256:	4b75      	ldr	r3, [pc, #468]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e0dc      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006266:	f000 fa07 	bl	8006678 <RCC_GetSysClockFreqFromPLLSource>
 800626a:	4603      	mov	r3, r0
 800626c:	4a70      	ldr	r2, [pc, #448]	; (8006430 <HAL_RCC_ClockConfig+0x264>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d946      	bls.n	8006300 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006272:	4b6e      	ldr	r3, [pc, #440]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d140      	bne.n	8006300 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800627e:	4b6b      	ldr	r3, [pc, #428]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006286:	4a69      	ldr	r2, [pc, #420]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	e035      	b.n	8006300 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d107      	bne.n	80062ac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800629c:	4b63      	ldr	r3, [pc, #396]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d115      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0b9      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062b4:	4b5d      	ldr	r3, [pc, #372]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0ad      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062c4:	4b59      	ldr	r3, [pc, #356]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0a5      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80062d4:	f000 f8b4 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80062d8:	4603      	mov	r3, r0
 80062da:	4a55      	ldr	r2, [pc, #340]	; (8006430 <HAL_RCC_ClockConfig+0x264>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d90f      	bls.n	8006300 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80062e0:	4b52      	ldr	r3, [pc, #328]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062ec:	4b4f      	ldr	r3, [pc, #316]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f4:	4a4d      	ldr	r2, [pc, #308]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006300:	4b4a      	ldr	r3, [pc, #296]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f023 0203 	bic.w	r2, r3, #3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4947      	ldr	r1, [pc, #284]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800630e:	4313      	orrs	r3, r2
 8006310:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006312:	f7fc f8ab 	bl	800246c <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006318:	e00a      	b.n	8006330 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800631a:	f7fc f8a7 	bl	800246c <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	f241 3288 	movw	r2, #5000	; 0x1388
 8006328:	4293      	cmp	r3, r2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e077      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006330:	4b3e      	ldr	r3, [pc, #248]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 020c 	and.w	r2, r3, #12
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	429a      	cmp	r2, r3
 8006340:	d1eb      	bne.n	800631a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d105      	bne.n	8006354 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006348:	4b38      	ldr	r3, [pc, #224]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	4a37      	ldr	r2, [pc, #220]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800634e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006352:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d010      	beq.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	4b31      	ldr	r3, [pc, #196]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636c:	429a      	cmp	r2, r3
 800636e:	d208      	bcs.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006370:	4b2e      	ldr	r3, [pc, #184]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	492b      	ldr	r1, [pc, #172]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800637e:	4313      	orrs	r3, r2
 8006380:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006382:	4b29      	ldr	r3, [pc, #164]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d210      	bcs.n	80063b2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f023 020f 	bic.w	r2, r3, #15
 8006398:	4923      	ldr	r1, [pc, #140]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	4313      	orrs	r3, r2
 800639e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a0:	4b21      	ldr	r3, [pc, #132]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d001      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e036      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d008      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063be:	4b1b      	ldr	r3, [pc, #108]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	4918      	ldr	r1, [pc, #96]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063dc:	4b13      	ldr	r3, [pc, #76]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	4910      	ldr	r1, [pc, #64]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063f0:	f000 f826 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80063f4:	4602      	mov	r2, r0
 80063f6:	4b0d      	ldr	r3, [pc, #52]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	091b      	lsrs	r3, r3, #4
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	490c      	ldr	r1, [pc, #48]	; (8006434 <HAL_RCC_ClockConfig+0x268>)
 8006402:	5ccb      	ldrb	r3, [r1, r3]
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
 800640c:	4a0a      	ldr	r2, [pc, #40]	; (8006438 <HAL_RCC_ClockConfig+0x26c>)
 800640e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <HAL_RCC_ClockConfig+0x270>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	f7fb ffd9 	bl	80023cc <HAL_InitTick>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]

  return status;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40022000 	.word	0x40022000
 800642c:	40021000 	.word	0x40021000
 8006430:	04c4b400 	.word	0x04c4b400
 8006434:	0801e550 	.word	0x0801e550
 8006438:	20000000 	.word	0x20000000
 800643c:	20000004 	.word	0x20000004

08006440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006440:	b480      	push	{r7}
 8006442:	b089      	sub	sp, #36	; 0x24
 8006444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800644e:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 030c 	and.w	r3, r3, #12
 8006456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006458:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0x34>
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b0c      	cmp	r3, #12
 800646c:	d121      	bne.n	80064b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d11e      	bne.n	80064b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006474:	4b34      	ldr	r3, [pc, #208]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d107      	bne.n	8006490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006480:	4b31      	ldr	r3, [pc, #196]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	e005      	b.n	800649c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006490:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	091b      	lsrs	r3, r3, #4
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800649c:	4a2b      	ldr	r2, [pc, #172]	; (800654c <HAL_RCC_GetSysClockFreq+0x10c>)
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10d      	bne.n	80064c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064b0:	e00a      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d102      	bne.n	80064be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064b8:	4b25      	ldr	r3, [pc, #148]	; (8006550 <HAL_RCC_GetSysClockFreq+0x110>)
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	e004      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d101      	bne.n	80064c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064c4:	4b22      	ldr	r3, [pc, #136]	; (8006550 <HAL_RCC_GetSysClockFreq+0x110>)
 80064c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b0c      	cmp	r3, #12
 80064cc:	d134      	bne.n	8006538 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064ce:	4b1e      	ldr	r3, [pc, #120]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d003      	beq.n	80064e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d003      	beq.n	80064ec <HAL_RCC_GetSysClockFreq+0xac>
 80064e4:	e005      	b.n	80064f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064e6:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <HAL_RCC_GetSysClockFreq+0x110>)
 80064e8:	617b      	str	r3, [r7, #20]
      break;
 80064ea:	e005      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <HAL_RCC_GetSysClockFreq+0x110>)
 80064ee:	617b      	str	r3, [r7, #20]
      break;
 80064f0:	e002      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	617b      	str	r3, [r7, #20]
      break;
 80064f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	3301      	adds	r3, #1
 8006504:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	fb03 f202 	mul.w	r2, r3, r2
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	0e5b      	lsrs	r3, r3, #25
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	3301      	adds	r3, #1
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	fbb2 f3f3 	udiv	r3, r2, r3
 8006536:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006538:	69bb      	ldr	r3, [r7, #24]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3724      	adds	r7, #36	; 0x24
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40021000 	.word	0x40021000
 800654c:	0801e568 	.word	0x0801e568
 8006550:	00f42400 	.word	0x00f42400

08006554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006558:	4b03      	ldr	r3, [pc, #12]	; (8006568 <HAL_RCC_GetHCLKFreq+0x14>)
 800655a:	681b      	ldr	r3, [r3, #0]
}
 800655c:	4618      	mov	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20000000 	.word	0x20000000

0800656c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006570:	f7ff fff0 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b06      	ldr	r3, [pc, #24]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4904      	ldr	r1, [pc, #16]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40021000 	.word	0x40021000
 8006594:	0801e560 	.word	0x0801e560

08006598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800659c:	f7ff ffda 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	0adb      	lsrs	r3, r3, #11
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4904      	ldr	r1, [pc, #16]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40021000 	.word	0x40021000
 80065c0:	0801e560 	.word	0x0801e560

080065c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80065d0:	4b27      	ldr	r3, [pc, #156]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80065dc:	f7ff f8f8 	bl	80057d0 <HAL_PWREx_GetVoltageRange>
 80065e0:	6178      	str	r0, [r7, #20]
 80065e2:	e014      	b.n	800660e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065e4:	4b22      	ldr	r3, [pc, #136]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e8:	4a21      	ldr	r2, [pc, #132]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ee:	6593      	str	r3, [r2, #88]	; 0x58
 80065f0:	4b1f      	ldr	r3, [pc, #124]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065fc:	f7ff f8e8 	bl	80057d0 <HAL_PWREx_GetVoltageRange>
 8006600:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006602:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006606:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006614:	d10b      	bne.n	800662e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b80      	cmp	r3, #128	; 0x80
 800661a:	d913      	bls.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2ba0      	cmp	r3, #160	; 0xa0
 8006620:	d902      	bls.n	8006628 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006622:	2302      	movs	r3, #2
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	e00d      	b.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006628:	2301      	movs	r3, #1
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	e00a      	b.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b7f      	cmp	r3, #127	; 0x7f
 8006632:	d902      	bls.n	800663a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006634:	2302      	movs	r3, #2
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	e004      	b.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b70      	cmp	r3, #112	; 0x70
 800663e:	d101      	bne.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006640:	2301      	movs	r3, #1
 8006642:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006644:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f023 020f 	bic.w	r2, r3, #15
 800664c:	4909      	ldr	r1, [pc, #36]	; (8006674 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d001      	beq.n	8006666 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40021000 	.word	0x40021000
 8006674:	40022000 	.word	0x40022000

08006678 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800667e:	4b2d      	ldr	r3, [pc, #180]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d00b      	beq.n	80066a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d825      	bhi.n	80066e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d008      	beq.n	80066ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d11f      	bne.n	80066e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80066a2:	613b      	str	r3, [r7, #16]
    break;
 80066a4:	e01f      	b.n	80066e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80066a8:	613b      	str	r3, [r7, #16]
    break;
 80066aa:	e01c      	b.n	80066e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80066ac:	4b21      	ldr	r3, [pc, #132]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d107      	bne.n	80066c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066b8:	4b1e      	ldr	r3, [pc, #120]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e005      	b.n	80066d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066c8:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80066d4:	4a19      	ldr	r2, [pc, #100]	; (800673c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066dc:	613b      	str	r3, [r7, #16]
    break;
 80066de:	e002      	b.n	80066e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]
    break;
 80066e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	3301      	adds	r3, #1
 80066f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80066f4:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	0a1b      	lsrs	r3, r3, #8
 80066fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	fb03 f202 	mul.w	r2, r3, r2
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	fbb2 f3f3 	udiv	r3, r2, r3
 800670a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	0e5b      	lsrs	r3, r3, #25
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	3301      	adds	r3, #1
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006726:	683b      	ldr	r3, [r7, #0]
}
 8006728:	4618      	mov	r0, r3
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	40021000 	.word	0x40021000
 8006738:	00f42400 	.word	0x00f42400
 800673c:	0801e568 	.word	0x0801e568

08006740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006748:	2300      	movs	r3, #0
 800674a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800674c:	2300      	movs	r3, #0
 800674e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006758:	2b00      	cmp	r3, #0
 800675a:	d040      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006760:	2b80      	cmp	r3, #128	; 0x80
 8006762:	d02a      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006764:	2b80      	cmp	r3, #128	; 0x80
 8006766:	d825      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006768:	2b60      	cmp	r3, #96	; 0x60
 800676a:	d026      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800676c:	2b60      	cmp	r3, #96	; 0x60
 800676e:	d821      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d006      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d81d      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800677c:	2b20      	cmp	r3, #32
 800677e:	d010      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006780:	e018      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006782:	4b89      	ldr	r3, [pc, #548]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	4a88      	ldr	r2, [pc, #544]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800678c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800678e:	e015      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f001 fa82 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067a0:	e00c      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3320      	adds	r3, #32
 80067a6:	2100      	movs	r1, #0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fb6d 	bl	8007e88 <RCCEx_PLLSAI2_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067b2:	e003      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	74fb      	strb	r3, [r7, #19]
      break;
 80067b8:	e000      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80067ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067bc:	7cfb      	ldrb	r3, [r7, #19]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067c2:	4b79      	ldr	r3, [pc, #484]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d0:	4975      	ldr	r1, [pc, #468]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80067d8:	e001      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067da:	7cfb      	ldrb	r3, [r7, #19]
 80067dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d047      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f2:	d030      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80067f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f8:	d82a      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80067fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fe:	d02a      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006804:	d824      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680a:	d008      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800680c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006810:	d81e      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681a:	d010      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800681c:	e018      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800681e:	4b62      	ldr	r3, [pc, #392]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	4a61      	ldr	r2, [pc, #388]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006828:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800682a:	e015      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3304      	adds	r3, #4
 8006830:	2100      	movs	r1, #0
 8006832:	4618      	mov	r0, r3
 8006834:	f001 fa34 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800683c:	e00c      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3320      	adds	r3, #32
 8006842:	2100      	movs	r1, #0
 8006844:	4618      	mov	r0, r3
 8006846:	f001 fb1f 	bl	8007e88 <RCCEx_PLLSAI2_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800684e:	e003      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	74fb      	strb	r3, [r7, #19]
      break;
 8006854:	e000      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006858:	7cfb      	ldrb	r3, [r7, #19]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10b      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800685e:	4b52      	ldr	r3, [pc, #328]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	494e      	ldr	r1, [pc, #312]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006874:	e001      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	7cfb      	ldrb	r3, [r7, #19]
 8006878:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 809f 	beq.w	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006888:	2300      	movs	r3, #0
 800688a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800688c:	4b46      	ldr	r3, [pc, #280]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800688e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800689c:	2300      	movs	r3, #0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00d      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068a2:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a6:	4a40      	ldr	r2, [pc, #256]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ac:	6593      	str	r3, [r2, #88]	; 0x58
 80068ae:	4b3e      	ldr	r3, [pc, #248]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b6:	60bb      	str	r3, [r7, #8]
 80068b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ba:	2301      	movs	r3, #1
 80068bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068be:	4b3b      	ldr	r3, [pc, #236]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a3a      	ldr	r2, [pc, #232]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ca:	f7fb fdcf 	bl	800246c <HAL_GetTick>
 80068ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068d0:	e009      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d2:	f7fb fdcb 	bl	800246c <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d902      	bls.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	74fb      	strb	r3, [r7, #19]
        break;
 80068e4:	e005      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068e6:	4b31      	ldr	r3, [pc, #196]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0ef      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80068f2:	7cfb      	ldrb	r3, [r7, #19]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d15b      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068f8:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006902:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01f      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	429a      	cmp	r2, r3
 8006914:	d019      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006916:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006920:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006922:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800692a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006932:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006938:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800693a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006942:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d016      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fb fd8a 	bl	800246c <HAL_GetTick>
 8006958:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800695a:	e00b      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695c:	f7fb fd86 	bl	800246c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f241 3288 	movw	r2, #5000	; 0x1388
 800696a:	4293      	cmp	r3, r2
 800696c:	d902      	bls.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	74fb      	strb	r3, [r7, #19]
            break;
 8006972:	e006      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0ec      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006982:	7cfb      	ldrb	r3, [r7, #19]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10c      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006998:	4903      	ldr	r1, [pc, #12]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80069a0:	e008      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069a2:	7cfb      	ldrb	r3, [r7, #19]
 80069a4:	74bb      	strb	r3, [r7, #18]
 80069a6:	e005      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b0:	7cfb      	ldrb	r3, [r7, #19]
 80069b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069b4:	7c7b      	ldrb	r3, [r7, #17]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d105      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ba:	4ba0      	ldr	r3, [pc, #640]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	4a9f      	ldr	r2, [pc, #636]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069d2:	4b9a      	ldr	r3, [pc, #616]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d8:	f023 0203 	bic.w	r2, r3, #3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e0:	4996      	ldr	r1, [pc, #600]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069f4:	4b91      	ldr	r3, [pc, #580]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fa:	f023 020c 	bic.w	r2, r3, #12
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	498e      	ldr	r1, [pc, #568]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a16:	4b89      	ldr	r3, [pc, #548]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a24:	4985      	ldr	r1, [pc, #532]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a38:	4b80      	ldr	r3, [pc, #512]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a46:	497d      	ldr	r1, [pc, #500]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a5a:	4b78      	ldr	r3, [pc, #480]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a68:	4974      	ldr	r1, [pc, #464]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a7c:	4b6f      	ldr	r3, [pc, #444]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	496c      	ldr	r1, [pc, #432]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a9e:	4b67      	ldr	r3, [pc, #412]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aac:	4963      	ldr	r1, [pc, #396]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ac0:	4b5e      	ldr	r3, [pc, #376]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ace:	495b      	ldr	r1, [pc, #364]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ae2:	4b56      	ldr	r3, [pc, #344]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af0:	4952      	ldr	r1, [pc, #328]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b04:	4b4d      	ldr	r3, [pc, #308]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b12:	494a      	ldr	r1, [pc, #296]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b26:	4b45      	ldr	r3, [pc, #276]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b34:	4941      	ldr	r1, [pc, #260]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b48:	4b3c      	ldr	r3, [pc, #240]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b4e:	f023 0203 	bic.w	r2, r3, #3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b56:	4939      	ldr	r1, [pc, #228]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d028      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b6a:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b78:	4930      	ldr	r1, [pc, #192]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b88:	d106      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b8a:	4b2c      	ldr	r3, [pc, #176]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	4a2b      	ldr	r2, [pc, #172]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b94:	60d3      	str	r3, [r2, #12]
 8006b96:	e011      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ba0:	d10c      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f879 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006bb2:	7cfb      	ldrb	r3, [r7, #19]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006bb8:	7cfb      	ldrb	r3, [r7, #19]
 8006bba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d04d      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd0:	d108      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bd8:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006be2:	e012      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bea:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006bf4:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c02:	490e      	ldr	r1, [pc, #56]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c12:	d106      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c14:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1e:	60d3      	str	r3, [r2, #12]
 8006c20:	e020      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c2a:	d109      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c2c:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	4a02      	ldr	r2, [pc, #8]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c36:	60d3      	str	r3, [r2, #12]
 8006c38:	e014      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006c3a:	bf00      	nop
 8006c3c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 f825 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c5a:	7cfb      	ldrb	r3, [r7, #19]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006c60:	7cfb      	ldrb	r3, [r7, #19]
 8006c62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d028      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c70:	4b7a      	ldr	r3, [pc, #488]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c7e:	4977      	ldr	r1, [pc, #476]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c8e:	d106      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c90:	4b72      	ldr	r3, [pc, #456]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a71      	ldr	r2, [pc, #452]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9a:	60d3      	str	r3, [r2, #12]
 8006c9c:	e011      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ca6:	d10c      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3304      	adds	r3, #4
 8006cac:	2101      	movs	r1, #1
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fff6 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cb8:	7cfb      	ldrb	r3, [r7, #19]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006cbe:	7cfb      	ldrb	r3, [r7, #19]
 8006cc0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01e      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cce:	4b63      	ldr	r3, [pc, #396]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cde:	495f      	ldr	r1, [pc, #380]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf0:	d10c      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 ffd1 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d02:	7cfb      	ldrb	r3, [r7, #19]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006d08:	7cfb      	ldrb	r3, [r7, #19]
 8006d0a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d18:	4b50      	ldr	r3, [pc, #320]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d1e:	f023 0204 	bic.w	r2, r3, #4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d28:	494c      	ldr	r1, [pc, #304]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006d3c:	4b47      	ldr	r3, [pc, #284]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d42:	f023 0218 	bic.w	r2, r3, #24
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4c:	4943      	ldr	r1, [pc, #268]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d035      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d60:	4b3e      	ldr	r3, [pc, #248]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a3d      	ldr	r2, [pc, #244]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d6c:	f7fb fb7e 	bl	800246c <HAL_GetTick>
 8006d70:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d72:	e009      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d74:	f7fb fb7a 	bl	800246c <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d902      	bls.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	74fb      	strb	r3, [r7, #19]
        break;
 8006d86:	e005      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d88:	4b34      	ldr	r3, [pc, #208]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ef      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006d94:	7cfb      	ldrb	r3, [r7, #19]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d113      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006d9a:	4b30      	ldr	r3, [pc, #192]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006daa:	492c      	ldr	r1, [pc, #176]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3320      	adds	r3, #32
 8006db6:	2102      	movs	r1, #2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 f865 	bl	8007e88 <RCCEx_PLLSAI2_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006dc2:	7cfb      	ldrb	r3, [r7, #19]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
 8006dca:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01e      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006dd8:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de8:	491c      	ldr	r1, [pc, #112]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3320      	adds	r3, #32
 8006e00:	2101      	movs	r1, #1
 8006e02:	4618      	mov	r0, r3
 8006e04:	f001 f840 	bl	8007e88 <RCCEx_PLLSAI2_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e0c:	7cfb      	ldrb	r3, [r7, #19]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006e12:	7cfb      	ldrb	r3, [r7, #19]
 8006e14:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d017      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e22:	4b0e      	ldr	r3, [pc, #56]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e32:	490a      	ldr	r1, [pc, #40]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e44:	d105      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4a04      	ldr	r2, [pc, #16]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e50:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e52:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40021000 	.word	0x40021000

08006e60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e72:	d13e      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006e74:	4bb6      	ldr	r3, [pc, #728]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e86:	d028      	beq.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e8e:	f200 86f2 	bhi.w	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e98:	d005      	beq.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006ea2:	f000 bee8 	b.w	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ea6:	4baa      	ldr	r3, [pc, #680]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	f040 86e2 	bne.w	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eba:	61fb      	str	r3, [r7, #28]
      break;
 8006ebc:	f000 bedd 	b.w	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006ec0:	4ba3      	ldr	r3, [pc, #652]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	f040 86d7 	bne.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8006ed0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ed4:	61fb      	str	r3, [r7, #28]
      break;
 8006ed6:	f000 bed2 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006eda:	4b9d      	ldr	r3, [pc, #628]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee6:	f040 86cc 	bne.w	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8006eea:	4b9a      	ldr	r3, [pc, #616]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006eec:	61fb      	str	r3, [r7, #28]
      break;
 8006eee:	f000 bec8 	b.w	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ef2:	4b97      	ldr	r3, [pc, #604]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d036      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d840      	bhi.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d003      	beq.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d020      	beq.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006f14:	e039      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006f16:	4b8e      	ldr	r3, [pc, #568]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d116      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006f22:	4b8b      	ldr	r3, [pc, #556]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006f2e:	4b88      	ldr	r3, [pc, #544]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	091b      	lsrs	r3, r3, #4
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	e005      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006f3a:	4b85      	ldr	r3, [pc, #532]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f40:	0a1b      	lsrs	r3, r3, #8
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	4a84      	ldr	r2, [pc, #528]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006f4e:	e01f      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61bb      	str	r3, [r7, #24]
      break;
 8006f54:	e01c      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f56:	4b7e      	ldr	r3, [pc, #504]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f62:	d102      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006f64:	4b7d      	ldr	r3, [pc, #500]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006f66:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006f68:	e012      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
      break;
 8006f6e:	e00f      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f70:	4b77      	ldr	r3, [pc, #476]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f7c:	d102      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006f7e:	4b77      	ldr	r3, [pc, #476]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006f80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006f82:	e005      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61bb      	str	r3, [r7, #24]
      break;
 8006f88:	e002      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61bb      	str	r3, [r7, #24]
      break;
 8006f8e:	bf00      	nop
    }

    switch(PeriphClk)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f96:	f000 8604 	beq.w	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fa0:	f200 8671 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006faa:	f000 8467 	beq.w	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fb4:	f200 8667 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fbe:	f000 852f 	beq.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc8:	f200 865d 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fd2:	f000 8185 	beq.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fdc:	f200 8653 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fe6:	f000 80cb 	beq.w	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ff0:	f200 8649 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffa:	f000 842e 	beq.w	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007004:	f200 863f 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800700e:	f000 83e2 	beq.w	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007018:	f200 8635 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007022:	f000 80ad 	beq.w	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702c:	f200 862b 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007036:	f000 809b 	beq.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007040:	f200 8621 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800704a:	f000 8089 	beq.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007054:	f200 8617 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800705e:	f000 8552 	beq.w	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007068:	f200 860d 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007072:	f000 84fe 	beq.w	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800707c:	f200 8603 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007086:	f000 849f 	beq.w	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007090:	f200 85f9 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b80      	cmp	r3, #128	; 0x80
 8007098:	f000 846a 	beq.w	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b80      	cmp	r3, #128	; 0x80
 80070a0:	f200 85f1 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d84c      	bhi.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 85ea 	beq.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	2b1f      	cmp	r3, #31
 80070b8:	f200 85e5 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	080074d5 	.word	0x080074d5
 80070c8:	08007543 	.word	0x08007543
 80070cc:	08007c87 	.word	0x08007c87
 80070d0:	080075d7 	.word	0x080075d7
 80070d4:	08007c87 	.word	0x08007c87
 80070d8:	08007c87 	.word	0x08007c87
 80070dc:	08007c87 	.word	0x08007c87
 80070e0:	0800764f 	.word	0x0800764f
 80070e4:	08007c87 	.word	0x08007c87
 80070e8:	08007c87 	.word	0x08007c87
 80070ec:	08007c87 	.word	0x08007c87
 80070f0:	08007c87 	.word	0x08007c87
 80070f4:	08007c87 	.word	0x08007c87
 80070f8:	08007c87 	.word	0x08007c87
 80070fc:	08007c87 	.word	0x08007c87
 8007100:	080076d3 	.word	0x080076d3
 8007104:	08007c87 	.word	0x08007c87
 8007108:	08007c87 	.word	0x08007c87
 800710c:	08007c87 	.word	0x08007c87
 8007110:	08007c87 	.word	0x08007c87
 8007114:	08007c87 	.word	0x08007c87
 8007118:	08007c87 	.word	0x08007c87
 800711c:	08007c87 	.word	0x08007c87
 8007120:	08007c87 	.word	0x08007c87
 8007124:	08007c87 	.word	0x08007c87
 8007128:	08007c87 	.word	0x08007c87
 800712c:	08007c87 	.word	0x08007c87
 8007130:	08007c87 	.word	0x08007c87
 8007134:	08007c87 	.word	0x08007c87
 8007138:	08007c87 	.word	0x08007c87
 800713c:	08007c87 	.word	0x08007c87
 8007140:	08007755 	.word	0x08007755
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b40      	cmp	r3, #64	; 0x40
 8007148:	f000 83e6 	beq.w	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800714c:	f000 bd9b 	b.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007150:	40021000 	.word	0x40021000
 8007154:	0007a120 	.word	0x0007a120
 8007158:	0801e568 	.word	0x0801e568
 800715c:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007160:	69b9      	ldr	r1, [r7, #24]
 8007162:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007166:	f000 ff83 	bl	8008070 <RCCEx_GetSAIxPeriphCLKFreq>
 800716a:	61f8      	str	r0, [r7, #28]
      break;
 800716c:	f000 bd8e 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007170:	69b9      	ldr	r1, [r7, #24]
 8007172:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007176:	f000 ff7b 	bl	8008070 <RCCEx_GetSAIxPeriphCLKFreq>
 800717a:	61f8      	str	r0, [r7, #28]
      break;
 800717c:	f000 bd86 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007180:	4b9a      	ldr	r3, [pc, #616]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007186:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007192:	d015      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800719a:	f200 8092 	bhi.w	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071a4:	d029      	beq.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ac:	f200 8089 	bhi.w	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d07b      	beq.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071bc:	d04a      	beq.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 80071be:	e080      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80071c0:	4b8a      	ldr	r3, [pc, #552]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d17d      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80071cc:	4b87      	ldr	r3, [pc, #540]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80071d8:	4b84      	ldr	r3, [pc, #528]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	091b      	lsrs	r3, r3, #4
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	e005      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80071e4:	4b81      	ldr	r3, [pc, #516]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	4a7f      	ldr	r2, [pc, #508]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f6:	61fb      	str	r3, [r7, #28]
          break;
 80071f8:	e066      	b.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80071fa:	4b7c      	ldr	r3, [pc, #496]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007206:	d162      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007208:	4b78      	ldr	r3, [pc, #480]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007214:	d15b      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007216:	4b75      	ldr	r3, [pc, #468]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007220:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	fb03 f202 	mul.w	r2, r3, r2
 800722a:	4b70      	ldr	r3, [pc, #448]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	091b      	lsrs	r3, r3, #4
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	3301      	adds	r3, #1
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800723c:	4b6b      	ldr	r3, [pc, #428]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	0d5b      	lsrs	r3, r3, #21
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	3301      	adds	r3, #1
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007250:	61fb      	str	r3, [r7, #28]
          break;
 8007252:	e03c      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007254:	4b65      	ldr	r3, [pc, #404]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800725c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007260:	d138      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007262:	4b62      	ldr	r3, [pc, #392]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800726a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800726e:	d131      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007270:	4b5e      	ldr	r3, [pc, #376]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	0a1b      	lsrs	r3, r3, #8
 8007276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	fb03 f202 	mul.w	r2, r3, r2
 8007284:	4b59      	ldr	r3, [pc, #356]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	091b      	lsrs	r3, r3, #4
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	3301      	adds	r3, #1
 8007290:	fbb2 f3f3 	udiv	r3, r2, r3
 8007294:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007296:	4b55      	ldr	r3, [pc, #340]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	0d5b      	lsrs	r3, r3, #21
 800729c:	f003 0303 	and.w	r3, r3, #3
 80072a0:	3301      	adds	r3, #1
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072aa:	61fb      	str	r3, [r7, #28]
          break;
 80072ac:	e012      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80072ae:	4b4f      	ldr	r3, [pc, #316]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80072b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d10e      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80072bc:	4b4d      	ldr	r3, [pc, #308]	; (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80072be:	61fb      	str	r3, [r7, #28]
          break;
 80072c0:	e00b      	b.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80072c2:	bf00      	nop
 80072c4:	f000 bce2 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80072c8:	bf00      	nop
 80072ca:	f000 bcdf 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80072ce:	bf00      	nop
 80072d0:	f000 bcdc 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80072d4:	bf00      	nop
 80072d6:	f000 bcd9 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80072da:	bf00      	nop
        break;
 80072dc:	f000 bcd6 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80072e0:	4b42      	ldr	r3, [pc, #264]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80072e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ee:	d13d      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80072f0:	4b3e      	ldr	r3, [pc, #248]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072fc:	f040 84c5 	bne.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007300:	4b3a      	ldr	r3, [pc, #232]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730c:	f040 84bd 	bne.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007310:	4b36      	ldr	r3, [pc, #216]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	0a1b      	lsrs	r3, r3, #8
 8007316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	fb03 f202 	mul.w	r2, r3, r2
 8007324:	4b31      	ldr	r3, [pc, #196]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	3301      	adds	r3, #1
 8007330:	fbb2 f3f3 	udiv	r3, r2, r3
 8007334:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007336:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	0edb      	lsrs	r3, r3, #27
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007348:	4b28      	ldr	r3, [pc, #160]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8007354:	2311      	movs	r3, #17
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e001      	b.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800735a:	2307      	movs	r3, #7
 800735c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	fbb2 f3f3 	udiv	r3, r2, r3
 8007366:	61fb      	str	r3, [r7, #28]
      break;
 8007368:	f000 bc8f 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800736c:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800737e:	d016      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007386:	f200 809b 	bhi.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007390:	d032      	beq.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007398:	f200 8092 	bhi.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8084 	beq.w	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073aa:	d052      	beq.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80073ac:	e088      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	f040 8084 	bne.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80073bc:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80073c8:	4b08      	ldr	r3, [pc, #32]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	091b      	lsrs	r3, r3, #4
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	e005      	b.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073da:	0a1b      	lsrs	r3, r3, #8
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	4a03      	ldr	r2, [pc, #12]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80073e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e6:	61fb      	str	r3, [r7, #28]
          break;
 80073e8:	e06c      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80073ea:	bf00      	nop
 80073ec:	40021000 	.word	0x40021000
 80073f0:	0801e568 	.word	0x0801e568
 80073f4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80073f8:	4ba5      	ldr	r3, [pc, #660]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007404:	d160      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007406:	4ba2      	ldr	r3, [pc, #648]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800740e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007412:	d159      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007414:	4b9e      	ldr	r3, [pc, #632]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800741e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	fb03 f202 	mul.w	r2, r3, r2
 8007428:	4b99      	ldr	r3, [pc, #612]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	091b      	lsrs	r3, r3, #4
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	3301      	adds	r3, #1
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800743a:	4b95      	ldr	r3, [pc, #596]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	0d5b      	lsrs	r3, r3, #21
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	3301      	adds	r3, #1
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	fbb2 f3f3 	udiv	r3, r2, r3
 800744e:	61fb      	str	r3, [r7, #28]
          break;
 8007450:	e03a      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007452:	4b8f      	ldr	r3, [pc, #572]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800745a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800745e:	d135      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007460:	4b8b      	ldr	r3, [pc, #556]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800746c:	d12e      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800746e:	4b88      	ldr	r3, [pc, #544]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007478:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	fb03 f202 	mul.w	r2, r3, r2
 8007482:	4b83      	ldr	r3, [pc, #524]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	091b      	lsrs	r3, r3, #4
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	3301      	adds	r3, #1
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007494:	4b7e      	ldr	r3, [pc, #504]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	0d5b      	lsrs	r3, r3, #21
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	3301      	adds	r3, #1
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a8:	61fb      	str	r3, [r7, #28]
          break;
 80074aa:	e00f      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80074ac:	4b78      	ldr	r3, [pc, #480]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80074ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d10a      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80074ba:	4b76      	ldr	r3, [pc, #472]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074bc:	61fb      	str	r3, [r7, #28]
          break;
 80074be:	e007      	b.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80074c0:	bf00      	nop
 80074c2:	e3e2      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80074c4:	bf00      	nop
 80074c6:	e3e0      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80074c8:	bf00      	nop
 80074ca:	e3de      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80074cc:	bf00      	nop
 80074ce:	e3dc      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80074d0:	bf00      	nop
      break;
 80074d2:	e3da      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80074d4:	4b6e      	ldr	r3, [pc, #440]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80074d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d827      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	08007505 	.word	0x08007505
 80074f4:	0800750d 	.word	0x0800750d
 80074f8:	08007521 	.word	0x08007521
          frequency = HAL_RCC_GetPCLK2Freq();
 80074fc:	f7ff f84c 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 8007500:	61f8      	str	r0, [r7, #28]
          break;
 8007502:	e01d      	b.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007504:	f7fe ff9c 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007508:	61f8      	str	r0, [r7, #28]
          break;
 800750a:	e019      	b.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800750c:	4b60      	ldr	r3, [pc, #384]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007518:	d10f      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800751a:	4b5f      	ldr	r3, [pc, #380]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800751c:	61fb      	str	r3, [r7, #28]
          break;
 800751e:	e00c      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007520:	4b5b      	ldr	r3, [pc, #364]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d107      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800752e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007532:	61fb      	str	r3, [r7, #28]
          break;
 8007534:	e003      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8007536:	bf00      	nop
 8007538:	e3a8      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800753a:	bf00      	nop
 800753c:	e3a6      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800753e:	bf00      	nop
        break;
 8007540:	e3a4      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007542:	4b53      	ldr	r3, [pc, #332]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007548:	f003 030c 	and.w	r3, r3, #12
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b0c      	cmp	r3, #12
 8007552:	d83a      	bhi.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007591 	.word	0x08007591
 8007560:	080075cb 	.word	0x080075cb
 8007564:	080075cb 	.word	0x080075cb
 8007568:	080075cb 	.word	0x080075cb
 800756c:	08007599 	.word	0x08007599
 8007570:	080075cb 	.word	0x080075cb
 8007574:	080075cb 	.word	0x080075cb
 8007578:	080075cb 	.word	0x080075cb
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075cb 	.word	0x080075cb
 8007584:	080075cb 	.word	0x080075cb
 8007588:	080075cb 	.word	0x080075cb
 800758c:	080075b5 	.word	0x080075b5
          frequency = HAL_RCC_GetPCLK1Freq();
 8007590:	f7fe ffec 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007594:	61f8      	str	r0, [r7, #28]
          break;
 8007596:	e01d      	b.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8007598:	f7fe ff52 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 800759c:	61f8      	str	r0, [r7, #28]
          break;
 800759e:	e019      	b.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075a0:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ac:	d10f      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80075ae:	4b3a      	ldr	r3, [pc, #232]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80075b0:	61fb      	str	r3, [r7, #28]
          break;
 80075b2:	e00c      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075b4:	4b36      	ldr	r3, [pc, #216]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80075b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d107      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80075c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c6:	61fb      	str	r3, [r7, #28]
          break;
 80075c8:	e003      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80075ca:	bf00      	nop
 80075cc:	e35e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80075ce:	bf00      	nop
 80075d0:	e35c      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80075d2:	bf00      	nop
        break;
 80075d4:	e35a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80075d6:	4b2e      	ldr	r3, [pc, #184]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b30      	cmp	r3, #48	; 0x30
 80075e6:	d021      	beq.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b30      	cmp	r3, #48	; 0x30
 80075ec:	d829      	bhi.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d011      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d823      	bhi.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b10      	cmp	r3, #16
 8007604:	d004      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8007606:	e01c      	b.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007608:	f7fe ffb0 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800760c:	61f8      	str	r0, [r7, #28]
          break;
 800760e:	e01d      	b.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8007610:	f7fe ff16 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007614:	61f8      	str	r0, [r7, #28]
          break;
 8007616:	e019      	b.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007618:	4b1d      	ldr	r3, [pc, #116]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007624:	d10f      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8007626:	4b1c      	ldr	r3, [pc, #112]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007628:	61fb      	str	r3, [r7, #28]
          break;
 800762a:	e00c      	b.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800762c:	4b18      	ldr	r3, [pc, #96]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b02      	cmp	r3, #2
 8007638:	d107      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800763a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800763e:	61fb      	str	r3, [r7, #28]
          break;
 8007640:	e003      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8007642:	bf00      	nop
 8007644:	e322      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007646:	bf00      	nop
 8007648:	e320      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800764a:	bf00      	nop
        break;
 800764c:	e31e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800764e:	4b10      	ldr	r3, [pc, #64]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007654:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2bc0      	cmp	r3, #192	; 0xc0
 800765e:	d027      	beq.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2bc0      	cmp	r3, #192	; 0xc0
 8007664:	d82f      	bhi.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b80      	cmp	r3, #128	; 0x80
 800766a:	d017      	beq.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d829      	bhi.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d004      	beq.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800767e:	e022      	b.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007680:	f7fe ff74 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007684:	61f8      	str	r0, [r7, #28]
          break;
 8007686:	e023      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8007688:	f7fe feda 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 800768c:	61f8      	str	r0, [r7, #28]
          break;
 800768e:	e01f      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8007690:	40021000 	.word	0x40021000
 8007694:	02dc6c00 	.word	0x02dc6c00
 8007698:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800769c:	4b9b      	ldr	r3, [pc, #620]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a8:	d10f      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80076aa:	4b99      	ldr	r3, [pc, #612]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076ac:	61fb      	str	r3, [r7, #28]
          break;
 80076ae:	e00c      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80076b0:	4b96      	ldr	r3, [pc, #600]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d107      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80076be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c2:	61fb      	str	r3, [r7, #28]
          break;
 80076c4:	e003      	b.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80076c6:	bf00      	nop
 80076c8:	e2e0      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80076ca:	bf00      	nop
 80076cc:	e2de      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80076ce:	bf00      	nop
        break;
 80076d0:	e2dc      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80076d2:	4b8e      	ldr	r3, [pc, #568]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e4:	d025      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ec:	d82c      	bhi.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f4:	d013      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fc:	d824      	bhi.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770a:	d004      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 800770c:	e01c      	b.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800770e:	f7fe ff2d 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007712:	61f8      	str	r0, [r7, #28]
          break;
 8007714:	e01d      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007716:	f7fe fe93 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 800771a:	61f8      	str	r0, [r7, #28]
          break;
 800771c:	e019      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800771e:	4b7b      	ldr	r3, [pc, #492]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772a:	d10f      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 800772c:	4b78      	ldr	r3, [pc, #480]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800772e:	61fb      	str	r3, [r7, #28]
          break;
 8007730:	e00c      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007732:	4b76      	ldr	r3, [pc, #472]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b02      	cmp	r3, #2
 800773e:	d107      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8007740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007744:	61fb      	str	r3, [r7, #28]
          break;
 8007746:	e003      	b.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8007748:	bf00      	nop
 800774a:	e29f      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800774c:	bf00      	nop
 800774e:	e29d      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007750:	bf00      	nop
        break;
 8007752:	e29b      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007754:	4b6d      	ldr	r3, [pc, #436]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007766:	d025      	beq.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800776e:	d82c      	bhi.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007776:	d013      	beq.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777e:	d824      	bhi.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d004      	beq.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778c:	d004      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 800778e:	e01c      	b.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007790:	f7fe feec 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007794:	61f8      	str	r0, [r7, #28]
          break;
 8007796:	e01d      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8007798:	f7fe fe52 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 800779c:	61f8      	str	r0, [r7, #28]
          break;
 800779e:	e019      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077a0:	4b5a      	ldr	r3, [pc, #360]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ac:	d10f      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80077ae:	4b58      	ldr	r3, [pc, #352]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80077b0:	61fb      	str	r3, [r7, #28]
          break;
 80077b2:	e00c      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80077b4:	4b55      	ldr	r3, [pc, #340]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d107      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80077c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077c6:	61fb      	str	r3, [r7, #28]
          break;
 80077c8:	e003      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80077ca:	bf00      	nop
 80077cc:	e25e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80077ce:	bf00      	nop
 80077d0:	e25c      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80077d2:	bf00      	nop
        break;
 80077d4:	e25a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80077d6:	4b4d      	ldr	r3, [pc, #308]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077e8:	d007      	beq.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077f0:	d12f      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80077f2:	f7fe fe25 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80077f6:	61f8      	str	r0, [r7, #28]
          break;
 80077f8:	e02e      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80077fa:	4b44      	ldr	r3, [pc, #272]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007806:	d126      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8007808:	4b40      	ldr	r3, [pc, #256]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d020      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007814:	4b3d      	ldr	r3, [pc, #244]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	fb03 f202 	mul.w	r2, r3, r2
 8007828:	4b38      	ldr	r3, [pc, #224]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	3301      	adds	r3, #1
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800783a:	4b34      	ldr	r3, [pc, #208]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	0e5b      	lsrs	r3, r3, #25
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	3301      	adds	r3, #1
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	fbb2 f3f3 	udiv	r3, r2, r3
 800784e:	61fb      	str	r3, [r7, #28]
          break;
 8007850:	e001      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8007852:	bf00      	nop
 8007854:	e21a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007856:	bf00      	nop
        break;
 8007858:	e218      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800785a:	4b2c      	ldr	r3, [pc, #176]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800785c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 800786c:	f7fe fe94 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 8007870:	61f8      	str	r0, [r7, #28]
        break;
 8007872:	e20b      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007874:	f7fe fde4 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007878:	61f8      	str	r0, [r7, #28]
        break;
 800787a:	e207      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800787c:	4b23      	ldr	r3, [pc, #140]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800787e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007882:	f003 0318 	and.w	r3, r3, #24
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b10      	cmp	r3, #16
 800788c:	d010      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b10      	cmp	r3, #16
 8007892:	d834      	bhi.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d024      	beq.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80078a0:	e02d      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80078a2:	69b9      	ldr	r1, [r7, #24]
 80078a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80078a8:	f000 fbe2 	bl	8008070 <RCCEx_GetSAIxPeriphCLKFreq>
 80078ac:	61f8      	str	r0, [r7, #28]
          break;
 80078ae:	e02b      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80078b0:	4b16      	ldr	r3, [pc, #88]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d122      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80078bc:	4b13      	ldr	r3, [pc, #76]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d005      	beq.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80078c8:	4b10      	ldr	r3, [pc, #64]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	e005      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80078d4:	4b0d      	ldr	r3, [pc, #52]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	4a0c      	ldr	r2, [pc, #48]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80078e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078e6:	61fb      	str	r3, [r7, #28]
          break;
 80078e8:	e00b      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078ea:	4b08      	ldr	r3, [pc, #32]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f6:	d106      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80078f8:	4b05      	ldr	r3, [pc, #20]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80078fa:	61fb      	str	r3, [r7, #28]
          break;
 80078fc:	e003      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80078fe:	bf00      	nop
 8007900:	e1c4      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007902:	bf00      	nop
 8007904:	e1c2      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007906:	bf00      	nop
        break;
 8007908:	e1c0      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800790a:	bf00      	nop
 800790c:	40021000 	.word	0x40021000
 8007910:	00f42400 	.word	0x00f42400
 8007914:	0801e568 	.word	0x0801e568
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007918:	4b96      	ldr	r3, [pc, #600]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800791a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792a:	d013      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007932:	d819      	bhi.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007940:	d004      	beq.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8007942:	e011      	b.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007944:	f7fe fe12 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007948:	61f8      	str	r0, [r7, #28]
          break;
 800794a:	e010      	b.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800794c:	f7fe fd78 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007950:	61f8      	str	r0, [r7, #28]
          break;
 8007952:	e00c      	b.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007954:	4b87      	ldr	r3, [pc, #540]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800795c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007960:	d104      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8007962:	4b85      	ldr	r3, [pc, #532]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007964:	61fb      	str	r3, [r7, #28]
          break;
 8007966:	e001      	b.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8007968:	bf00      	nop
 800796a:	e18f      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800796c:	bf00      	nop
        break;
 800796e:	e18d      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007970:	4b80      	ldr	r3, [pc, #512]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007976:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007982:	d013      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800798a:	d819      	bhi.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007998:	d004      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800799a:	e011      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 800799c:	f7fe fde6 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 80079a0:	61f8      	str	r0, [r7, #28]
          break;
 80079a2:	e010      	b.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80079a4:	f7fe fd4c 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80079a8:	61f8      	str	r0, [r7, #28]
          break;
 80079aa:	e00c      	b.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079ac:	4b71      	ldr	r3, [pc, #452]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b8:	d104      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80079ba:	4b6f      	ldr	r3, [pc, #444]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80079bc:	61fb      	str	r3, [r7, #28]
          break;
 80079be:	e001      	b.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80079c0:	bf00      	nop
 80079c2:	e163      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80079c4:	bf00      	nop
        break;
 80079c6:	e161      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80079c8:	4b6a      	ldr	r3, [pc, #424]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079da:	d013      	beq.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079e2:	d819      	bhi.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d004      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f0:	d004      	beq.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80079f2:	e011      	b.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80079f4:	f7fe fdba 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 80079f8:	61f8      	str	r0, [r7, #28]
          break;
 80079fa:	e010      	b.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80079fc:	f7fe fd20 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007a00:	61f8      	str	r0, [r7, #28]
          break;
 8007a02:	e00c      	b.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a04:	4b5b      	ldr	r3, [pc, #364]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a10:	d104      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8007a12:	4b59      	ldr	r3, [pc, #356]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a14:	61fb      	str	r3, [r7, #28]
          break;
 8007a16:	e001      	b.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8007a18:	bf00      	nop
 8007a1a:	e137      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a1c:	bf00      	nop
        break;
 8007a1e:	e135      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007a20:	4b54      	ldr	r3, [pc, #336]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d011      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d818      	bhi.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d004      	beq.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8007a44:	e011      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a46:	f7fe fd91 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007a4a:	61f8      	str	r0, [r7, #28]
          break;
 8007a4c:	e010      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a4e:	f7fe fcf7 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007a52:	61f8      	str	r0, [r7, #28]
          break;
 8007a54:	e00c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a56:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a62:	d104      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8007a64:	4b44      	ldr	r3, [pc, #272]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a66:	61fb      	str	r3, [r7, #28]
          break;
 8007a68:	e001      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8007a6a:	bf00      	nop
 8007a6c:	e10e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a6e:	bf00      	nop
        break;
 8007a70:	e10c      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007a72:	4b40      	ldr	r3, [pc, #256]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a78:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007a84:	d02c      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007a8c:	d833      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a94:	d01a      	beq.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a9c:	d82b      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007aaa:	d004      	beq.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8007aac:	e023      	b.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007aae:	f7fe fd5d 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007ab2:	61f8      	str	r0, [r7, #28]
          break;
 8007ab4:	e026      	b.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007ab6:	4b2f      	ldr	r3, [pc, #188]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d11a      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8007ac4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ac8:	61fb      	str	r3, [r7, #28]
          break;
 8007aca:	e016      	b.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007acc:	4b29      	ldr	r3, [pc, #164]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad8:	d111      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8007ada:	4b27      	ldr	r3, [pc, #156]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007adc:	61fb      	str	r3, [r7, #28]
          break;
 8007ade:	e00e      	b.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ae0:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d109      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8007aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007af2:	61fb      	str	r3, [r7, #28]
          break;
 8007af4:	e005      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8007af6:	bf00      	nop
 8007af8:	e0c8      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007afa:	bf00      	nop
 8007afc:	e0c6      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007afe:	bf00      	nop
 8007b00:	e0c4      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b02:	bf00      	nop
        break;
 8007b04:	e0c2      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007b06:	4b1b      	ldr	r3, [pc, #108]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b18:	d030      	beq.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b20:	d837      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b28:	d01a      	beq.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b30:	d82f      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b3e:	d004      	beq.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8007b40:	e027      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b42:	f7fe fd13 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007b46:	61f8      	str	r0, [r7, #28]
          break;
 8007b48:	e02a      	b.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d11e      	bne.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8007b58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b5c:	61fb      	str	r3, [r7, #28]
          break;
 8007b5e:	e01a      	b.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b60:	4b04      	ldr	r3, [pc, #16]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b6c:	d115      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8007b6e:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007b70:	61fb      	str	r3, [r7, #28]
          break;
 8007b72:	e012      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007b74:	40021000 	.word	0x40021000
 8007b78:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b7c:	4b46      	ldr	r3, [pc, #280]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d109      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8007b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8e:	61fb      	str	r3, [r7, #28]
          break;
 8007b90:	e005      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8007b92:	bf00      	nop
 8007b94:	e07a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b96:	bf00      	nop
 8007b98:	e078      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b9a:	bf00      	nop
 8007b9c:	e076      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b9e:	bf00      	nop
        break;
 8007ba0:	e074      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007ba2:	4b3d      	ldr	r3, [pc, #244]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007ba4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ba8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bb4:	d02c      	beq.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bbc:	d855      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bca:	d004      	beq.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8007bcc:	e04d      	b.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007bce:	f7fe fc37 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007bd2:	61f8      	str	r0, [r7, #28]
          break;
 8007bd4:	e04e      	b.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007bd6:	4b30      	ldr	r3, [pc, #192]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d145      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007be2:	4b2d      	ldr	r3, [pc, #180]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8007bee:	4b2a      	ldr	r3, [pc, #168]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	091b      	lsrs	r3, r3, #4
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	e005      	b.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8007bfa:	4b27      	ldr	r3, [pc, #156]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	4a25      	ldr	r2, [pc, #148]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0c:	61fb      	str	r3, [r7, #28]
          break;
 8007c0e:	e02e      	b.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007c10:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c1c:	d129      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007c1e:	4b1e      	ldr	r3, [pc, #120]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c2a:	d122      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007c2c:	4b1a      	ldr	r3, [pc, #104]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	0a1b      	lsrs	r3, r3, #8
 8007c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c36:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	fb03 f202 	mul.w	r2, r3, r2
 8007c40:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	0d5b      	lsrs	r3, r3, #21
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c66:	61fb      	str	r3, [r7, #28]
          break;
 8007c68:	e003      	b.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8007c6a:	bf00      	nop
 8007c6c:	e00e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007c6e:	bf00      	nop
 8007c70:	e00c      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007c72:	bf00      	nop
        break;
 8007c74:	e00a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c76:	bf00      	nop
 8007c78:	e008      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e006      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e004      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c82:	bf00      	nop
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c86:	bf00      	nop
 8007c88:	e000      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c8a:	bf00      	nop
    }
  }

  return(frequency);
 8007c8c:	69fb      	ldr	r3, [r7, #28]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	0801e568 	.word	0x0801e568

08007ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007cae:	4b72      	ldr	r3, [pc, #456]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00e      	beq.n	8007cd8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007cba:	4b6f      	ldr	r3, [pc, #444]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f003 0203 	and.w	r2, r3, #3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d103      	bne.n	8007cd2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d142      	bne.n	8007d58 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	73fb      	strb	r3, [r7, #15]
 8007cd6:	e03f      	b.n	8007d58 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d018      	beq.n	8007d12 <RCCEx_PLLSAI1_Config+0x72>
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d825      	bhi.n	8007d30 <RCCEx_PLLSAI1_Config+0x90>
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d002      	beq.n	8007cee <RCCEx_PLLSAI1_Config+0x4e>
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d009      	beq.n	8007d00 <RCCEx_PLLSAI1_Config+0x60>
 8007cec:	e020      	b.n	8007d30 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007cee:	4b62      	ldr	r3, [pc, #392]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d11d      	bne.n	8007d36 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cfe:	e01a      	b.n	8007d36 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d00:	4b5d      	ldr	r3, [pc, #372]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d116      	bne.n	8007d3a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d10:	e013      	b.n	8007d3a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d12:	4b59      	ldr	r3, [pc, #356]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10f      	bne.n	8007d3e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007d1e:	4b56      	ldr	r3, [pc, #344]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d2e:	e006      	b.n	8007d3e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
      break;
 8007d34:	e004      	b.n	8007d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007d36:	bf00      	nop
 8007d38:	e002      	b.n	8007d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007d3a:	bf00      	nop
 8007d3c:	e000      	b.n	8007d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d108      	bne.n	8007d58 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007d46:	4b4c      	ldr	r3, [pc, #304]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	f023 0203 	bic.w	r2, r3, #3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4949      	ldr	r1, [pc, #292]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f040 8086 	bne.w	8007e6c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007d60:	4b45      	ldr	r3, [pc, #276]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a44      	ldr	r2, [pc, #272]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d6c:	f7fa fb7e 	bl	800246c <HAL_GetTick>
 8007d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007d72:	e009      	b.n	8007d88 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d74:	f7fa fb7a 	bl	800246c <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d902      	bls.n	8007d88 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	73fb      	strb	r3, [r7, #15]
        break;
 8007d86:	e005      	b.n	8007d94 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007d88:	4b3b      	ldr	r3, [pc, #236]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ef      	bne.n	8007d74 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d168      	bne.n	8007e6c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d113      	bne.n	8007dc8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007da0:	4b35      	ldr	r3, [pc, #212]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	4b35      	ldr	r3, [pc, #212]	; (8007e7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007da6:	4013      	ands	r3, r2
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6892      	ldr	r2, [r2, #8]
 8007dac:	0211      	lsls	r1, r2, #8
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	68d2      	ldr	r2, [r2, #12]
 8007db2:	06d2      	lsls	r2, r2, #27
 8007db4:	4311      	orrs	r1, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6852      	ldr	r2, [r2, #4]
 8007dba:	3a01      	subs	r2, #1
 8007dbc:	0112      	lsls	r2, r2, #4
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	492d      	ldr	r1, [pc, #180]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	610b      	str	r3, [r1, #16]
 8007dc6:	e02d      	b.n	8007e24 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d115      	bne.n	8007dfa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007dce:	4b2a      	ldr	r3, [pc, #168]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6892      	ldr	r2, [r2, #8]
 8007dda:	0211      	lsls	r1, r2, #8
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6912      	ldr	r2, [r2, #16]
 8007de0:	0852      	lsrs	r2, r2, #1
 8007de2:	3a01      	subs	r2, #1
 8007de4:	0552      	lsls	r2, r2, #21
 8007de6:	4311      	orrs	r1, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	6852      	ldr	r2, [r2, #4]
 8007dec:	3a01      	subs	r2, #1
 8007dee:	0112      	lsls	r2, r2, #4
 8007df0:	430a      	orrs	r2, r1
 8007df2:	4921      	ldr	r1, [pc, #132]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	610b      	str	r3, [r1, #16]
 8007df8:	e014      	b.n	8007e24 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007dfa:	4b1f      	ldr	r3, [pc, #124]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dfc:	691a      	ldr	r2, [r3, #16]
 8007dfe:	4b21      	ldr	r3, [pc, #132]	; (8007e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6892      	ldr	r2, [r2, #8]
 8007e06:	0211      	lsls	r1, r2, #8
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6952      	ldr	r2, [r2, #20]
 8007e0c:	0852      	lsrs	r2, r2, #1
 8007e0e:	3a01      	subs	r2, #1
 8007e10:	0652      	lsls	r2, r2, #25
 8007e12:	4311      	orrs	r1, r2
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6852      	ldr	r2, [r2, #4]
 8007e18:	3a01      	subs	r2, #1
 8007e1a:	0112      	lsls	r2, r2, #4
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	4916      	ldr	r1, [pc, #88]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007e24:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a13      	ldr	r2, [pc, #76]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e30:	f7fa fb1c 	bl	800246c <HAL_GetTick>
 8007e34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e36:	e009      	b.n	8007e4c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e38:	f7fa fb18 	bl	800246c <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d902      	bls.n	8007e4c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	73fb      	strb	r3, [r7, #15]
          break;
 8007e4a:	e005      	b.n	8007e58 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0ef      	beq.n	8007e38 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007e5e:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	4904      	ldr	r1, [pc, #16]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40021000 	.word	0x40021000
 8007e7c:	07ff800f 	.word	0x07ff800f
 8007e80:	ff9f800f 	.word	0xff9f800f
 8007e84:	f9ff800f 	.word	0xf9ff800f

08007e88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e96:	4b72      	ldr	r3, [pc, #456]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00e      	beq.n	8007ec0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007ea2:	4b6f      	ldr	r3, [pc, #444]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f003 0203 	and.w	r2, r3, #3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d103      	bne.n	8007eba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d142      	bne.n	8007f40 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	73fb      	strb	r3, [r7, #15]
 8007ebe:	e03f      	b.n	8007f40 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d018      	beq.n	8007efa <RCCEx_PLLSAI2_Config+0x72>
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d825      	bhi.n	8007f18 <RCCEx_PLLSAI2_Config+0x90>
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d002      	beq.n	8007ed6 <RCCEx_PLLSAI2_Config+0x4e>
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d009      	beq.n	8007ee8 <RCCEx_PLLSAI2_Config+0x60>
 8007ed4:	e020      	b.n	8007f18 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ed6:	4b62      	ldr	r3, [pc, #392]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d11d      	bne.n	8007f1e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ee6:	e01a      	b.n	8007f1e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ee8:	4b5d      	ldr	r3, [pc, #372]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d116      	bne.n	8007f22 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ef8:	e013      	b.n	8007f22 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007efa:	4b59      	ldr	r3, [pc, #356]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10f      	bne.n	8007f26 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f06:	4b56      	ldr	r3, [pc, #344]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f16:	e006      	b.n	8007f26 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1c:	e004      	b.n	8007f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007f1e:	bf00      	nop
 8007f20:	e002      	b.n	8007f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d108      	bne.n	8007f40 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007f2e:	4b4c      	ldr	r3, [pc, #304]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	f023 0203 	bic.w	r2, r3, #3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4949      	ldr	r1, [pc, #292]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f040 8086 	bne.w	8008054 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007f48:	4b45      	ldr	r3, [pc, #276]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a44      	ldr	r2, [pc, #272]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f54:	f7fa fa8a 	bl	800246c <HAL_GetTick>
 8007f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f5a:	e009      	b.n	8007f70 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f5c:	f7fa fa86 	bl	800246c <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d902      	bls.n	8007f70 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8007f6e:	e005      	b.n	8007f7c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f70:	4b3b      	ldr	r3, [pc, #236]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1ef      	bne.n	8007f5c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d168      	bne.n	8008054 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d113      	bne.n	8007fb0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f88:	4b35      	ldr	r3, [pc, #212]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f8a:	695a      	ldr	r2, [r3, #20]
 8007f8c:	4b35      	ldr	r3, [pc, #212]	; (8008064 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6892      	ldr	r2, [r2, #8]
 8007f94:	0211      	lsls	r1, r2, #8
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	68d2      	ldr	r2, [r2, #12]
 8007f9a:	06d2      	lsls	r2, r2, #27
 8007f9c:	4311      	orrs	r1, r2
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6852      	ldr	r2, [r2, #4]
 8007fa2:	3a01      	subs	r2, #1
 8007fa4:	0112      	lsls	r2, r2, #4
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	492d      	ldr	r1, [pc, #180]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	614b      	str	r3, [r1, #20]
 8007fae:	e02d      	b.n	800800c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d115      	bne.n	8007fe2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007fb6:	4b2a      	ldr	r3, [pc, #168]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fb8:	695a      	ldr	r2, [r3, #20]
 8007fba:	4b2b      	ldr	r3, [pc, #172]	; (8008068 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6892      	ldr	r2, [r2, #8]
 8007fc2:	0211      	lsls	r1, r2, #8
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6912      	ldr	r2, [r2, #16]
 8007fc8:	0852      	lsrs	r2, r2, #1
 8007fca:	3a01      	subs	r2, #1
 8007fcc:	0552      	lsls	r2, r2, #21
 8007fce:	4311      	orrs	r1, r2
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6852      	ldr	r2, [r2, #4]
 8007fd4:	3a01      	subs	r2, #1
 8007fd6:	0112      	lsls	r2, r2, #4
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	4921      	ldr	r1, [pc, #132]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	614b      	str	r3, [r1, #20]
 8007fe0:	e014      	b.n	800800c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007fe2:	4b1f      	ldr	r3, [pc, #124]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fe4:	695a      	ldr	r2, [r3, #20]
 8007fe6:	4b21      	ldr	r3, [pc, #132]	; (800806c <RCCEx_PLLSAI2_Config+0x1e4>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	6892      	ldr	r2, [r2, #8]
 8007fee:	0211      	lsls	r1, r2, #8
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6952      	ldr	r2, [r2, #20]
 8007ff4:	0852      	lsrs	r2, r2, #1
 8007ff6:	3a01      	subs	r2, #1
 8007ff8:	0652      	lsls	r2, r2, #25
 8007ffa:	4311      	orrs	r1, r2
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6852      	ldr	r2, [r2, #4]
 8008000:	3a01      	subs	r2, #1
 8008002:	0112      	lsls	r2, r2, #4
 8008004:	430a      	orrs	r2, r1
 8008006:	4916      	ldr	r1, [pc, #88]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008008:	4313      	orrs	r3, r2
 800800a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800800c:	4b14      	ldr	r3, [pc, #80]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a13      	ldr	r2, [pc, #76]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008018:	f7fa fa28 	bl	800246c <HAL_GetTick>
 800801c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800801e:	e009      	b.n	8008034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008020:	f7fa fa24 	bl	800246c <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d902      	bls.n	8008034 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	73fb      	strb	r3, [r7, #15]
          break;
 8008032:	e005      	b.n	8008040 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0ef      	beq.n	8008020 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008046:	4b06      	ldr	r3, [pc, #24]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	4904      	ldr	r1, [pc, #16]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008050:	4313      	orrs	r3, r2
 8008052:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	40021000 	.word	0x40021000
 8008064:	07ff800f 	.word	0x07ff800f
 8008068:	ff9f800f 	.word	0xff9f800f
 800806c:	f9ff800f 	.word	0xf9ff800f

08008070 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008070:	b480      	push	{r7}
 8008072:	b089      	sub	sp, #36	; 0x24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800808c:	d10b      	bne.n	80080a6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800808e:	4b7e      	ldr	r3, [pc, #504]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008090:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008094:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008098:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	2b60      	cmp	r3, #96	; 0x60
 800809e:	d112      	bne.n	80080c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80080a0:	4b7a      	ldr	r3, [pc, #488]	; (800828c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	e00f      	b.n	80080c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ac:	d10b      	bne.n	80080c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80080ae:	4b76      	ldr	r3, [pc, #472]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080b8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080c0:	d101      	bne.n	80080c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80080c2:	4b72      	ldr	r3, [pc, #456]	; (800828c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80080c4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f040 80d6 	bne.w	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	2b40      	cmp	r3, #64	; 0x40
 80080d6:	d003      	beq.n	80080e0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080de:	d13b      	bne.n	8008158 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80080e0:	4b69      	ldr	r3, [pc, #420]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ec:	f040 80c4 	bne.w	8008278 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80080f0:	4b65      	ldr	r3, [pc, #404]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80bd 	beq.w	8008278 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80080fe:	4b62      	ldr	r3, [pc, #392]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	091b      	lsrs	r3, r3, #4
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	3301      	adds	r3, #1
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008110:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008112:	4b5d      	ldr	r3, [pc, #372]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	0a1b      	lsrs	r3, r3, #8
 8008118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800811e:	4b5a      	ldr	r3, [pc, #360]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	0edb      	lsrs	r3, r3, #27
 8008124:	f003 031f 	and.w	r3, r3, #31
 8008128:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008130:	4b55      	ldr	r3, [pc, #340]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800813c:	2311      	movs	r3, #17
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e001      	b.n	8008146 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8008142:	2307      	movs	r3, #7
 8008144:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	fb03 f202 	mul.w	r2, r3, r2
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	fbb2 f3f3 	udiv	r3, r2, r3
 8008154:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008156:	e08f      	b.n	8008278 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d13a      	bne.n	80081d4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800815e:	4b4a      	ldr	r3, [pc, #296]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800816a:	f040 8086 	bne.w	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800816e:	4b46      	ldr	r3, [pc, #280]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d07f      	beq.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800817a:	4b43      	ldr	r3, [pc, #268]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	091b      	lsrs	r3, r3, #4
 8008180:	f003 030f 	and.w	r3, r3, #15
 8008184:	3301      	adds	r3, #1
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	fbb2 f3f3 	udiv	r3, r2, r3
 800818c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800818e:	4b3e      	ldr	r3, [pc, #248]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008198:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800819a:	4b3b      	ldr	r3, [pc, #236]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	0edb      	lsrs	r3, r3, #27
 80081a0:	f003 031f 	and.w	r3, r3, #31
 80081a4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80081ac:	4b36      	ldr	r3, [pc, #216]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80081b8:	2311      	movs	r3, #17
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e001      	b.n	80081c2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80081be:	2307      	movs	r3, #7
 80081c0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	fb03 f202 	mul.w	r2, r3, r2
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	e052      	b.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	2b80      	cmp	r3, #128	; 0x80
 80081d8:	d003      	beq.n	80081e2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e0:	d109      	bne.n	80081f6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081e2:	4b29      	ldr	r3, [pc, #164]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ee:	d144      	bne.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80081f0:	4b27      	ldr	r3, [pc, #156]	; (8008290 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80081f2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081f4:	e041      	b.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	d003      	beq.n	8008204 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008202:	d13a      	bne.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008204:	4b20      	ldr	r3, [pc, #128]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800820c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008210:	d133      	bne.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008212:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d02d      	beq.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800821e:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	3301      	adds	r3, #1
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008230:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008232:	4b15      	ldr	r3, [pc, #84]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	0a1b      	lsrs	r3, r3, #8
 8008238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800823e:	4b12      	ldr	r3, [pc, #72]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	0edb      	lsrs	r3, r3, #27
 8008244:	f003 031f 	and.w	r3, r3, #31
 8008248:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008250:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800825c:	2311      	movs	r3, #17
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	e001      	b.n	8008266 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8008262:	2307      	movs	r3, #7
 8008264:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	fb03 f202 	mul.w	r2, r3, r2
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	fbb2 f3f3 	udiv	r3, r2, r3
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	e000      	b.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008278:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800827a:	69fb      	ldr	r3, [r7, #28]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3724      	adds	r7, #36	; 0x24
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	40021000 	.word	0x40021000
 800828c:	001fff68 	.word	0x001fff68
 8008290:	00f42400 	.word	0x00f42400

08008294 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d06c      	beq.n	8008380 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7f9 fd7e 	bl	8001dbc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	22ca      	movs	r2, #202	; 0xca
 80082ce:	625a      	str	r2, [r3, #36]	; 0x24
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2253      	movs	r2, #83	; 0x53
 80082d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9a0 	bl	800861e <RTC_EnterInitMode>
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d14b      	bne.n	8008380 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082fa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6899      	ldr	r1, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	68d2      	ldr	r2, [r2, #12]
 8008322:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6919      	ldr	r1, [r3, #16]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	041a      	lsls	r2, r3, #16
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f9a3 	bl	8008684 <RTC_ExitInitMode>
 800833e:	4603      	mov	r3, r0
 8008340:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d11b      	bne.n	8008380 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0203 	bic.w	r2, r2, #3
 8008356:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69da      	ldr	r2, [r3, #28]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	22ff      	movs	r2, #255	; 0xff
 8008376:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800838a:	b590      	push	{r4, r7, lr}
 800838c:	b087      	sub	sp, #28
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_RTC_SetTime+0x1a>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e08b      	b.n	80084bc <HAL_RTC_SetTime+0x132>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	22ca      	movs	r2, #202	; 0xca
 80083ba:	625a      	str	r2, [r3, #36]	; 0x24
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2253      	movs	r2, #83	; 0x53
 80083c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f92a 	bl	800861e <RTC_EnterInitMode>
 80083ca:	4603      	mov	r3, r0
 80083cc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80083ce:	7cfb      	ldrb	r3, [r7, #19]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d163      	bne.n	800849c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d126      	bne.n	8008428 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f984 	bl	8008700 <RTC_ByteToBcd2>
 80083f8:	4603      	mov	r3, r0
 80083fa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	785b      	ldrb	r3, [r3, #1]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f97d 	bl	8008700 <RTC_ByteToBcd2>
 8008406:	4603      	mov	r3, r0
 8008408:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800840a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	789b      	ldrb	r3, [r3, #2]
 8008410:	4618      	mov	r0, r3
 8008412:	f000 f975 	bl	8008700 <RTC_ByteToBcd2>
 8008416:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008418:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	78db      	ldrb	r3, [r3, #3]
 8008420:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	e018      	b.n	800845a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2200      	movs	r2, #0
 800843a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008448:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800844e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	78db      	ldrb	r3, [r3, #3]
 8008454:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008464:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008468:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008478:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6899      	ldr	r1, [r3, #8]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	431a      	orrs	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f8f6 	bl	8008684 <RTC_ExitInitMode>
 8008498:	4603      	mov	r3, r0
 800849a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	22ff      	movs	r2, #255	; 0xff
 80084a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80084a4:	7cfb      	ldrb	r3, [r7, #19]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d103      	bne.n	80084b2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80084ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd90      	pop	{r4, r7, pc}

080084c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_RTC_SetDate+0x1a>
 80084da:	2302      	movs	r3, #2
 80084dc:	e075      	b.n	80085ca <HAL_RTC_SetDate+0x106>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10e      	bne.n	8008512 <HAL_RTC_SetDate+0x4e>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	f003 0310 	and.w	r3, r3, #16
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d008      	beq.n	8008512 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	f023 0310 	bic.w	r3, r3, #16
 8008508:	b2db      	uxtb	r3, r3
 800850a:	330a      	adds	r3, #10
 800850c:	b2da      	uxtb	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d11c      	bne.n	8008552 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	78db      	ldrb	r3, [r3, #3]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f8ef 	bl	8008700 <RTC_ByteToBcd2>
 8008522:	4603      	mov	r3, r0
 8008524:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f8e8 	bl	8008700 <RTC_ByteToBcd2>
 8008530:	4603      	mov	r3, r0
 8008532:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008534:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	789b      	ldrb	r3, [r3, #2]
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f8e0 	bl	8008700 <RTC_ByteToBcd2>
 8008540:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008542:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	e00e      	b.n	8008570 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	78db      	ldrb	r3, [r3, #3]
 8008556:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800855e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008564:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	22ca      	movs	r2, #202	; 0xca
 8008576:	625a      	str	r2, [r3, #36]	; 0x24
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2253      	movs	r2, #83	; 0x53
 800857e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f84c 	bl	800861e <RTC_EnterInitMode>
 8008586:	4603      	mov	r3, r0
 8008588:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800858a:	7cfb      	ldrb	r3, [r7, #19]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10c      	bne.n	80085aa <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800859a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800859e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 f86f 	bl	8008684 <RTC_ExitInitMode>
 80085a6:	4603      	mov	r3, r0
 80085a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	22ff      	movs	r2, #255	; 0xff
 80085b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80085b2:	7cfb      	ldrb	r3, [r7, #19]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d103      	bne.n	80085c0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80085c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd90      	pop	{r4, r7, pc}

080085d2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80085e8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80085ea:	f7f9 ff3f 	bl	800246c <HAL_GetTick>
 80085ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80085f0:	e009      	b.n	8008606 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80085f2:	f7f9 ff3b 	bl	800246c <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008600:	d901      	bls.n	8008606 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e007      	b.n	8008616 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0ee      	beq.n	80085f2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d120      	bne.n	800867a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f04f 32ff 	mov.w	r2, #4294967295
 8008640:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008642:	f7f9 ff13 	bl	800246c <HAL_GetTick>
 8008646:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008648:	e00d      	b.n	8008666 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800864a:	f7f9 ff0f 	bl	800246c <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008658:	d905      	bls.n	8008666 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2203      	movs	r2, #3
 8008662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <RTC_EnterInitMode+0x5c>
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b03      	cmp	r3, #3
 8008678:	d1e7      	bne.n	800864a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008690:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <RTC_ExitInitMode+0x78>)
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	4a19      	ldr	r2, [pc, #100]	; (80086fc <RTC_ExitInitMode+0x78>)
 8008696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800869a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800869c:	4b17      	ldr	r3, [pc, #92]	; (80086fc <RTC_ExitInitMode+0x78>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f003 0320 	and.w	r3, r3, #32
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10c      	bne.n	80086c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff ff92 	bl	80085d2 <HAL_RTC_WaitForSynchro>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01e      	beq.n	80086f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2203      	movs	r2, #3
 80086b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	e017      	b.n	80086f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80086c2:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <RTC_ExitInitMode+0x78>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	4a0d      	ldr	r2, [pc, #52]	; (80086fc <RTC_ExitInitMode+0x78>)
 80086c8:	f023 0320 	bic.w	r3, r3, #32
 80086cc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff ff7f 	bl	80085d2 <HAL_RTC_WaitForSynchro>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2203      	movs	r2, #3
 80086de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <RTC_ExitInitMode+0x78>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	4a04      	ldr	r2, [pc, #16]	; (80086fc <RTC_ExitInitMode+0x78>)
 80086ec:	f043 0320 	orr.w	r3, r3, #32
 80086f0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40002800 	.word	0x40002800

08008700 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008712:	e005      	b.n	8008720 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	3b0a      	subs	r3, #10
 800871e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	2b09      	cmp	r3, #9
 8008724:	d8f6      	bhi.n	8008714 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	011b      	lsls	r3, r3, #4
 800872c:	b2da      	uxtb	r2, r3
 800872e:	7afb      	ldrb	r3, [r7, #11]
 8008730:	4313      	orrs	r3, r2
 8008732:	b2db      	uxtb	r3, r3
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	; 0x28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e078      	b.n	8008844 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d105      	bne.n	800876a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7f9 fb5b 	bl	8001e20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2203      	movs	r2, #3
 800876e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f86a 	bl	800884c <HAL_SD_InitCard>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e060      	b.n	8008844 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008782:	f107 0308 	add.w	r3, r7, #8
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fdb5 	bl	80092f8 <HAL_SD_GetCardStatus>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e055      	b.n	8008844 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008798:	7e3b      	ldrb	r3, [r7, #24]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800879e:	7e7b      	ldrb	r3, [r7, #25]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d10a      	bne.n	80087c2 <HAL_SD_Init+0x82>
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <HAL_SD_Init+0x78>
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087be:	65da      	str	r2, [r3, #92]	; 0x5c
 80087c0:	e00b      	b.n	80087da <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d104      	bne.n	80087d4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80087d2:	e002      	b.n	80087da <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fe6b 	bl	80094bc <HAL_SD_ConfigWideBusOperation>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e029      	b.n	8008844 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80087f0:	f7f9 fe3c 	bl	800246c <HAL_GetTick>
 80087f4:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80087f6:	e014      	b.n	8008822 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80087f8:	f7f9 fe38 	bl	800246c <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d10c      	bne.n	8008822 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800880e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e010      	b.n	8008844 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 ff5e 	bl	80096e4 <HAL_SD_GetCardState>
 8008828:	4603      	mov	r3, r0
 800882a:	2b04      	cmp	r3, #4
 800882c:	d1e4      	bne.n	80087f8 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3728      	adds	r7, #40	; 0x28
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800884c:	b5b0      	push	{r4, r5, r7, lr}
 800884e:	b08e      	sub	sp, #56	; 0x38
 8008850:	af04      	add	r7, sp, #16
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008854:	2300      	movs	r3, #0
 8008856:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800885c:	2300      	movs	r3, #0
 800885e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008860:	2300      	movs	r3, #0
 8008862:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008864:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008868:	f7fe fafa 	bl	8006e60 <HAL_RCCEx_GetPeriphCLKFreq>
 800886c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	2b00      	cmp	r3, #0
 8008872:	d109      	bne.n	8008888 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008882:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e079      	b.n	800897c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	4a3d      	ldr	r2, [pc, #244]	; (8008984 <HAL_SD_InitCard+0x138>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	091b      	lsrs	r3, r3, #4
 8008894:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d107      	bne.n	80088b4 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0210 	orr.w	r2, r2, #16
 80088b2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681d      	ldr	r5, [r3, #0]
 80088b8:	466c      	mov	r4, sp
 80088ba:	f107 0314 	add.w	r3, r7, #20
 80088be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80088c6:	f107 0308 	add.w	r3, r7, #8
 80088ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088cc:	4628      	mov	r0, r5
 80088ce:	f002 fc93 	bl	800b1f8 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f002 fcd6 	bl	800b288 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80088e8:	4a27      	ldr	r2, [pc, #156]	; (8008988 <HAL_SD_InitCard+0x13c>)
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f0:	3301      	adds	r3, #1
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f9 fdc6 	bl	8002484 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 ffd3 	bl	80098a4 <SD_PowerON>
 80088fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00b      	beq.n	800891e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	431a      	orrs	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e02e      	b.n	800897c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 ff00 	bl	8009724 <SD_InitCard>
 8008924:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e01b      	b.n	800897c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800894c:	4618      	mov	r0, r3
 800894e:	f002 fd31 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8008952:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00f      	beq.n	800897a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a0b      	ldr	r2, [pc, #44]	; (800898c <HAL_SD_InitCard+0x140>)
 8008960:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3728      	adds	r7, #40	; 0x28
 8008980:	46bd      	mov	sp, r7
 8008982:	bdb0      	pop	{r4, r5, r7, pc}
 8008984:	014f8b59 	.word	0x014f8b59
 8008988:	00012110 	.word	0x00012110
 800898c:	1fe00fff 	.word	0x1fe00fff

08008990 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08c      	sub	sp, #48	; 0x30
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d107      	bne.n	80089b8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e08d      	b.n	8008ad4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	f040 8086 	bne.w	8008ad2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80089cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	441a      	add	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d907      	bls.n	80089ea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e074      	b.n	8008ad4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2203      	movs	r2, #3
 80089ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2200      	movs	r2, #0
 80089f8:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	025a      	lsls	r2, r3, #9
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d002      	beq.n	8008a16 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	025b      	lsls	r3, r3, #9
 8008a14:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	025b      	lsls	r3, r3, #9
 8008a20:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008a22:	2390      	movs	r3, #144	; 0x90
 8008a24:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a26:	2302      	movs	r3, #2
 8008a28:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f107 0210 	add.w	r2, r7, #16
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f002 fc8d 	bl	800b35c <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a50:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d90a      	bls.n	8008a7e <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2282      	movs	r2, #130	; 0x82
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a74:	4618      	mov	r0, r3
 8008a76:	f002 fce3 	bl	800b440 <SDMMC_CmdReadMultiBlock>
 8008a7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a7c:	e009      	b.n	8008a92 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2281      	movs	r2, #129	; 0x81
 8008a82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f002 fcb5 	bl	800b3fa <SDMMC_CmdReadSingleBlock>
 8008a90:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d012      	beq.n	8008abe <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a0f      	ldr	r2, [pc, #60]	; (8008adc <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e00a      	b.n	8008ad4 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008acc:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e000      	b.n	8008ad4 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8008ad2:	2302      	movs	r3, #2
  }
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3730      	adds	r7, #48	; 0x30
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	1fe00fff 	.word	0x1fe00fff

08008ae0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08c      	sub	sp, #48	; 0x30
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d107      	bne.n	8008b08 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e08d      	b.n	8008c24 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	f040 8086 	bne.w	8008c22 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	441a      	add	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d907      	bls.n	8008b3a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e074      	b.n	8008c24 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2203      	movs	r2, #3
 8008b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2200      	movs	r2, #0
 8008b48:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	025a      	lsls	r2, r3, #9
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d002      	beq.n	8008b66 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	025b      	lsls	r3, r3, #9
 8008b64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b66:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	025b      	lsls	r3, r3, #9
 8008b70:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b72:	2390      	movs	r3, #144	; 0x90
 8008b74:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f107 0210 	add.w	r2, r7, #16
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f002 fbe5 	bl	800b35c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d90a      	bls.n	8008bce <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	22a0      	movs	r2, #160	; 0xa0
 8008bbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f002 fc81 	bl	800b4cc <SDMMC_CmdWriteMultiBlock>
 8008bca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008bcc:	e009      	b.n	8008be2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2290      	movs	r2, #144	; 0x90
 8008bd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f002 fc53 	bl	800b486 <SDMMC_CmdWriteSingleBlock>
 8008be0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d012      	beq.n	8008c0e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a0f      	ldr	r2, [pc, #60]	; (8008c2c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e00a      	b.n	8008c24 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008c1c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e000      	b.n	8008c24 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8008c22:	2302      	movs	r3, #2
  }
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3730      	adds	r7, #48	; 0x30
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	1fe00fff 	.word	0x1fe00fff

08008c30 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <HAL_SD_IRQHandler+0x2e>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 f98e 	bl	8009f78 <SD_Read_IT>
 8008c5c:	e199      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 80ae 	beq.w	8008dca <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	6812      	ldr	r2, [r2, #0]
 8008c82:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008c86:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008c8a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008caa:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d038      	beq.n	8008d28 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <HAL_SD_IRQHandler+0x9a>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d011      	beq.n	8008cee <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f002 fc20 	bl	800b514 <SDMMC_CmdStopTransfer>
 8008cd4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f957 	bl	8008f9c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a90      	ldr	r2, [pc, #576]	; (8008f34 <HAL_SD_IRQHandler+0x304>)
 8008cf4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <HAL_SD_IRQHandler+0xe8>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f004 fc2b 	bl	800d574 <HAL_SD_RxCpltCallback>
 8008d1e:	e138      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f004 fc1d 	bl	800d560 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8008d26:	e134      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 812f 	beq.w	8008f92 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2200      	movs	r2, #0
 8008d42:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d104      	bne.n	8008d60 <HAL_SD_IRQHandler+0x130>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f003 0320 	and.w	r3, r3, #32
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d011      	beq.n	8008d84 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f002 fbd5 	bl	800b514 <SDMMC_CmdStopTransfer>
 8008d6a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d008      	beq.n	8008d84 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f90c 	bl	8008f9c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f003 0310 	and.w	r3, r3, #16
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <HAL_SD_IRQHandler+0x176>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f003 0320 	and.w	r3, r3, #32
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f004 fbda 	bl	800d560 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <HAL_SD_IRQHandler+0x192>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80e8 	beq.w	8008f92 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f004 fbd6 	bl	800d574 <HAL_SD_RxCpltCallback>
}
 8008dc8:	e0e3      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d008      	beq.n	8008dea <HAL_SD_IRQHandler+0x1ba>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f003 0308 	and.w	r3, r3, #8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 f919 	bl	800a01a <SD_Write_IT>
 8008de8:	e0d3      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df0:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 809f 	beq.w	8008f38 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	f043 0202 	orr.w	r2, r3, #2
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	f003 0308 	and.w	r3, r3, #8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	f043 0208 	orr.w	r2, r3, #8
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d005      	beq.n	8008e48 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e40:	f043 0220 	orr.w	r2, r3, #32
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	f003 0310 	and.w	r3, r3, #16
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	f043 0210 	orr.w	r2, r3, #16
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a33      	ldr	r2, [pc, #204]	; (8008f34 <HAL_SD_IRQHandler+0x304>)
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008e78:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e88:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e98:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ea8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 fb30 	bl	800b514 <SDMMC_CmdStopTransfer>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ece:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f003 0308 	and.w	r3, r3, #8
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f852 	bl	8008f9c <HAL_SD_ErrorCallback>
}
 8008ef8:	e04b      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d046      	beq.n	8008f92 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d042      	beq.n	8008f92 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008f1a:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2200      	movs	r2, #0
 8008f22:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f835 	bl	8008f9c <HAL_SD_ErrorCallback>
}
 8008f32:	e02e      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
 8008f34:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d025      	beq.n	8008f92 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f56:	f003 0304 	and.w	r3, r3, #4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10c      	bne.n	8008f78 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f003 0320 	and.w	r3, r3, #32
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d003      	beq.n	8008f70 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 f8d4 	bl	800a116 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8008f6e:	e010      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f8bc 	bl	800a0ee <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8008f76:	e00c      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 f8bd 	bl	800a102 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8008f88:	e003      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 f8a5 	bl	800a0da <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8008f90:	e7ff      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
 8008f92:	bf00      	nop
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop

08008f9c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fbe:	0f9b      	lsrs	r3, r3, #30
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fca:	0e9b      	lsrs	r3, r3, #26
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 030f 	and.w	r3, r3, #15
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fdc:	0e1b      	lsrs	r3, r3, #24
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fee:	0c1b      	lsrs	r3, r3, #16
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ffa:	0a1b      	lsrs	r3, r3, #8
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009006:	b2da      	uxtb	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009010:	0d1b      	lsrs	r3, r3, #20
 8009012:	b29a      	uxth	r2, r3
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800901c:	0c1b      	lsrs	r3, r3, #16
 800901e:	b2db      	uxtb	r3, r3
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	b2da      	uxtb	r2, r3
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800902e:	0bdb      	lsrs	r3, r3, #15
 8009030:	b2db      	uxtb	r3, r3
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	b2da      	uxtb	r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009040:	0b9b      	lsrs	r3, r3, #14
 8009042:	b2db      	uxtb	r3, r3
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	b2da      	uxtb	r2, r3
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009052:	0b5b      	lsrs	r3, r3, #13
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009064:	0b1b      	lsrs	r3, r3, #12
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	b2da      	uxtb	r2, r3
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2200      	movs	r2, #0
 8009076:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d163      	bne.n	8009148 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009084:	009a      	lsls	r2, r3, #2
 8009086:	f640 73fc 	movw	r3, #4092	; 0xffc
 800908a:	4013      	ands	r3, r2
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009090:	0f92      	lsrs	r2, r2, #30
 8009092:	431a      	orrs	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800909c:	0edb      	lsrs	r3, r3, #27
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	f003 0307 	and.w	r3, r3, #7
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ae:	0e1b      	lsrs	r3, r3, #24
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090c0:	0d5b      	lsrs	r3, r3, #21
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090d2:	0c9b      	lsrs	r3, r3, #18
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090e4:	0bdb      	lsrs	r3, r3, #15
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 0307 	and.w	r3, r3, #7
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	1c5a      	adds	r2, r3, #1
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	7e1b      	ldrb	r3, [r3, #24]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	3302      	adds	r3, #2
 8009108:	2201      	movs	r2, #1
 800910a:	fa02 f303 	lsl.w	r3, r2, r3
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009112:	fb03 f202 	mul.w	r2, r3, r2
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	7a1b      	ldrb	r3, [r3, #8]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f003 030f 	and.w	r3, r3, #15
 8009124:	2201      	movs	r2, #1
 8009126:	409a      	lsls	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009134:	0a52      	lsrs	r2, r2, #9
 8009136:	fb03 f202 	mul.w	r2, r3, r2
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009144:	659a      	str	r2, [r3, #88]	; 0x58
 8009146:	e031      	b.n	80091ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914c:	2b01      	cmp	r3, #1
 800914e:	d11d      	bne.n	800918c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800915e:	0c1b      	lsrs	r3, r3, #16
 8009160:	431a      	orrs	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	3301      	adds	r3, #1
 800916c:	029a      	lsls	r2, r3, #10
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009180:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	659a      	str	r2, [r3, #88]	; 0x58
 800918a:	e00f      	b.n	80091ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a58      	ldr	r2, [pc, #352]	; (80092f4 <HAL_SD_GetCardCSD+0x344>)
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e09d      	b.n	80092e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091b0:	0b9b      	lsrs	r3, r3, #14
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091c2:	09db      	lsrs	r3, r3, #7
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e4:	0fdb      	lsrs	r3, r3, #31
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f0:	0f5b      	lsrs	r3, r3, #29
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	f003 0303 	and.w	r3, r3, #3
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009202:	0e9b      	lsrs	r3, r3, #26
 8009204:	b2db      	uxtb	r3, r3
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	b2da      	uxtb	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009214:	0d9b      	lsrs	r3, r3, #22
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f003 030f 	and.w	r3, r3, #15
 800921c:	b2da      	uxtb	r2, r3
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009226:	0d5b      	lsrs	r3, r3, #21
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009242:	0c1b      	lsrs	r3, r3, #16
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	b2da      	uxtb	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009256:	0bdb      	lsrs	r3, r3, #15
 8009258:	b2db      	uxtb	r3, r3
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	b2da      	uxtb	r2, r3
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800926a:	0b9b      	lsrs	r3, r3, #14
 800926c:	b2db      	uxtb	r3, r3
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	b2da      	uxtb	r2, r3
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800927e:	0b5b      	lsrs	r3, r3, #13
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	b2da      	uxtb	r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009292:	0b1b      	lsrs	r3, r3, #12
 8009294:	b2db      	uxtb	r3, r3
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	b2da      	uxtb	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a6:	0a9b      	lsrs	r3, r3, #10
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ba:	0a1b      	lsrs	r3, r3, #8
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ce:	085b      	lsrs	r3, r3, #1
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	1fe00fff 	.word	0x1fe00fff

080092f8 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b094      	sub	sp, #80	; 0x50
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fbd4 	bl	8009abc <SD_SendSDStatus>
 8009314:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009318:	2b00      	cmp	r3, #0
 800931a:	d011      	beq.n	8009340 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a4f      	ldr	r2, [pc, #316]	; (8009460 <HAL_SD_GetCardStatus+0x168>)
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800933e:	e070      	b.n	8009422 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	099b      	lsrs	r3, r3, #6
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	b2da      	uxtb	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	095b      	lsrs	r3, r3, #5
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	b2da      	uxtb	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	b29b      	uxth	r3, r3
 8009366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800936a:	b29a      	uxth	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	0e1b      	lsrs	r3, r3, #24
 8009370:	b29b      	uxth	r3, r3
 8009372:	4313      	orrs	r3, r2
 8009374:	b29a      	uxth	r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	061a      	lsls	r2, r3, #24
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	021b      	lsls	r3, r3, #8
 8009382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009386:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	0a1b      	lsrs	r3, r3, #8
 800938c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009390:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	0e1b      	lsrs	r3, r3, #24
 8009396:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	0a1b      	lsrs	r3, r3, #8
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	0d1b      	lsrs	r3, r3, #20
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 030f 	and.w	r3, r3, #15
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	0c1b      	lsrs	r3, r3, #16
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	4313      	orrs	r3, r2
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	0a9b      	lsrs	r3, r3, #10
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	0a1b      	lsrs	r3, r3, #8
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	091b      	lsrs	r3, r3, #4
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	b2da      	uxtb	r2, r3
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 030f 	and.w	r3, r3, #15
 8009412:	b2da      	uxtb	r2, r3
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	0e1b      	lsrs	r3, r3, #24
 800941c:	b2da      	uxtb	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800942a:	4618      	mov	r0, r3
 800942c:	f001 ffc2 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8009430:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00d      	beq.n	8009454 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a08      	ldr	r2, [pc, #32]	; (8009460 <HAL_SD_GetCardStatus+0x168>)
 800943e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009444:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009454:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009458:	4618      	mov	r0, r3
 800945a:	3750      	adds	r7, #80	; 0x50
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	1fe00fff 	.word	0x1fe00fff

08009464 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80094bc:	b5b0      	push	{r4, r5, r7, lr}
 80094be:	b090      	sub	sp, #64	; 0x40
 80094c0:	af04      	add	r7, sp, #16
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2203      	movs	r2, #3
 80094d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d02e      	beq.n	800953a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e2:	d106      	bne.n	80094f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38
 80094f0:	e029      	b.n	8009546 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094f8:	d10a      	bne.n	8009510 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fbd6 	bl	8009cac <SD_WideBus_Enable>
 8009500:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
 800950e:	e01a      	b.n	8009546 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fc13 	bl	8009d42 <SD_WideBus_Disable>
 800951c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	639a      	str	r2, [r3, #56]	; 0x38
 800952a:	e00c      	b.n	8009546 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009530:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	639a      	str	r2, [r3, #56]	; 0x38
 8009538:	e005      	b.n	8009546 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a60      	ldr	r2, [pc, #384]	; (80096d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800955c:	e097      	b.n	800968e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800955e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009562:	f7fd fc7d 	bl	8006e60 <HAL_RCCEx_GetPeriphCLKFreq>
 8009566:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8086 	beq.w	800967c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	695a      	ldr	r2, [r3, #20]
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	4952      	ldr	r1, [pc, #328]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800958e:	fba1 1303 	umull	r1, r3, r1, r3
 8009592:	0e1b      	lsrs	r3, r3, #24
 8009594:	429a      	cmp	r2, r3
 8009596:	d303      	bcc.n	80095a0 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	e05a      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095a8:	d103      	bne.n	80095b2 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e051      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ba:	d126      	bne.n	800960a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10e      	bne.n	80095e2 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	4a45      	ldr	r2, [pc, #276]	; (80096dc <HAL_SD_ConfigWideBusOperation+0x220>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d906      	bls.n	80095da <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	4a42      	ldr	r2, [pc, #264]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80095d0:	fba2 2303 	umull	r2, r3, r2, r3
 80095d4:	0e5b      	lsrs	r3, r3, #25
 80095d6:	61fb      	str	r3, [r7, #28]
 80095d8:	e03d      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	61fb      	str	r3, [r7, #28]
 80095e0:	e039      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ee:	4a3b      	ldr	r2, [pc, #236]	; (80096dc <HAL_SD_ConfigWideBusOperation+0x220>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d906      	bls.n	8009602 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	4a38      	ldr	r2, [pc, #224]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80095f8:	fba2 2303 	umull	r2, r3, r2, r3
 80095fc:	0e5b      	lsrs	r3, r3, #25
 80095fe:	61fb      	str	r3, [r7, #28]
 8009600:	e029      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	e025      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10e      	bne.n	8009630 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	4a32      	ldr	r2, [pc, #200]	; (80096e0 <HAL_SD_ConfigWideBusOperation+0x224>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d906      	bls.n	8009628 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	4a2e      	ldr	r2, [pc, #184]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800961e:	fba2 2303 	umull	r2, r3, r2, r3
 8009622:	0e1b      	lsrs	r3, r3, #24
 8009624:	61fb      	str	r3, [r7, #28]
 8009626:	e016      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	61fb      	str	r3, [r7, #28]
 800962e:	e012      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009638:	fbb2 f3f3 	udiv	r3, r2, r3
 800963c:	4a28      	ldr	r2, [pc, #160]	; (80096e0 <HAL_SD_ConfigWideBusOperation+0x224>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d906      	bls.n	8009650 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	4a24      	ldr	r2, [pc, #144]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	0e1b      	lsrs	r3, r3, #24
 800964c:	61fb      	str	r3, [r7, #28]
 800964e:	e002      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681d      	ldr	r5, [r3, #0]
 8009660:	466c      	mov	r4, sp
 8009662:	f107 0318 	add.w	r3, r7, #24
 8009666:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800966a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800966e:	f107 030c 	add.w	r3, r7, #12
 8009672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009674:	4628      	mov	r0, r5
 8009676:	f001 fdbf 	bl	800b1f8 <SDMMC_Init>
 800967a:	e008      	b.n	800968e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009680:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009696:	4618      	mov	r0, r3
 8009698:	f001 fe8c 	bl	800b3b4 <SDMMC_CmdBlockLength>
 800969c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00c      	beq.n	80096be <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a0a      	ldr	r2, [pc, #40]	; (80096d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80096aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80096c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3730      	adds	r7, #48	; 0x30
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bdb0      	pop	{r4, r5, r7, pc}
 80096d2:	bf00      	nop
 80096d4:	1fe00fff 	.word	0x1fe00fff
 80096d8:	55e63b89 	.word	0x55e63b89
 80096dc:	02faf080 	.word	0x02faf080
 80096e0:	017d7840 	.word	0x017d7840

080096e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80096f0:	f107 030c 	add.w	r3, r7, #12
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fab0 	bl	8009c5c <SD_SendStatus>
 80096fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d005      	beq.n	8009710 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	431a      	orrs	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	0a5b      	lsrs	r3, r3, #9
 8009714:	f003 030f 	and.w	r3, r3, #15
 8009718:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800971a:	693b      	ldr	r3, [r7, #16]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009724:	b5b0      	push	{r4, r5, r7, lr}
 8009726:	b090      	sub	sp, #64	; 0x40
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800972c:	2301      	movs	r3, #1
 800972e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4618      	mov	r0, r3
 8009736:	f001 fdb9 	bl	800b2ac <SDMMC_GetPowerState>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009740:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009744:	e0a9      	b.n	800989a <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974a:	2b03      	cmp	r3, #3
 800974c:	d02e      	beq.n	80097ac <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f001 fffe 	bl	800b754 <SDMMC_CmdSendCID>
 8009758:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800975a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <SD_InitCard+0x40>
    {
      return errorstate;
 8009760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009762:	e09a      	b.n	800989a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2100      	movs	r1, #0
 800976a:	4618      	mov	r0, r3
 800976c:	f001 fde3 	bl	800b336 <SDMMC_GetResponse>
 8009770:	4602      	mov	r2, r0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2104      	movs	r1, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f001 fdda 	bl	800b336 <SDMMC_GetResponse>
 8009782:	4602      	mov	r2, r0
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2108      	movs	r1, #8
 800978e:	4618      	mov	r0, r3
 8009790:	f001 fdd1 	bl	800b336 <SDMMC_GetResponse>
 8009794:	4602      	mov	r2, r0
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	210c      	movs	r1, #12
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 fdc8 	bl	800b336 <SDMMC_GetResponse>
 80097a6:	4602      	mov	r2, r0
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d00d      	beq.n	80097d0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f107 020e 	add.w	r2, r7, #14
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f002 f807 	bl	800b7d2 <SDMMC_CmdSetRelAdd>
 80097c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <SD_InitCard+0xac>
    {
      return errorstate;
 80097cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ce:	e064      	b.n	800989a <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d036      	beq.n	8009846 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80097d8:	89fb      	ldrh	r3, [r7, #14]
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e8:	041b      	lsls	r3, r3, #16
 80097ea:	4619      	mov	r1, r3
 80097ec:	4610      	mov	r0, r2
 80097ee:	f001 ffd0 	bl	800b792 <SDMMC_CmdSendCSD>
 80097f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <SD_InitCard+0xda>
    {
      return errorstate;
 80097fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097fc:	e04d      	b.n	800989a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2100      	movs	r1, #0
 8009804:	4618      	mov	r0, r3
 8009806:	f001 fd96 	bl	800b336 <SDMMC_GetResponse>
 800980a:	4602      	mov	r2, r0
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2104      	movs	r1, #4
 8009816:	4618      	mov	r0, r3
 8009818:	f001 fd8d 	bl	800b336 <SDMMC_GetResponse>
 800981c:	4602      	mov	r2, r0
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2108      	movs	r1, #8
 8009828:	4618      	mov	r0, r3
 800982a:	f001 fd84 	bl	800b336 <SDMMC_GetResponse>
 800982e:	4602      	mov	r2, r0
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	210c      	movs	r1, #12
 800983a:	4618      	mov	r0, r3
 800983c:	f001 fd7b 	bl	800b336 <SDMMC_GetResponse>
 8009840:	4602      	mov	r2, r0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2104      	movs	r1, #4
 800984c:	4618      	mov	r0, r3
 800984e:	f001 fd72 	bl	800b336 <SDMMC_GetResponse>
 8009852:	4603      	mov	r3, r0
 8009854:	0d1a      	lsrs	r2, r3, #20
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800985a:	f107 0310 	add.w	r3, r7, #16
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff fba5 	bl	8008fb0 <HAL_SD_GetCardCSD>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800986c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009870:	e013      	b.n	800989a <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6819      	ldr	r1, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800987a:	041b      	lsls	r3, r3, #16
 800987c:	2200      	movs	r2, #0
 800987e:	461c      	mov	r4, r3
 8009880:	4615      	mov	r5, r2
 8009882:	4622      	mov	r2, r4
 8009884:	462b      	mov	r3, r5
 8009886:	4608      	mov	r0, r1
 8009888:	f001 fe7a 	bl	800b580 <SDMMC_CmdSelDesel>
 800988c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800988e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <SD_InitCard+0x174>
  {
    return errorstate;
 8009894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009896:	e000      	b.n	800989a <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3740      	adds	r7, #64	; 0x40
 800989e:	46bd      	mov	sp, r7
 80098a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080098a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61fb      	str	r3, [r7, #28]
 80098b4:	2300      	movs	r3, #0
 80098b6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80098b8:	f7f8 fdd8 	bl	800246c <HAL_GetTick>
 80098bc:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f001 fe80 	bl	800b5c8 <SDMMC_CmdGoIdleState>
 80098c8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <SD_PowerON+0x30>
  {
    return errorstate;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	e0ed      	b.n	8009ab0 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 fe93 	bl	800b604 <SDMMC_CmdOperCond>
 80098de:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00d      	beq.n	8009902 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fe69 	bl	800b5c8 <SDMMC_CmdGoIdleState>
 80098f6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <SD_PowerON+0x64>
    {
      return errorstate;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	e0d6      	b.n	8009ab0 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990c:	2b01      	cmp	r3, #1
 800990e:	d137      	bne.n	8009980 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2100      	movs	r1, #0
 8009916:	4618      	mov	r0, r3
 8009918:	f001 fe94 	bl	800b644 <SDMMC_CmdAppCommand>
 800991c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02d      	beq.n	8009980 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009924:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009928:	e0c2      	b.n	8009ab0 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2100      	movs	r1, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f001 fe87 	bl	800b644 <SDMMC_CmdAppCommand>
 8009936:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <SD_PowerON+0x9e>
    {
      return errorstate;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	e0b6      	b.n	8009ab0 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	495c      	ldr	r1, [pc, #368]	; (8009ab8 <SD_PowerON+0x214>)
 8009948:	4618      	mov	r0, r3
 800994a:	f001 fe9e 	bl	800b68a <SDMMC_CmdAppOperCommand>
 800994e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800995a:	e0a9      	b.n	8009ab0 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2100      	movs	r1, #0
 8009962:	4618      	mov	r0, r3
 8009964:	f001 fce7 	bl	800b336 <SDMMC_GetResponse>
 8009968:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	0fdb      	lsrs	r3, r3, #31
 800996e:	2b01      	cmp	r3, #1
 8009970:	d101      	bne.n	8009976 <SD_PowerON+0xd2>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <SD_PowerON+0xd4>
 8009976:	2300      	movs	r3, #0
 8009978:	61bb      	str	r3, [r7, #24]

    count++;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3301      	adds	r3, #1
 800997e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009986:	4293      	cmp	r3, r2
 8009988:	d802      	bhi.n	8009990 <SD_PowerON+0xec>
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d0cc      	beq.n	800992a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009996:	4293      	cmp	r3, r2
 8009998:	d902      	bls.n	80099a0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800999a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800999e:	e087      	b.n	8009ab0 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d07e      	beq.n	8009aa8 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d17a      	bne.n	8009aae <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d075      	beq.n	8009aae <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099c8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0208 	orr.w	r2, r2, #8
 80099d8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 ff5e 	bl	800b8a0 <SDMMC_CmdVoltageSwitch>
 80099e4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00c      	beq.n	8009a06 <SD_PowerON+0x162>
        {
          return errorstate;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	e05f      	b.n	8009ab0 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80099f0:	f7f8 fd3c 	bl	800246c <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fe:	d102      	bne.n	8009a06 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009a00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a04:	e054      	b.n	8009ab0 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a14:	d1ec      	bne.n	80099f0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a2e:	d002      	beq.n	8009a36 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009a30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a34:	e03c      	b.n	8009ab0 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8009a36:	2001      	movs	r0, #1
 8009a38:	f000 fb44 	bl	800a0c4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0204 	orr.w	r2, r2, #4
 8009a4a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009a4c:	e00a      	b.n	8009a64 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a4e:	f7f8 fd0d 	bl	800246c <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5c:	d102      	bne.n	8009a64 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009a5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a62:	e025      	b.n	8009ab0 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a72:	d1ec      	bne.n	8009a4e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a8c:	d102      	bne.n	8009a94 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a92:	e00d      	b.n	8009ab0 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2213      	movs	r2, #19
 8009a9a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8009aa6:	e002      	b.n	8009aae <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3720      	adds	r7, #32
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	c1100000 	.word	0xc1100000

08009abc <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08c      	sub	sp, #48	; 0x30
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ac6:	f7f8 fcd1 	bl	800246c <HAL_GetTick>
 8009aca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 fc2d 	bl	800b336 <SDMMC_GetResponse>
 8009adc:	4603      	mov	r3, r0
 8009ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ae6:	d102      	bne.n	8009aee <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009aec:	e0b0      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2140      	movs	r1, #64	; 0x40
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 fc5d 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8009afa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d005      	beq.n	8009b0e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	e0a0      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b16:	041b      	lsls	r3, r3, #16
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	f001 fd92 	bl	800b644 <SDMMC_CmdAppCommand>
 8009b20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	e08d      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b34:	f04f 33ff 	mov.w	r3, #4294967295
 8009b38:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009b3a:	2340      	movs	r3, #64	; 0x40
 8009b3c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009b3e:	2360      	movs	r3, #96	; 0x60
 8009b40:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009b42:	2302      	movs	r3, #2
 8009b44:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f107 0208 	add.w	r2, r7, #8
 8009b56:	4611      	mov	r1, r2
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f001 fbff 	bl	800b35c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 fe7a 	bl	800b85c <SDMMC_CmdStatusRegister>
 8009b68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d02b      	beq.n	8009bc8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	e069      	b.n	8009c50 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d013      	beq.n	8009bb2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b8e:	e00d      	b.n	8009bac <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 fb59 	bl	800b24c <SDMMC_ReadFIFO>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	601a      	str	r2, [r3, #0]
        pData++;
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba8:	3301      	adds	r3, #1
 8009baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	2b07      	cmp	r3, #7
 8009bb0:	d9ee      	bls.n	8009b90 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009bb2:	f7f8 fc5b 	bl	800246c <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc0:	d102      	bne.n	8009bc8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009bc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bc6:	e043      	b.n	8009c50 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0d2      	beq.n	8009b7c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009be4:	2308      	movs	r3, #8
 8009be6:	e033      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	e02a      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c00:	f003 0320 	and.w	r3, r3, #32
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d017      	beq.n	8009c38 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009c08:	2320      	movs	r3, #32
 8009c0a:	e021      	b.n	8009c50 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f001 fb1b 	bl	800b24c <SDMMC_ReadFIFO>
 8009c16:	4602      	mov	r2, r0
 8009c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1a:	601a      	str	r2, [r3, #0]
    pData++;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	3304      	adds	r3, #4
 8009c20:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c22:	f7f8 fc23 	bl	800246c <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c30:	d102      	bne.n	8009c38 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c36:	e00b      	b.n	8009c50 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e2      	bne.n	8009c0c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a03      	ldr	r2, [pc, #12]	; (8009c58 <SD_SendSDStatus+0x19c>)
 8009c4c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3730      	adds	r7, #48	; 0x30
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	18000f3a 	.word	0x18000f3a

08009c5c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c70:	e018      	b.n	8009ca4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4610      	mov	r0, r2
 8009c80:	f001 fdc9 	bl	800b816 <SDMMC_CmdSendStatus>
 8009c84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	e009      	b.n	8009ca4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fb4d 	bl	800b336 <SDMMC_GetResponse>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f001 fb37 	bl	800b336 <SDMMC_GetResponse>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cd2:	d102      	bne.n	8009cda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cd8:	e02f      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009cda:	f107 030c 	add.w	r3, r7, #12
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f879 	bl	8009dd8 <SD_FindSCR>
 8009ce6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	e023      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01c      	beq.n	8009d36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d04:	041b      	lsls	r3, r3, #16
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f001 fc9b 	bl	800b644 <SDMMC_CmdAppCommand>
 8009d0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	e00f      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2102      	movs	r1, #2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f001 fcd2 	bl	800b6ca <SDMMC_CmdBusWidth>
 8009d26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	e003      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e001      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b086      	sub	sp, #24
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2100      	movs	r1, #0
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 faec 	bl	800b336 <SDMMC_GetResponse>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d68:	d102      	bne.n	8009d70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d6e:	e02f      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d70:	f107 030c 	add.w	r3, r7, #12
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f82e 	bl	8009dd8 <SD_FindSCR>
 8009d7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	e023      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d01c      	beq.n	8009dcc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f001 fc50 	bl	800b644 <SDMMC_CmdAppCommand>
 8009da4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	e00f      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 fc87 	bl	800b6ca <SDMMC_CmdBusWidth>
 8009dbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	e003      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	e001      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08e      	sub	sp, #56	; 0x38
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009de2:	f7f8 fb43 	bl	800246c <HAL_GetTick>
 8009de6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009dec:	2300      	movs	r3, #0
 8009dee:	60bb      	str	r3, [r7, #8]
 8009df0:	2300      	movs	r3, #0
 8009df2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2108      	movs	r1, #8
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f001 fad8 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8009e04:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	e0ad      	b.n	8009f6c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e18:	041b      	lsls	r3, r3, #16
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f001 fc11 	bl	800b644 <SDMMC_CmdAppCommand>
 8009e22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <SD_FindSCR+0x56>
  {
    return errorstate;
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	e09e      	b.n	8009f6c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e32:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009e34:	2308      	movs	r3, #8
 8009e36:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009e38:	2330      	movs	r3, #48	; 0x30
 8009e3a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e44:	2301      	movs	r3, #1
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f107 0210 	add.w	r2, r7, #16
 8009e50:	4611      	mov	r1, r2
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fa82 	bl	800b35c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 fc57 	bl	800b710 <SDMMC_CmdSendSCR>
 8009e62:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d027      	beq.n	8009eba <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	e07e      	b.n	8009f6c <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d113      	bne.n	8009ea4 <SD_FindSCR+0xcc>
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d110      	bne.n	8009ea4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f001 f9e0 	bl	800b24c <SDMMC_ReadFIFO>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 f9d9 	bl	800b24c <SDMMC_ReadFIFO>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	60fb      	str	r3, [r7, #12]
      index++;
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ea4:	f7f8 fae2 	bl	800246c <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb2:	d102      	bne.n	8009eba <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009eb8:	e058      	b.n	8009f6c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec0:	f240 532a 	movw	r3, #1322	; 0x52a
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0d1      	beq.n	8009e6e <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed0:	f003 0308 	and.w	r3, r3, #8
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d005      	beq.n	8009ee4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2208      	movs	r2, #8
 8009ede:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	e043      	b.n	8009f6c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eea:	f003 0302 	and.w	r3, r3, #2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d005      	beq.n	8009efe <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009efa:	2302      	movs	r3, #2
 8009efc:	e036      	b.n	8009f6c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d005      	beq.n	8009f18 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2220      	movs	r2, #32
 8009f12:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009f14:	2320      	movs	r3, #32
 8009f16:	e029      	b.n	8009f6c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a15      	ldr	r2, [pc, #84]	; (8009f74 <SD_FindSCR+0x19c>)
 8009f1e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	061a      	lsls	r2, r3, #24
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f2c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	0a1b      	lsrs	r3, r3, #8
 8009f32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009f36:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	0e1b      	lsrs	r3, r3, #24
 8009f3c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f40:	601a      	str	r2, [r3, #0]
    scr++;
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	3304      	adds	r3, #4
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	061a      	lsls	r2, r3, #24
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	021b      	lsls	r3, r3, #8
 8009f50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f54:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f5e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	0e1b      	lsrs	r3, r3, #24
 8009f64:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f68:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3738      	adds	r7, #56	; 0x38
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	18000f3a 	.word	0x18000f3a

08009f78 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f84:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d03f      	beq.n	800a012 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009f92:	2300      	movs	r3, #0
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	e033      	b.n	800a000 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f001 f955 	bl	800b24c <SDMMC_ReadFIFO>
 8009fa2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	0a1b      	lsrs	r3, r3, #8
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	0c1b      	lsrs	r3, r3, #16
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	0e1b      	lsrs	r3, r3, #24
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b07      	cmp	r3, #7
 800a004:	d9c8      	bls.n	8009f98 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a012:	bf00      	nop
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b086      	sub	sp, #24
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d043      	beq.n	800a0bc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	e037      	b.n	800a0aa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3301      	adds	r3, #1
 800a044:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	3b01      	subs	r3, #1
 800a04a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	021a      	lsls	r2, r3, #8
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	4313      	orrs	r3, r2
 800a056:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3301      	adds	r3, #1
 800a05c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	3b01      	subs	r3, #1
 800a062:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	041a      	lsls	r2, r3, #16
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3301      	adds	r3, #1
 800a074:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	3b01      	subs	r3, #1
 800a07a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	061a      	lsls	r2, r3, #24
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	4313      	orrs	r3, r2
 800a086:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3301      	adds	r3, #1
 800a08c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	3b01      	subs	r3, #1
 800a092:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f107 0208 	add.w	r2, r7, #8
 800a09c:	4611      	mov	r1, r2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f001 f8e1 	bl	800b266 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	617b      	str	r3, [r7, #20]
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b07      	cmp	r3, #7
 800a0ae:	d9c4      	bls.n	800a03a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a0bc:	bf00      	nop
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800a0ce:	bf00      	nop
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800a0f6:	bf00      	nop
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a10a:	bf00      	nop
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d101      	bne.n	800a13c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e095      	b.n	800a268 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b00      	cmp	r3, #0
 800a142:	d108      	bne.n	800a156 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a14c:	d009      	beq.n	800a162 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	61da      	str	r2, [r3, #28]
 800a154:	e005      	b.n	800a162 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d106      	bne.n	800a182 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7f7 ff15 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a198:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1a2:	d902      	bls.n	800a1aa <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e002      	b.n	800a1b0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a1b8:	d007      	beq.n	800a1ca <HAL_SPI_Init+0xa0>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1c2:	d002      	beq.n	800a1ca <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	f003 0302 	and.w	r3, r3, #2
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	431a      	orrs	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1f8:	431a      	orrs	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a202:	431a      	orrs	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a20c:	ea42 0103 	orr.w	r1, r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	430a      	orrs	r2, r1
 800a21e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	0c1b      	lsrs	r3, r3, #16
 800a226:	f003 0204 	and.w	r2, r3, #4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	f003 0310 	and.w	r3, r3, #16
 800a232:	431a      	orrs	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a238:	f003 0308 	and.w	r3, r3, #8
 800a23c:	431a      	orrs	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a246:	ea42 0103 	orr.w	r1, r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08a      	sub	sp, #40	; 0x28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a27e:	2301      	movs	r3, #1
 800a280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d101      	bne.n	800a296 <HAL_SPI_TransmitReceive+0x26>
 800a292:	2302      	movs	r3, #2
 800a294:	e1fb      	b.n	800a68e <HAL_SPI_TransmitReceive+0x41e>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a29e:	f7f8 f8e5 	bl	800246c <HAL_GetTick>
 800a2a2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2aa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a2b2:	887b      	ldrh	r3, [r7, #2]
 800a2b4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a2b6:	887b      	ldrh	r3, [r7, #2]
 800a2b8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2ba:	7efb      	ldrb	r3, [r7, #27]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d00e      	beq.n	800a2de <HAL_SPI_TransmitReceive+0x6e>
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2c6:	d106      	bne.n	800a2d6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <HAL_SPI_TransmitReceive+0x66>
 800a2d0:	7efb      	ldrb	r3, [r7, #27]
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d003      	beq.n	800a2de <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a2dc:	e1cd      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d005      	beq.n	800a2f0 <HAL_SPI_TransmitReceive+0x80>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <HAL_SPI_TransmitReceive+0x80>
 800a2ea:	887b      	ldrh	r3, [r7, #2]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d103      	bne.n	800a2f8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a2f6:	e1c0      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b04      	cmp	r3, #4
 800a302:	d003      	beq.n	800a30c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2205      	movs	r2, #5
 800a308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	887a      	ldrh	r2, [r7, #2]
 800a31c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	887a      	ldrh	r2, [r7, #2]
 800a324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	887a      	ldrh	r2, [r7, #2]
 800a332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	887a      	ldrh	r2, [r7, #2]
 800a338:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a34e:	d802      	bhi.n	800a356 <HAL_SPI_TransmitReceive+0xe6>
 800a350:	8a3b      	ldrh	r3, [r7, #16]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d908      	bls.n	800a368 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a364:	605a      	str	r2, [r3, #4]
 800a366:	e007      	b.n	800a378 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a376:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a382:	2b40      	cmp	r3, #64	; 0x40
 800a384:	d007      	beq.n	800a396 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a39e:	d97c      	bls.n	800a49a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <HAL_SPI_TransmitReceive+0x13e>
 800a3a8:	8a7b      	ldrh	r3, [r7, #18]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d169      	bne.n	800a482 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b2:	881a      	ldrh	r2, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	1c9a      	adds	r2, r3, #2
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3d2:	e056      	b.n	800a482 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d11b      	bne.n	800a41a <HAL_SPI_TransmitReceive+0x1aa>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d016      	beq.n	800a41a <HAL_SPI_TransmitReceive+0x1aa>
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d113      	bne.n	800a41a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f6:	881a      	ldrh	r2, [r3, #0]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a402:	1c9a      	adds	r2, r3, #2
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	3b01      	subs	r3, #1
 800a410:	b29a      	uxth	r2, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b01      	cmp	r3, #1
 800a426:	d11c      	bne.n	800a462 <HAL_SPI_TransmitReceive+0x1f2>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a42e:	b29b      	uxth	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d016      	beq.n	800a462 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	b292      	uxth	r2, r2
 800a440:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	1c9a      	adds	r2, r3, #2
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a452:	b29b      	uxth	r3, r3
 800a454:	3b01      	subs	r3, #1
 800a456:	b29a      	uxth	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a45e:	2301      	movs	r3, #1
 800a460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a462:	f7f8 f803 	bl	800246c <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a46e:	429a      	cmp	r2, r3
 800a470:	d807      	bhi.n	800a482 <HAL_SPI_TransmitReceive+0x212>
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a478:	d003      	beq.n	800a482 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a480:	e0fb      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a486:	b29b      	uxth	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1a3      	bne.n	800a3d4 <HAL_SPI_TransmitReceive+0x164>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a492:	b29b      	uxth	r3, r3
 800a494:	2b00      	cmp	r3, #0
 800a496:	d19d      	bne.n	800a3d4 <HAL_SPI_TransmitReceive+0x164>
 800a498:	e0df      	b.n	800a65a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_SPI_TransmitReceive+0x23a>
 800a4a2:	8a7b      	ldrh	r3, [r7, #18]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	f040 80cb 	bne.w	800a640 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d912      	bls.n	800a4da <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b8:	881a      	ldrh	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	1c9a      	adds	r2, r3, #2
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	3b02      	subs	r3, #2
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a4d8:	e0b2      	b.n	800a640 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	7812      	ldrb	r2, [r2, #0]
 800a4e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a500:	e09e      	b.n	800a640 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d134      	bne.n	800a57a <HAL_SPI_TransmitReceive+0x30a>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a514:	b29b      	uxth	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d02f      	beq.n	800a57a <HAL_SPI_TransmitReceive+0x30a>
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d12c      	bne.n	800a57a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a524:	b29b      	uxth	r3, r3
 800a526:	2b01      	cmp	r3, #1
 800a528:	d912      	bls.n	800a550 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52e:	881a      	ldrh	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53a:	1c9a      	adds	r2, r3, #2
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a544:	b29b      	uxth	r3, r3
 800a546:	3b02      	subs	r3, #2
 800a548:	b29a      	uxth	r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a54e:	e012      	b.n	800a576 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	330c      	adds	r3, #12
 800a55a:	7812      	ldrb	r2, [r2, #0]
 800a55c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	3b01      	subs	r3, #1
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a576:	2300      	movs	r3, #0
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b01      	cmp	r3, #1
 800a586:	d148      	bne.n	800a61a <HAL_SPI_TransmitReceive+0x3aa>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a58e:	b29b      	uxth	r3, r3
 800a590:	2b00      	cmp	r3, #0
 800a592:	d042      	beq.n	800a61a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d923      	bls.n	800a5e8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5aa:	b292      	uxth	r2, r2
 800a5ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	1c9a      	adds	r2, r3, #2
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	3b02      	subs	r3, #2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d81f      	bhi.n	800a616 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a5e4:	605a      	str	r2, [r3, #4]
 800a5e6:	e016      	b.n	800a616 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f103 020c 	add.w	r2, r3, #12
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	7812      	ldrb	r2, [r2, #0]
 800a5f6:	b2d2      	uxtb	r2, r2
 800a5f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a616:	2301      	movs	r3, #1
 800a618:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a61a:	f7f7 ff27 	bl	800246c <HAL_GetTick>
 800a61e:	4602      	mov	r2, r0
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a626:	429a      	cmp	r2, r3
 800a628:	d803      	bhi.n	800a632 <HAL_SPI_TransmitReceive+0x3c2>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a630:	d102      	bne.n	800a638 <HAL_SPI_TransmitReceive+0x3c8>
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	2b00      	cmp	r3, #0
 800a636:	d103      	bne.n	800a640 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a63e:	e01c      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a644:	b29b      	uxth	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	f47f af5b 	bne.w	800a502 <HAL_SPI_TransmitReceive+0x292>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a652:	b29b      	uxth	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	f47f af54 	bne.w	800a502 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 f938 	bl	800a8d4 <SPI_EndRxTxTransaction>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d006      	beq.n	800a678 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2220      	movs	r2, #32
 800a674:	661a      	str	r2, [r3, #96]	; 0x60
 800a676:	e000      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a678:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a68a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3728      	adds	r7, #40	; 0x28
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b088      	sub	sp, #32
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a6a8:	f7f7 fee0 	bl	800246c <HAL_GetTick>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	1a9b      	subs	r3, r3, r2
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a6b8:	f7f7 fed8 	bl	800246c <HAL_GetTick>
 800a6bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a6be:	4b39      	ldr	r3, [pc, #228]	; (800a7a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	015b      	lsls	r3, r3, #5
 800a6c4:	0d1b      	lsrs	r3, r3, #20
 800a6c6:	69fa      	ldr	r2, [r7, #28]
 800a6c8:	fb02 f303 	mul.w	r3, r2, r3
 800a6cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6ce:	e054      	b.n	800a77a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d6:	d050      	beq.n	800a77a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6d8:	f7f7 fec8 	bl	800246c <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d902      	bls.n	800a6ee <SPI_WaitFlagStateUntilTimeout+0x56>
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d13d      	bne.n	800a76a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a6fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a706:	d111      	bne.n	800a72c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a710:	d004      	beq.n	800a71c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a71a:	d107      	bne.n	800a72c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a72a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a734:	d10f      	bne.n	800a756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e017      	b.n	800a79a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a770:	2300      	movs	r3, #0
 800a772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	3b01      	subs	r3, #1
 800a778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4013      	ands	r3, r2
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	429a      	cmp	r2, r3
 800a788:	bf0c      	ite	eq
 800a78a:	2301      	moveq	r3, #1
 800a78c:	2300      	movne	r3, #0
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	461a      	mov	r2, r3
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	429a      	cmp	r2, r3
 800a796:	d19b      	bne.n	800a6d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3720      	adds	r7, #32
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20000000 	.word	0x20000000

0800a7a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08a      	sub	sp, #40	; 0x28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a7ba:	f7f7 fe57 	bl	800246c <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	1a9b      	subs	r3, r3, r2
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a7ca:	f7f7 fe4f 	bl	800246c <HAL_GetTick>
 800a7ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a7d8:	4b3d      	ldr	r3, [pc, #244]	; (800a8d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	00da      	lsls	r2, r3, #3
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	0d1b      	lsrs	r3, r3, #20
 800a7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ea:	fb02 f303 	mul.w	r3, r2, r3
 800a7ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a7f0:	e060      	b.n	800a8b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a7f8:	d107      	bne.n	800a80a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d104      	bne.n	800a80a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a808:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a810:	d050      	beq.n	800a8b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a812:	f7f7 fe2b 	bl	800246c <HAL_GetTick>
 800a816:	4602      	mov	r2, r0
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a81e:	429a      	cmp	r2, r3
 800a820:	d902      	bls.n	800a828 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	2b00      	cmp	r3, #0
 800a826:	d13d      	bne.n	800a8a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a840:	d111      	bne.n	800a866 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a84a:	d004      	beq.n	800a856 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a854:	d107      	bne.n	800a866 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a864:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a86e:	d10f      	bne.n	800a890 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a88e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e010      	b.n	800a8c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689a      	ldr	r2, [r3, #8]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	4013      	ands	r3, r2
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d196      	bne.n	800a7f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3728      	adds	r7, #40	; 0x28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000000 	.word	0x20000000

0800a8d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af02      	add	r7, sp, #8
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff ff5b 	bl	800a7a8 <SPI_WaitFifoStateUntilTimeout>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d007      	beq.n	800a908 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8fc:	f043 0220 	orr.w	r2, r3, #32
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e027      	b.n	800a958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2200      	movs	r2, #0
 800a910:	2180      	movs	r1, #128	; 0x80
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f7ff fec0 	bl	800a698 <SPI_WaitFlagStateUntilTimeout>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d007      	beq.n	800a92e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a922:	f043 0220 	orr.w	r2, r3, #32
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e014      	b.n	800a958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2200      	movs	r2, #0
 800a936:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f7ff ff34 	bl	800a7a8 <SPI_WaitFifoStateUntilTimeout>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d007      	beq.n	800a956 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a94a:	f043 0220 	orr.w	r2, r3, #32
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e000      	b.n	800a958 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e049      	b.n	800aa06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d106      	bne.n	800a98c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7f7 fbf8 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3304      	adds	r3, #4
 800a99c:	4619      	mov	r1, r3
 800a99e:	4610      	mov	r0, r2
 800a9a0:	f000 fa50 	bl	800ae44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	f003 0302 	and.w	r3, r3, #2
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d122      	bne.n	800aa6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d11b      	bne.n	800aa6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f06f 0202 	mvn.w	r2, #2
 800aa3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	f003 0303 	and.w	r3, r3, #3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f9d8 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800aa56:	e005      	b.n	800aa64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f9ca 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f9db 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b04      	cmp	r3, #4
 800aa76:	d122      	bne.n	800aabe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f003 0304 	and.w	r3, r3, #4
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	d11b      	bne.n	800aabe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f06f 0204 	mvn.w	r2, #4
 800aa8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f9ae 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800aaaa:	e005      	b.n	800aab8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f9a0 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f9b1 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	f003 0308 	and.w	r3, r3, #8
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d122      	bne.n	800ab12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	f003 0308 	and.w	r3, r3, #8
 800aad6:	2b08      	cmp	r3, #8
 800aad8:	d11b      	bne.n	800ab12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f06f 0208 	mvn.w	r2, #8
 800aae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2204      	movs	r2, #4
 800aae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	f003 0303 	and.w	r3, r3, #3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f984 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800aafe:	e005      	b.n	800ab0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f976 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f987 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	f003 0310 	and.w	r3, r3, #16
 800ab1c:	2b10      	cmp	r3, #16
 800ab1e:	d122      	bne.n	800ab66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	f003 0310 	and.w	r3, r3, #16
 800ab2a:	2b10      	cmp	r3, #16
 800ab2c:	d11b      	bne.n	800ab66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f06f 0210 	mvn.w	r2, #16
 800ab36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2208      	movs	r2, #8
 800ab3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69db      	ldr	r3, [r3, #28]
 800ab44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d003      	beq.n	800ab54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f95a 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800ab52:	e005      	b.n	800ab60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f94c 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f95d 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d10e      	bne.n	800ab92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d107      	bne.n	800ab92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f06f 0201 	mvn.w	r2, #1
 800ab8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f926 	bl	800adde <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab9c:	2b80      	cmp	r3, #128	; 0x80
 800ab9e:	d10e      	bne.n	800abbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abaa:	2b80      	cmp	r3, #128	; 0x80
 800abac:	d107      	bne.n	800abbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fb09 	bl	800b1d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abcc:	d10e      	bne.n	800abec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd8:	2b80      	cmp	r3, #128	; 0x80
 800abda:	d107      	bne.n	800abec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800abe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fafc 	bl	800b1e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf6:	2b40      	cmp	r3, #64	; 0x40
 800abf8:	d10e      	bne.n	800ac18 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac04:	2b40      	cmp	r3, #64	; 0x40
 800ac06:	d107      	bne.n	800ac18 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f90b 	bl	800ae2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f003 0320 	and.w	r3, r3, #32
 800ac22:	2b20      	cmp	r3, #32
 800ac24:	d10e      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f003 0320 	and.w	r3, r3, #32
 800ac30:	2b20      	cmp	r3, #32
 800ac32:	d107      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f06f 0220 	mvn.w	r2, #32
 800ac3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fabc 	bl	800b1bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_TIM_ConfigClockSource+0x1c>
 800ac64:	2302      	movs	r3, #2
 800ac66:	e0b6      	b.n	800add6 <HAL_TIM_ConfigClockSource+0x18a>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aca4:	d03e      	beq.n	800ad24 <HAL_TIM_ConfigClockSource+0xd8>
 800aca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acaa:	f200 8087 	bhi.w	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb2:	f000 8086 	beq.w	800adc2 <HAL_TIM_ConfigClockSource+0x176>
 800acb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acba:	d87f      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acbc:	2b70      	cmp	r3, #112	; 0x70
 800acbe:	d01a      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0xaa>
 800acc0:	2b70      	cmp	r3, #112	; 0x70
 800acc2:	d87b      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acc4:	2b60      	cmp	r3, #96	; 0x60
 800acc6:	d050      	beq.n	800ad6a <HAL_TIM_ConfigClockSource+0x11e>
 800acc8:	2b60      	cmp	r3, #96	; 0x60
 800acca:	d877      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800accc:	2b50      	cmp	r3, #80	; 0x50
 800acce:	d03c      	beq.n	800ad4a <HAL_TIM_ConfigClockSource+0xfe>
 800acd0:	2b50      	cmp	r3, #80	; 0x50
 800acd2:	d873      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acd4:	2b40      	cmp	r3, #64	; 0x40
 800acd6:	d058      	beq.n	800ad8a <HAL_TIM_ConfigClockSource+0x13e>
 800acd8:	2b40      	cmp	r3, #64	; 0x40
 800acda:	d86f      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acdc:	2b30      	cmp	r3, #48	; 0x30
 800acde:	d064      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0x15e>
 800ace0:	2b30      	cmp	r3, #48	; 0x30
 800ace2:	d86b      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800ace4:	2b20      	cmp	r3, #32
 800ace6:	d060      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0x15e>
 800ace8:	2b20      	cmp	r3, #32
 800acea:	d867      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acec:	2b00      	cmp	r3, #0
 800acee:	d05c      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0x15e>
 800acf0:	2b10      	cmp	r3, #16
 800acf2:	d05a      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0x15e>
 800acf4:	e062      	b.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6899      	ldr	r1, [r3, #8]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f000 f9b1 	bl	800b06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	609a      	str	r2, [r3, #8]
      break;
 800ad22:	e04f      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6818      	ldr	r0, [r3, #0]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	6899      	ldr	r1, [r3, #8]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f000 f99a 	bl	800b06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	689a      	ldr	r2, [r3, #8]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad46:	609a      	str	r2, [r3, #8]
      break;
 800ad48:	e03c      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	6859      	ldr	r1, [r3, #4]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f000 f90e 	bl	800af78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2150      	movs	r1, #80	; 0x50
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 f967 	bl	800b036 <TIM_ITRx_SetConfig>
      break;
 800ad68:	e02c      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6818      	ldr	r0, [r3, #0]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	6859      	ldr	r1, [r3, #4]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	461a      	mov	r2, r3
 800ad78:	f000 f92d 	bl	800afd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2160      	movs	r1, #96	; 0x60
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 f957 	bl	800b036 <TIM_ITRx_SetConfig>
      break;
 800ad88:	e01c      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	6859      	ldr	r1, [r3, #4]
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	461a      	mov	r2, r3
 800ad98:	f000 f8ee 	bl	800af78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2140      	movs	r1, #64	; 0x40
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 f947 	bl	800b036 <TIM_ITRx_SetConfig>
      break;
 800ada8:	e00c      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4619      	mov	r1, r3
 800adb4:	4610      	mov	r0, r2
 800adb6:	f000 f93e 	bl	800b036 <TIM_ITRx_SetConfig>
      break;
 800adba:	e003      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	73fb      	strb	r3, [r7, #15]
      break;
 800adc0:	e000      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800adc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800add4:	7bfb      	ldrb	r3, [r7, #15]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adfa:	bf00      	nop
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae0e:	bf00      	nop
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae22:	bf00      	nop
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b083      	sub	sp, #12
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
	...

0800ae44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a40      	ldr	r2, [pc, #256]	; (800af58 <TIM_Base_SetConfig+0x114>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d013      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae62:	d00f      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a3d      	ldr	r2, [pc, #244]	; (800af5c <TIM_Base_SetConfig+0x118>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d00b      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a3c      	ldr	r2, [pc, #240]	; (800af60 <TIM_Base_SetConfig+0x11c>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d007      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a3b      	ldr	r2, [pc, #236]	; (800af64 <TIM_Base_SetConfig+0x120>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d003      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a3a      	ldr	r2, [pc, #232]	; (800af68 <TIM_Base_SetConfig+0x124>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d108      	bne.n	800ae96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a2f      	ldr	r2, [pc, #188]	; (800af58 <TIM_Base_SetConfig+0x114>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d01f      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea4:	d01b      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a2c      	ldr	r2, [pc, #176]	; (800af5c <TIM_Base_SetConfig+0x118>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d017      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a2b      	ldr	r2, [pc, #172]	; (800af60 <TIM_Base_SetConfig+0x11c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d013      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a2a      	ldr	r2, [pc, #168]	; (800af64 <TIM_Base_SetConfig+0x120>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d00f      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a29      	ldr	r2, [pc, #164]	; (800af68 <TIM_Base_SetConfig+0x124>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d00b      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a28      	ldr	r2, [pc, #160]	; (800af6c <TIM_Base_SetConfig+0x128>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d007      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a27      	ldr	r2, [pc, #156]	; (800af70 <TIM_Base_SetConfig+0x12c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d003      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a26      	ldr	r2, [pc, #152]	; (800af74 <TIM_Base_SetConfig+0x130>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d108      	bne.n	800aef0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	689a      	ldr	r2, [r3, #8]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a10      	ldr	r2, [pc, #64]	; (800af58 <TIM_Base_SetConfig+0x114>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d00f      	beq.n	800af3c <TIM_Base_SetConfig+0xf8>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a12      	ldr	r2, [pc, #72]	; (800af68 <TIM_Base_SetConfig+0x124>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d00b      	beq.n	800af3c <TIM_Base_SetConfig+0xf8>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a11      	ldr	r2, [pc, #68]	; (800af6c <TIM_Base_SetConfig+0x128>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d007      	beq.n	800af3c <TIM_Base_SetConfig+0xf8>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a10      	ldr	r2, [pc, #64]	; (800af70 <TIM_Base_SetConfig+0x12c>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d003      	beq.n	800af3c <TIM_Base_SetConfig+0xf8>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a0f      	ldr	r2, [pc, #60]	; (800af74 <TIM_Base_SetConfig+0x130>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d103      	bne.n	800af44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	691a      	ldr	r2, [r3, #16]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	615a      	str	r2, [r3, #20]
}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	40012c00 	.word	0x40012c00
 800af5c:	40000400 	.word	0x40000400
 800af60:	40000800 	.word	0x40000800
 800af64:	40000c00 	.word	0x40000c00
 800af68:	40013400 	.word	0x40013400
 800af6c:	40014000 	.word	0x40014000
 800af70:	40014400 	.word	0x40014400
 800af74:	40014800 	.word	0x40014800

0800af78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af78:	b480      	push	{r7}
 800af7a:	b087      	sub	sp, #28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	f023 0201 	bic.w	r2, r3, #1
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	4313      	orrs	r3, r2
 800afac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f023 030a 	bic.w	r3, r3, #10
 800afb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	4313      	orrs	r3, r2
 800afbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	621a      	str	r2, [r3, #32]
}
 800afca:	bf00      	nop
 800afcc:	371c      	adds	r7, #28
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b087      	sub	sp, #28
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	f023 0210 	bic.w	r2, r3, #16
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6a1b      	ldr	r3, [r3, #32]
 800aff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	031b      	lsls	r3, r3, #12
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	4313      	orrs	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	621a      	str	r2, [r3, #32]
}
 800b02a:	bf00      	nop
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b036:	b480      	push	{r7}
 800b038:	b085      	sub	sp, #20
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b04c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4313      	orrs	r3, r2
 800b054:	f043 0307 	orr.w	r3, r3, #7
 800b058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	609a      	str	r2, [r3, #8]
}
 800b060:	bf00      	nop
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	021a      	lsls	r2, r3, #8
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	431a      	orrs	r2, r3
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4313      	orrs	r3, r2
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	4313      	orrs	r3, r2
 800b098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	609a      	str	r2, [r3, #8]
}
 800b0a0:	bf00      	nop
 800b0a2:	371c      	adds	r7, #28
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d101      	bne.n	800b0c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	e068      	b.n	800b196 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a2e      	ldr	r2, [pc, #184]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d004      	beq.n	800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a2d      	ldr	r2, [pc, #180]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d108      	bne.n	800b10a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	4313      	orrs	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a1e      	ldr	r2, [pc, #120]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d01d      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b136:	d018      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a1b      	ldr	r2, [pc, #108]	; (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d013      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a1a      	ldr	r2, [pc, #104]	; (800b1b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00e      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a18      	ldr	r2, [pc, #96]	; (800b1b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d009      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a13      	ldr	r2, [pc, #76]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d004      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a14      	ldr	r2, [pc, #80]	; (800b1b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d10c      	bne.n	800b184 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	4313      	orrs	r3, r2
 800b17a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	40012c00 	.word	0x40012c00
 800b1a8:	40013400 	.word	0x40013400
 800b1ac:	40000400 	.word	0x40000400
 800b1b0:	40000800 	.word	0x40000800
 800b1b4:	40000c00 	.word	0x40000c00
 800b1b8:	40014000 	.word	0x40014000

0800b1bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1f8:	b084      	sub	sp, #16
 800b1fa:	b480      	push	{r7}
 800b1fc:	b085      	sub	sp, #20
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	f107 001c 	add.w	r0, r7, #28
 800b206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b20e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b210:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b212:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b216:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b21a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b21e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	4313      	orrs	r3, r2
 800b224:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	4b07      	ldr	r3, [pc, #28]	; (800b248 <SDMMC_Init+0x50>)
 800b22c:	4013      	ands	r3, r2
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	b004      	add	sp, #16
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	ffc02c00 	.word	0xffc02c00

0800b24c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f043 0203 	orr.w	r2, r3, #3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b29c:	2002      	movs	r0, #2
 800b29e:	f7f7 f8f1 	bl	8002484 <HAL_Delay>

  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0303 	and.w	r3, r3, #3
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b2ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b2f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	4b06      	ldr	r3, [pc, #24]	; (800b318 <SDMMC_SendCommand+0x50>)
 800b300:	4013      	ands	r3, r2
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	431a      	orrs	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	fffee0c0 	.word	0xfffee0c0

0800b31c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	b2db      	uxtb	r3, r3
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3314      	adds	r3, #20
 800b344:	461a      	mov	r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	4413      	add	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b382:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b388:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b38e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4313      	orrs	r3, r2
 800b394:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0

}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b088      	sub	sp, #32
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b3c2:	2310      	movs	r3, #16
 800b3c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff ff73 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b3e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e6:	2110      	movs	r1, #16
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fa7b 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b3ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3f0:	69fb      	ldr	r3, [r7, #28]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b088      	sub	sp, #32
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b408:	2311      	movs	r3, #17
 800b40a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b40c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b412:	2300      	movs	r3, #0
 800b414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b41a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b41c:	f107 0308 	add.w	r3, r7, #8
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff ff50 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b428:	f241 3288 	movw	r2, #5000	; 0x1388
 800b42c:	2111      	movs	r1, #17
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fa58 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b436:	69fb      	ldr	r3, [r7, #28]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3720      	adds	r7, #32
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b088      	sub	sp, #32
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b44e:	2312      	movs	r3, #18
 800b450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b452:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b458:	2300      	movs	r3, #0
 800b45a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b45c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b462:	f107 0308 	add.w	r3, r7, #8
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff ff2d 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b46e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b472:	2112      	movs	r1, #18
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fa35 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b47a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b47c:	69fb      	ldr	r3, [r7, #28]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3720      	adds	r7, #32
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b088      	sub	sp, #32
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b494:	2318      	movs	r3, #24
 800b496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4a8:	f107 0308 	add.w	r3, r7, #8
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7ff ff0a 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b8:	2118      	movs	r1, #24
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fa12 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b4c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c2:	69fb      	ldr	r3, [r7, #28]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3720      	adds	r7, #32
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b4da:	2319      	movs	r3, #25
 800b4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff fee7 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b4fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4fe:	2119      	movs	r1, #25
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f9ef 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b508:	69fb      	ldr	r3, [r7, #28]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3720      	adds	r7, #32
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
	...

0800b514 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b088      	sub	sp, #32
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b520:	230c      	movs	r3, #12
 800b522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b524:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b52e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b532:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b54c:	f107 0308 	add.w	r3, r7, #8
 800b550:	4619      	mov	r1, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff feb8 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b558:	4a08      	ldr	r2, [pc, #32]	; (800b57c <SDMMC_CmdStopTransfer+0x68>)
 800b55a:	210c      	movs	r1, #12
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f9c1 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b562:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800b570:	69fb      	ldr	r3, [r7, #28]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3720      	adds	r7, #32
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	05f5e100 	.word	0x05f5e100

0800b580 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08a      	sub	sp, #40	; 0x28
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b590:	2307      	movs	r3, #7
 800b592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b594:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b598:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b59a:	2300      	movs	r3, #0
 800b59c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b59e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5a2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5a4:	f107 0310 	add.w	r3, r7, #16
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f7ff fe8c 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b5b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b4:	2107      	movs	r1, #7
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 f994 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b5bc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3728      	adds	r7, #40	; 0x28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b088      	sub	sp, #32
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5e6:	f107 0308 	add.w	r3, r7, #8
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff fe6b 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fbb8 	bl	800bd68 <SDMMC_GetCmdError>
 800b5f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3720      	adds	r7, #32
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b60c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b612:	2308      	movs	r3, #8
 800b614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff fe4b 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fb4a 	bl	800bccc <SDMMC_GetCmdResp7>
 800b638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b63a:	69fb      	ldr	r3, [r7, #28]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3720      	adds	r7, #32
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b088      	sub	sp, #32
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b652:	2337      	movs	r3, #55	; 0x37
 800b654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b65a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b664:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b666:	f107 0308 	add.w	r3, r7, #8
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff fe2b 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b672:	f241 3288 	movw	r2, #5000	; 0x1388
 800b676:	2137      	movs	r1, #55	; 0x37
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 f933 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b67e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b680:	69fb      	ldr	r3, [r7, #28]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3720      	adds	r7, #32
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b088      	sub	sp, #32
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b698:	2329      	movs	r3, #41	; 0x29
 800b69a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b69c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ac:	f107 0308 	add.w	r3, r7, #8
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7ff fe08 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fa4f 	bl	800bb5c <SDMMC_GetCmdResp3>
 800b6be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c0:	69fb      	ldr	r3, [r7, #28]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3720      	adds	r7, #32
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b088      	sub	sp, #32
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b6d8:	2306      	movs	r3, #6
 800b6da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ec:	f107 0308 	add.w	r3, r7, #8
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7ff fde8 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6fc:	2106      	movs	r1, #6
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f8f0 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b706:	69fb      	ldr	r3, [r7, #28]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3720      	adds	r7, #32
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b718:	2300      	movs	r3, #0
 800b71a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b71c:	2333      	movs	r3, #51	; 0x33
 800b71e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b720:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b72a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b72e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b730:	f107 0308 	add.w	r3, r7, #8
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff fdc6 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b740:	2133      	movs	r1, #51	; 0x33
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f8ce 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b74a:	69fb      	ldr	r3, [r7, #28]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3720      	adds	r7, #32
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b75c:	2300      	movs	r3, #0
 800b75e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b760:	2302      	movs	r3, #2
 800b762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b764:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b76a:	2300      	movs	r3, #0
 800b76c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b76e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b772:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b774:	f107 0308 	add.w	r3, r7, #8
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff fda4 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f9a1 	bl	800bac8 <SDMMC_GetCmdResp2>
 800b786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b788:	69fb      	ldr	r3, [r7, #28]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3720      	adds	r7, #32
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b088      	sub	sp, #32
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b7a0:	2309      	movs	r3, #9
 800b7a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b7a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b7a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7b4:	f107 0308 	add.w	r3, r7, #8
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fd84 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f981 	bl	800bac8 <SDMMC_GetCmdResp2>
 800b7c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3720      	adds	r7, #32
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b088      	sub	sp, #32
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7f4:	f107 0308 	add.w	r3, r7, #8
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff fd64 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	2103      	movs	r1, #3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f9e9 	bl	800bbdc <SDMMC_GetCmdResp6>
 800b80a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b80c:	69fb      	ldr	r3, [r7, #28]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3720      	adds	r7, #32
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b088      	sub	sp, #32
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b824:	230d      	movs	r3, #13
 800b826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b82c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b838:	f107 0308 	add.w	r3, r7, #8
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff fd42 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b844:	f241 3288 	movw	r2, #5000	; 0x1388
 800b848:	210d      	movs	r1, #13
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f84a 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b852:	69fb      	ldr	r3, [r7, #28]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3720      	adds	r7, #32
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b868:	230d      	movs	r3, #13
 800b86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b86c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b872:	2300      	movs	r3, #0
 800b874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b87a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b87c:	f107 0308 	add.w	r3, r7, #8
 800b880:	4619      	mov	r1, r3
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7ff fd20 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b888:	f241 3288 	movw	r2, #5000	; 0x1388
 800b88c:	210d      	movs	r1, #13
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f828 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b896:	69fb      	ldr	r3, [r7, #28]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3720      	adds	r7, #32
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b8ac:	230b      	movs	r3, #11
 800b8ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8c0:	f107 0308 	add.w	r3, r7, #8
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7ff fcfe 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8d0:	210b      	movs	r1, #11
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f806 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b8d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8da:	69fb      	ldr	r3, [r7, #28]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3720      	adds	r7, #32
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	607a      	str	r2, [r7, #4]
 800b8f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b8f2:	4b70      	ldr	r3, [pc, #448]	; (800bab4 <SDMMC_GetCmdResp1+0x1d0>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a70      	ldr	r2, [pc, #448]	; (800bab8 <SDMMC_GetCmdResp1+0x1d4>)
 800b8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fc:	0a5a      	lsrs	r2, r3, #9
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	fb02 f303 	mul.w	r3, r2, r3
 800b904:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	61fa      	str	r2, [r7, #28]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b914:	e0c9      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	4b67      	ldr	r3, [pc, #412]	; (800babc <SDMMC_GetCmdResp1+0x1d8>)
 800b920:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0ef      	beq.n	800b906 <SDMMC_GetCmdResp1+0x22>
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1ea      	bne.n	800b906 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b934:	f003 0304 	and.w	r3, r3, #4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d004      	beq.n	800b946 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2204      	movs	r2, #4
 800b940:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b942:	2304      	movs	r3, #4
 800b944:	e0b1      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d004      	beq.n	800b95c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b958:	2301      	movs	r3, #1
 800b95a:	e0a6      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	4a58      	ldr	r2, [pc, #352]	; (800bac0 <SDMMC_GetCmdResp1+0x1dc>)
 800b960:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff fcda 	bl	800b31c <SDMMC_GetCommandResponse>
 800b968:	4603      	mov	r3, r0
 800b96a:	461a      	mov	r2, r3
 800b96c:	7afb      	ldrb	r3, [r7, #11]
 800b96e:	4293      	cmp	r3, r2
 800b970:	d001      	beq.n	800b976 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b972:	2301      	movs	r3, #1
 800b974:	e099      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b976:	2100      	movs	r1, #0
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff fcdc 	bl	800b336 <SDMMC_GetResponse>
 800b97e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	4b50      	ldr	r3, [pc, #320]	; (800bac4 <SDMMC_GetCmdResp1+0x1e0>)
 800b984:	4013      	ands	r3, r2
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b98a:	2300      	movs	r3, #0
 800b98c:	e08d      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2b00      	cmp	r3, #0
 800b992:	da02      	bge.n	800b99a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b998:	e087      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b9a4:	2340      	movs	r3, #64	; 0x40
 800b9a6:	e080      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b9b2:	2380      	movs	r3, #128	; 0x80
 800b9b4:	e079      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b9c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9c4:	e071      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b9d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9d4:	e069      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b9e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e4:	e061      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b9f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9f4:	e059      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba04:	e051      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba14:	e049      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba24:	e041      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ba30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba34:	e039      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ba44:	e031      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ba50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ba54:	e029      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d002      	beq.n	800ba66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba64:	e021      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ba74:	e019      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba84:	e011      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba94:	e009      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f003 0308 	and.w	r3, r3, #8
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800baa0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800baa4:	e001      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800baa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3720      	adds	r7, #32
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20000000 	.word	0x20000000
 800bab8:	10624dd3 	.word	0x10624dd3
 800babc:	00200045 	.word	0x00200045
 800bac0:	002000c5 	.word	0x002000c5
 800bac4:	fdffe008 	.word	0xfdffe008

0800bac8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bad0:	4b1f      	ldr	r3, [pc, #124]	; (800bb50 <SDMMC_GetCmdResp2+0x88>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a1f      	ldr	r2, [pc, #124]	; (800bb54 <SDMMC_GetCmdResp2+0x8c>)
 800bad6:	fba2 2303 	umull	r2, r3, r2, r3
 800bada:	0a5b      	lsrs	r3, r3, #9
 800badc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae0:	fb02 f303 	mul.w	r3, r2, r3
 800bae4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	1e5a      	subs	r2, r3, #1
 800baea:	60fa      	str	r2, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d102      	bne.n	800baf6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800baf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baf4:	e026      	b.n	800bb44 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0ef      	beq.n	800bae6 <SDMMC_GetCmdResp2+0x1e>
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1ea      	bne.n	800bae6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb14:	f003 0304 	and.w	r3, r3, #4
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2204      	movs	r2, #4
 800bb20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb22:	2304      	movs	r3, #4
 800bb24:	e00e      	b.n	800bb44 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d004      	beq.n	800bb3c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e003      	b.n	800bb44 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a06      	ldr	r2, [pc, #24]	; (800bb58 <SDMMC_GetCmdResp2+0x90>)
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3714      	adds	r7, #20
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	20000000 	.word	0x20000000
 800bb54:	10624dd3 	.word	0x10624dd3
 800bb58:	002000c5 	.word	0x002000c5

0800bb5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb64:	4b1a      	ldr	r3, [pc, #104]	; (800bbd0 <SDMMC_GetCmdResp3+0x74>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a1a      	ldr	r2, [pc, #104]	; (800bbd4 <SDMMC_GetCmdResp3+0x78>)
 800bb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6e:	0a5b      	lsrs	r3, r3, #9
 800bb70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb74:	fb02 f303 	mul.w	r3, r2, r3
 800bb78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	1e5a      	subs	r2, r3, #1
 800bb7e:	60fa      	str	r2, [r7, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d102      	bne.n	800bb8a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb88:	e01b      	b.n	800bbc2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d0ef      	beq.n	800bb7a <SDMMC_GetCmdResp3+0x1e>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1ea      	bne.n	800bb7a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba8:	f003 0304 	and.w	r3, r3, #4
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d004      	beq.n	800bbba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2204      	movs	r2, #4
 800bbb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbb6:	2304      	movs	r3, #4
 800bbb8:	e003      	b.n	800bbc2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a06      	ldr	r2, [pc, #24]	; (800bbd8 <SDMMC_GetCmdResp3+0x7c>)
 800bbbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	20000000 	.word	0x20000000
 800bbd4:	10624dd3 	.word	0x10624dd3
 800bbd8:	002000c5 	.word	0x002000c5

0800bbdc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbea:	4b35      	ldr	r3, [pc, #212]	; (800bcc0 <SDMMC_GetCmdResp6+0xe4>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a35      	ldr	r2, [pc, #212]	; (800bcc4 <SDMMC_GetCmdResp6+0xe8>)
 800bbf0:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf4:	0a5b      	lsrs	r3, r3, #9
 800bbf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbfa:	fb02 f303 	mul.w	r3, r2, r3
 800bbfe:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	1e5a      	subs	r2, r3, #1
 800bc04:	61fa      	str	r2, [r7, #28]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d102      	bne.n	800bc10 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc0e:	e052      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc14:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0ef      	beq.n	800bc00 <SDMMC_GetCmdResp6+0x24>
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1ea      	bne.n	800bc00 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2e:	f003 0304 	and.w	r3, r3, #4
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2204      	movs	r2, #4
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc3c:	2304      	movs	r3, #4
 800bc3e:	e03a      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc44:	f003 0301 	and.w	r3, r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d004      	beq.n	800bc56 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e02f      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f7ff fb60 	bl	800b31c <SDMMC_GetCommandResponse>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	7afb      	ldrb	r3, [r7, #11]
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d001      	beq.n	800bc6a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e025      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4a16      	ldr	r2, [pc, #88]	; (800bcc8 <SDMMC_GetCmdResp6+0xec>)
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bc70:	2100      	movs	r1, #0
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f7ff fb5f 	bl	800b336 <SDMMC_GetResponse>
 800bc78:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d106      	bne.n	800bc92 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	0c1b      	lsrs	r3, r3, #16
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	e011      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bca0:	e009      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bcac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcb0:	e001      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3720      	adds	r7, #32
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20000000 	.word	0x20000000
 800bcc4:	10624dd3 	.word	0x10624dd3
 800bcc8:	002000c5 	.word	0x002000c5

0800bccc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcd4:	4b22      	ldr	r3, [pc, #136]	; (800bd60 <SDMMC_GetCmdResp7+0x94>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a22      	ldr	r2, [pc, #136]	; (800bd64 <SDMMC_GetCmdResp7+0x98>)
 800bcda:	fba2 2303 	umull	r2, r3, r2, r3
 800bcde:	0a5b      	lsrs	r3, r3, #9
 800bce0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce4:	fb02 f303 	mul.w	r3, r2, r3
 800bce8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	1e5a      	subs	r2, r3, #1
 800bcee:	60fa      	str	r2, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d102      	bne.n	800bcfa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcf8:	e02c      	b.n	800bd54 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d0ef      	beq.n	800bcea <SDMMC_GetCmdResp7+0x1e>
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1ea      	bne.n	800bcea <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d004      	beq.n	800bd2a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2204      	movs	r2, #4
 800bd24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd26:	2304      	movs	r3, #4
 800bd28:	e014      	b.n	800bd54 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d004      	beq.n	800bd40 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e009      	b.n	800bd54 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2240      	movs	r2, #64	; 0x40
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd52:	2300      	movs	r3, #0

}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	20000000 	.word	0x20000000
 800bd64:	10624dd3 	.word	0x10624dd3

0800bd68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd70:	4b11      	ldr	r3, [pc, #68]	; (800bdb8 <SDMMC_GetCmdError+0x50>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a11      	ldr	r2, [pc, #68]	; (800bdbc <SDMMC_GetCmdError+0x54>)
 800bd76:	fba2 2303 	umull	r2, r3, r2, r3
 800bd7a:	0a5b      	lsrs	r3, r3, #9
 800bd7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd80:	fb02 f303 	mul.w	r3, r2, r3
 800bd84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	1e5a      	subs	r2, r3, #1
 800bd8a:	60fa      	str	r2, [r7, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd94:	e009      	b.n	800bdaa <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0f1      	beq.n	800bd86 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a06      	ldr	r2, [pc, #24]	; (800bdc0 <SDMMC_GetCmdError+0x58>)
 800bda6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	20000000 	.word	0x20000000
 800bdbc:	10624dd3 	.word	0x10624dd3
 800bdc0:	002000c5 	.word	0x002000c5

0800bdc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b084      	sub	sp, #16
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	f107 001c 	add.w	r0, r7, #28
 800bdd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 faf6 	bl	800d3d4 <USB_CoreReset>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800bdec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d106      	bne.n	800be00 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	639a      	str	r2, [r3, #56]	; 0x38
 800bdfe:	e005      	b.n	800be0c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be18:	b004      	add	sp, #16
 800be1a:	4770      	bx	lr

0800be1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	4613      	mov	r3, r2
 800be28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800be2a:	79fb      	ldrb	r3, [r7, #7]
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d165      	bne.n	800befc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4a3e      	ldr	r2, [pc, #248]	; (800bf2c <USB_SetTurnaroundTime+0x110>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d906      	bls.n	800be46 <USB_SetTurnaroundTime+0x2a>
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4a3d      	ldr	r2, [pc, #244]	; (800bf30 <USB_SetTurnaroundTime+0x114>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d202      	bcs.n	800be46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be40:	230f      	movs	r3, #15
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e05c      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	4a39      	ldr	r2, [pc, #228]	; (800bf30 <USB_SetTurnaroundTime+0x114>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d306      	bcc.n	800be5c <USB_SetTurnaroundTime+0x40>
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	4a38      	ldr	r2, [pc, #224]	; (800bf34 <USB_SetTurnaroundTime+0x118>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d202      	bcs.n	800be5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800be56:	230e      	movs	r3, #14
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	e051      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	4a35      	ldr	r2, [pc, #212]	; (800bf34 <USB_SetTurnaroundTime+0x118>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d306      	bcc.n	800be72 <USB_SetTurnaroundTime+0x56>
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4a34      	ldr	r2, [pc, #208]	; (800bf38 <USB_SetTurnaroundTime+0x11c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d202      	bcs.n	800be72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be6c:	230d      	movs	r3, #13
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	e046      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	4a30      	ldr	r2, [pc, #192]	; (800bf38 <USB_SetTurnaroundTime+0x11c>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d306      	bcc.n	800be88 <USB_SetTurnaroundTime+0x6c>
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4a2f      	ldr	r2, [pc, #188]	; (800bf3c <USB_SetTurnaroundTime+0x120>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d802      	bhi.n	800be88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be82:	230c      	movs	r3, #12
 800be84:	617b      	str	r3, [r7, #20]
 800be86:	e03b      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4a2c      	ldr	r2, [pc, #176]	; (800bf3c <USB_SetTurnaroundTime+0x120>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d906      	bls.n	800be9e <USB_SetTurnaroundTime+0x82>
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4a2b      	ldr	r2, [pc, #172]	; (800bf40 <USB_SetTurnaroundTime+0x124>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d802      	bhi.n	800be9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be98:	230b      	movs	r3, #11
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	e030      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	4a27      	ldr	r2, [pc, #156]	; (800bf40 <USB_SetTurnaroundTime+0x124>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d906      	bls.n	800beb4 <USB_SetTurnaroundTime+0x98>
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	4a26      	ldr	r2, [pc, #152]	; (800bf44 <USB_SetTurnaroundTime+0x128>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d802      	bhi.n	800beb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800beae:	230a      	movs	r3, #10
 800beb0:	617b      	str	r3, [r7, #20]
 800beb2:	e025      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	4a23      	ldr	r2, [pc, #140]	; (800bf44 <USB_SetTurnaroundTime+0x128>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d906      	bls.n	800beca <USB_SetTurnaroundTime+0xae>
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	4a22      	ldr	r2, [pc, #136]	; (800bf48 <USB_SetTurnaroundTime+0x12c>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d202      	bcs.n	800beca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bec4:	2309      	movs	r3, #9
 800bec6:	617b      	str	r3, [r7, #20]
 800bec8:	e01a      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	4a1e      	ldr	r2, [pc, #120]	; (800bf48 <USB_SetTurnaroundTime+0x12c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d306      	bcc.n	800bee0 <USB_SetTurnaroundTime+0xc4>
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	4a1d      	ldr	r2, [pc, #116]	; (800bf4c <USB_SetTurnaroundTime+0x130>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d802      	bhi.n	800bee0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800beda:	2308      	movs	r3, #8
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	e00f      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	4a1a      	ldr	r2, [pc, #104]	; (800bf4c <USB_SetTurnaroundTime+0x130>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d906      	bls.n	800bef6 <USB_SetTurnaroundTime+0xda>
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	4a19      	ldr	r2, [pc, #100]	; (800bf50 <USB_SetTurnaroundTime+0x134>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d202      	bcs.n	800bef6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bef0:	2307      	movs	r3, #7
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	e004      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bef6:	2306      	movs	r3, #6
 800bef8:	617b      	str	r3, [r7, #20]
 800befa:	e001      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800befc:	2309      	movs	r3, #9
 800befe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	68da      	ldr	r2, [r3, #12]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	029b      	lsls	r3, r3, #10
 800bf14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	371c      	adds	r7, #28
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	00d8acbf 	.word	0x00d8acbf
 800bf30:	00e4e1c0 	.word	0x00e4e1c0
 800bf34:	00f42400 	.word	0x00f42400
 800bf38:	01067380 	.word	0x01067380
 800bf3c:	011a499f 	.word	0x011a499f
 800bf40:	01312cff 	.word	0x01312cff
 800bf44:	014ca43f 	.word	0x014ca43f
 800bf48:	016e3600 	.word	0x016e3600
 800bf4c:	01a6ab1f 	.word	0x01a6ab1f
 800bf50:	01e84800 	.word	0x01e84800

0800bf54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f043 0201 	orr.w	r2, r3, #1
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f023 0201 	bic.w	r2, r3, #1
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bfb4:	78fb      	ldrb	r3, [r7, #3]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d115      	bne.n	800bfe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	f7f6 fa5c 	bl	8002484 <HAL_Delay>
      ms++;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 f985 	bl	800d2e2 <USB_GetMode>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d01e      	beq.n	800c01c <USB_SetCurrentMode+0x84>
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2b31      	cmp	r3, #49	; 0x31
 800bfe2:	d9f0      	bls.n	800bfc6 <USB_SetCurrentMode+0x2e>
 800bfe4:	e01a      	b.n	800c01c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bfe6:	78fb      	ldrb	r3, [r7, #3]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d115      	bne.n	800c018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bff8:	2001      	movs	r0, #1
 800bffa:	f7f6 fa43 	bl	8002484 <HAL_Delay>
      ms++;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	3301      	adds	r3, #1
 800c002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 f96c 	bl	800d2e2 <USB_GetMode>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <USB_SetCurrentMode+0x84>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2b31      	cmp	r3, #49	; 0x31
 800c014:	d9f0      	bls.n	800bff8 <USB_SetCurrentMode+0x60>
 800c016:	e001      	b.n	800c01c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e005      	b.n	800c028 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b32      	cmp	r3, #50	; 0x32
 800c020:	d101      	bne.n	800c026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e000      	b.n	800c028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c030:	b084      	sub	sp, #16
 800c032:	b580      	push	{r7, lr}
 800c034:	b086      	sub	sp, #24
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]
 800c04e:	e009      	b.n	800c064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	3340      	adds	r3, #64	; 0x40
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	2200      	movs	r2, #0
 800c05c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	3301      	adds	r3, #1
 800c062:	613b      	str	r3, [r7, #16]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	2b0e      	cmp	r3, #14
 800c068:	d9f2      	bls.n	800c050 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d11c      	bne.n	800c0aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c07e:	f043 0302 	orr.w	r3, r3, #2
 800c082:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c088:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	e005      	b.n	800c0b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0bc:	461a      	mov	r2, r3
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	680b      	ldr	r3, [r1, #0]
 800c0d4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0d6:	2103      	movs	r1, #3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f959 	bl	800c390 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0de:	2110      	movs	r1, #16
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f8f1 	bl	800c2c8 <USB_FlushTxFifo>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f91d 	bl	800c330 <USB_FlushRxFifo>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d001      	beq.n	800c100 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c106:	461a      	mov	r2, r3
 800c108:	2300      	movs	r3, #0
 800c10a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c112:	461a      	mov	r2, r3
 800c114:	2300      	movs	r3, #0
 800c116:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c11e:	461a      	mov	r2, r3
 800c120:	2300      	movs	r3, #0
 800c122:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c124:	2300      	movs	r3, #0
 800c126:	613b      	str	r3, [r7, #16]
 800c128:	e043      	b.n	800c1b2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	015a      	lsls	r2, r3, #5
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	4413      	add	r3, r2
 800c132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c13c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c140:	d118      	bne.n	800c174 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c154:	461a      	mov	r2, r3
 800c156:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	e013      	b.n	800c186 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	015a      	lsls	r2, r3, #5
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	4413      	add	r3, r2
 800c166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c16a:	461a      	mov	r2, r3
 800c16c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c170:	6013      	str	r3, [r2, #0]
 800c172:	e008      	b.n	800c186 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	015a      	lsls	r2, r3, #5
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	4413      	add	r3, r2
 800c17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c180:	461a      	mov	r2, r3
 800c182:	2300      	movs	r3, #0
 800c184:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	015a      	lsls	r2, r3, #5
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	4413      	add	r3, r2
 800c18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c192:	461a      	mov	r2, r3
 800c194:	2300      	movs	r3, #0
 800c196:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	015a      	lsls	r2, r3, #5
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	4413      	add	r3, r2
 800c1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	613b      	str	r3, [r7, #16]
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d3b7      	bcc.n	800c12a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	613b      	str	r3, [r7, #16]
 800c1be:	e043      	b.n	800c248 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1d6:	d118      	bne.n	800c20a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10a      	bne.n	800c1f4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	e013      	b.n	800c21c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	015a      	lsls	r2, r3, #5
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c200:	461a      	mov	r2, r3
 800c202:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	e008      	b.n	800c21c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	015a      	lsls	r2, r3, #5
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	4413      	add	r3, r2
 800c212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c216:	461a      	mov	r2, r3
 800c218:	2300      	movs	r3, #0
 800c21a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c228:	461a      	mov	r2, r3
 800c22a:	2300      	movs	r3, #0
 800c22c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c23a:	461a      	mov	r2, r3
 800c23c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3301      	adds	r3, #1
 800c246:	613b      	str	r3, [r7, #16]
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d3b7      	bcc.n	800c1c0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c25e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c262:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c270:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	f043 0210 	orr.w	r2, r3, #16
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	699a      	ldr	r2, [r3, #24]
 800c282:	4b10      	ldr	r3, [pc, #64]	; (800c2c4 <USB_DevInit+0x294>)
 800c284:	4313      	orrs	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d005      	beq.n	800c29c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	f043 0208 	orr.w	r2, r3, #8
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d107      	bne.n	800c2b2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2aa:	f043 0304 	orr.w	r3, r3, #4
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2be:	b004      	add	sp, #16
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	803c3800 	.word	0x803c3800

0800c2c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4a13      	ldr	r2, [pc, #76]	; (800c32c <USB_FlushTxFifo+0x64>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d901      	bls.n	800c2e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e01b      	b.n	800c320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	daf2      	bge.n	800c2d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	019b      	lsls	r3, r3, #6
 800c2f8:	f043 0220 	orr.w	r2, r3, #32
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3301      	adds	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4a08      	ldr	r2, [pc, #32]	; (800c32c <USB_FlushTxFifo+0x64>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d901      	bls.n	800c312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e006      	b.n	800c320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	f003 0320 	and.w	r3, r3, #32
 800c31a:	2b20      	cmp	r3, #32
 800c31c:	d0f0      	beq.n	800c300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	00030d40 	.word	0x00030d40

0800c330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c338:	2300      	movs	r3, #0
 800c33a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3301      	adds	r3, #1
 800c340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4a11      	ldr	r2, [pc, #68]	; (800c38c <USB_FlushRxFifo+0x5c>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d901      	bls.n	800c34e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e018      	b.n	800c380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	2b00      	cmp	r3, #0
 800c354:	daf2      	bge.n	800c33c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2210      	movs	r2, #16
 800c35e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3301      	adds	r3, #1
 800c364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	4a08      	ldr	r2, [pc, #32]	; (800c38c <USB_FlushRxFifo+0x5c>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d901      	bls.n	800c372 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e006      	b.n	800c380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	f003 0310 	and.w	r3, r3, #16
 800c37a:	2b10      	cmp	r3, #16
 800c37c:	d0f0      	beq.n	800c360 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	00030d40 	.word	0x00030d40

0800c390 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	78fb      	ldrb	r3, [r7, #3]
 800c3aa:	68f9      	ldr	r1, [r7, #12]
 800c3ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c3c2:	b480      	push	{r7}
 800c3c4:	b087      	sub	sp, #28
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f003 0306 	and.w	r3, r3, #6
 800c3da:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d002      	beq.n	800c3e8 <USB_GetDevSpeed+0x26>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2b06      	cmp	r3, #6
 800c3e6:	d102      	bne.n	800c3ee <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	75fb      	strb	r3, [r7, #23]
 800c3ec:	e001      	b.n	800c3f2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c3ee:	230f      	movs	r3, #15
 800c3f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	371c      	adds	r7, #28
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	785b      	ldrb	r3, [r3, #1]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d13a      	bne.n	800c492 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c422:	69da      	ldr	r2, [r3, #28]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	f003 030f 	and.w	r3, r3, #15
 800c42c:	2101      	movs	r1, #1
 800c42e:	fa01 f303 	lsl.w	r3, r1, r3
 800c432:	b29b      	uxth	r3, r3
 800c434:	68f9      	ldr	r1, [r7, #12]
 800c436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c43a:	4313      	orrs	r3, r2
 800c43c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	015a      	lsls	r2, r3, #5
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	4413      	add	r3, r2
 800c446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c450:	2b00      	cmp	r3, #0
 800c452:	d155      	bne.n	800c500 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	791b      	ldrb	r3, [r3, #4]
 800c46e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c470:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	059b      	lsls	r3, r3, #22
 800c476:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c478:	4313      	orrs	r3, r2
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	0151      	lsls	r1, r2, #5
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	440a      	add	r2, r1
 800c482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c48a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	e036      	b.n	800c500 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c498:	69da      	ldr	r2, [r3, #28]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	f003 030f 	and.w	r3, r3, #15
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c4a8:	041b      	lsls	r3, r3, #16
 800c4aa:	68f9      	ldr	r1, [r7, #12]
 800c4ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	015a      	lsls	r2, r3, #5
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d11a      	bne.n	800c500 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	015a      	lsls	r2, r3, #5
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	791b      	ldrb	r3, [r3, #4]
 800c4e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4e6:	430b      	orrs	r3, r1
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	0151      	lsls	r1, r2, #5
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	440a      	add	r2, r1
 800c4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
	...

0800c510 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	785b      	ldrb	r3, [r3, #1]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d161      	bne.n	800c5f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c53e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c542:	d11f      	bne.n	800c584 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	015a      	lsls	r2, r3, #5
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	4413      	add	r3, r2
 800c54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	0151      	lsls	r1, r2, #5
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	440a      	add	r2, r1
 800c55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c55e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c562:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	0151      	lsls	r1, r2, #5
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	440a      	add	r2, r1
 800c57a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c57e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c582:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c58a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	f003 030f 	and.w	r3, r3, #15
 800c594:	2101      	movs	r1, #1
 800c596:	fa01 f303 	lsl.w	r3, r1, r3
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	43db      	mvns	r3, r3
 800c59e:	68f9      	ldr	r1, [r7, #12]
 800c5a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ae:	69da      	ldr	r2, [r3, #28]
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	f003 030f 	and.w	r3, r3, #15
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	43db      	mvns	r3, r3
 800c5c2:	68f9      	ldr	r1, [r7, #12]
 800c5c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	0159      	lsls	r1, r3, #5
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	440b      	add	r3, r1
 800c5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4b35      	ldr	r3, [pc, #212]	; (800c6c0 <USB_DeactivateEndpoint+0x1b0>)
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	600b      	str	r3, [r1, #0]
 800c5ee:	e060      	b.n	800c6b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	015a      	lsls	r2, r3, #5
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c606:	d11f      	bne.n	800c648 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	015a      	lsls	r2, r3, #5
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	4413      	add	r3, r2
 800c610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	0151      	lsls	r1, r2, #5
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	440a      	add	r2, r1
 800c61e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c622:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c626:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	015a      	lsls	r2, r3, #5
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4413      	add	r3, r2
 800c630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	0151      	lsls	r1, r2, #5
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	440a      	add	r2, r1
 800c63e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c646:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c64e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	f003 030f 	and.w	r3, r3, #15
 800c658:	2101      	movs	r1, #1
 800c65a:	fa01 f303 	lsl.w	r3, r1, r3
 800c65e:	041b      	lsls	r3, r3, #16
 800c660:	43db      	mvns	r3, r3
 800c662:	68f9      	ldr	r1, [r7, #12]
 800c664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c668:	4013      	ands	r3, r2
 800c66a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c672:	69da      	ldr	r2, [r3, #28]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	f003 030f 	and.w	r3, r3, #15
 800c67c:	2101      	movs	r1, #1
 800c67e:	fa01 f303 	lsl.w	r3, r1, r3
 800c682:	041b      	lsls	r3, r3, #16
 800c684:	43db      	mvns	r3, r3
 800c686:	68f9      	ldr	r1, [r7, #12]
 800c688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c68c:	4013      	ands	r3, r2
 800c68e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	015a      	lsls	r2, r3, #5
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	4413      	add	r3, r2
 800c698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	0159      	lsls	r1, r3, #5
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	440b      	add	r3, r1
 800c6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <USB_DeactivateEndpoint+0x1b4>)
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	ec337800 	.word	0xec337800
 800c6c4:	eff37800 	.word	0xeff37800

0800c6c8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	785b      	ldrb	r3, [r3, #1]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	f040 810a 	bne.w	800c8fa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d132      	bne.n	800c754 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	015a      	lsls	r2, r3, #5
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	0151      	lsls	r1, r2, #5
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	440a      	add	r2, r1
 800c704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c70c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	015a      	lsls	r2, r3, #5
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	4413      	add	r3, r2
 800c71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	0151      	lsls	r1, r2, #5
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	440a      	add	r2, r1
 800c728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c72c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	015a      	lsls	r2, r3, #5
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	4413      	add	r3, r2
 800c73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	0151      	lsls	r1, r2, #5
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	440a      	add	r2, r1
 800c748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c74c:	0cdb      	lsrs	r3, r3, #19
 800c74e:	04db      	lsls	r3, r3, #19
 800c750:	6113      	str	r3, [r2, #16]
 800c752:	e074      	b.n	800c83e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	015a      	lsls	r2, r3, #5
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	0151      	lsls	r1, r2, #5
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	440a      	add	r2, r1
 800c76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c76e:	0cdb      	lsrs	r3, r3, #19
 800c770:	04db      	lsls	r3, r3, #19
 800c772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	0151      	lsls	r1, r2, #5
 800c786:	697a      	ldr	r2, [r7, #20]
 800c788:	440a      	add	r2, r1
 800c78a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c78e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c792:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c796:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	6999      	ldr	r1, [r3, #24]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	440b      	add	r3, r1
 800c7b0:	1e59      	subs	r1, r3, #1
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c7ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c7bc:	4b9e      	ldr	r3, [pc, #632]	; (800ca38 <USB_EPStartXfer+0x370>)
 800c7be:	400b      	ands	r3, r1
 800c7c0:	6939      	ldr	r1, [r7, #16]
 800c7c2:	0148      	lsls	r0, r1, #5
 800c7c4:	6979      	ldr	r1, [r7, #20]
 800c7c6:	4401      	add	r1, r0
 800c7c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	015a      	lsls	r2, r3, #5
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7dc:	691a      	ldr	r2, [r3, #16]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7e6:	6939      	ldr	r1, [r7, #16]
 800c7e8:	0148      	lsls	r0, r1, #5
 800c7ea:	6979      	ldr	r1, [r7, #20]
 800c7ec:	4401      	add	r1, r0
 800c7ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	791b      	ldrb	r3, [r3, #4]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d11f      	bne.n	800c83e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	015a      	lsls	r2, r3, #5
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	4413      	add	r3, r2
 800c806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	0151      	lsls	r1, r2, #5
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	440a      	add	r2, r1
 800c814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c818:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c81c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	4413      	add	r3, r2
 800c826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	0151      	lsls	r1, r2, #5
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	440a      	add	r2, r1
 800c834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c838:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c83c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	015a      	lsls	r2, r3, #5
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	4413      	add	r3, r2
 800c846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	0151      	lsls	r1, r2, #5
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	440a      	add	r2, r1
 800c854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c85c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	791b      	ldrb	r3, [r3, #4]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d015      	beq.n	800c892 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f000 8106 	beq.w	800ca7c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	f003 030f 	and.w	r3, r3, #15
 800c880:	2101      	movs	r1, #1
 800c882:	fa01 f303 	lsl.w	r3, r1, r3
 800c886:	6979      	ldr	r1, [r7, #20]
 800c888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c88c:	4313      	orrs	r3, r2
 800c88e:	634b      	str	r3, [r1, #52]	; 0x34
 800c890:	e0f4      	b.n	800ca7c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d110      	bne.n	800c8c4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	0151      	lsls	r1, r2, #5
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	440a      	add	r2, r1
 800c8b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8c0:	6013      	str	r3, [r2, #0]
 800c8c2:	e00f      	b.n	800c8e4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	015a      	lsls	r2, r3, #5
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	0151      	lsls	r1, r2, #5
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	440a      	add	r2, r1
 800c8da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8e2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	6919      	ldr	r1, [r3, #16]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781a      	ldrb	r2, [r3, #0]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fa94 	bl	800ce20 <USB_WritePacket>
 800c8f8:	e0c0      	b.n	800ca7c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	015a      	lsls	r2, r3, #5
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	4413      	add	r3, r2
 800c902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	693a      	ldr	r2, [r7, #16]
 800c90a:	0151      	lsls	r1, r2, #5
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	440a      	add	r2, r1
 800c910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c914:	0cdb      	lsrs	r3, r3, #19
 800c916:	04db      	lsls	r3, r3, #19
 800c918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	4413      	add	r3, r2
 800c922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	0151      	lsls	r1, r2, #5
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	440a      	add	r2, r1
 800c930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c934:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c938:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c93c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	699b      	ldr	r3, [r3, #24]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d123      	bne.n	800c98e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	015a      	lsls	r2, r3, #5
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	4413      	add	r3, r2
 800c94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c952:	691a      	ldr	r2, [r3, #16]
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c95c:	6939      	ldr	r1, [r7, #16]
 800c95e:	0148      	lsls	r0, r1, #5
 800c960:	6979      	ldr	r1, [r7, #20]
 800c962:	4401      	add	r1, r0
 800c964:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c968:	4313      	orrs	r3, r2
 800c96a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	015a      	lsls	r2, r3, #5
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	4413      	add	r3, r2
 800c974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	0151      	lsls	r1, r2, #5
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	440a      	add	r2, r1
 800c982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c98a:	6113      	str	r3, [r2, #16]
 800c98c:	e037      	b.n	800c9fe <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	699a      	ldr	r2, [r3, #24]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	4413      	add	r3, r2
 800c998:	1e5a      	subs	r2, r3, #1
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a2:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	89fa      	ldrh	r2, [r7, #14]
 800c9aa:	fb03 f202 	mul.w	r2, r3, r2
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	015a      	lsls	r2, r3, #5
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9be:	691a      	ldr	r2, [r3, #16]
 800c9c0:	89fb      	ldrh	r3, [r7, #14]
 800c9c2:	04d9      	lsls	r1, r3, #19
 800c9c4:	4b1c      	ldr	r3, [pc, #112]	; (800ca38 <USB_EPStartXfer+0x370>)
 800c9c6:	400b      	ands	r3, r1
 800c9c8:	6939      	ldr	r1, [r7, #16]
 800c9ca:	0148      	lsls	r0, r1, #5
 800c9cc:	6979      	ldr	r1, [r7, #20]
 800c9ce:	4401      	add	r1, r0
 800c9d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	015a      	lsls	r2, r3, #5
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9e4:	691a      	ldr	r2, [r3, #16]
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	69db      	ldr	r3, [r3, #28]
 800c9ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9ee:	6939      	ldr	r1, [r7, #16]
 800c9f0:	0148      	lsls	r0, r1, #5
 800c9f2:	6979      	ldr	r1, [r7, #20]
 800c9f4:	4401      	add	r1, r0
 800c9f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	791b      	ldrb	r3, [r3, #4]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d12a      	bne.n	800ca5c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d112      	bne.n	800ca3c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	015a      	lsls	r2, r3, #5
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	0151      	lsls	r1, r2, #5
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	440a      	add	r2, r1
 800ca2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca34:	6013      	str	r3, [r2, #0]
 800ca36:	e011      	b.n	800ca5c <USB_EPStartXfer+0x394>
 800ca38:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	015a      	lsls	r2, r3, #5
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	0151      	lsls	r1, r2, #5
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	440a      	add	r2, r1
 800ca52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	015a      	lsls	r2, r3, #5
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	4413      	add	r3, r2
 800ca64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	0151      	lsls	r1, r2, #5
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	440a      	add	r2, r1
 800ca72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop

0800ca88 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	785b      	ldrb	r3, [r3, #1]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	f040 80ab 	bne.w	800cbfc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d132      	bne.n	800cb14 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	015a      	lsls	r2, r3, #5
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	4413      	add	r3, r2
 800cab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	0151      	lsls	r1, r2, #5
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	440a      	add	r2, r1
 800cac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cac8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cacc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cad0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	015a      	lsls	r2, r3, #5
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	4413      	add	r3, r2
 800cada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	0151      	lsls	r1, r2, #5
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	440a      	add	r2, r1
 800cae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800caf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	015a      	lsls	r2, r3, #5
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	4413      	add	r3, r2
 800cafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	0151      	lsls	r1, r2, #5
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	440a      	add	r2, r1
 800cb08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb0c:	0cdb      	lsrs	r3, r3, #19
 800cb0e:	04db      	lsls	r3, r3, #19
 800cb10:	6113      	str	r3, [r2, #16]
 800cb12:	e04e      	b.n	800cbb2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	015a      	lsls	r2, r3, #5
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	0151      	lsls	r1, r2, #5
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	440a      	add	r2, r1
 800cb2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb2e:	0cdb      	lsrs	r3, r3, #19
 800cb30:	04db      	lsls	r3, r3, #19
 800cb32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	0151      	lsls	r1, r2, #5
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	440a      	add	r2, r1
 800cb4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	699a      	ldr	r2, [r3, #24]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d903      	bls.n	800cb6c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	68da      	ldr	r2, [r3, #12]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	015a      	lsls	r2, r3, #5
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4413      	add	r3, r2
 800cb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	0151      	lsls	r1, r2, #5
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	440a      	add	r2, r1
 800cb82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb98:	691a      	ldr	r2, [r3, #16]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cba2:	68b9      	ldr	r1, [r7, #8]
 800cba4:	0148      	lsls	r0, r1, #5
 800cba6:	68f9      	ldr	r1, [r7, #12]
 800cba8:	4401      	add	r1, r0
 800cbaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	015a      	lsls	r2, r3, #5
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	4413      	add	r3, r2
 800cbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	0151      	lsls	r1, r2, #5
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	440a      	add	r2, r1
 800cbc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cbd0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d071      	beq.n	800ccbe <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f003 030f 	and.w	r3, r3, #15
 800cbea:	2101      	movs	r1, #1
 800cbec:	fa01 f303 	lsl.w	r3, r1, r3
 800cbf0:	68f9      	ldr	r1, [r7, #12]
 800cbf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	634b      	str	r3, [r1, #52]	; 0x34
 800cbfa:	e060      	b.n	800ccbe <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	015a      	lsls	r2, r3, #5
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc08:	691b      	ldr	r3, [r3, #16]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	0151      	lsls	r1, r2, #5
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	440a      	add	r2, r1
 800cc12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc16:	0cdb      	lsrs	r3, r3, #19
 800cc18:	04db      	lsls	r3, r3, #19
 800cc1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	015a      	lsls	r2, r3, #5
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	4413      	add	r3, r2
 800cc24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	0151      	lsls	r1, r2, #5
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	440a      	add	r2, r1
 800cc32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc3e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d003      	beq.n	800cc50 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	68da      	ldr	r2, [r3, #12]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	015a      	lsls	r2, r3, #5
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	4413      	add	r3, r2
 800cc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	0151      	lsls	r1, r2, #5
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	440a      	add	r2, r1
 800cc6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc84:	691a      	ldr	r2, [r3, #16]
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	69db      	ldr	r3, [r3, #28]
 800cc8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc8e:	68b9      	ldr	r1, [r7, #8]
 800cc90:	0148      	lsls	r0, r1, #5
 800cc92:	68f9      	ldr	r1, [r7, #12]
 800cc94:	4401      	add	r1, r0
 800cc96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	015a      	lsls	r2, r3, #5
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	4413      	add	r3, r2
 800cca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	0151      	lsls	r1, r2, #5
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	440a      	add	r2, r1
 800ccb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ccbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b087      	sub	sp, #28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	785b      	ldrb	r3, [r3, #1]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d14a      	bne.n	800cd80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd02:	f040 8086 	bne.w	800ce12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	015a      	lsls	r2, r3, #5
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	4413      	add	r3, r2
 800cd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	683a      	ldr	r2, [r7, #0]
 800cd18:	7812      	ldrb	r2, [r2, #0]
 800cd1a:	0151      	lsls	r1, r2, #5
 800cd1c:	693a      	ldr	r2, [r7, #16]
 800cd1e:	440a      	add	r2, r1
 800cd20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	015a      	lsls	r2, r3, #5
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	4413      	add	r3, r2
 800cd34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	7812      	ldrb	r2, [r2, #0]
 800cd3e:	0151      	lsls	r1, r2, #5
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	440a      	add	r2, r1
 800cd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	3301      	adds	r3, #1
 800cd52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d902      	bls.n	800cd64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	75fb      	strb	r3, [r7, #23]
          break;
 800cd62:	e056      	b.n	800ce12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	015a      	lsls	r2, r3, #5
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd7c:	d0e7      	beq.n	800cd4e <USB_EPStopXfer+0x82>
 800cd7e:	e048      	b.n	800ce12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	015a      	lsls	r2, r3, #5
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	4413      	add	r3, r2
 800cd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd98:	d13b      	bne.n	800ce12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	015a      	lsls	r2, r3, #5
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	4413      	add	r3, r2
 800cda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	7812      	ldrb	r2, [r2, #0]
 800cdae:	0151      	lsls	r1, r2, #5
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	440a      	add	r2, r1
 800cdb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cdbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	015a      	lsls	r2, r3, #5
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	7812      	ldrb	r2, [r2, #0]
 800cdd2:	0151      	lsls	r1, r2, #5
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	440a      	add	r2, r1
 800cdd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cde0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	3301      	adds	r3, #1
 800cde6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f242 7210 	movw	r2, #10000	; 0x2710
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d902      	bls.n	800cdf8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	75fb      	strb	r3, [r7, #23]
          break;
 800cdf6:	e00c      	b.n	800ce12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	015a      	lsls	r2, r3, #5
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	4413      	add	r3, r2
 800ce02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce10:	d0e7      	beq.n	800cde2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ce12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	371c      	adds	r7, #28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b089      	sub	sp, #36	; 0x24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	460b      	mov	r3, r1
 800ce30:	71fb      	strb	r3, [r7, #7]
 800ce32:	4613      	mov	r3, r2
 800ce34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800ce3e:	88bb      	ldrh	r3, [r7, #4]
 800ce40:	3303      	adds	r3, #3
 800ce42:	089b      	lsrs	r3, r3, #2
 800ce44:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ce46:	2300      	movs	r3, #0
 800ce48:	61bb      	str	r3, [r7, #24]
 800ce4a:	e018      	b.n	800ce7e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ce4c:	79fb      	ldrb	r3, [r7, #7]
 800ce4e:	031a      	lsls	r2, r3, #12
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	4413      	add	r3, r2
 800ce54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce58:	461a      	mov	r2, r3
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	3301      	adds	r3, #1
 800ce64:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	3301      	adds	r3, #1
 800ce76:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	61bb      	str	r3, [r7, #24]
 800ce7e:	69ba      	ldr	r2, [r7, #24]
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d3e2      	bcc.n	800ce4c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3724      	adds	r7, #36	; 0x24
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b08b      	sub	sp, #44	; 0x2c
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ceaa:	88fb      	ldrh	r3, [r7, #6]
 800ceac:	089b      	lsrs	r3, r3, #2
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ceb2:	88fb      	ldrh	r3, [r7, #6]
 800ceb4:	f003 0303 	and.w	r3, r3, #3
 800ceb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ceba:	2300      	movs	r3, #0
 800cebc:	623b      	str	r3, [r7, #32]
 800cebe:	e014      	b.n	800ceea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	601a      	str	r2, [r3, #0]
    pDest++;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	3301      	adds	r3, #1
 800ced0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	3301      	adds	r3, #1
 800ced6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceda:	3301      	adds	r3, #1
 800cedc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	3301      	adds	r3, #1
 800cee2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	3301      	adds	r3, #1
 800cee8:	623b      	str	r3, [r7, #32]
 800ceea:	6a3a      	ldr	r2, [r7, #32]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d3e6      	bcc.n	800cec0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cef2:	8bfb      	ldrh	r3, [r7, #30]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d01e      	beq.n	800cf36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cef8:	2300      	movs	r3, #0
 800cefa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf02:	461a      	mov	r2, r3
 800cf04:	f107 0310 	add.w	r3, r7, #16
 800cf08:	6812      	ldr	r2, [r2, #0]
 800cf0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cf0c:	693a      	ldr	r2, [r7, #16]
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	fa22 f303 	lsr.w	r3, r2, r3
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	701a      	strb	r2, [r3, #0]
      i++;
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	3301      	adds	r3, #1
 800cf22:	623b      	str	r3, [r7, #32]
      pDest++;
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	3301      	adds	r3, #1
 800cf28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cf2a:	8bfb      	ldrh	r3, [r7, #30]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cf30:	8bfb      	ldrh	r3, [r7, #30]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1ea      	bne.n	800cf0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	372c      	adds	r7, #44	; 0x2c
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	785b      	ldrb	r3, [r3, #1]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d12c      	bne.n	800cfba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	015a      	lsls	r2, r3, #5
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	4413      	add	r3, r2
 800cf68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	db12      	blt.n	800cf98 <USB_EPSetStall+0x54>
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00f      	beq.n	800cf98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	015a      	lsls	r2, r3, #5
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	0151      	lsls	r1, r2, #5
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	440a      	add	r2, r1
 800cf8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	015a      	lsls	r2, r3, #5
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	0151      	lsls	r1, r2, #5
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	440a      	add	r2, r1
 800cfae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	e02b      	b.n	800d012 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	015a      	lsls	r2, r3, #5
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	db12      	blt.n	800cff2 <USB_EPSetStall+0xae>
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00f      	beq.n	800cff2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	015a      	lsls	r2, r3, #5
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	4413      	add	r3, r2
 800cfda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	0151      	lsls	r1, r2, #5
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	440a      	add	r2, r1
 800cfe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cff0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	015a      	lsls	r2, r3, #5
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	4413      	add	r3, r2
 800cffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	0151      	lsls	r1, r2, #5
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	440a      	add	r2, r1
 800d008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d00c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d010:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	785b      	ldrb	r3, [r3, #1]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d128      	bne.n	800d08e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	015a      	lsls	r2, r3, #5
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4413      	add	r3, r2
 800d044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	0151      	lsls	r1, r2, #5
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	440a      	add	r2, r1
 800d052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d05a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	791b      	ldrb	r3, [r3, #4]
 800d060:	2b03      	cmp	r3, #3
 800d062:	d003      	beq.n	800d06c <USB_EPClearStall+0x4c>
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	791b      	ldrb	r3, [r3, #4]
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d138      	bne.n	800d0de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	015a      	lsls	r2, r3, #5
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	4413      	add	r3, r2
 800d074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	0151      	lsls	r1, r2, #5
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	440a      	add	r2, r1
 800d082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d08a:	6013      	str	r3, [r2, #0]
 800d08c:	e027      	b.n	800d0de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	015a      	lsls	r2, r3, #5
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	4413      	add	r3, r2
 800d096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	68ba      	ldr	r2, [r7, #8]
 800d09e:	0151      	lsls	r1, r2, #5
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	440a      	add	r2, r1
 800d0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d0ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	791b      	ldrb	r3, [r3, #4]
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d003      	beq.n	800d0be <USB_EPClearStall+0x9e>
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	791b      	ldrb	r3, [r3, #4]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d10f      	bne.n	800d0de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	015a      	lsls	r2, r3, #5
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	0151      	lsls	r1, r2, #5
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	440a      	add	r2, r1
 800d0d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3714      	adds	r7, #20
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d10a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d10e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	78fb      	ldrb	r3, [r7, #3]
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d120:	68f9      	ldr	r1, [r7, #12]
 800d122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d126:	4313      	orrs	r3, r2
 800d128:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d152:	f023 0303 	bic.w	r3, r3, #3
 800d156:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d166:	f023 0302 	bic.w	r3, r3, #2
 800d16a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr

0800d17a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d17a:	b480      	push	{r7}
 800d17c:	b085      	sub	sp, #20
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d194:	f023 0303 	bic.w	r3, r3, #3
 800d198:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1a8:	f043 0302 	orr.w	r3, r3, #2
 800d1ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3714      	adds	r7, #20
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b085      	sub	sp, #20
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1f4:	699b      	ldr	r3, [r3, #24]
 800d1f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	4013      	ands	r3, r2
 800d204:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	0c1b      	lsrs	r3, r3, #16
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3714      	adds	r7, #20
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr

0800d216 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d216:	b480      	push	{r7}
 800d218:	b085      	sub	sp, #20
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d228:	699b      	ldr	r3, [r3, #24]
 800d22a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	68ba      	ldr	r2, [r7, #8]
 800d236:	4013      	ands	r3, r2
 800d238:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	b29b      	uxth	r3, r3
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3714      	adds	r7, #20
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b085      	sub	sp, #20
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	460b      	mov	r3, r1
 800d254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d25a:	78fb      	ldrb	r3, [r7, #3]
 800d25c:	015a      	lsls	r2, r3, #5
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	4413      	add	r3, r2
 800d262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	4013      	ands	r3, r2
 800d276:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d278:	68bb      	ldr	r3, [r7, #8]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d286:	b480      	push	{r7}
 800d288:	b087      	sub	sp, #28
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	460b      	mov	r3, r1
 800d290:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d2aa:	78fb      	ldrb	r3, [r7, #3]
 800d2ac:	f003 030f 	and.w	r3, r3, #15
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2b6:	01db      	lsls	r3, r3, #7
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	693a      	ldr	r2, [r7, #16]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d2c0:	78fb      	ldrb	r3, [r7, #3]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d2d4:	68bb      	ldr	r3, [r7, #8]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	371c      	adds	r7, #28
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	695b      	ldr	r3, [r3, #20]
 800d2ee:	f003 0301 	and.w	r3, r3, #1
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	370c      	adds	r7, #12
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr

0800d2fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d2fe:	b480      	push	{r7}
 800d300:	b085      	sub	sp, #20
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d318:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d31c:	f023 0307 	bic.w	r3, r3, #7
 800d320:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d334:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	333c      	adds	r3, #60	; 0x3c
 800d356:	3304      	adds	r3, #4
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	4a1c      	ldr	r2, [pc, #112]	; (800d3d0 <USB_EP0_OutStart+0x8c>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d90a      	bls.n	800d37a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d374:	d101      	bne.n	800d37a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	e024      	b.n	800d3c4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d380:	461a      	mov	r2, r3
 800d382:	2300      	movs	r3, #0
 800d384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3a8:	f043 0318 	orr.w	r3, r3, #24
 800d3ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b4:	691b      	ldr	r3, [r3, #16]
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d3c0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3714      	adds	r7, #20
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr
 800d3d0:	4f54300a 	.word	0x4f54300a

0800d3d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	4a13      	ldr	r2, [pc, #76]	; (800d438 <USB_CoreReset+0x64>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d901      	bls.n	800d3f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	e01b      	b.n	800d42a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	daf2      	bge.n	800d3e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	f043 0201 	orr.w	r2, r3, #1
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	3301      	adds	r3, #1
 800d40e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	4a09      	ldr	r2, [pc, #36]	; (800d438 <USB_CoreReset+0x64>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d901      	bls.n	800d41c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d418:	2303      	movs	r3, #3
 800d41a:	e006      	b.n	800d42a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	691b      	ldr	r3, [r3, #16]
 800d420:	f003 0301 	and.w	r3, r3, #1
 800d424:	2b01      	cmp	r3, #1
 800d426:	d0f0      	beq.n	800d40a <USB_CoreReset+0x36>

  return HAL_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3714      	adds	r7, #20
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	00030d40 	.word	0x00030d40

0800d43c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d440:	4904      	ldr	r1, [pc, #16]	; (800d454 <MX_FATFS_Init+0x18>)
 800d442:	4805      	ldr	r0, [pc, #20]	; (800d458 <MX_FATFS_Init+0x1c>)
 800d444:	f005 fad0 	bl	80129e8 <FATFS_LinkDriver>
 800d448:	4603      	mov	r3, r0
 800d44a:	461a      	mov	r2, r3
 800d44c:	4b03      	ldr	r3, [pc, #12]	; (800d45c <MX_FATFS_Init+0x20>)
 800d44e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d450:	bf00      	nop
 800d452:	bd80      	pop	{r7, pc}
 800d454:	20000ee8 	.word	0x20000ee8
 800d458:	0801e598 	.word	0x0801e598
 800d45c:	20000ee4 	.word	0x20000ee4

0800d460 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d460:	b480      	push	{r7}
 800d462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d464:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d466:	4618      	mov	r0, r3
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d476:	2300      	movs	r3, #0
 800d478:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d47a:	f000 f885 	bl	800d588 <BSP_SD_IsDetected>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b01      	cmp	r3, #1
 800d482:	d001      	beq.n	800d488 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d484:	2302      	movs	r3, #2
 800d486:	e012      	b.n	800d4ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d488:	480b      	ldr	r0, [pc, #44]	; (800d4b8 <BSP_SD_Init+0x48>)
 800d48a:	f7fb f959 	bl	8008740 <HAL_SD_Init>
 800d48e:	4603      	mov	r3, r0
 800d490:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d492:	79fb      	ldrb	r3, [r7, #7]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d109      	bne.n	800d4ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d49c:	4806      	ldr	r0, [pc, #24]	; (800d4b8 <BSP_SD_Init+0x48>)
 800d49e:	f7fc f80d 	bl	80094bc <HAL_SD_ConfigWideBusOperation>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d001      	beq.n	800d4ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d4ac:	79fb      	ldrb	r3, [r7, #7]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3708      	adds	r7, #8
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20000c20 	.word	0x20000c20

0800d4bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	68f9      	ldr	r1, [r7, #12]
 800d4d2:	4806      	ldr	r0, [pc, #24]	; (800d4ec <BSP_SD_ReadBlocks_DMA+0x30>)
 800d4d4:	f7fb fa5c 	bl	8008990 <HAL_SD_ReadBlocks_DMA>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	20000c20 	.word	0x20000c20

0800d4f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68ba      	ldr	r2, [r7, #8]
 800d504:	68f9      	ldr	r1, [r7, #12]
 800d506:	4806      	ldr	r0, [pc, #24]	; (800d520 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d508:	f7fb faea 	bl	8008ae0 <HAL_SD_WriteBlocks_DMA>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d001      	beq.n	800d516 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d512:	2301      	movs	r3, #1
 800d514:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d516:	7dfb      	ldrb	r3, [r7, #23]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	20000c20 	.word	0x20000c20

0800d524 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d528:	4805      	ldr	r0, [pc, #20]	; (800d540 <BSP_SD_GetCardState+0x1c>)
 800d52a:	f7fc f8db 	bl	80096e4 <HAL_SD_GetCardState>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b04      	cmp	r3, #4
 800d532:	bf14      	ite	ne
 800d534:	2301      	movne	r3, #1
 800d536:	2300      	moveq	r3, #0
 800d538:	b2db      	uxtb	r3, r3
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	20000c20 	.word	0x20000c20

0800d544 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d54c:	6879      	ldr	r1, [r7, #4]
 800d54e:	4803      	ldr	r0, [pc, #12]	; (800d55c <BSP_SD_GetCardInfo+0x18>)
 800d550:	f7fb ff88 	bl	8009464 <HAL_SD_GetCardInfo>
}
 800d554:	bf00      	nop
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20000c20 	.word	0x20000c20

0800d560 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d568:	f000 f9a0 	bl	800d8ac <BSP_SD_WriteCpltCallback>
}
 800d56c:	bf00      	nop
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d57c:	f000 f9a2 	bl	800d8c4 <BSP_SD_ReadCpltCallback>
}
 800d580:	bf00      	nop
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d58e:	2301      	movs	r3, #1
 800d590:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d592:	f000 f80b 	bl	800d5ac <BSP_PlatformIsDetected>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d101      	bne.n	800d5a0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d59c:	2300      	movs	r3, #0
 800d59e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	b2db      	uxtb	r3, r3
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d5b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d5ba:	4806      	ldr	r0, [pc, #24]	; (800d5d4 <BSP_PlatformIsDetected+0x28>)
 800d5bc:	f7f6 fde2 	bl	8004184 <HAL_GPIO_ReadPin>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d5ca:	79fb      	ldrb	r3, [r7, #7]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	48000400 	.word	0x48000400

0800d5d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d5e0:	f7f4 ff44 	bl	800246c <HAL_GetTick>
 800d5e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d5e6:	e006      	b.n	800d5f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d5e8:	f7ff ff9c 	bl	800d524 <BSP_SD_GetCardState>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e009      	b.n	800d60a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d5f6:	f7f4 ff39 	bl	800246c <HAL_GetTick>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	429a      	cmp	r2, r3
 800d604:	d8f0      	bhi.n	800d5e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
	...

0800d614 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	4603      	mov	r3, r0
 800d61c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d61e:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <SD_CheckStatus+0x38>)
 800d620:	2201      	movs	r2, #1
 800d622:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d624:	f7ff ff7e 	bl	800d524 <BSP_SD_GetCardState>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d107      	bne.n	800d63e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d62e:	4b07      	ldr	r3, [pc, #28]	; (800d64c <SD_CheckStatus+0x38>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	f023 0301 	bic.w	r3, r3, #1
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	4b04      	ldr	r3, [pc, #16]	; (800d64c <SD_CheckStatus+0x38>)
 800d63c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d63e:	4b03      	ldr	r3, [pc, #12]	; (800d64c <SD_CheckStatus+0x38>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	b2db      	uxtb	r3, r3
}
 800d644:	4618      	mov	r0, r3
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20000009 	.word	0x20000009

0800d650 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	4603      	mov	r3, r0
 800d658:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d65a:	f7ff ff09 	bl	800d470 <BSP_SD_Init>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d107      	bne.n	800d674 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d664:	79fb      	ldrb	r3, [r7, #7]
 800d666:	4618      	mov	r0, r3
 800d668:	f7ff ffd4 	bl	800d614 <SD_CheckStatus>
 800d66c:	4603      	mov	r3, r0
 800d66e:	461a      	mov	r2, r3
 800d670:	4b04      	ldr	r3, [pc, #16]	; (800d684 <SD_initialize+0x34>)
 800d672:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d674:	4b03      	ldr	r3, [pc, #12]	; (800d684 <SD_initialize+0x34>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	b2db      	uxtb	r3, r3
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	20000009 	.word	0x20000009

0800d688 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	4603      	mov	r3, r0
 800d690:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff ffbd 	bl	800d614 <SD_CheckStatus>
 800d69a:	4603      	mov	r3, r0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60b9      	str	r1, [r7, #8]
 800d6ac:	607a      	str	r2, [r7, #4]
 800d6ae:	603b      	str	r3, [r7, #0]
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d6b8:	f247 5030 	movw	r0, #30000	; 0x7530
 800d6bc:	f7ff ff8c 	bl	800d5d8 <SD_CheckStatusWithTimeout>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	da01      	bge.n	800d6ca <SD_read+0x26>
  {
    return res;
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	e03b      	b.n	800d742 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	6879      	ldr	r1, [r7, #4]
 800d6ce:	68b8      	ldr	r0, [r7, #8]
 800d6d0:	f7ff fef4 	bl	800d4bc <BSP_SD_ReadBlocks_DMA>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d132      	bne.n	800d740 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d6da:	4b1c      	ldr	r3, [pc, #112]	; (800d74c <SD_read+0xa8>)
 800d6dc:	2200      	movs	r2, #0
 800d6de:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d6e0:	f7f4 fec4 	bl	800246c <HAL_GetTick>
 800d6e4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d6e6:	bf00      	nop
 800d6e8:	4b18      	ldr	r3, [pc, #96]	; (800d74c <SD_read+0xa8>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d108      	bne.n	800d702 <SD_read+0x5e>
 800d6f0:	f7f4 febc 	bl	800246c <HAL_GetTick>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	f247 522f 	movw	r2, #29999	; 0x752f
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d9f2      	bls.n	800d6e8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d702:	4b12      	ldr	r3, [pc, #72]	; (800d74c <SD_read+0xa8>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d102      	bne.n	800d710 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d70a:	2301      	movs	r3, #1
 800d70c:	75fb      	strb	r3, [r7, #23]
 800d70e:	e017      	b.n	800d740 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d710:	4b0e      	ldr	r3, [pc, #56]	; (800d74c <SD_read+0xa8>)
 800d712:	2200      	movs	r2, #0
 800d714:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d716:	f7f4 fea9 	bl	800246c <HAL_GetTick>
 800d71a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d71c:	e007      	b.n	800d72e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d71e:	f7ff ff01 	bl	800d524 <BSP_SD_GetCardState>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d102      	bne.n	800d72e <SD_read+0x8a>
          {
            res = RES_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d72c:	e008      	b.n	800d740 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d72e:	f7f4 fe9d 	bl	800246c <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	f247 522f 	movw	r2, #29999	; 0x752f
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d9ee      	bls.n	800d71e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d740:	7dfb      	ldrb	r3, [r7, #23]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20001354 	.word	0x20001354

0800d750 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	60b9      	str	r1, [r7, #8]
 800d758:	607a      	str	r2, [r7, #4]
 800d75a:	603b      	str	r3, [r7, #0]
 800d75c:	4603      	mov	r3, r0
 800d75e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d764:	4b24      	ldr	r3, [pc, #144]	; (800d7f8 <SD_write+0xa8>)
 800d766:	2200      	movs	r2, #0
 800d768:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d76a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d76e:	f7ff ff33 	bl	800d5d8 <SD_CheckStatusWithTimeout>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	da01      	bge.n	800d77c <SD_write+0x2c>
  {
    return res;
 800d778:	7dfb      	ldrb	r3, [r7, #23]
 800d77a:	e038      	b.n	800d7ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d77c:	683a      	ldr	r2, [r7, #0]
 800d77e:	6879      	ldr	r1, [r7, #4]
 800d780:	68b8      	ldr	r0, [r7, #8]
 800d782:	f7ff feb5 	bl	800d4f0 <BSP_SD_WriteBlocks_DMA>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d12f      	bne.n	800d7ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d78c:	f7f4 fe6e 	bl	800246c <HAL_GetTick>
 800d790:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d792:	bf00      	nop
 800d794:	4b18      	ldr	r3, [pc, #96]	; (800d7f8 <SD_write+0xa8>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d108      	bne.n	800d7ae <SD_write+0x5e>
 800d79c:	f7f4 fe66 	bl	800246c <HAL_GetTick>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	f247 522f 	movw	r2, #29999	; 0x752f
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d9f2      	bls.n	800d794 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d7ae:	4b12      	ldr	r3, [pc, #72]	; (800d7f8 <SD_write+0xa8>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d102      	bne.n	800d7bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	75fb      	strb	r3, [r7, #23]
 800d7ba:	e017      	b.n	800d7ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d7bc:	4b0e      	ldr	r3, [pc, #56]	; (800d7f8 <SD_write+0xa8>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d7c2:	f7f4 fe53 	bl	800246c <HAL_GetTick>
 800d7c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d7c8:	e007      	b.n	800d7da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d7ca:	f7ff feab 	bl	800d524 <BSP_SD_GetCardState>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d102      	bne.n	800d7da <SD_write+0x8a>
          {
            res = RES_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	75fb      	strb	r3, [r7, #23]
            break;
 800d7d8:	e008      	b.n	800d7ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d7da:	f7f4 fe47 	bl	800246c <HAL_GetTick>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d9ee      	bls.n	800d7ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3718      	adds	r7, #24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	20001350 	.word	0x20001350

0800d7fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b08c      	sub	sp, #48	; 0x30
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	603a      	str	r2, [r7, #0]
 800d806:	71fb      	strb	r3, [r7, #7]
 800d808:	460b      	mov	r3, r1
 800d80a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d80c:	2301      	movs	r3, #1
 800d80e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d812:	4b25      	ldr	r3, [pc, #148]	; (800d8a8 <SD_ioctl+0xac>)
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	b2db      	uxtb	r3, r3
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d001      	beq.n	800d824 <SD_ioctl+0x28>
 800d820:	2303      	movs	r3, #3
 800d822:	e03c      	b.n	800d89e <SD_ioctl+0xa2>

  switch (cmd)
 800d824:	79bb      	ldrb	r3, [r7, #6]
 800d826:	2b03      	cmp	r3, #3
 800d828:	d834      	bhi.n	800d894 <SD_ioctl+0x98>
 800d82a:	a201      	add	r2, pc, #4	; (adr r2, 800d830 <SD_ioctl+0x34>)
 800d82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d830:	0800d841 	.word	0x0800d841
 800d834:	0800d849 	.word	0x0800d849
 800d838:	0800d861 	.word	0x0800d861
 800d83c:	0800d87b 	.word	0x0800d87b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d846:	e028      	b.n	800d89a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d848:	f107 0308 	add.w	r3, r7, #8
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff fe79 	bl	800d544 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d852:	6a3a      	ldr	r2, [r7, #32]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d858:	2300      	movs	r3, #0
 800d85a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d85e:	e01c      	b.n	800d89a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d860:	f107 0308 	add.w	r3, r7, #8
 800d864:	4618      	mov	r0, r3
 800d866:	f7ff fe6d 	bl	800d544 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d872:	2300      	movs	r3, #0
 800d874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d878:	e00f      	b.n	800d89a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d87a:	f107 0308 	add.w	r3, r7, #8
 800d87e:	4618      	mov	r0, r3
 800d880:	f7ff fe60 	bl	800d544 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	0a5a      	lsrs	r2, r3, #9
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d88c:	2300      	movs	r3, #0
 800d88e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d892:	e002      	b.n	800d89a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d894:	2304      	movs	r3, #4
 800d896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d89a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3730      	adds	r7, #48	; 0x30
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	20000009 	.word	0x20000009

0800d8ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d8b0:	4b03      	ldr	r3, [pc, #12]	; (800d8c0 <BSP_SD_WriteCpltCallback+0x14>)
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	601a      	str	r2, [r3, #0]
}
 800d8b6:	bf00      	nop
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr
 800d8c0:	20001350 	.word	0x20001350

0800d8c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d8c8:	4b03      	ldr	r3, [pc, #12]	; (800d8d8 <BSP_SD_ReadCpltCallback+0x14>)
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	601a      	str	r2, [r3, #0]
}
 800d8ce:	bf00      	nop
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	20001354 	.word	0x20001354

0800d8dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d8e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d8ec:	f005 ff96 	bl	801381c <USBD_static_malloc>
 800d8f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d105      	bne.n	800d904 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d900:	2302      	movs	r3, #2
 800d902:	e066      	b.n	800d9d2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	7c1b      	ldrb	r3, [r3, #16]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d119      	bne.n	800d948 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d914:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d918:	2202      	movs	r2, #2
 800d91a:	2181      	movs	r1, #129	; 0x81
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f005 fd69 	bl	80133f4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2201      	movs	r2, #1
 800d926:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d92c:	2202      	movs	r2, #2
 800d92e:	2101      	movs	r1, #1
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f005 fd5f 	bl	80133f4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2210      	movs	r2, #16
 800d942:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d946:	e016      	b.n	800d976 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d948:	2340      	movs	r3, #64	; 0x40
 800d94a:	2202      	movs	r2, #2
 800d94c:	2181      	movs	r1, #129	; 0x81
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f005 fd50 	bl	80133f4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d95a:	2340      	movs	r3, #64	; 0x40
 800d95c:	2202      	movs	r2, #2
 800d95e:	2101      	movs	r1, #1
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f005 fd47 	bl	80133f4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2210      	movs	r2, #16
 800d972:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d976:	2308      	movs	r3, #8
 800d978:	2203      	movs	r2, #3
 800d97a:	2182      	movs	r1, #130	; 0x82
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f005 fd39 	bl	80133f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2200      	movs	r2, #0
 800d998:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	7c1b      	ldrb	r3, [r3, #16]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d109      	bne.n	800d9c0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d9b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9b6:	2101      	movs	r1, #1
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f005 fe95 	bl	80136e8 <USBD_LL_PrepareReceive>
 800d9be:	e007      	b.n	800d9d0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d9c6:	2340      	movs	r3, #64	; 0x40
 800d9c8:	2101      	movs	r1, #1
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f005 fe8c 	bl	80136e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d9e6:	2181      	movs	r1, #129	; 0x81
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f005 fd41 	bl	8013470 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d9f4:	2101      	movs	r1, #1
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f005 fd3a 	bl	8013470 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800da04:	2182      	movs	r1, #130	; 0x82
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f005 fd32 	bl	8013470 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00e      	beq.n	800da44 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da36:	4618      	mov	r0, r3
 800da38:	f005 fefe 	bl	8013838 <USBD_static_free>
    pdev->pClassData = NULL;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
	...

0800da50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800da66:	2300      	movs	r3, #0
 800da68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800da6a:	2300      	movs	r3, #0
 800da6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800da74:	2303      	movs	r3, #3
 800da76:	e0af      	b.n	800dbd8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da80:	2b00      	cmp	r3, #0
 800da82:	d03f      	beq.n	800db04 <USBD_CDC_Setup+0xb4>
 800da84:	2b20      	cmp	r3, #32
 800da86:	f040 809f 	bne.w	800dbc8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	88db      	ldrh	r3, [r3, #6]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d02e      	beq.n	800daf0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	b25b      	sxtb	r3, r3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	da16      	bge.n	800daca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800daa8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	88d2      	ldrh	r2, [r2, #6]
 800daae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	88db      	ldrh	r3, [r3, #6]
 800dab4:	2b07      	cmp	r3, #7
 800dab6:	bf28      	it	cs
 800dab8:	2307      	movcs	r3, #7
 800daba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	89fa      	ldrh	r2, [r7, #14]
 800dac0:	4619      	mov	r1, r3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f001 fb43 	bl	800f14e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800dac8:	e085      	b.n	800dbd6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	785a      	ldrb	r2, [r3, #1]
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	88db      	ldrh	r3, [r3, #6]
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dae0:	6939      	ldr	r1, [r7, #16]
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	88db      	ldrh	r3, [r3, #6]
 800dae6:	461a      	mov	r2, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f001 fb5c 	bl	800f1a6 <USBD_CtlPrepareRx>
      break;
 800daee:	e072      	b.n	800dbd6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	683a      	ldr	r2, [r7, #0]
 800dafa:	7850      	ldrb	r0, [r2, #1]
 800dafc:	2200      	movs	r2, #0
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	4798      	blx	r3
      break;
 800db02:	e068      	b.n	800dbd6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	785b      	ldrb	r3, [r3, #1]
 800db08:	2b0b      	cmp	r3, #11
 800db0a:	d852      	bhi.n	800dbb2 <USBD_CDC_Setup+0x162>
 800db0c:	a201      	add	r2, pc, #4	; (adr r2, 800db14 <USBD_CDC_Setup+0xc4>)
 800db0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db12:	bf00      	nop
 800db14:	0800db45 	.word	0x0800db45
 800db18:	0800dbc1 	.word	0x0800dbc1
 800db1c:	0800dbb3 	.word	0x0800dbb3
 800db20:	0800dbb3 	.word	0x0800dbb3
 800db24:	0800dbb3 	.word	0x0800dbb3
 800db28:	0800dbb3 	.word	0x0800dbb3
 800db2c:	0800dbb3 	.word	0x0800dbb3
 800db30:	0800dbb3 	.word	0x0800dbb3
 800db34:	0800dbb3 	.word	0x0800dbb3
 800db38:	0800dbb3 	.word	0x0800dbb3
 800db3c:	0800db6f 	.word	0x0800db6f
 800db40:	0800db99 	.word	0x0800db99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	2b03      	cmp	r3, #3
 800db4e:	d107      	bne.n	800db60 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800db50:	f107 030a 	add.w	r3, r7, #10
 800db54:	2202      	movs	r2, #2
 800db56:	4619      	mov	r1, r3
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f001 faf8 	bl	800f14e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800db5e:	e032      	b.n	800dbc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800db60:	6839      	ldr	r1, [r7, #0]
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f001 fa82 	bl	800f06c <USBD_CtlError>
            ret = USBD_FAIL;
 800db68:	2303      	movs	r3, #3
 800db6a:	75fb      	strb	r3, [r7, #23]
          break;
 800db6c:	e02b      	b.n	800dbc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db74:	b2db      	uxtb	r3, r3
 800db76:	2b03      	cmp	r3, #3
 800db78:	d107      	bne.n	800db8a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800db7a:	f107 030d 	add.w	r3, r7, #13
 800db7e:	2201      	movs	r2, #1
 800db80:	4619      	mov	r1, r3
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f001 fae3 	bl	800f14e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800db88:	e01d      	b.n	800dbc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800db8a:	6839      	ldr	r1, [r7, #0]
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f001 fa6d 	bl	800f06c <USBD_CtlError>
            ret = USBD_FAIL;
 800db92:	2303      	movs	r3, #3
 800db94:	75fb      	strb	r3, [r7, #23]
          break;
 800db96:	e016      	b.n	800dbc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b03      	cmp	r3, #3
 800dba2:	d00f      	beq.n	800dbc4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800dba4:	6839      	ldr	r1, [r7, #0]
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f001 fa60 	bl	800f06c <USBD_CtlError>
            ret = USBD_FAIL;
 800dbac:	2303      	movs	r3, #3
 800dbae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dbb0:	e008      	b.n	800dbc4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dbb2:	6839      	ldr	r1, [r7, #0]
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f001 fa59 	bl	800f06c <USBD_CtlError>
          ret = USBD_FAIL;
 800dbba:	2303      	movs	r3, #3
 800dbbc:	75fb      	strb	r3, [r7, #23]
          break;
 800dbbe:	e002      	b.n	800dbc6 <USBD_CDC_Setup+0x176>
          break;
 800dbc0:	bf00      	nop
 800dbc2:	e008      	b.n	800dbd6 <USBD_CDC_Setup+0x186>
          break;
 800dbc4:	bf00      	nop
      }
      break;
 800dbc6:	e006      	b.n	800dbd6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800dbc8:	6839      	ldr	r1, [r7, #0]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f001 fa4e 	bl	800f06c <USBD_CtlError>
      ret = USBD_FAIL;
 800dbd0:	2303      	movs	r3, #3
 800dbd2:	75fb      	strb	r3, [r7, #23]
      break;
 800dbd4:	bf00      	nop
  }

  return (uint8_t)ret;
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	460b      	mov	r3, r1
 800dbea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbf2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d101      	bne.n	800dc02 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	e04f      	b.n	800dca2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dc0a:	78fa      	ldrb	r2, [r7, #3]
 800dc0c:	6879      	ldr	r1, [r7, #4]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	440b      	add	r3, r1
 800dc18:	3318      	adds	r3, #24
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d029      	beq.n	800dc74 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dc20:	78fa      	ldrb	r2, [r7, #3]
 800dc22:	6879      	ldr	r1, [r7, #4]
 800dc24:	4613      	mov	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	440b      	add	r3, r1
 800dc2e:	3318      	adds	r3, #24
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	78f9      	ldrb	r1, [r7, #3]
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	460b      	mov	r3, r1
 800dc38:	00db      	lsls	r3, r3, #3
 800dc3a:	440b      	add	r3, r1
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4403      	add	r3, r0
 800dc40:	3348      	adds	r3, #72	; 0x48
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	fbb2 f1f3 	udiv	r1, r2, r3
 800dc48:	fb01 f303 	mul.w	r3, r1, r3
 800dc4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d110      	bne.n	800dc74 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dc52:	78fa      	ldrb	r2, [r7, #3]
 800dc54:	6879      	ldr	r1, [r7, #4]
 800dc56:	4613      	mov	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	440b      	add	r3, r1
 800dc60:	3318      	adds	r3, #24
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dc66:	78f9      	ldrb	r1, [r7, #3]
 800dc68:	2300      	movs	r3, #0
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f005 fd03 	bl	8013678 <USBD_LL_Transmit>
 800dc72:	e015      	b.n	800dca0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00b      	beq.n	800dca0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dc96:	68ba      	ldr	r2, [r7, #8]
 800dc98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dc9c:	78fa      	ldrb	r2, [r7, #3]
 800dc9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3710      	adds	r7, #16
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b084      	sub	sp, #16
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d101      	bne.n	800dccc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e015      	b.n	800dcf8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dccc:	78fb      	ldrb	r3, [r7, #3]
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f005 fd41 	bl	8013758 <USBD_LL_GetRxDataSize>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dcf6:	2300      	movs	r3, #0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d101      	bne.n	800dd1a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800dd16:	2303      	movs	r3, #3
 800dd18:	e01b      	b.n	800dd52 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d015      	beq.n	800dd50 <USBD_CDC_EP0_RxReady+0x50>
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dd2a:	2bff      	cmp	r3, #255	; 0xff
 800dd2c:	d010      	beq.n	800dd50 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800dd3c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dd44:	b292      	uxth	r2, r2
 800dd46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	22ff      	movs	r2, #255	; 0xff
 800dd4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
	...

0800dd5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2243      	movs	r2, #67	; 0x43
 800dd68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800dd6a:	4b03      	ldr	r3, [pc, #12]	; (800dd78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr
 800dd78:	20000094 	.word	0x20000094

0800dd7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2243      	movs	r2, #67	; 0x43
 800dd88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800dd8a:	4b03      	ldr	r3, [pc, #12]	; (800dd98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr
 800dd98:	20000050 	.word	0x20000050

0800dd9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2243      	movs	r2, #67	; 0x43
 800dda8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ddaa:	4b03      	ldr	r3, [pc, #12]	; (800ddb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	370c      	adds	r7, #12
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr
 800ddb8:	200000d8 	.word	0x200000d8

0800ddbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	220a      	movs	r2, #10
 800ddc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ddca:	4b03      	ldr	r3, [pc, #12]	; (800ddd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr
 800ddd8:	2000000c 	.word	0x2000000c

0800dddc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d101      	bne.n	800ddf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ddec:	2303      	movs	r3, #3
 800ddee:	e004      	b.n	800ddfa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	370c      	adds	r7, #12
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800de06:	b480      	push	{r7}
 800de08:	b087      	sub	sp, #28
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	60f8      	str	r0, [r7, #12]
 800de0e:	60b9      	str	r1, [r7, #8]
 800de10:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de18:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800de20:	2303      	movs	r3, #3
 800de22:	e008      	b.n	800de36 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	68ba      	ldr	r2, [r7, #8]
 800de28:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800de34:	2300      	movs	r3, #0
}
 800de36:	4618      	mov	r0, r3
 800de38:	371c      	adds	r7, #28
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr

0800de42 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800de42:	b480      	push	{r7}
 800de44:	b085      	sub	sp, #20
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800de5a:	2303      	movs	r3, #3
 800de5c:	e004      	b.n	800de68 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3714      	adds	r7, #20
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800de84:	2301      	movs	r3, #1
 800de86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d101      	bne.n	800de96 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800de92:	2303      	movs	r3, #3
 800de94:	e01a      	b.n	800decc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d114      	bne.n	800deca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800debe:	2181      	movs	r1, #129	; 0x81
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f005 fbd9 	bl	8013678 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800deca:	7bfb      	ldrb	r3, [r7, #15]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800deea:	2b00      	cmp	r3, #0
 800deec:	d101      	bne.n	800def2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800deee:	2303      	movs	r3, #3
 800def0:	e016      	b.n	800df20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	7c1b      	ldrb	r3, [r3, #16]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d109      	bne.n	800df0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df04:	2101      	movs	r1, #1
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f005 fbee 	bl	80136e8 <USBD_LL_PrepareReceive>
 800df0c:	e007      	b.n	800df1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df14:	2340      	movs	r3, #64	; 0x40
 800df16:	2101      	movs	r1, #1
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f005 fbe5 	bl	80136e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df1e:	2300      	movs	r3, #0
}
 800df20:	4618      	mov	r0, r3
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	4613      	mov	r3, r2
 800df34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d101      	bne.n	800df40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800df3c:	2303      	movs	r3, #3
 800df3e:	e01f      	b.n	800df80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2200      	movs	r2, #0
 800df54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d003      	beq.n	800df66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	68ba      	ldr	r2, [r7, #8]
 800df62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2201      	movs	r2, #1
 800df6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	79fa      	ldrb	r2, [r7, #7]
 800df72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f005 f9c1 	bl	80132fc <USBD_LL_Init>
 800df7a:	4603      	mov	r3, r0
 800df7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800df7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df80:	4618      	mov	r0, r3
 800df82:	3718      	adds	r7, #24
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df92:	2300      	movs	r3, #0
 800df94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d101      	bne.n	800dfa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800df9c:	2303      	movs	r3, #3
 800df9e:	e016      	b.n	800dfce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	683a      	ldr	r2, [r7, #0]
 800dfa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00b      	beq.n	800dfcc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfbc:	f107 020e 	add.w	r2, r7, #14
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	4798      	blx	r3
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b082      	sub	sp, #8
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f005 f9d6 	bl	8013390 <USBD_LL_Start>
 800dfe4:	4603      	mov	r3, r0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dfee:	b480      	push	{r7}
 800dff0:	b083      	sub	sp, #12
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	460b      	mov	r3, r1
 800e00e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e010:	2303      	movs	r3, #3
 800e012:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d009      	beq.n	800e032 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	78fa      	ldrb	r2, [r7, #3]
 800e028:	4611      	mov	r1, r2
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	4798      	blx	r3
 800e02e:	4603      	mov	r3, r0
 800e030:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e032:	7bfb      	ldrb	r3, [r7, #15]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	460b      	mov	r3, r1
 800e046:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d007      	beq.n	800e062 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	78fa      	ldrb	r2, [r7, #3]
 800e05c:	4611      	mov	r1, r2
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	4798      	blx	r3
  }

  return USBD_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e07c:	6839      	ldr	r1, [r7, #0]
 800e07e:	4618      	mov	r0, r3
 800e080:	f000 ffba 	bl	800eff8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2201      	movs	r2, #1
 800e088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e092:	461a      	mov	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e0a0:	f003 031f 	and.w	r3, r3, #31
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d01a      	beq.n	800e0de <USBD_LL_SetupStage+0x72>
 800e0a8:	2b02      	cmp	r3, #2
 800e0aa:	d822      	bhi.n	800e0f2 <USBD_LL_SetupStage+0x86>
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <USBD_LL_SetupStage+0x4a>
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d00a      	beq.n	800e0ca <USBD_LL_SetupStage+0x5e>
 800e0b4:	e01d      	b.n	800e0f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 fa62 	bl	800e588 <USBD_StdDevReq>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800e0c8:	e020      	b.n	800e10c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fac6 	bl	800e664 <USBD_StdItfReq>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73fb      	strb	r3, [r7, #15]
      break;
 800e0dc:	e016      	b.n	800e10c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fb05 	bl	800e6f6 <USBD_StdEPReq>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e0f0:	e00c      	b.n	800e10c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e0f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f005 f9eb 	bl	80134dc <USBD_LL_StallEP>
 800e106:	4603      	mov	r3, r0
 800e108:	73fb      	strb	r3, [r7, #15]
      break;
 800e10a:	bf00      	nop
  }

  return ret;
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b086      	sub	sp, #24
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	60f8      	str	r0, [r7, #12]
 800e11e:	460b      	mov	r3, r1
 800e120:	607a      	str	r2, [r7, #4]
 800e122:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e124:	7afb      	ldrb	r3, [r7, #11]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d138      	bne.n	800e19c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e130:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e138:	2b03      	cmp	r3, #3
 800e13a:	d14a      	bne.n	800e1d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	689a      	ldr	r2, [r3, #8]
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	429a      	cmp	r2, r3
 800e146:	d913      	bls.n	800e170 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	689a      	ldr	r2, [r3, #8]
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	1ad2      	subs	r2, r2, r3
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	68da      	ldr	r2, [r3, #12]
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	4293      	cmp	r3, r2
 800e160:	bf28      	it	cs
 800e162:	4613      	movcs	r3, r2
 800e164:	461a      	mov	r2, r3
 800e166:	6879      	ldr	r1, [r7, #4]
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f001 f839 	bl	800f1e0 <USBD_CtlContinueRx>
 800e16e:	e030      	b.n	800e1d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e176:	b2db      	uxtb	r3, r3
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d10b      	bne.n	800e194 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d005      	beq.n	800e194 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f001 f834 	bl	800f202 <USBD_CtlSendStatus>
 800e19a:	e01a      	b.n	800e1d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	d114      	bne.n	800e1d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00e      	beq.n	800e1d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	7afa      	ldrb	r2, [r7, #11]
 800e1be:	4611      	mov	r1, r2
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	4798      	blx	r3
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e1c8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d001      	beq.n	800e1d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e1ce:	7dfb      	ldrb	r3, [r7, #23]
 800e1d0:	e000      	b.n	800e1d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3718      	adds	r7, #24
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e1ea:	7afb      	ldrb	r3, [r7, #11]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d16b      	bne.n	800e2c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	3314      	adds	r3, #20
 800e1f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d156      	bne.n	800e2ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	689a      	ldr	r2, [r3, #8]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d914      	bls.n	800e236 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	1ad2      	subs	r2, r2, r3
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	461a      	mov	r2, r3
 800e220:	6879      	ldr	r1, [r7, #4]
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 ffae 	bl	800f184 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e228:	2300      	movs	r3, #0
 800e22a:	2200      	movs	r2, #0
 800e22c:	2100      	movs	r1, #0
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f005 fa5a 	bl	80136e8 <USBD_LL_PrepareReceive>
 800e234:	e03b      	b.n	800e2ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	68da      	ldr	r2, [r3, #12]
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d11c      	bne.n	800e27c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d316      	bcc.n	800e27c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	685a      	ldr	r2, [r3, #4]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e258:	429a      	cmp	r2, r3
 800e25a:	d20f      	bcs.n	800e27c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e25c:	2200      	movs	r2, #0
 800e25e:	2100      	movs	r1, #0
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f000 ff8f 	bl	800f184 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e26e:	2300      	movs	r3, #0
 800e270:	2200      	movs	r2, #0
 800e272:	2100      	movs	r1, #0
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f005 fa37 	bl	80136e8 <USBD_LL_PrepareReceive>
 800e27a:	e018      	b.n	800e2ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e282:	b2db      	uxtb	r3, r3
 800e284:	2b03      	cmp	r3, #3
 800e286:	d10b      	bne.n	800e2a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d005      	beq.n	800e2a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2a0:	2180      	movs	r1, #128	; 0x80
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f005 f91a 	bl	80134dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f000 ffbd 	bl	800f228 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d122      	bne.n	800e2fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f7ff fe98 	bl	800dfee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e2c6:	e01a      	b.n	800e2fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	2b03      	cmp	r3, #3
 800e2d2:	d114      	bne.n	800e2fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2da:	695b      	ldr	r3, [r3, #20]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00e      	beq.n	800e2fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	7afa      	ldrb	r2, [r7, #11]
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	4798      	blx	r3
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e2f4:	7dfb      	ldrb	r3, [r7, #23]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d001      	beq.n	800e2fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e2fa:	7dfb      	ldrb	r3, [r7, #23]
 800e2fc:	e000      	b.n	800e300 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	3718      	adds	r7, #24
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2200      	movs	r2, #0
 800e32a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e334:	2b00      	cmp	r3, #0
 800e336:	d101      	bne.n	800e33c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e338:	2303      	movs	r3, #3
 800e33a:	e02f      	b.n	800e39c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00f      	beq.n	800e366 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d009      	beq.n	800e366 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	6852      	ldr	r2, [r2, #4]
 800e35e:	b2d2      	uxtb	r2, r2
 800e360:	4611      	mov	r1, r2
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e366:	2340      	movs	r3, #64	; 0x40
 800e368:	2200      	movs	r2, #0
 800e36a:	2100      	movs	r1, #0
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f005 f841 	bl	80133f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2201      	movs	r2, #1
 800e376:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2240      	movs	r2, #64	; 0x40
 800e37e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e382:	2340      	movs	r3, #64	; 0x40
 800e384:	2200      	movs	r2, #0
 800e386:	2180      	movs	r1, #128	; 0x80
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f005 f833 	bl	80133f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2201      	movs	r2, #1
 800e392:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2240      	movs	r2, #64	; 0x40
 800e398:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	78fa      	ldrb	r2, [r7, #3]
 800e3b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e3b6:	2300      	movs	r3, #0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2204      	movs	r2, #4
 800e3de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e3e2:	2300      	movs	r3, #0
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	2b04      	cmp	r3, #4
 800e402:	d106      	bne.n	800e412 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e40a:	b2da      	uxtb	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e432:	2303      	movs	r3, #3
 800e434:	e012      	b.n	800e45c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	2b03      	cmp	r3, #3
 800e440:	d10b      	bne.n	800e45a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e448:	69db      	ldr	r3, [r3, #28]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d005      	beq.n	800e45a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e454:	69db      	ldr	r3, [r3, #28]
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	460b      	mov	r3, r1
 800e46e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e476:	2b00      	cmp	r3, #0
 800e478:	d101      	bne.n	800e47e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e47a:	2303      	movs	r3, #3
 800e47c:	e014      	b.n	800e4a8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e484:	b2db      	uxtb	r3, r3
 800e486:	2b03      	cmp	r3, #3
 800e488:	d10d      	bne.n	800e4a6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e490:	6a1b      	ldr	r3, [r3, #32]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d007      	beq.n	800e4a6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e49c:	6a1b      	ldr	r3, [r3, #32]
 800e49e:	78fa      	ldrb	r2, [r7, #3]
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d101      	bne.n	800e4ca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e4c6:	2303      	movs	r3, #3
 800e4c8:	e014      	b.n	800e4f4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d10d      	bne.n	800e4f2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d007      	beq.n	800e4f2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ea:	78fa      	ldrb	r2, [r7, #3]
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4f2:	2300      	movs	r3, #0
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e504:	2300      	movs	r3, #0
}
 800e506:	4618      	mov	r0, r3
 800e508:	370c      	adds	r7, #12
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr

0800e512 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b082      	sub	sp, #8
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d009      	beq.n	800e540 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	6852      	ldr	r2, [r2, #4]
 800e538:	b2d2      	uxtb	r2, r2
 800e53a:	4611      	mov	r1, r2
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	4798      	blx	r3
  }

  return USBD_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e54a:	b480      	push	{r7}
 800e54c:	b087      	sub	sp, #28
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	3301      	adds	r3, #1
 800e560:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e568:	8a3b      	ldrh	r3, [r7, #16]
 800e56a:	021b      	lsls	r3, r3, #8
 800e56c:	b21a      	sxth	r2, r3
 800e56e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e572:	4313      	orrs	r3, r2
 800e574:	b21b      	sxth	r3, r3
 800e576:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e578:	89fb      	ldrh	r3, [r7, #14]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	371c      	adds	r7, #28
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr
	...

0800e588 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e59e:	2b40      	cmp	r3, #64	; 0x40
 800e5a0:	d005      	beq.n	800e5ae <USBD_StdDevReq+0x26>
 800e5a2:	2b40      	cmp	r3, #64	; 0x40
 800e5a4:	d853      	bhi.n	800e64e <USBD_StdDevReq+0xc6>
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00b      	beq.n	800e5c2 <USBD_StdDevReq+0x3a>
 800e5aa:	2b20      	cmp	r3, #32
 800e5ac:	d14f      	bne.n	800e64e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	6839      	ldr	r1, [r7, #0]
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	4798      	blx	r3
 800e5bc:	4603      	mov	r3, r0
 800e5be:	73fb      	strb	r3, [r7, #15]
      break;
 800e5c0:	e04a      	b.n	800e658 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	785b      	ldrb	r3, [r3, #1]
 800e5c6:	2b09      	cmp	r3, #9
 800e5c8:	d83b      	bhi.n	800e642 <USBD_StdDevReq+0xba>
 800e5ca:	a201      	add	r2, pc, #4	; (adr r2, 800e5d0 <USBD_StdDevReq+0x48>)
 800e5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d0:	0800e625 	.word	0x0800e625
 800e5d4:	0800e639 	.word	0x0800e639
 800e5d8:	0800e643 	.word	0x0800e643
 800e5dc:	0800e62f 	.word	0x0800e62f
 800e5e0:	0800e643 	.word	0x0800e643
 800e5e4:	0800e603 	.word	0x0800e603
 800e5e8:	0800e5f9 	.word	0x0800e5f9
 800e5ec:	0800e643 	.word	0x0800e643
 800e5f0:	0800e61b 	.word	0x0800e61b
 800e5f4:	0800e60d 	.word	0x0800e60d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e5f8:	6839      	ldr	r1, [r7, #0]
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f9de 	bl	800e9bc <USBD_GetDescriptor>
          break;
 800e600:	e024      	b.n	800e64c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fb6d 	bl	800ece4 <USBD_SetAddress>
          break;
 800e60a:	e01f      	b.n	800e64c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 fbac 	bl	800ed6c <USBD_SetConfig>
 800e614:	4603      	mov	r3, r0
 800e616:	73fb      	strb	r3, [r7, #15]
          break;
 800e618:	e018      	b.n	800e64c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e61a:	6839      	ldr	r1, [r7, #0]
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 fc4b 	bl	800eeb8 <USBD_GetConfig>
          break;
 800e622:	e013      	b.n	800e64c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e624:	6839      	ldr	r1, [r7, #0]
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 fc7c 	bl	800ef24 <USBD_GetStatus>
          break;
 800e62c:	e00e      	b.n	800e64c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 fcab 	bl	800ef8c <USBD_SetFeature>
          break;
 800e636:	e009      	b.n	800e64c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fcba 	bl	800efb4 <USBD_ClrFeature>
          break;
 800e640:	e004      	b.n	800e64c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e642:	6839      	ldr	r1, [r7, #0]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 fd11 	bl	800f06c <USBD_CtlError>
          break;
 800e64a:	bf00      	nop
      }
      break;
 800e64c:	e004      	b.n	800e658 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 fd0b 	bl	800f06c <USBD_CtlError>
      break;
 800e656:	bf00      	nop
  }

  return ret;
 800e658:	7bfb      	ldrb	r3, [r7, #15]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop

0800e664 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e66e:	2300      	movs	r3, #0
 800e670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e67a:	2b40      	cmp	r3, #64	; 0x40
 800e67c:	d005      	beq.n	800e68a <USBD_StdItfReq+0x26>
 800e67e:	2b40      	cmp	r3, #64	; 0x40
 800e680:	d82f      	bhi.n	800e6e2 <USBD_StdItfReq+0x7e>
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <USBD_StdItfReq+0x26>
 800e686:	2b20      	cmp	r3, #32
 800e688:	d12b      	bne.n	800e6e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e690:	b2db      	uxtb	r3, r3
 800e692:	3b01      	subs	r3, #1
 800e694:	2b02      	cmp	r3, #2
 800e696:	d81d      	bhi.n	800e6d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	889b      	ldrh	r3, [r3, #4]
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d813      	bhi.n	800e6ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a8:	689b      	ldr	r3, [r3, #8]
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	4798      	blx	r3
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	88db      	ldrh	r3, [r3, #6]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d110      	bne.n	800e6de <USBD_StdItfReq+0x7a>
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10d      	bne.n	800e6de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fd9d 	bl	800f202 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e6c8:	e009      	b.n	800e6de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fccd 	bl	800f06c <USBD_CtlError>
          break;
 800e6d2:	e004      	b.n	800e6de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 fcc8 	bl	800f06c <USBD_CtlError>
          break;
 800e6dc:	e000      	b.n	800e6e0 <USBD_StdItfReq+0x7c>
          break;
 800e6de:	bf00      	nop
      }
      break;
 800e6e0:	e004      	b.n	800e6ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 fcc1 	bl	800f06c <USBD_CtlError>
      break;
 800e6ea:	bf00      	nop
  }

  return ret;
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b084      	sub	sp, #16
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	889b      	ldrh	r3, [r3, #4]
 800e708:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e712:	2b40      	cmp	r3, #64	; 0x40
 800e714:	d007      	beq.n	800e726 <USBD_StdEPReq+0x30>
 800e716:	2b40      	cmp	r3, #64	; 0x40
 800e718:	f200 8145 	bhi.w	800e9a6 <USBD_StdEPReq+0x2b0>
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00c      	beq.n	800e73a <USBD_StdEPReq+0x44>
 800e720:	2b20      	cmp	r3, #32
 800e722:	f040 8140 	bne.w	800e9a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	6839      	ldr	r1, [r7, #0]
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	4798      	blx	r3
 800e734:	4603      	mov	r3, r0
 800e736:	73fb      	strb	r3, [r7, #15]
      break;
 800e738:	e13a      	b.n	800e9b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	785b      	ldrb	r3, [r3, #1]
 800e73e:	2b03      	cmp	r3, #3
 800e740:	d007      	beq.n	800e752 <USBD_StdEPReq+0x5c>
 800e742:	2b03      	cmp	r3, #3
 800e744:	f300 8129 	bgt.w	800e99a <USBD_StdEPReq+0x2a4>
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d07f      	beq.n	800e84c <USBD_StdEPReq+0x156>
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d03c      	beq.n	800e7ca <USBD_StdEPReq+0xd4>
 800e750:	e123      	b.n	800e99a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b02      	cmp	r3, #2
 800e75c:	d002      	beq.n	800e764 <USBD_StdEPReq+0x6e>
 800e75e:	2b03      	cmp	r3, #3
 800e760:	d016      	beq.n	800e790 <USBD_StdEPReq+0x9a>
 800e762:	e02c      	b.n	800e7be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e764:	7bbb      	ldrb	r3, [r7, #14]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00d      	beq.n	800e786 <USBD_StdEPReq+0x90>
 800e76a:	7bbb      	ldrb	r3, [r7, #14]
 800e76c:	2b80      	cmp	r3, #128	; 0x80
 800e76e:	d00a      	beq.n	800e786 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e770:	7bbb      	ldrb	r3, [r7, #14]
 800e772:	4619      	mov	r1, r3
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f004 feb1 	bl	80134dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e77a:	2180      	movs	r1, #128	; 0x80
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f004 fead 	bl	80134dc <USBD_LL_StallEP>
 800e782:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e784:	e020      	b.n	800e7c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e786:	6839      	ldr	r1, [r7, #0]
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 fc6f 	bl	800f06c <USBD_CtlError>
              break;
 800e78e:	e01b      	b.n	800e7c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	885b      	ldrh	r3, [r3, #2]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d10e      	bne.n	800e7b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e798:	7bbb      	ldrb	r3, [r7, #14]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00b      	beq.n	800e7b6 <USBD_StdEPReq+0xc0>
 800e79e:	7bbb      	ldrb	r3, [r7, #14]
 800e7a0:	2b80      	cmp	r3, #128	; 0x80
 800e7a2:	d008      	beq.n	800e7b6 <USBD_StdEPReq+0xc0>
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	88db      	ldrh	r3, [r3, #6]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d104      	bne.n	800e7b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7ac:	7bbb      	ldrb	r3, [r7, #14]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f004 fe93 	bl	80134dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 fd23 	bl	800f202 <USBD_CtlSendStatus>

              break;
 800e7bc:	e004      	b.n	800e7c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e7be:	6839      	ldr	r1, [r7, #0]
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 fc53 	bl	800f06c <USBD_CtlError>
              break;
 800e7c6:	bf00      	nop
          }
          break;
 800e7c8:	e0ec      	b.n	800e9a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d002      	beq.n	800e7dc <USBD_StdEPReq+0xe6>
 800e7d6:	2b03      	cmp	r3, #3
 800e7d8:	d016      	beq.n	800e808 <USBD_StdEPReq+0x112>
 800e7da:	e030      	b.n	800e83e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7dc:	7bbb      	ldrb	r3, [r7, #14]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00d      	beq.n	800e7fe <USBD_StdEPReq+0x108>
 800e7e2:	7bbb      	ldrb	r3, [r7, #14]
 800e7e4:	2b80      	cmp	r3, #128	; 0x80
 800e7e6:	d00a      	beq.n	800e7fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7e8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f004 fe75 	bl	80134dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7f2:	2180      	movs	r1, #128	; 0x80
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f004 fe71 	bl	80134dc <USBD_LL_StallEP>
 800e7fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7fc:	e025      	b.n	800e84a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fc33 	bl	800f06c <USBD_CtlError>
              break;
 800e806:	e020      	b.n	800e84a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	885b      	ldrh	r3, [r3, #2]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d11b      	bne.n	800e848 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e810:	7bbb      	ldrb	r3, [r7, #14]
 800e812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e816:	2b00      	cmp	r3, #0
 800e818:	d004      	beq.n	800e824 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e81a:	7bbb      	ldrb	r3, [r7, #14]
 800e81c:	4619      	mov	r1, r3
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f004 fe92 	bl	8013548 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fcec 	bl	800f202 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e830:	689b      	ldr	r3, [r3, #8]
 800e832:	6839      	ldr	r1, [r7, #0]
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	4798      	blx	r3
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e83c:	e004      	b.n	800e848 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e83e:	6839      	ldr	r1, [r7, #0]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 fc13 	bl	800f06c <USBD_CtlError>
              break;
 800e846:	e000      	b.n	800e84a <USBD_StdEPReq+0x154>
              break;
 800e848:	bf00      	nop
          }
          break;
 800e84a:	e0ab      	b.n	800e9a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e852:	b2db      	uxtb	r3, r3
 800e854:	2b02      	cmp	r3, #2
 800e856:	d002      	beq.n	800e85e <USBD_StdEPReq+0x168>
 800e858:	2b03      	cmp	r3, #3
 800e85a:	d032      	beq.n	800e8c2 <USBD_StdEPReq+0x1cc>
 800e85c:	e097      	b.n	800e98e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e85e:	7bbb      	ldrb	r3, [r7, #14]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d007      	beq.n	800e874 <USBD_StdEPReq+0x17e>
 800e864:	7bbb      	ldrb	r3, [r7, #14]
 800e866:	2b80      	cmp	r3, #128	; 0x80
 800e868:	d004      	beq.n	800e874 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e86a:	6839      	ldr	r1, [r7, #0]
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fbfd 	bl	800f06c <USBD_CtlError>
                break;
 800e872:	e091      	b.n	800e998 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	da0b      	bge.n	800e894 <USBD_StdEPReq+0x19e>
 800e87c:	7bbb      	ldrb	r3, [r7, #14]
 800e87e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e882:	4613      	mov	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4413      	add	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	3310      	adds	r3, #16
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	4413      	add	r3, r2
 800e890:	3304      	adds	r3, #4
 800e892:	e00b      	b.n	800e8ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e894:	7bbb      	ldrb	r3, [r7, #14]
 800e896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e89a:	4613      	mov	r3, r2
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4413      	add	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	3304      	adds	r3, #4
 800e8ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	2202      	movs	r2, #2
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f000 fc47 	bl	800f14e <USBD_CtlSendData>
              break;
 800e8c0:	e06a      	b.n	800e998 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e8c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	da11      	bge.n	800e8ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e8ca:	7bbb      	ldrb	r3, [r7, #14]
 800e8cc:	f003 020f 	and.w	r2, r3, #15
 800e8d0:	6879      	ldr	r1, [r7, #4]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	440b      	add	r3, r1
 800e8dc:	3324      	adds	r3, #36	; 0x24
 800e8de:	881b      	ldrh	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d117      	bne.n	800e914 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 fbc0 	bl	800f06c <USBD_CtlError>
                  break;
 800e8ec:	e054      	b.n	800e998 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e8ee:	7bbb      	ldrb	r3, [r7, #14]
 800e8f0:	f003 020f 	and.w	r2, r3, #15
 800e8f4:	6879      	ldr	r1, [r7, #4]
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4413      	add	r3, r2
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	440b      	add	r3, r1
 800e900:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e904:	881b      	ldrh	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d104      	bne.n	800e914 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e90a:	6839      	ldr	r1, [r7, #0]
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 fbad 	bl	800f06c <USBD_CtlError>
                  break;
 800e912:	e041      	b.n	800e998 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	da0b      	bge.n	800e934 <USBD_StdEPReq+0x23e>
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
 800e91e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e922:	4613      	mov	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4413      	add	r3, r2
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	3310      	adds	r3, #16
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	4413      	add	r3, r2
 800e930:	3304      	adds	r3, #4
 800e932:	e00b      	b.n	800e94c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e934:	7bbb      	ldrb	r3, [r7, #14]
 800e936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e93a:	4613      	mov	r3, r2
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	4413      	add	r3, r2
 800e940:	009b      	lsls	r3, r3, #2
 800e942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	4413      	add	r3, r2
 800e94a:	3304      	adds	r3, #4
 800e94c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e94e:	7bbb      	ldrb	r3, [r7, #14]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <USBD_StdEPReq+0x264>
 800e954:	7bbb      	ldrb	r3, [r7, #14]
 800e956:	2b80      	cmp	r3, #128	; 0x80
 800e958:	d103      	bne.n	800e962 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	2200      	movs	r2, #0
 800e95e:	601a      	str	r2, [r3, #0]
 800e960:	e00e      	b.n	800e980 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e962:	7bbb      	ldrb	r3, [r7, #14]
 800e964:	4619      	mov	r1, r3
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f004 fe24 	bl	80135b4 <USBD_LL_IsStallEP>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d003      	beq.n	800e97a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	2201      	movs	r2, #1
 800e976:	601a      	str	r2, [r3, #0]
 800e978:	e002      	b.n	800e980 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	2200      	movs	r2, #0
 800e97e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	2202      	movs	r2, #2
 800e984:	4619      	mov	r1, r3
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f000 fbe1 	bl	800f14e <USBD_CtlSendData>
              break;
 800e98c:	e004      	b.n	800e998 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e98e:	6839      	ldr	r1, [r7, #0]
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 fb6b 	bl	800f06c <USBD_CtlError>
              break;
 800e996:	bf00      	nop
          }
          break;
 800e998:	e004      	b.n	800e9a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e99a:	6839      	ldr	r1, [r7, #0]
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 fb65 	bl	800f06c <USBD_CtlError>
          break;
 800e9a2:	bf00      	nop
      }
      break;
 800e9a4:	e004      	b.n	800e9b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 fb5f 	bl	800f06c <USBD_CtlError>
      break;
 800e9ae:	bf00      	nop
  }

  return ret;
 800e9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
	...

0800e9bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	885b      	ldrh	r3, [r3, #2]
 800e9d6:	0a1b      	lsrs	r3, r3, #8
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	2b0e      	cmp	r3, #14
 800e9de:	f200 8152 	bhi.w	800ec86 <USBD_GetDescriptor+0x2ca>
 800e9e2:	a201      	add	r2, pc, #4	; (adr r2, 800e9e8 <USBD_GetDescriptor+0x2c>)
 800e9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e8:	0800ea59 	.word	0x0800ea59
 800e9ec:	0800ea71 	.word	0x0800ea71
 800e9f0:	0800eab1 	.word	0x0800eab1
 800e9f4:	0800ec87 	.word	0x0800ec87
 800e9f8:	0800ec87 	.word	0x0800ec87
 800e9fc:	0800ec27 	.word	0x0800ec27
 800ea00:	0800ec53 	.word	0x0800ec53
 800ea04:	0800ec87 	.word	0x0800ec87
 800ea08:	0800ec87 	.word	0x0800ec87
 800ea0c:	0800ec87 	.word	0x0800ec87
 800ea10:	0800ec87 	.word	0x0800ec87
 800ea14:	0800ec87 	.word	0x0800ec87
 800ea18:	0800ec87 	.word	0x0800ec87
 800ea1c:	0800ec87 	.word	0x0800ec87
 800ea20:	0800ea25 	.word	0x0800ea25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea2a:	69db      	ldr	r3, [r3, #28]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00b      	beq.n	800ea48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea36:	69db      	ldr	r3, [r3, #28]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	7c12      	ldrb	r2, [r2, #16]
 800ea3c:	f107 0108 	add.w	r1, r7, #8
 800ea40:	4610      	mov	r0, r2
 800ea42:	4798      	blx	r3
 800ea44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea46:	e126      	b.n	800ec96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea48:	6839      	ldr	r1, [r7, #0]
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 fb0e 	bl	800f06c <USBD_CtlError>
        err++;
 800ea50:	7afb      	ldrb	r3, [r7, #11]
 800ea52:	3301      	adds	r3, #1
 800ea54:	72fb      	strb	r3, [r7, #11]
      break;
 800ea56:	e11e      	b.n	800ec96 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	7c12      	ldrb	r2, [r2, #16]
 800ea64:	f107 0108 	add.w	r1, r7, #8
 800ea68:	4610      	mov	r0, r2
 800ea6a:	4798      	blx	r3
 800ea6c:	60f8      	str	r0, [r7, #12]
      break;
 800ea6e:	e112      	b.n	800ec96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7c1b      	ldrb	r3, [r3, #16]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d10d      	bne.n	800ea94 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea80:	f107 0208 	add.w	r2, r7, #8
 800ea84:	4610      	mov	r0, r2
 800ea86:	4798      	blx	r3
 800ea88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	2202      	movs	r2, #2
 800ea90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea92:	e100      	b.n	800ec96 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9c:	f107 0208 	add.w	r2, r7, #8
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	4798      	blx	r3
 800eaa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	2202      	movs	r2, #2
 800eaac:	701a      	strb	r2, [r3, #0]
      break;
 800eaae:	e0f2      	b.n	800ec96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	885b      	ldrh	r3, [r3, #2]
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	2b05      	cmp	r3, #5
 800eab8:	f200 80ac 	bhi.w	800ec14 <USBD_GetDescriptor+0x258>
 800eabc:	a201      	add	r2, pc, #4	; (adr r2, 800eac4 <USBD_GetDescriptor+0x108>)
 800eabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac2:	bf00      	nop
 800eac4:	0800eadd 	.word	0x0800eadd
 800eac8:	0800eb11 	.word	0x0800eb11
 800eacc:	0800eb45 	.word	0x0800eb45
 800ead0:	0800eb79 	.word	0x0800eb79
 800ead4:	0800ebad 	.word	0x0800ebad
 800ead8:	0800ebe1 	.word	0x0800ebe1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00b      	beq.n	800eb00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	7c12      	ldrb	r2, [r2, #16]
 800eaf4:	f107 0108 	add.w	r1, r7, #8
 800eaf8:	4610      	mov	r0, r2
 800eafa:	4798      	blx	r3
 800eafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eafe:	e091      	b.n	800ec24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fab2 	bl	800f06c <USBD_CtlError>
            err++;
 800eb08:	7afb      	ldrb	r3, [r7, #11]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb0e:	e089      	b.n	800ec24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00b      	beq.n	800eb34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	7c12      	ldrb	r2, [r2, #16]
 800eb28:	f107 0108 	add.w	r1, r7, #8
 800eb2c:	4610      	mov	r0, r2
 800eb2e:	4798      	blx	r3
 800eb30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb32:	e077      	b.n	800ec24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb34:	6839      	ldr	r1, [r7, #0]
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 fa98 	bl	800f06c <USBD_CtlError>
            err++;
 800eb3c:	7afb      	ldrb	r3, [r7, #11]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	72fb      	strb	r3, [r7, #11]
          break;
 800eb42:	e06f      	b.n	800ec24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00b      	beq.n	800eb68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	7c12      	ldrb	r2, [r2, #16]
 800eb5c:	f107 0108 	add.w	r1, r7, #8
 800eb60:	4610      	mov	r0, r2
 800eb62:	4798      	blx	r3
 800eb64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb66:	e05d      	b.n	800ec24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 fa7e 	bl	800f06c <USBD_CtlError>
            err++;
 800eb70:	7afb      	ldrb	r3, [r7, #11]
 800eb72:	3301      	adds	r3, #1
 800eb74:	72fb      	strb	r3, [r7, #11]
          break;
 800eb76:	e055      	b.n	800ec24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb7e:	691b      	ldr	r3, [r3, #16]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00b      	beq.n	800eb9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	7c12      	ldrb	r2, [r2, #16]
 800eb90:	f107 0108 	add.w	r1, r7, #8
 800eb94:	4610      	mov	r0, r2
 800eb96:	4798      	blx	r3
 800eb98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb9a:	e043      	b.n	800ec24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb9c:	6839      	ldr	r1, [r7, #0]
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 fa64 	bl	800f06c <USBD_CtlError>
            err++;
 800eba4:	7afb      	ldrb	r3, [r7, #11]
 800eba6:	3301      	adds	r3, #1
 800eba8:	72fb      	strb	r3, [r7, #11]
          break;
 800ebaa:	e03b      	b.n	800ec24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebb2:	695b      	ldr	r3, [r3, #20]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00b      	beq.n	800ebd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	7c12      	ldrb	r2, [r2, #16]
 800ebc4:	f107 0108 	add.w	r1, r7, #8
 800ebc8:	4610      	mov	r0, r2
 800ebca:	4798      	blx	r3
 800ebcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebce:	e029      	b.n	800ec24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebd0:	6839      	ldr	r1, [r7, #0]
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 fa4a 	bl	800f06c <USBD_CtlError>
            err++;
 800ebd8:	7afb      	ldrb	r3, [r7, #11]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	72fb      	strb	r3, [r7, #11]
          break;
 800ebde:	e021      	b.n	800ec24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00b      	beq.n	800ec04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebf2:	699b      	ldr	r3, [r3, #24]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	7c12      	ldrb	r2, [r2, #16]
 800ebf8:	f107 0108 	add.w	r1, r7, #8
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	4798      	blx	r3
 800ec00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec02:	e00f      	b.n	800ec24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 fa30 	bl	800f06c <USBD_CtlError>
            err++;
 800ec0c:	7afb      	ldrb	r3, [r7, #11]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	72fb      	strb	r3, [r7, #11]
          break;
 800ec12:	e007      	b.n	800ec24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ec14:	6839      	ldr	r1, [r7, #0]
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 fa28 	bl	800f06c <USBD_CtlError>
          err++;
 800ec1c:	7afb      	ldrb	r3, [r7, #11]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ec22:	bf00      	nop
      }
      break;
 800ec24:	e037      	b.n	800ec96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	7c1b      	ldrb	r3, [r3, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d109      	bne.n	800ec42 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec36:	f107 0208 	add.w	r2, r7, #8
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	4798      	blx	r3
 800ec3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec40:	e029      	b.n	800ec96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec42:	6839      	ldr	r1, [r7, #0]
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 fa11 	bl	800f06c <USBD_CtlError>
        err++;
 800ec4a:	7afb      	ldrb	r3, [r7, #11]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ec50:	e021      	b.n	800ec96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	7c1b      	ldrb	r3, [r3, #16]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10d      	bne.n	800ec76 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec62:	f107 0208 	add.w	r2, r7, #8
 800ec66:	4610      	mov	r0, r2
 800ec68:	4798      	blx	r3
 800ec6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	2207      	movs	r2, #7
 800ec72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec74:	e00f      	b.n	800ec96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec76:	6839      	ldr	r1, [r7, #0]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 f9f7 	bl	800f06c <USBD_CtlError>
        err++;
 800ec7e:	7afb      	ldrb	r3, [r7, #11]
 800ec80:	3301      	adds	r3, #1
 800ec82:	72fb      	strb	r3, [r7, #11]
      break;
 800ec84:	e007      	b.n	800ec96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ec86:	6839      	ldr	r1, [r7, #0]
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 f9ef 	bl	800f06c <USBD_CtlError>
      err++;
 800ec8e:	7afb      	ldrb	r3, [r7, #11]
 800ec90:	3301      	adds	r3, #1
 800ec92:	72fb      	strb	r3, [r7, #11]
      break;
 800ec94:	bf00      	nop
  }

  if (err != 0U)
 800ec96:	7afb      	ldrb	r3, [r7, #11]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d11e      	bne.n	800ecda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	88db      	ldrh	r3, [r3, #6]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d016      	beq.n	800ecd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800eca4:	893b      	ldrh	r3, [r7, #8]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d00e      	beq.n	800ecc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	88da      	ldrh	r2, [r3, #6]
 800ecae:	893b      	ldrh	r3, [r7, #8]
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	bf28      	it	cs
 800ecb4:	4613      	movcs	r3, r2
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ecba:	893b      	ldrh	r3, [r7, #8]
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	68f9      	ldr	r1, [r7, #12]
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 fa44 	bl	800f14e <USBD_CtlSendData>
 800ecc6:	e009      	b.n	800ecdc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 f9ce 	bl	800f06c <USBD_CtlError>
 800ecd0:	e004      	b.n	800ecdc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 fa95 	bl	800f202 <USBD_CtlSendStatus>
 800ecd8:	e000      	b.n	800ecdc <USBD_GetDescriptor+0x320>
    return;
 800ecda:	bf00      	nop
  }
}
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop

0800ece4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	889b      	ldrh	r3, [r3, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d131      	bne.n	800ed5a <USBD_SetAddress+0x76>
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	88db      	ldrh	r3, [r3, #6]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d12d      	bne.n	800ed5a <USBD_SetAddress+0x76>
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	885b      	ldrh	r3, [r3, #2]
 800ed02:	2b7f      	cmp	r3, #127	; 0x7f
 800ed04:	d829      	bhi.n	800ed5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	885b      	ldrh	r3, [r3, #2]
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	2b03      	cmp	r3, #3
 800ed1c:	d104      	bne.n	800ed28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ed1e:	6839      	ldr	r1, [r7, #0]
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 f9a3 	bl	800f06c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed26:	e01d      	b.n	800ed64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	7bfa      	ldrb	r2, [r7, #15]
 800ed2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed30:	7bfb      	ldrb	r3, [r7, #15]
 800ed32:	4619      	mov	r1, r3
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f004 fc69 	bl	801360c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 fa61 	bl	800f202 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed40:	7bfb      	ldrb	r3, [r7, #15]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d004      	beq.n	800ed50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2202      	movs	r2, #2
 800ed4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed4e:	e009      	b.n	800ed64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2201      	movs	r2, #1
 800ed54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed58:	e004      	b.n	800ed64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed5a:	6839      	ldr	r1, [r7, #0]
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 f985 	bl	800f06c <USBD_CtlError>
  }
}
 800ed62:	bf00      	nop
 800ed64:	bf00      	nop
 800ed66:	3710      	adds	r7, #16
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	885b      	ldrh	r3, [r3, #2]
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	4b4c      	ldr	r3, [pc, #304]	; (800eeb4 <USBD_SetConfig+0x148>)
 800ed82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed84:	4b4b      	ldr	r3, [pc, #300]	; (800eeb4 <USBD_SetConfig+0x148>)
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d905      	bls.n	800ed98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed8c:	6839      	ldr	r1, [r7, #0]
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f96c 	bl	800f06c <USBD_CtlError>
    return USBD_FAIL;
 800ed94:	2303      	movs	r3, #3
 800ed96:	e088      	b.n	800eeaa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b02      	cmp	r3, #2
 800eda2:	d002      	beq.n	800edaa <USBD_SetConfig+0x3e>
 800eda4:	2b03      	cmp	r3, #3
 800eda6:	d025      	beq.n	800edf4 <USBD_SetConfig+0x88>
 800eda8:	e071      	b.n	800ee8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800edaa:	4b42      	ldr	r3, [pc, #264]	; (800eeb4 <USBD_SetConfig+0x148>)
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d01c      	beq.n	800edec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800edb2:	4b40      	ldr	r3, [pc, #256]	; (800eeb4 <USBD_SetConfig+0x148>)
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	461a      	mov	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edbc:	4b3d      	ldr	r3, [pc, #244]	; (800eeb4 <USBD_SetConfig+0x148>)
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	4619      	mov	r1, r3
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f7ff f91e 	bl	800e004 <USBD_SetClassConfig>
 800edc8:	4603      	mov	r3, r0
 800edca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d004      	beq.n	800eddc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800edd2:	6839      	ldr	r1, [r7, #0]
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f000 f949 	bl	800f06c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800edda:	e065      	b.n	800eea8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 fa10 	bl	800f202 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2203      	movs	r2, #3
 800ede6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800edea:	e05d      	b.n	800eea8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 fa08 	bl	800f202 <USBD_CtlSendStatus>
      break;
 800edf2:	e059      	b.n	800eea8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800edf4:	4b2f      	ldr	r3, [pc, #188]	; (800eeb4 <USBD_SetConfig+0x148>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d112      	bne.n	800ee22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2202      	movs	r2, #2
 800ee00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ee04:	4b2b      	ldr	r3, [pc, #172]	; (800eeb4 <USBD_SetConfig+0x148>)
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	461a      	mov	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee0e:	4b29      	ldr	r3, [pc, #164]	; (800eeb4 <USBD_SetConfig+0x148>)
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	4619      	mov	r1, r3
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f7ff f911 	bl	800e03c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 f9f1 	bl	800f202 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee20:	e042      	b.n	800eea8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ee22:	4b24      	ldr	r3, [pc, #144]	; (800eeb4 <USBD_SetConfig+0x148>)
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	461a      	mov	r2, r3
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d02a      	beq.n	800ee86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	4619      	mov	r1, r3
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f7ff f8ff 	bl	800e03c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee3e:	4b1d      	ldr	r3, [pc, #116]	; (800eeb4 <USBD_SetConfig+0x148>)
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	461a      	mov	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee48:	4b1a      	ldr	r3, [pc, #104]	; (800eeb4 <USBD_SetConfig+0x148>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f7ff f8d8 	bl	800e004 <USBD_SetClassConfig>
 800ee54:	4603      	mov	r3, r0
 800ee56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ee58:	7bfb      	ldrb	r3, [r7, #15]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d00f      	beq.n	800ee7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ee5e:	6839      	ldr	r1, [r7, #0]
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 f903 	bl	800f06c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7ff f8e4 	bl	800e03c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2202      	movs	r2, #2
 800ee78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ee7c:	e014      	b.n	800eea8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 f9bf 	bl	800f202 <USBD_CtlSendStatus>
      break;
 800ee84:	e010      	b.n	800eea8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 f9bb 	bl	800f202 <USBD_CtlSendStatus>
      break;
 800ee8c:	e00c      	b.n	800eea8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ee8e:	6839      	ldr	r1, [r7, #0]
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 f8eb 	bl	800f06c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee96:	4b07      	ldr	r3, [pc, #28]	; (800eeb4 <USBD_SetConfig+0x148>)
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f7ff f8cd 	bl	800e03c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eea2:	2303      	movs	r3, #3
 800eea4:	73fb      	strb	r3, [r7, #15]
      break;
 800eea6:	bf00      	nop
  }

  return ret;
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20001358 	.word	0x20001358

0800eeb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	88db      	ldrh	r3, [r3, #6]
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d004      	beq.n	800eed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eeca:	6839      	ldr	r1, [r7, #0]
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f000 f8cd 	bl	800f06c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eed2:	e023      	b.n	800ef1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	2b02      	cmp	r3, #2
 800eede:	dc02      	bgt.n	800eee6 <USBD_GetConfig+0x2e>
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	dc03      	bgt.n	800eeec <USBD_GetConfig+0x34>
 800eee4:	e015      	b.n	800ef12 <USBD_GetConfig+0x5a>
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d00b      	beq.n	800ef02 <USBD_GetConfig+0x4a>
 800eeea:	e012      	b.n	800ef12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	3308      	adds	r3, #8
 800eef6:	2201      	movs	r2, #1
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 f927 	bl	800f14e <USBD_CtlSendData>
        break;
 800ef00:	e00c      	b.n	800ef1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	3304      	adds	r3, #4
 800ef06:	2201      	movs	r2, #1
 800ef08:	4619      	mov	r1, r3
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 f91f 	bl	800f14e <USBD_CtlSendData>
        break;
 800ef10:	e004      	b.n	800ef1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ef12:	6839      	ldr	r1, [r7, #0]
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 f8a9 	bl	800f06c <USBD_CtlError>
        break;
 800ef1a:	bf00      	nop
}
 800ef1c:	bf00      	nop
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	3b01      	subs	r3, #1
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d81e      	bhi.n	800ef7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	88db      	ldrh	r3, [r3, #6]
 800ef40:	2b02      	cmp	r3, #2
 800ef42:	d004      	beq.n	800ef4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ef44:	6839      	ldr	r1, [r7, #0]
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f000 f890 	bl	800f06c <USBD_CtlError>
        break;
 800ef4c:	e01a      	b.n	800ef84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2201      	movs	r2, #1
 800ef52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d005      	beq.n	800ef6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	f043 0202 	orr.w	r2, r3, #2
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	330c      	adds	r3, #12
 800ef6e:	2202      	movs	r2, #2
 800ef70:	4619      	mov	r1, r3
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 f8eb 	bl	800f14e <USBD_CtlSendData>
      break;
 800ef78:	e004      	b.n	800ef84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef7a:	6839      	ldr	r1, [r7, #0]
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 f875 	bl	800f06c <USBD_CtlError>
      break;
 800ef82:	bf00      	nop
  }
}
 800ef84:	bf00      	nop
 800ef86:	3708      	adds	r7, #8
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	885b      	ldrh	r3, [r3, #2]
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d106      	bne.n	800efac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f92b 	bl	800f202 <USBD_CtlSendStatus>
  }
}
 800efac:	bf00      	nop
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	3b01      	subs	r3, #1
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d80b      	bhi.n	800efe4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	885b      	ldrh	r3, [r3, #2]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d10c      	bne.n	800efee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 f910 	bl	800f202 <USBD_CtlSendStatus>
      }
      break;
 800efe2:	e004      	b.n	800efee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 f840 	bl	800f06c <USBD_CtlError>
      break;
 800efec:	e000      	b.n	800eff0 <USBD_ClrFeature+0x3c>
      break;
 800efee:	bf00      	nop
  }
}
 800eff0:	bf00      	nop
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	781a      	ldrb	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3301      	adds	r3, #1
 800f012:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	781a      	ldrb	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	3301      	adds	r3, #1
 800f020:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	f7ff fa91 	bl	800e54a <SWAPBYTE>
 800f028:	4603      	mov	r3, r0
 800f02a:	461a      	mov	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	3301      	adds	r3, #1
 800f034:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	3301      	adds	r3, #1
 800f03a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f03c:	68f8      	ldr	r0, [r7, #12]
 800f03e:	f7ff fa84 	bl	800e54a <SWAPBYTE>
 800f042:	4603      	mov	r3, r0
 800f044:	461a      	mov	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	3301      	adds	r3, #1
 800f04e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	3301      	adds	r3, #1
 800f054:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7ff fa77 	bl	800e54a <SWAPBYTE>
 800f05c:	4603      	mov	r3, r0
 800f05e:	461a      	mov	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	80da      	strh	r2, [r3, #6]
}
 800f064:	bf00      	nop
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f076:	2180      	movs	r1, #128	; 0x80
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f004 fa2f 	bl	80134dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f07e:	2100      	movs	r1, #0
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f004 fa2b 	bl	80134dc <USBD_LL_StallEP>
}
 800f086:	bf00      	nop
 800f088:	3708      	adds	r7, #8
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b086      	sub	sp, #24
 800f092:	af00      	add	r7, sp, #0
 800f094:	60f8      	str	r0, [r7, #12]
 800f096:	60b9      	str	r1, [r7, #8]
 800f098:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f09a:	2300      	movs	r3, #0
 800f09c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d036      	beq.n	800f112 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f0a8:	6938      	ldr	r0, [r7, #16]
 800f0aa:	f000 f836 	bl	800f11a <USBD_GetLen>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f0bc:	7dfb      	ldrb	r3, [r7, #23]
 800f0be:	68ba      	ldr	r2, [r7, #8]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	7812      	ldrb	r2, [r2, #0]
 800f0c6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
 800f0d0:	68ba      	ldr	r2, [r7, #8]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	2203      	movs	r2, #3
 800f0d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f0d8:	7dfb      	ldrb	r3, [r7, #23]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f0de:	e013      	b.n	800f108 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f0e0:	7dfb      	ldrb	r3, [r7, #23]
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	693a      	ldr	r2, [r7, #16]
 800f0e8:	7812      	ldrb	r2, [r2, #0]
 800f0ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	613b      	str	r3, [r7, #16]
    idx++;
 800f0f2:	7dfb      	ldrb	r3, [r7, #23]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f0f8:	7dfb      	ldrb	r3, [r7, #23]
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	2200      	movs	r2, #0
 800f100:	701a      	strb	r2, [r3, #0]
    idx++;
 800f102:	7dfb      	ldrb	r3, [r7, #23]
 800f104:	3301      	adds	r3, #1
 800f106:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1e7      	bne.n	800f0e0 <USBD_GetString+0x52>
 800f110:	e000      	b.n	800f114 <USBD_GetString+0x86>
    return;
 800f112:	bf00      	nop
  }
}
 800f114:	3718      	adds	r7, #24
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}

0800f11a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f11a:	b480      	push	{r7}
 800f11c:	b085      	sub	sp, #20
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f122:	2300      	movs	r3, #0
 800f124:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f12a:	e005      	b.n	800f138 <USBD_GetLen+0x1e>
  {
    len++;
 800f12c:	7bfb      	ldrb	r3, [r7, #15]
 800f12e:	3301      	adds	r3, #1
 800f130:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	3301      	adds	r3, #1
 800f136:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d1f5      	bne.n	800f12c <USBD_GetLen+0x12>
  }

  return len;
 800f140:	7bfb      	ldrb	r3, [r7, #15]
}
 800f142:	4618      	mov	r0, r3
 800f144:	3714      	adds	r7, #20
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr

0800f14e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b084      	sub	sp, #16
 800f152:	af00      	add	r7, sp, #0
 800f154:	60f8      	str	r0, [r7, #12]
 800f156:	60b9      	str	r1, [r7, #8]
 800f158:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2202      	movs	r2, #2
 800f15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	2100      	movs	r1, #0
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f004 fa7f 	bl	8013678 <USBD_LL_Transmit>

  return USBD_OK;
 800f17a:	2300      	movs	r3, #0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	68ba      	ldr	r2, [r7, #8]
 800f194:	2100      	movs	r1, #0
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f004 fa6e 	bl	8013678 <USBD_LL_Transmit>

  return USBD_OK;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}

0800f1a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b084      	sub	sp, #16
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	60f8      	str	r0, [r7, #12]
 800f1ae:	60b9      	str	r1, [r7, #8]
 800f1b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2203      	movs	r2, #3
 800f1b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	687a      	ldr	r2, [r7, #4]
 800f1be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	68ba      	ldr	r2, [r7, #8]
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f004 fa89 	bl	80136e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	68f8      	ldr	r0, [r7, #12]
 800f1f4:	f004 fa78 	bl	80136e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f202:	b580      	push	{r7, lr}
 800f204:	b082      	sub	sp, #8
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2204      	movs	r2, #4
 800f20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f212:	2300      	movs	r3, #0
 800f214:	2200      	movs	r2, #0
 800f216:	2100      	movs	r1, #0
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f004 fa2d 	bl	8013678 <USBD_LL_Transmit>

  return USBD_OK;
 800f21e:	2300      	movs	r3, #0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2205      	movs	r2, #5
 800f234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f238:	2300      	movs	r3, #0
 800f23a:	2200      	movs	r2, #0
 800f23c:	2100      	movs	r1, #0
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f004 fa52 	bl	80136e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f244:	2300      	movs	r3, #0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
	...

0800f250 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	4603      	mov	r3, r0
 800f258:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	4a08      	ldr	r2, [pc, #32]	; (800f280 <disk_status+0x30>)
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4413      	add	r3, r2
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	79fa      	ldrb	r2, [r7, #7]
 800f268:	4905      	ldr	r1, [pc, #20]	; (800f280 <disk_status+0x30>)
 800f26a:	440a      	add	r2, r1
 800f26c:	7a12      	ldrb	r2, [r2, #8]
 800f26e:	4610      	mov	r0, r2
 800f270:	4798      	blx	r3
 800f272:	4603      	mov	r3, r0
 800f274:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f276:	7bfb      	ldrb	r3, [r7, #15]
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3710      	adds	r7, #16
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	20001384 	.word	0x20001384

0800f284 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	4603      	mov	r3, r0
 800f28c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f28e:	2300      	movs	r3, #0
 800f290:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f292:	79fb      	ldrb	r3, [r7, #7]
 800f294:	4a0d      	ldr	r2, [pc, #52]	; (800f2cc <disk_initialize+0x48>)
 800f296:	5cd3      	ldrb	r3, [r2, r3]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d111      	bne.n	800f2c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f29c:	79fb      	ldrb	r3, [r7, #7]
 800f29e:	4a0b      	ldr	r2, [pc, #44]	; (800f2cc <disk_initialize+0x48>)
 800f2a0:	2101      	movs	r1, #1
 800f2a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	4a09      	ldr	r2, [pc, #36]	; (800f2cc <disk_initialize+0x48>)
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	4413      	add	r3, r2
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	79fa      	ldrb	r2, [r7, #7]
 800f2b2:	4906      	ldr	r1, [pc, #24]	; (800f2cc <disk_initialize+0x48>)
 800f2b4:	440a      	add	r2, r1
 800f2b6:	7a12      	ldrb	r2, [r2, #8]
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	4798      	blx	r3
 800f2bc:	4603      	mov	r3, r0
 800f2be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	20001384 	.word	0x20001384

0800f2d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f2d0:	b590      	push	{r4, r7, lr}
 800f2d2:	b087      	sub	sp, #28
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60b9      	str	r1, [r7, #8]
 800f2d8:	607a      	str	r2, [r7, #4]
 800f2da:	603b      	str	r3, [r7, #0]
 800f2dc:	4603      	mov	r3, r0
 800f2de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
 800f2e2:	4a0a      	ldr	r2, [pc, #40]	; (800f30c <disk_read+0x3c>)
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	689c      	ldr	r4, [r3, #8]
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
 800f2ee:	4a07      	ldr	r2, [pc, #28]	; (800f30c <disk_read+0x3c>)
 800f2f0:	4413      	add	r3, r2
 800f2f2:	7a18      	ldrb	r0, [r3, #8]
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	687a      	ldr	r2, [r7, #4]
 800f2f8:	68b9      	ldr	r1, [r7, #8]
 800f2fa:	47a0      	blx	r4
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800f300:	7dfb      	ldrb	r3, [r7, #23]
}
 800f302:	4618      	mov	r0, r3
 800f304:	371c      	adds	r7, #28
 800f306:	46bd      	mov	sp, r7
 800f308:	bd90      	pop	{r4, r7, pc}
 800f30a:	bf00      	nop
 800f30c:	20001384 	.word	0x20001384

0800f310 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f310:	b590      	push	{r4, r7, lr}
 800f312:	b087      	sub	sp, #28
 800f314:	af00      	add	r7, sp, #0
 800f316:	60b9      	str	r1, [r7, #8]
 800f318:	607a      	str	r2, [r7, #4]
 800f31a:	603b      	str	r3, [r7, #0]
 800f31c:	4603      	mov	r3, r0
 800f31e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f320:	7bfb      	ldrb	r3, [r7, #15]
 800f322:	4a0a      	ldr	r2, [pc, #40]	; (800f34c <disk_write+0x3c>)
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	4413      	add	r3, r2
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	68dc      	ldr	r4, [r3, #12]
 800f32c:	7bfb      	ldrb	r3, [r7, #15]
 800f32e:	4a07      	ldr	r2, [pc, #28]	; (800f34c <disk_write+0x3c>)
 800f330:	4413      	add	r3, r2
 800f332:	7a18      	ldrb	r0, [r3, #8]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	68b9      	ldr	r1, [r7, #8]
 800f33a:	47a0      	blx	r4
 800f33c:	4603      	mov	r3, r0
 800f33e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f340:	7dfb      	ldrb	r3, [r7, #23]
}
 800f342:	4618      	mov	r0, r3
 800f344:	371c      	adds	r7, #28
 800f346:	46bd      	mov	sp, r7
 800f348:	bd90      	pop	{r4, r7, pc}
 800f34a:	bf00      	nop
 800f34c:	20001384 	.word	0x20001384

0800f350 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	4603      	mov	r3, r0
 800f358:	603a      	str	r2, [r7, #0]
 800f35a:	71fb      	strb	r3, [r7, #7]
 800f35c:	460b      	mov	r3, r1
 800f35e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	4a09      	ldr	r2, [pc, #36]	; (800f388 <disk_ioctl+0x38>)
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4413      	add	r3, r2
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	691b      	ldr	r3, [r3, #16]
 800f36c:	79fa      	ldrb	r2, [r7, #7]
 800f36e:	4906      	ldr	r1, [pc, #24]	; (800f388 <disk_ioctl+0x38>)
 800f370:	440a      	add	r2, r1
 800f372:	7a10      	ldrb	r0, [r2, #8]
 800f374:	79b9      	ldrb	r1, [r7, #6]
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	4798      	blx	r3
 800f37a:	4603      	mov	r3, r0
 800f37c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	20001384 	.word	0x20001384

0800f38c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f38c:	b480      	push	{r7}
 800f38e:	b085      	sub	sp, #20
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	3301      	adds	r3, #1
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f39c:	89fb      	ldrh	r3, [r7, #14]
 800f39e:	021b      	lsls	r3, r3, #8
 800f3a0:	b21a      	sxth	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	b21b      	sxth	r3, r3
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	b21b      	sxth	r3, r3
 800f3ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f3ae:	89fb      	ldrh	r3, [r7, #14]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3714      	adds	r7, #20
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	3303      	adds	r3, #3
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	021b      	lsls	r3, r3, #8
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	3202      	adds	r2, #2
 800f3d4:	7812      	ldrb	r2, [r2, #0]
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	021b      	lsls	r3, r3, #8
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	3201      	adds	r2, #1
 800f3e2:	7812      	ldrb	r2, [r2, #0]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	021b      	lsls	r3, r3, #8
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	7812      	ldrb	r2, [r2, #0]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3714      	adds	r7, #20
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f402:	b480      	push	{r7}
 800f404:	b083      	sub	sp, #12
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	460b      	mov	r3, r1
 800f40c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	1c5a      	adds	r2, r3, #1
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	887a      	ldrh	r2, [r7, #2]
 800f416:	b2d2      	uxtb	r2, r2
 800f418:	701a      	strb	r2, [r3, #0]
 800f41a:	887b      	ldrh	r3, [r7, #2]
 800f41c:	0a1b      	lsrs	r3, r3, #8
 800f41e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	607a      	str	r2, [r7, #4]
 800f426:	887a      	ldrh	r2, [r7, #2]
 800f428:	b2d2      	uxtb	r2, r2
 800f42a:	701a      	strb	r2, [r3, #0]
}
 800f42c:	bf00      	nop
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	1c5a      	adds	r2, r3, #1
 800f446:	607a      	str	r2, [r7, #4]
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	b2d2      	uxtb	r2, r2
 800f44c:	701a      	strb	r2, [r3, #0]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	0a1b      	lsrs	r3, r3, #8
 800f452:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	1c5a      	adds	r2, r3, #1
 800f458:	607a      	str	r2, [r7, #4]
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	b2d2      	uxtb	r2, r2
 800f45e:	701a      	strb	r2, [r3, #0]
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	0a1b      	lsrs	r3, r3, #8
 800f464:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	b2d2      	uxtb	r2, r2
 800f470:	701a      	strb	r2, [r3, #0]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	0a1b      	lsrs	r3, r3, #8
 800f476:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	1c5a      	adds	r2, r3, #1
 800f47c:	607a      	str	r2, [r7, #4]
 800f47e:	683a      	ldr	r2, [r7, #0]
 800f480:	b2d2      	uxtb	r2, r2
 800f482:	701a      	strb	r2, [r3, #0]
}
 800f484:	bf00      	nop
 800f486:	370c      	adds	r7, #12
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f490:	b480      	push	{r7}
 800f492:	b087      	sub	sp, #28
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00d      	beq.n	800f4c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f4aa:	693a      	ldr	r2, [r7, #16]
 800f4ac:	1c53      	adds	r3, r2, #1
 800f4ae:	613b      	str	r3, [r7, #16]
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	1c59      	adds	r1, r3, #1
 800f4b4:	6179      	str	r1, [r7, #20]
 800f4b6:	7812      	ldrb	r2, [r2, #0]
 800f4b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	607b      	str	r3, [r7, #4]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1f1      	bne.n	800f4aa <mem_cpy+0x1a>
	}
}
 800f4c6:	bf00      	nop
 800f4c8:	371c      	adds	r7, #28
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f4d2:	b480      	push	{r7}
 800f4d4:	b087      	sub	sp, #28
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	60f8      	str	r0, [r7, #12]
 800f4da:	60b9      	str	r1, [r7, #8]
 800f4dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	1c5a      	adds	r2, r3, #1
 800f4e6:	617a      	str	r2, [r7, #20]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	b2d2      	uxtb	r2, r2
 800f4ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	607b      	str	r3, [r7, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d1f3      	bne.n	800f4e2 <mem_set+0x10>
}
 800f4fa:	bf00      	nop
 800f4fc:	bf00      	nop
 800f4fe:	371c      	adds	r7, #28
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f508:	b480      	push	{r7}
 800f50a:	b089      	sub	sp, #36	; 0x24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	61fb      	str	r3, [r7, #28]
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f51c:	2300      	movs	r3, #0
 800f51e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	1c5a      	adds	r2, r3, #1
 800f524:	61fa      	str	r2, [r7, #28]
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	4619      	mov	r1, r3
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	1c5a      	adds	r2, r3, #1
 800f52e:	61ba      	str	r2, [r7, #24]
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	1acb      	subs	r3, r1, r3
 800f534:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	3b01      	subs	r3, #1
 800f53a:	607b      	str	r3, [r7, #4]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d002      	beq.n	800f548 <mem_cmp+0x40>
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d0eb      	beq.n	800f520 <mem_cmp+0x18>

	return r;
 800f548:	697b      	ldr	r3, [r7, #20]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3724      	adds	r7, #36	; 0x24
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr

0800f556 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f556:	b480      	push	{r7}
 800f558:	b083      	sub	sp, #12
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
 800f55e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f560:	e002      	b.n	800f568 <chk_chr+0x12>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	3301      	adds	r3, #1
 800f566:	607b      	str	r3, [r7, #4]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d005      	beq.n	800f57c <chk_chr+0x26>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	461a      	mov	r2, r3
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	4293      	cmp	r3, r2
 800f57a:	d1f2      	bne.n	800f562 <chk_chr+0xc>
	return *str;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	781b      	ldrb	r3, [r3, #0]
}
 800f580:	4618      	mov	r0, r3
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b085      	sub	sp, #20
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f596:	2300      	movs	r3, #0
 800f598:	60bb      	str	r3, [r7, #8]
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	60fb      	str	r3, [r7, #12]
 800f59e:	e029      	b.n	800f5f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f5a0:	4a27      	ldr	r2, [pc, #156]	; (800f640 <chk_lock+0xb4>)
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	011b      	lsls	r3, r3, #4
 800f5a6:	4413      	add	r3, r2
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d01d      	beq.n	800f5ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f5ae:	4a24      	ldr	r2, [pc, #144]	; (800f640 <chk_lock+0xb4>)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	011b      	lsls	r3, r3, #4
 800f5b4:	4413      	add	r3, r2
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d116      	bne.n	800f5ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f5c0:	4a1f      	ldr	r2, [pc, #124]	; (800f640 <chk_lock+0xb4>)
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	011b      	lsls	r3, r3, #4
 800f5c6:	4413      	add	r3, r2
 800f5c8:	3304      	adds	r3, #4
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d10c      	bne.n	800f5ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f5d4:	4a1a      	ldr	r2, [pc, #104]	; (800f640 <chk_lock+0xb4>)
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	011b      	lsls	r3, r3, #4
 800f5da:	4413      	add	r3, r2
 800f5dc:	3308      	adds	r3, #8
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d102      	bne.n	800f5ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f5e8:	e007      	b.n	800f5fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	60fb      	str	r3, [r7, #12]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d9d2      	bls.n	800f5a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	d109      	bne.n	800f614 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d102      	bne.n	800f60c <chk_lock+0x80>
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b02      	cmp	r3, #2
 800f60a:	d101      	bne.n	800f610 <chk_lock+0x84>
 800f60c:	2300      	movs	r3, #0
 800f60e:	e010      	b.n	800f632 <chk_lock+0xa6>
 800f610:	2312      	movs	r3, #18
 800f612:	e00e      	b.n	800f632 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d108      	bne.n	800f62c <chk_lock+0xa0>
 800f61a:	4a09      	ldr	r2, [pc, #36]	; (800f640 <chk_lock+0xb4>)
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	011b      	lsls	r3, r3, #4
 800f620:	4413      	add	r3, r2
 800f622:	330c      	adds	r3, #12
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f62a:	d101      	bne.n	800f630 <chk_lock+0xa4>
 800f62c:	2310      	movs	r3, #16
 800f62e:	e000      	b.n	800f632 <chk_lock+0xa6>
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	3714      	adds	r7, #20
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	20001364 	.word	0x20001364

0800f644 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f64a:	2300      	movs	r3, #0
 800f64c:	607b      	str	r3, [r7, #4]
 800f64e:	e002      	b.n	800f656 <enq_lock+0x12>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	3301      	adds	r3, #1
 800f654:	607b      	str	r3, [r7, #4]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d806      	bhi.n	800f66a <enq_lock+0x26>
 800f65c:	4a09      	ldr	r2, [pc, #36]	; (800f684 <enq_lock+0x40>)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	011b      	lsls	r3, r3, #4
 800f662:	4413      	add	r3, r2
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d1f2      	bne.n	800f650 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	bf14      	ite	ne
 800f670:	2301      	movne	r3, #1
 800f672:	2300      	moveq	r3, #0
 800f674:	b2db      	uxtb	r3, r3
}
 800f676:	4618      	mov	r0, r3
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	20001364 	.word	0x20001364

0800f688 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f692:	2300      	movs	r3, #0
 800f694:	60fb      	str	r3, [r7, #12]
 800f696:	e01f      	b.n	800f6d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f698:	4a41      	ldr	r2, [pc, #260]	; (800f7a0 <inc_lock+0x118>)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	011b      	lsls	r3, r3, #4
 800f69e:	4413      	add	r3, r2
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d113      	bne.n	800f6d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f6aa:	4a3d      	ldr	r2, [pc, #244]	; (800f7a0 <inc_lock+0x118>)
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	011b      	lsls	r3, r3, #4
 800f6b0:	4413      	add	r3, r2
 800f6b2:	3304      	adds	r3, #4
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d109      	bne.n	800f6d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f6be:	4a38      	ldr	r2, [pc, #224]	; (800f7a0 <inc_lock+0x118>)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	4413      	add	r3, r2
 800f6c6:	3308      	adds	r3, #8
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d006      	beq.n	800f6e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	60fb      	str	r3, [r7, #12]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d9dc      	bls.n	800f698 <inc_lock+0x10>
 800f6de:	e000      	b.n	800f6e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f6e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	d132      	bne.n	800f74e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	e002      	b.n	800f6f4 <inc_lock+0x6c>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	60fb      	str	r3, [r7, #12]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d806      	bhi.n	800f708 <inc_lock+0x80>
 800f6fa:	4a29      	ldr	r2, [pc, #164]	; (800f7a0 <inc_lock+0x118>)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	4413      	add	r3, r2
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1f2      	bne.n	800f6ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2b02      	cmp	r3, #2
 800f70c:	d101      	bne.n	800f712 <inc_lock+0x8a>
 800f70e:	2300      	movs	r3, #0
 800f710:	e040      	b.n	800f794 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	4922      	ldr	r1, [pc, #136]	; (800f7a0 <inc_lock+0x118>)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	011b      	lsls	r3, r3, #4
 800f71c:	440b      	add	r3, r1
 800f71e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	689a      	ldr	r2, [r3, #8]
 800f724:	491e      	ldr	r1, [pc, #120]	; (800f7a0 <inc_lock+0x118>)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	011b      	lsls	r3, r3, #4
 800f72a:	440b      	add	r3, r1
 800f72c:	3304      	adds	r3, #4
 800f72e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	695a      	ldr	r2, [r3, #20]
 800f734:	491a      	ldr	r1, [pc, #104]	; (800f7a0 <inc_lock+0x118>)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	011b      	lsls	r3, r3, #4
 800f73a:	440b      	add	r3, r1
 800f73c:	3308      	adds	r3, #8
 800f73e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f740:	4a17      	ldr	r2, [pc, #92]	; (800f7a0 <inc_lock+0x118>)
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	011b      	lsls	r3, r3, #4
 800f746:	4413      	add	r3, r2
 800f748:	330c      	adds	r3, #12
 800f74a:	2200      	movs	r2, #0
 800f74c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d009      	beq.n	800f768 <inc_lock+0xe0>
 800f754:	4a12      	ldr	r2, [pc, #72]	; (800f7a0 <inc_lock+0x118>)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	011b      	lsls	r3, r3, #4
 800f75a:	4413      	add	r3, r2
 800f75c:	330c      	adds	r3, #12
 800f75e:	881b      	ldrh	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d001      	beq.n	800f768 <inc_lock+0xe0>
 800f764:	2300      	movs	r3, #0
 800f766:	e015      	b.n	800f794 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d108      	bne.n	800f780 <inc_lock+0xf8>
 800f76e:	4a0c      	ldr	r2, [pc, #48]	; (800f7a0 <inc_lock+0x118>)
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	011b      	lsls	r3, r3, #4
 800f774:	4413      	add	r3, r2
 800f776:	330c      	adds	r3, #12
 800f778:	881b      	ldrh	r3, [r3, #0]
 800f77a:	3301      	adds	r3, #1
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	e001      	b.n	800f784 <inc_lock+0xfc>
 800f780:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f784:	4906      	ldr	r1, [pc, #24]	; (800f7a0 <inc_lock+0x118>)
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	011b      	lsls	r3, r3, #4
 800f78a:	440b      	add	r3, r1
 800f78c:	330c      	adds	r3, #12
 800f78e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	3301      	adds	r3, #1
}
 800f794:	4618      	mov	r0, r3
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	20001364 	.word	0x20001364

0800f7a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	607b      	str	r3, [r7, #4]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d825      	bhi.n	800f804 <dec_lock+0x60>
		n = Files[i].ctr;
 800f7b8:	4a17      	ldr	r2, [pc, #92]	; (800f818 <dec_lock+0x74>)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	011b      	lsls	r3, r3, #4
 800f7be:	4413      	add	r3, r2
 800f7c0:	330c      	adds	r3, #12
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f7c6:	89fb      	ldrh	r3, [r7, #14]
 800f7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7cc:	d101      	bne.n	800f7d2 <dec_lock+0x2e>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f7d2:	89fb      	ldrh	r3, [r7, #14]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d002      	beq.n	800f7de <dec_lock+0x3a>
 800f7d8:	89fb      	ldrh	r3, [r7, #14]
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f7de:	4a0e      	ldr	r2, [pc, #56]	; (800f818 <dec_lock+0x74>)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	011b      	lsls	r3, r3, #4
 800f7e4:	4413      	add	r3, r2
 800f7e6:	330c      	adds	r3, #12
 800f7e8:	89fa      	ldrh	r2, [r7, #14]
 800f7ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f7ec:	89fb      	ldrh	r3, [r7, #14]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d105      	bne.n	800f7fe <dec_lock+0x5a>
 800f7f2:	4a09      	ldr	r2, [pc, #36]	; (800f818 <dec_lock+0x74>)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	011b      	lsls	r3, r3, #4
 800f7f8:	4413      	add	r3, r2
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	737b      	strb	r3, [r7, #13]
 800f802:	e001      	b.n	800f808 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f804:	2302      	movs	r3, #2
 800f806:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f808:	7b7b      	ldrb	r3, [r7, #13]
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3714      	adds	r7, #20
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	20001364 	.word	0x20001364

0800f81c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f824:	2300      	movs	r3, #0
 800f826:	60fb      	str	r3, [r7, #12]
 800f828:	e010      	b.n	800f84c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f82a:	4a0d      	ldr	r2, [pc, #52]	; (800f860 <clear_lock+0x44>)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	011b      	lsls	r3, r3, #4
 800f830:	4413      	add	r3, r2
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	429a      	cmp	r2, r3
 800f838:	d105      	bne.n	800f846 <clear_lock+0x2a>
 800f83a:	4a09      	ldr	r2, [pc, #36]	; (800f860 <clear_lock+0x44>)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	4413      	add	r3, r2
 800f842:	2200      	movs	r2, #0
 800f844:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3301      	adds	r3, #1
 800f84a:	60fb      	str	r3, [r7, #12]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d9eb      	bls.n	800f82a <clear_lock+0xe>
	}
}
 800f852:	bf00      	nop
 800f854:	bf00      	nop
 800f856:	3714      	adds	r7, #20
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr
 800f860:	20001364 	.word	0x20001364

0800f864 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b086      	sub	sp, #24
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f86c:	2300      	movs	r3, #0
 800f86e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	78db      	ldrb	r3, [r3, #3]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d034      	beq.n	800f8e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f87c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	7858      	ldrb	r0, [r3, #1]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f888:	2301      	movs	r3, #1
 800f88a:	697a      	ldr	r2, [r7, #20]
 800f88c:	f7ff fd40 	bl	800f310 <disk_write>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d002      	beq.n	800f89c <sync_window+0x38>
			res = FR_DISK_ERR;
 800f896:	2301      	movs	r3, #1
 800f898:	73fb      	strb	r3, [r7, #15]
 800f89a:	e022      	b.n	800f8e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a6:	697a      	ldr	r2, [r7, #20]
 800f8a8:	1ad2      	subs	r2, r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	69db      	ldr	r3, [r3, #28]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d217      	bcs.n	800f8e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	789b      	ldrb	r3, [r3, #2]
 800f8b6:	613b      	str	r3, [r7, #16]
 800f8b8:	e010      	b.n	800f8dc <sync_window+0x78>
					wsect += fs->fsize;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	69db      	ldr	r3, [r3, #28]
 800f8be:	697a      	ldr	r2, [r7, #20]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	7858      	ldrb	r0, [r3, #1]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	697a      	ldr	r2, [r7, #20]
 800f8d2:	f7ff fd1d 	bl	800f310 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	613b      	str	r3, [r7, #16]
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d8eb      	bhi.n	800f8ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3718      	adds	r7, #24
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	429a      	cmp	r2, r3
 800f902:	d01b      	beq.n	800f93c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7ff ffad 	bl	800f864 <sync_window>
 800f90a:	4603      	mov	r3, r0
 800f90c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d113      	bne.n	800f93c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	7858      	ldrb	r0, [r3, #1]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f91e:	2301      	movs	r3, #1
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	f7ff fcd5 	bl	800f2d0 <disk_read>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d004      	beq.n	800f936 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f92c:	f04f 33ff 	mov.w	r3, #4294967295
 800f930:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f932:	2301      	movs	r3, #1
 800f934:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
	...

0800f948 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff ff87 	bl	800f864 <sync_window>
 800f956:	4603      	mov	r3, r0
 800f958:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f95a:	7bfb      	ldrb	r3, [r7, #15]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d158      	bne.n	800fa12 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b03      	cmp	r3, #3
 800f966:	d148      	bne.n	800f9fa <sync_fs+0xb2>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	791b      	ldrb	r3, [r3, #4]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d144      	bne.n	800f9fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	3334      	adds	r3, #52	; 0x34
 800f974:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f978:	2100      	movs	r1, #0
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7ff fda9 	bl	800f4d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	3334      	adds	r3, #52	; 0x34
 800f984:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f988:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7ff fd38 	bl	800f402 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	3334      	adds	r3, #52	; 0x34
 800f996:	4921      	ldr	r1, [pc, #132]	; (800fa1c <sync_fs+0xd4>)
 800f998:	4618      	mov	r0, r3
 800f99a:	f7ff fd4d 	bl	800f438 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	3334      	adds	r3, #52	; 0x34
 800f9a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f9a6:	491e      	ldr	r1, [pc, #120]	; (800fa20 <sync_fs+0xd8>)
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7ff fd45 	bl	800f438 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	3334      	adds	r3, #52	; 0x34
 800f9b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	695b      	ldr	r3, [r3, #20]
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	4610      	mov	r0, r2
 800f9be:	f7ff fd3b 	bl	800f438 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	3334      	adds	r3, #52	; 0x34
 800f9c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	691b      	ldr	r3, [r3, #16]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	4610      	mov	r0, r2
 800f9d2:	f7ff fd31 	bl	800f438 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6a1b      	ldr	r3, [r3, #32]
 800f9da:	1c5a      	adds	r2, r3, #1
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	7858      	ldrb	r0, [r3, #1]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	f7ff fc8e 	bl	800f310 <disk_write>
			fs->fsi_flag = 0;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	785b      	ldrb	r3, [r3, #1]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2100      	movs	r1, #0
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7ff fca4 	bl	800f350 <disk_ioctl>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <sync_fs+0xca>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fa12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}
 800fa1c:	41615252 	.word	0x41615252
 800fa20:	61417272 	.word	0x61417272

0800fa24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	3b02      	subs	r3, #2
 800fa32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	699b      	ldr	r3, [r3, #24]
 800fa38:	3b02      	subs	r3, #2
 800fa3a:	683a      	ldr	r2, [r7, #0]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d301      	bcc.n	800fa44 <clust2sect+0x20>
 800fa40:	2300      	movs	r3, #0
 800fa42:	e008      	b.n	800fa56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	895b      	ldrh	r3, [r3, #10]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	fb03 f202 	mul.w	r2, r3, r2
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa54:	4413      	add	r3, r2
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b086      	sub	sp, #24
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d904      	bls.n	800fa82 <get_fat+0x20>
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	699b      	ldr	r3, [r3, #24]
 800fa7c:	683a      	ldr	r2, [r7, #0]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d302      	bcc.n	800fa88 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fa82:	2301      	movs	r3, #1
 800fa84:	617b      	str	r3, [r7, #20]
 800fa86:	e08f      	b.n	800fba8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fa88:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	2b03      	cmp	r3, #3
 800fa94:	d062      	beq.n	800fb5c <get_fat+0xfa>
 800fa96:	2b03      	cmp	r3, #3
 800fa98:	dc7c      	bgt.n	800fb94 <get_fat+0x132>
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	d002      	beq.n	800faa4 <get_fat+0x42>
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	d042      	beq.n	800fb28 <get_fat+0xc6>
 800faa2:	e077      	b.n	800fb94 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	60fb      	str	r3, [r7, #12]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	085b      	lsrs	r3, r3, #1
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4413      	add	r3, r2
 800fab0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	0a5b      	lsrs	r3, r3, #9
 800faba:	4413      	add	r3, r2
 800fabc:	4619      	mov	r1, r3
 800fabe:	6938      	ldr	r0, [r7, #16]
 800fac0:	f7ff ff14 	bl	800f8ec <move_window>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d167      	bne.n	800fb9a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	1c5a      	adds	r2, r3, #1
 800face:	60fa      	str	r2, [r7, #12]
 800fad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fad4:	693a      	ldr	r2, [r7, #16]
 800fad6:	4413      	add	r3, r2
 800fad8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fadc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	0a5b      	lsrs	r3, r3, #9
 800fae6:	4413      	add	r3, r2
 800fae8:	4619      	mov	r1, r3
 800faea:	6938      	ldr	r0, [r7, #16]
 800faec:	f7ff fefe 	bl	800f8ec <move_window>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d153      	bne.n	800fb9e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fafc:	693a      	ldr	r2, [r7, #16]
 800fafe:	4413      	add	r3, r2
 800fb00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb04:	021b      	lsls	r3, r3, #8
 800fb06:	461a      	mov	r2, r3
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	f003 0301 	and.w	r3, r3, #1
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d002      	beq.n	800fb1e <get_fat+0xbc>
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	091b      	lsrs	r3, r3, #4
 800fb1c:	e002      	b.n	800fb24 <get_fat+0xc2>
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb24:	617b      	str	r3, [r7, #20]
			break;
 800fb26:	e03f      	b.n	800fba8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	0a1b      	lsrs	r3, r3, #8
 800fb30:	4413      	add	r3, r2
 800fb32:	4619      	mov	r1, r3
 800fb34:	6938      	ldr	r0, [r7, #16]
 800fb36:	f7ff fed9 	bl	800f8ec <move_window>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d130      	bne.n	800fba2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	005b      	lsls	r3, r3, #1
 800fb4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fb4e:	4413      	add	r3, r2
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7ff fc1b 	bl	800f38c <ld_word>
 800fb56:	4603      	mov	r3, r0
 800fb58:	617b      	str	r3, [r7, #20]
			break;
 800fb5a:	e025      	b.n	800fba8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	09db      	lsrs	r3, r3, #7
 800fb64:	4413      	add	r3, r2
 800fb66:	4619      	mov	r1, r3
 800fb68:	6938      	ldr	r0, [r7, #16]
 800fb6a:	f7ff febf 	bl	800f8ec <move_window>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d118      	bne.n	800fba6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fb82:	4413      	add	r3, r2
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff fc19 	bl	800f3bc <ld_dword>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fb90:	617b      	str	r3, [r7, #20]
			break;
 800fb92:	e009      	b.n	800fba8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fb94:	2301      	movs	r3, #1
 800fb96:	617b      	str	r3, [r7, #20]
 800fb98:	e006      	b.n	800fba8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb9a:	bf00      	nop
 800fb9c:	e004      	b.n	800fba8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb9e:	bf00      	nop
 800fba0:	e002      	b.n	800fba8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fba2:	bf00      	nop
 800fba4:	e000      	b.n	800fba8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fba6:	bf00      	nop
		}
	}

	return val;
 800fba8:	697b      	ldr	r3, [r7, #20]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3718      	adds	r7, #24
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fbb2:	b590      	push	{r4, r7, lr}
 800fbb4:	b089      	sub	sp, #36	; 0x24
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	60f8      	str	r0, [r7, #12]
 800fbba:	60b9      	str	r1, [r7, #8]
 800fbbc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fbbe:	2302      	movs	r3, #2
 800fbc0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	f240 80d2 	bls.w	800fd6e <put_fat+0x1bc>
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	699b      	ldr	r3, [r3, #24]
 800fbce:	68ba      	ldr	r2, [r7, #8]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	f080 80cc 	bcs.w	800fd6e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	2b03      	cmp	r3, #3
 800fbdc:	f000 8096 	beq.w	800fd0c <put_fat+0x15a>
 800fbe0:	2b03      	cmp	r3, #3
 800fbe2:	f300 80cd 	bgt.w	800fd80 <put_fat+0x1ce>
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d002      	beq.n	800fbf0 <put_fat+0x3e>
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	d06e      	beq.n	800fccc <put_fat+0x11a>
 800fbee:	e0c7      	b.n	800fd80 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	61bb      	str	r3, [r7, #24]
 800fbf4:	69bb      	ldr	r3, [r7, #24]
 800fbf6:	085b      	lsrs	r3, r3, #1
 800fbf8:	69ba      	ldr	r2, [r7, #24]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	0a5b      	lsrs	r3, r3, #9
 800fc06:	4413      	add	r3, r2
 800fc08:	4619      	mov	r1, r3
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	f7ff fe6e 	bl	800f8ec <move_window>
 800fc10:	4603      	mov	r3, r0
 800fc12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc14:	7ffb      	ldrb	r3, [r7, #31]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f040 80ab 	bne.w	800fd72 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	1c59      	adds	r1, r3, #1
 800fc26:	61b9      	str	r1, [r7, #24]
 800fc28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc2c:	4413      	add	r3, r2
 800fc2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	f003 0301 	and.w	r3, r3, #1
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d00d      	beq.n	800fc56 <put_fat+0xa4>
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	b25b      	sxtb	r3, r3
 800fc40:	f003 030f 	and.w	r3, r3, #15
 800fc44:	b25a      	sxtb	r2, r3
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	011b      	lsls	r3, r3, #4
 800fc4c:	b25b      	sxtb	r3, r3
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	b25b      	sxtb	r3, r3
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	e001      	b.n	800fc5a <put_fat+0xa8>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	697a      	ldr	r2, [r7, #20]
 800fc5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2201      	movs	r2, #1
 800fc62:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	0a5b      	lsrs	r3, r3, #9
 800fc6c:	4413      	add	r3, r2
 800fc6e:	4619      	mov	r1, r3
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f7ff fe3b 	bl	800f8ec <move_window>
 800fc76:	4603      	mov	r3, r0
 800fc78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc7a:	7ffb      	ldrb	r3, [r7, #31]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d17a      	bne.n	800fd76 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc8c:	4413      	add	r3, r2
 800fc8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	f003 0301 	and.w	r3, r3, #1
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d003      	beq.n	800fca2 <put_fat+0xf0>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	091b      	lsrs	r3, r3, #4
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	e00e      	b.n	800fcc0 <put_fat+0x10e>
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	b25b      	sxtb	r3, r3
 800fca8:	f023 030f 	bic.w	r3, r3, #15
 800fcac:	b25a      	sxtb	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	0a1b      	lsrs	r3, r3, #8
 800fcb2:	b25b      	sxtb	r3, r3
 800fcb4:	f003 030f 	and.w	r3, r3, #15
 800fcb8:	b25b      	sxtb	r3, r3
 800fcba:	4313      	orrs	r3, r2
 800fcbc:	b25b      	sxtb	r3, r3
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	697a      	ldr	r2, [r7, #20]
 800fcc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	70da      	strb	r2, [r3, #3]
			break;
 800fcca:	e059      	b.n	800fd80 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	0a1b      	lsrs	r3, r3, #8
 800fcd4:	4413      	add	r3, r2
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f7ff fe07 	bl	800f8ec <move_window>
 800fcde:	4603      	mov	r3, r0
 800fce0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fce2:	7ffb      	ldrb	r3, [r7, #31]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d148      	bne.n	800fd7a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	005b      	lsls	r3, r3, #1
 800fcf2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fcf6:	4413      	add	r3, r2
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	b292      	uxth	r2, r2
 800fcfc:	4611      	mov	r1, r2
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7ff fb7f 	bl	800f402 <st_word>
			fs->wflag = 1;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2201      	movs	r2, #1
 800fd08:	70da      	strb	r2, [r3, #3]
			break;
 800fd0a:	e039      	b.n	800fd80 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	09db      	lsrs	r3, r3, #7
 800fd14:	4413      	add	r3, r2
 800fd16:	4619      	mov	r1, r3
 800fd18:	68f8      	ldr	r0, [r7, #12]
 800fd1a:	f7ff fde7 	bl	800f8ec <move_window>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd22:	7ffb      	ldrb	r3, [r7, #31]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d12a      	bne.n	800fd7e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	009b      	lsls	r3, r3, #2
 800fd38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fd3c:	4413      	add	r3, r2
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7ff fb3c 	bl	800f3bc <ld_dword>
 800fd44:	4603      	mov	r3, r0
 800fd46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fd4a:	4323      	orrs	r3, r4
 800fd4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fd5c:	4413      	add	r3, r2
 800fd5e:	6879      	ldr	r1, [r7, #4]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7ff fb69 	bl	800f438 <st_dword>
			fs->wflag = 1;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	70da      	strb	r2, [r3, #3]
			break;
 800fd6c:	e008      	b.n	800fd80 <put_fat+0x1ce>
		}
	}
 800fd6e:	bf00      	nop
 800fd70:	e006      	b.n	800fd80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fd72:	bf00      	nop
 800fd74:	e004      	b.n	800fd80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fd76:	bf00      	nop
 800fd78:	e002      	b.n	800fd80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fd7a:	bf00      	nop
 800fd7c:	e000      	b.n	800fd80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fd7e:	bf00      	nop
	return res;
 800fd80:	7ffb      	ldrb	r3, [r7, #31]
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3724      	adds	r7, #36	; 0x24
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd90      	pop	{r4, r7, pc}

0800fd8a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b088      	sub	sp, #32
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	60f8      	str	r0, [r7, #12]
 800fd92:	60b9      	str	r1, [r7, #8]
 800fd94:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fd96:	2300      	movs	r3, #0
 800fd98:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	d904      	bls.n	800fdb0 <remove_chain+0x26>
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	699b      	ldr	r3, [r3, #24]
 800fdaa:	68ba      	ldr	r2, [r7, #8]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d301      	bcc.n	800fdb4 <remove_chain+0x2a>
 800fdb0:	2302      	movs	r3, #2
 800fdb2:	e04b      	b.n	800fe4c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d00c      	beq.n	800fdd4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fdba:	f04f 32ff 	mov.w	r2, #4294967295
 800fdbe:	6879      	ldr	r1, [r7, #4]
 800fdc0:	69b8      	ldr	r0, [r7, #24]
 800fdc2:	f7ff fef6 	bl	800fbb2 <put_fat>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fdca:	7ffb      	ldrb	r3, [r7, #31]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <remove_chain+0x4a>
 800fdd0:	7ffb      	ldrb	r3, [r7, #31]
 800fdd2:	e03b      	b.n	800fe4c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fdd4:	68b9      	ldr	r1, [r7, #8]
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f7ff fe43 	bl	800fa62 <get_fat>
 800fddc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d031      	beq.n	800fe48 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d101      	bne.n	800fdee <remove_chain+0x64>
 800fdea:	2302      	movs	r3, #2
 800fdec:	e02e      	b.n	800fe4c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf4:	d101      	bne.n	800fdfa <remove_chain+0x70>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	e028      	b.n	800fe4c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	68b9      	ldr	r1, [r7, #8]
 800fdfe:	69b8      	ldr	r0, [r7, #24]
 800fe00:	f7ff fed7 	bl	800fbb2 <put_fat>
 800fe04:	4603      	mov	r3, r0
 800fe06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fe08:	7ffb      	ldrb	r3, [r7, #31]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <remove_chain+0x88>
 800fe0e:	7ffb      	ldrb	r3, [r7, #31]
 800fe10:	e01c      	b.n	800fe4c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fe12:	69bb      	ldr	r3, [r7, #24]
 800fe14:	695a      	ldr	r2, [r3, #20]
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	699b      	ldr	r3, [r3, #24]
 800fe1a:	3b02      	subs	r3, #2
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d20b      	bcs.n	800fe38 <remove_chain+0xae>
			fs->free_clst++;
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	695b      	ldr	r3, [r3, #20]
 800fe24:	1c5a      	adds	r2, r3, #1
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	791b      	ldrb	r3, [r3, #4]
 800fe2e:	f043 0301 	orr.w	r3, r3, #1
 800fe32:	b2da      	uxtb	r2, r3
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	699b      	ldr	r3, [r3, #24]
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d3c6      	bcc.n	800fdd4 <remove_chain+0x4a>
 800fe46:	e000      	b.n	800fe4a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fe48:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fe4a:	2300      	movs	r3, #0
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3720      	adds	r7, #32
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b088      	sub	sp, #32
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10d      	bne.n	800fe86 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	691b      	ldr	r3, [r3, #16]
 800fe6e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d004      	beq.n	800fe80 <create_chain+0x2c>
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	699b      	ldr	r3, [r3, #24]
 800fe7a:	69ba      	ldr	r2, [r7, #24]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d31b      	bcc.n	800feb8 <create_chain+0x64>
 800fe80:	2301      	movs	r3, #1
 800fe82:	61bb      	str	r3, [r7, #24]
 800fe84:	e018      	b.n	800feb8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fe86:	6839      	ldr	r1, [r7, #0]
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7ff fdea 	bl	800fa62 <get_fat>
 800fe8e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d801      	bhi.n	800fe9a <create_chain+0x46>
 800fe96:	2301      	movs	r3, #1
 800fe98:	e070      	b.n	800ff7c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea0:	d101      	bne.n	800fea6 <create_chain+0x52>
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	e06a      	b.n	800ff7c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	699b      	ldr	r3, [r3, #24]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	429a      	cmp	r2, r3
 800feae:	d201      	bcs.n	800feb4 <create_chain+0x60>
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	e063      	b.n	800ff7c <create_chain+0x128>
		scl = clst;
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	3301      	adds	r3, #1
 800fec0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	699b      	ldr	r3, [r3, #24]
 800fec6:	69fa      	ldr	r2, [r7, #28]
 800fec8:	429a      	cmp	r2, r3
 800feca:	d307      	bcc.n	800fedc <create_chain+0x88>
				ncl = 2;
 800fecc:	2302      	movs	r3, #2
 800fece:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fed0:	69fa      	ldr	r2, [r7, #28]
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d901      	bls.n	800fedc <create_chain+0x88>
 800fed8:	2300      	movs	r3, #0
 800feda:	e04f      	b.n	800ff7c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fedc:	69f9      	ldr	r1, [r7, #28]
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7ff fdbf 	bl	800fa62 <get_fat>
 800fee4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d00e      	beq.n	800ff0a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d003      	beq.n	800fefa <create_chain+0xa6>
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef8:	d101      	bne.n	800fefe <create_chain+0xaa>
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	e03e      	b.n	800ff7c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fefe:	69fa      	ldr	r2, [r7, #28]
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d1da      	bne.n	800febc <create_chain+0x68>
 800ff06:	2300      	movs	r3, #0
 800ff08:	e038      	b.n	800ff7c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ff0a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ff0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff10:	69f9      	ldr	r1, [r7, #28]
 800ff12:	6938      	ldr	r0, [r7, #16]
 800ff14:	f7ff fe4d 	bl	800fbb2 <put_fat>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ff1c:	7dfb      	ldrb	r3, [r7, #23]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d109      	bne.n	800ff36 <create_chain+0xe2>
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d006      	beq.n	800ff36 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ff28:	69fa      	ldr	r2, [r7, #28]
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	6938      	ldr	r0, [r7, #16]
 800ff2e:	f7ff fe40 	bl	800fbb2 <put_fat>
 800ff32:	4603      	mov	r3, r0
 800ff34:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ff36:	7dfb      	ldrb	r3, [r7, #23]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d116      	bne.n	800ff6a <create_chain+0x116>
		fs->last_clst = ncl;
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	69fa      	ldr	r2, [r7, #28]
 800ff40:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	695a      	ldr	r2, [r3, #20]
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	699b      	ldr	r3, [r3, #24]
 800ff4a:	3b02      	subs	r3, #2
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d804      	bhi.n	800ff5a <create_chain+0x106>
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	695b      	ldr	r3, [r3, #20]
 800ff54:	1e5a      	subs	r2, r3, #1
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	791b      	ldrb	r3, [r3, #4]
 800ff5e:	f043 0301 	orr.w	r3, r3, #1
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	711a      	strb	r2, [r3, #4]
 800ff68:	e007      	b.n	800ff7a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ff6a:	7dfb      	ldrb	r3, [r7, #23]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d102      	bne.n	800ff76 <create_chain+0x122>
 800ff70:	f04f 33ff 	mov.w	r3, #4294967295
 800ff74:	e000      	b.n	800ff78 <create_chain+0x124>
 800ff76:	2301      	movs	r3, #1
 800ff78:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ff7a:	69fb      	ldr	r3, [r7, #28]
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3720      	adds	r7, #32
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ff84:	b480      	push	{r7}
 800ff86:	b087      	sub	sp, #28
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff98:	3304      	adds	r3, #4
 800ff9a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	0a5b      	lsrs	r3, r3, #9
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	8952      	ldrh	r2, [r2, #10]
 800ffa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffa8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	1d1a      	adds	r2, r3, #4
 800ffae:	613a      	str	r2, [r7, #16]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d101      	bne.n	800ffbe <clmt_clust+0x3a>
 800ffba:	2300      	movs	r3, #0
 800ffbc:	e010      	b.n	800ffe0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ffbe:	697a      	ldr	r2, [r7, #20]
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d307      	bcc.n	800ffd6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ffc6:	697a      	ldr	r2, [r7, #20]
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	617b      	str	r3, [r7, #20]
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	3304      	adds	r3, #4
 800ffd2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ffd4:	e7e9      	b.n	800ffaa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ffd6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	4413      	add	r3, r2
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	371c      	adds	r7, #28
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b086      	sub	sp, #24
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010002:	d204      	bcs.n	801000e <dir_sdi+0x22>
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	f003 031f 	and.w	r3, r3, #31
 801000a:	2b00      	cmp	r3, #0
 801000c:	d001      	beq.n	8010012 <dir_sdi+0x26>
		return FR_INT_ERR;
 801000e:	2302      	movs	r3, #2
 8010010:	e063      	b.n	80100da <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	683a      	ldr	r2, [r7, #0]
 8010016:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d106      	bne.n	8010032 <dir_sdi+0x46>
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	2b02      	cmp	r3, #2
 801002a:	d902      	bls.n	8010032 <dir_sdi+0x46>
		clst = fs->dirbase;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010030:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d10c      	bne.n	8010052 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	095b      	lsrs	r3, r3, #5
 801003c:	693a      	ldr	r2, [r7, #16]
 801003e:	8912      	ldrh	r2, [r2, #8]
 8010040:	4293      	cmp	r3, r2
 8010042:	d301      	bcc.n	8010048 <dir_sdi+0x5c>
 8010044:	2302      	movs	r3, #2
 8010046:	e048      	b.n	80100da <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	61da      	str	r2, [r3, #28]
 8010050:	e029      	b.n	80100a6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	895b      	ldrh	r3, [r3, #10]
 8010056:	025b      	lsls	r3, r3, #9
 8010058:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801005a:	e019      	b.n	8010090 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6979      	ldr	r1, [r7, #20]
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff fcfe 	bl	800fa62 <get_fat>
 8010066:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006e:	d101      	bne.n	8010074 <dir_sdi+0x88>
 8010070:	2301      	movs	r3, #1
 8010072:	e032      	b.n	80100da <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d904      	bls.n	8010084 <dir_sdi+0x98>
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	699b      	ldr	r3, [r3, #24]
 801007e:	697a      	ldr	r2, [r7, #20]
 8010080:	429a      	cmp	r2, r3
 8010082:	d301      	bcc.n	8010088 <dir_sdi+0x9c>
 8010084:	2302      	movs	r3, #2
 8010086:	e028      	b.n	80100da <dir_sdi+0xee>
			ofs -= csz;
 8010088:	683a      	ldr	r2, [r7, #0]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	1ad3      	subs	r3, r2, r3
 801008e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010090:	683a      	ldr	r2, [r7, #0]
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	429a      	cmp	r2, r3
 8010096:	d2e1      	bcs.n	801005c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010098:	6979      	ldr	r1, [r7, #20]
 801009a:	6938      	ldr	r0, [r7, #16]
 801009c:	f7ff fcc2 	bl	800fa24 <clust2sect>
 80100a0:	4602      	mov	r2, r0
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	697a      	ldr	r2, [r7, #20]
 80100aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	69db      	ldr	r3, [r3, #28]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d101      	bne.n	80100b8 <dir_sdi+0xcc>
 80100b4:	2302      	movs	r3, #2
 80100b6:	e010      	b.n	80100da <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	69da      	ldr	r2, [r3, #28]
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	0a5b      	lsrs	r3, r3, #9
 80100c0:	441a      	add	r2, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100d2:	441a      	add	r2, r3
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80100d8:	2300      	movs	r3, #0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3718      	adds	r7, #24
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b086      	sub	sp, #24
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
 80100ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	3320      	adds	r3, #32
 80100f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	69db      	ldr	r3, [r3, #28]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d003      	beq.n	801010a <dir_next+0x28>
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010108:	d301      	bcc.n	801010e <dir_next+0x2c>
 801010a:	2304      	movs	r3, #4
 801010c:	e0aa      	b.n	8010264 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010114:	2b00      	cmp	r3, #0
 8010116:	f040 8098 	bne.w	801024a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	69db      	ldr	r3, [r3, #28]
 801011e:	1c5a      	adds	r2, r3, #1
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	699b      	ldr	r3, [r3, #24]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d10b      	bne.n	8010144 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	095b      	lsrs	r3, r3, #5
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	8912      	ldrh	r2, [r2, #8]
 8010134:	4293      	cmp	r3, r2
 8010136:	f0c0 8088 	bcc.w	801024a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	61da      	str	r2, [r3, #28]
 8010140:	2304      	movs	r3, #4
 8010142:	e08f      	b.n	8010264 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	0a5b      	lsrs	r3, r3, #9
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	8952      	ldrh	r2, [r2, #10]
 801014c:	3a01      	subs	r2, #1
 801014e:	4013      	ands	r3, r2
 8010150:	2b00      	cmp	r3, #0
 8010152:	d17a      	bne.n	801024a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	699b      	ldr	r3, [r3, #24]
 801015a:	4619      	mov	r1, r3
 801015c:	4610      	mov	r0, r2
 801015e:	f7ff fc80 	bl	800fa62 <get_fat>
 8010162:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	2b01      	cmp	r3, #1
 8010168:	d801      	bhi.n	801016e <dir_next+0x8c>
 801016a:	2302      	movs	r3, #2
 801016c:	e07a      	b.n	8010264 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010174:	d101      	bne.n	801017a <dir_next+0x98>
 8010176:	2301      	movs	r3, #1
 8010178:	e074      	b.n	8010264 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	699b      	ldr	r3, [r3, #24]
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	429a      	cmp	r2, r3
 8010182:	d358      	bcc.n	8010236 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d104      	bne.n	8010194 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2200      	movs	r2, #0
 801018e:	61da      	str	r2, [r3, #28]
 8010190:	2304      	movs	r3, #4
 8010192:	e067      	b.n	8010264 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	699b      	ldr	r3, [r3, #24]
 801019a:	4619      	mov	r1, r3
 801019c:	4610      	mov	r0, r2
 801019e:	f7ff fe59 	bl	800fe54 <create_chain>
 80101a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d101      	bne.n	80101ae <dir_next+0xcc>
 80101aa:	2307      	movs	r3, #7
 80101ac:	e05a      	b.n	8010264 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d101      	bne.n	80101b8 <dir_next+0xd6>
 80101b4:	2302      	movs	r3, #2
 80101b6:	e055      	b.n	8010264 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101be:	d101      	bne.n	80101c4 <dir_next+0xe2>
 80101c0:	2301      	movs	r3, #1
 80101c2:	e04f      	b.n	8010264 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80101c4:	68f8      	ldr	r0, [r7, #12]
 80101c6:	f7ff fb4d 	bl	800f864 <sync_window>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d001      	beq.n	80101d4 <dir_next+0xf2>
 80101d0:	2301      	movs	r3, #1
 80101d2:	e047      	b.n	8010264 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	3334      	adds	r3, #52	; 0x34
 80101d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80101dc:	2100      	movs	r1, #0
 80101de:	4618      	mov	r0, r3
 80101e0:	f7ff f977 	bl	800f4d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80101e4:	2300      	movs	r3, #0
 80101e6:	613b      	str	r3, [r7, #16]
 80101e8:	6979      	ldr	r1, [r7, #20]
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f7ff fc1a 	bl	800fa24 <clust2sect>
 80101f0:	4602      	mov	r2, r0
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	631a      	str	r2, [r3, #48]	; 0x30
 80101f6:	e012      	b.n	801021e <dir_next+0x13c>
						fs->wflag = 1;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2201      	movs	r2, #1
 80101fc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	f7ff fb30 	bl	800f864 <sync_window>
 8010204:	4603      	mov	r3, r0
 8010206:	2b00      	cmp	r3, #0
 8010208:	d001      	beq.n	801020e <dir_next+0x12c>
 801020a:	2301      	movs	r3, #1
 801020c:	e02a      	b.n	8010264 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	3301      	adds	r3, #1
 8010212:	613b      	str	r3, [r7, #16]
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010218:	1c5a      	adds	r2, r3, #1
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	631a      	str	r2, [r3, #48]	; 0x30
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	895b      	ldrh	r3, [r3, #10]
 8010222:	461a      	mov	r2, r3
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	4293      	cmp	r3, r2
 8010228:	d3e6      	bcc.n	80101f8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	1ad2      	subs	r2, r2, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801023c:	6979      	ldr	r1, [r7, #20]
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	f7ff fbf0 	bl	800fa24 <clust2sect>
 8010244:	4602      	mov	r2, r0
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	68ba      	ldr	r2, [r7, #8]
 801024e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801025c:	441a      	add	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010262:	2300      	movs	r3, #0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3718      	adds	r7, #24
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801027c:	2100      	movs	r1, #0
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f7ff feb4 	bl	800ffec <dir_sdi>
 8010284:	4603      	mov	r3, r0
 8010286:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010288:	7dfb      	ldrb	r3, [r7, #23]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d12b      	bne.n	80102e6 <dir_alloc+0x7a>
		n = 0;
 801028e:	2300      	movs	r3, #0
 8010290:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	69db      	ldr	r3, [r3, #28]
 8010296:	4619      	mov	r1, r3
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	f7ff fb27 	bl	800f8ec <move_window>
 801029e:	4603      	mov	r3, r0
 80102a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80102a2:	7dfb      	ldrb	r3, [r7, #23]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d11d      	bne.n	80102e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6a1b      	ldr	r3, [r3, #32]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	2be5      	cmp	r3, #229	; 0xe5
 80102b0:	d004      	beq.n	80102bc <dir_alloc+0x50>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6a1b      	ldr	r3, [r3, #32]
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d107      	bne.n	80102cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	3301      	adds	r3, #1
 80102c0:	613b      	str	r3, [r7, #16]
 80102c2:	693a      	ldr	r2, [r7, #16]
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d102      	bne.n	80102d0 <dir_alloc+0x64>
 80102ca:	e00c      	b.n	80102e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80102cc:	2300      	movs	r3, #0
 80102ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80102d0:	2101      	movs	r1, #1
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7ff ff05 	bl	80100e2 <dir_next>
 80102d8:	4603      	mov	r3, r0
 80102da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80102dc:	7dfb      	ldrb	r3, [r7, #23]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d0d7      	beq.n	8010292 <dir_alloc+0x26>
 80102e2:	e000      	b.n	80102e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80102e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80102e6:	7dfb      	ldrb	r3, [r7, #23]
 80102e8:	2b04      	cmp	r3, #4
 80102ea:	d101      	bne.n	80102f0 <dir_alloc+0x84>
 80102ec:	2307      	movs	r3, #7
 80102ee:	75fb      	strb	r3, [r7, #23]
	return res;
 80102f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3718      	adds	r7, #24
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b084      	sub	sp, #16
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
 8010302:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	331a      	adds	r3, #26
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff f83f 	bl	800f38c <ld_word>
 801030e:	4603      	mov	r3, r0
 8010310:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	2b03      	cmp	r3, #3
 8010318:	d109      	bne.n	801032e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	3314      	adds	r3, #20
 801031e:	4618      	mov	r0, r3
 8010320:	f7ff f834 	bl	800f38c <ld_word>
 8010324:	4603      	mov	r3, r0
 8010326:	041b      	lsls	r3, r3, #16
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	4313      	orrs	r3, r2
 801032c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801032e:	68fb      	ldr	r3, [r7, #12]
}
 8010330:	4618      	mov	r0, r3
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	331a      	adds	r3, #26
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	b292      	uxth	r2, r2
 801034c:	4611      	mov	r1, r2
 801034e:	4618      	mov	r0, r3
 8010350:	f7ff f857 	bl	800f402 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	2b03      	cmp	r3, #3
 801035a:	d109      	bne.n	8010370 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	f103 0214 	add.w	r2, r3, #20
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	0c1b      	lsrs	r3, r3, #16
 8010366:	b29b      	uxth	r3, r3
 8010368:	4619      	mov	r1, r3
 801036a:	4610      	mov	r0, r2
 801036c:	f7ff f849 	bl	800f402 <st_word>
	}
}
 8010370:	bf00      	nop
 8010372:	3710      	adds	r7, #16
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8010378:	b590      	push	{r4, r7, lr}
 801037a:	b087      	sub	sp, #28
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	331a      	adds	r3, #26
 8010386:	4618      	mov	r0, r3
 8010388:	f7ff f800 	bl	800f38c <ld_word>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	d001      	beq.n	8010396 <cmp_lfn+0x1e>
 8010392:	2300      	movs	r3, #0
 8010394:	e059      	b.n	801044a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801039e:	1e5a      	subs	r2, r3, #1
 80103a0:	4613      	mov	r3, r2
 80103a2:	005b      	lsls	r3, r3, #1
 80103a4:	4413      	add	r3, r2
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	4413      	add	r3, r2
 80103aa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80103ac:	2301      	movs	r3, #1
 80103ae:	81fb      	strh	r3, [r7, #14]
 80103b0:	2300      	movs	r3, #0
 80103b2:	613b      	str	r3, [r7, #16]
 80103b4:	e033      	b.n	801041e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80103b6:	4a27      	ldr	r2, [pc, #156]	; (8010454 <cmp_lfn+0xdc>)
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	4413      	add	r3, r2
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	461a      	mov	r2, r3
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	4413      	add	r3, r2
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fe ffe1 	bl	800f38c <ld_word>
 80103ca:	4603      	mov	r3, r0
 80103cc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80103ce:	89fb      	ldrh	r3, [r7, #14]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d01a      	beq.n	801040a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	2bfe      	cmp	r3, #254	; 0xfe
 80103d8:	d812      	bhi.n	8010400 <cmp_lfn+0x88>
 80103da:	89bb      	ldrh	r3, [r7, #12]
 80103dc:	4618      	mov	r0, r3
 80103de:	f002 fb4f 	bl	8012a80 <ff_wtoupper>
 80103e2:	4603      	mov	r3, r0
 80103e4:	461c      	mov	r4, r3
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	617a      	str	r2, [r7, #20]
 80103ec:	005b      	lsls	r3, r3, #1
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	4413      	add	r3, r2
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f002 fb43 	bl	8012a80 <ff_wtoupper>
 80103fa:	4603      	mov	r3, r0
 80103fc:	429c      	cmp	r4, r3
 80103fe:	d001      	beq.n	8010404 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010400:	2300      	movs	r3, #0
 8010402:	e022      	b.n	801044a <cmp_lfn+0xd2>
			}
			wc = uc;
 8010404:	89bb      	ldrh	r3, [r7, #12]
 8010406:	81fb      	strh	r3, [r7, #14]
 8010408:	e006      	b.n	8010418 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801040a:	89bb      	ldrh	r3, [r7, #12]
 801040c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010410:	4293      	cmp	r3, r2
 8010412:	d001      	beq.n	8010418 <cmp_lfn+0xa0>
 8010414:	2300      	movs	r3, #0
 8010416:	e018      	b.n	801044a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	3301      	adds	r3, #1
 801041c:	613b      	str	r3, [r7, #16]
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	2b0c      	cmp	r3, #12
 8010422:	d9c8      	bls.n	80103b6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801042c:	2b00      	cmp	r3, #0
 801042e:	d00b      	beq.n	8010448 <cmp_lfn+0xd0>
 8010430:	89fb      	ldrh	r3, [r7, #14]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d008      	beq.n	8010448 <cmp_lfn+0xd0>
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	005b      	lsls	r3, r3, #1
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	4413      	add	r3, r2
 801043e:	881b      	ldrh	r3, [r3, #0]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d001      	beq.n	8010448 <cmp_lfn+0xd0>
 8010444:	2300      	movs	r3, #0
 8010446:	e000      	b.n	801044a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010448:	2301      	movs	r3, #1
}
 801044a:	4618      	mov	r0, r3
 801044c:	371c      	adds	r7, #28
 801044e:	46bd      	mov	sp, r7
 8010450:	bd90      	pop	{r4, r7, pc}
 8010452:	bf00      	nop
 8010454:	0801e62c 	.word	0x0801e62c

08010458 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b088      	sub	sp, #32
 801045c:	af00      	add	r7, sp, #0
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	4611      	mov	r1, r2
 8010464:	461a      	mov	r2, r3
 8010466:	460b      	mov	r3, r1
 8010468:	71fb      	strb	r3, [r7, #7]
 801046a:	4613      	mov	r3, r2
 801046c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	330d      	adds	r3, #13
 8010472:	79ba      	ldrb	r2, [r7, #6]
 8010474:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	330b      	adds	r3, #11
 801047a:	220f      	movs	r2, #15
 801047c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	330c      	adds	r3, #12
 8010482:	2200      	movs	r2, #0
 8010484:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	331a      	adds	r3, #26
 801048a:	2100      	movs	r1, #0
 801048c:	4618      	mov	r0, r3
 801048e:	f7fe ffb8 	bl	800f402 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010492:	79fb      	ldrb	r3, [r7, #7]
 8010494:	1e5a      	subs	r2, r3, #1
 8010496:	4613      	mov	r3, r2
 8010498:	005b      	lsls	r3, r3, #1
 801049a:	4413      	add	r3, r2
 801049c:	009b      	lsls	r3, r3, #2
 801049e:	4413      	add	r3, r2
 80104a0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	82fb      	strh	r3, [r7, #22]
 80104a6:	2300      	movs	r3, #0
 80104a8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80104aa:	8afb      	ldrh	r3, [r7, #22]
 80104ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d007      	beq.n	80104c4 <put_lfn+0x6c>
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	1c5a      	adds	r2, r3, #1
 80104b8:	61fa      	str	r2, [r7, #28]
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	4413      	add	r3, r2
 80104c0:	881b      	ldrh	r3, [r3, #0]
 80104c2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80104c4:	4a17      	ldr	r2, [pc, #92]	; (8010524 <put_lfn+0xcc>)
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	4413      	add	r3, r2
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	461a      	mov	r2, r3
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	4413      	add	r3, r2
 80104d2:	8afa      	ldrh	r2, [r7, #22]
 80104d4:	4611      	mov	r1, r2
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fe ff93 	bl	800f402 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80104dc:	8afb      	ldrh	r3, [r7, #22]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d102      	bne.n	80104e8 <put_lfn+0x90>
 80104e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104e6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	3301      	adds	r3, #1
 80104ec:	61bb      	str	r3, [r7, #24]
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	2b0c      	cmp	r3, #12
 80104f2:	d9da      	bls.n	80104aa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80104f4:	8afb      	ldrh	r3, [r7, #22]
 80104f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d006      	beq.n	801050c <put_lfn+0xb4>
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	005b      	lsls	r3, r3, #1
 8010502:	68fa      	ldr	r2, [r7, #12]
 8010504:	4413      	add	r3, r2
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d103      	bne.n	8010514 <put_lfn+0xbc>
 801050c:	79fb      	ldrb	r3, [r7, #7]
 801050e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010512:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	79fa      	ldrb	r2, [r7, #7]
 8010518:	701a      	strb	r2, [r3, #0]
}
 801051a:	bf00      	nop
 801051c:	3720      	adds	r7, #32
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	0801e62c 	.word	0x0801e62c

08010528 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b08c      	sub	sp, #48	; 0x30
 801052c:	af00      	add	r7, sp, #0
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	607a      	str	r2, [r7, #4]
 8010534:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8010536:	220b      	movs	r2, #11
 8010538:	68b9      	ldr	r1, [r7, #8]
 801053a:	68f8      	ldr	r0, [r7, #12]
 801053c:	f7fe ffa8 	bl	800f490 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	2b05      	cmp	r3, #5
 8010544:	d92b      	bls.n	801059e <gen_numname+0x76>
		sr = seq;
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801054a:	e022      	b.n	8010592 <gen_numname+0x6a>
			wc = *lfn++;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	1c9a      	adds	r2, r3, #2
 8010550:	607a      	str	r2, [r7, #4]
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8010556:	2300      	movs	r3, #0
 8010558:	62bb      	str	r3, [r7, #40]	; 0x28
 801055a:	e017      	b.n	801058c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	005a      	lsls	r2, r3, #1
 8010560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010562:	f003 0301 	and.w	r3, r3, #1
 8010566:	4413      	add	r3, r2
 8010568:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801056a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801056c:	085b      	lsrs	r3, r3, #1
 801056e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010576:	2b00      	cmp	r3, #0
 8010578:	d005      	beq.n	8010586 <gen_numname+0x5e>
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8010580:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8010584:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010588:	3301      	adds	r3, #1
 801058a:	62bb      	str	r3, [r7, #40]	; 0x28
 801058c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058e:	2b0f      	cmp	r3, #15
 8010590:	d9e4      	bls.n	801055c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	881b      	ldrh	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d1d8      	bne.n	801054c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801059e:	2307      	movs	r3, #7
 80105a0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	b2db      	uxtb	r3, r3
 80105a6:	f003 030f 	and.w	r3, r3, #15
 80105aa:	b2db      	uxtb	r3, r3
 80105ac:	3330      	adds	r3, #48	; 0x30
 80105ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80105b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105b6:	2b39      	cmp	r3, #57	; 0x39
 80105b8:	d904      	bls.n	80105c4 <gen_numname+0x9c>
 80105ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105be:	3307      	adds	r3, #7
 80105c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80105c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c6:	1e5a      	subs	r2, r3, #1
 80105c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80105ca:	3330      	adds	r3, #48	; 0x30
 80105cc:	443b      	add	r3, r7
 80105ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80105d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	091b      	lsrs	r3, r3, #4
 80105da:	603b      	str	r3, [r7, #0]
	} while (seq);
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1df      	bne.n	80105a2 <gen_numname+0x7a>
	ns[i] = '~';
 80105e2:	f107 0214 	add.w	r2, r7, #20
 80105e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e8:	4413      	add	r3, r2
 80105ea:	227e      	movs	r2, #126	; 0x7e
 80105ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80105ee:	2300      	movs	r3, #0
 80105f0:	627b      	str	r3, [r7, #36]	; 0x24
 80105f2:	e002      	b.n	80105fa <gen_numname+0xd2>
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	3301      	adds	r3, #1
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
 80105fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fe:	429a      	cmp	r2, r3
 8010600:	d205      	bcs.n	801060e <gen_numname+0xe6>
 8010602:	68fa      	ldr	r2, [r7, #12]
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	4413      	add	r3, r2
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	2b20      	cmp	r3, #32
 801060c:	d1f2      	bne.n	80105f4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801060e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010610:	2b07      	cmp	r3, #7
 8010612:	d807      	bhi.n	8010624 <gen_numname+0xfc>
 8010614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010616:	1c5a      	adds	r2, r3, #1
 8010618:	62ba      	str	r2, [r7, #40]	; 0x28
 801061a:	3330      	adds	r3, #48	; 0x30
 801061c:	443b      	add	r3, r7
 801061e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010622:	e000      	b.n	8010626 <gen_numname+0xfe>
 8010624:	2120      	movs	r1, #32
 8010626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	627a      	str	r2, [r7, #36]	; 0x24
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	4413      	add	r3, r2
 8010630:	460a      	mov	r2, r1
 8010632:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	2b07      	cmp	r3, #7
 8010638:	d9e9      	bls.n	801060e <gen_numname+0xe6>
}
 801063a:	bf00      	nop
 801063c:	bf00      	nop
 801063e:	3730      	adds	r7, #48	; 0x30
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010644:	b480      	push	{r7}
 8010646:	b085      	sub	sp, #20
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801064c:	2300      	movs	r3, #0
 801064e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010650:	230b      	movs	r3, #11
 8010652:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010654:	7bfb      	ldrb	r3, [r7, #15]
 8010656:	b2da      	uxtb	r2, r3
 8010658:	0852      	lsrs	r2, r2, #1
 801065a:	01db      	lsls	r3, r3, #7
 801065c:	4313      	orrs	r3, r2
 801065e:	b2da      	uxtb	r2, r3
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	1c59      	adds	r1, r3, #1
 8010664:	6079      	str	r1, [r7, #4]
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	4413      	add	r3, r2
 801066a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	3b01      	subs	r3, #1
 8010670:	60bb      	str	r3, [r7, #8]
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d1ed      	bne.n	8010654 <sum_sfn+0x10>
	return sum;
 8010678:	7bfb      	ldrb	r3, [r7, #15]
}
 801067a:	4618      	mov	r0, r3
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b086      	sub	sp, #24
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010694:	2100      	movs	r1, #0
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f7ff fca8 	bl	800ffec <dir_sdi>
 801069c:	4603      	mov	r3, r0
 801069e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d001      	beq.n	80106aa <dir_find+0x24>
 80106a6:	7dfb      	ldrb	r3, [r7, #23]
 80106a8:	e0a9      	b.n	80107fe <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80106aa:	23ff      	movs	r3, #255	; 0xff
 80106ac:	753b      	strb	r3, [r7, #20]
 80106ae:	7d3b      	ldrb	r3, [r7, #20]
 80106b0:	757b      	strb	r3, [r7, #21]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f04f 32ff 	mov.w	r2, #4294967295
 80106b8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	69db      	ldr	r3, [r3, #28]
 80106be:	4619      	mov	r1, r3
 80106c0:	6938      	ldr	r0, [r7, #16]
 80106c2:	f7ff f913 	bl	800f8ec <move_window>
 80106c6:	4603      	mov	r3, r0
 80106c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80106ca:	7dfb      	ldrb	r3, [r7, #23]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f040 8090 	bne.w	80107f2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6a1b      	ldr	r3, [r3, #32]
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80106da:	7dbb      	ldrb	r3, [r7, #22]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d102      	bne.n	80106e6 <dir_find+0x60>
 80106e0:	2304      	movs	r3, #4
 80106e2:	75fb      	strb	r3, [r7, #23]
 80106e4:	e08a      	b.n	80107fc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6a1b      	ldr	r3, [r3, #32]
 80106ea:	330b      	adds	r3, #11
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80106f2:	73fb      	strb	r3, [r7, #15]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	7bfa      	ldrb	r2, [r7, #15]
 80106f8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80106fa:	7dbb      	ldrb	r3, [r7, #22]
 80106fc:	2be5      	cmp	r3, #229	; 0xe5
 80106fe:	d007      	beq.n	8010710 <dir_find+0x8a>
 8010700:	7bfb      	ldrb	r3, [r7, #15]
 8010702:	f003 0308 	and.w	r3, r3, #8
 8010706:	2b00      	cmp	r3, #0
 8010708:	d009      	beq.n	801071e <dir_find+0x98>
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	2b0f      	cmp	r3, #15
 801070e:	d006      	beq.n	801071e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010710:	23ff      	movs	r3, #255	; 0xff
 8010712:	757b      	strb	r3, [r7, #21]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f04f 32ff 	mov.w	r2, #4294967295
 801071a:	631a      	str	r2, [r3, #48]	; 0x30
 801071c:	e05e      	b.n	80107dc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801071e:	7bfb      	ldrb	r3, [r7, #15]
 8010720:	2b0f      	cmp	r3, #15
 8010722:	d136      	bne.n	8010792 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801072a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801072e:	2b00      	cmp	r3, #0
 8010730:	d154      	bne.n	80107dc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010732:	7dbb      	ldrb	r3, [r7, #22]
 8010734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010738:	2b00      	cmp	r3, #0
 801073a:	d00d      	beq.n	8010758 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6a1b      	ldr	r3, [r3, #32]
 8010740:	7b5b      	ldrb	r3, [r3, #13]
 8010742:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010744:	7dbb      	ldrb	r3, [r7, #22]
 8010746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801074a:	75bb      	strb	r3, [r7, #22]
 801074c:	7dbb      	ldrb	r3, [r7, #22]
 801074e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	695a      	ldr	r2, [r3, #20]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010758:	7dba      	ldrb	r2, [r7, #22]
 801075a:	7d7b      	ldrb	r3, [r7, #21]
 801075c:	429a      	cmp	r2, r3
 801075e:	d115      	bne.n	801078c <dir_find+0x106>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6a1b      	ldr	r3, [r3, #32]
 8010764:	330d      	adds	r3, #13
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	7d3a      	ldrb	r2, [r7, #20]
 801076a:	429a      	cmp	r2, r3
 801076c:	d10e      	bne.n	801078c <dir_find+0x106>
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	68da      	ldr	r2, [r3, #12]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6a1b      	ldr	r3, [r3, #32]
 8010776:	4619      	mov	r1, r3
 8010778:	4610      	mov	r0, r2
 801077a:	f7ff fdfd 	bl	8010378 <cmp_lfn>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d003      	beq.n	801078c <dir_find+0x106>
 8010784:	7d7b      	ldrb	r3, [r7, #21]
 8010786:	3b01      	subs	r3, #1
 8010788:	b2db      	uxtb	r3, r3
 801078a:	e000      	b.n	801078e <dir_find+0x108>
 801078c:	23ff      	movs	r3, #255	; 0xff
 801078e:	757b      	strb	r3, [r7, #21]
 8010790:	e024      	b.n	80107dc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010792:	7d7b      	ldrb	r3, [r7, #21]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d109      	bne.n	80107ac <dir_find+0x126>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6a1b      	ldr	r3, [r3, #32]
 801079c:	4618      	mov	r0, r3
 801079e:	f7ff ff51 	bl	8010644 <sum_sfn>
 80107a2:	4603      	mov	r3, r0
 80107a4:	461a      	mov	r2, r3
 80107a6:	7d3b      	ldrb	r3, [r7, #20]
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d024      	beq.n	80107f6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80107b2:	f003 0301 	and.w	r3, r3, #1
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d10a      	bne.n	80107d0 <dir_find+0x14a>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6a18      	ldr	r0, [r3, #32]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	3324      	adds	r3, #36	; 0x24
 80107c2:	220b      	movs	r2, #11
 80107c4:	4619      	mov	r1, r3
 80107c6:	f7fe fe9f 	bl	800f508 <mem_cmp>
 80107ca:	4603      	mov	r3, r0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d014      	beq.n	80107fa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80107d0:	23ff      	movs	r3, #255	; 0xff
 80107d2:	757b      	strb	r3, [r7, #21]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f04f 32ff 	mov.w	r2, #4294967295
 80107da:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80107dc:	2100      	movs	r1, #0
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7ff fc7f 	bl	80100e2 <dir_next>
 80107e4:	4603      	mov	r3, r0
 80107e6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80107e8:	7dfb      	ldrb	r3, [r7, #23]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f43f af65 	beq.w	80106ba <dir_find+0x34>
 80107f0:	e004      	b.n	80107fc <dir_find+0x176>
		if (res != FR_OK) break;
 80107f2:	bf00      	nop
 80107f4:	e002      	b.n	80107fc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80107f6:	bf00      	nop
 80107f8:	e000      	b.n	80107fc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80107fa:	bf00      	nop

	return res;
 80107fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3718      	adds	r7, #24
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
	...

08010808 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b08c      	sub	sp, #48	; 0x30
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801081c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010820:	2b00      	cmp	r3, #0
 8010822:	d001      	beq.n	8010828 <dir_register+0x20>
 8010824:	2306      	movs	r3, #6
 8010826:	e0e0      	b.n	80109ea <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010828:	2300      	movs	r3, #0
 801082a:	627b      	str	r3, [r7, #36]	; 0x24
 801082c:	e002      	b.n	8010834 <dir_register+0x2c>
 801082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010830:	3301      	adds	r3, #1
 8010832:	627b      	str	r3, [r7, #36]	; 0x24
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	68da      	ldr	r2, [r3, #12]
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	005b      	lsls	r3, r3, #1
 801083c:	4413      	add	r3, r2
 801083e:	881b      	ldrh	r3, [r3, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1f4      	bne.n	801082e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801084a:	f107 030c 	add.w	r3, r7, #12
 801084e:	220c      	movs	r2, #12
 8010850:	4618      	mov	r0, r3
 8010852:	f7fe fe1d 	bl	800f490 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010856:	7dfb      	ldrb	r3, [r7, #23]
 8010858:	f003 0301 	and.w	r3, r3, #1
 801085c:	2b00      	cmp	r3, #0
 801085e:	d032      	beq.n	80108c6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2240      	movs	r2, #64	; 0x40
 8010864:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8010868:	2301      	movs	r3, #1
 801086a:	62bb      	str	r3, [r7, #40]	; 0x28
 801086c:	e016      	b.n	801089c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	68da      	ldr	r2, [r3, #12]
 8010878:	f107 010c 	add.w	r1, r7, #12
 801087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087e:	f7ff fe53 	bl	8010528 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f7ff feff 	bl	8010686 <dir_find>
 8010888:	4603      	mov	r3, r0
 801088a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801088e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010892:	2b00      	cmp	r3, #0
 8010894:	d106      	bne.n	80108a4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010898:	3301      	adds	r3, #1
 801089a:	62bb      	str	r3, [r7, #40]	; 0x28
 801089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089e:	2b63      	cmp	r3, #99	; 0x63
 80108a0:	d9e5      	bls.n	801086e <dir_register+0x66>
 80108a2:	e000      	b.n	80108a6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80108a4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80108a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a8:	2b64      	cmp	r3, #100	; 0x64
 80108aa:	d101      	bne.n	80108b0 <dir_register+0xa8>
 80108ac:	2307      	movs	r3, #7
 80108ae:	e09c      	b.n	80109ea <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80108b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108b4:	2b04      	cmp	r3, #4
 80108b6:	d002      	beq.n	80108be <dir_register+0xb6>
 80108b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108bc:	e095      	b.n	80109ea <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80108be:	7dfa      	ldrb	r2, [r7, #23]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80108c6:	7dfb      	ldrb	r3, [r7, #23]
 80108c8:	f003 0302 	and.w	r3, r3, #2
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d007      	beq.n	80108e0 <dir_register+0xd8>
 80108d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d2:	330c      	adds	r3, #12
 80108d4:	4a47      	ldr	r2, [pc, #284]	; (80109f4 <dir_register+0x1ec>)
 80108d6:	fba2 2303 	umull	r2, r3, r2, r3
 80108da:	089b      	lsrs	r3, r3, #2
 80108dc:	3301      	adds	r3, #1
 80108de:	e000      	b.n	80108e2 <dir_register+0xda>
 80108e0:	2301      	movs	r3, #1
 80108e2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80108e4:	6a39      	ldr	r1, [r7, #32]
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f7ff fcc0 	bl	801026c <dir_alloc>
 80108ec:	4603      	mov	r3, r0
 80108ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80108f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d148      	bne.n	801098c <dir_register+0x184>
 80108fa:	6a3b      	ldr	r3, [r7, #32]
 80108fc:	3b01      	subs	r3, #1
 80108fe:	623b      	str	r3, [r7, #32]
 8010900:	6a3b      	ldr	r3, [r7, #32]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d042      	beq.n	801098c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	695a      	ldr	r2, [r3, #20]
 801090a:	6a3b      	ldr	r3, [r7, #32]
 801090c:	015b      	lsls	r3, r3, #5
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	4619      	mov	r1, r3
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7ff fb6a 	bl	800ffec <dir_sdi>
 8010918:	4603      	mov	r3, r0
 801091a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801091e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010922:	2b00      	cmp	r3, #0
 8010924:	d132      	bne.n	801098c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	3324      	adds	r3, #36	; 0x24
 801092a:	4618      	mov	r0, r3
 801092c:	f7ff fe8a 	bl	8010644 <sum_sfn>
 8010930:	4603      	mov	r3, r0
 8010932:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	69db      	ldr	r3, [r3, #28]
 8010938:	4619      	mov	r1, r3
 801093a:	69f8      	ldr	r0, [r7, #28]
 801093c:	f7fe ffd6 	bl	800f8ec <move_window>
 8010940:	4603      	mov	r3, r0
 8010942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8010946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801094a:	2b00      	cmp	r3, #0
 801094c:	d11d      	bne.n	801098a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801094e:	69fb      	ldr	r3, [r7, #28]
 8010950:	68d8      	ldr	r0, [r3, #12]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6a19      	ldr	r1, [r3, #32]
 8010956:	6a3b      	ldr	r3, [r7, #32]
 8010958:	b2da      	uxtb	r2, r3
 801095a:	7efb      	ldrb	r3, [r7, #27]
 801095c:	f7ff fd7c 	bl	8010458 <put_lfn>
				fs->wflag = 1;
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	2201      	movs	r2, #1
 8010964:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010966:	2100      	movs	r1, #0
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7ff fbba 	bl	80100e2 <dir_next>
 801096e:	4603      	mov	r3, r0
 8010970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8010974:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010978:	2b00      	cmp	r3, #0
 801097a:	d107      	bne.n	801098c <dir_register+0x184>
 801097c:	6a3b      	ldr	r3, [r7, #32]
 801097e:	3b01      	subs	r3, #1
 8010980:	623b      	str	r3, [r7, #32]
 8010982:	6a3b      	ldr	r3, [r7, #32]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1d5      	bne.n	8010934 <dir_register+0x12c>
 8010988:	e000      	b.n	801098c <dir_register+0x184>
				if (res != FR_OK) break;
 801098a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801098c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010990:	2b00      	cmp	r3, #0
 8010992:	d128      	bne.n	80109e6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	69db      	ldr	r3, [r3, #28]
 8010998:	4619      	mov	r1, r3
 801099a:	69f8      	ldr	r0, [r7, #28]
 801099c:	f7fe ffa6 	bl	800f8ec <move_window>
 80109a0:	4603      	mov	r3, r0
 80109a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80109a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d11b      	bne.n	80109e6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6a1b      	ldr	r3, [r3, #32]
 80109b2:	2220      	movs	r2, #32
 80109b4:	2100      	movs	r1, #0
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fe fd8b 	bl	800f4d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a18      	ldr	r0, [r3, #32]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	3324      	adds	r3, #36	; 0x24
 80109c4:	220b      	movs	r2, #11
 80109c6:	4619      	mov	r1, r3
 80109c8:	f7fe fd62 	bl	800f490 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6a1b      	ldr	r3, [r3, #32]
 80109d6:	330c      	adds	r3, #12
 80109d8:	f002 0218 	and.w	r2, r2, #24
 80109dc:	b2d2      	uxtb	r2, r2
 80109de:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80109e0:	69fb      	ldr	r3, [r7, #28]
 80109e2:	2201      	movs	r2, #1
 80109e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80109e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3730      	adds	r7, #48	; 0x30
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	4ec4ec4f 	.word	0x4ec4ec4f

080109f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b08a      	sub	sp, #40	; 0x28
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	613b      	str	r3, [r7, #16]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	60fb      	str	r3, [r7, #12]
 8010a10:	2300      	movs	r3, #0
 8010a12:	617b      	str	r3, [r7, #20]
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010a18:	69bb      	ldr	r3, [r7, #24]
 8010a1a:	1c5a      	adds	r2, r3, #1
 8010a1c:	61ba      	str	r2, [r7, #24]
 8010a1e:	693a      	ldr	r2, [r7, #16]
 8010a20:	4413      	add	r3, r2
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a28:	2b1f      	cmp	r3, #31
 8010a2a:	d940      	bls.n	8010aae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a2e:	2b2f      	cmp	r3, #47	; 0x2f
 8010a30:	d006      	beq.n	8010a40 <create_name+0x48>
 8010a32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a34:	2b5c      	cmp	r3, #92	; 0x5c
 8010a36:	d110      	bne.n	8010a5a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010a38:	e002      	b.n	8010a40 <create_name+0x48>
 8010a3a:	69bb      	ldr	r3, [r7, #24]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	61bb      	str	r3, [r7, #24]
 8010a40:	693a      	ldr	r2, [r7, #16]
 8010a42:	69bb      	ldr	r3, [r7, #24]
 8010a44:	4413      	add	r3, r2
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	2b2f      	cmp	r3, #47	; 0x2f
 8010a4a:	d0f6      	beq.n	8010a3a <create_name+0x42>
 8010a4c:	693a      	ldr	r2, [r7, #16]
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	4413      	add	r3, r2
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	2b5c      	cmp	r3, #92	; 0x5c
 8010a56:	d0f0      	beq.n	8010a3a <create_name+0x42>
			break;
 8010a58:	e02a      	b.n	8010ab0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	2bfe      	cmp	r3, #254	; 0xfe
 8010a5e:	d901      	bls.n	8010a64 <create_name+0x6c>
 8010a60:	2306      	movs	r3, #6
 8010a62:	e17d      	b.n	8010d60 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a6c:	2101      	movs	r1, #1
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f001 ffca 	bl	8012a08 <ff_convert>
 8010a74:	4603      	mov	r3, r0
 8010a76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d101      	bne.n	8010a82 <create_name+0x8a>
 8010a7e:	2306      	movs	r3, #6
 8010a80:	e16e      	b.n	8010d60 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a84:	2b7f      	cmp	r3, #127	; 0x7f
 8010a86:	d809      	bhi.n	8010a9c <create_name+0xa4>
 8010a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	488d      	ldr	r0, [pc, #564]	; (8010cc4 <create_name+0x2cc>)
 8010a8e:	f7fe fd62 	bl	800f556 <chk_chr>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d001      	beq.n	8010a9c <create_name+0xa4>
 8010a98:	2306      	movs	r3, #6
 8010a9a:	e161      	b.n	8010d60 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	1c5a      	adds	r2, r3, #1
 8010aa0:	617a      	str	r2, [r7, #20]
 8010aa2:	005b      	lsls	r3, r3, #1
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010aaa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010aac:	e7b4      	b.n	8010a18 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010aae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010ab0:	693a      	ldr	r2, [r7, #16]
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	441a      	add	r2, r3
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010abc:	2b1f      	cmp	r3, #31
 8010abe:	d801      	bhi.n	8010ac4 <create_name+0xcc>
 8010ac0:	2304      	movs	r3, #4
 8010ac2:	e000      	b.n	8010ac6 <create_name+0xce>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010aca:	e011      	b.n	8010af0 <create_name+0xf8>
		w = lfn[di - 1];
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010ad2:	3b01      	subs	r3, #1
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	4413      	add	r3, r2
 8010ada:	881b      	ldrh	r3, [r3, #0]
 8010adc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8010ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ae0:	2b20      	cmp	r3, #32
 8010ae2:	d002      	beq.n	8010aea <create_name+0xf2>
 8010ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8010ae8:	d106      	bne.n	8010af8 <create_name+0x100>
		di--;
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	3b01      	subs	r3, #1
 8010aee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d1ea      	bne.n	8010acc <create_name+0xd4>
 8010af6:	e000      	b.n	8010afa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8010af8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	005b      	lsls	r3, r3, #1
 8010afe:	68fa      	ldr	r2, [r7, #12]
 8010b00:	4413      	add	r3, r2
 8010b02:	2200      	movs	r2, #0
 8010b04:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d101      	bne.n	8010b10 <create_name+0x118>
 8010b0c:	2306      	movs	r3, #6
 8010b0e:	e127      	b.n	8010d60 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	3324      	adds	r3, #36	; 0x24
 8010b14:	220b      	movs	r2, #11
 8010b16:	2120      	movs	r1, #32
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7fe fcda 	bl	800f4d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010b1e:	2300      	movs	r3, #0
 8010b20:	61bb      	str	r3, [r7, #24]
 8010b22:	e002      	b.n	8010b2a <create_name+0x132>
 8010b24:	69bb      	ldr	r3, [r7, #24]
 8010b26:	3301      	adds	r3, #1
 8010b28:	61bb      	str	r3, [r7, #24]
 8010b2a:	69bb      	ldr	r3, [r7, #24]
 8010b2c:	005b      	lsls	r3, r3, #1
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	4413      	add	r3, r2
 8010b32:	881b      	ldrh	r3, [r3, #0]
 8010b34:	2b20      	cmp	r3, #32
 8010b36:	d0f5      	beq.n	8010b24 <create_name+0x12c>
 8010b38:	69bb      	ldr	r3, [r7, #24]
 8010b3a:	005b      	lsls	r3, r3, #1
 8010b3c:	68fa      	ldr	r2, [r7, #12]
 8010b3e:	4413      	add	r3, r2
 8010b40:	881b      	ldrh	r3, [r3, #0]
 8010b42:	2b2e      	cmp	r3, #46	; 0x2e
 8010b44:	d0ee      	beq.n	8010b24 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d009      	beq.n	8010b60 <create_name+0x168>
 8010b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b50:	f043 0303 	orr.w	r3, r3, #3
 8010b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010b58:	e002      	b.n	8010b60 <create_name+0x168>
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	3b01      	subs	r3, #1
 8010b5e:	617b      	str	r3, [r7, #20]
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d009      	beq.n	8010b7a <create_name+0x182>
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	005b      	lsls	r3, r3, #1
 8010b70:	68fa      	ldr	r2, [r7, #12]
 8010b72:	4413      	add	r3, r2
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	2b2e      	cmp	r3, #46	; 0x2e
 8010b78:	d1ef      	bne.n	8010b5a <create_name+0x162>

	i = b = 0; ni = 8;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010b80:	2300      	movs	r3, #0
 8010b82:	623b      	str	r3, [r7, #32]
 8010b84:	2308      	movs	r3, #8
 8010b86:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	1c5a      	adds	r2, r3, #1
 8010b8c:	61ba      	str	r2, [r7, #24]
 8010b8e:	005b      	lsls	r3, r3, #1
 8010b90:	68fa      	ldr	r2, [r7, #12]
 8010b92:	4413      	add	r3, r2
 8010b94:	881b      	ldrh	r3, [r3, #0]
 8010b96:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	f000 8090 	beq.w	8010cc0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ba2:	2b20      	cmp	r3, #32
 8010ba4:	d006      	beq.n	8010bb4 <create_name+0x1bc>
 8010ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8010baa:	d10a      	bne.n	8010bc2 <create_name+0x1ca>
 8010bac:	69ba      	ldr	r2, [r7, #24]
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d006      	beq.n	8010bc2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bb8:	f043 0303 	orr.w	r3, r3, #3
 8010bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010bc0:	e07d      	b.n	8010cbe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010bc2:	6a3a      	ldr	r2, [r7, #32]
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d203      	bcs.n	8010bd2 <create_name+0x1da>
 8010bca:	69ba      	ldr	r2, [r7, #24]
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d123      	bne.n	8010c1a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	2b0b      	cmp	r3, #11
 8010bd6:	d106      	bne.n	8010be6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8010bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bdc:	f043 0303 	orr.w	r3, r3, #3
 8010be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010be4:	e075      	b.n	8010cd2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010be6:	69ba      	ldr	r2, [r7, #24]
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d005      	beq.n	8010bfa <create_name+0x202>
 8010bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bf2:	f043 0303 	orr.w	r3, r3, #3
 8010bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8010bfa:	69ba      	ldr	r2, [r7, #24]
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d866      	bhi.n	8010cd0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	61bb      	str	r3, [r7, #24]
 8010c06:	2308      	movs	r3, #8
 8010c08:	623b      	str	r3, [r7, #32]
 8010c0a:	230b      	movs	r3, #11
 8010c0c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010c18:	e051      	b.n	8010cbe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8010c1e:	d914      	bls.n	8010c4a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010c20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c22:	2100      	movs	r1, #0
 8010c24:	4618      	mov	r0, r3
 8010c26:	f001 feef 	bl	8012a08 <ff_convert>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010c2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d004      	beq.n	8010c3e <create_name+0x246>
 8010c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c36:	3b80      	subs	r3, #128	; 0x80
 8010c38:	4a23      	ldr	r2, [pc, #140]	; (8010cc8 <create_name+0x2d0>)
 8010c3a:	5cd3      	ldrb	r3, [r2, r3]
 8010c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c42:	f043 0302 	orr.w	r3, r3, #2
 8010c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d007      	beq.n	8010c60 <create_name+0x268>
 8010c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c52:	4619      	mov	r1, r3
 8010c54:	481d      	ldr	r0, [pc, #116]	; (8010ccc <create_name+0x2d4>)
 8010c56:	f7fe fc7e 	bl	800f556 <chk_chr>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d008      	beq.n	8010c72 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010c60:	235f      	movs	r3, #95	; 0x5f
 8010c62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c68:	f043 0303 	orr.w	r3, r3, #3
 8010c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c70:	e01b      	b.n	8010caa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c74:	2b40      	cmp	r3, #64	; 0x40
 8010c76:	d909      	bls.n	8010c8c <create_name+0x294>
 8010c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c7a:	2b5a      	cmp	r3, #90	; 0x5a
 8010c7c:	d806      	bhi.n	8010c8c <create_name+0x294>
					b |= 2;
 8010c7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010c82:	f043 0302 	orr.w	r3, r3, #2
 8010c86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010c8a:	e00e      	b.n	8010caa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c8e:	2b60      	cmp	r3, #96	; 0x60
 8010c90:	d90b      	bls.n	8010caa <create_name+0x2b2>
 8010c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c94:	2b7a      	cmp	r3, #122	; 0x7a
 8010c96:	d808      	bhi.n	8010caa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010c9c:	f043 0301 	orr.w	r3, r3, #1
 8010ca0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ca6:	3b20      	subs	r3, #32
 8010ca8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010caa:	6a3b      	ldr	r3, [r7, #32]
 8010cac:	1c5a      	adds	r2, r3, #1
 8010cae:	623a      	str	r2, [r7, #32]
 8010cb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010cb2:	b2d1      	uxtb	r1, r2
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	460a      	mov	r2, r1
 8010cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010cbe:	e763      	b.n	8010b88 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8010cc0:	bf00      	nop
 8010cc2:	e006      	b.n	8010cd2 <create_name+0x2da>
 8010cc4:	0801e320 	.word	0x0801e320
 8010cc8:	0801e5ac 	.word	0x0801e5ac
 8010ccc:	0801e32c 	.word	0x0801e32c
			if (si > di) break;			/* No extension */
 8010cd0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010cd8:	2be5      	cmp	r3, #229	; 0xe5
 8010cda:	d103      	bne.n	8010ce4 <create_name+0x2ec>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2205      	movs	r2, #5
 8010ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	2b08      	cmp	r3, #8
 8010ce8:	d104      	bne.n	8010cf4 <create_name+0x2fc>
 8010cea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010cee:	009b      	lsls	r3, r3, #2
 8010cf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010cf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010cf8:	f003 030c 	and.w	r3, r3, #12
 8010cfc:	2b0c      	cmp	r3, #12
 8010cfe:	d005      	beq.n	8010d0c <create_name+0x314>
 8010d00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010d04:	f003 0303 	and.w	r3, r3, #3
 8010d08:	2b03      	cmp	r3, #3
 8010d0a:	d105      	bne.n	8010d18 <create_name+0x320>
 8010d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d10:	f043 0302 	orr.w	r3, r3, #2
 8010d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d1c:	f003 0302 	and.w	r3, r3, #2
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d117      	bne.n	8010d54 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010d24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010d28:	f003 0303 	and.w	r3, r3, #3
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d105      	bne.n	8010d3c <create_name+0x344>
 8010d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d34:	f043 0310 	orr.w	r3, r3, #16
 8010d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010d40:	f003 030c 	and.w	r3, r3, #12
 8010d44:	2b04      	cmp	r3, #4
 8010d46:	d105      	bne.n	8010d54 <create_name+0x35c>
 8010d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d4c:	f043 0308 	orr.w	r3, r3, #8
 8010d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010d5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8010d5e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3728      	adds	r7, #40	; 0x28
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b086      	sub	sp, #24
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010d7c:	e002      	b.n	8010d84 <follow_path+0x1c>
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	3301      	adds	r3, #1
 8010d82:	603b      	str	r3, [r7, #0]
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	2b2f      	cmp	r3, #47	; 0x2f
 8010d8a:	d0f8      	beq.n	8010d7e <follow_path+0x16>
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	2b5c      	cmp	r3, #92	; 0x5c
 8010d92:	d0f4      	beq.n	8010d7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	2200      	movs	r2, #0
 8010d98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	2b1f      	cmp	r3, #31
 8010da0:	d80a      	bhi.n	8010db8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2280      	movs	r2, #128	; 0x80
 8010da6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010daa:	2100      	movs	r1, #0
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f7ff f91d 	bl	800ffec <dir_sdi>
 8010db2:	4603      	mov	r3, r0
 8010db4:	75fb      	strb	r3, [r7, #23]
 8010db6:	e043      	b.n	8010e40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010db8:	463b      	mov	r3, r7
 8010dba:	4619      	mov	r1, r3
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f7ff fe1b 	bl	80109f8 <create_name>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010dc6:	7dfb      	ldrb	r3, [r7, #23]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d134      	bne.n	8010e36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7ff fc5a 	bl	8010686 <dir_find>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010ddc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010dde:	7dfb      	ldrb	r3, [r7, #23]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d00a      	beq.n	8010dfa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010de4:	7dfb      	ldrb	r3, [r7, #23]
 8010de6:	2b04      	cmp	r3, #4
 8010de8:	d127      	bne.n	8010e3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010dea:	7afb      	ldrb	r3, [r7, #11]
 8010dec:	f003 0304 	and.w	r3, r3, #4
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d122      	bne.n	8010e3a <follow_path+0xd2>
 8010df4:	2305      	movs	r3, #5
 8010df6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010df8:	e01f      	b.n	8010e3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010dfa:	7afb      	ldrb	r3, [r7, #11]
 8010dfc:	f003 0304 	and.w	r3, r3, #4
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d11c      	bne.n	8010e3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	799b      	ldrb	r3, [r3, #6]
 8010e08:	f003 0310 	and.w	r3, r3, #16
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d102      	bne.n	8010e16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010e10:	2305      	movs	r3, #5
 8010e12:	75fb      	strb	r3, [r7, #23]
 8010e14:	e014      	b.n	8010e40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	695b      	ldr	r3, [r3, #20]
 8010e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e24:	4413      	add	r3, r2
 8010e26:	4619      	mov	r1, r3
 8010e28:	68f8      	ldr	r0, [r7, #12]
 8010e2a:	f7ff fa66 	bl	80102fa <ld_clust>
 8010e2e:	4602      	mov	r2, r0
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010e34:	e7c0      	b.n	8010db8 <follow_path+0x50>
			if (res != FR_OK) break;
 8010e36:	bf00      	nop
 8010e38:	e002      	b.n	8010e40 <follow_path+0xd8>
				break;
 8010e3a:	bf00      	nop
 8010e3c:	e000      	b.n	8010e40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010e3e:	bf00      	nop
			}
		}
	}

	return res;
 8010e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3718      	adds	r7, #24
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}

08010e4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010e4a:	b480      	push	{r7}
 8010e4c:	b087      	sub	sp, #28
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010e52:	f04f 33ff 	mov.w	r3, #4294967295
 8010e56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d031      	beq.n	8010ec4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	617b      	str	r3, [r7, #20]
 8010e66:	e002      	b.n	8010e6e <get_ldnumber+0x24>
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	617b      	str	r3, [r7, #20]
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	2b1f      	cmp	r3, #31
 8010e74:	d903      	bls.n	8010e7e <get_ldnumber+0x34>
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	2b3a      	cmp	r3, #58	; 0x3a
 8010e7c:	d1f4      	bne.n	8010e68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	2b3a      	cmp	r3, #58	; 0x3a
 8010e84:	d11c      	bne.n	8010ec0 <get_ldnumber+0x76>
			tp = *path;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	1c5a      	adds	r2, r3, #1
 8010e90:	60fa      	str	r2, [r7, #12]
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	3b30      	subs	r3, #48	; 0x30
 8010e96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	2b09      	cmp	r3, #9
 8010e9c:	d80e      	bhi.n	8010ebc <get_ldnumber+0x72>
 8010e9e:	68fa      	ldr	r2, [r7, #12]
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d10a      	bne.n	8010ebc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d107      	bne.n	8010ebc <get_ldnumber+0x72>
					vol = (int)i;
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	617b      	str	r3, [r7, #20]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	697a      	ldr	r2, [r7, #20]
 8010eba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	e002      	b.n	8010ec6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010ec4:	693b      	ldr	r3, [r7, #16]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	371c      	adds	r7, #28
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
	...

08010ed4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	70da      	strb	r2, [r3, #3]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8010eea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010eec:	6839      	ldr	r1, [r7, #0]
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f7fe fcfc 	bl	800f8ec <move_window>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <check_fs+0x2a>
 8010efa:	2304      	movs	r3, #4
 8010efc:	e038      	b.n	8010f70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	3334      	adds	r3, #52	; 0x34
 8010f02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fe fa40 	bl	800f38c <ld_word>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	461a      	mov	r2, r3
 8010f10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d001      	beq.n	8010f1c <check_fs+0x48>
 8010f18:	2303      	movs	r3, #3
 8010f1a:	e029      	b.n	8010f70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f22:	2be9      	cmp	r3, #233	; 0xe9
 8010f24:	d009      	beq.n	8010f3a <check_fs+0x66>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f2c:	2beb      	cmp	r3, #235	; 0xeb
 8010f2e:	d11e      	bne.n	8010f6e <check_fs+0x9a>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010f36:	2b90      	cmp	r3, #144	; 0x90
 8010f38:	d119      	bne.n	8010f6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	3334      	adds	r3, #52	; 0x34
 8010f3e:	3336      	adds	r3, #54	; 0x36
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fe fa3b 	bl	800f3bc <ld_dword>
 8010f46:	4603      	mov	r3, r0
 8010f48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010f4c:	4a0a      	ldr	r2, [pc, #40]	; (8010f78 <check_fs+0xa4>)
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d101      	bne.n	8010f56 <check_fs+0x82>
 8010f52:	2300      	movs	r3, #0
 8010f54:	e00c      	b.n	8010f70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	3334      	adds	r3, #52	; 0x34
 8010f5a:	3352      	adds	r3, #82	; 0x52
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fe fa2d 	bl	800f3bc <ld_dword>
 8010f62:	4603      	mov	r3, r0
 8010f64:	4a05      	ldr	r2, [pc, #20]	; (8010f7c <check_fs+0xa8>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d101      	bne.n	8010f6e <check_fs+0x9a>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	e000      	b.n	8010f70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010f6e:	2302      	movs	r3, #2
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3708      	adds	r7, #8
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	00544146 	.word	0x00544146
 8010f7c:	33544146 	.word	0x33544146

08010f80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b096      	sub	sp, #88	; 0x58
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	4613      	mov	r3, r2
 8010f8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	2200      	movs	r2, #0
 8010f92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f7ff ff58 	bl	8010e4a <get_ldnumber>
 8010f9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	da01      	bge.n	8010fa6 <find_volume+0x26>
 8010fa2:	230b      	movs	r3, #11
 8010fa4:	e22d      	b.n	8011402 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010fa6:	4aa1      	ldr	r2, [pc, #644]	; (801122c <find_volume+0x2ac>)
 8010fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d101      	bne.n	8010fba <find_volume+0x3a>
 8010fb6:	230c      	movs	r3, #12
 8010fb8:	e223      	b.n	8011402 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010fc0:	79fb      	ldrb	r3, [r7, #7]
 8010fc2:	f023 0301 	bic.w	r3, r3, #1
 8010fc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d01a      	beq.n	8011006 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd2:	785b      	ldrb	r3, [r3, #1]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7fe f93b 	bl	800f250 <disk_status>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fe4:	f003 0301 	and.w	r3, r3, #1
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d10c      	bne.n	8011006 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010fec:	79fb      	ldrb	r3, [r7, #7]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d007      	beq.n	8011002 <find_volume+0x82>
 8010ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ff6:	f003 0304 	and.w	r3, r3, #4
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d001      	beq.n	8011002 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010ffe:	230a      	movs	r3, #10
 8011000:	e1ff      	b.n	8011402 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8011002:	2300      	movs	r3, #0
 8011004:	e1fd      	b.n	8011402 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011008:	2200      	movs	r2, #0
 801100a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801100c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801100e:	b2da      	uxtb	r2, r3
 8011010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011012:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011016:	785b      	ldrb	r3, [r3, #1]
 8011018:	4618      	mov	r0, r3
 801101a:	f7fe f933 	bl	800f284 <disk_initialize>
 801101e:	4603      	mov	r3, r0
 8011020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011028:	f003 0301 	and.w	r3, r3, #1
 801102c:	2b00      	cmp	r3, #0
 801102e:	d001      	beq.n	8011034 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011030:	2303      	movs	r3, #3
 8011032:	e1e6      	b.n	8011402 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011034:	79fb      	ldrb	r3, [r7, #7]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d007      	beq.n	801104a <find_volume+0xca>
 801103a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801103e:	f003 0304 	and.w	r3, r3, #4
 8011042:	2b00      	cmp	r3, #0
 8011044:	d001      	beq.n	801104a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011046:	230a      	movs	r3, #10
 8011048:	e1db      	b.n	8011402 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801104a:	2300      	movs	r3, #0
 801104c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801104e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011050:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011052:	f7ff ff3f 	bl	8010ed4 <check_fs>
 8011056:	4603      	mov	r3, r0
 8011058:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801105c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011060:	2b02      	cmp	r3, #2
 8011062:	d149      	bne.n	80110f8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011064:	2300      	movs	r3, #0
 8011066:	643b      	str	r3, [r7, #64]	; 0x40
 8011068:	e01e      	b.n	80110a8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011072:	011b      	lsls	r3, r3, #4
 8011074:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011078:	4413      	add	r3, r2
 801107a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107e:	3304      	adds	r3, #4
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d006      	beq.n	8011094 <find_volume+0x114>
 8011086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011088:	3308      	adds	r3, #8
 801108a:	4618      	mov	r0, r3
 801108c:	f7fe f996 	bl	800f3bc <ld_dword>
 8011090:	4602      	mov	r2, r0
 8011092:	e000      	b.n	8011096 <find_volume+0x116>
 8011094:	2200      	movs	r2, #0
 8011096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	3358      	adds	r3, #88	; 0x58
 801109c:	443b      	add	r3, r7
 801109e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80110a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110a4:	3301      	adds	r3, #1
 80110a6:	643b      	str	r3, [r7, #64]	; 0x40
 80110a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110aa:	2b03      	cmp	r3, #3
 80110ac:	d9dd      	bls.n	801106a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80110ae:	2300      	movs	r3, #0
 80110b0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80110b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d002      	beq.n	80110be <find_volume+0x13e>
 80110b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110ba:	3b01      	subs	r3, #1
 80110bc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80110be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	3358      	adds	r3, #88	; 0x58
 80110c4:	443b      	add	r3, r7
 80110c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80110ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80110cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d005      	beq.n	80110de <find_volume+0x15e>
 80110d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80110d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80110d6:	f7ff fefd 	bl	8010ed4 <check_fs>
 80110da:	4603      	mov	r3, r0
 80110dc:	e000      	b.n	80110e0 <find_volume+0x160>
 80110de:	2303      	movs	r3, #3
 80110e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80110e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d905      	bls.n	80110f8 <find_volume+0x178>
 80110ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110ee:	3301      	adds	r3, #1
 80110f0:	643b      	str	r3, [r7, #64]	; 0x40
 80110f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110f4:	2b03      	cmp	r3, #3
 80110f6:	d9e2      	bls.n	80110be <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80110f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80110fc:	2b04      	cmp	r3, #4
 80110fe:	d101      	bne.n	8011104 <find_volume+0x184>
 8011100:	2301      	movs	r3, #1
 8011102:	e17e      	b.n	8011402 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011108:	2b01      	cmp	r3, #1
 801110a:	d901      	bls.n	8011110 <find_volume+0x190>
 801110c:	230d      	movs	r3, #13
 801110e:	e178      	b.n	8011402 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011112:	3334      	adds	r3, #52	; 0x34
 8011114:	330b      	adds	r3, #11
 8011116:	4618      	mov	r0, r3
 8011118:	f7fe f938 	bl	800f38c <ld_word>
 801111c:	4603      	mov	r3, r0
 801111e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011122:	d001      	beq.n	8011128 <find_volume+0x1a8>
 8011124:	230d      	movs	r3, #13
 8011126:	e16c      	b.n	8011402 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112a:	3334      	adds	r3, #52	; 0x34
 801112c:	3316      	adds	r3, #22
 801112e:	4618      	mov	r0, r3
 8011130:	f7fe f92c 	bl	800f38c <ld_word>
 8011134:	4603      	mov	r3, r0
 8011136:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801113a:	2b00      	cmp	r3, #0
 801113c:	d106      	bne.n	801114c <find_volume+0x1cc>
 801113e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011140:	3334      	adds	r3, #52	; 0x34
 8011142:	3324      	adds	r3, #36	; 0x24
 8011144:	4618      	mov	r0, r3
 8011146:	f7fe f939 	bl	800f3bc <ld_dword>
 801114a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801114c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011150:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011154:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	789b      	ldrb	r3, [r3, #2]
 8011160:	2b01      	cmp	r3, #1
 8011162:	d005      	beq.n	8011170 <find_volume+0x1f0>
 8011164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011166:	789b      	ldrb	r3, [r3, #2]
 8011168:	2b02      	cmp	r3, #2
 801116a:	d001      	beq.n	8011170 <find_volume+0x1f0>
 801116c:	230d      	movs	r3, #13
 801116e:	e148      	b.n	8011402 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011172:	789b      	ldrb	r3, [r3, #2]
 8011174:	461a      	mov	r2, r3
 8011176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011178:	fb02 f303 	mul.w	r3, r2, r3
 801117c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011184:	b29a      	uxth	r2, r3
 8011186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011188:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118c:	895b      	ldrh	r3, [r3, #10]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d008      	beq.n	80111a4 <find_volume+0x224>
 8011192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011194:	895b      	ldrh	r3, [r3, #10]
 8011196:	461a      	mov	r2, r3
 8011198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801119a:	895b      	ldrh	r3, [r3, #10]
 801119c:	3b01      	subs	r3, #1
 801119e:	4013      	ands	r3, r2
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d001      	beq.n	80111a8 <find_volume+0x228>
 80111a4:	230d      	movs	r3, #13
 80111a6:	e12c      	b.n	8011402 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80111a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111aa:	3334      	adds	r3, #52	; 0x34
 80111ac:	3311      	adds	r3, #17
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fe f8ec 	bl	800f38c <ld_word>
 80111b4:	4603      	mov	r3, r0
 80111b6:	461a      	mov	r2, r3
 80111b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80111bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111be:	891b      	ldrh	r3, [r3, #8]
 80111c0:	f003 030f 	and.w	r3, r3, #15
 80111c4:	b29b      	uxth	r3, r3
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d001      	beq.n	80111ce <find_volume+0x24e>
 80111ca:	230d      	movs	r3, #13
 80111cc:	e119      	b.n	8011402 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80111ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d0:	3334      	adds	r3, #52	; 0x34
 80111d2:	3313      	adds	r3, #19
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7fe f8d9 	bl	800f38c <ld_word>
 80111da:	4603      	mov	r3, r0
 80111dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80111de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d106      	bne.n	80111f2 <find_volume+0x272>
 80111e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e6:	3334      	adds	r3, #52	; 0x34
 80111e8:	3320      	adds	r3, #32
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7fe f8e6 	bl	800f3bc <ld_dword>
 80111f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80111f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f4:	3334      	adds	r3, #52	; 0x34
 80111f6:	330e      	adds	r3, #14
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fe f8c7 	bl	800f38c <ld_word>
 80111fe:	4603      	mov	r3, r0
 8011200:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011204:	2b00      	cmp	r3, #0
 8011206:	d101      	bne.n	801120c <find_volume+0x28c>
 8011208:	230d      	movs	r3, #13
 801120a:	e0fa      	b.n	8011402 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801120c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801120e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011210:	4413      	add	r3, r2
 8011212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011214:	8912      	ldrh	r2, [r2, #8]
 8011216:	0912      	lsrs	r2, r2, #4
 8011218:	b292      	uxth	r2, r2
 801121a:	4413      	add	r3, r2
 801121c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801121e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011222:	429a      	cmp	r2, r3
 8011224:	d204      	bcs.n	8011230 <find_volume+0x2b0>
 8011226:	230d      	movs	r3, #13
 8011228:	e0eb      	b.n	8011402 <find_volume+0x482>
 801122a:	bf00      	nop
 801122c:	2000135c 	.word	0x2000135c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011238:	8952      	ldrh	r2, [r2, #10]
 801123a:	fbb3 f3f2 	udiv	r3, r3, r2
 801123e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011242:	2b00      	cmp	r3, #0
 8011244:	d101      	bne.n	801124a <find_volume+0x2ca>
 8011246:	230d      	movs	r3, #13
 8011248:	e0db      	b.n	8011402 <find_volume+0x482>
		fmt = FS_FAT32;
 801124a:	2303      	movs	r3, #3
 801124c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011252:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011256:	4293      	cmp	r3, r2
 8011258:	d802      	bhi.n	8011260 <find_volume+0x2e0>
 801125a:	2302      	movs	r3, #2
 801125c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011262:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011266:	4293      	cmp	r3, r2
 8011268:	d802      	bhi.n	8011270 <find_volume+0x2f0>
 801126a:	2301      	movs	r3, #1
 801126c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011272:	1c9a      	adds	r2, r3, #2
 8011274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011276:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801127c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801127e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011282:	441a      	add	r2, r3
 8011284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011286:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128c:	441a      	add	r2, r3
 801128e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011290:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011292:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011296:	2b03      	cmp	r3, #3
 8011298:	d11e      	bne.n	80112d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801129a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129c:	3334      	adds	r3, #52	; 0x34
 801129e:	332a      	adds	r3, #42	; 0x2a
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7fe f873 	bl	800f38c <ld_word>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d001      	beq.n	80112b0 <find_volume+0x330>
 80112ac:	230d      	movs	r3, #13
 80112ae:	e0a8      	b.n	8011402 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80112b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b2:	891b      	ldrh	r3, [r3, #8]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d001      	beq.n	80112bc <find_volume+0x33c>
 80112b8:	230d      	movs	r3, #13
 80112ba:	e0a2      	b.n	8011402 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	3334      	adds	r3, #52	; 0x34
 80112c0:	332c      	adds	r3, #44	; 0x2c
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fe f87a 	bl	800f3bc <ld_dword>
 80112c8:	4602      	mov	r2, r0
 80112ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80112ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d0:	699b      	ldr	r3, [r3, #24]
 80112d2:	009b      	lsls	r3, r3, #2
 80112d4:	647b      	str	r3, [r7, #68]	; 0x44
 80112d6:	e01f      	b.n	8011318 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80112d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112da:	891b      	ldrh	r3, [r3, #8]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d101      	bne.n	80112e4 <find_volume+0x364>
 80112e0:	230d      	movs	r3, #13
 80112e2:	e08e      	b.n	8011402 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80112e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ea:	441a      	add	r2, r3
 80112ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80112f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112f4:	2b02      	cmp	r3, #2
 80112f6:	d103      	bne.n	8011300 <find_volume+0x380>
 80112f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fa:	699b      	ldr	r3, [r3, #24]
 80112fc:	005b      	lsls	r3, r3, #1
 80112fe:	e00a      	b.n	8011316 <find_volume+0x396>
 8011300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011302:	699a      	ldr	r2, [r3, #24]
 8011304:	4613      	mov	r3, r2
 8011306:	005b      	lsls	r3, r3, #1
 8011308:	4413      	add	r3, r2
 801130a:	085a      	lsrs	r2, r3, #1
 801130c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130e:	699b      	ldr	r3, [r3, #24]
 8011310:	f003 0301 	and.w	r3, r3, #1
 8011314:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011316:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131a:	69da      	ldr	r2, [r3, #28]
 801131c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801131e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011322:	0a5b      	lsrs	r3, r3, #9
 8011324:	429a      	cmp	r2, r3
 8011326:	d201      	bcs.n	801132c <find_volume+0x3ac>
 8011328:	230d      	movs	r3, #13
 801132a:	e06a      	b.n	8011402 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132e:	f04f 32ff 	mov.w	r2, #4294967295
 8011332:	615a      	str	r2, [r3, #20]
 8011334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011336:	695a      	ldr	r2, [r3, #20]
 8011338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801133c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133e:	2280      	movs	r2, #128	; 0x80
 8011340:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011346:	2b03      	cmp	r3, #3
 8011348:	d149      	bne.n	80113de <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134c:	3334      	adds	r3, #52	; 0x34
 801134e:	3330      	adds	r3, #48	; 0x30
 8011350:	4618      	mov	r0, r3
 8011352:	f7fe f81b 	bl	800f38c <ld_word>
 8011356:	4603      	mov	r3, r0
 8011358:	2b01      	cmp	r3, #1
 801135a:	d140      	bne.n	80113de <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801135c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801135e:	3301      	adds	r3, #1
 8011360:	4619      	mov	r1, r3
 8011362:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011364:	f7fe fac2 	bl	800f8ec <move_window>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d137      	bne.n	80113de <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801136e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011370:	2200      	movs	r2, #0
 8011372:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011376:	3334      	adds	r3, #52	; 0x34
 8011378:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801137c:	4618      	mov	r0, r3
 801137e:	f7fe f805 	bl	800f38c <ld_word>
 8011382:	4603      	mov	r3, r0
 8011384:	461a      	mov	r2, r3
 8011386:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801138a:	429a      	cmp	r2, r3
 801138c:	d127      	bne.n	80113de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801138e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011390:	3334      	adds	r3, #52	; 0x34
 8011392:	4618      	mov	r0, r3
 8011394:	f7fe f812 	bl	800f3bc <ld_dword>
 8011398:	4603      	mov	r3, r0
 801139a:	4a1c      	ldr	r2, [pc, #112]	; (801140c <find_volume+0x48c>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d11e      	bne.n	80113de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80113a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a2:	3334      	adds	r3, #52	; 0x34
 80113a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fe f807 	bl	800f3bc <ld_dword>
 80113ae:	4603      	mov	r3, r0
 80113b0:	4a17      	ldr	r2, [pc, #92]	; (8011410 <find_volume+0x490>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d113      	bne.n	80113de <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80113b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b8:	3334      	adds	r3, #52	; 0x34
 80113ba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80113be:	4618      	mov	r0, r3
 80113c0:	f7fd fffc 	bl	800f3bc <ld_dword>
 80113c4:	4602      	mov	r2, r0
 80113c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80113ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113cc:	3334      	adds	r3, #52	; 0x34
 80113ce:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fd fff2 	bl	800f3bc <ld_dword>
 80113d8:	4602      	mov	r2, r0
 80113da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113dc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80113de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80113e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80113e6:	4b0b      	ldr	r3, [pc, #44]	; (8011414 <find_volume+0x494>)
 80113e8:	881b      	ldrh	r3, [r3, #0]
 80113ea:	3301      	adds	r3, #1
 80113ec:	b29a      	uxth	r2, r3
 80113ee:	4b09      	ldr	r3, [pc, #36]	; (8011414 <find_volume+0x494>)
 80113f0:	801a      	strh	r2, [r3, #0]
 80113f2:	4b08      	ldr	r3, [pc, #32]	; (8011414 <find_volume+0x494>)
 80113f4:	881a      	ldrh	r2, [r3, #0]
 80113f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80113fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113fc:	f7fe fa0e 	bl	800f81c <clear_lock>
#endif
	return FR_OK;
 8011400:	2300      	movs	r3, #0
}
 8011402:	4618      	mov	r0, r3
 8011404:	3758      	adds	r7, #88	; 0x58
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}
 801140a:	bf00      	nop
 801140c:	41615252 	.word	0x41615252
 8011410:	61417272 	.word	0x61417272
 8011414:	20001360 	.word	0x20001360

08011418 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011422:	2309      	movs	r3, #9
 8011424:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d01c      	beq.n	8011466 <validate+0x4e>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d018      	beq.n	8011466 <validate+0x4e>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d013      	beq.n	8011466 <validate+0x4e>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	889a      	ldrh	r2, [r3, #4]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	88db      	ldrh	r3, [r3, #6]
 8011448:	429a      	cmp	r2, r3
 801144a:	d10c      	bne.n	8011466 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	785b      	ldrb	r3, [r3, #1]
 8011452:	4618      	mov	r0, r3
 8011454:	f7fd fefc 	bl	800f250 <disk_status>
 8011458:	4603      	mov	r3, r0
 801145a:	f003 0301 	and.w	r3, r3, #1
 801145e:	2b00      	cmp	r3, #0
 8011460:	d101      	bne.n	8011466 <validate+0x4e>
			res = FR_OK;
 8011462:	2300      	movs	r3, #0
 8011464:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011466:	7bfb      	ldrb	r3, [r7, #15]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d102      	bne.n	8011472 <validate+0x5a>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	e000      	b.n	8011474 <validate+0x5c>
 8011472:	2300      	movs	r3, #0
 8011474:	683a      	ldr	r2, [r7, #0]
 8011476:	6013      	str	r3, [r2, #0]
	return res;
 8011478:	7bfb      	ldrb	r3, [r7, #15]
}
 801147a:	4618      	mov	r0, r3
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
	...

08011484 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b088      	sub	sp, #32
 8011488:	af00      	add	r7, sp, #0
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	4613      	mov	r3, r2
 8011490:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011496:	f107 0310 	add.w	r3, r7, #16
 801149a:	4618      	mov	r0, r3
 801149c:	f7ff fcd5 	bl	8010e4a <get_ldnumber>
 80114a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	da01      	bge.n	80114ac <f_mount+0x28>
 80114a8:	230b      	movs	r3, #11
 80114aa:	e02b      	b.n	8011504 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80114ac:	4a17      	ldr	r2, [pc, #92]	; (801150c <f_mount+0x88>)
 80114ae:	69fb      	ldr	r3, [r7, #28]
 80114b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d005      	beq.n	80114c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80114bc:	69b8      	ldr	r0, [r7, #24]
 80114be:	f7fe f9ad 	bl	800f81c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	2200      	movs	r2, #0
 80114c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d002      	beq.n	80114d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2200      	movs	r2, #0
 80114d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80114d4:	68fa      	ldr	r2, [r7, #12]
 80114d6:	490d      	ldr	r1, [pc, #52]	; (801150c <f_mount+0x88>)
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d002      	beq.n	80114ea <f_mount+0x66>
 80114e4:	79fb      	ldrb	r3, [r7, #7]
 80114e6:	2b01      	cmp	r3, #1
 80114e8:	d001      	beq.n	80114ee <f_mount+0x6a>
 80114ea:	2300      	movs	r3, #0
 80114ec:	e00a      	b.n	8011504 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80114ee:	f107 010c 	add.w	r1, r7, #12
 80114f2:	f107 0308 	add.w	r3, r7, #8
 80114f6:	2200      	movs	r2, #0
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7ff fd41 	bl	8010f80 <find_volume>
 80114fe:	4603      	mov	r3, r0
 8011500:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011502:	7dfb      	ldrb	r3, [r7, #23]
}
 8011504:	4618      	mov	r0, r3
 8011506:	3720      	adds	r7, #32
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	2000135c 	.word	0x2000135c

08011510 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b09a      	sub	sp, #104	; 0x68
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	4613      	mov	r3, r2
 801151c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <f_open+0x18>
 8011524:	2309      	movs	r3, #9
 8011526:	e1bd      	b.n	80118a4 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011528:	79fb      	ldrb	r3, [r7, #7]
 801152a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801152e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011530:	79fa      	ldrb	r2, [r7, #7]
 8011532:	f107 0110 	add.w	r1, r7, #16
 8011536:	f107 0308 	add.w	r3, r7, #8
 801153a:	4618      	mov	r0, r3
 801153c:	f7ff fd20 	bl	8010f80 <find_volume>
 8011540:	4603      	mov	r3, r0
 8011542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8011546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801154a:	2b00      	cmp	r3, #0
 801154c:	f040 81a1 	bne.w	8011892 <f_open+0x382>
		dj.obj.fs = fs;
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8011554:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011558:	f001 fb1c 	bl	8012b94 <ff_memalloc>
 801155c:	65b8      	str	r0, [r7, #88]	; 0x58
 801155e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011560:	2b00      	cmp	r3, #0
 8011562:	d101      	bne.n	8011568 <f_open+0x58>
 8011564:	2311      	movs	r3, #17
 8011566:	e19d      	b.n	80118a4 <f_open+0x394>
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801156c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801156e:	68ba      	ldr	r2, [r7, #8]
 8011570:	f107 0314 	add.w	r3, r7, #20
 8011574:	4611      	mov	r1, r2
 8011576:	4618      	mov	r0, r3
 8011578:	f7ff fbf6 	bl	8010d68 <follow_path>
 801157c:	4603      	mov	r3, r0
 801157e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011582:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011586:	2b00      	cmp	r3, #0
 8011588:	d11a      	bne.n	80115c0 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801158a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801158e:	b25b      	sxtb	r3, r3
 8011590:	2b00      	cmp	r3, #0
 8011592:	da03      	bge.n	801159c <f_open+0x8c>
				res = FR_INVALID_NAME;
 8011594:	2306      	movs	r3, #6
 8011596:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801159a:	e011      	b.n	80115c0 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801159c:	79fb      	ldrb	r3, [r7, #7]
 801159e:	f023 0301 	bic.w	r3, r3, #1
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	bf14      	ite	ne
 80115a6:	2301      	movne	r3, #1
 80115a8:	2300      	moveq	r3, #0
 80115aa:	b2db      	uxtb	r3, r3
 80115ac:	461a      	mov	r2, r3
 80115ae:	f107 0314 	add.w	r3, r7, #20
 80115b2:	4611      	mov	r1, r2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7fd ffe9 	bl	800f58c <chk_lock>
 80115ba:	4603      	mov	r3, r0
 80115bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80115c0:	79fb      	ldrb	r3, [r7, #7]
 80115c2:	f003 031c 	and.w	r3, r3, #28
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d07f      	beq.n	80116ca <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 80115ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d017      	beq.n	8011602 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80115d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80115d6:	2b04      	cmp	r3, #4
 80115d8:	d10e      	bne.n	80115f8 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80115da:	f7fe f833 	bl	800f644 <enq_lock>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d006      	beq.n	80115f2 <f_open+0xe2>
 80115e4:	f107 0314 	add.w	r3, r7, #20
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7ff f90d 	bl	8010808 <dir_register>
 80115ee:	4603      	mov	r3, r0
 80115f0:	e000      	b.n	80115f4 <f_open+0xe4>
 80115f2:	2312      	movs	r3, #18
 80115f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80115f8:	79fb      	ldrb	r3, [r7, #7]
 80115fa:	f043 0308 	orr.w	r3, r3, #8
 80115fe:	71fb      	strb	r3, [r7, #7]
 8011600:	e010      	b.n	8011624 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011602:	7ebb      	ldrb	r3, [r7, #26]
 8011604:	f003 0311 	and.w	r3, r3, #17
 8011608:	2b00      	cmp	r3, #0
 801160a:	d003      	beq.n	8011614 <f_open+0x104>
					res = FR_DENIED;
 801160c:	2307      	movs	r3, #7
 801160e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011612:	e007      	b.n	8011624 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011614:	79fb      	ldrb	r3, [r7, #7]
 8011616:	f003 0304 	and.w	r3, r3, #4
 801161a:	2b00      	cmp	r3, #0
 801161c:	d002      	beq.n	8011624 <f_open+0x114>
 801161e:	2308      	movs	r3, #8
 8011620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011624:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011628:	2b00      	cmp	r3, #0
 801162a:	d168      	bne.n	80116fe <f_open+0x1ee>
 801162c:	79fb      	ldrb	r3, [r7, #7]
 801162e:	f003 0308 	and.w	r3, r3, #8
 8011632:	2b00      	cmp	r3, #0
 8011634:	d063      	beq.n	80116fe <f_open+0x1ee>
				dw = GET_FATTIME();
 8011636:	f7fb ff13 	bl	800d460 <get_fattime>
 801163a:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801163e:	330e      	adds	r3, #14
 8011640:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011642:	4618      	mov	r0, r3
 8011644:	f7fd fef8 	bl	800f438 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801164a:	3316      	adds	r3, #22
 801164c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801164e:	4618      	mov	r0, r3
 8011650:	f7fd fef2 	bl	800f438 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011656:	330b      	adds	r3, #11
 8011658:	2220      	movs	r2, #32
 801165a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011660:	4611      	mov	r1, r2
 8011662:	4618      	mov	r0, r3
 8011664:	f7fe fe49 	bl	80102fa <ld_clust>
 8011668:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801166e:	2200      	movs	r2, #0
 8011670:	4618      	mov	r0, r3
 8011672:	f7fe fe61 	bl	8010338 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011678:	331c      	adds	r3, #28
 801167a:	2100      	movs	r1, #0
 801167c:	4618      	mov	r0, r3
 801167e:	f7fd fedb 	bl	800f438 <st_dword>
					fs->wflag = 1;
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	2201      	movs	r2, #1
 8011686:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801168a:	2b00      	cmp	r3, #0
 801168c:	d037      	beq.n	80116fe <f_open+0x1ee>
						dw = fs->winsect;
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011692:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8011694:	f107 0314 	add.w	r3, r7, #20
 8011698:	2200      	movs	r2, #0
 801169a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801169c:	4618      	mov	r0, r3
 801169e:	f7fe fb74 	bl	800fd8a <remove_chain>
 80116a2:	4603      	mov	r3, r0
 80116a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80116a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d126      	bne.n	80116fe <f_open+0x1ee>
							res = move_window(fs, dw);
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fe f919 	bl	800f8ec <move_window>
 80116ba:	4603      	mov	r3, r0
 80116bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80116c4:	3a01      	subs	r2, #1
 80116c6:	611a      	str	r2, [r3, #16]
 80116c8:	e019      	b.n	80116fe <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80116ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d115      	bne.n	80116fe <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80116d2:	7ebb      	ldrb	r3, [r7, #26]
 80116d4:	f003 0310 	and.w	r3, r3, #16
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d003      	beq.n	80116e4 <f_open+0x1d4>
					res = FR_NO_FILE;
 80116dc:	2304      	movs	r3, #4
 80116de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80116e2:	e00c      	b.n	80116fe <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80116e4:	79fb      	ldrb	r3, [r7, #7]
 80116e6:	f003 0302 	and.w	r3, r3, #2
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d007      	beq.n	80116fe <f_open+0x1ee>
 80116ee:	7ebb      	ldrb	r3, [r7, #26]
 80116f0:	f003 0301 	and.w	r3, r3, #1
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d002      	beq.n	80116fe <f_open+0x1ee>
						res = FR_DENIED;
 80116f8:	2307      	movs	r3, #7
 80116fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80116fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011702:	2b00      	cmp	r3, #0
 8011704:	d128      	bne.n	8011758 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011706:	79fb      	ldrb	r3, [r7, #7]
 8011708:	f003 0308 	and.w	r3, r3, #8
 801170c:	2b00      	cmp	r3, #0
 801170e:	d003      	beq.n	8011718 <f_open+0x208>
				mode |= FA_MODIFIED;
 8011710:	79fb      	ldrb	r3, [r7, #7]
 8011712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011716:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011726:	79fb      	ldrb	r3, [r7, #7]
 8011728:	f023 0301 	bic.w	r3, r3, #1
 801172c:	2b00      	cmp	r3, #0
 801172e:	bf14      	ite	ne
 8011730:	2301      	movne	r3, #1
 8011732:	2300      	moveq	r3, #0
 8011734:	b2db      	uxtb	r3, r3
 8011736:	461a      	mov	r2, r3
 8011738:	f107 0314 	add.w	r3, r7, #20
 801173c:	4611      	mov	r1, r2
 801173e:	4618      	mov	r0, r3
 8011740:	f7fd ffa2 	bl	800f688 <inc_lock>
 8011744:	4602      	mov	r2, r0
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d102      	bne.n	8011758 <f_open+0x248>
 8011752:	2302      	movs	r3, #2
 8011754:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011758:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801175c:	2b00      	cmp	r3, #0
 801175e:	f040 8095 	bne.w	801188c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011766:	4611      	mov	r1, r2
 8011768:	4618      	mov	r0, r3
 801176a:	f7fe fdc6 	bl	80102fa <ld_clust>
 801176e:	4602      	mov	r2, r0
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011776:	331c      	adds	r3, #28
 8011778:	4618      	mov	r0, r3
 801177a:	f7fd fe1f 	bl	800f3bc <ld_dword>
 801177e:	4602      	mov	r2, r0
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2200      	movs	r2, #0
 8011788:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801178a:	693a      	ldr	r2, [r7, #16]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	88da      	ldrh	r2, [r3, #6]
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	79fa      	ldrb	r2, [r7, #7]
 801179c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2200      	movs	r2, #0
 80117a2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2200      	movs	r2, #0
 80117a8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	2200      	movs	r2, #0
 80117ae:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	3330      	adds	r3, #48	; 0x30
 80117b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80117b8:	2100      	movs	r1, #0
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7fd fe89 	bl	800f4d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80117c0:	79fb      	ldrb	r3, [r7, #7]
 80117c2:	f003 0320 	and.w	r3, r3, #32
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d060      	beq.n	801188c <f_open+0x37c>
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	68db      	ldr	r3, [r3, #12]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d05c      	beq.n	801188c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	68da      	ldr	r2, [r3, #12]
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	895b      	ldrh	r3, [r3, #10]
 80117de:	025b      	lsls	r3, r3, #9
 80117e0:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117ee:	e016      	b.n	801181e <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80117f4:	4618      	mov	r0, r3
 80117f6:	f7fe f934 	bl	800fa62 <get_fat>
 80117fa:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80117fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d802      	bhi.n	8011808 <f_open+0x2f8>
 8011802:	2302      	movs	r3, #2
 8011804:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801180a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801180e:	d102      	bne.n	8011816 <f_open+0x306>
 8011810:	2301      	movs	r3, #1
 8011812:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011816:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801181a:	1ad3      	subs	r3, r2, r3
 801181c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801181e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011822:	2b00      	cmp	r3, #0
 8011824:	d103      	bne.n	801182e <f_open+0x31e>
 8011826:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801182a:	429a      	cmp	r2, r3
 801182c:	d8e0      	bhi.n	80117f0 <f_open+0x2e0>
				}
				fp->clust = clst;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011832:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011834:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011838:	2b00      	cmp	r3, #0
 801183a:	d127      	bne.n	801188c <f_open+0x37c>
 801183c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801183e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011842:	2b00      	cmp	r3, #0
 8011844:	d022      	beq.n	801188c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801184a:	4618      	mov	r0, r3
 801184c:	f7fe f8ea 	bl	800fa24 <clust2sect>
 8011850:	64b8      	str	r0, [r7, #72]	; 0x48
 8011852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011854:	2b00      	cmp	r3, #0
 8011856:	d103      	bne.n	8011860 <f_open+0x350>
						res = FR_INT_ERR;
 8011858:	2302      	movs	r3, #2
 801185a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801185e:	e015      	b.n	801188c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011862:	0a5a      	lsrs	r2, r3, #9
 8011864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011866:	441a      	add	r2, r3
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	7858      	ldrb	r0, [r3, #1]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6a1a      	ldr	r2, [r3, #32]
 801187a:	2301      	movs	r3, #1
 801187c:	f7fd fd28 	bl	800f2d0 <disk_read>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d002      	beq.n	801188c <f_open+0x37c>
 8011886:	2301      	movs	r3, #1
 8011888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 801188c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801188e:	f001 f98d 	bl	8012bac <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011892:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011896:	2b00      	cmp	r3, #0
 8011898:	d002      	beq.n	80118a0 <f_open+0x390>
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2200      	movs	r2, #0
 801189e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80118a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3768      	adds	r7, #104	; 0x68
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b08c      	sub	sp, #48	; 0x30
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
 80118b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	2200      	movs	r2, #0
 80118c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f107 0210 	add.w	r2, r7, #16
 80118ca:	4611      	mov	r1, r2
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff fda3 	bl	8011418 <validate>
 80118d2:	4603      	mov	r3, r0
 80118d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80118d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d107      	bne.n	80118f0 <f_write+0x44>
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	7d5b      	ldrb	r3, [r3, #21]
 80118e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80118e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d002      	beq.n	80118f6 <f_write+0x4a>
 80118f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118f4:	e14b      	b.n	8011b8e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	7d1b      	ldrb	r3, [r3, #20]
 80118fa:	f003 0302 	and.w	r3, r3, #2
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d101      	bne.n	8011906 <f_write+0x5a>
 8011902:	2307      	movs	r3, #7
 8011904:	e143      	b.n	8011b8e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	699a      	ldr	r2, [r3, #24]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	441a      	add	r2, r3
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	699b      	ldr	r3, [r3, #24]
 8011912:	429a      	cmp	r2, r3
 8011914:	f080 812d 	bcs.w	8011b72 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	699b      	ldr	r3, [r3, #24]
 801191c:	43db      	mvns	r3, r3
 801191e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011920:	e127      	b.n	8011b72 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	699b      	ldr	r3, [r3, #24]
 8011926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801192a:	2b00      	cmp	r3, #0
 801192c:	f040 80e3 	bne.w	8011af6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	699b      	ldr	r3, [r3, #24]
 8011934:	0a5b      	lsrs	r3, r3, #9
 8011936:	693a      	ldr	r2, [r7, #16]
 8011938:	8952      	ldrh	r2, [r2, #10]
 801193a:	3a01      	subs	r2, #1
 801193c:	4013      	ands	r3, r2
 801193e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011940:	69bb      	ldr	r3, [r7, #24]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d143      	bne.n	80119ce <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	699b      	ldr	r3, [r3, #24]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d10c      	bne.n	8011968 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011956:	2b00      	cmp	r3, #0
 8011958:	d11a      	bne.n	8011990 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2100      	movs	r1, #0
 801195e:	4618      	mov	r0, r3
 8011960:	f7fe fa78 	bl	800fe54 <create_chain>
 8011964:	62b8      	str	r0, [r7, #40]	; 0x28
 8011966:	e013      	b.n	8011990 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801196c:	2b00      	cmp	r3, #0
 801196e:	d007      	beq.n	8011980 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	699b      	ldr	r3, [r3, #24]
 8011974:	4619      	mov	r1, r3
 8011976:	68f8      	ldr	r0, [r7, #12]
 8011978:	f7fe fb04 	bl	800ff84 <clmt_clust>
 801197c:	62b8      	str	r0, [r7, #40]	; 0x28
 801197e:	e007      	b.n	8011990 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011980:	68fa      	ldr	r2, [r7, #12]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	69db      	ldr	r3, [r3, #28]
 8011986:	4619      	mov	r1, r3
 8011988:	4610      	mov	r0, r2
 801198a:	f7fe fa63 	bl	800fe54 <create_chain>
 801198e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011992:	2b00      	cmp	r3, #0
 8011994:	f000 80f2 	beq.w	8011b7c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199a:	2b01      	cmp	r3, #1
 801199c:	d104      	bne.n	80119a8 <f_write+0xfc>
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2202      	movs	r2, #2
 80119a2:	755a      	strb	r2, [r3, #21]
 80119a4:	2302      	movs	r3, #2
 80119a6:	e0f2      	b.n	8011b8e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80119a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ae:	d104      	bne.n	80119ba <f_write+0x10e>
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2201      	movs	r2, #1
 80119b4:	755a      	strb	r2, [r3, #21]
 80119b6:	2301      	movs	r3, #1
 80119b8:	e0e9      	b.n	8011b8e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	689b      	ldr	r3, [r3, #8]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d102      	bne.n	80119ce <f_write+0x122>
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	7d1b      	ldrb	r3, [r3, #20]
 80119d2:	b25b      	sxtb	r3, r3
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	da18      	bge.n	8011a0a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	7858      	ldrb	r0, [r3, #1]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	6a1a      	ldr	r2, [r3, #32]
 80119e6:	2301      	movs	r3, #1
 80119e8:	f7fd fc92 	bl	800f310 <disk_write>
 80119ec:	4603      	mov	r3, r0
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d004      	beq.n	80119fc <f_write+0x150>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2201      	movs	r2, #1
 80119f6:	755a      	strb	r2, [r3, #21]
 80119f8:	2301      	movs	r3, #1
 80119fa:	e0c8      	b.n	8011b8e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	7d1b      	ldrb	r3, [r3, #20]
 8011a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a04:	b2da      	uxtb	r2, r3
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011a0a:	693a      	ldr	r2, [r7, #16]
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	69db      	ldr	r3, [r3, #28]
 8011a10:	4619      	mov	r1, r3
 8011a12:	4610      	mov	r0, r2
 8011a14:	f7fe f806 	bl	800fa24 <clust2sect>
 8011a18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d104      	bne.n	8011a2a <f_write+0x17e>
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	2202      	movs	r2, #2
 8011a24:	755a      	strb	r2, [r3, #21]
 8011a26:	2302      	movs	r3, #2
 8011a28:	e0b1      	b.n	8011b8e <f_write+0x2e2>
			sect += csect;
 8011a2a:	697a      	ldr	r2, [r7, #20]
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	4413      	add	r3, r2
 8011a30:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	0a5b      	lsrs	r3, r3, #9
 8011a36:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011a38:	6a3b      	ldr	r3, [r7, #32]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d03c      	beq.n	8011ab8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011a3e:	69ba      	ldr	r2, [r7, #24]
 8011a40:	6a3b      	ldr	r3, [r7, #32]
 8011a42:	4413      	add	r3, r2
 8011a44:	693a      	ldr	r2, [r7, #16]
 8011a46:	8952      	ldrh	r2, [r2, #10]
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d905      	bls.n	8011a58 <f_write+0x1ac>
					cc = fs->csize - csect;
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	895b      	ldrh	r3, [r3, #10]
 8011a50:	461a      	mov	r2, r3
 8011a52:	69bb      	ldr	r3, [r7, #24]
 8011a54:	1ad3      	subs	r3, r2, r3
 8011a56:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	7858      	ldrb	r0, [r3, #1]
 8011a5c:	6a3b      	ldr	r3, [r7, #32]
 8011a5e:	697a      	ldr	r2, [r7, #20]
 8011a60:	69f9      	ldr	r1, [r7, #28]
 8011a62:	f7fd fc55 	bl	800f310 <disk_write>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d004      	beq.n	8011a76 <f_write+0x1ca>
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	755a      	strb	r2, [r3, #21]
 8011a72:	2301      	movs	r3, #1
 8011a74:	e08b      	b.n	8011b8e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	6a1a      	ldr	r2, [r3, #32]
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	1ad3      	subs	r3, r2, r3
 8011a7e:	6a3a      	ldr	r2, [r7, #32]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d915      	bls.n	8011ab0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	6a1a      	ldr	r2, [r3, #32]
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	1ad3      	subs	r3, r2, r3
 8011a92:	025b      	lsls	r3, r3, #9
 8011a94:	69fa      	ldr	r2, [r7, #28]
 8011a96:	4413      	add	r3, r2
 8011a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	f7fd fcf7 	bl	800f490 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	7d1b      	ldrb	r3, [r3, #20]
 8011aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011aaa:	b2da      	uxtb	r2, r3
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011ab0:	6a3b      	ldr	r3, [r7, #32]
 8011ab2:	025b      	lsls	r3, r3, #9
 8011ab4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011ab6:	e03f      	b.n	8011b38 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	6a1b      	ldr	r3, [r3, #32]
 8011abc:	697a      	ldr	r2, [r7, #20]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d016      	beq.n	8011af0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	699a      	ldr	r2, [r3, #24]
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d210      	bcs.n	8011af0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	7858      	ldrb	r0, [r3, #1]
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ad8:	2301      	movs	r3, #1
 8011ada:	697a      	ldr	r2, [r7, #20]
 8011adc:	f7fd fbf8 	bl	800f2d0 <disk_read>
 8011ae0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d004      	beq.n	8011af0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2201      	movs	r2, #1
 8011aea:	755a      	strb	r2, [r3, #21]
 8011aec:	2301      	movs	r3, #1
 8011aee:	e04e      	b.n	8011b8e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	697a      	ldr	r2, [r7, #20]
 8011af4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	699b      	ldr	r3, [r3, #24]
 8011afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011afe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011b02:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d901      	bls.n	8011b10 <f_write+0x264>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	699b      	ldr	r3, [r3, #24]
 8011b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b1e:	4413      	add	r3, r2
 8011b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b22:	69f9      	ldr	r1, [r7, #28]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7fd fcb3 	bl	800f490 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	7d1b      	ldrb	r3, [r3, #20]
 8011b2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011b38:	69fa      	ldr	r2, [r7, #28]
 8011b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3c:	4413      	add	r3, r2
 8011b3e:	61fb      	str	r3, [r7, #28]
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	699a      	ldr	r2, [r3, #24]
 8011b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b46:	441a      	add	r2, r3
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	619a      	str	r2, [r3, #24]
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	68da      	ldr	r2, [r3, #12]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	699b      	ldr	r3, [r3, #24]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	bf38      	it	cc
 8011b58:	461a      	movcc	r2, r3
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	60da      	str	r2, [r3, #12]
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	681a      	ldr	r2, [r3, #0]
 8011b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b64:	441a      	add	r2, r3
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	601a      	str	r2, [r3, #0]
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6e:	1ad3      	subs	r3, r2, r3
 8011b70:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	f47f aed4 	bne.w	8011922 <f_write+0x76>
 8011b7a:	e000      	b.n	8011b7e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011b7c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	7d1b      	ldrb	r3, [r3, #20]
 8011b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b86:	b2da      	uxtb	r2, r3
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011b8c:	2300      	movs	r3, #0
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3730      	adds	r7, #48	; 0x30
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}

08011b96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011b96:	b580      	push	{r7, lr}
 8011b98:	b086      	sub	sp, #24
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f107 0208 	add.w	r2, r7, #8
 8011ba4:	4611      	mov	r1, r2
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7ff fc36 	bl	8011418 <validate>
 8011bac:	4603      	mov	r3, r0
 8011bae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011bb0:	7dfb      	ldrb	r3, [r7, #23]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d168      	bne.n	8011c88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	7d1b      	ldrb	r3, [r3, #20]
 8011bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d062      	beq.n	8011c88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	7d1b      	ldrb	r3, [r3, #20]
 8011bc6:	b25b      	sxtb	r3, r3
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	da15      	bge.n	8011bf8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	7858      	ldrb	r0, [r3, #1]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6a1a      	ldr	r2, [r3, #32]
 8011bda:	2301      	movs	r3, #1
 8011bdc:	f7fd fb98 	bl	800f310 <disk_write>
 8011be0:	4603      	mov	r3, r0
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d001      	beq.n	8011bea <f_sync+0x54>
 8011be6:	2301      	movs	r3, #1
 8011be8:	e04f      	b.n	8011c8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	7d1b      	ldrb	r3, [r3, #20]
 8011bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bf2:	b2da      	uxtb	r2, r3
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011bf8:	f7fb fc32 	bl	800d460 <get_fattime>
 8011bfc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011bfe:	68ba      	ldr	r2, [r7, #8]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c04:	4619      	mov	r1, r3
 8011c06:	4610      	mov	r0, r2
 8011c08:	f7fd fe70 	bl	800f8ec <move_window>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011c10:	7dfb      	ldrb	r3, [r7, #23]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d138      	bne.n	8011c88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	330b      	adds	r3, #11
 8011c20:	781a      	ldrb	r2, [r3, #0]
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	330b      	adds	r3, #11
 8011c26:	f042 0220 	orr.w	r2, r2, #32
 8011c2a:	b2d2      	uxtb	r2, r2
 8011c2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6818      	ldr	r0, [r3, #0]
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	689b      	ldr	r3, [r3, #8]
 8011c36:	461a      	mov	r2, r3
 8011c38:	68f9      	ldr	r1, [r7, #12]
 8011c3a:	f7fe fb7d 	bl	8010338 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	f103 021c 	add.w	r2, r3, #28
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	4619      	mov	r1, r3
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	f7fd fbf4 	bl	800f438 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	3316      	adds	r3, #22
 8011c54:	6939      	ldr	r1, [r7, #16]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7fd fbee 	bl	800f438 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	3312      	adds	r3, #18
 8011c60:	2100      	movs	r1, #0
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fd fbcd 	bl	800f402 <st_word>
					fs->wflag = 1;
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7fd fe69 	bl	800f948 <sync_fs>
 8011c76:	4603      	mov	r3, r0
 8011c78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	7d1b      	ldrb	r3, [r3, #20]
 8011c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3718      	adds	r7, #24
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}

08011c92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011c92:	b580      	push	{r7, lr}
 8011c94:	b084      	sub	sp, #16
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f7ff ff7b 	bl	8011b96 <f_sync>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011ca4:	7bfb      	ldrb	r3, [r7, #15]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d118      	bne.n	8011cdc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f107 0208 	add.w	r2, r7, #8
 8011cb0:	4611      	mov	r1, r2
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7ff fbb0 	bl	8011418 <validate>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011cbc:	7bfb      	ldrb	r3, [r7, #15]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d10c      	bne.n	8011cdc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	691b      	ldr	r3, [r3, #16]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7fd fd6c 	bl	800f7a4 <dec_lock>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011cd0:	7bfb      	ldrb	r3, [r7, #15]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d102      	bne.n	8011cdc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2200      	movs	r2, #0
 8011cda:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3710      	adds	r7, #16
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}

08011ce6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b090      	sub	sp, #64	; 0x40
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f107 0208 	add.w	r2, r7, #8
 8011cf6:	4611      	mov	r1, r2
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7ff fb8d 	bl	8011418 <validate>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011d04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d103      	bne.n	8011d14 <f_lseek+0x2e>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	7d5b      	ldrb	r3, [r3, #21]
 8011d10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011d14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d002      	beq.n	8011d22 <f_lseek+0x3c>
 8011d1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d20:	e1e6      	b.n	80120f0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f000 80d1 	beq.w	8011ece <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d32:	d15a      	bne.n	8011dea <f_lseek+0x104>
			tbl = fp->cltbl;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d38:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3c:	1d1a      	adds	r2, r3, #4
 8011d3e:	627a      	str	r2, [r7, #36]	; 0x24
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	617b      	str	r3, [r7, #20]
 8011d44:	2302      	movs	r3, #2
 8011d46:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d03a      	beq.n	8011dca <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d56:	613b      	str	r3, [r7, #16]
 8011d58:	2300      	movs	r3, #0
 8011d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5e:	3302      	adds	r3, #2
 8011d60:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d64:	60fb      	str	r3, [r7, #12]
 8011d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d68:	3301      	adds	r3, #1
 8011d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7fd fe76 	bl	800fa62 <get_fat>
 8011d76:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d804      	bhi.n	8011d88 <f_lseek+0xa2>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2202      	movs	r2, #2
 8011d82:	755a      	strb	r2, [r3, #21]
 8011d84:	2302      	movs	r3, #2
 8011d86:	e1b3      	b.n	80120f0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8e:	d104      	bne.n	8011d9a <f_lseek+0xb4>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2201      	movs	r2, #1
 8011d94:	755a      	strb	r2, [r3, #21]
 8011d96:	2301      	movs	r3, #1
 8011d98:	e1aa      	b.n	80120f0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d0de      	beq.n	8011d62 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d809      	bhi.n	8011dc0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	1d1a      	adds	r2, r3, #4
 8011db0:	627a      	str	r2, [r7, #36]	; 0x24
 8011db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011db4:	601a      	str	r2, [r3, #0]
 8011db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db8:	1d1a      	adds	r2, r3, #4
 8011dba:	627a      	str	r2, [r7, #36]	; 0x24
 8011dbc:	693a      	ldr	r2, [r7, #16]
 8011dbe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	699b      	ldr	r3, [r3, #24]
 8011dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d3c4      	bcc.n	8011d54 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dd0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d803      	bhi.n	8011de2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ddc:	2200      	movs	r2, #0
 8011dde:	601a      	str	r2, [r3, #0]
 8011de0:	e184      	b.n	80120ec <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011de2:	2311      	movs	r3, #17
 8011de4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011de8:	e180      	b.n	80120ec <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	683a      	ldr	r2, [r7, #0]
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d902      	bls.n	8011dfa <f_lseek+0x114>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	683a      	ldr	r2, [r7, #0]
 8011dfe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	f000 8172 	beq.w	80120ec <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7fe f8b8 	bl	800ff84 <clmt_clust>
 8011e14:	4602      	mov	r2, r0
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011e1a:	68ba      	ldr	r2, [r7, #8]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	69db      	ldr	r3, [r3, #28]
 8011e20:	4619      	mov	r1, r3
 8011e22:	4610      	mov	r0, r2
 8011e24:	f7fd fdfe 	bl	800fa24 <clust2sect>
 8011e28:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d104      	bne.n	8011e3a <f_lseek+0x154>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2202      	movs	r2, #2
 8011e34:	755a      	strb	r2, [r3, #21]
 8011e36:	2302      	movs	r3, #2
 8011e38:	e15a      	b.n	80120f0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	3b01      	subs	r3, #1
 8011e3e:	0a5b      	lsrs	r3, r3, #9
 8011e40:	68ba      	ldr	r2, [r7, #8]
 8011e42:	8952      	ldrh	r2, [r2, #10]
 8011e44:	3a01      	subs	r2, #1
 8011e46:	4013      	ands	r3, r2
 8011e48:	69ba      	ldr	r2, [r7, #24]
 8011e4a:	4413      	add	r3, r2
 8011e4c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	699b      	ldr	r3, [r3, #24]
 8011e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f000 8148 	beq.w	80120ec <f_lseek+0x406>
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6a1b      	ldr	r3, [r3, #32]
 8011e60:	69ba      	ldr	r2, [r7, #24]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	f000 8142 	beq.w	80120ec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	7d1b      	ldrb	r3, [r3, #20]
 8011e6c:	b25b      	sxtb	r3, r3
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	da18      	bge.n	8011ea4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	7858      	ldrb	r0, [r3, #1]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6a1a      	ldr	r2, [r3, #32]
 8011e80:	2301      	movs	r3, #1
 8011e82:	f7fd fa45 	bl	800f310 <disk_write>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d004      	beq.n	8011e96 <f_lseek+0x1b0>
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2201      	movs	r2, #1
 8011e90:	755a      	strb	r2, [r3, #21]
 8011e92:	2301      	movs	r3, #1
 8011e94:	e12c      	b.n	80120f0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	7d1b      	ldrb	r3, [r3, #20]
 8011e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e9e:	b2da      	uxtb	r2, r3
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	7858      	ldrb	r0, [r3, #1]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011eae:	2301      	movs	r3, #1
 8011eb0:	69ba      	ldr	r2, [r7, #24]
 8011eb2:	f7fd fa0d 	bl	800f2d0 <disk_read>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d004      	beq.n	8011ec6 <f_lseek+0x1e0>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	755a      	strb	r2, [r3, #21]
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	e114      	b.n	80120f0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	69ba      	ldr	r2, [r7, #24]
 8011eca:	621a      	str	r2, [r3, #32]
 8011ecc:	e10e      	b.n	80120ec <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	683a      	ldr	r2, [r7, #0]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d908      	bls.n	8011eea <f_lseek+0x204>
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	7d1b      	ldrb	r3, [r3, #20]
 8011edc:	f003 0302 	and.w	r3, r3, #2
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d102      	bne.n	8011eea <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	699b      	ldr	r3, [r3, #24]
 8011eee:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ef8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	f000 80a7 	beq.w	8012050 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	895b      	ldrh	r3, [r3, #10]
 8011f06:	025b      	lsls	r3, r3, #9
 8011f08:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011f0a:	6a3b      	ldr	r3, [r7, #32]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d01b      	beq.n	8011f48 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	1e5a      	subs	r2, r3, #1
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	fbb2 f2f3 	udiv	r2, r2, r3
 8011f1a:	6a3b      	ldr	r3, [r7, #32]
 8011f1c:	1e59      	subs	r1, r3, #1
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d30f      	bcc.n	8011f48 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011f28:	6a3b      	ldr	r3, [r7, #32]
 8011f2a:	1e5a      	subs	r2, r3, #1
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	425b      	negs	r3, r3
 8011f30:	401a      	ands	r2, r3
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	699b      	ldr	r3, [r3, #24]
 8011f3a:	683a      	ldr	r2, [r7, #0]
 8011f3c:	1ad3      	subs	r3, r2, r3
 8011f3e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	69db      	ldr	r3, [r3, #28]
 8011f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f46:	e022      	b.n	8011f8e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	689b      	ldr	r3, [r3, #8]
 8011f4c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d119      	bne.n	8011f88 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2100      	movs	r1, #0
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7fd ff7b 	bl	800fe54 <create_chain>
 8011f5e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d104      	bne.n	8011f70 <f_lseek+0x28a>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2202      	movs	r2, #2
 8011f6a:	755a      	strb	r2, [r3, #21]
 8011f6c:	2302      	movs	r3, #2
 8011f6e:	e0bf      	b.n	80120f0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f76:	d104      	bne.n	8011f82 <f_lseek+0x29c>
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	755a      	strb	r2, [r3, #21]
 8011f7e:	2301      	movs	r3, #1
 8011f80:	e0b6      	b.n	80120f0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f86:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f8c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d05d      	beq.n	8012050 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8011f94:	e03a      	b.n	801200c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8011f96:	683a      	ldr	r2, [r7, #0]
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	1ad3      	subs	r3, r2, r3
 8011f9c:	603b      	str	r3, [r7, #0]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	699a      	ldr	r2, [r3, #24]
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	441a      	add	r2, r3
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	7d1b      	ldrb	r3, [r3, #20]
 8011fae:	f003 0302 	and.w	r3, r3, #2
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d00b      	beq.n	8011fce <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fd ff4a 	bl	800fe54 <create_chain>
 8011fc0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d108      	bne.n	8011fda <f_lseek+0x2f4>
							ofs = 0; break;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	603b      	str	r3, [r7, #0]
 8011fcc:	e022      	b.n	8012014 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fd fd45 	bl	800fa62 <get_fat>
 8011fd8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fe0:	d104      	bne.n	8011fec <f_lseek+0x306>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	755a      	strb	r2, [r3, #21]
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e081      	b.n	80120f0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fee:	2b01      	cmp	r3, #1
 8011ff0:	d904      	bls.n	8011ffc <f_lseek+0x316>
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	699b      	ldr	r3, [r3, #24]
 8011ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d304      	bcc.n	8012006 <f_lseek+0x320>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2202      	movs	r2, #2
 8012000:	755a      	strb	r2, [r3, #21]
 8012002:	2302      	movs	r3, #2
 8012004:	e074      	b.n	80120f0 <f_lseek+0x40a>
					fp->clust = clst;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801200a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801200c:	683a      	ldr	r2, [r7, #0]
 801200e:	69fb      	ldr	r3, [r7, #28]
 8012010:	429a      	cmp	r2, r3
 8012012:	d8c0      	bhi.n	8011f96 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	699a      	ldr	r2, [r3, #24]
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	441a      	add	r2, r3
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012026:	2b00      	cmp	r3, #0
 8012028:	d012      	beq.n	8012050 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801202e:	4618      	mov	r0, r3
 8012030:	f7fd fcf8 	bl	800fa24 <clust2sect>
 8012034:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012038:	2b00      	cmp	r3, #0
 801203a:	d104      	bne.n	8012046 <f_lseek+0x360>
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2202      	movs	r2, #2
 8012040:	755a      	strb	r2, [r3, #21]
 8012042:	2302      	movs	r3, #2
 8012044:	e054      	b.n	80120f0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	0a5b      	lsrs	r3, r3, #9
 801204a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801204c:	4413      	add	r3, r2
 801204e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	699a      	ldr	r2, [r3, #24]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	429a      	cmp	r2, r3
 801205a:	d90a      	bls.n	8012072 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	699a      	ldr	r2, [r3, #24]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	7d1b      	ldrb	r3, [r3, #20]
 8012068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801206c:	b2da      	uxtb	r2, r3
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	699b      	ldr	r3, [r3, #24]
 8012076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801207a:	2b00      	cmp	r3, #0
 801207c:	d036      	beq.n	80120ec <f_lseek+0x406>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6a1b      	ldr	r3, [r3, #32]
 8012082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012084:	429a      	cmp	r2, r3
 8012086:	d031      	beq.n	80120ec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	7d1b      	ldrb	r3, [r3, #20]
 801208c:	b25b      	sxtb	r3, r3
 801208e:	2b00      	cmp	r3, #0
 8012090:	da18      	bge.n	80120c4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	7858      	ldrb	r0, [r3, #1]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6a1a      	ldr	r2, [r3, #32]
 80120a0:	2301      	movs	r3, #1
 80120a2:	f7fd f935 	bl	800f310 <disk_write>
 80120a6:	4603      	mov	r3, r0
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d004      	beq.n	80120b6 <f_lseek+0x3d0>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2201      	movs	r2, #1
 80120b0:	755a      	strb	r2, [r3, #21]
 80120b2:	2301      	movs	r3, #1
 80120b4:	e01c      	b.n	80120f0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	7d1b      	ldrb	r3, [r3, #20]
 80120ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	7858      	ldrb	r0, [r3, #1]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80120ce:	2301      	movs	r3, #1
 80120d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120d2:	f7fd f8fd 	bl	800f2d0 <disk_read>
 80120d6:	4603      	mov	r3, r0
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <f_lseek+0x400>
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2201      	movs	r2, #1
 80120e0:	755a      	strb	r2, [r3, #21]
 80120e2:	2301      	movs	r3, #1
 80120e4:	e004      	b.n	80120f0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120ea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80120ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3740      	adds	r7, #64	; 0x40
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80120f8:	b590      	push	{r4, r7, lr}
 80120fa:	b09d      	sub	sp, #116	; 0x74
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	60f8      	str	r0, [r7, #12]
 8012100:	607a      	str	r2, [r7, #4]
 8012102:	603b      	str	r3, [r7, #0]
 8012104:	460b      	mov	r3, r1
 8012106:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8012108:	2301      	movs	r3, #1
 801210a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 801210c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012110:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8012112:	f107 030c 	add.w	r3, r7, #12
 8012116:	4618      	mov	r0, r3
 8012118:	f7fe fe97 	bl	8010e4a <get_ldnumber>
 801211c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801211e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012120:	2b00      	cmp	r3, #0
 8012122:	da02      	bge.n	801212a <f_mkfs+0x32>
 8012124:	230b      	movs	r3, #11
 8012126:	f000 bc0d 	b.w	8012944 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 801212a:	4a94      	ldr	r2, [pc, #592]	; (801237c <f_mkfs+0x284>)
 801212c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d005      	beq.n	8012142 <f_mkfs+0x4a>
 8012136:	4a91      	ldr	r2, [pc, #580]	; (801237c <f_mkfs+0x284>)
 8012138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801213e:	2200      	movs	r2, #0
 8012140:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8012142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012144:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8012148:	2300      	movs	r3, #0
 801214a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 801214e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012152:	4618      	mov	r0, r3
 8012154:	f7fd f896 	bl	800f284 <disk_initialize>
 8012158:	4603      	mov	r3, r0
 801215a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801215e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8012162:	f003 0301 	and.w	r3, r3, #1
 8012166:	2b00      	cmp	r3, #0
 8012168:	d001      	beq.n	801216e <f_mkfs+0x76>
 801216a:	2303      	movs	r3, #3
 801216c:	e3ea      	b.n	8012944 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801216e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8012172:	f003 0304 	and.w	r3, r3, #4
 8012176:	2b00      	cmp	r3, #0
 8012178:	d001      	beq.n	801217e <f_mkfs+0x86>
 801217a:	230a      	movs	r3, #10
 801217c:	e3e2      	b.n	8012944 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801217e:	f107 0214 	add.w	r2, r7, #20
 8012182:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012186:	2103      	movs	r1, #3
 8012188:	4618      	mov	r0, r3
 801218a:	f7fd f8e1 	bl	800f350 <disk_ioctl>
 801218e:	4603      	mov	r3, r0
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10c      	bne.n	80121ae <f_mkfs+0xb6>
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d009      	beq.n	80121ae <f_mkfs+0xb6>
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80121a0:	d805      	bhi.n	80121ae <f_mkfs+0xb6>
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	1e5a      	subs	r2, r3, #1
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	4013      	ands	r3, r2
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d001      	beq.n	80121b2 <f_mkfs+0xba>
 80121ae:	2301      	movs	r3, #1
 80121b0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80121b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80121b6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d003      	beq.n	80121c6 <f_mkfs+0xce>
 80121be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80121c0:	687a      	ldr	r2, [r7, #4]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d309      	bcc.n	80121da <f_mkfs+0xe2>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80121cc:	d805      	bhi.n	80121da <f_mkfs+0xe2>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	1e5a      	subs	r2, r3, #1
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	4013      	ands	r3, r2
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d001      	beq.n	80121de <f_mkfs+0xe6>
 80121da:	2313      	movs	r3, #19
 80121dc:	e3b2      	b.n	8012944 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80121de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80121e6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80121ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80121ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80121f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80121f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80121f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80121fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fc:	fb02 f303 	mul.w	r3, r2, r3
 8012200:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8012202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012204:	2b00      	cmp	r3, #0
 8012206:	d101      	bne.n	801220c <f_mkfs+0x114>
 8012208:	230e      	movs	r3, #14
 801220a:	e39b      	b.n	8012944 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 801220c:	f107 0210 	add.w	r2, r7, #16
 8012210:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012214:	2101      	movs	r1, #1
 8012216:	4618      	mov	r0, r3
 8012218:	f7fd f89a 	bl	800f350 <disk_ioctl>
 801221c:	4603      	mov	r3, r0
 801221e:	2b00      	cmp	r3, #0
 8012220:	d001      	beq.n	8012226 <f_mkfs+0x12e>
 8012222:	2301      	movs	r3, #1
 8012224:	e38e      	b.n	8012944 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8012226:	7afb      	ldrb	r3, [r7, #11]
 8012228:	f003 0308 	and.w	r3, r3, #8
 801222c:	2b00      	cmp	r3, #0
 801222e:	d001      	beq.n	8012234 <f_mkfs+0x13c>
 8012230:	2300      	movs	r3, #0
 8012232:	e000      	b.n	8012236 <f_mkfs+0x13e>
 8012234:	233f      	movs	r3, #63	; 0x3f
 8012236:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801223c:	429a      	cmp	r2, r3
 801223e:	d901      	bls.n	8012244 <f_mkfs+0x14c>
 8012240:	230e      	movs	r3, #14
 8012242:	e37f      	b.n	8012944 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8012244:	693a      	ldr	r2, [r7, #16]
 8012246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012248:	1ad3      	subs	r3, r2, r3
 801224a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	2b7f      	cmp	r3, #127	; 0x7f
 8012250:	d801      	bhi.n	8012256 <f_mkfs+0x15e>
 8012252:	230e      	movs	r3, #14
 8012254:	e376      	b.n	8012944 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2b80      	cmp	r3, #128	; 0x80
 801225a:	d901      	bls.n	8012260 <f_mkfs+0x168>
 801225c:	2313      	movs	r3, #19
 801225e:	e371      	b.n	8012944 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8012260:	7afb      	ldrb	r3, [r7, #11]
 8012262:	f003 0302 	and.w	r3, r3, #2
 8012266:	2b00      	cmp	r3, #0
 8012268:	d00d      	beq.n	8012286 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801226a:	7afb      	ldrb	r3, [r7, #11]
 801226c:	f003 0307 	and.w	r3, r3, #7
 8012270:	2b02      	cmp	r3, #2
 8012272:	d004      	beq.n	801227e <f_mkfs+0x186>
 8012274:	7afb      	ldrb	r3, [r7, #11]
 8012276:	f003 0301 	and.w	r3, r3, #1
 801227a:	2b00      	cmp	r3, #0
 801227c:	d103      	bne.n	8012286 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801227e:	2303      	movs	r3, #3
 8012280:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8012284:	e009      	b.n	801229a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8012286:	7afb      	ldrb	r3, [r7, #11]
 8012288:	f003 0301 	and.w	r3, r3, #1
 801228c:	2b00      	cmp	r3, #0
 801228e:	d101      	bne.n	8012294 <f_mkfs+0x19c>
 8012290:	2313      	movs	r3, #19
 8012292:	e357      	b.n	8012944 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8012294:	2302      	movs	r3, #2
 8012296:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801229e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80122a2:	2b03      	cmp	r3, #3
 80122a4:	d13c      	bne.n	8012320 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80122a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d11b      	bne.n	80122e4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	0c5b      	lsrs	r3, r3, #17
 80122b0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80122b2:	2300      	movs	r3, #0
 80122b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80122b6:	2301      	movs	r3, #1
 80122b8:	653b      	str	r3, [r7, #80]	; 0x50
 80122ba:	e005      	b.n	80122c8 <f_mkfs+0x1d0>
 80122bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122be:	3301      	adds	r3, #1
 80122c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80122c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122c4:	005b      	lsls	r3, r3, #1
 80122c6:	653b      	str	r3, [r7, #80]	; 0x50
 80122c8:	4a2d      	ldr	r2, [pc, #180]	; (8012380 <f_mkfs+0x288>)
 80122ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d007      	beq.n	80122e4 <f_mkfs+0x1ec>
 80122d4:	4a2a      	ldr	r2, [pc, #168]	; (8012380 <f_mkfs+0x288>)
 80122d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122dc:	461a      	mov	r2, r3
 80122de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80122e0:	4293      	cmp	r3, r2
 80122e2:	d2eb      	bcs.n	80122bc <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80122e4:	693a      	ldr	r2, [r7, #16]
 80122e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80122ec:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80122ee:	6a3b      	ldr	r3, [r7, #32]
 80122f0:	3302      	adds	r3, #2
 80122f2:	009a      	lsls	r2, r3, #2
 80122f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80122f6:	4413      	add	r3, r2
 80122f8:	1e5a      	subs	r2, r3, #1
 80122fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80122fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012300:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8012302:	2320      	movs	r3, #32
 8012304:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8012306:	2300      	movs	r3, #0
 8012308:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801230a:	6a3b      	ldr	r3, [r7, #32]
 801230c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012310:	4293      	cmp	r3, r2
 8012312:	d903      	bls.n	801231c <f_mkfs+0x224>
 8012314:	6a3b      	ldr	r3, [r7, #32]
 8012316:	4a1b      	ldr	r2, [pc, #108]	; (8012384 <f_mkfs+0x28c>)
 8012318:	4293      	cmp	r3, r2
 801231a:	d952      	bls.n	80123c2 <f_mkfs+0x2ca>
 801231c:	230e      	movs	r3, #14
 801231e:	e311      	b.n	8012944 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8012320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012322:	2b00      	cmp	r3, #0
 8012324:	d11b      	bne.n	801235e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	0b1b      	lsrs	r3, r3, #12
 801232a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801232c:	2300      	movs	r3, #0
 801232e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012330:	2301      	movs	r3, #1
 8012332:	653b      	str	r3, [r7, #80]	; 0x50
 8012334:	e005      	b.n	8012342 <f_mkfs+0x24a>
 8012336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012338:	3301      	adds	r3, #1
 801233a:	64bb      	str	r3, [r7, #72]	; 0x48
 801233c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801233e:	005b      	lsls	r3, r3, #1
 8012340:	653b      	str	r3, [r7, #80]	; 0x50
 8012342:	4a11      	ldr	r2, [pc, #68]	; (8012388 <f_mkfs+0x290>)
 8012344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d007      	beq.n	801235e <f_mkfs+0x266>
 801234e:	4a0e      	ldr	r2, [pc, #56]	; (8012388 <f_mkfs+0x290>)
 8012350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012356:	461a      	mov	r2, r3
 8012358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801235a:	4293      	cmp	r3, r2
 801235c:	d2eb      	bcs.n	8012336 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 801235e:	693a      	ldr	r2, [r7, #16]
 8012360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012362:	fbb2 f3f3 	udiv	r3, r2, r3
 8012366:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8012368:	6a3b      	ldr	r3, [r7, #32]
 801236a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801236e:	4293      	cmp	r3, r2
 8012370:	d90c      	bls.n	801238c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8012372:	6a3b      	ldr	r3, [r7, #32]
 8012374:	3302      	adds	r3, #2
 8012376:	005b      	lsls	r3, r3, #1
 8012378:	65fb      	str	r3, [r7, #92]	; 0x5c
 801237a:	e012      	b.n	80123a2 <f_mkfs+0x2aa>
 801237c:	2000135c 	.word	0x2000135c
 8012380:	0801e63c 	.word	0x0801e63c
 8012384:	0ffffff5 	.word	0x0ffffff5
 8012388:	0801e64c 	.word	0x0801e64c
				} else {
					fmt = FS_FAT12;
 801238c:	2301      	movs	r3, #1
 801238e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8012392:	6a3a      	ldr	r2, [r7, #32]
 8012394:	4613      	mov	r3, r2
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	4413      	add	r3, r2
 801239a:	3301      	adds	r3, #1
 801239c:	085b      	lsrs	r3, r3, #1
 801239e:	3303      	adds	r3, #3
 80123a0:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80123a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80123a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123a6:	4413      	add	r3, r2
 80123a8:	1e5a      	subs	r2, r3, #1
 80123aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80123ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80123b0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80123b2:	2301      	movs	r3, #1
 80123b4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80123b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123b8:	015a      	lsls	r2, r3, #5
 80123ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80123bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80123c0:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80123c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123c6:	4413      	add	r3, r2
 80123c8:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80123ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123ce:	fb03 f202 	mul.w	r2, r3, r2
 80123d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123d4:	4413      	add	r3, r2
 80123d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80123d8:	4413      	add	r3, r2
 80123da:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80123dc:	697a      	ldr	r2, [r7, #20]
 80123de:	69fb      	ldr	r3, [r7, #28]
 80123e0:	4413      	add	r3, r2
 80123e2:	1e5a      	subs	r2, r3, #1
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	425b      	negs	r3, r3
 80123e8:	401a      	ands	r2, r3
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	1ad3      	subs	r3, r2, r3
 80123ee:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80123f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80123f4:	2b03      	cmp	r3, #3
 80123f6:	d108      	bne.n	801240a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80123f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80123fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123fc:	4413      	add	r3, r2
 80123fe:	657b      	str	r3, [r7, #84]	; 0x54
 8012400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012404:	4413      	add	r3, r2
 8012406:	65bb      	str	r3, [r7, #88]	; 0x58
 8012408:	e006      	b.n	8012418 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801240a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801240c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012412:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012414:	4413      	add	r3, r2
 8012416:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8012418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801241a:	011a      	lsls	r2, r3, #4
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	441a      	add	r2, r3
 8012420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012422:	1ad2      	subs	r2, r2, r3
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	429a      	cmp	r2, r3
 8012428:	d901      	bls.n	801242e <f_mkfs+0x336>
 801242a:	230e      	movs	r3, #14
 801242c:	e28a      	b.n	8012944 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 801242e:	693a      	ldr	r2, [r7, #16]
 8012430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012432:	1ad2      	subs	r2, r2, r3
 8012434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012438:	fb01 f303 	mul.w	r3, r1, r3
 801243c:	1ad2      	subs	r2, r2, r3
 801243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012440:	1ad2      	subs	r2, r2, r3
 8012442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012444:	fbb2 f3f3 	udiv	r3, r2, r3
 8012448:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801244a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801244e:	2b03      	cmp	r3, #3
 8012450:	d10f      	bne.n	8012472 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8012452:	6a3b      	ldr	r3, [r7, #32]
 8012454:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012458:	4293      	cmp	r3, r2
 801245a:	d80a      	bhi.n	8012472 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d105      	bne.n	801246e <f_mkfs+0x376>
 8012462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012464:	085b      	lsrs	r3, r3, #1
 8012466:	607b      	str	r3, [r7, #4]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d144      	bne.n	80124f8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 801246e:	230e      	movs	r3, #14
 8012470:	e268      	b.n	8012944 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8012472:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012476:	2b02      	cmp	r3, #2
 8012478:	d133      	bne.n	80124e2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801247a:	6a3b      	ldr	r3, [r7, #32]
 801247c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012480:	4293      	cmp	r3, r2
 8012482:	d91e      	bls.n	80124c2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d107      	bne.n	801249a <f_mkfs+0x3a2>
 801248a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801248c:	005b      	lsls	r3, r3, #1
 801248e:	2b40      	cmp	r3, #64	; 0x40
 8012490:	d803      	bhi.n	801249a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8012492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012494:	005b      	lsls	r3, r3, #1
 8012496:	607b      	str	r3, [r7, #4]
 8012498:	e033      	b.n	8012502 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801249a:	7afb      	ldrb	r3, [r7, #11]
 801249c:	f003 0302 	and.w	r3, r3, #2
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d003      	beq.n	80124ac <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80124a4:	2303      	movs	r3, #3
 80124a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80124aa:	e02a      	b.n	8012502 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d105      	bne.n	80124be <f_mkfs+0x3c6>
 80124b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	607b      	str	r3, [r7, #4]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b80      	cmp	r3, #128	; 0x80
 80124bc:	d91e      	bls.n	80124fc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80124be:	230e      	movs	r3, #14
 80124c0:	e240      	b.n	8012944 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80124c2:	6a3b      	ldr	r3, [r7, #32]
 80124c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80124c8:	4293      	cmp	r3, r2
 80124ca:	d80a      	bhi.n	80124e2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d105      	bne.n	80124de <f_mkfs+0x3e6>
 80124d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124d4:	005b      	lsls	r3, r3, #1
 80124d6:	607b      	str	r3, [r7, #4]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2b80      	cmp	r3, #128	; 0x80
 80124dc:	d910      	bls.n	8012500 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80124de:	230e      	movs	r3, #14
 80124e0:	e230      	b.n	8012944 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80124e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d10c      	bne.n	8012504 <f_mkfs+0x40c>
 80124ea:	6a3b      	ldr	r3, [r7, #32]
 80124ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 80124f0:	4293      	cmp	r3, r2
 80124f2:	d907      	bls.n	8012504 <f_mkfs+0x40c>
 80124f4:	230e      	movs	r3, #14
 80124f6:	e225      	b.n	8012944 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80124f8:	bf00      	nop
 80124fa:	e6ce      	b.n	801229a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80124fc:	bf00      	nop
 80124fe:	e6cc      	b.n	801229a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8012500:	bf00      	nop
			pau = au;
 8012502:	e6ca      	b.n	801229a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8012504:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8012506:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012508:	461a      	mov	r2, r3
 801250a:	2100      	movs	r1, #0
 801250c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801250e:	f7fc ffe0 	bl	800f4d2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8012512:	220b      	movs	r2, #11
 8012514:	49b2      	ldr	r1, [pc, #712]	; (80127e0 <f_mkfs+0x6e8>)
 8012516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012518:	f7fc ffba 	bl	800f490 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 801251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801251e:	330b      	adds	r3, #11
 8012520:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012522:	4611      	mov	r1, r2
 8012524:	4618      	mov	r0, r3
 8012526:	f7fc ff6c 	bl	800f402 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252c:	330d      	adds	r3, #13
 801252e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012530:	b2d2      	uxtb	r2, r2
 8012532:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8012534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012536:	330e      	adds	r3, #14
 8012538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801253a:	b292      	uxth	r2, r2
 801253c:	4611      	mov	r1, r2
 801253e:	4618      	mov	r0, r3
 8012540:	f7fc ff5f 	bl	800f402 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8012544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012546:	3310      	adds	r3, #16
 8012548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801254a:	b2d2      	uxtb	r2, r2
 801254c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 801254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012550:	f103 0211 	add.w	r2, r3, #17
 8012554:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012558:	2b03      	cmp	r3, #3
 801255a:	d002      	beq.n	8012562 <f_mkfs+0x46a>
 801255c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801255e:	b29b      	uxth	r3, r3
 8012560:	e000      	b.n	8012564 <f_mkfs+0x46c>
 8012562:	2300      	movs	r3, #0
 8012564:	4619      	mov	r1, r3
 8012566:	4610      	mov	r0, r2
 8012568:	f7fc ff4b 	bl	800f402 <st_word>
		if (sz_vol < 0x10000) {
 801256c:	693b      	ldr	r3, [r7, #16]
 801256e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012572:	d208      	bcs.n	8012586 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8012574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012576:	3313      	adds	r3, #19
 8012578:	693a      	ldr	r2, [r7, #16]
 801257a:	b292      	uxth	r2, r2
 801257c:	4611      	mov	r1, r2
 801257e:	4618      	mov	r0, r3
 8012580:	f7fc ff3f 	bl	800f402 <st_word>
 8012584:	e006      	b.n	8012594 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8012586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012588:	3320      	adds	r3, #32
 801258a:	693a      	ldr	r2, [r7, #16]
 801258c:	4611      	mov	r1, r2
 801258e:	4618      	mov	r0, r3
 8012590:	f7fc ff52 	bl	800f438 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8012594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012596:	3315      	adds	r3, #21
 8012598:	22f8      	movs	r2, #248	; 0xf8
 801259a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 801259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259e:	3318      	adds	r3, #24
 80125a0:	213f      	movs	r1, #63	; 0x3f
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7fc ff2d 	bl	800f402 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80125a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125aa:	331a      	adds	r3, #26
 80125ac:	21ff      	movs	r1, #255	; 0xff
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fc ff27 	bl	800f402 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80125b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b6:	331c      	adds	r3, #28
 80125b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fc ff3c 	bl	800f438 <st_dword>
		if (fmt == FS_FAT32) {
 80125c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80125c4:	2b03      	cmp	r3, #3
 80125c6:	d131      	bne.n	801262c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80125c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ca:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80125ce:	f7fa ff47 	bl	800d460 <get_fattime>
 80125d2:	4603      	mov	r3, r0
 80125d4:	4619      	mov	r1, r3
 80125d6:	4620      	mov	r0, r4
 80125d8:	f7fc ff2e 	bl	800f438 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80125dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125de:	3324      	adds	r3, #36	; 0x24
 80125e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fc ff28 	bl	800f438 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80125e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ea:	332c      	adds	r3, #44	; 0x2c
 80125ec:	2102      	movs	r1, #2
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fc ff22 	bl	800f438 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80125f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f6:	3330      	adds	r3, #48	; 0x30
 80125f8:	2101      	movs	r1, #1
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7fc ff01 	bl	800f402 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8012600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012602:	3332      	adds	r3, #50	; 0x32
 8012604:	2106      	movs	r1, #6
 8012606:	4618      	mov	r0, r3
 8012608:	f7fc fefb 	bl	800f402 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 801260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801260e:	3340      	adds	r3, #64	; 0x40
 8012610:	2280      	movs	r2, #128	; 0x80
 8012612:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8012614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012616:	3342      	adds	r3, #66	; 0x42
 8012618:	2229      	movs	r2, #41	; 0x29
 801261a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 801261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261e:	3347      	adds	r3, #71	; 0x47
 8012620:	2213      	movs	r2, #19
 8012622:	4970      	ldr	r1, [pc, #448]	; (80127e4 <f_mkfs+0x6ec>)
 8012624:	4618      	mov	r0, r3
 8012626:	f7fc ff33 	bl	800f490 <mem_cpy>
 801262a:	e020      	b.n	801266e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 801262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8012632:	f7fa ff15 	bl	800d460 <get_fattime>
 8012636:	4603      	mov	r3, r0
 8012638:	4619      	mov	r1, r3
 801263a:	4620      	mov	r0, r4
 801263c:	f7fc fefc 	bl	800f438 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8012640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012642:	3316      	adds	r3, #22
 8012644:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012646:	b292      	uxth	r2, r2
 8012648:	4611      	mov	r1, r2
 801264a:	4618      	mov	r0, r3
 801264c:	f7fc fed9 	bl	800f402 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8012650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012652:	3324      	adds	r3, #36	; 0x24
 8012654:	2280      	movs	r2, #128	; 0x80
 8012656:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8012658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265a:	3326      	adds	r3, #38	; 0x26
 801265c:	2229      	movs	r2, #41	; 0x29
 801265e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8012660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012662:	332b      	adds	r3, #43	; 0x2b
 8012664:	2213      	movs	r2, #19
 8012666:	4960      	ldr	r1, [pc, #384]	; (80127e8 <f_mkfs+0x6f0>)
 8012668:	4618      	mov	r0, r3
 801266a:	f7fc ff11 	bl	800f490 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 801266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012670:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012674:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012678:	4618      	mov	r0, r3
 801267a:	f7fc fec2 	bl	800f402 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 801267e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8012682:	2301      	movs	r3, #1
 8012684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012688:	f7fc fe42 	bl	800f310 <disk_write>
 801268c:	4603      	mov	r3, r0
 801268e:	2b00      	cmp	r3, #0
 8012690:	d001      	beq.n	8012696 <f_mkfs+0x59e>
 8012692:	2301      	movs	r3, #1
 8012694:	e156      	b.n	8012944 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8012696:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801269a:	2b03      	cmp	r3, #3
 801269c:	d140      	bne.n	8012720 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a0:	1d9a      	adds	r2, r3, #6
 80126a2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80126a6:	2301      	movs	r3, #1
 80126a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80126aa:	f7fc fe31 	bl	800f310 <disk_write>
			mem_set(buf, 0, ss);
 80126ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80126b0:	461a      	mov	r2, r3
 80126b2:	2100      	movs	r1, #0
 80126b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126b6:	f7fc ff0c 	bl	800f4d2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80126ba:	494c      	ldr	r1, [pc, #304]	; (80127ec <f_mkfs+0x6f4>)
 80126bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126be:	f7fc febb 	bl	800f438 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80126c8:	4949      	ldr	r1, [pc, #292]	; (80127f0 <f_mkfs+0x6f8>)
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fc feb4 	bl	800f438 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80126d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80126d6:	6a3b      	ldr	r3, [r7, #32]
 80126d8:	3b01      	subs	r3, #1
 80126da:	4619      	mov	r1, r3
 80126dc:	4610      	mov	r0, r2
 80126de:	f7fc feab 	bl	800f438 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80126e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80126e8:	2102      	movs	r1, #2
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fc fea4 	bl	800f438 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80126f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80126f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fc fe81 	bl	800f402 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8012700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012702:	1dda      	adds	r2, r3, #7
 8012704:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8012708:	2301      	movs	r3, #1
 801270a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801270c:	f7fc fe00 	bl	800f310 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8012710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012712:	1c5a      	adds	r2, r3, #1
 8012714:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8012718:	2301      	movs	r3, #1
 801271a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801271c:	f7fc fdf8 	bl	800f310 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8012720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012722:	2100      	movs	r1, #0
 8012724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012726:	f7fc fed4 	bl	800f4d2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801272a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801272c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801272e:	2300      	movs	r3, #0
 8012730:	64bb      	str	r3, [r7, #72]	; 0x48
 8012732:	e04b      	b.n	80127cc <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8012734:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012738:	2b03      	cmp	r3, #3
 801273a:	d113      	bne.n	8012764 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 801273c:	f06f 0107 	mvn.w	r1, #7
 8012740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012742:	f7fc fe79 	bl	800f438 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8012746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012748:	3304      	adds	r3, #4
 801274a:	f04f 31ff 	mov.w	r1, #4294967295
 801274e:	4618      	mov	r0, r3
 8012750:	f7fc fe72 	bl	800f438 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8012754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012756:	3308      	adds	r3, #8
 8012758:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801275c:	4618      	mov	r0, r3
 801275e:	f7fc fe6b 	bl	800f438 <st_dword>
 8012762:	e00b      	b.n	801277c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8012764:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012768:	2b01      	cmp	r3, #1
 801276a:	d101      	bne.n	8012770 <f_mkfs+0x678>
 801276c:	4b21      	ldr	r3, [pc, #132]	; (80127f4 <f_mkfs+0x6fc>)
 801276e:	e001      	b.n	8012774 <f_mkfs+0x67c>
 8012770:	f06f 0307 	mvn.w	r3, #7
 8012774:	4619      	mov	r1, r3
 8012776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012778:	f7fc fe5e 	bl	800f438 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 801277c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801277e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8012780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012784:	4293      	cmp	r3, r2
 8012786:	bf28      	it	cs
 8012788:	4613      	movcs	r3, r2
 801278a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801278c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8012790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012792:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012796:	f7fc fdbb 	bl	800f310 <disk_write>
 801279a:	4603      	mov	r3, r0
 801279c:	2b00      	cmp	r3, #0
 801279e:	d001      	beq.n	80127a4 <f_mkfs+0x6ac>
 80127a0:	2301      	movs	r3, #1
 80127a2:	e0cf      	b.n	8012944 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80127a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80127a6:	461a      	mov	r2, r3
 80127a8:	2100      	movs	r1, #0
 80127aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127ac:	f7fc fe91 	bl	800f4d2 <mem_set>
				sect += n; nsect -= n;
 80127b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80127b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80127b4:	4413      	add	r3, r2
 80127b6:	667b      	str	r3, [r7, #100]	; 0x64
 80127b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80127ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80127bc:	1ad3      	subs	r3, r2, r3
 80127be:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80127c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d1dc      	bne.n	8012780 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80127c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127c8:	3301      	adds	r3, #1
 80127ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80127cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80127ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d3af      	bcc.n	8012734 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80127d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80127d8:	2b03      	cmp	r3, #3
 80127da:	d10d      	bne.n	80127f8 <f_mkfs+0x700>
 80127dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127de:	e00c      	b.n	80127fa <f_mkfs+0x702>
 80127e0:	0801e334 	.word	0x0801e334
 80127e4:	0801e340 	.word	0x0801e340
 80127e8:	0801e354 	.word	0x0801e354
 80127ec:	41615252 	.word	0x41615252
 80127f0:	61417272 	.word	0x61417272
 80127f4:	00fffff8 	.word	0x00fffff8
 80127f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80127fa:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80127fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80127fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012800:	4293      	cmp	r3, r2
 8012802:	bf28      	it	cs
 8012804:	4613      	movcs	r3, r2
 8012806:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8012808:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801280c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801280e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012812:	f7fc fd7d 	bl	800f310 <disk_write>
 8012816:	4603      	mov	r3, r0
 8012818:	2b00      	cmp	r3, #0
 801281a:	d001      	beq.n	8012820 <f_mkfs+0x728>
 801281c:	2301      	movs	r3, #1
 801281e:	e091      	b.n	8012944 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8012820:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012824:	4413      	add	r3, r2
 8012826:	667b      	str	r3, [r7, #100]	; 0x64
 8012828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801282a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801282c:	1ad3      	subs	r3, r2, r3
 801282e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8012830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012832:	2b00      	cmp	r3, #0
 8012834:	d1e2      	bne.n	80127fc <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8012836:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801283a:	2b03      	cmp	r3, #3
 801283c:	d103      	bne.n	8012846 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 801283e:	230c      	movs	r3, #12
 8012840:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8012844:	e010      	b.n	8012868 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801284c:	d303      	bcc.n	8012856 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 801284e:	2306      	movs	r3, #6
 8012850:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8012854:	e008      	b.n	8012868 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8012856:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801285a:	2b02      	cmp	r3, #2
 801285c:	d101      	bne.n	8012862 <f_mkfs+0x76a>
 801285e:	2304      	movs	r3, #4
 8012860:	e000      	b.n	8012864 <f_mkfs+0x76c>
 8012862:	2301      	movs	r3, #1
 8012864:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8012868:	7afb      	ldrb	r3, [r7, #11]
 801286a:	f003 0308 	and.w	r3, r3, #8
 801286e:	2b00      	cmp	r3, #0
 8012870:	d15b      	bne.n	801292a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8012872:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012874:	461a      	mov	r2, r3
 8012876:	2100      	movs	r1, #0
 8012878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801287a:	f7fc fe2a 	bl	800f4d2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012880:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012884:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012888:	4618      	mov	r0, r3
 801288a:	f7fc fdba 	bl	800f402 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012890:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012894:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	2200      	movs	r2, #0
 801289a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 801289c:	69bb      	ldr	r3, [r7, #24]
 801289e:	3301      	adds	r3, #1
 80128a0:	2201      	movs	r2, #1
 80128a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	3302      	adds	r3, #2
 80128a8:	2201      	movs	r2, #1
 80128aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80128ac:	69bb      	ldr	r3, [r7, #24]
 80128ae:	3303      	adds	r3, #3
 80128b0:	2200      	movs	r2, #0
 80128b2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80128b4:	69bb      	ldr	r3, [r7, #24]
 80128b6:	3304      	adds	r3, #4
 80128b8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80128bc:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80128be:	693a      	ldr	r2, [r7, #16]
 80128c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c2:	441a      	add	r2, r3
 80128c4:	4b21      	ldr	r3, [pc, #132]	; (801294c <f_mkfs+0x854>)
 80128c6:	fba3 1302 	umull	r1, r3, r3, r2
 80128ca:	1ad2      	subs	r2, r2, r3
 80128cc:	0852      	lsrs	r2, r2, #1
 80128ce:	4413      	add	r3, r2
 80128d0:	0b5b      	lsrs	r3, r3, #13
 80128d2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80128d4:	69bb      	ldr	r3, [r7, #24]
 80128d6:	3305      	adds	r3, #5
 80128d8:	22fe      	movs	r2, #254	; 0xfe
 80128da:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80128dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80128de:	089b      	lsrs	r3, r3, #2
 80128e0:	b2da      	uxtb	r2, r3
 80128e2:	69bb      	ldr	r3, [r7, #24]
 80128e4:	3306      	adds	r3, #6
 80128e6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80128ea:	b2d2      	uxtb	r2, r2
 80128ec:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	3307      	adds	r3, #7
 80128f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80128f4:	b2d2      	uxtb	r2, r2
 80128f6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80128f8:	69bb      	ldr	r3, [r7, #24]
 80128fa:	3308      	adds	r3, #8
 80128fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128fe:	4618      	mov	r0, r3
 8012900:	f7fc fd9a 	bl	800f438 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	330c      	adds	r3, #12
 8012908:	693a      	ldr	r2, [r7, #16]
 801290a:	4611      	mov	r1, r2
 801290c:	4618      	mov	r0, r3
 801290e:	f7fc fd93 	bl	800f438 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8012912:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8012916:	2301      	movs	r3, #1
 8012918:	2200      	movs	r2, #0
 801291a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801291c:	f7fc fcf8 	bl	800f310 <disk_write>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	d001      	beq.n	801292a <f_mkfs+0x832>
 8012926:	2301      	movs	r3, #1
 8012928:	e00c      	b.n	8012944 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801292a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801292e:	2200      	movs	r2, #0
 8012930:	2100      	movs	r1, #0
 8012932:	4618      	mov	r0, r3
 8012934:	f7fc fd0c 	bl	800f350 <disk_ioctl>
 8012938:	4603      	mov	r3, r0
 801293a:	2b00      	cmp	r3, #0
 801293c:	d001      	beq.n	8012942 <f_mkfs+0x84a>
 801293e:	2301      	movs	r3, #1
 8012940:	e000      	b.n	8012944 <f_mkfs+0x84c>

	return FR_OK;
 8012942:	2300      	movs	r3, #0
}
 8012944:	4618      	mov	r0, r3
 8012946:	3774      	adds	r7, #116	; 0x74
 8012948:	46bd      	mov	sp, r7
 801294a:	bd90      	pop	{r4, r7, pc}
 801294c:	0515565b 	.word	0x0515565b

08012950 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012950:	b480      	push	{r7}
 8012952:	b087      	sub	sp, #28
 8012954:	af00      	add	r7, sp, #0
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	4613      	mov	r3, r2
 801295c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801295e:	2301      	movs	r3, #1
 8012960:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012962:	2300      	movs	r3, #0
 8012964:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012966:	4b1f      	ldr	r3, [pc, #124]	; (80129e4 <FATFS_LinkDriverEx+0x94>)
 8012968:	7a5b      	ldrb	r3, [r3, #9]
 801296a:	b2db      	uxtb	r3, r3
 801296c:	2b00      	cmp	r3, #0
 801296e:	d131      	bne.n	80129d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012970:	4b1c      	ldr	r3, [pc, #112]	; (80129e4 <FATFS_LinkDriverEx+0x94>)
 8012972:	7a5b      	ldrb	r3, [r3, #9]
 8012974:	b2db      	uxtb	r3, r3
 8012976:	461a      	mov	r2, r3
 8012978:	4b1a      	ldr	r3, [pc, #104]	; (80129e4 <FATFS_LinkDriverEx+0x94>)
 801297a:	2100      	movs	r1, #0
 801297c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801297e:	4b19      	ldr	r3, [pc, #100]	; (80129e4 <FATFS_LinkDriverEx+0x94>)
 8012980:	7a5b      	ldrb	r3, [r3, #9]
 8012982:	b2db      	uxtb	r3, r3
 8012984:	4a17      	ldr	r2, [pc, #92]	; (80129e4 <FATFS_LinkDriverEx+0x94>)
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	4413      	add	r3, r2
 801298a:	68fa      	ldr	r2, [r7, #12]
 801298c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801298e:	4b15      	ldr	r3, [pc, #84]	; (80129e4 <FATFS_LinkDriverEx+0x94>)
 8012990:	7a5b      	ldrb	r3, [r3, #9]
 8012992:	b2db      	uxtb	r3, r3
 8012994:	461a      	mov	r2, r3
 8012996:	4b13      	ldr	r3, [pc, #76]	; (80129e4 <FATFS_LinkDriverEx+0x94>)
 8012998:	4413      	add	r3, r2
 801299a:	79fa      	ldrb	r2, [r7, #7]
 801299c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801299e:	4b11      	ldr	r3, [pc, #68]	; (80129e4 <FATFS_LinkDriverEx+0x94>)
 80129a0:	7a5b      	ldrb	r3, [r3, #9]
 80129a2:	b2db      	uxtb	r3, r3
 80129a4:	1c5a      	adds	r2, r3, #1
 80129a6:	b2d1      	uxtb	r1, r2
 80129a8:	4a0e      	ldr	r2, [pc, #56]	; (80129e4 <FATFS_LinkDriverEx+0x94>)
 80129aa:	7251      	strb	r1, [r2, #9]
 80129ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80129ae:	7dbb      	ldrb	r3, [r7, #22]
 80129b0:	3330      	adds	r3, #48	; 0x30
 80129b2:	b2da      	uxtb	r2, r3
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	3301      	adds	r3, #1
 80129bc:	223a      	movs	r2, #58	; 0x3a
 80129be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	3302      	adds	r3, #2
 80129c4:	222f      	movs	r2, #47	; 0x2f
 80129c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	3303      	adds	r3, #3
 80129cc:	2200      	movs	r2, #0
 80129ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80129d0:	2300      	movs	r3, #0
 80129d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80129d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	371c      	adds	r7, #28
 80129da:	46bd      	mov	sp, r7
 80129dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e0:	4770      	bx	lr
 80129e2:	bf00      	nop
 80129e4:	20001384 	.word	0x20001384

080129e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80129f2:	2200      	movs	r2, #0
 80129f4:	6839      	ldr	r1, [r7, #0]
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f7ff ffaa 	bl	8012950 <FATFS_LinkDriverEx>
 80129fc:	4603      	mov	r3, r0
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
	...

08012a08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	4603      	mov	r3, r0
 8012a10:	6039      	str	r1, [r7, #0]
 8012a12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012a14:	88fb      	ldrh	r3, [r7, #6]
 8012a16:	2b7f      	cmp	r3, #127	; 0x7f
 8012a18:	d802      	bhi.n	8012a20 <ff_convert+0x18>
		c = chr;
 8012a1a:	88fb      	ldrh	r3, [r7, #6]
 8012a1c:	81fb      	strh	r3, [r7, #14]
 8012a1e:	e025      	b.n	8012a6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d00b      	beq.n	8012a3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012a26:	88fb      	ldrh	r3, [r7, #6]
 8012a28:	2bff      	cmp	r3, #255	; 0xff
 8012a2a:	d805      	bhi.n	8012a38 <ff_convert+0x30>
 8012a2c:	88fb      	ldrh	r3, [r7, #6]
 8012a2e:	3b80      	subs	r3, #128	; 0x80
 8012a30:	4a12      	ldr	r2, [pc, #72]	; (8012a7c <ff_convert+0x74>)
 8012a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a36:	e000      	b.n	8012a3a <ff_convert+0x32>
 8012a38:	2300      	movs	r3, #0
 8012a3a:	81fb      	strh	r3, [r7, #14]
 8012a3c:	e016      	b.n	8012a6c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012a3e:	2300      	movs	r3, #0
 8012a40:	81fb      	strh	r3, [r7, #14]
 8012a42:	e009      	b.n	8012a58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012a44:	89fb      	ldrh	r3, [r7, #14]
 8012a46:	4a0d      	ldr	r2, [pc, #52]	; (8012a7c <ff_convert+0x74>)
 8012a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a4c:	88fa      	ldrh	r2, [r7, #6]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d006      	beq.n	8012a60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012a52:	89fb      	ldrh	r3, [r7, #14]
 8012a54:	3301      	adds	r3, #1
 8012a56:	81fb      	strh	r3, [r7, #14]
 8012a58:	89fb      	ldrh	r3, [r7, #14]
 8012a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8012a5c:	d9f2      	bls.n	8012a44 <ff_convert+0x3c>
 8012a5e:	e000      	b.n	8012a62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012a60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012a62:	89fb      	ldrh	r3, [r7, #14]
 8012a64:	3380      	adds	r3, #128	; 0x80
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3714      	adds	r7, #20
 8012a72:	46bd      	mov	sp, r7
 8012a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a78:	4770      	bx	lr
 8012a7a:	bf00      	nop
 8012a7c:	0801e65c 	.word	0x0801e65c

08012a80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012a80:	b480      	push	{r7}
 8012a82:	b087      	sub	sp, #28
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	4603      	mov	r3, r0
 8012a88:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012a8a:	88fb      	ldrh	r3, [r7, #6]
 8012a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a90:	d201      	bcs.n	8012a96 <ff_wtoupper+0x16>
 8012a92:	4b3e      	ldr	r3, [pc, #248]	; (8012b8c <ff_wtoupper+0x10c>)
 8012a94:	e000      	b.n	8012a98 <ff_wtoupper+0x18>
 8012a96:	4b3e      	ldr	r3, [pc, #248]	; (8012b90 <ff_wtoupper+0x110>)
 8012a98:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	1c9a      	adds	r2, r3, #2
 8012a9e:	617a      	str	r2, [r7, #20]
 8012aa0:	881b      	ldrh	r3, [r3, #0]
 8012aa2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012aa4:	8a7b      	ldrh	r3, [r7, #18]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d068      	beq.n	8012b7c <ff_wtoupper+0xfc>
 8012aaa:	88fa      	ldrh	r2, [r7, #6]
 8012aac:	8a7b      	ldrh	r3, [r7, #18]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d364      	bcc.n	8012b7c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	1c9a      	adds	r2, r3, #2
 8012ab6:	617a      	str	r2, [r7, #20]
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	823b      	strh	r3, [r7, #16]
 8012abc:	8a3b      	ldrh	r3, [r7, #16]
 8012abe:	0a1b      	lsrs	r3, r3, #8
 8012ac0:	81fb      	strh	r3, [r7, #14]
 8012ac2:	8a3b      	ldrh	r3, [r7, #16]
 8012ac4:	b2db      	uxtb	r3, r3
 8012ac6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012ac8:	88fa      	ldrh	r2, [r7, #6]
 8012aca:	8a79      	ldrh	r1, [r7, #18]
 8012acc:	8a3b      	ldrh	r3, [r7, #16]
 8012ace:	440b      	add	r3, r1
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	da49      	bge.n	8012b68 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012ad4:	89fb      	ldrh	r3, [r7, #14]
 8012ad6:	2b08      	cmp	r3, #8
 8012ad8:	d84f      	bhi.n	8012b7a <ff_wtoupper+0xfa>
 8012ada:	a201      	add	r2, pc, #4	; (adr r2, 8012ae0 <ff_wtoupper+0x60>)
 8012adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ae0:	08012b05 	.word	0x08012b05
 8012ae4:	08012b17 	.word	0x08012b17
 8012ae8:	08012b2d 	.word	0x08012b2d
 8012aec:	08012b35 	.word	0x08012b35
 8012af0:	08012b3d 	.word	0x08012b3d
 8012af4:	08012b45 	.word	0x08012b45
 8012af8:	08012b4d 	.word	0x08012b4d
 8012afc:	08012b55 	.word	0x08012b55
 8012b00:	08012b5d 	.word	0x08012b5d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012b04:	88fa      	ldrh	r2, [r7, #6]
 8012b06:	8a7b      	ldrh	r3, [r7, #18]
 8012b08:	1ad3      	subs	r3, r2, r3
 8012b0a:	005b      	lsls	r3, r3, #1
 8012b0c:	697a      	ldr	r2, [r7, #20]
 8012b0e:	4413      	add	r3, r2
 8012b10:	881b      	ldrh	r3, [r3, #0]
 8012b12:	80fb      	strh	r3, [r7, #6]
 8012b14:	e027      	b.n	8012b66 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012b16:	88fa      	ldrh	r2, [r7, #6]
 8012b18:	8a7b      	ldrh	r3, [r7, #18]
 8012b1a:	1ad3      	subs	r3, r2, r3
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	f003 0301 	and.w	r3, r3, #1
 8012b22:	b29b      	uxth	r3, r3
 8012b24:	88fa      	ldrh	r2, [r7, #6]
 8012b26:	1ad3      	subs	r3, r2, r3
 8012b28:	80fb      	strh	r3, [r7, #6]
 8012b2a:	e01c      	b.n	8012b66 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012b2c:	88fb      	ldrh	r3, [r7, #6]
 8012b2e:	3b10      	subs	r3, #16
 8012b30:	80fb      	strh	r3, [r7, #6]
 8012b32:	e018      	b.n	8012b66 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012b34:	88fb      	ldrh	r3, [r7, #6]
 8012b36:	3b20      	subs	r3, #32
 8012b38:	80fb      	strh	r3, [r7, #6]
 8012b3a:	e014      	b.n	8012b66 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012b3c:	88fb      	ldrh	r3, [r7, #6]
 8012b3e:	3b30      	subs	r3, #48	; 0x30
 8012b40:	80fb      	strh	r3, [r7, #6]
 8012b42:	e010      	b.n	8012b66 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012b44:	88fb      	ldrh	r3, [r7, #6]
 8012b46:	3b1a      	subs	r3, #26
 8012b48:	80fb      	strh	r3, [r7, #6]
 8012b4a:	e00c      	b.n	8012b66 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012b4c:	88fb      	ldrh	r3, [r7, #6]
 8012b4e:	3308      	adds	r3, #8
 8012b50:	80fb      	strh	r3, [r7, #6]
 8012b52:	e008      	b.n	8012b66 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012b54:	88fb      	ldrh	r3, [r7, #6]
 8012b56:	3b50      	subs	r3, #80	; 0x50
 8012b58:	80fb      	strh	r3, [r7, #6]
 8012b5a:	e004      	b.n	8012b66 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012b5c:	88fb      	ldrh	r3, [r7, #6]
 8012b5e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8012b62:	80fb      	strh	r3, [r7, #6]
 8012b64:	bf00      	nop
			}
			break;
 8012b66:	e008      	b.n	8012b7a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012b68:	89fb      	ldrh	r3, [r7, #14]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d195      	bne.n	8012a9a <ff_wtoupper+0x1a>
 8012b6e:	8a3b      	ldrh	r3, [r7, #16]
 8012b70:	005b      	lsls	r3, r3, #1
 8012b72:	697a      	ldr	r2, [r7, #20]
 8012b74:	4413      	add	r3, r2
 8012b76:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012b78:	e78f      	b.n	8012a9a <ff_wtoupper+0x1a>
			break;
 8012b7a:	bf00      	nop
	}

	return chr;
 8012b7c:	88fb      	ldrh	r3, [r7, #6]
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	371c      	adds	r7, #28
 8012b82:	46bd      	mov	sp, r7
 8012b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b88:	4770      	bx	lr
 8012b8a:	bf00      	nop
 8012b8c:	0801e75c 	.word	0x0801e75c
 8012b90:	0801e950 	.word	0x0801e950

08012b94 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f008 fbd7 	bl	801b350 <malloc>
 8012ba2:	4603      	mov	r3, r0
}
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	3708      	adds	r7, #8
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}

08012bac <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b082      	sub	sp, #8
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f008 fbd3 	bl	801b360 <free>
}
 8012bba:	bf00      	nop
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
	...

08012bc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012bc8:	2200      	movs	r2, #0
 8012bca:	4912      	ldr	r1, [pc, #72]	; (8012c14 <MX_USB_DEVICE_Init+0x50>)
 8012bcc:	4812      	ldr	r0, [pc, #72]	; (8012c18 <MX_USB_DEVICE_Init+0x54>)
 8012bce:	f7fb f9ab 	bl	800df28 <USBD_Init>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d001      	beq.n	8012bdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012bd8:	f7ee feb6 	bl	8001948 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012bdc:	490f      	ldr	r1, [pc, #60]	; (8012c1c <MX_USB_DEVICE_Init+0x58>)
 8012bde:	480e      	ldr	r0, [pc, #56]	; (8012c18 <MX_USB_DEVICE_Init+0x54>)
 8012be0:	f7fb f9d2 	bl	800df88 <USBD_RegisterClass>
 8012be4:	4603      	mov	r3, r0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d001      	beq.n	8012bee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012bea:	f7ee fead 	bl	8001948 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012bee:	490c      	ldr	r1, [pc, #48]	; (8012c20 <MX_USB_DEVICE_Init+0x5c>)
 8012bf0:	4809      	ldr	r0, [pc, #36]	; (8012c18 <MX_USB_DEVICE_Init+0x54>)
 8012bf2:	f7fb f8f3 	bl	800dddc <USBD_CDC_RegisterInterface>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d001      	beq.n	8012c00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012bfc:	f7ee fea4 	bl	8001948 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012c00:	4805      	ldr	r0, [pc, #20]	; (8012c18 <MX_USB_DEVICE_Init+0x54>)
 8012c02:	f7fb f9e8 	bl	800dfd6 <USBD_Start>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d001      	beq.n	8012c10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012c0c:	f7ee fe9c 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012c10:	bf00      	nop
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	20000130 	.word	0x20000130
 8012c18:	20001390 	.word	0x20001390
 8012c1c:	20000018 	.word	0x20000018
 8012c20:	2000011c 	.word	0x2000011c

08012c24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012c28:	2200      	movs	r2, #0
 8012c2a:	4905      	ldr	r1, [pc, #20]	; (8012c40 <CDC_Init_FS+0x1c>)
 8012c2c:	4805      	ldr	r0, [pc, #20]	; (8012c44 <CDC_Init_FS+0x20>)
 8012c2e:	f7fb f8ea 	bl	800de06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012c32:	4905      	ldr	r1, [pc, #20]	; (8012c48 <CDC_Init_FS+0x24>)
 8012c34:	4803      	ldr	r0, [pc, #12]	; (8012c44 <CDC_Init_FS+0x20>)
 8012c36:	f7fb f904 	bl	800de42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012c3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	20001e60 	.word	0x20001e60
 8012c44:	20001390 	.word	0x20001390
 8012c48:	20001660 	.word	0x20001660

08012c4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012c50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	4603      	mov	r3, r0
 8012c64:	6039      	str	r1, [r7, #0]
 8012c66:	71fb      	strb	r3, [r7, #7]
 8012c68:	4613      	mov	r3, r2
 8012c6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012c6c:	79fb      	ldrb	r3, [r7, #7]
 8012c6e:	2b23      	cmp	r3, #35	; 0x23
 8012c70:	d84a      	bhi.n	8012d08 <CDC_Control_FS+0xac>
 8012c72:	a201      	add	r2, pc, #4	; (adr r2, 8012c78 <CDC_Control_FS+0x1c>)
 8012c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c78:	08012d09 	.word	0x08012d09
 8012c7c:	08012d09 	.word	0x08012d09
 8012c80:	08012d09 	.word	0x08012d09
 8012c84:	08012d09 	.word	0x08012d09
 8012c88:	08012d09 	.word	0x08012d09
 8012c8c:	08012d09 	.word	0x08012d09
 8012c90:	08012d09 	.word	0x08012d09
 8012c94:	08012d09 	.word	0x08012d09
 8012c98:	08012d09 	.word	0x08012d09
 8012c9c:	08012d09 	.word	0x08012d09
 8012ca0:	08012d09 	.word	0x08012d09
 8012ca4:	08012d09 	.word	0x08012d09
 8012ca8:	08012d09 	.word	0x08012d09
 8012cac:	08012d09 	.word	0x08012d09
 8012cb0:	08012d09 	.word	0x08012d09
 8012cb4:	08012d09 	.word	0x08012d09
 8012cb8:	08012d09 	.word	0x08012d09
 8012cbc:	08012d09 	.word	0x08012d09
 8012cc0:	08012d09 	.word	0x08012d09
 8012cc4:	08012d09 	.word	0x08012d09
 8012cc8:	08012d09 	.word	0x08012d09
 8012ccc:	08012d09 	.word	0x08012d09
 8012cd0:	08012d09 	.word	0x08012d09
 8012cd4:	08012d09 	.word	0x08012d09
 8012cd8:	08012d09 	.word	0x08012d09
 8012cdc:	08012d09 	.word	0x08012d09
 8012ce0:	08012d09 	.word	0x08012d09
 8012ce4:	08012d09 	.word	0x08012d09
 8012ce8:	08012d09 	.word	0x08012d09
 8012cec:	08012d09 	.word	0x08012d09
 8012cf0:	08012d09 	.word	0x08012d09
 8012cf4:	08012d09 	.word	0x08012d09
 8012cf8:	08012d09 	.word	0x08012d09
 8012cfc:	08012d09 	.word	0x08012d09
 8012d00:	08012d09 	.word	0x08012d09
 8012d04:	08012d09 	.word	0x08012d09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012d08:	bf00      	nop
  }

  return (USBD_OK);
 8012d0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	370c      	adds	r7, #12
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012d22:	6879      	ldr	r1, [r7, #4]
 8012d24:	4805      	ldr	r0, [pc, #20]	; (8012d3c <CDC_Receive_FS+0x24>)
 8012d26:	f7fb f88c 	bl	800de42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012d2a:	4804      	ldr	r0, [pc, #16]	; (8012d3c <CDC_Receive_FS+0x24>)
 8012d2c:	f7fb f8d2 	bl	800ded4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012d30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	3708      	adds	r7, #8
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	20001390 	.word	0x20001390

08012d40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b084      	sub	sp, #16
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	460b      	mov	r3, r1
 8012d4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012d50:	4b0d      	ldr	r3, [pc, #52]	; (8012d88 <CDC_Transmit_FS+0x48>)
 8012d52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d001      	beq.n	8012d66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012d62:	2301      	movs	r3, #1
 8012d64:	e00b      	b.n	8012d7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012d66:	887b      	ldrh	r3, [r7, #2]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	6879      	ldr	r1, [r7, #4]
 8012d6c:	4806      	ldr	r0, [pc, #24]	; (8012d88 <CDC_Transmit_FS+0x48>)
 8012d6e:	f7fb f84a 	bl	800de06 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012d72:	4805      	ldr	r0, [pc, #20]	; (8012d88 <CDC_Transmit_FS+0x48>)
 8012d74:	f7fb f87e 	bl	800de74 <USBD_CDC_TransmitPacket>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3710      	adds	r7, #16
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	20001390 	.word	0x20001390

08012d8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b087      	sub	sp, #28
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	60f8      	str	r0, [r7, #12]
 8012d94:	60b9      	str	r1, [r7, #8]
 8012d96:	4613      	mov	r3, r2
 8012d98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	371c      	adds	r7, #28
 8012da6:	46bd      	mov	sp, r7
 8012da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dac:	4770      	bx	lr
	...

08012db0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	4603      	mov	r3, r0
 8012db8:	6039      	str	r1, [r7, #0]
 8012dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	2212      	movs	r2, #18
 8012dc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012dc2:	4b03      	ldr	r3, [pc, #12]	; (8012dd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	370c      	adds	r7, #12
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr
 8012dd0:	20000150 	.word	0x20000150

08012dd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	4603      	mov	r3, r0
 8012ddc:	6039      	str	r1, [r7, #0]
 8012dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	2204      	movs	r2, #4
 8012de4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012de6:	4b03      	ldr	r3, [pc, #12]	; (8012df4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	370c      	adds	r7, #12
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr
 8012df4:	20000170 	.word	0x20000170

08012df8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b082      	sub	sp, #8
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	4603      	mov	r3, r0
 8012e00:	6039      	str	r1, [r7, #0]
 8012e02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e04:	79fb      	ldrb	r3, [r7, #7]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d105      	bne.n	8012e16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012e0a:	683a      	ldr	r2, [r7, #0]
 8012e0c:	4907      	ldr	r1, [pc, #28]	; (8012e2c <USBD_FS_ProductStrDescriptor+0x34>)
 8012e0e:	4808      	ldr	r0, [pc, #32]	; (8012e30 <USBD_FS_ProductStrDescriptor+0x38>)
 8012e10:	f7fc f93d 	bl	800f08e <USBD_GetString>
 8012e14:	e004      	b.n	8012e20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012e16:	683a      	ldr	r2, [r7, #0]
 8012e18:	4904      	ldr	r1, [pc, #16]	; (8012e2c <USBD_FS_ProductStrDescriptor+0x34>)
 8012e1a:	4805      	ldr	r0, [pc, #20]	; (8012e30 <USBD_FS_ProductStrDescriptor+0x38>)
 8012e1c:	f7fc f937 	bl	800f08e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e20:	4b02      	ldr	r3, [pc, #8]	; (8012e2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3708      	adds	r7, #8
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	20002660 	.word	0x20002660
 8012e30:	0801e368 	.word	0x0801e368

08012e34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b082      	sub	sp, #8
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	6039      	str	r1, [r7, #0]
 8012e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012e40:	683a      	ldr	r2, [r7, #0]
 8012e42:	4904      	ldr	r1, [pc, #16]	; (8012e54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012e44:	4804      	ldr	r0, [pc, #16]	; (8012e58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012e46:	f7fc f922 	bl	800f08e <USBD_GetString>
  return USBD_StrDesc;
 8012e4a:	4b02      	ldr	r3, [pc, #8]	; (8012e54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3708      	adds	r7, #8
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	20002660 	.word	0x20002660
 8012e58:	0801e380 	.word	0x0801e380

08012e5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b082      	sub	sp, #8
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	6039      	str	r1, [r7, #0]
 8012e66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	221a      	movs	r2, #26
 8012e6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012e6e:	f000 f855 	bl	8012f1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012e72:	4b02      	ldr	r3, [pc, #8]	; (8012e7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}
 8012e7c:	20000174 	.word	0x20000174

08012e80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	4603      	mov	r3, r0
 8012e88:	6039      	str	r1, [r7, #0]
 8012e8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012e8c:	79fb      	ldrb	r3, [r7, #7]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d105      	bne.n	8012e9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012e92:	683a      	ldr	r2, [r7, #0]
 8012e94:	4907      	ldr	r1, [pc, #28]	; (8012eb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012e96:	4808      	ldr	r0, [pc, #32]	; (8012eb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012e98:	f7fc f8f9 	bl	800f08e <USBD_GetString>
 8012e9c:	e004      	b.n	8012ea8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012e9e:	683a      	ldr	r2, [r7, #0]
 8012ea0:	4904      	ldr	r1, [pc, #16]	; (8012eb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012ea2:	4805      	ldr	r0, [pc, #20]	; (8012eb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012ea4:	f7fc f8f3 	bl	800f08e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ea8:	4b02      	ldr	r3, [pc, #8]	; (8012eb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3708      	adds	r7, #8
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	20002660 	.word	0x20002660
 8012eb8:	0801e394 	.word	0x0801e394

08012ebc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	6039      	str	r1, [r7, #0]
 8012ec6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ec8:	79fb      	ldrb	r3, [r7, #7]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d105      	bne.n	8012eda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012ece:	683a      	ldr	r2, [r7, #0]
 8012ed0:	4907      	ldr	r1, [pc, #28]	; (8012ef0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012ed2:	4808      	ldr	r0, [pc, #32]	; (8012ef4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012ed4:	f7fc f8db 	bl	800f08e <USBD_GetString>
 8012ed8:	e004      	b.n	8012ee4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012eda:	683a      	ldr	r2, [r7, #0]
 8012edc:	4904      	ldr	r1, [pc, #16]	; (8012ef0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012ede:	4805      	ldr	r0, [pc, #20]	; (8012ef4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012ee0:	f7fc f8d5 	bl	800f08e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ee4:	4b02      	ldr	r3, [pc, #8]	; (8012ef0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3708      	adds	r7, #8
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
 8012eee:	bf00      	nop
 8012ef0:	20002660 	.word	0x20002660
 8012ef4:	0801e3a0 	.word	0x0801e3a0

08012ef8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b083      	sub	sp, #12
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	4603      	mov	r3, r0
 8012f00:	6039      	str	r1, [r7, #0]
 8012f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	220c      	movs	r2, #12
 8012f08:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012f0a:	4b03      	ldr	r3, [pc, #12]	; (8012f18 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	370c      	adds	r7, #12
 8012f10:	46bd      	mov	sp, r7
 8012f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f16:	4770      	bx	lr
 8012f18:	20000164 	.word	0x20000164

08012f1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b084      	sub	sp, #16
 8012f20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012f22:	4b0f      	ldr	r3, [pc, #60]	; (8012f60 <Get_SerialNum+0x44>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012f28:	4b0e      	ldr	r3, [pc, #56]	; (8012f64 <Get_SerialNum+0x48>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012f2e:	4b0e      	ldr	r3, [pc, #56]	; (8012f68 <Get_SerialNum+0x4c>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012f34:	68fa      	ldr	r2, [r7, #12]
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	4413      	add	r3, r2
 8012f3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d009      	beq.n	8012f56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012f42:	2208      	movs	r2, #8
 8012f44:	4909      	ldr	r1, [pc, #36]	; (8012f6c <Get_SerialNum+0x50>)
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f000 f814 	bl	8012f74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012f4c:	2204      	movs	r2, #4
 8012f4e:	4908      	ldr	r1, [pc, #32]	; (8012f70 <Get_SerialNum+0x54>)
 8012f50:	68b8      	ldr	r0, [r7, #8]
 8012f52:	f000 f80f 	bl	8012f74 <IntToUnicode>
  }
}
 8012f56:	bf00      	nop
 8012f58:	3710      	adds	r7, #16
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}
 8012f5e:	bf00      	nop
 8012f60:	1fff7590 	.word	0x1fff7590
 8012f64:	1fff7594 	.word	0x1fff7594
 8012f68:	1fff7598 	.word	0x1fff7598
 8012f6c:	20000176 	.word	0x20000176
 8012f70:	20000186 	.word	0x20000186

08012f74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012f74:	b480      	push	{r7}
 8012f76:	b087      	sub	sp, #28
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	4613      	mov	r3, r2
 8012f80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012f82:	2300      	movs	r3, #0
 8012f84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012f86:	2300      	movs	r3, #0
 8012f88:	75fb      	strb	r3, [r7, #23]
 8012f8a:	e027      	b.n	8012fdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	0f1b      	lsrs	r3, r3, #28
 8012f90:	2b09      	cmp	r3, #9
 8012f92:	d80b      	bhi.n	8012fac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	0f1b      	lsrs	r3, r3, #28
 8012f98:	b2da      	uxtb	r2, r3
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
 8012f9c:	005b      	lsls	r3, r3, #1
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	440b      	add	r3, r1
 8012fa4:	3230      	adds	r2, #48	; 0x30
 8012fa6:	b2d2      	uxtb	r2, r2
 8012fa8:	701a      	strb	r2, [r3, #0]
 8012faa:	e00a      	b.n	8012fc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	0f1b      	lsrs	r3, r3, #28
 8012fb0:	b2da      	uxtb	r2, r3
 8012fb2:	7dfb      	ldrb	r3, [r7, #23]
 8012fb4:	005b      	lsls	r3, r3, #1
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	68bb      	ldr	r3, [r7, #8]
 8012fba:	440b      	add	r3, r1
 8012fbc:	3237      	adds	r2, #55	; 0x37
 8012fbe:	b2d2      	uxtb	r2, r2
 8012fc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	011b      	lsls	r3, r3, #4
 8012fc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012fc8:	7dfb      	ldrb	r3, [r7, #23]
 8012fca:	005b      	lsls	r3, r3, #1
 8012fcc:	3301      	adds	r3, #1
 8012fce:	68ba      	ldr	r2, [r7, #8]
 8012fd0:	4413      	add	r3, r2
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012fd6:	7dfb      	ldrb	r3, [r7, #23]
 8012fd8:	3301      	adds	r3, #1
 8012fda:	75fb      	strb	r3, [r7, #23]
 8012fdc:	7dfa      	ldrb	r2, [r7, #23]
 8012fde:	79fb      	ldrb	r3, [r7, #7]
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d3d3      	bcc.n	8012f8c <IntToUnicode+0x18>
  }
}
 8012fe4:	bf00      	nop
 8012fe6:	bf00      	nop
 8012fe8:	371c      	adds	r7, #28
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr
	...

08012ff4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b0b2      	sub	sp, #200	; 0xc8
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ffc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013000:	2200      	movs	r2, #0
 8013002:	601a      	str	r2, [r3, #0]
 8013004:	605a      	str	r2, [r3, #4]
 8013006:	609a      	str	r2, [r3, #8]
 8013008:	60da      	str	r2, [r3, #12]
 801300a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801300c:	f107 0318 	add.w	r3, r7, #24
 8013010:	229c      	movs	r2, #156	; 0x9c
 8013012:	2100      	movs	r1, #0
 8013014:	4618      	mov	r0, r3
 8013016:	f008 f9b9 	bl	801b38c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013022:	d163      	bne.n	80130ec <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013028:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801302a:	2300      	movs	r3, #0
 801302c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013030:	f107 0318 	add.w	r3, r7, #24
 8013034:	4618      	mov	r0, r3
 8013036:	f7f3 fb83 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d001      	beq.n	8013044 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8013040:	f7ee fc82 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013044:	4b2b      	ldr	r3, [pc, #172]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 8013046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013048:	4a2a      	ldr	r2, [pc, #168]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 801304a:	f043 0301 	orr.w	r3, r3, #1
 801304e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013050:	4b28      	ldr	r3, [pc, #160]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 8013052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013054:	f003 0301 	and.w	r3, r3, #1
 8013058:	617b      	str	r3, [r7, #20]
 801305a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 801305c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013064:	2302      	movs	r3, #2
 8013066:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801306a:	2300      	movs	r3, #0
 801306c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013070:	2303      	movs	r3, #3
 8013072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013076:	230a      	movs	r3, #10
 8013078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801307c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013080:	4619      	mov	r1, r3
 8013082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013086:	f7f0 feeb 	bl	8003e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801308a:	4b1a      	ldr	r3, [pc, #104]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 801308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801308e:	4a19      	ldr	r2, [pc, #100]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 8013090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013096:	4b17      	ldr	r3, [pc, #92]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 8013098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801309a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801309e:	613b      	str	r3, [r7, #16]
 80130a0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80130a2:	4b14      	ldr	r3, [pc, #80]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 80130a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d114      	bne.n	80130d8 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80130ae:	4b11      	ldr	r3, [pc, #68]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 80130b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130b2:	4a10      	ldr	r2, [pc, #64]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 80130b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80130b8:	6593      	str	r3, [r2, #88]	; 0x58
 80130ba:	4b0e      	ldr	r3, [pc, #56]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 80130bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80130c2:	60fb      	str	r3, [r7, #12]
 80130c4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80130c6:	f7f2 fc47 	bl	8005958 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80130ca:	4b0a      	ldr	r3, [pc, #40]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 80130cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130ce:	4a09      	ldr	r2, [pc, #36]	; (80130f4 <HAL_PCD_MspInit+0x100>)
 80130d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80130d4:	6593      	str	r3, [r2, #88]	; 0x58
 80130d6:	e001      	b.n	80130dc <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80130d8:	f7f2 fc3e 	bl	8005958 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80130dc:	2200      	movs	r2, #0
 80130de:	2100      	movs	r1, #0
 80130e0:	2043      	movs	r0, #67	; 0x43
 80130e2:	f7f0 f9b6 	bl	8003452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80130e6:	2043      	movs	r0, #67	; 0x43
 80130e8:	f7f0 f9cf 	bl	800348a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80130ec:	bf00      	nop
 80130ee:	37c8      	adds	r7, #200	; 0xc8
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	40021000 	.word	0x40021000

080130f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801310c:	4619      	mov	r1, r3
 801310e:	4610      	mov	r0, r2
 8013110:	f7fa ffac 	bl	800e06c <USBD_LL_SetupStage>
}
 8013114:	bf00      	nop
 8013116:	3708      	adds	r7, #8
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}

0801311c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	460b      	mov	r3, r1
 8013126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801312e:	78fa      	ldrb	r2, [r7, #3]
 8013130:	6879      	ldr	r1, [r7, #4]
 8013132:	4613      	mov	r3, r2
 8013134:	00db      	lsls	r3, r3, #3
 8013136:	4413      	add	r3, r2
 8013138:	009b      	lsls	r3, r3, #2
 801313a:	440b      	add	r3, r1
 801313c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	78fb      	ldrb	r3, [r7, #3]
 8013144:	4619      	mov	r1, r3
 8013146:	f7fa ffe6 	bl	800e116 <USBD_LL_DataOutStage>
}
 801314a:	bf00      	nop
 801314c:	3708      	adds	r7, #8
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}

08013152 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013152:	b580      	push	{r7, lr}
 8013154:	b082      	sub	sp, #8
 8013156:	af00      	add	r7, sp, #0
 8013158:	6078      	str	r0, [r7, #4]
 801315a:	460b      	mov	r3, r1
 801315c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013164:	78fa      	ldrb	r2, [r7, #3]
 8013166:	6879      	ldr	r1, [r7, #4]
 8013168:	4613      	mov	r3, r2
 801316a:	00db      	lsls	r3, r3, #3
 801316c:	4413      	add	r3, r2
 801316e:	009b      	lsls	r3, r3, #2
 8013170:	440b      	add	r3, r1
 8013172:	334c      	adds	r3, #76	; 0x4c
 8013174:	681a      	ldr	r2, [r3, #0]
 8013176:	78fb      	ldrb	r3, [r7, #3]
 8013178:	4619      	mov	r1, r3
 801317a:	f7fb f82f 	bl	800e1dc <USBD_LL_DataInStage>
}
 801317e:	bf00      	nop
 8013180:	3708      	adds	r7, #8
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}

08013186 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013186:	b580      	push	{r7, lr}
 8013188:	b082      	sub	sp, #8
 801318a:	af00      	add	r7, sp, #0
 801318c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013194:	4618      	mov	r0, r3
 8013196:	f7fb f943 	bl	800e420 <USBD_LL_SOF>
}
 801319a:	bf00      	nop
 801319c:	3708      	adds	r7, #8
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}

080131a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131a2:	b580      	push	{r7, lr}
 80131a4:	b084      	sub	sp, #16
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80131aa:	2301      	movs	r3, #1
 80131ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	2b02      	cmp	r3, #2
 80131b4:	d001      	beq.n	80131ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80131b6:	f7ee fbc7 	bl	8001948 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80131c0:	7bfa      	ldrb	r2, [r7, #15]
 80131c2:	4611      	mov	r1, r2
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7fb f8ed 	bl	800e3a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fb f899 	bl	800e308 <USBD_LL_Reset>
}
 80131d6:	bf00      	nop
 80131d8:	3710      	adds	r7, #16
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
	...

080131e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b082      	sub	sp, #8
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	6812      	ldr	r2, [r2, #0]
 80131f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80131fa:	f043 0301 	orr.w	r3, r3, #1
 80131fe:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013206:	4618      	mov	r0, r3
 8013208:	f7fb f8dc 	bl	800e3c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6a1b      	ldr	r3, [r3, #32]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d005      	beq.n	8013220 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013214:	4b04      	ldr	r3, [pc, #16]	; (8013228 <HAL_PCD_SuspendCallback+0x48>)
 8013216:	691b      	ldr	r3, [r3, #16]
 8013218:	4a03      	ldr	r2, [pc, #12]	; (8013228 <HAL_PCD_SuspendCallback+0x48>)
 801321a:	f043 0306 	orr.w	r3, r3, #6
 801321e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013220:	bf00      	nop
 8013222:	3708      	adds	r7, #8
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	e000ed00 	.word	0xe000ed00

0801322c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b082      	sub	sp, #8
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	6812      	ldr	r2, [r2, #0]
 8013242:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013246:	f023 0301 	bic.w	r3, r3, #1
 801324a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6a1b      	ldr	r3, [r3, #32]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d007      	beq.n	8013264 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013254:	4b08      	ldr	r3, [pc, #32]	; (8013278 <HAL_PCD_ResumeCallback+0x4c>)
 8013256:	691b      	ldr	r3, [r3, #16]
 8013258:	4a07      	ldr	r2, [pc, #28]	; (8013278 <HAL_PCD_ResumeCallback+0x4c>)
 801325a:	f023 0306 	bic.w	r3, r3, #6
 801325e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013260:	f000 faf4 	bl	801384c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801326a:	4618      	mov	r0, r3
 801326c:	f7fb f8c0 	bl	800e3f0 <USBD_LL_Resume>
}
 8013270:	bf00      	nop
 8013272:	3708      	adds	r7, #8
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}
 8013278:	e000ed00 	.word	0xe000ed00

0801327c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	460b      	mov	r3, r1
 8013286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801328e:	78fa      	ldrb	r2, [r7, #3]
 8013290:	4611      	mov	r1, r2
 8013292:	4618      	mov	r0, r3
 8013294:	f7fb f90c 	bl	800e4b0 <USBD_LL_IsoOUTIncomplete>
}
 8013298:	bf00      	nop
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	460b      	mov	r3, r1
 80132aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80132b2:	78fa      	ldrb	r2, [r7, #3]
 80132b4:	4611      	mov	r1, r2
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fb f8d4 	bl	800e464 <USBD_LL_IsoINIncomplete>
}
 80132bc:	bf00      	nop
 80132be:	3708      	adds	r7, #8
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b082      	sub	sp, #8
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fb f912 	bl	800e4fc <USBD_LL_DevConnected>
}
 80132d8:	bf00      	nop
 80132da:	3708      	adds	r7, #8
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fb f90f 	bl	800e512 <USBD_LL_DevDisconnected>
}
 80132f4:	bf00      	nop
 80132f6:	3708      	adds	r7, #8
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}

080132fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d139      	bne.n	8013380 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801330c:	4a1f      	ldr	r2, [pc, #124]	; (801338c <USBD_LL_Init+0x90>)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	4a1d      	ldr	r2, [pc, #116]	; (801338c <USBD_LL_Init+0x90>)
 8013318:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801331c:	4b1b      	ldr	r3, [pc, #108]	; (801338c <USBD_LL_Init+0x90>)
 801331e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013322:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8013324:	4b19      	ldr	r3, [pc, #100]	; (801338c <USBD_LL_Init+0x90>)
 8013326:	2206      	movs	r2, #6
 8013328:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801332a:	4b18      	ldr	r3, [pc, #96]	; (801338c <USBD_LL_Init+0x90>)
 801332c:	2202      	movs	r2, #2
 801332e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013330:	4b16      	ldr	r3, [pc, #88]	; (801338c <USBD_LL_Init+0x90>)
 8013332:	2200      	movs	r2, #0
 8013334:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013336:	4b15      	ldr	r3, [pc, #84]	; (801338c <USBD_LL_Init+0x90>)
 8013338:	2200      	movs	r2, #0
 801333a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801333c:	4b13      	ldr	r3, [pc, #76]	; (801338c <USBD_LL_Init+0x90>)
 801333e:	2200      	movs	r2, #0
 8013340:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8013342:	4b12      	ldr	r3, [pc, #72]	; (801338c <USBD_LL_Init+0x90>)
 8013344:	2201      	movs	r2, #1
 8013346:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013348:	4b10      	ldr	r3, [pc, #64]	; (801338c <USBD_LL_Init+0x90>)
 801334a:	2200      	movs	r2, #0
 801334c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801334e:	4b0f      	ldr	r3, [pc, #60]	; (801338c <USBD_LL_Init+0x90>)
 8013350:	2200      	movs	r2, #0
 8013352:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013354:	480d      	ldr	r0, [pc, #52]	; (801338c <USBD_LL_Init+0x90>)
 8013356:	f7f1 f86b 	bl	8004430 <HAL_PCD_Init>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d001      	beq.n	8013364 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8013360:	f7ee faf2 	bl	8001948 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013364:	2180      	movs	r1, #128	; 0x80
 8013366:	4809      	ldr	r0, [pc, #36]	; (801338c <USBD_LL_Init+0x90>)
 8013368:	f7f2 f9ed 	bl	8005746 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801336c:	2240      	movs	r2, #64	; 0x40
 801336e:	2100      	movs	r1, #0
 8013370:	4806      	ldr	r0, [pc, #24]	; (801338c <USBD_LL_Init+0x90>)
 8013372:	f7f2 f9a1 	bl	80056b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013376:	2280      	movs	r2, #128	; 0x80
 8013378:	2101      	movs	r1, #1
 801337a:	4804      	ldr	r0, [pc, #16]	; (801338c <USBD_LL_Init+0x90>)
 801337c:	f7f2 f99c 	bl	80056b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013380:	2300      	movs	r3, #0
}
 8013382:	4618      	mov	r0, r3
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	20002860 	.word	0x20002860

08013390 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013398:	2300      	movs	r3, #0
 801339a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801339c:	2300      	movs	r3, #0
 801339e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7f1 f966 	bl	8004678 <HAL_PCD_Start>
 80133ac:	4603      	mov	r3, r0
 80133ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80133b0:	7bbb      	ldrb	r3, [r7, #14]
 80133b2:	2b03      	cmp	r3, #3
 80133b4:	d816      	bhi.n	80133e4 <USBD_LL_Start+0x54>
 80133b6:	a201      	add	r2, pc, #4	; (adr r2, 80133bc <USBD_LL_Start+0x2c>)
 80133b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133bc:	080133cd 	.word	0x080133cd
 80133c0:	080133d3 	.word	0x080133d3
 80133c4:	080133d9 	.word	0x080133d9
 80133c8:	080133df 	.word	0x080133df
    case HAL_OK :
      usb_status = USBD_OK;
 80133cc:	2300      	movs	r3, #0
 80133ce:	73fb      	strb	r3, [r7, #15]
    break;
 80133d0:	e00b      	b.n	80133ea <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80133d2:	2303      	movs	r3, #3
 80133d4:	73fb      	strb	r3, [r7, #15]
    break;
 80133d6:	e008      	b.n	80133ea <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80133d8:	2301      	movs	r3, #1
 80133da:	73fb      	strb	r3, [r7, #15]
    break;
 80133dc:	e005      	b.n	80133ea <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80133de:	2303      	movs	r3, #3
 80133e0:	73fb      	strb	r3, [r7, #15]
    break;
 80133e2:	e002      	b.n	80133ea <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80133e4:	2303      	movs	r3, #3
 80133e6:	73fb      	strb	r3, [r7, #15]
    break;
 80133e8:	bf00      	nop
  }
  return usb_status;
 80133ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	3710      	adds	r7, #16
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}

080133f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b084      	sub	sp, #16
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	4608      	mov	r0, r1
 80133fe:	4611      	mov	r1, r2
 8013400:	461a      	mov	r2, r3
 8013402:	4603      	mov	r3, r0
 8013404:	70fb      	strb	r3, [r7, #3]
 8013406:	460b      	mov	r3, r1
 8013408:	70bb      	strb	r3, [r7, #2]
 801340a:	4613      	mov	r3, r2
 801340c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801340e:	2300      	movs	r3, #0
 8013410:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013412:	2300      	movs	r3, #0
 8013414:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801341c:	78bb      	ldrb	r3, [r7, #2]
 801341e:	883a      	ldrh	r2, [r7, #0]
 8013420:	78f9      	ldrb	r1, [r7, #3]
 8013422:	f7f1 fe10 	bl	8005046 <HAL_PCD_EP_Open>
 8013426:	4603      	mov	r3, r0
 8013428:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801342a:	7bbb      	ldrb	r3, [r7, #14]
 801342c:	2b03      	cmp	r3, #3
 801342e:	d817      	bhi.n	8013460 <USBD_LL_OpenEP+0x6c>
 8013430:	a201      	add	r2, pc, #4	; (adr r2, 8013438 <USBD_LL_OpenEP+0x44>)
 8013432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013436:	bf00      	nop
 8013438:	08013449 	.word	0x08013449
 801343c:	0801344f 	.word	0x0801344f
 8013440:	08013455 	.word	0x08013455
 8013444:	0801345b 	.word	0x0801345b
    case HAL_OK :
      usb_status = USBD_OK;
 8013448:	2300      	movs	r3, #0
 801344a:	73fb      	strb	r3, [r7, #15]
    break;
 801344c:	e00b      	b.n	8013466 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801344e:	2303      	movs	r3, #3
 8013450:	73fb      	strb	r3, [r7, #15]
    break;
 8013452:	e008      	b.n	8013466 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013454:	2301      	movs	r3, #1
 8013456:	73fb      	strb	r3, [r7, #15]
    break;
 8013458:	e005      	b.n	8013466 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801345a:	2303      	movs	r3, #3
 801345c:	73fb      	strb	r3, [r7, #15]
    break;
 801345e:	e002      	b.n	8013466 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013460:	2303      	movs	r3, #3
 8013462:	73fb      	strb	r3, [r7, #15]
    break;
 8013464:	bf00      	nop
  }
  return usb_status;
 8013466:	7bfb      	ldrb	r3, [r7, #15]
}
 8013468:	4618      	mov	r0, r3
 801346a:	3710      	adds	r7, #16
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}

08013470 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b084      	sub	sp, #16
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
 8013478:	460b      	mov	r3, r1
 801347a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801347c:	2300      	movs	r3, #0
 801347e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013480:	2300      	movs	r3, #0
 8013482:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801348a:	78fa      	ldrb	r2, [r7, #3]
 801348c:	4611      	mov	r1, r2
 801348e:	4618      	mov	r0, r3
 8013490:	f7f1 fe41 	bl	8005116 <HAL_PCD_EP_Close>
 8013494:	4603      	mov	r3, r0
 8013496:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013498:	7bbb      	ldrb	r3, [r7, #14]
 801349a:	2b03      	cmp	r3, #3
 801349c:	d816      	bhi.n	80134cc <USBD_LL_CloseEP+0x5c>
 801349e:	a201      	add	r2, pc, #4	; (adr r2, 80134a4 <USBD_LL_CloseEP+0x34>)
 80134a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134a4:	080134b5 	.word	0x080134b5
 80134a8:	080134bb 	.word	0x080134bb
 80134ac:	080134c1 	.word	0x080134c1
 80134b0:	080134c7 	.word	0x080134c7
    case HAL_OK :
      usb_status = USBD_OK;
 80134b4:	2300      	movs	r3, #0
 80134b6:	73fb      	strb	r3, [r7, #15]
    break;
 80134b8:	e00b      	b.n	80134d2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134ba:	2303      	movs	r3, #3
 80134bc:	73fb      	strb	r3, [r7, #15]
    break;
 80134be:	e008      	b.n	80134d2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134c0:	2301      	movs	r3, #1
 80134c2:	73fb      	strb	r3, [r7, #15]
    break;
 80134c4:	e005      	b.n	80134d2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80134c6:	2303      	movs	r3, #3
 80134c8:	73fb      	strb	r3, [r7, #15]
    break;
 80134ca:	e002      	b.n	80134d2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80134cc:	2303      	movs	r3, #3
 80134ce:	73fb      	strb	r3, [r7, #15]
    break;
 80134d0:	bf00      	nop
  }
  return usb_status;
 80134d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3710      	adds	r7, #16
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}

080134dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b084      	sub	sp, #16
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	460b      	mov	r3, r1
 80134e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134e8:	2300      	movs	r3, #0
 80134ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134ec:	2300      	movs	r3, #0
 80134ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134f6:	78fa      	ldrb	r2, [r7, #3]
 80134f8:	4611      	mov	r1, r2
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7f1 fee8 	bl	80052d0 <HAL_PCD_EP_SetStall>
 8013500:	4603      	mov	r3, r0
 8013502:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013504:	7bbb      	ldrb	r3, [r7, #14]
 8013506:	2b03      	cmp	r3, #3
 8013508:	d816      	bhi.n	8013538 <USBD_LL_StallEP+0x5c>
 801350a:	a201      	add	r2, pc, #4	; (adr r2, 8013510 <USBD_LL_StallEP+0x34>)
 801350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013510:	08013521 	.word	0x08013521
 8013514:	08013527 	.word	0x08013527
 8013518:	0801352d 	.word	0x0801352d
 801351c:	08013533 	.word	0x08013533
    case HAL_OK :
      usb_status = USBD_OK;
 8013520:	2300      	movs	r3, #0
 8013522:	73fb      	strb	r3, [r7, #15]
    break;
 8013524:	e00b      	b.n	801353e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013526:	2303      	movs	r3, #3
 8013528:	73fb      	strb	r3, [r7, #15]
    break;
 801352a:	e008      	b.n	801353e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801352c:	2301      	movs	r3, #1
 801352e:	73fb      	strb	r3, [r7, #15]
    break;
 8013530:	e005      	b.n	801353e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013532:	2303      	movs	r3, #3
 8013534:	73fb      	strb	r3, [r7, #15]
    break;
 8013536:	e002      	b.n	801353e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013538:	2303      	movs	r3, #3
 801353a:	73fb      	strb	r3, [r7, #15]
    break;
 801353c:	bf00      	nop
  }
  return usb_status;
 801353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013540:	4618      	mov	r0, r3
 8013542:	3710      	adds	r7, #16
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}

08013548 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b084      	sub	sp, #16
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	460b      	mov	r3, r1
 8013552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013554:	2300      	movs	r3, #0
 8013556:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013558:	2300      	movs	r3, #0
 801355a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013562:	78fa      	ldrb	r2, [r7, #3]
 8013564:	4611      	mov	r1, r2
 8013566:	4618      	mov	r0, r3
 8013568:	f7f1 ff14 	bl	8005394 <HAL_PCD_EP_ClrStall>
 801356c:	4603      	mov	r3, r0
 801356e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013570:	7bbb      	ldrb	r3, [r7, #14]
 8013572:	2b03      	cmp	r3, #3
 8013574:	d816      	bhi.n	80135a4 <USBD_LL_ClearStallEP+0x5c>
 8013576:	a201      	add	r2, pc, #4	; (adr r2, 801357c <USBD_LL_ClearStallEP+0x34>)
 8013578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801357c:	0801358d 	.word	0x0801358d
 8013580:	08013593 	.word	0x08013593
 8013584:	08013599 	.word	0x08013599
 8013588:	0801359f 	.word	0x0801359f
    case HAL_OK :
      usb_status = USBD_OK;
 801358c:	2300      	movs	r3, #0
 801358e:	73fb      	strb	r3, [r7, #15]
    break;
 8013590:	e00b      	b.n	80135aa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013592:	2303      	movs	r3, #3
 8013594:	73fb      	strb	r3, [r7, #15]
    break;
 8013596:	e008      	b.n	80135aa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013598:	2301      	movs	r3, #1
 801359a:	73fb      	strb	r3, [r7, #15]
    break;
 801359c:	e005      	b.n	80135aa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801359e:	2303      	movs	r3, #3
 80135a0:	73fb      	strb	r3, [r7, #15]
    break;
 80135a2:	e002      	b.n	80135aa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80135a4:	2303      	movs	r3, #3
 80135a6:	73fb      	strb	r3, [r7, #15]
    break;
 80135a8:	bf00      	nop
  }
  return usb_status;
 80135aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b085      	sub	sp, #20
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	460b      	mov	r3, r1
 80135be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80135c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80135c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	da0b      	bge.n	80135e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80135d0:	78fb      	ldrb	r3, [r7, #3]
 80135d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80135d6:	68f9      	ldr	r1, [r7, #12]
 80135d8:	4613      	mov	r3, r2
 80135da:	00db      	lsls	r3, r3, #3
 80135dc:	4413      	add	r3, r2
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	440b      	add	r3, r1
 80135e2:	333e      	adds	r3, #62	; 0x3e
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	e00b      	b.n	8013600 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80135e8:	78fb      	ldrb	r3, [r7, #3]
 80135ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80135ee:	68f9      	ldr	r1, [r7, #12]
 80135f0:	4613      	mov	r3, r2
 80135f2:	00db      	lsls	r3, r3, #3
 80135f4:	4413      	add	r3, r2
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	440b      	add	r3, r1
 80135fa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80135fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013600:	4618      	mov	r0, r3
 8013602:	3714      	adds	r7, #20
 8013604:	46bd      	mov	sp, r7
 8013606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360a:	4770      	bx	lr

0801360c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	460b      	mov	r3, r1
 8013616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013618:	2300      	movs	r3, #0
 801361a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801361c:	2300      	movs	r3, #0
 801361e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013626:	78fa      	ldrb	r2, [r7, #3]
 8013628:	4611      	mov	r1, r2
 801362a:	4618      	mov	r0, r3
 801362c:	f7f1 fce6 	bl	8004ffc <HAL_PCD_SetAddress>
 8013630:	4603      	mov	r3, r0
 8013632:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013634:	7bbb      	ldrb	r3, [r7, #14]
 8013636:	2b03      	cmp	r3, #3
 8013638:	d816      	bhi.n	8013668 <USBD_LL_SetUSBAddress+0x5c>
 801363a:	a201      	add	r2, pc, #4	; (adr r2, 8013640 <USBD_LL_SetUSBAddress+0x34>)
 801363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013640:	08013651 	.word	0x08013651
 8013644:	08013657 	.word	0x08013657
 8013648:	0801365d 	.word	0x0801365d
 801364c:	08013663 	.word	0x08013663
    case HAL_OK :
      usb_status = USBD_OK;
 8013650:	2300      	movs	r3, #0
 8013652:	73fb      	strb	r3, [r7, #15]
    break;
 8013654:	e00b      	b.n	801366e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013656:	2303      	movs	r3, #3
 8013658:	73fb      	strb	r3, [r7, #15]
    break;
 801365a:	e008      	b.n	801366e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801365c:	2301      	movs	r3, #1
 801365e:	73fb      	strb	r3, [r7, #15]
    break;
 8013660:	e005      	b.n	801366e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013662:	2303      	movs	r3, #3
 8013664:	73fb      	strb	r3, [r7, #15]
    break;
 8013666:	e002      	b.n	801366e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013668:	2303      	movs	r3, #3
 801366a:	73fb      	strb	r3, [r7, #15]
    break;
 801366c:	bf00      	nop
  }
  return usb_status;
 801366e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013670:	4618      	mov	r0, r3
 8013672:	3710      	adds	r7, #16
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b086      	sub	sp, #24
 801367c:	af00      	add	r7, sp, #0
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	607a      	str	r2, [r7, #4]
 8013682:	603b      	str	r3, [r7, #0]
 8013684:	460b      	mov	r3, r1
 8013686:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013688:	2300      	movs	r3, #0
 801368a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801368c:	2300      	movs	r3, #0
 801368e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013696:	7af9      	ldrb	r1, [r7, #11]
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	687a      	ldr	r2, [r7, #4]
 801369c:	f7f1 fddb 	bl	8005256 <HAL_PCD_EP_Transmit>
 80136a0:	4603      	mov	r3, r0
 80136a2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80136a4:	7dbb      	ldrb	r3, [r7, #22]
 80136a6:	2b03      	cmp	r3, #3
 80136a8:	d816      	bhi.n	80136d8 <USBD_LL_Transmit+0x60>
 80136aa:	a201      	add	r2, pc, #4	; (adr r2, 80136b0 <USBD_LL_Transmit+0x38>)
 80136ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136b0:	080136c1 	.word	0x080136c1
 80136b4:	080136c7 	.word	0x080136c7
 80136b8:	080136cd 	.word	0x080136cd
 80136bc:	080136d3 	.word	0x080136d3
    case HAL_OK :
      usb_status = USBD_OK;
 80136c0:	2300      	movs	r3, #0
 80136c2:	75fb      	strb	r3, [r7, #23]
    break;
 80136c4:	e00b      	b.n	80136de <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80136c6:	2303      	movs	r3, #3
 80136c8:	75fb      	strb	r3, [r7, #23]
    break;
 80136ca:	e008      	b.n	80136de <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80136cc:	2301      	movs	r3, #1
 80136ce:	75fb      	strb	r3, [r7, #23]
    break;
 80136d0:	e005      	b.n	80136de <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80136d2:	2303      	movs	r3, #3
 80136d4:	75fb      	strb	r3, [r7, #23]
    break;
 80136d6:	e002      	b.n	80136de <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80136d8:	2303      	movs	r3, #3
 80136da:	75fb      	strb	r3, [r7, #23]
    break;
 80136dc:	bf00      	nop
  }
  return usb_status;
 80136de:	7dfb      	ldrb	r3, [r7, #23]
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	3718      	adds	r7, #24
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b086      	sub	sp, #24
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	60f8      	str	r0, [r7, #12]
 80136f0:	607a      	str	r2, [r7, #4]
 80136f2:	603b      	str	r3, [r7, #0]
 80136f4:	460b      	mov	r3, r1
 80136f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136f8:	2300      	movs	r3, #0
 80136fa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136fc:	2300      	movs	r3, #0
 80136fe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013706:	7af9      	ldrb	r1, [r7, #11]
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	f7f1 fd4d 	bl	80051aa <HAL_PCD_EP_Receive>
 8013710:	4603      	mov	r3, r0
 8013712:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013714:	7dbb      	ldrb	r3, [r7, #22]
 8013716:	2b03      	cmp	r3, #3
 8013718:	d816      	bhi.n	8013748 <USBD_LL_PrepareReceive+0x60>
 801371a:	a201      	add	r2, pc, #4	; (adr r2, 8013720 <USBD_LL_PrepareReceive+0x38>)
 801371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013720:	08013731 	.word	0x08013731
 8013724:	08013737 	.word	0x08013737
 8013728:	0801373d 	.word	0x0801373d
 801372c:	08013743 	.word	0x08013743
    case HAL_OK :
      usb_status = USBD_OK;
 8013730:	2300      	movs	r3, #0
 8013732:	75fb      	strb	r3, [r7, #23]
    break;
 8013734:	e00b      	b.n	801374e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013736:	2303      	movs	r3, #3
 8013738:	75fb      	strb	r3, [r7, #23]
    break;
 801373a:	e008      	b.n	801374e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801373c:	2301      	movs	r3, #1
 801373e:	75fb      	strb	r3, [r7, #23]
    break;
 8013740:	e005      	b.n	801374e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013742:	2303      	movs	r3, #3
 8013744:	75fb      	strb	r3, [r7, #23]
    break;
 8013746:	e002      	b.n	801374e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013748:	2303      	movs	r3, #3
 801374a:	75fb      	strb	r3, [r7, #23]
    break;
 801374c:	bf00      	nop
  }
  return usb_status;
 801374e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013750:	4618      	mov	r0, r3
 8013752:	3718      	adds	r7, #24
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	460b      	mov	r3, r1
 8013762:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801376a:	78fa      	ldrb	r2, [r7, #3]
 801376c:	4611      	mov	r1, r2
 801376e:	4618      	mov	r0, r3
 8013770:	f7f1 fd59 	bl	8005226 <HAL_PCD_EP_GetRxCount>
 8013774:	4603      	mov	r3, r0
}
 8013776:	4618      	mov	r0, r3
 8013778:	3708      	adds	r7, #8
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
	...

08013780 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	460b      	mov	r3, r1
 801378a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801378c:	78fb      	ldrb	r3, [r7, #3]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d002      	beq.n	8013798 <HAL_PCDEx_LPM_Callback+0x18>
 8013792:	2b01      	cmp	r3, #1
 8013794:	d01f      	beq.n	80137d6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013796:	e03b      	b.n	8013810 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6a1b      	ldr	r3, [r3, #32]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d007      	beq.n	80137b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80137a0:	f000 f854 	bl	801384c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80137a4:	4b1c      	ldr	r3, [pc, #112]	; (8013818 <HAL_PCDEx_LPM_Callback+0x98>)
 80137a6:	691b      	ldr	r3, [r3, #16]
 80137a8:	4a1b      	ldr	r2, [pc, #108]	; (8013818 <HAL_PCDEx_LPM_Callback+0x98>)
 80137aa:	f023 0306 	bic.w	r3, r3, #6
 80137ae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	6812      	ldr	r2, [r2, #0]
 80137be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80137c2:	f023 0301 	bic.w	r3, r3, #1
 80137c6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7fa fe0e 	bl	800e3f0 <USBD_LL_Resume>
    break;
 80137d4:	e01c      	b.n	8013810 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	6812      	ldr	r2, [r2, #0]
 80137e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80137e8:	f043 0301 	orr.w	r3, r3, #1
 80137ec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7fa fde5 	bl	800e3c4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6a1b      	ldr	r3, [r3, #32]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d005      	beq.n	801380e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013802:	4b05      	ldr	r3, [pc, #20]	; (8013818 <HAL_PCDEx_LPM_Callback+0x98>)
 8013804:	691b      	ldr	r3, [r3, #16]
 8013806:	4a04      	ldr	r2, [pc, #16]	; (8013818 <HAL_PCDEx_LPM_Callback+0x98>)
 8013808:	f043 0306 	orr.w	r3, r3, #6
 801380c:	6113      	str	r3, [r2, #16]
    break;
 801380e:	bf00      	nop
}
 8013810:	bf00      	nop
 8013812:	3708      	adds	r7, #8
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}
 8013818:	e000ed00 	.word	0xe000ed00

0801381c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013824:	4b03      	ldr	r3, [pc, #12]	; (8013834 <USBD_static_malloc+0x18>)
}
 8013826:	4618      	mov	r0, r3
 8013828:	370c      	adds	r7, #12
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr
 8013832:	bf00      	nop
 8013834:	20002d6c 	.word	0x20002d6c

08013838 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013838:	b480      	push	{r7}
 801383a:	b083      	sub	sp, #12
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]

}
 8013840:	bf00      	nop
 8013842:	370c      	adds	r7, #12
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr

0801384c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013850:	f7ed fb26 	bl	8000ea0 <SystemClock_Config>
}
 8013854:	bf00      	nop
 8013856:	bd80      	pop	{r7, pc}

08013858 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d009      	beq.n	801387c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8013868:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801386a:	461a      	mov	r2, r3
        err.type, err.code);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8013872:	6839      	ldr	r1, [r7, #0]
 8013874:	4806      	ldr	r0, [pc, #24]	; (8013890 <ai_log_err+0x38>)
 8013876:	f007 fe71 	bl	801b55c <iprintf>
 801387a:	e008      	b.n	801388e <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 801387c:	793b      	ldrb	r3, [r7, #4]
 801387e:	4619      	mov	r1, r3
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8013886:	461a      	mov	r2, r3
 8013888:	4802      	ldr	r0, [pc, #8]	; (8013894 <ai_log_err+0x3c>)
 801388a:	f007 fe67 	bl	801b55c <iprintf>

  do {} while (1);
 801388e:	e7fe      	b.n	801388e <ai_log_err+0x36>
 8013890:	0801e3d8 	.word	0x0801e3d8
 8013894:	0801e40c 	.word	0x0801e40c

08013898 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b086      	sub	sp, #24
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_svm_create_and_init(&svm, act_addr, NULL);
 80138a0:	2200      	movs	r2, #0
 80138a2:	6879      	ldr	r1, [r7, #4]
 80138a4:	4828      	ldr	r0, [pc, #160]	; (8013948 <ai_boostrap+0xb0>)
 80138a6:	f001 fd19 	bl	80152dc <ai_svm_create_and_init>
 80138aa:	4603      	mov	r3, r0
 80138ac:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 80138ae:	7b3b      	ldrb	r3, [r7, #12]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d006      	beq.n	80138c2 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_svm_create_and_init");
 80138b4:	4925      	ldr	r1, [pc, #148]	; (801394c <ai_boostrap+0xb4>)
 80138b6:	68f8      	ldr	r0, [r7, #12]
 80138b8:	f7ff ffce 	bl	8013858 <ai_log_err>
    return -1;
 80138bc:	f04f 33ff 	mov.w	r3, #4294967295
 80138c0:	e03e      	b.n	8013940 <ai_boostrap+0xa8>
  }

  ai_input = ai_svm_inputs_get(svm, NULL);
 80138c2:	4b21      	ldr	r3, [pc, #132]	; (8013948 <ai_boostrap+0xb0>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	2100      	movs	r1, #0
 80138c8:	4618      	mov	r0, r3
 80138ca:	f001 fd7b 	bl	80153c4 <ai_svm_inputs_get>
 80138ce:	4603      	mov	r3, r0
 80138d0:	4a1f      	ldr	r2, [pc, #124]	; (8013950 <ai_boostrap+0xb8>)
 80138d2:	6013      	str	r3, [r2, #0]
  ai_output = ai_svm_outputs_get(svm, NULL);
 80138d4:	4b1c      	ldr	r3, [pc, #112]	; (8013948 <ai_boostrap+0xb0>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	2100      	movs	r1, #0
 80138da:	4618      	mov	r0, r3
 80138dc:	f001 fd8c 	bl	80153f8 <ai_svm_outputs_get>
 80138e0:	4603      	mov	r3, r0
 80138e2:	4a1c      	ldr	r2, [pc, #112]	; (8013954 <ai_boostrap+0xbc>)
 80138e4:	6013      	str	r3, [r2, #0]

#if defined(AI_SVM_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_SVM_IN_NUM; idx++) {
 80138e6:	2300      	movs	r3, #0
 80138e8:	617b      	str	r3, [r7, #20]
 80138ea:	e00f      	b.n	801390c <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 80138ec:	4b18      	ldr	r3, [pc, #96]	; (8013950 <ai_boostrap+0xb8>)
 80138ee:	6819      	ldr	r1, [r3, #0]
 80138f0:	697a      	ldr	r2, [r7, #20]
 80138f2:	4613      	mov	r3, r2
 80138f4:	00db      	lsls	r3, r3, #3
 80138f6:	1a9b      	subs	r3, r3, r2
 80138f8:	009b      	lsls	r3, r3, #2
 80138fa:	440b      	add	r3, r1
 80138fc:	685a      	ldr	r2, [r3, #4]
 80138fe:	4916      	ldr	r1, [pc, #88]	; (8013958 <ai_boostrap+0xc0>)
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SVM_IN_NUM; idx++) {
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	3301      	adds	r3, #1
 801390a:	617b      	str	r3, [r7, #20]
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	2b00      	cmp	r3, #0
 8013910:	ddec      	ble.n	80138ec <ai_boostrap+0x54>

#if defined(AI_SVM_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_SVM_OUT_NUM; idx++) {
 8013912:	2300      	movs	r3, #0
 8013914:	613b      	str	r3, [r7, #16]
 8013916:	e00f      	b.n	8013938 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8013918:	4b0e      	ldr	r3, [pc, #56]	; (8013954 <ai_boostrap+0xbc>)
 801391a:	6819      	ldr	r1, [r3, #0]
 801391c:	693a      	ldr	r2, [r7, #16]
 801391e:	4613      	mov	r3, r2
 8013920:	00db      	lsls	r3, r3, #3
 8013922:	1a9b      	subs	r3, r3, r2
 8013924:	009b      	lsls	r3, r3, #2
 8013926:	440b      	add	r3, r1
 8013928:	685a      	ldr	r2, [r3, #4]
 801392a:	490c      	ldr	r1, [pc, #48]	; (801395c <ai_boostrap+0xc4>)
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SVM_OUT_NUM; idx++) {
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	3301      	adds	r3, #1
 8013936:	613b      	str	r3, [r7, #16]
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	2b01      	cmp	r3, #1
 801393c:	ddec      	ble.n	8013918 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_SVM_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 801393e:	2300      	movs	r3, #0
}
 8013940:	4618      	mov	r0, r3
 8013942:	3718      	adds	r7, #24
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	2000453c 	.word	0x2000453c
 801394c:	0801e43c 	.word	0x0801e43c
 8013950:	20004540 	.word	0x20004540
 8013954:	20004544 	.word	0x20004544
 8013958:	20003964 	.word	0x20003964
 801395c:	20003968 	.word	0x20003968

08013960 <ai_run>:

static int ai_run(void)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_svm_run(svm, ai_input, ai_output);
 8013966:	4b0f      	ldr	r3, [pc, #60]	; (80139a4 <ai_run+0x44>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	4a0f      	ldr	r2, [pc, #60]	; (80139a8 <ai_run+0x48>)
 801396c:	6811      	ldr	r1, [r2, #0]
 801396e:	4a0f      	ldr	r2, [pc, #60]	; (80139ac <ai_run+0x4c>)
 8013970:	6812      	ldr	r2, [r2, #0]
 8013972:	4618      	mov	r0, r3
 8013974:	f001 fd96 	bl	80154a4 <ai_svm_run>
 8013978:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2b01      	cmp	r3, #1
 801397e:	d00c      	beq.n	801399a <ai_run+0x3a>
    ai_log_err(ai_svm_get_error(svm),
 8013980:	4b08      	ldr	r3, [pc, #32]	; (80139a4 <ai_run+0x44>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	4618      	mov	r0, r3
 8013986:	f001 fc87 	bl	8015298 <ai_svm_get_error>
 801398a:	4603      	mov	r3, r0
 801398c:	4908      	ldr	r1, [pc, #32]	; (80139b0 <ai_run+0x50>)
 801398e:	4618      	mov	r0, r3
 8013990:	f7ff ff62 	bl	8013858 <ai_log_err>
        "ai_svm_run");
    return -1;
 8013994:	f04f 33ff 	mov.w	r3, #4294967295
 8013998:	e000      	b.n	801399c <ai_run+0x3c>
  }

  return 0;
 801399a:	2300      	movs	r3, #0
}
 801399c:	4618      	mov	r0, r3
 801399e:	3708      	adds	r7, #8
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	2000453c 	.word	0x2000453c
 80139a8:	20004540 	.word	0x20004540
 80139ac:	20004544 	.word	0x20004544
 80139b0:	0801e454 	.word	0x0801e454

080139b4 <accMagnitude>:

/* USER CODE BEGIN 2 */
float accMagnitude(float accX, float accY, float accZ) {
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b086      	sub	sp, #24
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80139be:	edc7 0a02 	vstr	s1, [r7, #8]
 80139c2:	ed87 1a01 	vstr	s2, [r7, #4]
	float result = sqrt(accX * accX + accY * accY + accZ * accZ);
 80139c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80139ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80139ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80139d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80139d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80139da:	edd7 7a01 	vldr	s15, [r7, #4]
 80139de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80139e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80139e6:	ee17 0a90 	vmov	r0, s15
 80139ea:	f7ec fdc5 	bl	8000578 <__aeabi_f2d>
 80139ee:	4602      	mov	r2, r0
 80139f0:	460b      	mov	r3, r1
 80139f2:	ec43 2b10 	vmov	d0, r2, r3
 80139f6:	f008 ff7f 	bl	801c8f8 <sqrt>
 80139fa:	ec53 2b10 	vmov	r2, r3, d0
 80139fe:	4610      	mov	r0, r2
 8013a00:	4619      	mov	r1, r3
 8013a02:	f7ed f8c1 	bl	8000b88 <__aeabi_d2f>
 8013a06:	4603      	mov	r3, r0
 8013a08:	617b      	str	r3, [r7, #20]
	return result;
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	ee07 3a90 	vmov	s15, r3
}
 8013a10:	eeb0 0a67 	vmov.f32	s0, s15
 8013a14:	3718      	adds	r7, #24
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	0000      	movs	r0, r0
 8013a1c:	0000      	movs	r0, r0
	...

08013a20 <acquire_and_process_data>:

int acquire_and_process_data(ai_float* data[])
{
 8013a20:	b5b0      	push	{r4, r5, r7, lr}
 8013a22:	b098      	sub	sp, #96	; 0x60
 8013a24:	af02      	add	r7, sp, #8
 8013a26:	6078      	str	r0, [r7, #4]
	while(buf_len < windowLength) {
 8013a28:	e166      	b.n	8013cf8 <acquire_and_process_data+0x2d8>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013a30:	48ba      	ldr	r0, [pc, #744]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013a32:	f7f0 fbbf 	bl	80041b4 <HAL_GPIO_WritePin>
				outdata[0] = 0x1e | 0x80 ; // read status register if there is new accelerometer data
 8013a36:	4bba      	ldr	r3, [pc, #744]	; (8013d20 <acquire_and_process_data+0x300>)
 8013a38:	229e      	movs	r2, #158	; 0x9e
 8013a3a:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8013a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a40:	9300      	str	r3, [sp, #0]
 8013a42:	2302      	movs	r3, #2
 8013a44:	4ab7      	ldr	r2, [pc, #732]	; (8013d24 <acquire_and_process_data+0x304>)
 8013a46:	49b6      	ldr	r1, [pc, #728]	; (8013d20 <acquire_and_process_data+0x300>)
 8013a48:	48b7      	ldr	r0, [pc, #732]	; (8013d28 <acquire_and_process_data+0x308>)
 8013a4a:	f7f6 fc11 	bl	800a270 <HAL_SPI_TransmitReceive>
				newValueAvailable = indata[1] & 0b1; //only accelerometer state
 8013a4e:	4bb5      	ldr	r3, [pc, #724]	; (8013d24 <acquire_and_process_data+0x304>)
 8013a50:	785b      	ldrb	r3, [r3, #1]
 8013a52:	f003 0301 	and.w	r3, r3, #1
 8013a56:	b2da      	uxtb	r2, r3
 8013a58:	4bb4      	ldr	r3, [pc, #720]	; (8013d2c <acquire_and_process_data+0x30c>)
 8013a5a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013a62:	48ae      	ldr	r0, [pc, #696]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013a64:	f7f0 fba6 	bl	80041b4 <HAL_GPIO_WritePin>

				if(newValueAvailable == 1) {
 8013a68:	4bb0      	ldr	r3, [pc, #704]	; (8013d2c <acquire_and_process_data+0x30c>)
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	2b01      	cmp	r3, #1
 8013a6e:	f040 8143 	bne.w	8013cf8 <acquire_and_process_data+0x2d8>
					buf_len++;
 8013a72:	4baf      	ldr	r3, [pc, #700]	; (8013d30 <acquire_and_process_data+0x310>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	3301      	adds	r3, #1
 8013a78:	4aad      	ldr	r2, [pc, #692]	; (8013d30 <acquire_and_process_data+0x310>)
 8013a7a:	6013      	str	r3, [r2, #0]

					newValueAvailable = 0;
 8013a7c:	4bab      	ldr	r3, [pc, #684]	; (8013d2c <acquire_and_process_data+0x30c>)
 8013a7e:	2200      	movs	r2, #0
 8013a80:	701a      	strb	r2, [r3, #0]

					//////////////////////////////////////////Read accelerometer measurements
					outdata[0] = 0x29 | 0x80 ; // read x, high
 8013a82:	4ba7      	ldr	r3, [pc, #668]	; (8013d20 <acquire_and_process_data+0x300>)
 8013a84:	22a9      	movs	r2, #169	; 0xa9
 8013a86:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013a88:	2200      	movs	r2, #0
 8013a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013a8e:	48a3      	ldr	r0, [pc, #652]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013a90:	f7f0 fb90 	bl	80041b4 <HAL_GPIO_WritePin>
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8013a94:	f04f 33ff 	mov.w	r3, #4294967295
 8013a98:	9300      	str	r3, [sp, #0]
 8013a9a:	2302      	movs	r3, #2
 8013a9c:	4aa1      	ldr	r2, [pc, #644]	; (8013d24 <acquire_and_process_data+0x304>)
 8013a9e:	49a0      	ldr	r1, [pc, #640]	; (8013d20 <acquire_and_process_data+0x300>)
 8013aa0:	48a1      	ldr	r0, [pc, #644]	; (8013d28 <acquire_and_process_data+0x308>)
 8013aa2:	f7f6 fbe5 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelX1 = indata[1];
 8013aa6:	4b9f      	ldr	r3, [pc, #636]	; (8013d24 <acquire_and_process_data+0x304>)
 8013aa8:	785a      	ldrb	r2, [r3, #1]
 8013aaa:	4ba2      	ldr	r3, [pc, #648]	; (8013d34 <acquire_and_process_data+0x314>)
 8013aac:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8013aae:	2201      	movs	r2, #1
 8013ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013ab4:	4899      	ldr	r0, [pc, #612]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013ab6:	f7f0 fb7d 	bl	80041b4 <HAL_GPIO_WritePin>
					outdata[0] = 0x28 | 0x80 ; // read x, low
 8013aba:	4b99      	ldr	r3, [pc, #612]	; (8013d20 <acquire_and_process_data+0x300>)
 8013abc:	22a8      	movs	r2, #168	; 0xa8
 8013abe:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013ac6:	4895      	ldr	r0, [pc, #596]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013ac8:	f7f0 fb74 	bl	80041b4 <HAL_GPIO_WritePin>
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8013acc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad0:	9300      	str	r3, [sp, #0]
 8013ad2:	2302      	movs	r3, #2
 8013ad4:	4a93      	ldr	r2, [pc, #588]	; (8013d24 <acquire_and_process_data+0x304>)
 8013ad6:	4992      	ldr	r1, [pc, #584]	; (8013d20 <acquire_and_process_data+0x300>)
 8013ad8:	4893      	ldr	r0, [pc, #588]	; (8013d28 <acquire_and_process_data+0x308>)
 8013ada:	f7f6 fbc9 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelX2 = indata[1];
 8013ade:	4b91      	ldr	r3, [pc, #580]	; (8013d24 <acquire_and_process_data+0x304>)
 8013ae0:	785a      	ldrb	r2, [r3, #1]
 8013ae2:	4b95      	ldr	r3, [pc, #596]	; (8013d38 <acquire_and_process_data+0x318>)
 8013ae4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8013ae6:	2201      	movs	r2, #1
 8013ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013aec:	488b      	ldr	r0, [pc, #556]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013aee:	f7f0 fb61 	bl	80041b4 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013af2:	2200      	movs	r2, #0
 8013af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013af8:	4888      	ldr	r0, [pc, #544]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013afa:	f7f0 fb5b 	bl	80041b4 <HAL_GPIO_WritePin>
					outdata[0] = 0x2b | 0x80 ; // read y, 0x53
 8013afe:	4b88      	ldr	r3, [pc, #544]	; (8013d20 <acquire_and_process_data+0x300>)
 8013b00:	22ab      	movs	r2, #171	; 0xab
 8013b02:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8013b04:	f04f 33ff 	mov.w	r3, #4294967295
 8013b08:	9300      	str	r3, [sp, #0]
 8013b0a:	2302      	movs	r3, #2
 8013b0c:	4a85      	ldr	r2, [pc, #532]	; (8013d24 <acquire_and_process_data+0x304>)
 8013b0e:	4984      	ldr	r1, [pc, #528]	; (8013d20 <acquire_and_process_data+0x300>)
 8013b10:	4885      	ldr	r0, [pc, #532]	; (8013d28 <acquire_and_process_data+0x308>)
 8013b12:	f7f6 fbad 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelY1 = indata[1];
 8013b16:	4b83      	ldr	r3, [pc, #524]	; (8013d24 <acquire_and_process_data+0x304>)
 8013b18:	785a      	ldrb	r2, [r3, #1]
 8013b1a:	4b88      	ldr	r3, [pc, #544]	; (8013d3c <acquire_and_process_data+0x31c>)
 8013b1c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8013b1e:	2201      	movs	r2, #1
 8013b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b24:	487d      	ldr	r0, [pc, #500]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013b26:	f7f0 fb45 	bl	80041b4 <HAL_GPIO_WritePin>
					outdata[0] = 0x2a | 0x80 ; // read y, low
 8013b2a:	4b7d      	ldr	r3, [pc, #500]	; (8013d20 <acquire_and_process_data+0x300>)
 8013b2c:	22aa      	movs	r2, #170	; 0xaa
 8013b2e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013b30:	2200      	movs	r2, #0
 8013b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b36:	4879      	ldr	r0, [pc, #484]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013b38:	f7f0 fb3c 	bl	80041b4 <HAL_GPIO_WritePin>
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8013b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b40:	9300      	str	r3, [sp, #0]
 8013b42:	2302      	movs	r3, #2
 8013b44:	4a77      	ldr	r2, [pc, #476]	; (8013d24 <acquire_and_process_data+0x304>)
 8013b46:	4976      	ldr	r1, [pc, #472]	; (8013d20 <acquire_and_process_data+0x300>)
 8013b48:	4877      	ldr	r0, [pc, #476]	; (8013d28 <acquire_and_process_data+0x308>)
 8013b4a:	f7f6 fb91 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelY2 = indata[1];
 8013b4e:	4b75      	ldr	r3, [pc, #468]	; (8013d24 <acquire_and_process_data+0x304>)
 8013b50:	785a      	ldrb	r2, [r3, #1]
 8013b52:	4b7b      	ldr	r3, [pc, #492]	; (8013d40 <acquire_and_process_data+0x320>)
 8013b54:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8013b56:	2201      	movs	r2, #1
 8013b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b5c:	486f      	ldr	r0, [pc, #444]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013b5e:	f7f0 fb29 	bl	80041b4 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013b62:	2200      	movs	r2, #0
 8013b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b68:	486c      	ldr	r0, [pc, #432]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013b6a:	f7f0 fb23 	bl	80041b4 <HAL_GPIO_WritePin>
					outdata[0] = 0x2d | 0x80 ; // read z, 0x55
 8013b6e:	4b6c      	ldr	r3, [pc, #432]	; (8013d20 <acquire_and_process_data+0x300>)
 8013b70:	22ad      	movs	r2, #173	; 0xad
 8013b72:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8013b74:	f04f 33ff 	mov.w	r3, #4294967295
 8013b78:	9300      	str	r3, [sp, #0]
 8013b7a:	2302      	movs	r3, #2
 8013b7c:	4a69      	ldr	r2, [pc, #420]	; (8013d24 <acquire_and_process_data+0x304>)
 8013b7e:	4968      	ldr	r1, [pc, #416]	; (8013d20 <acquire_and_process_data+0x300>)
 8013b80:	4869      	ldr	r0, [pc, #420]	; (8013d28 <acquire_and_process_data+0x308>)
 8013b82:	f7f6 fb75 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelZ1 = indata[1];
 8013b86:	4b67      	ldr	r3, [pc, #412]	; (8013d24 <acquire_and_process_data+0x304>)
 8013b88:	785a      	ldrb	r2, [r3, #1]
 8013b8a:	4b6e      	ldr	r3, [pc, #440]	; (8013d44 <acquire_and_process_data+0x324>)
 8013b8c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8013b8e:	2201      	movs	r2, #1
 8013b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b94:	4861      	ldr	r0, [pc, #388]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013b96:	f7f0 fb0d 	bl	80041b4 <HAL_GPIO_WritePin>
					outdata[0] = 0x2c | 0x80 ; // read z, low
 8013b9a:	4b61      	ldr	r3, [pc, #388]	; (8013d20 <acquire_and_process_data+0x300>)
 8013b9c:	22ac      	movs	r2, #172	; 0xac
 8013b9e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013ba6:	485d      	ldr	r0, [pc, #372]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013ba8:	f7f0 fb04 	bl	80041b4 <HAL_GPIO_WritePin>
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8013bac:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb0:	9300      	str	r3, [sp, #0]
 8013bb2:	2302      	movs	r3, #2
 8013bb4:	4a5b      	ldr	r2, [pc, #364]	; (8013d24 <acquire_and_process_data+0x304>)
 8013bb6:	495a      	ldr	r1, [pc, #360]	; (8013d20 <acquire_and_process_data+0x300>)
 8013bb8:	485b      	ldr	r0, [pc, #364]	; (8013d28 <acquire_and_process_data+0x308>)
 8013bba:	f7f6 fb59 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelZ2 = indata[1];
 8013bbe:	4b59      	ldr	r3, [pc, #356]	; (8013d24 <acquire_and_process_data+0x304>)
 8013bc0:	785a      	ldrb	r2, [r3, #1]
 8013bc2:	4b61      	ldr	r3, [pc, #388]	; (8013d48 <acquire_and_process_data+0x328>)
 8013bc4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013bcc:	4853      	ldr	r0, [pc, #332]	; (8013d1c <acquire_and_process_data+0x2fc>)
 8013bce:	f7f0 faf1 	bl	80041b4 <HAL_GPIO_WritePin>
					int16_t AccelY;
					int32_t AccelY_mg;
					int16_t AccelZ;
					int32_t AccelZ_mg;

					AccelX= ((int16_t)AccelX1 <<8 ) | AccelX2;
 8013bd2:	4b58      	ldr	r3, [pc, #352]	; (8013d34 <acquire_and_process_data+0x314>)
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	021b      	lsls	r3, r3, #8
 8013bd8:	b21a      	sxth	r2, r3
 8013bda:	4b57      	ldr	r3, [pc, #348]	; (8013d38 <acquire_and_process_data+0x318>)
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	b21b      	sxth	r3, r3
 8013be0:	4313      	orrs	r3, r2
 8013be2:	857b      	strh	r3, [r7, #42]	; 0x2a
					AccelX_mg= (int32_t)((float)AccelX * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 8013be4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8013be8:	ee07 3a90 	vmov	s15, r3
 8013bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bf0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8013d4c <acquire_and_process_data+0x32c>
 8013bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bfc:	ee17 3a90 	vmov	r3, s15
 8013c00:	627b      	str	r3, [r7, #36]	; 0x24
					AccelY= ((int16_t)AccelY1 <<8 ) | AccelY2;
 8013c02:	4b4e      	ldr	r3, [pc, #312]	; (8013d3c <acquire_and_process_data+0x31c>)
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	021b      	lsls	r3, r3, #8
 8013c08:	b21a      	sxth	r2, r3
 8013c0a:	4b4d      	ldr	r3, [pc, #308]	; (8013d40 <acquire_and_process_data+0x320>)
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	b21b      	sxth	r3, r3
 8013c10:	4313      	orrs	r3, r2
 8013c12:	847b      	strh	r3, [r7, #34]	; 0x22
					AccelY_mg= (int32_t)((float)AccelY * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 8013c14:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013c18:	ee07 3a90 	vmov	s15, r3
 8013c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c20:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013d4c <acquire_and_process_data+0x32c>
 8013c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c2c:	ee17 3a90 	vmov	r3, s15
 8013c30:	61fb      	str	r3, [r7, #28]
					AccelZ= ((int16_t)AccelZ1 <<8 ) | AccelZ2;
 8013c32:	4b44      	ldr	r3, [pc, #272]	; (8013d44 <acquire_and_process_data+0x324>)
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	021b      	lsls	r3, r3, #8
 8013c38:	b21a      	sxth	r2, r3
 8013c3a:	4b43      	ldr	r3, [pc, #268]	; (8013d48 <acquire_and_process_data+0x328>)
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	b21b      	sxth	r3, r3
 8013c40:	4313      	orrs	r3, r2
 8013c42:	837b      	strh	r3, [r7, #26]
					AccelZ_mg= (int32_t)((float)AccelZ * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 8013c44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013c48:	ee07 3a90 	vmov	s15, r3
 8013c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c50:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8013d4c <acquire_and_process_data+0x32c>
 8013c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c5c:	ee17 3a90 	vmov	r3, s15
 8013c60:	617b      	str	r3, [r7, #20]

					float AccelX_inG = AccelX_mg * 0.001f;
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c64:	ee07 3a90 	vmov	s15, r3
 8013c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c6c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013d50 <acquire_and_process_data+0x330>
 8013c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c74:	edc7 7a04 	vstr	s15, [r7, #16]
					float AccelY_inG = AccelY_mg * 0.001f;
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	ee07 3a90 	vmov	s15, r3
 8013c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c82:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013d50 <acquire_and_process_data+0x330>
 8013c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c8a:	edc7 7a03 	vstr	s15, [r7, #12]
					float AccelZ_inG = AccelZ_mg * 0.001f;
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	ee07 3a90 	vmov	s15, r3
 8013c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c98:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8013d50 <acquire_and_process_data+0x330>
 8013c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ca0:	edc7 7a02 	vstr	s15, [r7, #8]


					bufAccX[buf_len - 1] = AccelX_inG;
 8013ca4:	4b22      	ldr	r3, [pc, #136]	; (8013d30 <acquire_and_process_data+0x310>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	3b01      	subs	r3, #1
 8013caa:	4a2a      	ldr	r2, [pc, #168]	; (8013d54 <acquire_and_process_data+0x334>)
 8013cac:	009b      	lsls	r3, r3, #2
 8013cae:	4413      	add	r3, r2
 8013cb0:	693a      	ldr	r2, [r7, #16]
 8013cb2:	601a      	str	r2, [r3, #0]
					bufAccY[buf_len - 1] = AccelY_inG;
 8013cb4:	4b1e      	ldr	r3, [pc, #120]	; (8013d30 <acquire_and_process_data+0x310>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	3b01      	subs	r3, #1
 8013cba:	4a27      	ldr	r2, [pc, #156]	; (8013d58 <acquire_and_process_data+0x338>)
 8013cbc:	009b      	lsls	r3, r3, #2
 8013cbe:	4413      	add	r3, r2
 8013cc0:	68fa      	ldr	r2, [r7, #12]
 8013cc2:	601a      	str	r2, [r3, #0]
					bufAccZ[buf_len - 1] = AccelZ_inG;
 8013cc4:	4b1a      	ldr	r3, [pc, #104]	; (8013d30 <acquire_and_process_data+0x310>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	3b01      	subs	r3, #1
 8013cca:	4a24      	ldr	r2, [pc, #144]	; (8013d5c <acquire_and_process_data+0x33c>)
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	4413      	add	r3, r2
 8013cd0:	68ba      	ldr	r2, [r7, #8]
 8013cd2:	601a      	str	r2, [r3, #0]

					bufAccMagnitude[buf_len - 1] = accMagnitude(AccelX_inG, AccelY_inG, AccelZ_inG);
 8013cd4:	4b16      	ldr	r3, [pc, #88]	; (8013d30 <acquire_and_process_data+0x310>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	1e5c      	subs	r4, r3, #1
 8013cda:	ed97 1a02 	vldr	s2, [r7, #8]
 8013cde:	edd7 0a03 	vldr	s1, [r7, #12]
 8013ce2:	ed97 0a04 	vldr	s0, [r7, #16]
 8013ce6:	f7ff fe65 	bl	80139b4 <accMagnitude>
 8013cea:	eef0 7a40 	vmov.f32	s15, s0
 8013cee:	4a1c      	ldr	r2, [pc, #112]	; (8013d60 <acquire_and_process_data+0x340>)
 8013cf0:	00a3      	lsls	r3, r4, #2
 8013cf2:	4413      	add	r3, r2
 8013cf4:	edc3 7a00 	vstr	s15, [r3]
	while(buf_len < windowLength) {
 8013cf8:	4b1a      	ldr	r3, [pc, #104]	; (8013d64 <acquire_and_process_data+0x344>)
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	4b0c      	ldr	r3, [pc, #48]	; (8013d30 <acquire_and_process_data+0x310>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	f73f ae91 	bgt.w	8013a2a <acquire_and_process_data+0xa>
				}
			}

			if(buf_len == windowLength) {
 8013d08:	4b16      	ldr	r3, [pc, #88]	; (8013d64 <acquire_and_process_data+0x344>)
 8013d0a:	781b      	ldrb	r3, [r3, #0]
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	4b08      	ldr	r3, [pc, #32]	; (8013d30 <acquire_and_process_data+0x310>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	f040 8723 	bne.w	8014b5e <acquire_and_process_data+0x113e>
 8013d18:	e026      	b.n	8013d68 <acquire_and_process_data+0x348>
 8013d1a:	bf00      	nop
 8013d1c:	48001000 	.word	0x48001000
 8013d20:	20003754 	.word	0x20003754
 8013d24:	20003750 	.word	0x20003750
 8013d28:	20000ca0 	.word	0x20000ca0
 8013d2c:	20003757 	.word	0x20003757
 8013d30:	2000374c 	.word	0x2000374c
 8013d34:	20003758 	.word	0x20003758
 8013d38:	2000375b 	.word	0x2000375b
 8013d3c:	20003759 	.word	0x20003759
 8013d40:	2000375c 	.word	0x2000375c
 8013d44:	2000375a 	.word	0x2000375a
 8013d48:	2000375d 	.word	0x2000375d
 8013d4c:	3df9db23 	.word	0x3df9db23
 8013d50:	3a83126f 	.word	0x3a83126f
 8013d54:	2000308c 	.word	0x2000308c
 8013d58:	2000322c 	.word	0x2000322c
 8013d5c:	200033cc 	.word	0x200033cc
 8013d60:	2000356c 	.word	0x2000356c
 8013d64:	2000018e 	.word	0x2000018e
				buf_len = windowOverlap;
 8013d68:	4b2f      	ldr	r3, [pc, #188]	; (8013e28 <acquire_and_process_data+0x408>)
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	4b2f      	ldr	r3, [pc, #188]	; (8013e2c <acquire_and_process_data+0x40c>)
 8013d70:	601a      	str	r2, [r3, #0]

				accX_Mean = 0;
 8013d72:	4b2f      	ldr	r3, [pc, #188]	; (8013e30 <acquire_and_process_data+0x410>)
 8013d74:	f04f 0200 	mov.w	r2, #0
 8013d78:	601a      	str	r2, [r3, #0]
				accX_STD = 0;
 8013d7a:	4b2e      	ldr	r3, [pc, #184]	; (8013e34 <acquire_and_process_data+0x414>)
 8013d7c:	f04f 0200 	mov.w	r2, #0
 8013d80:	601a      	str	r2, [r3, #0]
				accX_MinMax = 0;
 8013d82:	4b2d      	ldr	r3, [pc, #180]	; (8013e38 <acquire_and_process_data+0x418>)
 8013d84:	f04f 0200 	mov.w	r2, #0
 8013d88:	601a      	str	r2, [r3, #0]
				accX_RMS = 0;
 8013d8a:	4b2c      	ldr	r3, [pc, #176]	; (8013e3c <acquire_and_process_data+0x41c>)
 8013d8c:	f04f 0200 	mov.w	r2, #0
 8013d90:	601a      	str	r2, [r3, #0]

				accY_Mean = 0;
 8013d92:	4b2b      	ldr	r3, [pc, #172]	; (8013e40 <acquire_and_process_data+0x420>)
 8013d94:	f04f 0200 	mov.w	r2, #0
 8013d98:	601a      	str	r2, [r3, #0]
				accY_STD = 0;
 8013d9a:	4b2a      	ldr	r3, [pc, #168]	; (8013e44 <acquire_and_process_data+0x424>)
 8013d9c:	f04f 0200 	mov.w	r2, #0
 8013da0:	601a      	str	r2, [r3, #0]
				accY_MinMax = 0;
 8013da2:	4b29      	ldr	r3, [pc, #164]	; (8013e48 <acquire_and_process_data+0x428>)
 8013da4:	f04f 0200 	mov.w	r2, #0
 8013da8:	601a      	str	r2, [r3, #0]
				accY_RMS = 0;
 8013daa:	4b28      	ldr	r3, [pc, #160]	; (8013e4c <acquire_and_process_data+0x42c>)
 8013dac:	f04f 0200 	mov.w	r2, #0
 8013db0:	601a      	str	r2, [r3, #0]

				accZ_Mean = 0;
 8013db2:	4b27      	ldr	r3, [pc, #156]	; (8013e50 <acquire_and_process_data+0x430>)
 8013db4:	f04f 0200 	mov.w	r2, #0
 8013db8:	601a      	str	r2, [r3, #0]
				accZ_STD = 0;
 8013dba:	4b26      	ldr	r3, [pc, #152]	; (8013e54 <acquire_and_process_data+0x434>)
 8013dbc:	f04f 0200 	mov.w	r2, #0
 8013dc0:	601a      	str	r2, [r3, #0]
				accZ_MinMax = 0;
 8013dc2:	4b25      	ldr	r3, [pc, #148]	; (8013e58 <acquire_and_process_data+0x438>)
 8013dc4:	f04f 0200 	mov.w	r2, #0
 8013dc8:	601a      	str	r2, [r3, #0]
				accZ_RMS = 0;
 8013dca:	4b24      	ldr	r3, [pc, #144]	; (8013e5c <acquire_and_process_data+0x43c>)
 8013dcc:	f04f 0200 	mov.w	r2, #0
 8013dd0:	601a      	str	r2, [r3, #0]

				accMagnitude_Mean = 0;
 8013dd2:	4b23      	ldr	r3, [pc, #140]	; (8013e60 <acquire_and_process_data+0x440>)
 8013dd4:	f04f 0200 	mov.w	r2, #0
 8013dd8:	601a      	str	r2, [r3, #0]
				accMagnitude_STD = 0;
 8013dda:	4b22      	ldr	r3, [pc, #136]	; (8013e64 <acquire_and_process_data+0x444>)
 8013ddc:	f04f 0200 	mov.w	r2, #0
 8013de0:	601a      	str	r2, [r3, #0]
				accMagnitude_MinMax = 0;
 8013de2:	4b21      	ldr	r3, [pc, #132]	; (8013e68 <acquire_and_process_data+0x448>)
 8013de4:	f04f 0200 	mov.w	r2, #0
 8013de8:	601a      	str	r2, [r3, #0]
				accMagnitude_RMS = 0;
 8013dea:	4b20      	ldr	r3, [pc, #128]	; (8013e6c <acquire_and_process_data+0x44c>)
 8013dec:	f04f 0200 	mov.w	r2, #0
 8013df0:	601a      	str	r2, [r3, #0]


				float minX = bufAccX[0];
 8013df2:	4b1f      	ldr	r3, [pc, #124]	; (8013e70 <acquire_and_process_data+0x450>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	657b      	str	r3, [r7, #84]	; 0x54
				float maxX = bufAccX[0];
 8013df8:	4b1d      	ldr	r3, [pc, #116]	; (8013e70 <acquire_and_process_data+0x450>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	653b      	str	r3, [r7, #80]	; 0x50
				float minY = bufAccY[0];
 8013dfe:	4b1d      	ldr	r3, [pc, #116]	; (8013e74 <acquire_and_process_data+0x454>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	64fb      	str	r3, [r7, #76]	; 0x4c
				float maxY = bufAccY[0];
 8013e04:	4b1b      	ldr	r3, [pc, #108]	; (8013e74 <acquire_and_process_data+0x454>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	64bb      	str	r3, [r7, #72]	; 0x48
				float minZ = bufAccZ[0];
 8013e0a:	4b1b      	ldr	r3, [pc, #108]	; (8013e78 <acquire_and_process_data+0x458>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	647b      	str	r3, [r7, #68]	; 0x44
				float maxZ = bufAccZ[0];
 8013e10:	4b19      	ldr	r3, [pc, #100]	; (8013e78 <acquire_and_process_data+0x458>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	643b      	str	r3, [r7, #64]	; 0x40
				float minMagnitude = bufAccMagnitude[0];
 8013e16:	4b19      	ldr	r3, [pc, #100]	; (8013e7c <acquire_and_process_data+0x45c>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
				float maxMagnitude = bufAccMagnitude[0];
 8013e1c:	4b17      	ldr	r3, [pc, #92]	; (8013e7c <acquire_and_process_data+0x45c>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	63bb      	str	r3, [r7, #56]	; 0x38


				for (int i = 0; i < windowLength; i++) {
 8013e22:	2300      	movs	r3, #0
 8013e24:	637b      	str	r3, [r7, #52]	; 0x34
 8013e26:	e196      	b.n	8014156 <acquire_and_process_data+0x736>
 8013e28:	2000018f 	.word	0x2000018f
 8013e2c:	2000374c 	.word	0x2000374c
 8013e30:	2000370c 	.word	0x2000370c
 8013e34:	20003710 	.word	0x20003710
 8013e38:	20003714 	.word	0x20003714
 8013e3c:	20003718 	.word	0x20003718
 8013e40:	2000371c 	.word	0x2000371c
 8013e44:	20003720 	.word	0x20003720
 8013e48:	20003724 	.word	0x20003724
 8013e4c:	20003728 	.word	0x20003728
 8013e50:	2000372c 	.word	0x2000372c
 8013e54:	20003730 	.word	0x20003730
 8013e58:	20003734 	.word	0x20003734
 8013e5c:	20003738 	.word	0x20003738
 8013e60:	2000373c 	.word	0x2000373c
 8013e64:	20003740 	.word	0x20003740
 8013e68:	20003744 	.word	0x20003744
 8013e6c:	20003748 	.word	0x20003748
 8013e70:	2000308c 	.word	0x2000308c
 8013e74:	2000322c 	.word	0x2000322c
 8013e78:	200033cc 	.word	0x200033cc
 8013e7c:	2000356c 	.word	0x2000356c

					accX_Mean += bufAccX[i];
 8013e80:	4abd      	ldr	r2, [pc, #756]	; (8014178 <acquire_and_process_data+0x758>)
 8013e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e84:	009b      	lsls	r3, r3, #2
 8013e86:	4413      	add	r3, r2
 8013e88:	ed93 7a00 	vldr	s14, [r3]
 8013e8c:	4bbb      	ldr	r3, [pc, #748]	; (801417c <acquire_and_process_data+0x75c>)
 8013e8e:	edd3 7a00 	vldr	s15, [r3]
 8013e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e96:	4bb9      	ldr	r3, [pc, #740]	; (801417c <acquire_and_process_data+0x75c>)
 8013e98:	edc3 7a00 	vstr	s15, [r3]
					if(minX > bufAccX[i])
 8013e9c:	4ab6      	ldr	r2, [pc, #728]	; (8014178 <acquire_and_process_data+0x758>)
 8013e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ea0:	009b      	lsls	r3, r3, #2
 8013ea2:	4413      	add	r3, r2
 8013ea4:	edd3 7a00 	vldr	s15, [r3]
 8013ea8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8013eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb4:	dd05      	ble.n	8013ec2 <acquire_and_process_data+0x4a2>
						minX = bufAccX[i];
 8013eb6:	4ab0      	ldr	r2, [pc, #704]	; (8014178 <acquire_and_process_data+0x758>)
 8013eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eba:	009b      	lsls	r3, r3, #2
 8013ebc:	4413      	add	r3, r2
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	657b      	str	r3, [r7, #84]	; 0x54
					if(maxX < bufAccX[i])
 8013ec2:	4aad      	ldr	r2, [pc, #692]	; (8014178 <acquire_and_process_data+0x758>)
 8013ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	4413      	add	r3, r2
 8013eca:	edd3 7a00 	vldr	s15, [r3]
 8013ece:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eda:	d505      	bpl.n	8013ee8 <acquire_and_process_data+0x4c8>
						maxX = bufAccX[i];
 8013edc:	4aa6      	ldr	r2, [pc, #664]	; (8014178 <acquire_and_process_data+0x758>)
 8013ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	4413      	add	r3, r2
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	653b      	str	r3, [r7, #80]	; 0x50
					accX_RMS += pow(bufAccX[i], 2);
 8013ee8:	4aa3      	ldr	r2, [pc, #652]	; (8014178 <acquire_and_process_data+0x758>)
 8013eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eec:	009b      	lsls	r3, r3, #2
 8013eee:	4413      	add	r3, r2
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7ec fb40 	bl	8000578 <__aeabi_f2d>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	460b      	mov	r3, r1
 8013efc:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 8014170 <acquire_and_process_data+0x750>
 8013f00:	ec43 2b10 	vmov	d0, r2, r3
 8013f04:	f008 fc88 	bl	801c818 <pow>
 8013f08:	ec55 4b10 	vmov	r4, r5, d0
 8013f0c:	4b9c      	ldr	r3, [pc, #624]	; (8014180 <acquire_and_process_data+0x760>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7ec fb31 	bl	8000578 <__aeabi_f2d>
 8013f16:	4602      	mov	r2, r0
 8013f18:	460b      	mov	r3, r1
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	4629      	mov	r1, r5
 8013f1e:	f7ec f9cd 	bl	80002bc <__adddf3>
 8013f22:	4602      	mov	r2, r0
 8013f24:	460b      	mov	r3, r1
 8013f26:	4610      	mov	r0, r2
 8013f28:	4619      	mov	r1, r3
 8013f2a:	f7ec fe2d 	bl	8000b88 <__aeabi_d2f>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	4a93      	ldr	r2, [pc, #588]	; (8014180 <acquire_and_process_data+0x760>)
 8013f32:	6013      	str	r3, [r2, #0]

					accY_Mean += bufAccY[i];
 8013f34:	4a93      	ldr	r2, [pc, #588]	; (8014184 <acquire_and_process_data+0x764>)
 8013f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f38:	009b      	lsls	r3, r3, #2
 8013f3a:	4413      	add	r3, r2
 8013f3c:	ed93 7a00 	vldr	s14, [r3]
 8013f40:	4b91      	ldr	r3, [pc, #580]	; (8014188 <acquire_and_process_data+0x768>)
 8013f42:	edd3 7a00 	vldr	s15, [r3]
 8013f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f4a:	4b8f      	ldr	r3, [pc, #572]	; (8014188 <acquire_and_process_data+0x768>)
 8013f4c:	edc3 7a00 	vstr	s15, [r3]
					if(minY > bufAccY[i])
 8013f50:	4a8c      	ldr	r2, [pc, #560]	; (8014184 <acquire_and_process_data+0x764>)
 8013f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f54:	009b      	lsls	r3, r3, #2
 8013f56:	4413      	add	r3, r2
 8013f58:	edd3 7a00 	vldr	s15, [r3]
 8013f5c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f68:	dd05      	ble.n	8013f76 <acquire_and_process_data+0x556>
						minY = bufAccY[i];
 8013f6a:	4a86      	ldr	r2, [pc, #536]	; (8014184 <acquire_and_process_data+0x764>)
 8013f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f6e:	009b      	lsls	r3, r3, #2
 8013f70:	4413      	add	r3, r2
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(maxY < bufAccY[i])
 8013f76:	4a83      	ldr	r2, [pc, #524]	; (8014184 <acquire_and_process_data+0x764>)
 8013f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f7a:	009b      	lsls	r3, r3, #2
 8013f7c:	4413      	add	r3, r2
 8013f7e:	edd3 7a00 	vldr	s15, [r3]
 8013f82:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8e:	d505      	bpl.n	8013f9c <acquire_and_process_data+0x57c>
						maxY = bufAccY[i];
 8013f90:	4a7c      	ldr	r2, [pc, #496]	; (8014184 <acquire_and_process_data+0x764>)
 8013f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f94:	009b      	lsls	r3, r3, #2
 8013f96:	4413      	add	r3, r2
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	64bb      	str	r3, [r7, #72]	; 0x48
					accY_RMS += pow(bufAccY[i], 2);
 8013f9c:	4a79      	ldr	r2, [pc, #484]	; (8014184 <acquire_and_process_data+0x764>)
 8013f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fa0:	009b      	lsls	r3, r3, #2
 8013fa2:	4413      	add	r3, r2
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7ec fae6 	bl	8000578 <__aeabi_f2d>
 8013fac:	4602      	mov	r2, r0
 8013fae:	460b      	mov	r3, r1
 8013fb0:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8014170 <acquire_and_process_data+0x750>
 8013fb4:	ec43 2b10 	vmov	d0, r2, r3
 8013fb8:	f008 fc2e 	bl	801c818 <pow>
 8013fbc:	ec55 4b10 	vmov	r4, r5, d0
 8013fc0:	4b72      	ldr	r3, [pc, #456]	; (801418c <acquire_and_process_data+0x76c>)
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7ec fad7 	bl	8000578 <__aeabi_f2d>
 8013fca:	4602      	mov	r2, r0
 8013fcc:	460b      	mov	r3, r1
 8013fce:	4620      	mov	r0, r4
 8013fd0:	4629      	mov	r1, r5
 8013fd2:	f7ec f973 	bl	80002bc <__adddf3>
 8013fd6:	4602      	mov	r2, r0
 8013fd8:	460b      	mov	r3, r1
 8013fda:	4610      	mov	r0, r2
 8013fdc:	4619      	mov	r1, r3
 8013fde:	f7ec fdd3 	bl	8000b88 <__aeabi_d2f>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	4a69      	ldr	r2, [pc, #420]	; (801418c <acquire_and_process_data+0x76c>)
 8013fe6:	6013      	str	r3, [r2, #0]

					accZ_Mean += bufAccZ[i];
 8013fe8:	4a69      	ldr	r2, [pc, #420]	; (8014190 <acquire_and_process_data+0x770>)
 8013fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fec:	009b      	lsls	r3, r3, #2
 8013fee:	4413      	add	r3, r2
 8013ff0:	ed93 7a00 	vldr	s14, [r3]
 8013ff4:	4b67      	ldr	r3, [pc, #412]	; (8014194 <acquire_and_process_data+0x774>)
 8013ff6:	edd3 7a00 	vldr	s15, [r3]
 8013ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ffe:	4b65      	ldr	r3, [pc, #404]	; (8014194 <acquire_and_process_data+0x774>)
 8014000:	edc3 7a00 	vstr	s15, [r3]
					if(minZ > bufAccZ[i])
 8014004:	4a62      	ldr	r2, [pc, #392]	; (8014190 <acquire_and_process_data+0x770>)
 8014006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014008:	009b      	lsls	r3, r3, #2
 801400a:	4413      	add	r3, r2
 801400c:	edd3 7a00 	vldr	s15, [r3]
 8014010:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8014014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401c:	dd05      	ble.n	801402a <acquire_and_process_data+0x60a>
						minZ = bufAccZ[i];
 801401e:	4a5c      	ldr	r2, [pc, #368]	; (8014190 <acquire_and_process_data+0x770>)
 8014020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014022:	009b      	lsls	r3, r3, #2
 8014024:	4413      	add	r3, r2
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	647b      	str	r3, [r7, #68]	; 0x44
					if(maxZ < bufAccZ[i])
 801402a:	4a59      	ldr	r2, [pc, #356]	; (8014190 <acquire_and_process_data+0x770>)
 801402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801402e:	009b      	lsls	r3, r3, #2
 8014030:	4413      	add	r3, r2
 8014032:	edd3 7a00 	vldr	s15, [r3]
 8014036:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801403a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014042:	d505      	bpl.n	8014050 <acquire_and_process_data+0x630>
						maxZ = bufAccZ[i];
 8014044:	4a52      	ldr	r2, [pc, #328]	; (8014190 <acquire_and_process_data+0x770>)
 8014046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014048:	009b      	lsls	r3, r3, #2
 801404a:	4413      	add	r3, r2
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	643b      	str	r3, [r7, #64]	; 0x40
					accZ_RMS += pow(bufAccZ[i], 2);
 8014050:	4a4f      	ldr	r2, [pc, #316]	; (8014190 <acquire_and_process_data+0x770>)
 8014052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014054:	009b      	lsls	r3, r3, #2
 8014056:	4413      	add	r3, r2
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4618      	mov	r0, r3
 801405c:	f7ec fa8c 	bl	8000578 <__aeabi_f2d>
 8014060:	4602      	mov	r2, r0
 8014062:	460b      	mov	r3, r1
 8014064:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8014170 <acquire_and_process_data+0x750>
 8014068:	ec43 2b10 	vmov	d0, r2, r3
 801406c:	f008 fbd4 	bl	801c818 <pow>
 8014070:	ec55 4b10 	vmov	r4, r5, d0
 8014074:	4b48      	ldr	r3, [pc, #288]	; (8014198 <acquire_and_process_data+0x778>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4618      	mov	r0, r3
 801407a:	f7ec fa7d 	bl	8000578 <__aeabi_f2d>
 801407e:	4602      	mov	r2, r0
 8014080:	460b      	mov	r3, r1
 8014082:	4620      	mov	r0, r4
 8014084:	4629      	mov	r1, r5
 8014086:	f7ec f919 	bl	80002bc <__adddf3>
 801408a:	4602      	mov	r2, r0
 801408c:	460b      	mov	r3, r1
 801408e:	4610      	mov	r0, r2
 8014090:	4619      	mov	r1, r3
 8014092:	f7ec fd79 	bl	8000b88 <__aeabi_d2f>
 8014096:	4603      	mov	r3, r0
 8014098:	4a3f      	ldr	r2, [pc, #252]	; (8014198 <acquire_and_process_data+0x778>)
 801409a:	6013      	str	r3, [r2, #0]

					accMagnitude_Mean += bufAccMagnitude[i];
 801409c:	4a3f      	ldr	r2, [pc, #252]	; (801419c <acquire_and_process_data+0x77c>)
 801409e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140a0:	009b      	lsls	r3, r3, #2
 80140a2:	4413      	add	r3, r2
 80140a4:	ed93 7a00 	vldr	s14, [r3]
 80140a8:	4b3d      	ldr	r3, [pc, #244]	; (80141a0 <acquire_and_process_data+0x780>)
 80140aa:	edd3 7a00 	vldr	s15, [r3]
 80140ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140b2:	4b3b      	ldr	r3, [pc, #236]	; (80141a0 <acquire_and_process_data+0x780>)
 80140b4:	edc3 7a00 	vstr	s15, [r3]
					if(minMagnitude > bufAccMagnitude[i])
 80140b8:	4a38      	ldr	r2, [pc, #224]	; (801419c <acquire_and_process_data+0x77c>)
 80140ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140bc:	009b      	lsls	r3, r3, #2
 80140be:	4413      	add	r3, r2
 80140c0:	edd3 7a00 	vldr	s15, [r3]
 80140c4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80140c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d0:	dd05      	ble.n	80140de <acquire_and_process_data+0x6be>
						minMagnitude = bufAccMagnitude[i];
 80140d2:	4a32      	ldr	r2, [pc, #200]	; (801419c <acquire_and_process_data+0x77c>)
 80140d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	4413      	add	r3, r2
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	63fb      	str	r3, [r7, #60]	; 0x3c
					if(maxMagnitude < bufAccMagnitude[i])
 80140de:	4a2f      	ldr	r2, [pc, #188]	; (801419c <acquire_and_process_data+0x77c>)
 80140e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140e2:	009b      	lsls	r3, r3, #2
 80140e4:	4413      	add	r3, r2
 80140e6:	edd3 7a00 	vldr	s15, [r3]
 80140ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80140ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f6:	d505      	bpl.n	8014104 <acquire_and_process_data+0x6e4>
						maxMagnitude = bufAccMagnitude[i];
 80140f8:	4a28      	ldr	r2, [pc, #160]	; (801419c <acquire_and_process_data+0x77c>)
 80140fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140fc:	009b      	lsls	r3, r3, #2
 80140fe:	4413      	add	r3, r2
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	63bb      	str	r3, [r7, #56]	; 0x38
					accMagnitude_RMS += pow(bufAccMagnitude[i], 2);
 8014104:	4a25      	ldr	r2, [pc, #148]	; (801419c <acquire_and_process_data+0x77c>)
 8014106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014108:	009b      	lsls	r3, r3, #2
 801410a:	4413      	add	r3, r2
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	4618      	mov	r0, r3
 8014110:	f7ec fa32 	bl	8000578 <__aeabi_f2d>
 8014114:	4602      	mov	r2, r0
 8014116:	460b      	mov	r3, r1
 8014118:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8014170 <acquire_and_process_data+0x750>
 801411c:	ec43 2b10 	vmov	d0, r2, r3
 8014120:	f008 fb7a 	bl	801c818 <pow>
 8014124:	ec55 4b10 	vmov	r4, r5, d0
 8014128:	4b1e      	ldr	r3, [pc, #120]	; (80141a4 <acquire_and_process_data+0x784>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	4618      	mov	r0, r3
 801412e:	f7ec fa23 	bl	8000578 <__aeabi_f2d>
 8014132:	4602      	mov	r2, r0
 8014134:	460b      	mov	r3, r1
 8014136:	4620      	mov	r0, r4
 8014138:	4629      	mov	r1, r5
 801413a:	f7ec f8bf 	bl	80002bc <__adddf3>
 801413e:	4602      	mov	r2, r0
 8014140:	460b      	mov	r3, r1
 8014142:	4610      	mov	r0, r2
 8014144:	4619      	mov	r1, r3
 8014146:	f7ec fd1f 	bl	8000b88 <__aeabi_d2f>
 801414a:	4603      	mov	r3, r0
 801414c:	4a15      	ldr	r2, [pc, #84]	; (80141a4 <acquire_and_process_data+0x784>)
 801414e:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < windowLength; i++) {
 8014150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014152:	3301      	adds	r3, #1
 8014154:	637b      	str	r3, [r7, #52]	; 0x34
 8014156:	4b14      	ldr	r3, [pc, #80]	; (80141a8 <acquire_and_process_data+0x788>)
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	461a      	mov	r2, r3
 801415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801415e:	4293      	cmp	r3, r2
 8014160:	f6ff ae8e 	blt.w	8013e80 <acquire_and_process_data+0x460>

				}

				accX_Mean /= windowLength;
 8014164:	4b05      	ldr	r3, [pc, #20]	; (801417c <acquire_and_process_data+0x75c>)
 8014166:	edd3 6a00 	vldr	s13, [r3]
 801416a:	e01f      	b.n	80141ac <acquire_and_process_data+0x78c>
 801416c:	f3af 8000 	nop.w
 8014170:	00000000 	.word	0x00000000
 8014174:	40000000 	.word	0x40000000
 8014178:	2000308c 	.word	0x2000308c
 801417c:	2000370c 	.word	0x2000370c
 8014180:	20003718 	.word	0x20003718
 8014184:	2000322c 	.word	0x2000322c
 8014188:	2000371c 	.word	0x2000371c
 801418c:	20003728 	.word	0x20003728
 8014190:	200033cc 	.word	0x200033cc
 8014194:	2000372c 	.word	0x2000372c
 8014198:	20003738 	.word	0x20003738
 801419c:	2000356c 	.word	0x2000356c
 80141a0:	2000373c 	.word	0x2000373c
 80141a4:	20003748 	.word	0x20003748
 80141a8:	2000018e 	.word	0x2000018e
 80141ac:	4b69      	ldr	r3, [pc, #420]	; (8014354 <acquire_and_process_data+0x934>)
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	ee07 3a90 	vmov	s15, r3
 80141b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80141b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141bc:	4b66      	ldr	r3, [pc, #408]	; (8014358 <acquire_and_process_data+0x938>)
 80141be:	edc3 7a00 	vstr	s15, [r3]
				accX_MinMax = maxX - minX;
 80141c2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80141c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80141ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141ce:	4b63      	ldr	r3, [pc, #396]	; (801435c <acquire_and_process_data+0x93c>)
 80141d0:	edc3 7a00 	vstr	s15, [r3]
				accX_RMS = sqrt(accX_RMS/windowLength);
 80141d4:	4b62      	ldr	r3, [pc, #392]	; (8014360 <acquire_and_process_data+0x940>)
 80141d6:	ed93 7a00 	vldr	s14, [r3]
 80141da:	4b5e      	ldr	r3, [pc, #376]	; (8014354 <acquire_and_process_data+0x934>)
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	ee07 3a90 	vmov	s15, r3
 80141e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80141ea:	ee16 0a90 	vmov	r0, s13
 80141ee:	f7ec f9c3 	bl	8000578 <__aeabi_f2d>
 80141f2:	4602      	mov	r2, r0
 80141f4:	460b      	mov	r3, r1
 80141f6:	ec43 2b10 	vmov	d0, r2, r3
 80141fa:	f008 fb7d 	bl	801c8f8 <sqrt>
 80141fe:	ec53 2b10 	vmov	r2, r3, d0
 8014202:	4610      	mov	r0, r2
 8014204:	4619      	mov	r1, r3
 8014206:	f7ec fcbf 	bl	8000b88 <__aeabi_d2f>
 801420a:	4603      	mov	r3, r0
 801420c:	4a54      	ldr	r2, [pc, #336]	; (8014360 <acquire_and_process_data+0x940>)
 801420e:	6013      	str	r3, [r2, #0]

				accY_Mean /= windowLength;
 8014210:	4b54      	ldr	r3, [pc, #336]	; (8014364 <acquire_and_process_data+0x944>)
 8014212:	edd3 6a00 	vldr	s13, [r3]
 8014216:	4b4f      	ldr	r3, [pc, #316]	; (8014354 <acquire_and_process_data+0x934>)
 8014218:	781b      	ldrb	r3, [r3, #0]
 801421a:	ee07 3a90 	vmov	s15, r3
 801421e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014226:	4b4f      	ldr	r3, [pc, #316]	; (8014364 <acquire_and_process_data+0x944>)
 8014228:	edc3 7a00 	vstr	s15, [r3]
				accY_MinMax = maxY - minY;
 801422c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014230:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8014234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014238:	4b4b      	ldr	r3, [pc, #300]	; (8014368 <acquire_and_process_data+0x948>)
 801423a:	edc3 7a00 	vstr	s15, [r3]
				accY_RMS = sqrt(accY_RMS/windowLength);
 801423e:	4b4b      	ldr	r3, [pc, #300]	; (801436c <acquire_and_process_data+0x94c>)
 8014240:	ed93 7a00 	vldr	s14, [r3]
 8014244:	4b43      	ldr	r3, [pc, #268]	; (8014354 <acquire_and_process_data+0x934>)
 8014246:	781b      	ldrb	r3, [r3, #0]
 8014248:	ee07 3a90 	vmov	s15, r3
 801424c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014250:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014254:	ee16 0a90 	vmov	r0, s13
 8014258:	f7ec f98e 	bl	8000578 <__aeabi_f2d>
 801425c:	4602      	mov	r2, r0
 801425e:	460b      	mov	r3, r1
 8014260:	ec43 2b10 	vmov	d0, r2, r3
 8014264:	f008 fb48 	bl	801c8f8 <sqrt>
 8014268:	ec53 2b10 	vmov	r2, r3, d0
 801426c:	4610      	mov	r0, r2
 801426e:	4619      	mov	r1, r3
 8014270:	f7ec fc8a 	bl	8000b88 <__aeabi_d2f>
 8014274:	4603      	mov	r3, r0
 8014276:	4a3d      	ldr	r2, [pc, #244]	; (801436c <acquire_and_process_data+0x94c>)
 8014278:	6013      	str	r3, [r2, #0]

				accZ_Mean /= windowLength;
 801427a:	4b3d      	ldr	r3, [pc, #244]	; (8014370 <acquire_and_process_data+0x950>)
 801427c:	edd3 6a00 	vldr	s13, [r3]
 8014280:	4b34      	ldr	r3, [pc, #208]	; (8014354 <acquire_and_process_data+0x934>)
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	ee07 3a90 	vmov	s15, r3
 8014288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801428c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014290:	4b37      	ldr	r3, [pc, #220]	; (8014370 <acquire_and_process_data+0x950>)
 8014292:	edc3 7a00 	vstr	s15, [r3]
				accZ_MinMax = maxZ - minZ;
 8014296:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801429a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801429e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142a2:	4b34      	ldr	r3, [pc, #208]	; (8014374 <acquire_and_process_data+0x954>)
 80142a4:	edc3 7a00 	vstr	s15, [r3]
				accZ_RMS = sqrt(accZ_RMS/windowLength);
 80142a8:	4b33      	ldr	r3, [pc, #204]	; (8014378 <acquire_and_process_data+0x958>)
 80142aa:	ed93 7a00 	vldr	s14, [r3]
 80142ae:	4b29      	ldr	r3, [pc, #164]	; (8014354 <acquire_and_process_data+0x934>)
 80142b0:	781b      	ldrb	r3, [r3, #0]
 80142b2:	ee07 3a90 	vmov	s15, r3
 80142b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80142be:	ee16 0a90 	vmov	r0, s13
 80142c2:	f7ec f959 	bl	8000578 <__aeabi_f2d>
 80142c6:	4602      	mov	r2, r0
 80142c8:	460b      	mov	r3, r1
 80142ca:	ec43 2b10 	vmov	d0, r2, r3
 80142ce:	f008 fb13 	bl	801c8f8 <sqrt>
 80142d2:	ec53 2b10 	vmov	r2, r3, d0
 80142d6:	4610      	mov	r0, r2
 80142d8:	4619      	mov	r1, r3
 80142da:	f7ec fc55 	bl	8000b88 <__aeabi_d2f>
 80142de:	4603      	mov	r3, r0
 80142e0:	4a25      	ldr	r2, [pc, #148]	; (8014378 <acquire_and_process_data+0x958>)
 80142e2:	6013      	str	r3, [r2, #0]

				accMagnitude_Mean /= windowLength;
 80142e4:	4b25      	ldr	r3, [pc, #148]	; (801437c <acquire_and_process_data+0x95c>)
 80142e6:	edd3 6a00 	vldr	s13, [r3]
 80142ea:	4b1a      	ldr	r3, [pc, #104]	; (8014354 <acquire_and_process_data+0x934>)
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	ee07 3a90 	vmov	s15, r3
 80142f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80142f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142fa:	4b20      	ldr	r3, [pc, #128]	; (801437c <acquire_and_process_data+0x95c>)
 80142fc:	edc3 7a00 	vstr	s15, [r3]
				accMagnitude_MinMax = maxMagnitude - minMagnitude;
 8014300:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014304:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014308:	ee77 7a67 	vsub.f32	s15, s14, s15
 801430c:	4b1c      	ldr	r3, [pc, #112]	; (8014380 <acquire_and_process_data+0x960>)
 801430e:	edc3 7a00 	vstr	s15, [r3]
				accMagnitude_RMS = sqrt(accMagnitude_RMS/windowLength);
 8014312:	4b1c      	ldr	r3, [pc, #112]	; (8014384 <acquire_and_process_data+0x964>)
 8014314:	ed93 7a00 	vldr	s14, [r3]
 8014318:	4b0e      	ldr	r3, [pc, #56]	; (8014354 <acquire_and_process_data+0x934>)
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	ee07 3a90 	vmov	s15, r3
 8014320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014324:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014328:	ee16 0a90 	vmov	r0, s13
 801432c:	f7ec f924 	bl	8000578 <__aeabi_f2d>
 8014330:	4602      	mov	r2, r0
 8014332:	460b      	mov	r3, r1
 8014334:	ec43 2b10 	vmov	d0, r2, r3
 8014338:	f008 fade 	bl	801c8f8 <sqrt>
 801433c:	ec53 2b10 	vmov	r2, r3, d0
 8014340:	4610      	mov	r0, r2
 8014342:	4619      	mov	r1, r3
 8014344:	f7ec fc20 	bl	8000b88 <__aeabi_d2f>
 8014348:	4603      	mov	r3, r0
 801434a:	4a0e      	ldr	r2, [pc, #56]	; (8014384 <acquire_and_process_data+0x964>)
 801434c:	6013      	str	r3, [r2, #0]

				for (int i = 0; i < windowLength; i++) {
 801434e:	2300      	movs	r3, #0
 8014350:	633b      	str	r3, [r7, #48]	; 0x30
 8014352:	e0d0      	b.n	80144f6 <acquire_and_process_data+0xad6>
 8014354:	2000018e 	.word	0x2000018e
 8014358:	2000370c 	.word	0x2000370c
 801435c:	20003714 	.word	0x20003714
 8014360:	20003718 	.word	0x20003718
 8014364:	2000371c 	.word	0x2000371c
 8014368:	20003724 	.word	0x20003724
 801436c:	20003728 	.word	0x20003728
 8014370:	2000372c 	.word	0x2000372c
 8014374:	20003734 	.word	0x20003734
 8014378:	20003738 	.word	0x20003738
 801437c:	2000373c 	.word	0x2000373c
 8014380:	20003744 	.word	0x20003744
 8014384:	20003748 	.word	0x20003748
					accX_STD += pow(bufAccX[i] - accX_Mean, 2);
 8014388:	4a9f      	ldr	r2, [pc, #636]	; (8014608 <acquire_and_process_data+0xbe8>)
 801438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801438c:	009b      	lsls	r3, r3, #2
 801438e:	4413      	add	r3, r2
 8014390:	ed93 7a00 	vldr	s14, [r3]
 8014394:	4b9d      	ldr	r3, [pc, #628]	; (801460c <acquire_and_process_data+0xbec>)
 8014396:	edd3 7a00 	vldr	s15, [r3]
 801439a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801439e:	ee17 0a90 	vmov	r0, s15
 80143a2:	f7ec f8e9 	bl	8000578 <__aeabi_f2d>
 80143a6:	4602      	mov	r2, r0
 80143a8:	460b      	mov	r3, r1
 80143aa:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8014600 <acquire_and_process_data+0xbe0>
 80143ae:	ec43 2b10 	vmov	d0, r2, r3
 80143b2:	f008 fa31 	bl	801c818 <pow>
 80143b6:	ec55 4b10 	vmov	r4, r5, d0
 80143ba:	4b95      	ldr	r3, [pc, #596]	; (8014610 <acquire_and_process_data+0xbf0>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	4618      	mov	r0, r3
 80143c0:	f7ec f8da 	bl	8000578 <__aeabi_f2d>
 80143c4:	4602      	mov	r2, r0
 80143c6:	460b      	mov	r3, r1
 80143c8:	4620      	mov	r0, r4
 80143ca:	4629      	mov	r1, r5
 80143cc:	f7eb ff76 	bl	80002bc <__adddf3>
 80143d0:	4602      	mov	r2, r0
 80143d2:	460b      	mov	r3, r1
 80143d4:	4610      	mov	r0, r2
 80143d6:	4619      	mov	r1, r3
 80143d8:	f7ec fbd6 	bl	8000b88 <__aeabi_d2f>
 80143dc:	4603      	mov	r3, r0
 80143de:	4a8c      	ldr	r2, [pc, #560]	; (8014610 <acquire_and_process_data+0xbf0>)
 80143e0:	6013      	str	r3, [r2, #0]
					accY_STD += pow(bufAccY[i] - accY_Mean, 2);
 80143e2:	4a8c      	ldr	r2, [pc, #560]	; (8014614 <acquire_and_process_data+0xbf4>)
 80143e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e6:	009b      	lsls	r3, r3, #2
 80143e8:	4413      	add	r3, r2
 80143ea:	ed93 7a00 	vldr	s14, [r3]
 80143ee:	4b8a      	ldr	r3, [pc, #552]	; (8014618 <acquire_and_process_data+0xbf8>)
 80143f0:	edd3 7a00 	vldr	s15, [r3]
 80143f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143f8:	ee17 0a90 	vmov	r0, s15
 80143fc:	f7ec f8bc 	bl	8000578 <__aeabi_f2d>
 8014400:	4602      	mov	r2, r0
 8014402:	460b      	mov	r3, r1
 8014404:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8014600 <acquire_and_process_data+0xbe0>
 8014408:	ec43 2b10 	vmov	d0, r2, r3
 801440c:	f008 fa04 	bl	801c818 <pow>
 8014410:	ec55 4b10 	vmov	r4, r5, d0
 8014414:	4b81      	ldr	r3, [pc, #516]	; (801461c <acquire_and_process_data+0xbfc>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	4618      	mov	r0, r3
 801441a:	f7ec f8ad 	bl	8000578 <__aeabi_f2d>
 801441e:	4602      	mov	r2, r0
 8014420:	460b      	mov	r3, r1
 8014422:	4620      	mov	r0, r4
 8014424:	4629      	mov	r1, r5
 8014426:	f7eb ff49 	bl	80002bc <__adddf3>
 801442a:	4602      	mov	r2, r0
 801442c:	460b      	mov	r3, r1
 801442e:	4610      	mov	r0, r2
 8014430:	4619      	mov	r1, r3
 8014432:	f7ec fba9 	bl	8000b88 <__aeabi_d2f>
 8014436:	4603      	mov	r3, r0
 8014438:	4a78      	ldr	r2, [pc, #480]	; (801461c <acquire_and_process_data+0xbfc>)
 801443a:	6013      	str	r3, [r2, #0]
					accZ_STD += pow(bufAccZ[i] - accZ_Mean, 2);
 801443c:	4a78      	ldr	r2, [pc, #480]	; (8014620 <acquire_and_process_data+0xc00>)
 801443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	4413      	add	r3, r2
 8014444:	ed93 7a00 	vldr	s14, [r3]
 8014448:	4b76      	ldr	r3, [pc, #472]	; (8014624 <acquire_and_process_data+0xc04>)
 801444a:	edd3 7a00 	vldr	s15, [r3]
 801444e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014452:	ee17 0a90 	vmov	r0, s15
 8014456:	f7ec f88f 	bl	8000578 <__aeabi_f2d>
 801445a:	4602      	mov	r2, r0
 801445c:	460b      	mov	r3, r1
 801445e:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8014600 <acquire_and_process_data+0xbe0>
 8014462:	ec43 2b10 	vmov	d0, r2, r3
 8014466:	f008 f9d7 	bl	801c818 <pow>
 801446a:	ec55 4b10 	vmov	r4, r5, d0
 801446e:	4b6e      	ldr	r3, [pc, #440]	; (8014628 <acquire_and_process_data+0xc08>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	4618      	mov	r0, r3
 8014474:	f7ec f880 	bl	8000578 <__aeabi_f2d>
 8014478:	4602      	mov	r2, r0
 801447a:	460b      	mov	r3, r1
 801447c:	4620      	mov	r0, r4
 801447e:	4629      	mov	r1, r5
 8014480:	f7eb ff1c 	bl	80002bc <__adddf3>
 8014484:	4602      	mov	r2, r0
 8014486:	460b      	mov	r3, r1
 8014488:	4610      	mov	r0, r2
 801448a:	4619      	mov	r1, r3
 801448c:	f7ec fb7c 	bl	8000b88 <__aeabi_d2f>
 8014490:	4603      	mov	r3, r0
 8014492:	4a65      	ldr	r2, [pc, #404]	; (8014628 <acquire_and_process_data+0xc08>)
 8014494:	6013      	str	r3, [r2, #0]
					accMagnitude_STD += pow(bufAccMagnitude[i] - accMagnitude_Mean, 2);
 8014496:	4a65      	ldr	r2, [pc, #404]	; (801462c <acquire_and_process_data+0xc0c>)
 8014498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449a:	009b      	lsls	r3, r3, #2
 801449c:	4413      	add	r3, r2
 801449e:	ed93 7a00 	vldr	s14, [r3]
 80144a2:	4b63      	ldr	r3, [pc, #396]	; (8014630 <acquire_and_process_data+0xc10>)
 80144a4:	edd3 7a00 	vldr	s15, [r3]
 80144a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144ac:	ee17 0a90 	vmov	r0, s15
 80144b0:	f7ec f862 	bl	8000578 <__aeabi_f2d>
 80144b4:	4602      	mov	r2, r0
 80144b6:	460b      	mov	r3, r1
 80144b8:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8014600 <acquire_and_process_data+0xbe0>
 80144bc:	ec43 2b10 	vmov	d0, r2, r3
 80144c0:	f008 f9aa 	bl	801c818 <pow>
 80144c4:	ec55 4b10 	vmov	r4, r5, d0
 80144c8:	4b5a      	ldr	r3, [pc, #360]	; (8014634 <acquire_and_process_data+0xc14>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7ec f853 	bl	8000578 <__aeabi_f2d>
 80144d2:	4602      	mov	r2, r0
 80144d4:	460b      	mov	r3, r1
 80144d6:	4620      	mov	r0, r4
 80144d8:	4629      	mov	r1, r5
 80144da:	f7eb feef 	bl	80002bc <__adddf3>
 80144de:	4602      	mov	r2, r0
 80144e0:	460b      	mov	r3, r1
 80144e2:	4610      	mov	r0, r2
 80144e4:	4619      	mov	r1, r3
 80144e6:	f7ec fb4f 	bl	8000b88 <__aeabi_d2f>
 80144ea:	4603      	mov	r3, r0
 80144ec:	4a51      	ldr	r2, [pc, #324]	; (8014634 <acquire_and_process_data+0xc14>)
 80144ee:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < windowLength; i++) {
 80144f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f2:	3301      	adds	r3, #1
 80144f4:	633b      	str	r3, [r7, #48]	; 0x30
 80144f6:	4b50      	ldr	r3, [pc, #320]	; (8014638 <acquire_and_process_data+0xc18>)
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	461a      	mov	r2, r3
 80144fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fe:	4293      	cmp	r3, r2
 8014500:	f6ff af42 	blt.w	8014388 <acquire_and_process_data+0x968>
				}

				accX_STD = sqrt(accX_STD / windowLength);
 8014504:	4b42      	ldr	r3, [pc, #264]	; (8014610 <acquire_and_process_data+0xbf0>)
 8014506:	ed93 7a00 	vldr	s14, [r3]
 801450a:	4b4b      	ldr	r3, [pc, #300]	; (8014638 <acquire_and_process_data+0xc18>)
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	ee07 3a90 	vmov	s15, r3
 8014512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014516:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801451a:	ee16 0a90 	vmov	r0, s13
 801451e:	f7ec f82b 	bl	8000578 <__aeabi_f2d>
 8014522:	4602      	mov	r2, r0
 8014524:	460b      	mov	r3, r1
 8014526:	ec43 2b10 	vmov	d0, r2, r3
 801452a:	f008 f9e5 	bl	801c8f8 <sqrt>
 801452e:	ec53 2b10 	vmov	r2, r3, d0
 8014532:	4610      	mov	r0, r2
 8014534:	4619      	mov	r1, r3
 8014536:	f7ec fb27 	bl	8000b88 <__aeabi_d2f>
 801453a:	4603      	mov	r3, r0
 801453c:	4a34      	ldr	r2, [pc, #208]	; (8014610 <acquire_and_process_data+0xbf0>)
 801453e:	6013      	str	r3, [r2, #0]
				accY_STD = sqrt(accY_STD / windowLength);
 8014540:	4b36      	ldr	r3, [pc, #216]	; (801461c <acquire_and_process_data+0xbfc>)
 8014542:	ed93 7a00 	vldr	s14, [r3]
 8014546:	4b3c      	ldr	r3, [pc, #240]	; (8014638 <acquire_and_process_data+0xc18>)
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	ee07 3a90 	vmov	s15, r3
 801454e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014552:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014556:	ee16 0a90 	vmov	r0, s13
 801455a:	f7ec f80d 	bl	8000578 <__aeabi_f2d>
 801455e:	4602      	mov	r2, r0
 8014560:	460b      	mov	r3, r1
 8014562:	ec43 2b10 	vmov	d0, r2, r3
 8014566:	f008 f9c7 	bl	801c8f8 <sqrt>
 801456a:	ec53 2b10 	vmov	r2, r3, d0
 801456e:	4610      	mov	r0, r2
 8014570:	4619      	mov	r1, r3
 8014572:	f7ec fb09 	bl	8000b88 <__aeabi_d2f>
 8014576:	4603      	mov	r3, r0
 8014578:	4a28      	ldr	r2, [pc, #160]	; (801461c <acquire_and_process_data+0xbfc>)
 801457a:	6013      	str	r3, [r2, #0]
				accZ_STD = sqrt(accZ_STD / windowLength);
 801457c:	4b2a      	ldr	r3, [pc, #168]	; (8014628 <acquire_and_process_data+0xc08>)
 801457e:	ed93 7a00 	vldr	s14, [r3]
 8014582:	4b2d      	ldr	r3, [pc, #180]	; (8014638 <acquire_and_process_data+0xc18>)
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	ee07 3a90 	vmov	s15, r3
 801458a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801458e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014592:	ee16 0a90 	vmov	r0, s13
 8014596:	f7eb ffef 	bl	8000578 <__aeabi_f2d>
 801459a:	4602      	mov	r2, r0
 801459c:	460b      	mov	r3, r1
 801459e:	ec43 2b10 	vmov	d0, r2, r3
 80145a2:	f008 f9a9 	bl	801c8f8 <sqrt>
 80145a6:	ec53 2b10 	vmov	r2, r3, d0
 80145aa:	4610      	mov	r0, r2
 80145ac:	4619      	mov	r1, r3
 80145ae:	f7ec faeb 	bl	8000b88 <__aeabi_d2f>
 80145b2:	4603      	mov	r3, r0
 80145b4:	4a1c      	ldr	r2, [pc, #112]	; (8014628 <acquire_and_process_data+0xc08>)
 80145b6:	6013      	str	r3, [r2, #0]
				accMagnitude_STD = sqrt(accMagnitude_STD / windowLength);
 80145b8:	4b1e      	ldr	r3, [pc, #120]	; (8014634 <acquire_and_process_data+0xc14>)
 80145ba:	ed93 7a00 	vldr	s14, [r3]
 80145be:	4b1e      	ldr	r3, [pc, #120]	; (8014638 <acquire_and_process_data+0xc18>)
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	ee07 3a90 	vmov	s15, r3
 80145c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80145ce:	ee16 0a90 	vmov	r0, s13
 80145d2:	f7eb ffd1 	bl	8000578 <__aeabi_f2d>
 80145d6:	4602      	mov	r2, r0
 80145d8:	460b      	mov	r3, r1
 80145da:	ec43 2b10 	vmov	d0, r2, r3
 80145de:	f008 f98b 	bl	801c8f8 <sqrt>
 80145e2:	ec53 2b10 	vmov	r2, r3, d0
 80145e6:	4610      	mov	r0, r2
 80145e8:	4619      	mov	r1, r3
 80145ea:	f7ec facd 	bl	8000b88 <__aeabi_d2f>
 80145ee:	4603      	mov	r3, r0
 80145f0:	4a10      	ldr	r2, [pc, #64]	; (8014634 <acquire_and_process_data+0xc14>)
 80145f2:	6013      	str	r3, [r2, #0]


				//Replace first half of buffers with their second half
				for (int i = 0; i < windowOverlap; i++) {
 80145f4:	2300      	movs	r3, #0
 80145f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80145f8:	e05b      	b.n	80146b2 <acquire_and_process_data+0xc92>
 80145fa:	bf00      	nop
 80145fc:	f3af 8000 	nop.w
 8014600:	00000000 	.word	0x00000000
 8014604:	40000000 	.word	0x40000000
 8014608:	2000308c 	.word	0x2000308c
 801460c:	2000370c 	.word	0x2000370c
 8014610:	20003710 	.word	0x20003710
 8014614:	2000322c 	.word	0x2000322c
 8014618:	2000371c 	.word	0x2000371c
 801461c:	20003720 	.word	0x20003720
 8014620:	200033cc 	.word	0x200033cc
 8014624:	2000372c 	.word	0x2000372c
 8014628:	20003730 	.word	0x20003730
 801462c:	2000356c 	.word	0x2000356c
 8014630:	2000373c 	.word	0x2000373c
 8014634:	20003740 	.word	0x20003740
 8014638:	2000018e 	.word	0x2000018e
					bufAccX[i] = bufAccX[i + windowOverlap];
 801463c:	4bc4      	ldr	r3, [pc, #784]	; (8014950 <acquire_and_process_data+0xf30>)
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	461a      	mov	r2, r3
 8014642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014644:	4413      	add	r3, r2
 8014646:	4ac3      	ldr	r2, [pc, #780]	; (8014954 <acquire_and_process_data+0xf34>)
 8014648:	009b      	lsls	r3, r3, #2
 801464a:	4413      	add	r3, r2
 801464c:	681a      	ldr	r2, [r3, #0]
 801464e:	49c1      	ldr	r1, [pc, #772]	; (8014954 <acquire_and_process_data+0xf34>)
 8014650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014652:	009b      	lsls	r3, r3, #2
 8014654:	440b      	add	r3, r1
 8014656:	601a      	str	r2, [r3, #0]
					bufAccY[i] = bufAccY[i + windowOverlap];
 8014658:	4bbd      	ldr	r3, [pc, #756]	; (8014950 <acquire_and_process_data+0xf30>)
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	461a      	mov	r2, r3
 801465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014660:	4413      	add	r3, r2
 8014662:	4abd      	ldr	r2, [pc, #756]	; (8014958 <acquire_and_process_data+0xf38>)
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	4413      	add	r3, r2
 8014668:	681a      	ldr	r2, [r3, #0]
 801466a:	49bb      	ldr	r1, [pc, #748]	; (8014958 <acquire_and_process_data+0xf38>)
 801466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	440b      	add	r3, r1
 8014672:	601a      	str	r2, [r3, #0]
					bufAccZ[i] = bufAccZ[i + windowOverlap];
 8014674:	4bb6      	ldr	r3, [pc, #728]	; (8014950 <acquire_and_process_data+0xf30>)
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	461a      	mov	r2, r3
 801467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801467c:	4413      	add	r3, r2
 801467e:	4ab7      	ldr	r2, [pc, #732]	; (801495c <acquire_and_process_data+0xf3c>)
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	4413      	add	r3, r2
 8014684:	681a      	ldr	r2, [r3, #0]
 8014686:	49b5      	ldr	r1, [pc, #724]	; (801495c <acquire_and_process_data+0xf3c>)
 8014688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	440b      	add	r3, r1
 801468e:	601a      	str	r2, [r3, #0]
					bufAccMagnitude[i] = bufAccMagnitude[i + windowOverlap];
 8014690:	4baf      	ldr	r3, [pc, #700]	; (8014950 <acquire_and_process_data+0xf30>)
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	461a      	mov	r2, r3
 8014696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014698:	4413      	add	r3, r2
 801469a:	4ab1      	ldr	r2, [pc, #708]	; (8014960 <acquire_and_process_data+0xf40>)
 801469c:	009b      	lsls	r3, r3, #2
 801469e:	4413      	add	r3, r2
 80146a0:	681a      	ldr	r2, [r3, #0]
 80146a2:	49af      	ldr	r1, [pc, #700]	; (8014960 <acquire_and_process_data+0xf40>)
 80146a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	440b      	add	r3, r1
 80146aa:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < windowOverlap; i++) {
 80146ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ae:	3301      	adds	r3, #1
 80146b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80146b2:	4ba7      	ldr	r3, [pc, #668]	; (8014950 <acquire_and_process_data+0xf30>)
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	461a      	mov	r2, r3
 80146b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ba:	4293      	cmp	r3, r2
 80146bc:	dbbe      	blt.n	801463c <acquire_and_process_data+0xc1c>
				}


				data[0][0] = (accX_Mean - (-0.7925340396583439)) * 2.0949933205020708;
 80146be:	4ba9      	ldr	r3, [pc, #676]	; (8014964 <acquire_and_process_data+0xf44>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7eb ff58 	bl	8000578 <__aeabi_f2d>
 80146c8:	a37f      	add	r3, pc, #508	; (adr r3, 80148c8 <acquire_and_process_data+0xea8>)
 80146ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ce:	f7eb fdf5 	bl	80002bc <__adddf3>
 80146d2:	4602      	mov	r2, r0
 80146d4:	460b      	mov	r3, r1
 80146d6:	4610      	mov	r0, r2
 80146d8:	4619      	mov	r1, r3
 80146da:	a37d      	add	r3, pc, #500	; (adr r3, 80148d0 <acquire_and_process_data+0xeb0>)
 80146dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e0:	f7eb ffa2 	bl	8000628 <__aeabi_dmul>
 80146e4:	4602      	mov	r2, r0
 80146e6:	460b      	mov	r3, r1
 80146e8:	4610      	mov	r0, r2
 80146ea:	4619      	mov	r1, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681c      	ldr	r4, [r3, #0]
 80146f0:	f7ec fa4a 	bl	8000b88 <__aeabi_d2f>
 80146f4:	4603      	mov	r3, r0
 80146f6:	6023      	str	r3, [r4, #0]
				data[0][1] = (accX_STD - 0.25463438722461235) * 5.929210562633304;
 80146f8:	4b9b      	ldr	r3, [pc, #620]	; (8014968 <acquire_and_process_data+0xf48>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7eb ff3b 	bl	8000578 <__aeabi_f2d>
 8014702:	a375      	add	r3, pc, #468	; (adr r3, 80148d8 <acquire_and_process_data+0xeb8>)
 8014704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014708:	f7eb fdd6 	bl	80002b8 <__aeabi_dsub>
 801470c:	4602      	mov	r2, r0
 801470e:	460b      	mov	r3, r1
 8014710:	4610      	mov	r0, r2
 8014712:	4619      	mov	r1, r3
 8014714:	a372      	add	r3, pc, #456	; (adr r3, 80148e0 <acquire_and_process_data+0xec0>)
 8014716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471a:	f7eb ff85 	bl	8000628 <__aeabi_dmul>
 801471e:	4602      	mov	r2, r0
 8014720:	460b      	mov	r3, r1
 8014722:	4610      	mov	r0, r2
 8014724:	4619      	mov	r1, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	1d1c      	adds	r4, r3, #4
 801472c:	f7ec fa2c 	bl	8000b88 <__aeabi_d2f>
 8014730:	4603      	mov	r3, r0
 8014732:	6023      	str	r3, [r4, #0]
				data[0][2] = (accX_MinMax - 1.2237432034064877) * 1.1805004714159546;
 8014734:	4b8d      	ldr	r3, [pc, #564]	; (801496c <acquire_and_process_data+0xf4c>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4618      	mov	r0, r3
 801473a:	f7eb ff1d 	bl	8000578 <__aeabi_f2d>
 801473e:	a36a      	add	r3, pc, #424	; (adr r3, 80148e8 <acquire_and_process_data+0xec8>)
 8014740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014744:	f7eb fdb8 	bl	80002b8 <__aeabi_dsub>
 8014748:	4602      	mov	r2, r0
 801474a:	460b      	mov	r3, r1
 801474c:	4610      	mov	r0, r2
 801474e:	4619      	mov	r1, r3
 8014750:	a367      	add	r3, pc, #412	; (adr r3, 80148f0 <acquire_and_process_data+0xed0>)
 8014752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014756:	f7eb ff67 	bl	8000628 <__aeabi_dmul>
 801475a:	4602      	mov	r2, r0
 801475c:	460b      	mov	r3, r1
 801475e:	4610      	mov	r0, r2
 8014760:	4619      	mov	r1, r3
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	f103 0408 	add.w	r4, r3, #8
 801476a:	f7ec fa0d 	bl	8000b88 <__aeabi_d2f>
 801476e:	4603      	mov	r3, r0
 8014770:	6023      	str	r3, [r4, #0]
				data[0][3] = (accX_RMS - 0.9080303069938368) * 2.8316304285664726;
 8014772:	4b7f      	ldr	r3, [pc, #508]	; (8014970 <acquire_and_process_data+0xf50>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	4618      	mov	r0, r3
 8014778:	f7eb fefe 	bl	8000578 <__aeabi_f2d>
 801477c:	a35e      	add	r3, pc, #376	; (adr r3, 80148f8 <acquire_and_process_data+0xed8>)
 801477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014782:	f7eb fd99 	bl	80002b8 <__aeabi_dsub>
 8014786:	4602      	mov	r2, r0
 8014788:	460b      	mov	r3, r1
 801478a:	4610      	mov	r0, r2
 801478c:	4619      	mov	r1, r3
 801478e:	a35c      	add	r3, pc, #368	; (adr r3, 8014900 <acquire_and_process_data+0xee0>)
 8014790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014794:	f7eb ff48 	bl	8000628 <__aeabi_dmul>
 8014798:	4602      	mov	r2, r0
 801479a:	460b      	mov	r3, r1
 801479c:	4610      	mov	r0, r2
 801479e:	4619      	mov	r1, r3
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	f103 040c 	add.w	r4, r3, #12
 80147a8:	f7ec f9ee 	bl	8000b88 <__aeabi_d2f>
 80147ac:	4603      	mov	r3, r0
 80147ae:	6023      	str	r3, [r4, #0]

				data[0][4] = (accY_Mean - (-0.043692102975635576)) * 3.7465012332289103;
 80147b0:	4b70      	ldr	r3, [pc, #448]	; (8014974 <acquire_and_process_data+0xf54>)
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7eb fedf 	bl	8000578 <__aeabi_f2d>
 80147ba:	a353      	add	r3, pc, #332	; (adr r3, 8014908 <acquire_and_process_data+0xee8>)
 80147bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147c0:	f7eb fd7c 	bl	80002bc <__adddf3>
 80147c4:	4602      	mov	r2, r0
 80147c6:	460b      	mov	r3, r1
 80147c8:	4610      	mov	r0, r2
 80147ca:	4619      	mov	r1, r3
 80147cc:	a350      	add	r3, pc, #320	; (adr r3, 8014910 <acquire_and_process_data+0xef0>)
 80147ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147d2:	f7eb ff29 	bl	8000628 <__aeabi_dmul>
 80147d6:	4602      	mov	r2, r0
 80147d8:	460b      	mov	r3, r1
 80147da:	4610      	mov	r0, r2
 80147dc:	4619      	mov	r1, r3
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	f103 0410 	add.w	r4, r3, #16
 80147e6:	f7ec f9cf 	bl	8000b88 <__aeabi_d2f>
 80147ea:	4603      	mov	r3, r0
 80147ec:	6023      	str	r3, [r4, #0]
				data[0][5] = (accY_STD - 0.2380924561831248) * 6.581672613424032;
 80147ee:	4b62      	ldr	r3, [pc, #392]	; (8014978 <acquire_and_process_data+0xf58>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7eb fec0 	bl	8000578 <__aeabi_f2d>
 80147f8:	a347      	add	r3, pc, #284	; (adr r3, 8014918 <acquire_and_process_data+0xef8>)
 80147fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147fe:	f7eb fd5b 	bl	80002b8 <__aeabi_dsub>
 8014802:	4602      	mov	r2, r0
 8014804:	460b      	mov	r3, r1
 8014806:	4610      	mov	r0, r2
 8014808:	4619      	mov	r1, r3
 801480a:	a345      	add	r3, pc, #276	; (adr r3, 8014920 <acquire_and_process_data+0xf00>)
 801480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014810:	f7eb ff0a 	bl	8000628 <__aeabi_dmul>
 8014814:	4602      	mov	r2, r0
 8014816:	460b      	mov	r3, r1
 8014818:	4610      	mov	r0, r2
 801481a:	4619      	mov	r1, r3
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f103 0414 	add.w	r4, r3, #20
 8014824:	f7ec f9b0 	bl	8000b88 <__aeabi_d2f>
 8014828:	4603      	mov	r3, r0
 801482a:	6023      	str	r3, [r4, #0]
				data[0][6] = (accY_MinMax - 1.2170445463478536) * 1.2546657227425297;
 801482c:	4b53      	ldr	r3, [pc, #332]	; (801497c <acquire_and_process_data+0xf5c>)
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	4618      	mov	r0, r3
 8014832:	f7eb fea1 	bl	8000578 <__aeabi_f2d>
 8014836:	a33c      	add	r3, pc, #240	; (adr r3, 8014928 <acquire_and_process_data+0xf08>)
 8014838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801483c:	f7eb fd3c 	bl	80002b8 <__aeabi_dsub>
 8014840:	4602      	mov	r2, r0
 8014842:	460b      	mov	r3, r1
 8014844:	4610      	mov	r0, r2
 8014846:	4619      	mov	r1, r3
 8014848:	a339      	add	r3, pc, #228	; (adr r3, 8014930 <acquire_and_process_data+0xf10>)
 801484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484e:	f7eb feeb 	bl	8000628 <__aeabi_dmul>
 8014852:	4602      	mov	r2, r0
 8014854:	460b      	mov	r3, r1
 8014856:	4610      	mov	r0, r2
 8014858:	4619      	mov	r1, r3
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	f103 0418 	add.w	r4, r3, #24
 8014862:	f7ec f991 	bl	8000b88 <__aeabi_d2f>
 8014866:	4603      	mov	r3, r0
 8014868:	6023      	str	r3, [r4, #0]
				data[0][7] = (accY_RMS - 0.3188075751411812) * 4.415641148049384;
 801486a:	4b45      	ldr	r3, [pc, #276]	; (8014980 <acquire_and_process_data+0xf60>)
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	4618      	mov	r0, r3
 8014870:	f7eb fe82 	bl	8000578 <__aeabi_f2d>
 8014874:	a330      	add	r3, pc, #192	; (adr r3, 8014938 <acquire_and_process_data+0xf18>)
 8014876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487a:	f7eb fd1d 	bl	80002b8 <__aeabi_dsub>
 801487e:	4602      	mov	r2, r0
 8014880:	460b      	mov	r3, r1
 8014882:	4610      	mov	r0, r2
 8014884:	4619      	mov	r1, r3
 8014886:	a32e      	add	r3, pc, #184	; (adr r3, 8014940 <acquire_and_process_data+0xf20>)
 8014888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488c:	f7eb fecc 	bl	8000628 <__aeabi_dmul>
 8014890:	4602      	mov	r2, r0
 8014892:	460b      	mov	r3, r1
 8014894:	4610      	mov	r0, r2
 8014896:	4619      	mov	r1, r3
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	f103 041c 	add.w	r4, r3, #28
 80148a0:	f7ec f972 	bl	8000b88 <__aeabi_d2f>
 80148a4:	4603      	mov	r3, r0
 80148a6:	6023      	str	r3, [r4, #0]

				data[0][8] = (accZ_Mean - 0.0036754295900627365) * 3.7391857781655413;
 80148a8:	4b36      	ldr	r3, [pc, #216]	; (8014984 <acquire_and_process_data+0xf64>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4618      	mov	r0, r3
 80148ae:	f7eb fe63 	bl	8000578 <__aeabi_f2d>
 80148b2:	a325      	add	r3, pc, #148	; (adr r3, 8014948 <acquire_and_process_data+0xf28>)
 80148b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b8:	f7eb fcfe 	bl	80002b8 <__aeabi_dsub>
 80148bc:	4602      	mov	r2, r0
 80148be:	460b      	mov	r3, r1
 80148c0:	4610      	mov	r0, r2
 80148c2:	e061      	b.n	8014988 <acquire_and_process_data+0xf68>
 80148c4:	f3af 8000 	nop.w
 80148c8:	58a9944f 	.word	0x58a9944f
 80148cc:	3fe95c70 	.word	0x3fe95c70
 80148d0:	dba728a2 	.word	0xdba728a2
 80148d4:	4000c28b 	.word	0x4000c28b
 80148d8:	076444fb 	.word	0x076444fb
 80148dc:	3fd04bee 	.word	0x3fd04bee
 80148e0:	f9466e63 	.word	0xf9466e63
 80148e4:	4017b782 	.word	0x4017b782
 80148e8:	c0d5548b 	.word	0xc0d5548b
 80148ec:	3ff39473 	.word	0x3ff39473
 80148f0:	765a4e44 	.word	0x765a4e44
 80148f4:	3ff2e354 	.word	0x3ff2e354
 80148f8:	930a1781 	.word	0x930a1781
 80148fc:	3fed0e95 	.word	0x3fed0e95
 8014900:	daa86966 	.word	0xdaa86966
 8014904:	4006a72d 	.word	0x4006a72d
 8014908:	b2bf6537 	.word	0xb2bf6537
 801490c:	3fa65ecf 	.word	0x3fa65ecf
 8014910:	a379227c 	.word	0xa379227c
 8014914:	400df8d5 	.word	0x400df8d5
 8014918:	485d8bf8 	.word	0x485d8bf8
 801491c:	3fce79d0 	.word	0x3fce79d0
 8014920:	fc4e8a4f 	.word	0xfc4e8a4f
 8014924:	401a53a1 	.word	0x401a53a1
 8014928:	b3c56d50 	.word	0xb3c56d50
 801492c:	3ff37903 	.word	0x3ff37903
 8014930:	5d69763f 	.word	0x5d69763f
 8014934:	3ff4131c 	.word	0x3ff4131c
 8014938:	e33cb32c 	.word	0xe33cb32c
 801493c:	3fd46757 	.word	0x3fd46757
 8014940:	d546f9db 	.word	0xd546f9db
 8014944:	4011a99d 	.word	0x4011a99d
 8014948:	3c6b1212 	.word	0x3c6b1212
 801494c:	3f6e1bef 	.word	0x3f6e1bef
 8014950:	2000018f 	.word	0x2000018f
 8014954:	2000308c 	.word	0x2000308c
 8014958:	2000322c 	.word	0x2000322c
 801495c:	200033cc 	.word	0x200033cc
 8014960:	2000356c 	.word	0x2000356c
 8014964:	2000370c 	.word	0x2000370c
 8014968:	20003710 	.word	0x20003710
 801496c:	20003714 	.word	0x20003714
 8014970:	20003718 	.word	0x20003718
 8014974:	2000371c 	.word	0x2000371c
 8014978:	20003720 	.word	0x20003720
 801497c:	20003724 	.word	0x20003724
 8014980:	20003728 	.word	0x20003728
 8014984:	2000372c 	.word	0x2000372c
 8014988:	4619      	mov	r1, r3
 801498a:	a39a      	add	r3, pc, #616	; (adr r3, 8014bf4 <acquire_and_process_data+0x11d4>)
 801498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014990:	f7eb fe4a 	bl	8000628 <__aeabi_dmul>
 8014994:	4602      	mov	r2, r0
 8014996:	460b      	mov	r3, r1
 8014998:	4610      	mov	r0, r2
 801499a:	4619      	mov	r1, r3
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	f103 0420 	add.w	r4, r3, #32
 80149a4:	f7ec f8f0 	bl	8000b88 <__aeabi_d2f>
 80149a8:	4603      	mov	r3, r0
 80149aa:	6023      	str	r3, [r4, #0]
				data[0][9] = (accZ_STD - 0.23952607306415402) * 7.479754757980447;
 80149ac:	4b8a      	ldr	r3, [pc, #552]	; (8014bd8 <acquire_and_process_data+0x11b8>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7eb fde1 	bl	8000578 <__aeabi_f2d>
 80149b6:	a36c      	add	r3, pc, #432	; (adr r3, 8014b68 <acquire_and_process_data+0x1148>)
 80149b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149bc:	f7eb fc7c 	bl	80002b8 <__aeabi_dsub>
 80149c0:	4602      	mov	r2, r0
 80149c2:	460b      	mov	r3, r1
 80149c4:	4610      	mov	r0, r2
 80149c6:	4619      	mov	r1, r3
 80149c8:	a369      	add	r3, pc, #420	; (adr r3, 8014b70 <acquire_and_process_data+0x1150>)
 80149ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ce:	f7eb fe2b 	bl	8000628 <__aeabi_dmul>
 80149d2:	4602      	mov	r2, r0
 80149d4:	460b      	mov	r3, r1
 80149d6:	4610      	mov	r0, r2
 80149d8:	4619      	mov	r1, r3
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80149e2:	f7ec f8d1 	bl	8000b88 <__aeabi_d2f>
 80149e6:	4603      	mov	r3, r0
 80149e8:	6023      	str	r3, [r4, #0]
				data[0][10] = (accZ_MinMax - 1.2980415984277747) * 1.313726772069218;
 80149ea:	4b7c      	ldr	r3, [pc, #496]	; (8014bdc <acquire_and_process_data+0x11bc>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7eb fdc2 	bl	8000578 <__aeabi_f2d>
 80149f4:	a360      	add	r3, pc, #384	; (adr r3, 8014b78 <acquire_and_process_data+0x1158>)
 80149f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fa:	f7eb fc5d 	bl	80002b8 <__aeabi_dsub>
 80149fe:	4602      	mov	r2, r0
 8014a00:	460b      	mov	r3, r1
 8014a02:	4610      	mov	r0, r2
 8014a04:	4619      	mov	r1, r3
 8014a06:	a35e      	add	r3, pc, #376	; (adr r3, 8014b80 <acquire_and_process_data+0x1160>)
 8014a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0c:	f7eb fe0c 	bl	8000628 <__aeabi_dmul>
 8014a10:	4602      	mov	r2, r0
 8014a12:	460b      	mov	r3, r1
 8014a14:	4610      	mov	r0, r2
 8014a16:	4619      	mov	r1, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8014a20:	f7ec f8b2 	bl	8000b88 <__aeabi_d2f>
 8014a24:	4603      	mov	r3, r0
 8014a26:	6023      	str	r3, [r4, #0]
				data[0][11] = (accZ_RMS - 0.3156636494289826) * 4.60580702527008;
 8014a28:	4b6d      	ldr	r3, [pc, #436]	; (8014be0 <acquire_and_process_data+0x11c0>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7eb fda3 	bl	8000578 <__aeabi_f2d>
 8014a32:	a355      	add	r3, pc, #340	; (adr r3, 8014b88 <acquire_and_process_data+0x1168>)
 8014a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a38:	f7eb fc3e 	bl	80002b8 <__aeabi_dsub>
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	460b      	mov	r3, r1
 8014a40:	4610      	mov	r0, r2
 8014a42:	4619      	mov	r1, r3
 8014a44:	a352      	add	r3, pc, #328	; (adr r3, 8014b90 <acquire_and_process_data+0x1170>)
 8014a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4a:	f7eb fded 	bl	8000628 <__aeabi_dmul>
 8014a4e:	4602      	mov	r2, r0
 8014a50:	460b      	mov	r3, r1
 8014a52:	4610      	mov	r0, r2
 8014a54:	4619      	mov	r1, r3
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8014a5e:	f7ec f893 	bl	8000b88 <__aeabi_d2f>
 8014a62:	4603      	mov	r3, r0
 8014a64:	6023      	str	r3, [r4, #0]

				data[0][12] = (accMagnitude_Mean - 1.0669456527929735) * 15.930676904057798;
 8014a66:	4b5f      	ldr	r3, [pc, #380]	; (8014be4 <acquire_and_process_data+0x11c4>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7eb fd84 	bl	8000578 <__aeabi_f2d>
 8014a70:	a349      	add	r3, pc, #292	; (adr r3, 8014b98 <acquire_and_process_data+0x1178>)
 8014a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a76:	f7eb fc1f 	bl	80002b8 <__aeabi_dsub>
 8014a7a:	4602      	mov	r2, r0
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	4610      	mov	r0, r2
 8014a80:	4619      	mov	r1, r3
 8014a82:	a347      	add	r3, pc, #284	; (adr r3, 8014ba0 <acquire_and_process_data+0x1180>)
 8014a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a88:	f7eb fdce 	bl	8000628 <__aeabi_dmul>
 8014a8c:	4602      	mov	r2, r0
 8014a8e:	460b      	mov	r3, r1
 8014a90:	4610      	mov	r0, r2
 8014a92:	4619      	mov	r1, r3
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8014a9c:	f7ec f874 	bl	8000b88 <__aeabi_d2f>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	6023      	str	r3, [r4, #0]
				data[0][13] = (accMagnitude_STD - 0.2766352751305663) * 5.763399986208959;
 8014aa4:	4b50      	ldr	r3, [pc, #320]	; (8014be8 <acquire_and_process_data+0x11c8>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7eb fd65 	bl	8000578 <__aeabi_f2d>
 8014aae:	a33e      	add	r3, pc, #248	; (adr r3, 8014ba8 <acquire_and_process_data+0x1188>)
 8014ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab4:	f7eb fc00 	bl	80002b8 <__aeabi_dsub>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	4610      	mov	r0, r2
 8014abe:	4619      	mov	r1, r3
 8014ac0:	a33b      	add	r3, pc, #236	; (adr r3, 8014bb0 <acquire_and_process_data+0x1190>)
 8014ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac6:	f7eb fdaf 	bl	8000628 <__aeabi_dmul>
 8014aca:	4602      	mov	r2, r0
 8014acc:	460b      	mov	r3, r1
 8014ace:	4610      	mov	r0, r2
 8014ad0:	4619      	mov	r1, r3
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014ada:	f7ec f855 	bl	8000b88 <__aeabi_d2f>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	6023      	str	r3, [r4, #0]
				data[0][14] = (accMagnitude_MinMax - 1.3165988949163936) * 1.1621726084324315;
 8014ae2:	4b42      	ldr	r3, [pc, #264]	; (8014bec <acquire_and_process_data+0x11cc>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7eb fd46 	bl	8000578 <__aeabi_f2d>
 8014aec:	a332      	add	r3, pc, #200	; (adr r3, 8014bb8 <acquire_and_process_data+0x1198>)
 8014aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af2:	f7eb fbe1 	bl	80002b8 <__aeabi_dsub>
 8014af6:	4602      	mov	r2, r0
 8014af8:	460b      	mov	r3, r1
 8014afa:	4610      	mov	r0, r2
 8014afc:	4619      	mov	r1, r3
 8014afe:	a330      	add	r3, pc, #192	; (adr r3, 8014bc0 <acquire_and_process_data+0x11a0>)
 8014b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b04:	f7eb fd90 	bl	8000628 <__aeabi_dmul>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	4610      	mov	r0, r2
 8014b0e:	4619      	mov	r1, r3
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8014b18:	f7ec f836 	bl	8000b88 <__aeabi_d2f>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	6023      	str	r3, [r4, #0]
				data[0][15] = (accMagnitude_RMS - 1.1134635041015108) * 10.457188751844905;
 8014b20:	4b33      	ldr	r3, [pc, #204]	; (8014bf0 <acquire_and_process_data+0x11d0>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7eb fd27 	bl	8000578 <__aeabi_f2d>
 8014b2a:	a327      	add	r3, pc, #156	; (adr r3, 8014bc8 <acquire_and_process_data+0x11a8>)
 8014b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b30:	f7eb fbc2 	bl	80002b8 <__aeabi_dsub>
 8014b34:	4602      	mov	r2, r0
 8014b36:	460b      	mov	r3, r1
 8014b38:	4610      	mov	r0, r2
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	a324      	add	r3, pc, #144	; (adr r3, 8014bd0 <acquire_and_process_data+0x11b0>)
 8014b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b42:	f7eb fd71 	bl	8000628 <__aeabi_dmul>
 8014b46:	4602      	mov	r2, r0
 8014b48:	460b      	mov	r3, r1
 8014b4a:	4610      	mov	r0, r2
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8014b56:	f7ec f817 	bl	8000b88 <__aeabi_d2f>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	6023      	str	r3, [r4, #0]
			}
  return 0;
 8014b5e:	2300      	movs	r3, #0
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3758      	adds	r7, #88	; 0x58
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bdb0      	pop	{r4, r5, r7, pc}
 8014b68:	552cc7d2 	.word	0x552cc7d2
 8014b6c:	3fcea8ca 	.word	0x3fcea8ca
 8014b70:	d4ce8173 	.word	0xd4ce8173
 8014b74:	401deb44 	.word	0x401deb44
 8014b78:	44618489 	.word	0x44618489
 8014b7c:	3ff4c4c7 	.word	0x3ff4c4c7
 8014b80:	5d1eabc7 	.word	0x5d1eabc7
 8014b84:	3ff50506 	.word	0x3ff50506
 8014b88:	4eb557e4 	.word	0x4eb557e4
 8014b8c:	3fd433d5 	.word	0x3fd433d5
 8014b90:	ad44e35e 	.word	0xad44e35e
 8014b94:	40126c58 	.word	0x40126c58
 8014b98:	9ad5aede 	.word	0x9ad5aede
 8014b9c:	3ff11235 	.word	0x3ff11235
 8014ba0:	aee4243c 	.word	0xaee4243c
 8014ba4:	402fdc81 	.word	0x402fdc81
 8014ba8:	70e6c484 	.word	0x70e6c484
 8014bac:	3fd1b464 	.word	0x3fd1b464
 8014bb0:	b9da2327 	.word	0xb9da2327
 8014bb4:	40170db8 	.word	0x40170db8
 8014bb8:	00b9d9b5 	.word	0x00b9d9b5
 8014bbc:	3ff510ca 	.word	0x3ff510ca
 8014bc0:	4e186390 	.word	0x4e186390
 8014bc4:	3ff29842 	.word	0x3ff29842
 8014bc8:	1b767d23 	.word	0x1b767d23
 8014bcc:	3ff1d0bf 	.word	0x3ff1d0bf
 8014bd0:	a4e28bbd 	.word	0xa4e28bbd
 8014bd4:	4024ea14 	.word	0x4024ea14
 8014bd8:	20003730 	.word	0x20003730
 8014bdc:	20003734 	.word	0x20003734
 8014be0:	20003738 	.word	0x20003738
 8014be4:	2000373c 	.word	0x2000373c
 8014be8:	20003740 	.word	0x20003740
 8014bec:	20003744 	.word	0x20003744
 8014bf0:	20003748 	.word	0x20003748
 8014bf4:	3bb71d4f 	.word	0x3bb71d4f
 8014bf8:	400de9da 	.word	0x400de9da

08014bfc <post_process>:

int post_process(ai_i8* data[])
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b084      	sub	sp, #16
 8014c00:	af02      	add	r7, sp, #8
 8014c02:	6078      	str	r0, [r7, #4]
	snprintf(SendBuffer,BUFSIZE,"Razred: %lu, %s \r\n", (int32_t) *data[0], classes[(int) ((int32_t) *data[0])]);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	f993 3000 	ldrsb.w	r3, [r3]
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	f993 3000 	ldrsb.w	r3, [r3]
 8014c16:	461a      	mov	r2, r3
 8014c18:	4b44      	ldr	r3, [pc, #272]	; (8014d2c <post_process+0x130>)
 8014c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c1e:	9300      	str	r3, [sp, #0]
 8014c20:	460b      	mov	r3, r1
 8014c22:	4a43      	ldr	r2, [pc, #268]	; (8014d30 <post_process+0x134>)
 8014c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014c28:	4842      	ldr	r0, [pc, #264]	; (8014d34 <post_process+0x138>)
 8014c2a:	f006 fd35 	bl	801b698 <sniprintf>
	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8014c2e:	4841      	ldr	r0, [pc, #260]	; (8014d34 <post_process+0x138>)
 8014c30:	f7eb fae6 	bl	8000200 <strlen>
 8014c34:	4603      	mov	r3, r0
 8014c36:	4619      	mov	r1, r3
 8014c38:	483e      	ldr	r0, [pc, #248]	; (8014d34 <post_process+0x138>)
 8014c3a:	f7fe f881 	bl	8012d40 <CDC_Transmit_FS>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8014c3e:	2200      	movs	r2, #0
 8014c40:	2104      	movs	r1, #4
 8014c42:	483d      	ldr	r0, [pc, #244]	; (8014d38 <post_process+0x13c>)
 8014c44:	f7ef fab6 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 8014c48:	2201      	movs	r2, #1
 8014c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014c4e:	483b      	ldr	r0, [pc, #236]	; (8014d3c <post_process+0x140>)
 8014c50:	f7ef fab0 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8014c54:	2200      	movs	r2, #0
 8014c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014c5a:	4839      	ldr	r0, [pc, #228]	; (8014d40 <post_process+0x144>)
 8014c5c:	f7ef faaa 	bl	80041b4 <HAL_GPIO_WritePin>

	switch((int32_t) *data[0])
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	f993 3000 	ldrsb.w	r3, [r3]
 8014c68:	2b04      	cmp	r3, #4
 8014c6a:	d83a      	bhi.n	8014ce2 <post_process+0xe6>
 8014c6c:	a201      	add	r2, pc, #4	; (adr r2, 8014c74 <post_process+0x78>)
 8014c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c72:	bf00      	nop
 8014c74:	08014c89 	.word	0x08014c89
 8014c78:	08014c95 	.word	0x08014c95
 8014c7c:	08014ca3 	.word	0x08014ca3
 8014c80:	08014cb1 	.word	0x08014cb1
 8014c84:	08014cc9 	.word	0x08014cc9
		    {
		        case 0:
		        	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8014c88:	2201      	movs	r2, #1
 8014c8a:	2104      	movs	r1, #4
 8014c8c:	482a      	ldr	r0, [pc, #168]	; (8014d38 <post_process+0x13c>)
 8014c8e:	f7ef fa91 	bl	80041b4 <HAL_GPIO_WritePin>
		            break;
 8014c92:	e026      	b.n	8014ce2 <post_process+0xe6>
		        case 1:
		        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8014c94:	2200      	movs	r2, #0
 8014c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014c9a:	4828      	ldr	r0, [pc, #160]	; (8014d3c <post_process+0x140>)
 8014c9c:	f7ef fa8a 	bl	80041b4 <HAL_GPIO_WritePin>
		        	break;
 8014ca0:	e01f      	b.n	8014ce2 <post_process+0xe6>
		        case 2:
		        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014ca8:	4825      	ldr	r0, [pc, #148]	; (8014d40 <post_process+0x144>)
 8014caa:	f7ef fa83 	bl	80041b4 <HAL_GPIO_WritePin>
		        	break;
 8014cae:	e018      	b.n	8014ce2 <post_process+0xe6>
		        case 3:
		        	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8014cb0:	2201      	movs	r2, #1
 8014cb2:	2104      	movs	r1, #4
 8014cb4:	4820      	ldr	r0, [pc, #128]	; (8014d38 <post_process+0x13c>)
 8014cb6:	f7ef fa7d 	bl	80041b4 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8014cba:	2200      	movs	r2, #0
 8014cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014cc0:	481e      	ldr	r0, [pc, #120]	; (8014d3c <post_process+0x140>)
 8014cc2:	f7ef fa77 	bl	80041b4 <HAL_GPIO_WritePin>
		        	break;
 8014cc6:	e00c      	b.n	8014ce2 <post_process+0xe6>
		        case 4:
		        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8014cc8:	2201      	movs	r2, #1
 8014cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014cce:	481c      	ldr	r0, [pc, #112]	; (8014d40 <post_process+0x144>)
 8014cd0:	f7ef fa70 	bl	80041b4 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014cda:	4818      	ldr	r0, [pc, #96]	; (8014d3c <post_process+0x140>)
 8014cdc:	f7ef fa6a 	bl	80041b4 <HAL_GPIO_WritePin>
		        	break;
 8014ce0:	bf00      	nop
		    }

	///////////////////////////////////////////////////////////////////SD card

	f_open(&SDFile, "Podatki.TXT", FA_OPEN_APPEND | FA_WRITE);
 8014ce2:	2232      	movs	r2, #50	; 0x32
 8014ce4:	4917      	ldr	r1, [pc, #92]	; (8014d44 <post_process+0x148>)
 8014ce6:	4818      	ldr	r0, [pc, #96]	; (8014d48 <post_process+0x14c>)
 8014ce8:	f7fc fc12 	bl	8011510 <f_open>
	f_lseek(&SDFile, f_size(&SDFile));
 8014cec:	4b16      	ldr	r3, [pc, #88]	; (8014d48 <post_process+0x14c>)
 8014cee:	68db      	ldr	r3, [r3, #12]
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	4815      	ldr	r0, [pc, #84]	; (8014d48 <post_process+0x14c>)
 8014cf4:	f7fc fff7 	bl	8011ce6 <f_lseek>

	strcpy(wtext, SendBuffer);
 8014cf8:	490e      	ldr	r1, [pc, #56]	; (8014d34 <post_process+0x138>)
 8014cfa:	4814      	ldr	r0, [pc, #80]	; (8014d4c <post_process+0x150>)
 8014cfc:	f006 fd00 	bl	801b700 <strcpy>

	res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8014d00:	4812      	ldr	r0, [pc, #72]	; (8014d4c <post_process+0x150>)
 8014d02:	f7eb fa7d 	bl	8000200 <strlen>
 8014d06:	4602      	mov	r2, r0
 8014d08:	4b11      	ldr	r3, [pc, #68]	; (8014d50 <post_process+0x154>)
 8014d0a:	4910      	ldr	r1, [pc, #64]	; (8014d4c <post_process+0x150>)
 8014d0c:	480e      	ldr	r0, [pc, #56]	; (8014d48 <post_process+0x14c>)
 8014d0e:	f7fc fdcd 	bl	80118ac <f_write>
 8014d12:	4603      	mov	r3, r0
 8014d14:	461a      	mov	r2, r3
 8014d16:	4b0f      	ldr	r3, [pc, #60]	; (8014d54 <post_process+0x158>)
 8014d18:	701a      	strb	r2, [r3, #0]

	f_close(&SDFile);
 8014d1a:	480b      	ldr	r0, [pc, #44]	; (8014d48 <post_process+0x14c>)
 8014d1c:	f7fc ffb9 	bl	8011c92 <f_close>

	///////////////////////////////////////////////////////////////////

  return 0;
 8014d20:	2300      	movs	r3, #0
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3708      	adds	r7, #8
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	20000190 	.word	0x20000190
 8014d30:	0801e460 	.word	0x0801e460
 8014d34:	20002f8c 	.word	0x20002f8c
 8014d38:	48001400 	.word	0x48001400
 8014d3c:	48001800 	.word	0x48001800
 8014d40:	48000400 	.word	0x48000400
 8014d44:	0801e474 	.word	0x0801e474
 8014d48:	20001120 	.word	0x20001120
 8014d4c:	200001a4 	.word	0x200001a4
 8014d50:	20003760 	.word	0x20003760
 8014d54:	2000375e 	.word	0x2000375e

08014d58 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b084      	sub	sp, #16
 8014d5c:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 5 */

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8014d5e:	2200      	movs	r2, #0
 8014d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014d64:	488d      	ldr	r0, [pc, #564]	; (8014f9c <MX_X_CUBE_AI_Init+0x244>)
 8014d66:	f7ef fa25 	bl	80041b4 <HAL_GPIO_WritePin>
	outdata[0] = 0x0f | 0x80 ; // read whoami
 8014d6a:	4b8d      	ldr	r3, [pc, #564]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014d6c:	228f      	movs	r2, #143	; 0x8f
 8014d6e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8014d70:	f04f 33ff 	mov.w	r3, #4294967295
 8014d74:	9300      	str	r3, [sp, #0]
 8014d76:	2302      	movs	r3, #2
 8014d78:	4a8a      	ldr	r2, [pc, #552]	; (8014fa4 <MX_X_CUBE_AI_Init+0x24c>)
 8014d7a:	4989      	ldr	r1, [pc, #548]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014d7c:	488a      	ldr	r0, [pc, #552]	; (8014fa8 <MX_X_CUBE_AI_Init+0x250>)
 8014d7e:	f7f5 fa77 	bl	800a270 <HAL_SPI_TransmitReceive>
	lis_id = indata[1];
 8014d82:	4b88      	ldr	r3, [pc, #544]	; (8014fa4 <MX_X_CUBE_AI_Init+0x24c>)
 8014d84:	785a      	ldrb	r2, [r3, #1]
 8014d86:	4b89      	ldr	r3, [pc, #548]	; (8014fac <MX_X_CUBE_AI_Init+0x254>)
 8014d88:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8014d8a:	2201      	movs	r2, #1
 8014d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014d90:	4882      	ldr	r0, [pc, #520]	; (8014f9c <MX_X_CUBE_AI_Init+0x244>)
 8014d92:	f7ef fa0f 	bl	80041b4 <HAL_GPIO_WritePin>

	snprintf(SendBuffer,BUFSIZE,"[ID:%02x] \r\n",lis_id);
 8014d96:	4b85      	ldr	r3, [pc, #532]	; (8014fac <MX_X_CUBE_AI_Init+0x254>)
 8014d98:	781b      	ldrb	r3, [r3, #0]
 8014d9a:	4a85      	ldr	r2, [pc, #532]	; (8014fb0 <MX_X_CUBE_AI_Init+0x258>)
 8014d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014da0:	4884      	ldr	r0, [pc, #528]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014da2:	f006 fc79 	bl	801b698 <sniprintf>
	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8014da6:	4883      	ldr	r0, [pc, #524]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014da8:	f7eb fa2a 	bl	8000200 <strlen>
 8014dac:	4603      	mov	r3, r0
 8014dae:	4619      	mov	r1, r3
 8014db0:	4880      	ldr	r0, [pc, #512]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014db2:	f7fd ffc5 	bl	8012d40 <CDC_Transmit_FS>


	// sensor setup (activation and setting frequency)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8014db6:	2200      	movs	r2, #0
 8014db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014dbc:	4877      	ldr	r0, [pc, #476]	; (8014f9c <MX_X_CUBE_AI_Init+0x244>)
 8014dbe:	f7ef f9f9 	bl	80041b4 <HAL_GPIO_WritePin>

	outdata[0] = 0x10 ; // register used for setting up the accelerometer
 8014dc2:	4b77      	ldr	r3, [pc, #476]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014dc4:	2210      	movs	r2, #16
 8014dc6:	701a      	strb	r2, [r3, #0]
	outdata[1] = 0x48 ;//0x4a ;//0x40 ; // set frequency to 104Hz and FS to 4g
 8014dc8:	4b75      	ldr	r3, [pc, #468]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014dca:	2248      	movs	r2, #72	; 0x48
 8014dcc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8014dce:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd2:	9300      	str	r3, [sp, #0]
 8014dd4:	2302      	movs	r3, #2
 8014dd6:	4a73      	ldr	r2, [pc, #460]	; (8014fa4 <MX_X_CUBE_AI_Init+0x24c>)
 8014dd8:	4971      	ldr	r1, [pc, #452]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014dda:	4873      	ldr	r0, [pc, #460]	; (8014fa8 <MX_X_CUBE_AI_Init+0x250>)
 8014ddc:	f7f5 fa48 	bl	800a270 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8014de0:	2201      	movs	r2, #1
 8014de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014de6:	486d      	ldr	r0, [pc, #436]	; (8014f9c <MX_X_CUBE_AI_Init+0x244>)
 8014de8:	f7ef f9e4 	bl	80041b4 <HAL_GPIO_WritePin>


	outdata[0] = 0x15 | 0x80 ; // read CTRL6_C
 8014dec:	4b6c      	ldr	r3, [pc, #432]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014dee:	2295      	movs	r2, #149	; 0x95
 8014df0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8014df2:	2200      	movs	r2, #0
 8014df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014df8:	4868      	ldr	r0, [pc, #416]	; (8014f9c <MX_X_CUBE_AI_Init+0x244>)
 8014dfa:	f7ef f9db 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8014dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8014e02:	9300      	str	r3, [sp, #0]
 8014e04:	2302      	movs	r3, #2
 8014e06:	4a67      	ldr	r2, [pc, #412]	; (8014fa4 <MX_X_CUBE_AI_Init+0x24c>)
 8014e08:	4965      	ldr	r1, [pc, #404]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014e0a:	4867      	ldr	r0, [pc, #412]	; (8014fa8 <MX_X_CUBE_AI_Init+0x250>)
 8014e0c:	f7f5 fa30 	bl	800a270 <HAL_SPI_TransmitReceive>
	uint8_t existingValue = indata[1];
 8014e10:	4b64      	ldr	r3, [pc, #400]	; (8014fa4 <MX_X_CUBE_AI_Init+0x24c>)
 8014e12:	785b      	ldrb	r3, [r3, #1]
 8014e14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8014e16:	2201      	movs	r2, #1
 8014e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014e1c:	485f      	ldr	r0, [pc, #380]	; (8014f9c <MX_X_CUBE_AI_Init+0x244>)
 8014e1e:	f7ef f9c9 	bl	80041b4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8014e22:	2200      	movs	r2, #0
 8014e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014e28:	485c      	ldr	r0, [pc, #368]	; (8014f9c <MX_X_CUBE_AI_Init+0x244>)
 8014e2a:	f7ef f9c3 	bl	80041b4 <HAL_GPIO_WritePin>
	outdata[0] = 0x15 ; // write to register CTRL6_C
 8014e2e:	4b5c      	ldr	r3, [pc, #368]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014e30:	2215      	movs	r2, #21
 8014e32:	701a      	strb	r2, [r3, #0]
	outdata[1] = existingValue | 0x10 ; //disable high performance
 8014e34:	79fb      	ldrb	r3, [r7, #7]
 8014e36:	f043 0310 	orr.w	r3, r3, #16
 8014e3a:	b2da      	uxtb	r2, r3
 8014e3c:	4b58      	ldr	r3, [pc, #352]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014e3e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8014e40:	f04f 33ff 	mov.w	r3, #4294967295
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	2302      	movs	r3, #2
 8014e48:	4a56      	ldr	r2, [pc, #344]	; (8014fa4 <MX_X_CUBE_AI_Init+0x24c>)
 8014e4a:	4955      	ldr	r1, [pc, #340]	; (8014fa0 <MX_X_CUBE_AI_Init+0x248>)
 8014e4c:	4856      	ldr	r0, [pc, #344]	; (8014fa8 <MX_X_CUBE_AI_Init+0x250>)
 8014e4e:	f7f5 fa0f 	bl	800a270 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8014e52:	2201      	movs	r2, #1
 8014e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014e58:	4850      	ldr	r0, [pc, #320]	; (8014f9c <MX_X_CUBE_AI_Init+0x244>)
 8014e5a:	f7ef f9ab 	bl	80041b4 <HAL_GPIO_WritePin>


	///////////////////////////////////////////////////////////////////SD card
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8014e5e:	2200      	movs	r2, #0
 8014e60:	4955      	ldr	r1, [pc, #340]	; (8014fb8 <MX_X_CUBE_AI_Init+0x260>)
 8014e62:	4856      	ldr	r0, [pc, #344]	; (8014fbc <MX_X_CUBE_AI_Init+0x264>)
 8014e64:	f7fc fb0e 	bl	8011484 <f_mount>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d013      	beq.n	8014e96 <MX_X_CUBE_AI_Init+0x13e>
	{
		//Error_Handler();
		snprintf(SendBuffer,BUFSIZE,"Error1 \r\n");
 8014e6e:	4a54      	ldr	r2, [pc, #336]	; (8014fc0 <MX_X_CUBE_AI_Init+0x268>)
 8014e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014e74:	484f      	ldr	r0, [pc, #316]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014e76:	f006 fc0f 	bl	801b698 <sniprintf>
		CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8014e7a:	484e      	ldr	r0, [pc, #312]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014e7c:	f7eb f9c0 	bl	8000200 <strlen>
 8014e80:	4603      	mov	r3, r0
 8014e82:	4619      	mov	r1, r3
 8014e84:	484b      	ldr	r0, [pc, #300]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014e86:	f7fd ff5b 	bl	8012d40 <CDC_Transmit_FS>
		strcpy(errorValue, "Error1 \r\n");
 8014e8a:	4b4e      	ldr	r3, [pc, #312]	; (8014fc4 <MX_X_CUBE_AI_Init+0x26c>)
 8014e8c:	4a4c      	ldr	r2, [pc, #304]	; (8014fc0 <MX_X_CUBE_AI_Init+0x268>)
 8014e8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e90:	c303      	stmia	r3!, {r0, r1}
 8014e92:	801a      	strh	r2, [r3, #0]
 8014e94:	e073      	b.n	8014f7e <MX_X_CUBE_AI_Init+0x226>
	}
	else
	{
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8014e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e9a:	9300      	str	r3, [sp, #0]
 8014e9c:	4b4a      	ldr	r3, [pc, #296]	; (8014fc8 <MX_X_CUBE_AI_Init+0x270>)
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	2107      	movs	r1, #7
 8014ea2:	4845      	ldr	r0, [pc, #276]	; (8014fb8 <MX_X_CUBE_AI_Init+0x260>)
 8014ea4:	f7fd f928 	bl	80120f8 <f_mkfs>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d01f      	beq.n	8014eee <MX_X_CUBE_AI_Init+0x196>
	    {
			//Error_Handler();
			snprintf(SendBuffer,BUFSIZE,"Error2 \r\n");
 8014eae:	4a47      	ldr	r2, [pc, #284]	; (8014fcc <MX_X_CUBE_AI_Init+0x274>)
 8014eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014eb4:	483f      	ldr	r0, [pc, #252]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014eb6:	f006 fbef 	bl	801b698 <sniprintf>
			CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8014eba:	483e      	ldr	r0, [pc, #248]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014ebc:	f7eb f9a0 	bl	8000200 <strlen>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	483b      	ldr	r0, [pc, #236]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014ec6:	f7fd ff3b 	bl	8012d40 <CDC_Transmit_FS>

			FRESULT errorState = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 8014eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ece:	9300      	str	r3, [sp, #0]
 8014ed0:	4b3d      	ldr	r3, [pc, #244]	; (8014fc8 <MX_X_CUBE_AI_Init+0x270>)
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	2107      	movs	r1, #7
 8014ed6:	4838      	ldr	r0, [pc, #224]	; (8014fb8 <MX_X_CUBE_AI_Init+0x260>)
 8014ed8:	f7fd f90e 	bl	80120f8 <f_mkfs>
 8014edc:	4603      	mov	r3, r0
 8014ede:	71bb      	strb	r3, [r7, #6]

			snprintf(errorValue, 20, "Error2 [%d]\r\n", errorState);
 8014ee0:	79bb      	ldrb	r3, [r7, #6]
 8014ee2:	4a3b      	ldr	r2, [pc, #236]	; (8014fd0 <MX_X_CUBE_AI_Init+0x278>)
 8014ee4:	2114      	movs	r1, #20
 8014ee6:	4837      	ldr	r0, [pc, #220]	; (8014fc4 <MX_X_CUBE_AI_Init+0x26c>)
 8014ee8:	f006 fbd6 	bl	801b698 <sniprintf>
 8014eec:	e047      	b.n	8014f7e <MX_X_CUBE_AI_Init+0x226>
	    }
		else
		{
			//Open file for writing (Create)
			if(f_open(&SDFile, "Podatki.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8014eee:	220a      	movs	r2, #10
 8014ef0:	4938      	ldr	r1, [pc, #224]	; (8014fd4 <MX_X_CUBE_AI_Init+0x27c>)
 8014ef2:	4839      	ldr	r0, [pc, #228]	; (8014fd8 <MX_X_CUBE_AI_Init+0x280>)
 8014ef4:	f7fc fb0c 	bl	8011510 <f_open>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d013      	beq.n	8014f26 <MX_X_CUBE_AI_Init+0x1ce>
			{
				//Error_Handler();
				snprintf(SendBuffer,BUFSIZE,"Error3 \r\n");
 8014efe:	4a37      	ldr	r2, [pc, #220]	; (8014fdc <MX_X_CUBE_AI_Init+0x284>)
 8014f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014f04:	482b      	ldr	r0, [pc, #172]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014f06:	f006 fbc7 	bl	801b698 <sniprintf>
				CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8014f0a:	482a      	ldr	r0, [pc, #168]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014f0c:	f7eb f978 	bl	8000200 <strlen>
 8014f10:	4603      	mov	r3, r0
 8014f12:	4619      	mov	r1, r3
 8014f14:	4827      	ldr	r0, [pc, #156]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014f16:	f7fd ff13 	bl	8012d40 <CDC_Transmit_FS>
				strcpy(errorValue, "Error3 \r\n");
 8014f1a:	4b2a      	ldr	r3, [pc, #168]	; (8014fc4 <MX_X_CUBE_AI_Init+0x26c>)
 8014f1c:	4a2f      	ldr	r2, [pc, #188]	; (8014fdc <MX_X_CUBE_AI_Init+0x284>)
 8014f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014f20:	c303      	stmia	r3!, {r0, r1}
 8014f22:	801a      	strh	r2, [r3, #0]
 8014f24:	e02b      	b.n	8014f7e <MX_X_CUBE_AI_Init+0x226>
			}
			else
			{

				//Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8014f26:	482e      	ldr	r0, [pc, #184]	; (8014fe0 <MX_X_CUBE_AI_Init+0x288>)
 8014f28:	f7eb f96a 	bl	8000200 <strlen>
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	4b2d      	ldr	r3, [pc, #180]	; (8014fe4 <MX_X_CUBE_AI_Init+0x28c>)
 8014f30:	492b      	ldr	r1, [pc, #172]	; (8014fe0 <MX_X_CUBE_AI_Init+0x288>)
 8014f32:	4829      	ldr	r0, [pc, #164]	; (8014fd8 <MX_X_CUBE_AI_Init+0x280>)
 8014f34:	f7fc fcba 	bl	80118ac <f_write>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	4b2a      	ldr	r3, [pc, #168]	; (8014fe8 <MX_X_CUBE_AI_Init+0x290>)
 8014f3e:	701a      	strb	r2, [r3, #0]
				if((byteswritten == 0) || (res != FR_OK))
 8014f40:	4b28      	ldr	r3, [pc, #160]	; (8014fe4 <MX_X_CUBE_AI_Init+0x28c>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d003      	beq.n	8014f50 <MX_X_CUBE_AI_Init+0x1f8>
 8014f48:	4b27      	ldr	r3, [pc, #156]	; (8014fe8 <MX_X_CUBE_AI_Init+0x290>)
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d013      	beq.n	8014f78 <MX_X_CUBE_AI_Init+0x220>
				{
					//Error_Handler();
					snprintf(SendBuffer,BUFSIZE,"Error4 \r\n");
 8014f50:	4a26      	ldr	r2, [pc, #152]	; (8014fec <MX_X_CUBE_AI_Init+0x294>)
 8014f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014f56:	4817      	ldr	r0, [pc, #92]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014f58:	f006 fb9e 	bl	801b698 <sniprintf>
					CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8014f5c:	4815      	ldr	r0, [pc, #84]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014f5e:	f7eb f94f 	bl	8000200 <strlen>
 8014f62:	4603      	mov	r3, r0
 8014f64:	4619      	mov	r1, r3
 8014f66:	4813      	ldr	r0, [pc, #76]	; (8014fb4 <MX_X_CUBE_AI_Init+0x25c>)
 8014f68:	f7fd feea 	bl	8012d40 <CDC_Transmit_FS>
					strcpy(errorValue, "Error4 \r\n");
 8014f6c:	4b15      	ldr	r3, [pc, #84]	; (8014fc4 <MX_X_CUBE_AI_Init+0x26c>)
 8014f6e:	4a1f      	ldr	r2, [pc, #124]	; (8014fec <MX_X_CUBE_AI_Init+0x294>)
 8014f70:	ca07      	ldmia	r2, {r0, r1, r2}
 8014f72:	c303      	stmia	r3!, {r0, r1}
 8014f74:	801a      	strh	r2, [r3, #0]
 8014f76:	e002      	b.n	8014f7e <MX_X_CUBE_AI_Init+0x226>
				}
				else
				{

					f_close(&SDFile);
 8014f78:	4817      	ldr	r0, [pc, #92]	; (8014fd8 <MX_X_CUBE_AI_Init+0x280>)
 8014f7a:	f7fc fe8a 	bl	8011c92 <f_close>
				}
			}
		}
	}

	f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8014f7e:	2200      	movs	r2, #0
 8014f80:	490d      	ldr	r1, [pc, #52]	; (8014fb8 <MX_X_CUBE_AI_Init+0x260>)
 8014f82:	480e      	ldr	r0, [pc, #56]	; (8014fbc <MX_X_CUBE_AI_Init+0x264>)
 8014f84:	f7fc fa7e 	bl	8011484 <f_mount>
	///////////////////////////////////////////////////////////////////



  printf("\r\nTEMPLATE - initialization\r\n");
 8014f88:	4819      	ldr	r0, [pc, #100]	; (8014ff0 <MX_X_CUBE_AI_Init+0x298>)
 8014f8a:	f006 fb6d 	bl	801b668 <puts>

  ai_boostrap(data_activations0);
 8014f8e:	4819      	ldr	r0, [pc, #100]	; (8014ff4 <MX_X_CUBE_AI_Init+0x29c>)
 8014f90:	f7fe fc82 	bl	8013898 <ai_boostrap>
    /* USER CODE END 5 */
}
 8014f94:	bf00      	nop
 8014f96:	3708      	adds	r7, #8
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	48001000 	.word	0x48001000
 8014fa0:	20003754 	.word	0x20003754
 8014fa4:	20003750 	.word	0x20003750
 8014fa8:	20000ca0 	.word	0x20000ca0
 8014fac:	20003756 	.word	0x20003756
 8014fb0:	0801e480 	.word	0x0801e480
 8014fb4:	20002f8c 	.word	0x20002f8c
 8014fb8:	20000ee8 	.word	0x20000ee8
 8014fbc:	20000eec 	.word	0x20000eec
 8014fc0:	0801e490 	.word	0x0801e490
 8014fc4:	200002a4 	.word	0x200002a4
 8014fc8:	20003764 	.word	0x20003764
 8014fcc:	0801e49c 	.word	0x0801e49c
 8014fd0:	0801e4a8 	.word	0x0801e4a8
 8014fd4:	0801e474 	.word	0x0801e474
 8014fd8:	20001120 	.word	0x20001120
 8014fdc:	0801e4b8 	.word	0x0801e4b8
 8014fe0:	200001a4 	.word	0x200001a4
 8014fe4:	20003760 	.word	0x20003760
 8014fe8:	2000375e 	.word	0x2000375e
 8014fec:	0801e4c4 	.word	0x0801e4c4
 8014ff0:	0801e4d0 	.word	0x0801e4d0
 8014ff4:	200002b8 	.word	0x200002b8

08014ff8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b082      	sub	sp, #8
 8014ffc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8014ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8015002:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 8015004:	4816      	ldr	r0, [pc, #88]	; (8015060 <MX_X_CUBE_AI_Process+0x68>)
 8015006:	f006 fb2f 	bl	801b668 <puts>

  if (svm) {
 801500a:	4b16      	ldr	r3, [pc, #88]	; (8015064 <MX_X_CUBE_AI_Process+0x6c>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d013      	beq.n	801503a <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8015012:	4815      	ldr	r0, [pc, #84]	; (8015068 <MX_X_CUBE_AI_Process+0x70>)
 8015014:	f7fe fd04 	bl	8013a20 <acquire_and_process_data>
 8015018:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d102      	bne.n	8015026 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8015020:	f7fe fc9e 	bl	8013960 <ai_run>
 8015024:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d103      	bne.n	8015034 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 801502c:	480f      	ldr	r0, [pc, #60]	; (801506c <MX_X_CUBE_AI_Process+0x74>)
 801502e:	f7ff fde5 	bl	8014bfc <post_process>
 8015032:	6078      	str	r0, [r7, #4]
    } while (res==0);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d0eb      	beq.n	8015012 <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00a      	beq.n	8015056 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8015040:	2311      	movs	r3, #17
 8015042:	703b      	strb	r3, [r7, #0]
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	2210      	movs	r2, #16
 8015048:	f362 231f 	bfi	r3, r2, #8, #24
 801504c:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 801504e:	4908      	ldr	r1, [pc, #32]	; (8015070 <MX_X_CUBE_AI_Process+0x78>)
 8015050:	6838      	ldr	r0, [r7, #0]
 8015052:	f7fe fc01 	bl	8013858 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8015056:	bf00      	nop
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	0801e4f0 	.word	0x0801e4f0
 8015064:	2000453c 	.word	0x2000453c
 8015068:	20003964 	.word	0x20003964
 801506c:	20003968 	.word	0x20003968
 8015070:	0801e50c 	.word	0x0801e50c

08015074 <svm_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool svm_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_svm_activations_map, 1, params)) {
 801507e:	683a      	ldr	r2, [r7, #0]
 8015080:	2101      	movs	r1, #1
 8015082:	4827      	ldr	r0, [pc, #156]	; (8015120 <svm_configure_activations+0xac>)
 8015084:	f000 faec 	bl	8015660 <ai_platform_get_activations_map>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d03d      	beq.n	801510a <svm_configure_activations+0x96>
    /* Updating activations (byte) offsets */
    
    float_input_output_array.data = AI_PTR(g_svm_activations_map[0] + 0);
 801508e:	4b24      	ldr	r3, [pc, #144]	; (8015120 <svm_configure_activations+0xac>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	4a24      	ldr	r2, [pc, #144]	; (8015124 <svm_configure_activations+0xb0>)
 8015094:	6093      	str	r3, [r2, #8]
    float_input_output_array.data_start = AI_PTR(g_svm_activations_map[0] + 0);
 8015096:	4b22      	ldr	r3, [pc, #136]	; (8015120 <svm_configure_activations+0xac>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	4a22      	ldr	r2, [pc, #136]	; (8015124 <svm_configure_activations+0xb0>)
 801509c:	60d3      	str	r3, [r2, #12]
    
    label_scratch0_array.data = AI_PTR(g_svm_activations_map[0] + 64);
 801509e:	4b20      	ldr	r3, [pc, #128]	; (8015120 <svm_configure_activations+0xac>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	3340      	adds	r3, #64	; 0x40
 80150a4:	4a20      	ldr	r2, [pc, #128]	; (8015128 <svm_configure_activations+0xb4>)
 80150a6:	6093      	str	r3, [r2, #8]
    label_scratch0_array.data_start = AI_PTR(g_svm_activations_map[0] + 64);
 80150a8:	4b1d      	ldr	r3, [pc, #116]	; (8015120 <svm_configure_activations+0xac>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	3340      	adds	r3, #64	; 0x40
 80150ae:	4a1e      	ldr	r2, [pc, #120]	; (8015128 <svm_configure_activations+0xb4>)
 80150b0:	60d3      	str	r3, [r2, #12]
    
    label_output0_array.data = AI_PTR(g_svm_activations_map[0] + 2980);
 80150b2:	4b1b      	ldr	r3, [pc, #108]	; (8015120 <svm_configure_activations+0xac>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 80150ba:	4a1c      	ldr	r2, [pc, #112]	; (801512c <svm_configure_activations+0xb8>)
 80150bc:	6093      	str	r3, [r2, #8]
    label_output0_array.data_start = AI_PTR(g_svm_activations_map[0] + 2980);
 80150be:	4b18      	ldr	r3, [pc, #96]	; (8015120 <svm_configure_activations+0xac>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 80150c6:	4a19      	ldr	r2, [pc, #100]	; (801512c <svm_configure_activations+0xb8>)
 80150c8:	60d3      	str	r3, [r2, #12]
    
    label_output1_array.data = AI_PTR(g_svm_activations_map[0] + 2984);
 80150ca:	4b15      	ldr	r3, [pc, #84]	; (8015120 <svm_configure_activations+0xac>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 80150d2:	4a17      	ldr	r2, [pc, #92]	; (8015130 <svm_configure_activations+0xbc>)
 80150d4:	6093      	str	r3, [r2, #8]
    label_output1_array.data_start = AI_PTR(g_svm_activations_map[0] + 2984);
 80150d6:	4b12      	ldr	r3, [pc, #72]	; (8015120 <svm_configure_activations+0xac>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 80150de:	4a14      	ldr	r2, [pc, #80]	; (8015130 <svm_configure_activations+0xbc>)
 80150e0:	60d3      	str	r3, [r2, #12]
    
    output_probability_output_array.data = AI_PTR(g_svm_activations_map[0] + 0);
 80150e2:	4b0f      	ldr	r3, [pc, #60]	; (8015120 <svm_configure_activations+0xac>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	4a13      	ldr	r2, [pc, #76]	; (8015134 <svm_configure_activations+0xc0>)
 80150e8:	6093      	str	r3, [r2, #8]
    output_probability_output_array.data_start = AI_PTR(g_svm_activations_map[0] + 0);
 80150ea:	4b0d      	ldr	r3, [pc, #52]	; (8015120 <svm_configure_activations+0xac>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	4a11      	ldr	r2, [pc, #68]	; (8015134 <svm_configure_activations+0xc0>)
 80150f0:	60d3      	str	r3, [r2, #12]
    
    output_label_output_array.data = AI_PTR(g_svm_activations_map[0] + 40);
 80150f2:	4b0b      	ldr	r3, [pc, #44]	; (8015120 <svm_configure_activations+0xac>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	3328      	adds	r3, #40	; 0x28
 80150f8:	4a0f      	ldr	r2, [pc, #60]	; (8015138 <svm_configure_activations+0xc4>)
 80150fa:	6093      	str	r3, [r2, #8]
    output_label_output_array.data_start = AI_PTR(g_svm_activations_map[0] + 40);
 80150fc:	4b08      	ldr	r3, [pc, #32]	; (8015120 <svm_configure_activations+0xac>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	3328      	adds	r3, #40	; 0x28
 8015102:	4a0d      	ldr	r2, [pc, #52]	; (8015138 <svm_configure_activations+0xc4>)
 8015104:	60d3      	str	r3, [r2, #12]
    
    return true;
 8015106:	2301      	movs	r3, #1
 8015108:	e005      	b.n	8015116 <svm_configure_activations+0xa2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801510a:	2213      	movs	r2, #19
 801510c:	2130      	movs	r1, #48	; 0x30
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f000 fb8a 	bl	8015828 <ai_platform_network_set_error>
  return false;
 8015114:	2300      	movs	r3, #0
}
 8015116:	4618      	mov	r0, r3
 8015118:	3708      	adds	r7, #8
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	20004548 	.word	0x20004548
 8015124:	2000030c 	.word	0x2000030c
 8015128:	200002cc 	.word	0x200002cc
 801512c:	2000031c 	.word	0x2000031c
 8015130:	2000033c 	.word	0x2000033c
 8015134:	2000034c 	.word	0x2000034c
 8015138:	2000036c 	.word	0x2000036c

0801513c <svm_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool svm_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b082      	sub	sp, #8
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_svm_weights_map, 1, params)) {
 8015146:	683a      	ldr	r2, [r7, #0]
 8015148:	2101      	movs	r1, #1
 801514a:	484a      	ldr	r0, [pc, #296]	; (8015274 <svm_configure_weights+0x138>)
 801514c:	f000 fa34 	bl	80155b8 <ai_platform_get_weights_map>
 8015150:	4603      	mov	r3, r0
 8015152:	2b00      	cmp	r3, #0
 8015154:	f000 8084 	beq.w	8015260 <svm_configure_weights+0x124>
    /* Updating weights (byte) offsets */
    
    label_rho_array.format |= AI_FMT_FLAG_CONST;
 8015158:	4b47      	ldr	r3, [pc, #284]	; (8015278 <svm_configure_weights+0x13c>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015160:	4a45      	ldr	r2, [pc, #276]	; (8015278 <svm_configure_weights+0x13c>)
 8015162:	6013      	str	r3, [r2, #0]
    label_rho_array.data = AI_PTR(g_svm_weights_map[0] + 0);
 8015164:	4b43      	ldr	r3, [pc, #268]	; (8015274 <svm_configure_weights+0x138>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4a43      	ldr	r2, [pc, #268]	; (8015278 <svm_configure_weights+0x13c>)
 801516a:	6093      	str	r3, [r2, #8]
    label_rho_array.data_start = AI_PTR(g_svm_weights_map[0] + 0);
 801516c:	4b41      	ldr	r3, [pc, #260]	; (8015274 <svm_configure_weights+0x138>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	4a41      	ldr	r2, [pc, #260]	; (8015278 <svm_configure_weights+0x13c>)
 8015172:	60d3      	str	r3, [r2, #12]
    
    label_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 8015174:	4b41      	ldr	r3, [pc, #260]	; (801527c <svm_configure_weights+0x140>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801517c:	4a3f      	ldr	r2, [pc, #252]	; (801527c <svm_configure_weights+0x140>)
 801517e:	6013      	str	r3, [r2, #0]
    label_classlabels_ints_array.data = AI_PTR(g_svm_weights_map[0] + 40);
 8015180:	4b3c      	ldr	r3, [pc, #240]	; (8015274 <svm_configure_weights+0x138>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	3328      	adds	r3, #40	; 0x28
 8015186:	4a3d      	ldr	r2, [pc, #244]	; (801527c <svm_configure_weights+0x140>)
 8015188:	6093      	str	r3, [r2, #8]
    label_classlabels_ints_array.data_start = AI_PTR(g_svm_weights_map[0] + 40);
 801518a:	4b3a      	ldr	r3, [pc, #232]	; (8015274 <svm_configure_weights+0x138>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	3328      	adds	r3, #40	; 0x28
 8015190:	4a3a      	ldr	r2, [pc, #232]	; (801527c <svm_configure_weights+0x140>)
 8015192:	60d3      	str	r3, [r2, #12]
    
    label_vectors_per_class_array.format |= AI_FMT_FLAG_CONST;
 8015194:	4b3a      	ldr	r3, [pc, #232]	; (8015280 <svm_configure_weights+0x144>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801519c:	4a38      	ldr	r2, [pc, #224]	; (8015280 <svm_configure_weights+0x144>)
 801519e:	6013      	str	r3, [r2, #0]
    label_vectors_per_class_array.data = AI_PTR(g_svm_weights_map[0] + 48);
 80151a0:	4b34      	ldr	r3, [pc, #208]	; (8015274 <svm_configure_weights+0x138>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	3330      	adds	r3, #48	; 0x30
 80151a6:	4a36      	ldr	r2, [pc, #216]	; (8015280 <svm_configure_weights+0x144>)
 80151a8:	6093      	str	r3, [r2, #8]
    label_vectors_per_class_array.data_start = AI_PTR(g_svm_weights_map[0] + 48);
 80151aa:	4b32      	ldr	r3, [pc, #200]	; (8015274 <svm_configure_weights+0x138>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	3330      	adds	r3, #48	; 0x30
 80151b0:	4a33      	ldr	r2, [pc, #204]	; (8015280 <svm_configure_weights+0x144>)
 80151b2:	60d3      	str	r3, [r2, #12]
    
    label_prob_a_array.format |= AI_FMT_FLAG_CONST;
 80151b4:	4b33      	ldr	r3, [pc, #204]	; (8015284 <svm_configure_weights+0x148>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80151bc:	4a31      	ldr	r2, [pc, #196]	; (8015284 <svm_configure_weights+0x148>)
 80151be:	6013      	str	r3, [r2, #0]
    label_prob_a_array.data = AI_PTR(g_svm_weights_map[0] + 56);
 80151c0:	4b2c      	ldr	r3, [pc, #176]	; (8015274 <svm_configure_weights+0x138>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	3338      	adds	r3, #56	; 0x38
 80151c6:	4a2f      	ldr	r2, [pc, #188]	; (8015284 <svm_configure_weights+0x148>)
 80151c8:	6093      	str	r3, [r2, #8]
    label_prob_a_array.data_start = AI_PTR(g_svm_weights_map[0] + 56);
 80151ca:	4b2a      	ldr	r3, [pc, #168]	; (8015274 <svm_configure_weights+0x138>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	3338      	adds	r3, #56	; 0x38
 80151d0:	4a2c      	ldr	r2, [pc, #176]	; (8015284 <svm_configure_weights+0x148>)
 80151d2:	60d3      	str	r3, [r2, #12]
    
    label_prob_b_array.format |= AI_FMT_FLAG_CONST;
 80151d4:	4b2c      	ldr	r3, [pc, #176]	; (8015288 <svm_configure_weights+0x14c>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80151dc:	4a2a      	ldr	r2, [pc, #168]	; (8015288 <svm_configure_weights+0x14c>)
 80151de:	6013      	str	r3, [r2, #0]
    label_prob_b_array.data = AI_PTR(g_svm_weights_map[0] + 96);
 80151e0:	4b24      	ldr	r3, [pc, #144]	; (8015274 <svm_configure_weights+0x138>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	3360      	adds	r3, #96	; 0x60
 80151e6:	4a28      	ldr	r2, [pc, #160]	; (8015288 <svm_configure_weights+0x14c>)
 80151e8:	6093      	str	r3, [r2, #8]
    label_prob_b_array.data_start = AI_PTR(g_svm_weights_map[0] + 96);
 80151ea:	4b22      	ldr	r3, [pc, #136]	; (8015274 <svm_configure_weights+0x138>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	3360      	adds	r3, #96	; 0x60
 80151f0:	4a25      	ldr	r2, [pc, #148]	; (8015288 <svm_configure_weights+0x14c>)
 80151f2:	60d3      	str	r3, [r2, #12]
    
    output_probability_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 80151f4:	4b25      	ldr	r3, [pc, #148]	; (801528c <svm_configure_weights+0x150>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80151fc:	4a23      	ldr	r2, [pc, #140]	; (801528c <svm_configure_weights+0x150>)
 80151fe:	6013      	str	r3, [r2, #0]
    output_probability_classlabels_ints_array.data = AI_PTR(g_svm_weights_map[0] + 136);
 8015200:	4b1c      	ldr	r3, [pc, #112]	; (8015274 <svm_configure_weights+0x138>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	3388      	adds	r3, #136	; 0x88
 8015206:	4a21      	ldr	r2, [pc, #132]	; (801528c <svm_configure_weights+0x150>)
 8015208:	6093      	str	r3, [r2, #8]
    output_probability_classlabels_ints_array.data_start = AI_PTR(g_svm_weights_map[0] + 136);
 801520a:	4b1a      	ldr	r3, [pc, #104]	; (8015274 <svm_configure_weights+0x138>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	3388      	adds	r3, #136	; 0x88
 8015210:	4a1e      	ldr	r2, [pc, #120]	; (801528c <svm_configure_weights+0x150>)
 8015212:	60d3      	str	r3, [r2, #12]
    
    label_coefficients_array.format |= AI_FMT_FLAG_CONST;
 8015214:	4b1e      	ldr	r3, [pc, #120]	; (8015290 <svm_configure_weights+0x154>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801521c:	4a1c      	ldr	r2, [pc, #112]	; (8015290 <svm_configure_weights+0x154>)
 801521e:	6013      	str	r3, [r2, #0]
    label_coefficients_array.data = AI_PTR(g_svm_weights_map[0] + 144);
 8015220:	4b14      	ldr	r3, [pc, #80]	; (8015274 <svm_configure_weights+0x138>)
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	3390      	adds	r3, #144	; 0x90
 8015226:	4a1a      	ldr	r2, [pc, #104]	; (8015290 <svm_configure_weights+0x154>)
 8015228:	6093      	str	r3, [r2, #8]
    label_coefficients_array.data_start = AI_PTR(g_svm_weights_map[0] + 144);
 801522a:	4b12      	ldr	r3, [pc, #72]	; (8015274 <svm_configure_weights+0x138>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	3390      	adds	r3, #144	; 0x90
 8015230:	4a17      	ldr	r2, [pc, #92]	; (8015290 <svm_configure_weights+0x154>)
 8015232:	60d3      	str	r3, [r2, #12]
    
    label_support_vectors_array.format |= AI_FMT_FLAG_CONST;
 8015234:	4b17      	ldr	r3, [pc, #92]	; (8015294 <svm_configure_weights+0x158>)
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801523c:	4a15      	ldr	r2, [pc, #84]	; (8015294 <svm_configure_weights+0x158>)
 801523e:	6013      	str	r3, [r2, #0]
    label_support_vectors_array.data = AI_PTR(g_svm_weights_map[0] + 10640);
 8015240:	4b0c      	ldr	r3, [pc, #48]	; (8015274 <svm_configure_weights+0x138>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
 8015248:	3310      	adds	r3, #16
 801524a:	4a12      	ldr	r2, [pc, #72]	; (8015294 <svm_configure_weights+0x158>)
 801524c:	6093      	str	r3, [r2, #8]
    label_support_vectors_array.data_start = AI_PTR(g_svm_weights_map[0] + 10640);
 801524e:	4b09      	ldr	r3, [pc, #36]	; (8015274 <svm_configure_weights+0x138>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
 8015256:	3310      	adds	r3, #16
 8015258:	4a0e      	ldr	r2, [pc, #56]	; (8015294 <svm_configure_weights+0x158>)
 801525a:	60d3      	str	r3, [r2, #12]
    
    return true;
 801525c:	2301      	movs	r3, #1
 801525e:	e005      	b.n	801526c <svm_configure_weights+0x130>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8015260:	2212      	movs	r2, #18
 8015262:	2130      	movs	r1, #48	; 0x30
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f000 fadf 	bl	8015828 <ai_platform_network_set_error>
  return false;
 801526a:	2300      	movs	r3, #0
}
 801526c:	4618      	mov	r0, r3
 801526e:	3708      	adds	r7, #8
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	2000454c 	.word	0x2000454c
 8015278:	200002bc 	.word	0x200002bc
 801527c:	200002dc 	.word	0x200002dc
 8015280:	200002ec 	.word	0x200002ec
 8015284:	200002fc 	.word	0x200002fc
 8015288:	2000032c 	.word	0x2000032c
 801528c:	2000035c 	.word	0x2000035c
 8015290:	2000037c 	.word	0x2000037c
 8015294:	2000038c 	.word	0x2000038c

08015298 <ai_svm_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_svm_get_error(ai_handle network)
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b082      	sub	sp, #8
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f000 fa53 	bl	801574c <ai_platform_network_get_error>
 80152a6:	4603      	mov	r3, r0
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3708      	adds	r7, #8
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <ai_svm_create>:

AI_API_ENTRY
ai_error ai_svm_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af02      	add	r7, sp, #8
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80152ba:	2300      	movs	r3, #0
 80152bc:	9301      	str	r3, [sp, #4]
 80152be:	2305      	movs	r3, #5
 80152c0:	9300      	str	r3, [sp, #0]
 80152c2:	2301      	movs	r3, #1
 80152c4:	4a04      	ldr	r2, [pc, #16]	; (80152d8 <ai_svm_create+0x28>)
 80152c6:	6839      	ldr	r1, [r7, #0]
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	f000 fc59 	bl	8015b80 <ai_platform_network_create>
 80152ce:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3708      	adds	r7, #8
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	200008b4 	.word	0x200008b4

080152dc <ai_svm_create_and_init>:

AI_API_ENTRY
ai_error ai_svm_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b096      	sub	sp, #88	; 0x58
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	60f8      	str	r0, [r7, #12]
 80152e4:	60b9      	str	r1, [r7, #8]
 80152e6:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_svm_create(network, AI_SVM_DATA_CONFIG);
 80152e8:	2100      	movs	r1, #0
 80152ea:	68f8      	ldr	r0, [r7, #12]
 80152ec:	f7ff ffe0 	bl	80152b0 <ai_svm_create>
 80152f0:	4603      	mov	r3, r0
 80152f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80152f4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d001      	beq.n	8015300 <ai_svm_create_and_init+0x24>
        return err;
 80152fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152fe:	e05d      	b.n	80153bc <ai_svm_create_and_init+0xe0>
    if (ai_svm_data_params_get(&params) != true) {
 8015300:	f107 0314 	add.w	r3, r7, #20
 8015304:	4618      	mov	r0, r3
 8015306:	f000 f8dd 	bl	80154c4 <ai_svm_data_params_get>
 801530a:	4603      	mov	r3, r0
 801530c:	f083 0301 	eor.w	r3, r3, #1
 8015310:	b2db      	uxtb	r3, r3
 8015312:	2b00      	cmp	r3, #0
 8015314:	d008      	beq.n	8015328 <ai_svm_create_and_init+0x4c>
        err = ai_svm_get_error(*network);
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	4618      	mov	r0, r3
 801531c:	f7ff ffbc 	bl	8015298 <ai_svm_get_error>
 8015320:	4603      	mov	r3, r0
 8015322:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8015324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015326:	e049      	b.n	80153bc <ai_svm_create_and_init+0xe0>
    }
#if defined(AI_SVM_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d016      	beq.n	801535c <ai_svm_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 801532e:	2300      	movs	r3, #0
 8015330:	657b      	str	r3, [r7, #84]	; 0x54
 8015332:	e00e      	b.n	8015352 <ai_svm_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8015334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015338:	009b      	lsls	r3, r3, #2
 801533a:	68ba      	ldr	r2, [r7, #8]
 801533c:	4413      	add	r3, r2
 801533e:	681a      	ldr	r2, [r3, #0]
 8015340:	f107 0314 	add.w	r3, r7, #20
 8015344:	330c      	adds	r3, #12
 8015346:	4618      	mov	r0, r3
 8015348:	f000 f922 	bl	8015590 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 801534c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801534e:	3301      	adds	r3, #1
 8015350:	657b      	str	r3, [r7, #84]	; 0x54
 8015352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015354:	461a      	mov	r2, r3
 8015356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015358:	4293      	cmp	r3, r2
 801535a:	dbeb      	blt.n	8015334 <ai_svm_create_and_init+0x58>
    }
#endif
#if defined(AI_SVM_DATA_WEIGHTS_COUNT)
    if (weights) {
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d016      	beq.n	8015390 <ai_svm_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8015362:	2300      	movs	r3, #0
 8015364:	653b      	str	r3, [r7, #80]	; 0x50
 8015366:	e00e      	b.n	8015386 <ai_svm_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8015368:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801536a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801536c:	009b      	lsls	r3, r3, #2
 801536e:	687a      	ldr	r2, [r7, #4]
 8015370:	4413      	add	r3, r2
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	f107 0314 	add.w	r3, r7, #20
 8015378:	3304      	adds	r3, #4
 801537a:	4618      	mov	r0, r3
 801537c:	f000 f908 	bl	8015590 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8015380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015382:	3301      	adds	r3, #1
 8015384:	653b      	str	r3, [r7, #80]	; 0x50
 8015386:	8b7b      	ldrh	r3, [r7, #26]
 8015388:	461a      	mov	r2, r3
 801538a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801538c:	4293      	cmp	r3, r2
 801538e:	dbeb      	blt.n	8015368 <ai_svm_create_and_init+0x8c>
    }
#endif
    if (ai_svm_init(*network, &params) != true) {
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	f107 0214 	add.w	r2, r7, #20
 8015398:	4611      	mov	r1, r2
 801539a:	4618      	mov	r0, r3
 801539c:	f000 f846 	bl	801542c <ai_svm_init>
 80153a0:	4603      	mov	r3, r0
 80153a2:	f083 0301 	eor.w	r3, r3, #1
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d006      	beq.n	80153ba <ai_svm_create_and_init+0xde>
        err = ai_svm_get_error(*network);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7ff ff71 	bl	8015298 <ai_svm_get_error>
 80153b6:	4603      	mov	r3, r0
 80153b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80153ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3758      	adds	r7, #88	; 0x58
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}

080153c4 <ai_svm_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_svm_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d104      	bne.n	80153de <ai_svm_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80153d4:	4b06      	ldr	r3, [pc, #24]	; (80153f0 <ai_svm_inputs_get+0x2c>)
 80153d6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	4a06      	ldr	r2, [pc, #24]	; (80153f4 <ai_svm_inputs_get+0x30>)
 80153dc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80153de:	6839      	ldr	r1, [r7, #0]
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f000 fa27 	bl	8015834 <ai_platform_inputs_get>
 80153e6:	4603      	mov	r3, r0
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}
 80153f0:	200008b4 	.word	0x200008b4
 80153f4:	a1c00100 	.word	0xa1c00100

080153f8 <ai_svm_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_svm_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d104      	bne.n	8015412 <ai_svm_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8015408:	4b06      	ldr	r3, [pc, #24]	; (8015424 <ai_svm_outputs_get+0x2c>)
 801540a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	4a06      	ldr	r2, [pc, #24]	; (8015428 <ai_svm_outputs_get+0x30>)
 8015410:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8015412:	6839      	ldr	r1, [r7, #0]
 8015414:	6878      	ldr	r0, [r7, #4]
 8015416:	f000 fae3 	bl	80159e0 <ai_platform_outputs_get>
 801541a:	4603      	mov	r3, r0
}
 801541c:	4618      	mov	r0, r3
 801541e:	3708      	adds	r7, #8
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}
 8015424:	200008b4 	.word	0x200008b4
 8015428:	a1c00100 	.word	0xa1c00100

0801542c <ai_svm_init>:
}

AI_API_ENTRY
ai_bool ai_svm_init(
  ai_handle network, const ai_network_params* params)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b084      	sub	sp, #16
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
 8015434:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8015436:	6839      	ldr	r1, [r7, #0]
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f000 fc77 	bl	8015d2c <ai_platform_network_init>
 801543e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d101      	bne.n	801544a <ai_svm_init+0x1e>
 8015446:	2300      	movs	r3, #0
 8015448:	e028      	b.n	801549c <ai_svm_init+0x70>

  ai_bool ok = true;
 801544a:	2301      	movs	r3, #1
 801544c:	72fb      	strb	r3, [r7, #11]
  ok &= svm_configure_weights(net_ctx, params);
 801544e:	6839      	ldr	r1, [r7, #0]
 8015450:	68f8      	ldr	r0, [r7, #12]
 8015452:	f7ff fe73 	bl	801513c <svm_configure_weights>
 8015456:	4603      	mov	r3, r0
 8015458:	461a      	mov	r2, r3
 801545a:	7afb      	ldrb	r3, [r7, #11]
 801545c:	4013      	ands	r3, r2
 801545e:	2b00      	cmp	r3, #0
 8015460:	bf14      	ite	ne
 8015462:	2301      	movne	r3, #1
 8015464:	2300      	moveq	r3, #0
 8015466:	72fb      	strb	r3, [r7, #11]
  ok &= svm_configure_activations(net_ctx, params);
 8015468:	6839      	ldr	r1, [r7, #0]
 801546a:	68f8      	ldr	r0, [r7, #12]
 801546c:	f7ff fe02 	bl	8015074 <svm_configure_activations>
 8015470:	4603      	mov	r3, r0
 8015472:	461a      	mov	r2, r3
 8015474:	7afb      	ldrb	r3, [r7, #11]
 8015476:	4013      	ands	r3, r2
 8015478:	2b00      	cmp	r3, #0
 801547a:	bf14      	ite	ne
 801547c:	2301      	movne	r3, #1
 801547e:	2300      	moveq	r3, #0
 8015480:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f000 fd40 	bl	8015f08 <ai_platform_network_post_init>
 8015488:	4603      	mov	r3, r0
 801548a:	461a      	mov	r2, r3
 801548c:	7afb      	ldrb	r3, [r7, #11]
 801548e:	4013      	ands	r3, r2
 8015490:	2b00      	cmp	r3, #0
 8015492:	bf14      	ite	ne
 8015494:	2301      	movne	r3, #1
 8015496:	2300      	moveq	r3, #0
 8015498:	72fb      	strb	r3, [r7, #11]

  return ok;
 801549a:	7afb      	ldrb	r3, [r7, #11]
}
 801549c:	4618      	mov	r0, r3
 801549e:	3710      	adds	r7, #16
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}

080154a4 <ai_svm_run>:


AI_API_ENTRY
ai_i32 ai_svm_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b084      	sub	sp, #16
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	60f8      	str	r0, [r7, #12]
 80154ac:	60b9      	str	r1, [r7, #8]
 80154ae:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80154b0:	687a      	ldr	r2, [r7, #4]
 80154b2:	68b9      	ldr	r1, [r7, #8]
 80154b4:	68f8      	ldr	r0, [r7, #12]
 80154b6:	f000 fdaf 	bl	8016018 <ai_platform_network_process>
 80154ba:	4603      	mov	r3, r0
}
 80154bc:	4618      	mov	r0, r3
 80154be:	3710      	adds	r7, #16
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}

080154c4 <ai_svm_data_params_get>:
 * @ingroup svm_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_svm_data_params_get(ai_network_params* params)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b086      	sub	sp, #24
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d101      	bne.n	80154d6 <ai_svm_data_params_get+0x12>
 80154d2:	2300      	movs	r3, #0
 80154d4:	e016      	b.n	8015504 <ai_svm_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80154d6:	4a0d      	ldr	r2, [pc, #52]	; (801550c <ai_svm_data_params_get+0x48>)
 80154d8:	f107 0310 	add.w	r3, r7, #16
 80154dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154e0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SVM_DATA_ACTIVATIONS_COUNT, g_svm_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80154e4:	4a0a      	ldr	r2, [pc, #40]	; (8015510 <ai_svm_data_params_get+0x4c>)
 80154e6:	f107 0308 	add.w	r3, r7, #8
 80154ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154ee:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SVM_DATA_WEIGHTS_COUNT, g_svm_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80154f2:	f107 0210 	add.w	r2, r7, #16
 80154f6:	f107 0308 	add.w	r3, r7, #8
 80154fa:	4619      	mov	r1, r3
 80154fc:	6878      	ldr	r0, [r7, #4]
 80154fe:	f000 f903 	bl	8015708 <ai_platform_bind_network_params>
 8015502:	4603      	mov	r3, r0
}
 8015504:	4618      	mov	r0, r3
 8015506:	3718      	adds	r7, #24
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	0801e540 	.word	0x0801e540
 8015510:	0801e548 	.word	0x0801e548

08015514 <ai_buffer_get_size>:
 8015514:	b378      	cbz	r0, 8015576 <ai_buffer_get_size+0x62>
 8015516:	b410      	push	{r4}
 8015518:	6803      	ldr	r3, [r0, #0]
 801551a:	4a17      	ldr	r2, [pc, #92]	; (8015578 <ai_buffer_get_size+0x64>)
 801551c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8015520:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8015524:	4293      	cmp	r3, r2
 8015526:	d01e      	beq.n	8015566 <ai_buffer_get_size+0x52>
 8015528:	6984      	ldr	r4, [r0, #24]
 801552a:	6862      	ldr	r2, [r4, #4]
 801552c:	7d03      	ldrb	r3, [r0, #20]
 801552e:	6941      	ldr	r1, [r0, #20]
 8015530:	f1a3 0301 	sub.w	r3, r3, #1
 8015534:	fab3 f383 	clz	r3, r3
 8015538:	095b      	lsrs	r3, r3, #5
 801553a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801553e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8015542:	da0b      	bge.n	801555c <ai_buffer_get_size+0x48>
 8015544:	2b01      	cmp	r3, #1
 8015546:	d102      	bne.n	801554e <ai_buffer_get_size+0x3a>
 8015548:	2802      	cmp	r0, #2
 801554a:	d007      	beq.n	801555c <ai_buffer_get_size+0x48>
 801554c:	2302      	movs	r3, #2
 801554e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8015552:	3301      	adds	r3, #1
 8015554:	4298      	cmp	r0, r3
 8015556:	fb01 f202 	mul.w	r2, r1, r2
 801555a:	d1f3      	bne.n	8015544 <ai_buffer_get_size+0x30>
 801555c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8015560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015564:	4770      	bx	lr
 8015566:	2900      	cmp	r1, #0
 8015568:	d0de      	beq.n	8015528 <ai_buffer_get_size+0x14>
 801556a:	6984      	ldr	r4, [r0, #24]
 801556c:	6863      	ldr	r3, [r4, #4]
 801556e:	331f      	adds	r3, #31
 8015570:	f023 021f 	bic.w	r2, r3, #31
 8015574:	e7da      	b.n	801552c <ai_buffer_get_size+0x18>
 8015576:	4770      	bx	lr
 8015578:	000400c0 	.word	0x000400c0

0801557c <ai_buffer_array_sane>:
 801557c:	b138      	cbz	r0, 801558e <ai_buffer_array_sane+0x12>
 801557e:	6843      	ldr	r3, [r0, #4]
 8015580:	b123      	cbz	r3, 801558c <ai_buffer_array_sane+0x10>
 8015582:	8840      	ldrh	r0, [r0, #2]
 8015584:	3800      	subs	r0, #0
 8015586:	bf18      	it	ne
 8015588:	2001      	movne	r0, #1
 801558a:	4770      	bx	lr
 801558c:	4618      	mov	r0, r3
 801558e:	4770      	bx	lr

08015590 <ai_buffer_array_item_set_address>:
 8015590:	b150      	cbz	r0, 80155a8 <ai_buffer_array_item_set_address+0x18>
 8015592:	6843      	ldr	r3, [r0, #4]
 8015594:	b14b      	cbz	r3, 80155aa <ai_buffer_array_item_set_address+0x1a>
 8015596:	8840      	ldrh	r0, [r0, #2]
 8015598:	b900      	cbnz	r0, 801559c <ai_buffer_array_item_set_address+0xc>
 801559a:	4770      	bx	lr
 801559c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80155a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80155a4:	2001      	movs	r0, #1
 80155a6:	604a      	str	r2, [r1, #4]
 80155a8:	4770      	bx	lr
 80155aa:	4618      	mov	r0, r3
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop

080155b0 <_ai_platform_acquire_crc>:
 80155b0:	2001      	movs	r0, #1
 80155b2:	4770      	bx	lr

080155b4 <_ai_platform_release_crc>:
 80155b4:	4770      	bx	lr
 80155b6:	bf00      	nop

080155b8 <ai_platform_get_weights_map>:
 80155b8:	2a00      	cmp	r2, #0
 80155ba:	d037      	beq.n	801562c <ai_platform_get_weights_map+0x74>
 80155bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155be:	4604      	mov	r4, r0
 80155c0:	b1a0      	cbz	r0, 80155ec <ai_platform_get_weights_map+0x34>
 80155c2:	460f      	mov	r7, r1
 80155c4:	b191      	cbz	r1, 80155ec <ai_platform_get_weights_map+0x34>
 80155c6:	4b25      	ldr	r3, [pc, #148]	; (801565c <ai_platform_get_weights_map+0xa4>)
 80155c8:	6810      	ldr	r0, [r2, #0]
 80155ca:	4298      	cmp	r0, r3
 80155cc:	4615      	mov	r5, r2
 80155ce:	d00f      	beq.n	80155f0 <ai_platform_get_weights_map+0x38>
 80155d0:	6855      	ldr	r5, [r2, #4]
 80155d2:	b15d      	cbz	r5, 80155ec <ai_platform_get_weights_map+0x34>
 80155d4:	682e      	ldr	r6, [r5, #0]
 80155d6:	429e      	cmp	r6, r3
 80155d8:	d02a      	beq.n	8015630 <ai_platform_get_weights_map+0x78>
 80155da:	f1a1 0001 	sub.w	r0, r1, #1
 80155de:	6025      	str	r5, [r4, #0]
 80155e0:	fab0 f080 	clz	r0, r0
 80155e4:	0940      	lsrs	r0, r0, #5
 80155e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155e8:	42a7      	cmp	r7, r4
 80155ea:	d034      	beq.n	8015656 <ai_platform_get_weights_map+0x9e>
 80155ec:	2000      	movs	r0, #0
 80155ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155f0:	1d10      	adds	r0, r2, #4
 80155f2:	f7ff ffc3 	bl	801557c <ai_buffer_array_sane>
 80155f6:	2800      	cmp	r0, #0
 80155f8:	d0f8      	beq.n	80155ec <ai_platform_get_weights_map+0x34>
 80155fa:	88eb      	ldrh	r3, [r5, #6]
 80155fc:	429f      	cmp	r7, r3
 80155fe:	d1f5      	bne.n	80155ec <ai_platform_get_weights_map+0x34>
 8015600:	f04f 0e00 	mov.w	lr, #0
 8015604:	1f23      	subs	r3, r4, #4
 8015606:	4670      	mov	r0, lr
 8015608:	68aa      	ldr	r2, [r5, #8]
 801560a:	eb02 0c0e 	add.w	ip, r2, lr
 801560e:	f10e 0e1c 	add.w	lr, lr, #28
 8015612:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015616:	b124      	cbz	r4, 8015622 <ai_platform_get_weights_map+0x6a>
 8015618:	3001      	adds	r0, #1
 801561a:	4287      	cmp	r7, r0
 801561c:	f843 4f04 	str.w	r4, [r3, #4]!
 8015620:	d1f2      	bne.n	8015608 <ai_platform_get_weights_map+0x50>
 8015622:	1a38      	subs	r0, r7, r0
 8015624:	fab0 f080 	clz	r0, r0
 8015628:	0940      	lsrs	r0, r0, #5
 801562a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801562c:	2000      	movs	r0, #0
 801562e:	4770      	bx	lr
 8015630:	1f23      	subs	r3, r4, #4
 8015632:	4628      	mov	r0, r5
 8015634:	2400      	movs	r4, #0
 8015636:	e000      	b.n	801563a <ai_platform_get_weights_map+0x82>
 8015638:	4614      	mov	r4, r2
 801563a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 801563e:	42b2      	cmp	r2, r6
 8015640:	d0d2      	beq.n	80155e8 <ai_platform_get_weights_map+0x30>
 8015642:	f843 2f04 	str.w	r2, [r3, #4]!
 8015646:	1c62      	adds	r2, r4, #1
 8015648:	4297      	cmp	r7, r2
 801564a:	d1f5      	bne.n	8015638 <ai_platform_get_weights_map+0x80>
 801564c:	3402      	adds	r4, #2
 801564e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8015652:	42b3      	cmp	r3, r6
 8015654:	d1ca      	bne.n	80155ec <ai_platform_get_weights_map+0x34>
 8015656:	2001      	movs	r0, #1
 8015658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801565a:	bf00      	nop
 801565c:	a1facade 	.word	0xa1facade

08015660 <ai_platform_get_activations_map>:
 8015660:	2a00      	cmp	r2, #0
 8015662:	d038      	beq.n	80156d6 <ai_platform_get_activations_map+0x76>
 8015664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015666:	4604      	mov	r4, r0
 8015668:	b1a0      	cbz	r0, 8015694 <ai_platform_get_activations_map+0x34>
 801566a:	460f      	mov	r7, r1
 801566c:	b191      	cbz	r1, 8015694 <ai_platform_get_activations_map+0x34>
 801566e:	4b25      	ldr	r3, [pc, #148]	; (8015704 <ai_platform_get_activations_map+0xa4>)
 8015670:	6810      	ldr	r0, [r2, #0]
 8015672:	4298      	cmp	r0, r3
 8015674:	4615      	mov	r5, r2
 8015676:	d00f      	beq.n	8015698 <ai_platform_get_activations_map+0x38>
 8015678:	6a15      	ldr	r5, [r2, #32]
 801567a:	b15d      	cbz	r5, 8015694 <ai_platform_get_activations_map+0x34>
 801567c:	682e      	ldr	r6, [r5, #0]
 801567e:	429e      	cmp	r6, r3
 8015680:	d02b      	beq.n	80156da <ai_platform_get_activations_map+0x7a>
 8015682:	f1a1 0001 	sub.w	r0, r1, #1
 8015686:	6025      	str	r5, [r4, #0]
 8015688:	fab0 f080 	clz	r0, r0
 801568c:	0940      	lsrs	r0, r0, #5
 801568e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015690:	42a7      	cmp	r7, r4
 8015692:	d035      	beq.n	8015700 <ai_platform_get_activations_map+0xa0>
 8015694:	2000      	movs	r0, #0
 8015696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015698:	f102 000c 	add.w	r0, r2, #12
 801569c:	f7ff ff6e 	bl	801557c <ai_buffer_array_sane>
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d0f7      	beq.n	8015694 <ai_platform_get_activations_map+0x34>
 80156a4:	89eb      	ldrh	r3, [r5, #14]
 80156a6:	429f      	cmp	r7, r3
 80156a8:	d1f4      	bne.n	8015694 <ai_platform_get_activations_map+0x34>
 80156aa:	f04f 0e00 	mov.w	lr, #0
 80156ae:	1f23      	subs	r3, r4, #4
 80156b0:	4670      	mov	r0, lr
 80156b2:	692a      	ldr	r2, [r5, #16]
 80156b4:	eb02 0c0e 	add.w	ip, r2, lr
 80156b8:	f10e 0e1c 	add.w	lr, lr, #28
 80156bc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80156c0:	b124      	cbz	r4, 80156cc <ai_platform_get_activations_map+0x6c>
 80156c2:	3001      	adds	r0, #1
 80156c4:	4287      	cmp	r7, r0
 80156c6:	f843 4f04 	str.w	r4, [r3, #4]!
 80156ca:	d1f2      	bne.n	80156b2 <ai_platform_get_activations_map+0x52>
 80156cc:	1a38      	subs	r0, r7, r0
 80156ce:	fab0 f080 	clz	r0, r0
 80156d2:	0940      	lsrs	r0, r0, #5
 80156d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156d6:	2000      	movs	r0, #0
 80156d8:	4770      	bx	lr
 80156da:	1f23      	subs	r3, r4, #4
 80156dc:	4628      	mov	r0, r5
 80156de:	2400      	movs	r4, #0
 80156e0:	e000      	b.n	80156e4 <ai_platform_get_activations_map+0x84>
 80156e2:	4614      	mov	r4, r2
 80156e4:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80156e8:	42b2      	cmp	r2, r6
 80156ea:	d0d1      	beq.n	8015690 <ai_platform_get_activations_map+0x30>
 80156ec:	f843 2f04 	str.w	r2, [r3, #4]!
 80156f0:	1c62      	adds	r2, r4, #1
 80156f2:	4297      	cmp	r7, r2
 80156f4:	d1f5      	bne.n	80156e2 <ai_platform_get_activations_map+0x82>
 80156f6:	3402      	adds	r4, #2
 80156f8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80156fc:	42b3      	cmp	r3, r6
 80156fe:	d1c9      	bne.n	8015694 <ai_platform_get_activations_map+0x34>
 8015700:	2001      	movs	r0, #1
 8015702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015704:	a1facade 	.word	0xa1facade

08015708 <ai_platform_bind_network_params>:
 8015708:	b1a0      	cbz	r0, 8015734 <ai_platform_bind_network_params+0x2c>
 801570a:	b1b1      	cbz	r1, 801573a <ai_platform_bind_network_params+0x32>
 801570c:	b1c2      	cbz	r2, 8015740 <ai_platform_bind_network_params+0x38>
 801570e:	b410      	push	{r4}
 8015710:	4603      	mov	r3, r0
 8015712:	4c0d      	ldr	r4, [pc, #52]	; (8015748 <ai_platform_bind_network_params+0x40>)
 8015714:	f843 4b04 	str.w	r4, [r3], #4
 8015718:	f100 0c0c 	add.w	ip, r0, #12
 801571c:	c903      	ldmia	r1, {r0, r1}
 801571e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015726:	e88c 0003 	stmia.w	ip, {r0, r1}
 801572a:	2301      	movs	r3, #1
 801572c:	4618      	mov	r0, r3
 801572e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015732:	4770      	bx	lr
 8015734:	4603      	mov	r3, r0
 8015736:	4618      	mov	r0, r3
 8015738:	4770      	bx	lr
 801573a:	460b      	mov	r3, r1
 801573c:	4618      	mov	r0, r3
 801573e:	4770      	bx	lr
 8015740:	4613      	mov	r3, r2
 8015742:	4618      	mov	r0, r3
 8015744:	4770      	bx	lr
 8015746:	bf00      	nop
 8015748:	a1facade 	.word	0xa1facade

0801574c <ai_platform_network_get_error>:
 801574c:	b510      	push	{r4, lr}
 801574e:	b1f0      	cbz	r0, 801578e <ai_platform_network_get_error+0x42>
 8015750:	4b2f      	ldr	r3, [pc, #188]	; (8015810 <ai_platform_network_get_error+0xc4>)
 8015752:	6802      	ldr	r2, [r0, #0]
 8015754:	429a      	cmp	r2, r3
 8015756:	4604      	mov	r4, r0
 8015758:	d119      	bne.n	801578e <ai_platform_network_get_error+0x42>
 801575a:	f7ff ff29 	bl	80155b0 <_ai_platform_acquire_crc>
 801575e:	4b2d      	ldr	r3, [pc, #180]	; (8015814 <ai_platform_network_get_error+0xc8>)
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801576a:	d03c      	beq.n	80157e6 <ai_platform_network_get_error+0x9a>
 801576c:	4a2a      	ldr	r2, [pc, #168]	; (8015818 <ai_platform_network_get_error+0xcc>)
 801576e:	2301      	movs	r3, #1
 8015770:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015774:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015778:	2b00      	cmp	r3, #0
 801577a:	d1fb      	bne.n	8015774 <ai_platform_network_get_error+0x28>
 801577c:	4b27      	ldr	r3, [pc, #156]	; (801581c <ai_platform_network_get_error+0xd0>)
 801577e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015782:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015786:	4b26      	ldr	r3, [pc, #152]	; (8015820 <ai_platform_network_get_error+0xd4>)
 8015788:	429a      	cmp	r2, r3
 801578a:	d038      	beq.n	80157fe <ai_platform_network_get_error+0xb2>
 801578c:	e7fe      	b.n	801578c <ai_platform_network_get_error+0x40>
 801578e:	f7ff ff0f 	bl	80155b0 <_ai_platform_acquire_crc>
 8015792:	4b20      	ldr	r3, [pc, #128]	; (8015814 <ai_platform_network_get_error+0xc8>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801579a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801579e:	d010      	beq.n	80157c2 <ai_platform_network_get_error+0x76>
 80157a0:	4a1d      	ldr	r2, [pc, #116]	; (8015818 <ai_platform_network_get_error+0xcc>)
 80157a2:	2301      	movs	r3, #1
 80157a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80157a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d1fb      	bne.n	80157a8 <ai_platform_network_get_error+0x5c>
 80157b0:	4b1a      	ldr	r3, [pc, #104]	; (801581c <ai_platform_network_get_error+0xd0>)
 80157b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80157b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80157ba:	4b19      	ldr	r3, [pc, #100]	; (8015820 <ai_platform_network_get_error+0xd4>)
 80157bc:	429a      	cmp	r2, r3
 80157be:	d00d      	beq.n	80157dc <ai_platform_network_get_error+0x90>
 80157c0:	e7fe      	b.n	80157c0 <ai_platform_network_get_error+0x74>
 80157c2:	4a18      	ldr	r2, [pc, #96]	; (8015824 <ai_platform_network_get_error+0xd8>)
 80157c4:	2301      	movs	r3, #1
 80157c6:	6093      	str	r3, [r2, #8]
 80157c8:	6893      	ldr	r3, [r2, #8]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d1fc      	bne.n	80157c8 <ai_platform_network_get_error+0x7c>
 80157ce:	4b13      	ldr	r3, [pc, #76]	; (801581c <ai_platform_network_get_error+0xd0>)
 80157d0:	6013      	str	r3, [r2, #0]
 80157d2:	6812      	ldr	r2, [r2, #0]
 80157d4:	4b12      	ldr	r3, [pc, #72]	; (8015820 <ai_platform_network_get_error+0xd4>)
 80157d6:	429a      	cmp	r2, r3
 80157d8:	d000      	beq.n	80157dc <ai_platform_network_get_error+0x90>
 80157da:	e7fe      	b.n	80157da <ai_platform_network_get_error+0x8e>
 80157dc:	f7ff feea 	bl	80155b4 <_ai_platform_release_crc>
 80157e0:	f241 0010 	movw	r0, #4112	; 0x1010
 80157e4:	bd10      	pop	{r4, pc}
 80157e6:	4a0f      	ldr	r2, [pc, #60]	; (8015824 <ai_platform_network_get_error+0xd8>)
 80157e8:	2301      	movs	r3, #1
 80157ea:	6093      	str	r3, [r2, #8]
 80157ec:	6893      	ldr	r3, [r2, #8]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d1fc      	bne.n	80157ec <ai_platform_network_get_error+0xa0>
 80157f2:	4b0a      	ldr	r3, [pc, #40]	; (801581c <ai_platform_network_get_error+0xd0>)
 80157f4:	6013      	str	r3, [r2, #0]
 80157f6:	6812      	ldr	r2, [r2, #0]
 80157f8:	4b09      	ldr	r3, [pc, #36]	; (8015820 <ai_platform_network_get_error+0xd4>)
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d107      	bne.n	801580e <ai_platform_network_get_error+0xc2>
 80157fe:	f7ff fed9 	bl	80155b4 <_ai_platform_release_crc>
 8015802:	f104 0010 	add.w	r0, r4, #16
 8015806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801580a:	f000 be8d 	b.w	8016528 <core_get_error>
 801580e:	e7fe      	b.n	801580e <ai_platform_network_get_error+0xc2>
 8015810:	a1c00100 	.word	0xa1c00100
 8015814:	e0042000 	.word	0xe0042000
 8015818:	58024000 	.word	0x58024000
 801581c:	f407a5c2 	.word	0xf407a5c2
 8015820:	b5e8b5cd 	.word	0xb5e8b5cd
 8015824:	40023000 	.word	0x40023000

08015828 <ai_platform_network_set_error>:
 8015828:	b110      	cbz	r0, 8015830 <ai_platform_network_set_error+0x8>
 801582a:	3010      	adds	r0, #16
 801582c:	f000 be82 	b.w	8016534 <core_set_error>
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop

08015834 <ai_platform_inputs_get>:
 8015834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015838:	b085      	sub	sp, #20
 801583a:	9102      	str	r1, [sp, #8]
 801583c:	b1f0      	cbz	r0, 801587c <ai_platform_inputs_get+0x48>
 801583e:	4b62      	ldr	r3, [pc, #392]	; (80159c8 <ai_platform_inputs_get+0x194>)
 8015840:	6802      	ldr	r2, [r0, #0]
 8015842:	429a      	cmp	r2, r3
 8015844:	4607      	mov	r7, r0
 8015846:	d119      	bne.n	801587c <ai_platform_inputs_get+0x48>
 8015848:	f7ff feb2 	bl	80155b0 <_ai_platform_acquire_crc>
 801584c:	4b5f      	ldr	r3, [pc, #380]	; (80159cc <ai_platform_inputs_get+0x198>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015858:	d03d      	beq.n	80158d6 <ai_platform_inputs_get+0xa2>
 801585a:	4a5d      	ldr	r2, [pc, #372]	; (80159d0 <ai_platform_inputs_get+0x19c>)
 801585c:	2301      	movs	r3, #1
 801585e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015862:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015866:	2b00      	cmp	r3, #0
 8015868:	d1fb      	bne.n	8015862 <ai_platform_inputs_get+0x2e>
 801586a:	4b5a      	ldr	r3, [pc, #360]	; (80159d4 <ai_platform_inputs_get+0x1a0>)
 801586c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015870:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015874:	4b58      	ldr	r3, [pc, #352]	; (80159d8 <ai_platform_inputs_get+0x1a4>)
 8015876:	429a      	cmp	r2, r3
 8015878:	d039      	beq.n	80158ee <ai_platform_inputs_get+0xba>
 801587a:	e7fe      	b.n	801587a <ai_platform_inputs_get+0x46>
 801587c:	f7ff fe98 	bl	80155b0 <_ai_platform_acquire_crc>
 8015880:	4b52      	ldr	r3, [pc, #328]	; (80159cc <ai_platform_inputs_get+0x198>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801588c:	d010      	beq.n	80158b0 <ai_platform_inputs_get+0x7c>
 801588e:	4a50      	ldr	r2, [pc, #320]	; (80159d0 <ai_platform_inputs_get+0x19c>)
 8015890:	2301      	movs	r3, #1
 8015892:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015896:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801589a:	2b00      	cmp	r3, #0
 801589c:	d1fb      	bne.n	8015896 <ai_platform_inputs_get+0x62>
 801589e:	4b4d      	ldr	r3, [pc, #308]	; (80159d4 <ai_platform_inputs_get+0x1a0>)
 80158a0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80158a4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80158a8:	4b4b      	ldr	r3, [pc, #300]	; (80159d8 <ai_platform_inputs_get+0x1a4>)
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d00d      	beq.n	80158ca <ai_platform_inputs_get+0x96>
 80158ae:	e7fe      	b.n	80158ae <ai_platform_inputs_get+0x7a>
 80158b0:	4a4a      	ldr	r2, [pc, #296]	; (80159dc <ai_platform_inputs_get+0x1a8>)
 80158b2:	2301      	movs	r3, #1
 80158b4:	6093      	str	r3, [r2, #8]
 80158b6:	6893      	ldr	r3, [r2, #8]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d1fc      	bne.n	80158b6 <ai_platform_inputs_get+0x82>
 80158bc:	4b45      	ldr	r3, [pc, #276]	; (80159d4 <ai_platform_inputs_get+0x1a0>)
 80158be:	6013      	str	r3, [r2, #0]
 80158c0:	6812      	ldr	r2, [r2, #0]
 80158c2:	4b45      	ldr	r3, [pc, #276]	; (80159d8 <ai_platform_inputs_get+0x1a4>)
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d000      	beq.n	80158ca <ai_platform_inputs_get+0x96>
 80158c8:	e7fe      	b.n	80158c8 <ai_platform_inputs_get+0x94>
 80158ca:	f7ff fe73 	bl	80155b4 <_ai_platform_release_crc>
 80158ce:	2000      	movs	r0, #0
 80158d0:	b005      	add	sp, #20
 80158d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158d6:	4a41      	ldr	r2, [pc, #260]	; (80159dc <ai_platform_inputs_get+0x1a8>)
 80158d8:	2301      	movs	r3, #1
 80158da:	6093      	str	r3, [r2, #8]
 80158dc:	6893      	ldr	r3, [r2, #8]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d1fc      	bne.n	80158dc <ai_platform_inputs_get+0xa8>
 80158e2:	4b3c      	ldr	r3, [pc, #240]	; (80159d4 <ai_platform_inputs_get+0x1a0>)
 80158e4:	6013      	str	r3, [r2, #0]
 80158e6:	6812      	ldr	r2, [r2, #0]
 80158e8:	4b3b      	ldr	r3, [pc, #236]	; (80159d8 <ai_platform_inputs_get+0x1a4>)
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d155      	bne.n	801599a <ai_platform_inputs_get+0x166>
 80158ee:	f7ff fe61 	bl	80155b4 <_ai_platform_release_crc>
 80158f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d051      	beq.n	801599c <ai_platform_inputs_get+0x168>
 80158f8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80158fc:	f1ba 0f00 	cmp.w	sl, #0
 8015900:	d04c      	beq.n	801599c <ai_platform_inputs_get+0x168>
 8015902:	f04f 0b00 	mov.w	fp, #0
 8015906:	465d      	mov	r5, fp
 8015908:	9703      	str	r7, [sp, #12]
 801590a:	e016      	b.n	801593a <ai_platform_inputs_get+0x106>
 801590c:	9901      	ldr	r1, [sp, #4]
 801590e:	2301      	movs	r3, #1
 8015910:	507b      	str	r3, [r7, r1]
 8015912:	69b1      	ldr	r1, [r6, #24]
 8015914:	6849      	ldr	r1, [r1, #4]
 8015916:	6121      	str	r1, [r4, #16]
 8015918:	f04f 0301 	mov.w	r3, #1
 801591c:	7523      	strb	r3, [r4, #20]
 801591e:	e9c4 c200 	strd	ip, r2, [r4]
 8015922:	6962      	ldr	r2, [r4, #20]
 8015924:	60a0      	str	r0, [r4, #8]
 8015926:	2300      	movs	r3, #0
 8015928:	f369 221f 	bfi	r2, r9, #8, #24
 801592c:	f8c4 8018 	str.w	r8, [r4, #24]
 8015930:	60e3      	str	r3, [r4, #12]
 8015932:	3501      	adds	r5, #1
 8015934:	f10b 0b1c 	add.w	fp, fp, #28
 8015938:	6162      	str	r2, [r4, #20]
 801593a:	f8ba 3000 	ldrh.w	r3, [sl]
 801593e:	42ab      	cmp	r3, r5
 8015940:	b2aa      	uxth	r2, r5
 8015942:	d93a      	bls.n	80159ba <ai_platform_inputs_get+0x186>
 8015944:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015948:	00e9      	lsls	r1, r5, #3
 801594a:	9101      	str	r1, [sp, #4]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d034      	beq.n	80159ba <ai_platform_inputs_get+0x186>
 8015950:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8015954:	2e00      	cmp	r6, #0
 8015956:	d030      	beq.n	80159ba <ai_platform_inputs_get+0x186>
 8015958:	f8da 3008 	ldr.w	r3, [sl, #8]
 801595c:	69b2      	ldr	r2, [r6, #24]
 801595e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8015962:	6810      	ldr	r0, [r2, #0]
 8015964:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8015968:	68b3      	ldr	r3, [r6, #8]
 801596a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801596e:	f005 fc1f 	bl	801b1b0 <ai_array_to_buffer_fmt>
 8015972:	69b1      	ldr	r1, [r6, #24]
 8015974:	4684      	mov	ip, r0
 8015976:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 801597a:	688a      	ldr	r2, [r1, #8]
 801597c:	445c      	add	r4, fp
 801597e:	2800      	cmp	r0, #0
 8015980:	d0c8      	beq.n	8015914 <ai_platform_inputs_get+0xe0>
 8015982:	2100      	movs	r1, #0
 8015984:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8015988:	6831      	ldr	r1, [r6, #0]
 801598a:	6041      	str	r1, [r0, #4]
 801598c:	b111      	cbz	r1, 8015994 <ai_platform_inputs_get+0x160>
 801598e:	8849      	ldrh	r1, [r1, #2]
 8015990:	2900      	cmp	r1, #0
 8015992:	d1bb      	bne.n	801590c <ai_platform_inputs_get+0xd8>
 8015994:	69b1      	ldr	r1, [r6, #24]
 8015996:	2000      	movs	r0, #0
 8015998:	e7bc      	b.n	8015914 <ai_platform_inputs_get+0xe0>
 801599a:	e7fe      	b.n	801599a <ai_platform_inputs_get+0x166>
 801599c:	2218      	movs	r2, #24
 801599e:	2111      	movs	r1, #17
 80159a0:	f107 0010 	add.w	r0, r7, #16
 80159a4:	f000 fdc6 	bl	8016534 <core_set_error>
 80159a8:	2200      	movs	r2, #0
 80159aa:	4610      	mov	r0, r2
 80159ac:	9b02      	ldr	r3, [sp, #8]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d08e      	beq.n	80158d0 <ai_platform_inputs_get+0x9c>
 80159b2:	801a      	strh	r2, [r3, #0]
 80159b4:	b005      	add	sp, #20
 80159b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ba:	9f03      	ldr	r7, [sp, #12]
 80159bc:	2a00      	cmp	r2, #0
 80159be:	d0ed      	beq.n	801599c <ai_platform_inputs_get+0x168>
 80159c0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80159c4:	6858      	ldr	r0, [r3, #4]
 80159c6:	e7f1      	b.n	80159ac <ai_platform_inputs_get+0x178>
 80159c8:	a1c00100 	.word	0xa1c00100
 80159cc:	e0042000 	.word	0xe0042000
 80159d0:	58024000 	.word	0x58024000
 80159d4:	f407a5c2 	.word	0xf407a5c2
 80159d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80159dc:	40023000 	.word	0x40023000

080159e0 <ai_platform_outputs_get>:
 80159e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159e4:	b085      	sub	sp, #20
 80159e6:	9102      	str	r1, [sp, #8]
 80159e8:	b1f0      	cbz	r0, 8015a28 <ai_platform_outputs_get+0x48>
 80159ea:	4b5f      	ldr	r3, [pc, #380]	; (8015b68 <ai_platform_outputs_get+0x188>)
 80159ec:	6802      	ldr	r2, [r0, #0]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	4607      	mov	r7, r0
 80159f2:	d119      	bne.n	8015a28 <ai_platform_outputs_get+0x48>
 80159f4:	f7ff fddc 	bl	80155b0 <_ai_platform_acquire_crc>
 80159f8:	4b5c      	ldr	r3, [pc, #368]	; (8015b6c <ai_platform_outputs_get+0x18c>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015a04:	d03d      	beq.n	8015a82 <ai_platform_outputs_get+0xa2>
 8015a06:	4a5a      	ldr	r2, [pc, #360]	; (8015b70 <ai_platform_outputs_get+0x190>)
 8015a08:	2301      	movs	r3, #1
 8015a0a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015a0e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d1fb      	bne.n	8015a0e <ai_platform_outputs_get+0x2e>
 8015a16:	4b57      	ldr	r3, [pc, #348]	; (8015b74 <ai_platform_outputs_get+0x194>)
 8015a18:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015a1c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015a20:	4b55      	ldr	r3, [pc, #340]	; (8015b78 <ai_platform_outputs_get+0x198>)
 8015a22:	429a      	cmp	r2, r3
 8015a24:	d039      	beq.n	8015a9a <ai_platform_outputs_get+0xba>
 8015a26:	e7fe      	b.n	8015a26 <ai_platform_outputs_get+0x46>
 8015a28:	f7ff fdc2 	bl	80155b0 <_ai_platform_acquire_crc>
 8015a2c:	4b4f      	ldr	r3, [pc, #316]	; (8015b6c <ai_platform_outputs_get+0x18c>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015a38:	d010      	beq.n	8015a5c <ai_platform_outputs_get+0x7c>
 8015a3a:	4a4d      	ldr	r2, [pc, #308]	; (8015b70 <ai_platform_outputs_get+0x190>)
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015a42:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d1fb      	bne.n	8015a42 <ai_platform_outputs_get+0x62>
 8015a4a:	4b4a      	ldr	r3, [pc, #296]	; (8015b74 <ai_platform_outputs_get+0x194>)
 8015a4c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015a50:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015a54:	4b48      	ldr	r3, [pc, #288]	; (8015b78 <ai_platform_outputs_get+0x198>)
 8015a56:	429a      	cmp	r2, r3
 8015a58:	d00d      	beq.n	8015a76 <ai_platform_outputs_get+0x96>
 8015a5a:	e7fe      	b.n	8015a5a <ai_platform_outputs_get+0x7a>
 8015a5c:	4a47      	ldr	r2, [pc, #284]	; (8015b7c <ai_platform_outputs_get+0x19c>)
 8015a5e:	2301      	movs	r3, #1
 8015a60:	6093      	str	r3, [r2, #8]
 8015a62:	6893      	ldr	r3, [r2, #8]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d1fc      	bne.n	8015a62 <ai_platform_outputs_get+0x82>
 8015a68:	4b42      	ldr	r3, [pc, #264]	; (8015b74 <ai_platform_outputs_get+0x194>)
 8015a6a:	6013      	str	r3, [r2, #0]
 8015a6c:	6812      	ldr	r2, [r2, #0]
 8015a6e:	4b42      	ldr	r3, [pc, #264]	; (8015b78 <ai_platform_outputs_get+0x198>)
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d000      	beq.n	8015a76 <ai_platform_outputs_get+0x96>
 8015a74:	e7fe      	b.n	8015a74 <ai_platform_outputs_get+0x94>
 8015a76:	f7ff fd9d 	bl	80155b4 <_ai_platform_release_crc>
 8015a7a:	2000      	movs	r0, #0
 8015a7c:	b005      	add	sp, #20
 8015a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a82:	4a3e      	ldr	r2, [pc, #248]	; (8015b7c <ai_platform_outputs_get+0x19c>)
 8015a84:	2301      	movs	r3, #1
 8015a86:	6093      	str	r3, [r2, #8]
 8015a88:	6893      	ldr	r3, [r2, #8]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d1fc      	bne.n	8015a88 <ai_platform_outputs_get+0xa8>
 8015a8e:	4b39      	ldr	r3, [pc, #228]	; (8015b74 <ai_platform_outputs_get+0x194>)
 8015a90:	6013      	str	r3, [r2, #0]
 8015a92:	6812      	ldr	r2, [r2, #0]
 8015a94:	4b38      	ldr	r3, [pc, #224]	; (8015b78 <ai_platform_outputs_get+0x198>)
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d150      	bne.n	8015b3c <ai_platform_outputs_get+0x15c>
 8015a9a:	f7ff fd8b 	bl	80155b4 <_ai_platform_release_crc>
 8015a9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015aa0:	2b01      	cmp	r3, #1
 8015aa2:	d958      	bls.n	8015b56 <ai_platform_outputs_get+0x176>
 8015aa4:	f04f 0b00 	mov.w	fp, #0
 8015aa8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8015aac:	9703      	str	r7, [sp, #12]
 8015aae:	465d      	mov	r5, fp
 8015ab0:	e016      	b.n	8015ae0 <ai_platform_outputs_get+0x100>
 8015ab2:	9901      	ldr	r1, [sp, #4]
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	507b      	str	r3, [r7, r1]
 8015ab8:	69b1      	ldr	r1, [r6, #24]
 8015aba:	6849      	ldr	r1, [r1, #4]
 8015abc:	6121      	str	r1, [r4, #16]
 8015abe:	f04f 0301 	mov.w	r3, #1
 8015ac2:	7523      	strb	r3, [r4, #20]
 8015ac4:	e9c4 c200 	strd	ip, r2, [r4]
 8015ac8:	6962      	ldr	r2, [r4, #20]
 8015aca:	60a0      	str	r0, [r4, #8]
 8015acc:	2300      	movs	r3, #0
 8015ace:	f369 221f 	bfi	r2, r9, #8, #24
 8015ad2:	f8c4 8018 	str.w	r8, [r4, #24]
 8015ad6:	60e3      	str	r3, [r4, #12]
 8015ad8:	3501      	adds	r5, #1
 8015ada:	f10b 0b1c 	add.w	fp, fp, #28
 8015ade:	6162      	str	r2, [r4, #20]
 8015ae0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8015ae4:	42ab      	cmp	r3, r5
 8015ae6:	b2aa      	uxth	r2, r5
 8015ae8:	d929      	bls.n	8015b3e <ai_platform_outputs_get+0x15e>
 8015aea:	f8da 3010 	ldr.w	r3, [sl, #16]
 8015aee:	00e9      	lsls	r1, r5, #3
 8015af0:	9101      	str	r1, [sp, #4]
 8015af2:	b323      	cbz	r3, 8015b3e <ai_platform_outputs_get+0x15e>
 8015af4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8015af8:	b30e      	cbz	r6, 8015b3e <ai_platform_outputs_get+0x15e>
 8015afa:	f8da 3014 	ldr.w	r3, [sl, #20]
 8015afe:	69b2      	ldr	r2, [r6, #24]
 8015b00:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8015b04:	6810      	ldr	r0, [r2, #0]
 8015b06:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8015b0a:	68b3      	ldr	r3, [r6, #8]
 8015b0c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8015b10:	f005 fb4e 	bl	801b1b0 <ai_array_to_buffer_fmt>
 8015b14:	69b1      	ldr	r1, [r6, #24]
 8015b16:	4684      	mov	ip, r0
 8015b18:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8015b1c:	688a      	ldr	r2, [r1, #8]
 8015b1e:	445c      	add	r4, fp
 8015b20:	2800      	cmp	r0, #0
 8015b22:	d0ca      	beq.n	8015aba <ai_platform_outputs_get+0xda>
 8015b24:	2100      	movs	r1, #0
 8015b26:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8015b2a:	6831      	ldr	r1, [r6, #0]
 8015b2c:	6041      	str	r1, [r0, #4]
 8015b2e:	b111      	cbz	r1, 8015b36 <ai_platform_outputs_get+0x156>
 8015b30:	8849      	ldrh	r1, [r1, #2]
 8015b32:	2900      	cmp	r1, #0
 8015b34:	d1bd      	bne.n	8015ab2 <ai_platform_outputs_get+0xd2>
 8015b36:	69b1      	ldr	r1, [r6, #24]
 8015b38:	2000      	movs	r0, #0
 8015b3a:	e7be      	b.n	8015aba <ai_platform_outputs_get+0xda>
 8015b3c:	e7fe      	b.n	8015b3c <ai_platform_outputs_get+0x15c>
 8015b3e:	9f03      	ldr	r7, [sp, #12]
 8015b40:	b14a      	cbz	r2, 8015b56 <ai_platform_outputs_get+0x176>
 8015b42:	f8da 3014 	ldr.w	r3, [sl, #20]
 8015b46:	6858      	ldr	r0, [r3, #4]
 8015b48:	9b02      	ldr	r3, [sp, #8]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d096      	beq.n	8015a7c <ai_platform_outputs_get+0x9c>
 8015b4e:	801a      	strh	r2, [r3, #0]
 8015b50:	b005      	add	sp, #20
 8015b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b56:	2218      	movs	r2, #24
 8015b58:	2111      	movs	r1, #17
 8015b5a:	f107 0010 	add.w	r0, r7, #16
 8015b5e:	f000 fce9 	bl	8016534 <core_set_error>
 8015b62:	2200      	movs	r2, #0
 8015b64:	4610      	mov	r0, r2
 8015b66:	e7ef      	b.n	8015b48 <ai_platform_outputs_get+0x168>
 8015b68:	a1c00100 	.word	0xa1c00100
 8015b6c:	e0042000 	.word	0xe0042000
 8015b70:	58024000 	.word	0x58024000
 8015b74:	f407a5c2 	.word	0xf407a5c2
 8015b78:	b5e8b5cd 	.word	0xb5e8b5cd
 8015b7c:	40023000 	.word	0x40023000

08015b80 <ai_platform_network_create>:
 8015b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b84:	b083      	sub	sp, #12
 8015b86:	4606      	mov	r6, r0
 8015b88:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8015b8c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8015b90:	4615      	mov	r5, r2
 8015b92:	461f      	mov	r7, r3
 8015b94:	f7ff fd0c 	bl	80155b0 <_ai_platform_acquire_crc>
 8015b98:	b188      	cbz	r0, 8015bbe <ai_platform_network_create+0x3e>
 8015b9a:	4a5d      	ldr	r2, [pc, #372]	; (8015d10 <ai_platform_network_create+0x190>)
 8015b9c:	6812      	ldr	r2, [r2, #0]
 8015b9e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8015ba2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	d00e      	beq.n	8015bc8 <ai_platform_network_create+0x48>
 8015baa:	4a5a      	ldr	r2, [pc, #360]	; (8015d14 <ai_platform_network_create+0x194>)
 8015bac:	2118      	movs	r1, #24
 8015bae:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8015bb2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8015bb6:	2918      	cmp	r1, #24
 8015bb8:	d018      	beq.n	8015bec <ai_platform_network_create+0x6c>
 8015bba:	f7ff fcfb 	bl	80155b4 <_ai_platform_release_crc>
 8015bbe:	f244 1033 	movw	r0, #16691	; 0x4133
 8015bc2:	b003      	add	sp, #12
 8015bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bc8:	4a53      	ldr	r2, [pc, #332]	; (8015d18 <ai_platform_network_create+0x198>)
 8015bca:	2101      	movs	r1, #1
 8015bcc:	6091      	str	r1, [r2, #8]
 8015bce:	2114      	movs	r1, #20
 8015bd0:	e001      	b.n	8015bd6 <ai_platform_network_create+0x56>
 8015bd2:	3901      	subs	r1, #1
 8015bd4:	d002      	beq.n	8015bdc <ai_platform_network_create+0x5c>
 8015bd6:	6894      	ldr	r4, [r2, #8]
 8015bd8:	2c00      	cmp	r4, #0
 8015bda:	d1fa      	bne.n	8015bd2 <ai_platform_network_create+0x52>
 8015bdc:	4a4e      	ldr	r2, [pc, #312]	; (8015d18 <ai_platform_network_create+0x198>)
 8015bde:	6891      	ldr	r1, [r2, #8]
 8015be0:	b911      	cbnz	r1, 8015be8 <ai_platform_network_create+0x68>
 8015be2:	6812      	ldr	r2, [r2, #0]
 8015be4:	3201      	adds	r2, #1
 8015be6:	d008      	beq.n	8015bfa <ai_platform_network_create+0x7a>
 8015be8:	4618      	mov	r0, r3
 8015bea:	e7e6      	b.n	8015bba <ai_platform_network_create+0x3a>
 8015bec:	2101      	movs	r1, #1
 8015bee:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8015bf2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8015bf6:	2900      	cmp	r1, #0
 8015bf8:	d1fb      	bne.n	8015bf2 <ai_platform_network_create+0x72>
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7ff fcda 	bl	80155b4 <_ai_platform_release_crc>
 8015c00:	f7ff fcd6 	bl	80155b0 <_ai_platform_acquire_crc>
 8015c04:	4b42      	ldr	r3, [pc, #264]	; (8015d10 <ai_platform_network_create+0x190>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015c10:	d010      	beq.n	8015c34 <ai_platform_network_create+0xb4>
 8015c12:	4b40      	ldr	r3, [pc, #256]	; (8015d14 <ai_platform_network_create+0x194>)
 8015c14:	2201      	movs	r2, #1
 8015c16:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8015c1a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8015c1e:	2900      	cmp	r1, #0
 8015c20:	d1fb      	bne.n	8015c1a <ai_platform_network_create+0x9a>
 8015c22:	4a3e      	ldr	r2, [pc, #248]	; (8015d1c <ai_platform_network_create+0x19c>)
 8015c24:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8015c28:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8015c2c:	4b3c      	ldr	r3, [pc, #240]	; (8015d20 <ai_platform_network_create+0x1a0>)
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d00c      	beq.n	8015c4c <ai_platform_network_create+0xcc>
 8015c32:	e7fe      	b.n	8015c32 <ai_platform_network_create+0xb2>
 8015c34:	4a38      	ldr	r2, [pc, #224]	; (8015d18 <ai_platform_network_create+0x198>)
 8015c36:	2301      	movs	r3, #1
 8015c38:	6093      	str	r3, [r2, #8]
 8015c3a:	6893      	ldr	r3, [r2, #8]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d1fc      	bne.n	8015c3a <ai_platform_network_create+0xba>
 8015c40:	4b36      	ldr	r3, [pc, #216]	; (8015d1c <ai_platform_network_create+0x19c>)
 8015c42:	6013      	str	r3, [r2, #0]
 8015c44:	6812      	ldr	r2, [r2, #0]
 8015c46:	4b36      	ldr	r3, [pc, #216]	; (8015d20 <ai_platform_network_create+0x1a0>)
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d122      	bne.n	8015c92 <ai_platform_network_create+0x112>
 8015c4c:	f7ff fcb2 	bl	80155b4 <_ai_platform_release_crc>
 8015c50:	b38e      	cbz	r6, 8015cb6 <ai_platform_network_create+0x136>
 8015c52:	4b34      	ldr	r3, [pc, #208]	; (8015d24 <ai_platform_network_create+0x1a4>)
 8015c54:	602b      	str	r3, [r5, #0]
 8015c56:	6035      	str	r5, [r6, #0]
 8015c58:	f000 fc64 	bl	8016524 <core_init>
 8015c5c:	b1d0      	cbz	r0, 8015c94 <ai_platform_network_create+0x114>
 8015c5e:	f7ff fca7 	bl	80155b0 <_ai_platform_acquire_crc>
 8015c62:	4b2b      	ldr	r3, [pc, #172]	; (8015d10 <ai_platform_network_create+0x190>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015c6e:	d025      	beq.n	8015cbc <ai_platform_network_create+0x13c>
 8015c70:	4a28      	ldr	r2, [pc, #160]	; (8015d14 <ai_platform_network_create+0x194>)
 8015c72:	2301      	movs	r3, #1
 8015c74:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015c78:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d1fb      	bne.n	8015c78 <ai_platform_network_create+0xf8>
 8015c80:	4b26      	ldr	r3, [pc, #152]	; (8015d1c <ai_platform_network_create+0x19c>)
 8015c82:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015c86:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015c8a:	4b25      	ldr	r3, [pc, #148]	; (8015d20 <ai_platform_network_create+0x1a0>)
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d022      	beq.n	8015cd6 <ai_platform_network_create+0x156>
 8015c90:	e7fe      	b.n	8015c90 <ai_platform_network_create+0x110>
 8015c92:	e7fe      	b.n	8015c92 <ai_platform_network_create+0x112>
 8015c94:	2430      	movs	r4, #48	; 0x30
 8015c96:	2300      	movs	r3, #0
 8015c98:	6033      	str	r3, [r6, #0]
 8015c9a:	2610      	movs	r6, #16
 8015c9c:	464a      	mov	r2, r9
 8015c9e:	4641      	mov	r1, r8
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	f005 fa67 	bl	801b174 <ai_version_get>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	2000      	movs	r0, #0
 8015caa:	f364 0007 	bfi	r0, r4, #0, #8
 8015cae:	64ab      	str	r3, [r5, #72]	; 0x48
 8015cb0:	f366 201f 	bfi	r0, r6, #8, #24
 8015cb4:	e785      	b.n	8015bc2 <ai_platform_network_create+0x42>
 8015cb6:	f241 0010 	movw	r0, #4112	; 0x1010
 8015cba:	e782      	b.n	8015bc2 <ai_platform_network_create+0x42>
 8015cbc:	4a16      	ldr	r2, [pc, #88]	; (8015d18 <ai_platform_network_create+0x198>)
 8015cbe:	2301      	movs	r3, #1
 8015cc0:	6093      	str	r3, [r2, #8]
 8015cc2:	6893      	ldr	r3, [r2, #8]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d1fc      	bne.n	8015cc2 <ai_platform_network_create+0x142>
 8015cc8:	4b14      	ldr	r3, [pc, #80]	; (8015d1c <ai_platform_network_create+0x19c>)
 8015cca:	6013      	str	r3, [r2, #0]
 8015ccc:	6812      	ldr	r2, [r2, #0]
 8015cce:	4b14      	ldr	r3, [pc, #80]	; (8015d20 <ai_platform_network_create+0x1a0>)
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d000      	beq.n	8015cd6 <ai_platform_network_create+0x156>
 8015cd4:	e7fe      	b.n	8015cd4 <ai_platform_network_create+0x154>
 8015cd6:	f7ff fc6d 	bl	80155b4 <_ai_platform_release_crc>
 8015cda:	2200      	movs	r2, #0
 8015cdc:	4641      	mov	r1, r8
 8015cde:	4638      	mov	r0, r7
 8015ce0:	f005 fa48 	bl	801b174 <ai_version_get>
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	2105      	movs	r1, #5
 8015cea:	2001      	movs	r0, #1
 8015cec:	f005 fa42 	bl	801b174 <ai_version_get>
 8015cf0:	4284      	cmp	r4, r0
 8015cf2:	d001      	beq.n	8015cf8 <ai_platform_network_create+0x178>
 8015cf4:	2401      	movs	r4, #1
 8015cf6:	e7ce      	b.n	8015c96 <ai_platform_network_create+0x116>
 8015cf8:	4b0b      	ldr	r3, [pc, #44]	; (8015d28 <ai_platform_network_create+0x1a8>)
 8015cfa:	9301      	str	r3, [sp, #4]
 8015cfc:	a801      	add	r0, sp, #4
 8015cfe:	f005 f9a3 	bl	801b048 <ai_check_custom_types>
 8015d02:	b110      	cbz	r0, 8015d0a <ai_platform_network_create+0x18a>
 8015d04:	2600      	movs	r6, #0
 8015d06:	4634      	mov	r4, r6
 8015d08:	e7c8      	b.n	8015c9c <ai_platform_network_create+0x11c>
 8015d0a:	2402      	movs	r4, #2
 8015d0c:	e7c3      	b.n	8015c96 <ai_platform_network_create+0x116>
 8015d0e:	bf00      	nop
 8015d10:	e0042000 	.word	0xe0042000
 8015d14:	58024000 	.word	0x58024000
 8015d18:	40023000 	.word	0x40023000
 8015d1c:	f407a5c2 	.word	0xf407a5c2
 8015d20:	b5e8b5cd 	.word	0xb5e8b5cd
 8015d24:	a1c00100 	.word	0xa1c00100
 8015d28:	84048403 	.word	0x84048403

08015d2c <ai_platform_network_init>:
 8015d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d30:	b1f8      	cbz	r0, 8015d72 <ai_platform_network_init+0x46>
 8015d32:	4b6e      	ldr	r3, [pc, #440]	; (8015eec <ai_platform_network_init+0x1c0>)
 8015d34:	6802      	ldr	r2, [r0, #0]
 8015d36:	429a      	cmp	r2, r3
 8015d38:	4604      	mov	r4, r0
 8015d3a:	d11a      	bne.n	8015d72 <ai_platform_network_init+0x46>
 8015d3c:	460e      	mov	r6, r1
 8015d3e:	f7ff fc37 	bl	80155b0 <_ai_platform_acquire_crc>
 8015d42:	4b6b      	ldr	r3, [pc, #428]	; (8015ef0 <ai_platform_network_init+0x1c4>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015d4e:	d03d      	beq.n	8015dcc <ai_platform_network_init+0xa0>
 8015d50:	4a68      	ldr	r2, [pc, #416]	; (8015ef4 <ai_platform_network_init+0x1c8>)
 8015d52:	2301      	movs	r3, #1
 8015d54:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015d58:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d1fb      	bne.n	8015d58 <ai_platform_network_init+0x2c>
 8015d60:	4b65      	ldr	r3, [pc, #404]	; (8015ef8 <ai_platform_network_init+0x1cc>)
 8015d62:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015d66:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015d6a:	4b64      	ldr	r3, [pc, #400]	; (8015efc <ai_platform_network_init+0x1d0>)
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d039      	beq.n	8015de4 <ai_platform_network_init+0xb8>
 8015d70:	e7fe      	b.n	8015d70 <ai_platform_network_init+0x44>
 8015d72:	f7ff fc1d 	bl	80155b0 <_ai_platform_acquire_crc>
 8015d76:	4b5e      	ldr	r3, [pc, #376]	; (8015ef0 <ai_platform_network_init+0x1c4>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015d82:	d010      	beq.n	8015da6 <ai_platform_network_init+0x7a>
 8015d84:	4a5b      	ldr	r2, [pc, #364]	; (8015ef4 <ai_platform_network_init+0x1c8>)
 8015d86:	2301      	movs	r3, #1
 8015d88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015d8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d1fb      	bne.n	8015d8c <ai_platform_network_init+0x60>
 8015d94:	4b58      	ldr	r3, [pc, #352]	; (8015ef8 <ai_platform_network_init+0x1cc>)
 8015d96:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015d9a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015d9e:	4b57      	ldr	r3, [pc, #348]	; (8015efc <ai_platform_network_init+0x1d0>)
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d00d      	beq.n	8015dc0 <ai_platform_network_init+0x94>
 8015da4:	e7fe      	b.n	8015da4 <ai_platform_network_init+0x78>
 8015da6:	4a56      	ldr	r2, [pc, #344]	; (8015f00 <ai_platform_network_init+0x1d4>)
 8015da8:	2301      	movs	r3, #1
 8015daa:	6093      	str	r3, [r2, #8]
 8015dac:	6893      	ldr	r3, [r2, #8]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d1fc      	bne.n	8015dac <ai_platform_network_init+0x80>
 8015db2:	4b51      	ldr	r3, [pc, #324]	; (8015ef8 <ai_platform_network_init+0x1cc>)
 8015db4:	6013      	str	r3, [r2, #0]
 8015db6:	6812      	ldr	r2, [r2, #0]
 8015db8:	4b50      	ldr	r3, [pc, #320]	; (8015efc <ai_platform_network_init+0x1d0>)
 8015dba:	429a      	cmp	r2, r3
 8015dbc:	d000      	beq.n	8015dc0 <ai_platform_network_init+0x94>
 8015dbe:	e7fe      	b.n	8015dbe <ai_platform_network_init+0x92>
 8015dc0:	f7ff fbf8 	bl	80155b4 <_ai_platform_release_crc>
 8015dc4:	2600      	movs	r6, #0
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dcc:	4a4c      	ldr	r2, [pc, #304]	; (8015f00 <ai_platform_network_init+0x1d4>)
 8015dce:	2301      	movs	r3, #1
 8015dd0:	6093      	str	r3, [r2, #8]
 8015dd2:	6893      	ldr	r3, [r2, #8]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d1fc      	bne.n	8015dd2 <ai_platform_network_init+0xa6>
 8015dd8:	4b47      	ldr	r3, [pc, #284]	; (8015ef8 <ai_platform_network_init+0x1cc>)
 8015dda:	6013      	str	r3, [r2, #0]
 8015ddc:	6812      	ldr	r2, [r2, #0]
 8015dde:	4b47      	ldr	r3, [pc, #284]	; (8015efc <ai_platform_network_init+0x1d0>)
 8015de0:	429a      	cmp	r2, r3
 8015de2:	d11c      	bne.n	8015e1e <ai_platform_network_init+0xf2>
 8015de4:	f7ff fbe6 	bl	80155b4 <_ai_platform_release_crc>
 8015de8:	2e00      	cmp	r6, #0
 8015dea:	d06f      	beq.n	8015ecc <ai_platform_network_init+0x1a0>
 8015dec:	4b45      	ldr	r3, [pc, #276]	; (8015f04 <ai_platform_network_init+0x1d8>)
 8015dee:	6832      	ldr	r2, [r6, #0]
 8015df0:	429a      	cmp	r2, r3
 8015df2:	d115      	bne.n	8015e20 <ai_platform_network_init+0xf4>
 8015df4:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8015df8:	6933      	ldr	r3, [r6, #16]
 8015dfa:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8015dfe:	89f7      	ldrh	r7, [r6, #14]
 8015e00:	62a3      	str	r3, [r4, #40]	; 0x28
 8015e02:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8015e06:	2303      	movs	r3, #3
 8015e08:	84e7      	strh	r7, [r4, #38]	; 0x26
 8015e0a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8015e0e:	60e3      	str	r3, [r4, #12]
 8015e10:	4620      	mov	r0, r4
 8015e12:	4626      	mov	r6, r4
 8015e14:	f005 f942 	bl	801b09c <ai_layers_init_all>
 8015e18:	4630      	mov	r0, r6
 8015e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e1e:	e7fe      	b.n	8015e1e <ai_platform_network_init+0xf2>
 8015e20:	2101      	movs	r1, #1
 8015e22:	4630      	mov	r0, r6
 8015e24:	4635      	mov	r5, r6
 8015e26:	6876      	ldr	r6, [r6, #4]
 8015e28:	f7ff fb74 	bl	8015514 <ai_buffer_get_size>
 8015e2c:	f105 081c 	add.w	r8, r5, #28
 8015e30:	4681      	mov	r9, r0
 8015e32:	2101      	movs	r1, #1
 8015e34:	4640      	mov	r0, r8
 8015e36:	6a2f      	ldr	r7, [r5, #32]
 8015e38:	f7ff fb6c 	bl	8015514 <ai_buffer_get_size>
 8015e3c:	f1b9 0f00 	cmp.w	r9, #0
 8015e40:	d025      	beq.n	8015e8e <ai_platform_network_init+0x162>
 8015e42:	2201      	movs	r2, #1
 8015e44:	4696      	mov	lr, r2
 8015e46:	bb30      	cbnz	r0, 8015e96 <ai_platform_network_init+0x16a>
 8015e48:	4680      	mov	r8, r0
 8015e4a:	4607      	mov	r7, r0
 8015e4c:	b376      	cbz	r6, 8015eac <ai_platform_network_init+0x180>
 8015e4e:	8be3      	ldrh	r3, [r4, #30]
 8015e50:	4573      	cmp	r3, lr
 8015e52:	d323      	bcc.n	8015e9c <ai_platform_network_init+0x170>
 8015e54:	b142      	cbz	r2, 8015e68 <ai_platform_network_init+0x13c>
 8015e56:	46ac      	mov	ip, r5
 8015e58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e5c:	6a25      	ldr	r5, [r4, #32]
 8015e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015e60:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8015e64:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015e68:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8015e6a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8015e6e:	2600      	movs	r6, #0
 8015e70:	42bb      	cmp	r3, r7
 8015e72:	83a6      	strh	r6, [r4, #28]
 8015e74:	d323      	bcc.n	8015ebe <ai_platform_network_init+0x192>
 8015e76:	b37f      	cbz	r7, 8015ed8 <ai_platform_network_init+0x1ac>
 8015e78:	46c4      	mov	ip, r8
 8015e7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e7e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8015e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015e82:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8015e86:	46b6      	mov	lr, r6
 8015e88:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015e8c:	e7bb      	b.n	8015e06 <ai_platform_network_init+0xda>
 8015e8e:	464a      	mov	r2, r9
 8015e90:	46ce      	mov	lr, r9
 8015e92:	464d      	mov	r5, r9
 8015e94:	e7d7      	b.n	8015e46 <ai_platform_network_init+0x11a>
 8015e96:	b30f      	cbz	r7, 8015edc <ai_platform_network_init+0x1b0>
 8015e98:	2701      	movs	r7, #1
 8015e9a:	e7d7      	b.n	8015e4c <ai_platform_network_init+0x120>
 8015e9c:	2212      	movs	r2, #18
 8015e9e:	2116      	movs	r1, #22
 8015ea0:	f104 0010 	add.w	r0, r4, #16
 8015ea4:	f000 fb46 	bl	8016534 <core_set_error>
 8015ea8:	2600      	movs	r6, #0
 8015eaa:	e78c      	b.n	8015dc6 <ai_platform_network_init+0x9a>
 8015eac:	f1b9 0f00 	cmp.w	r9, #0
 8015eb0:	d0cd      	beq.n	8015e4e <ai_platform_network_init+0x122>
 8015eb2:	2110      	movs	r1, #16
 8015eb4:	2212      	movs	r2, #18
 8015eb6:	1860      	adds	r0, r4, r1
 8015eb8:	f000 fb3c 	bl	8016534 <core_set_error>
 8015ebc:	e783      	b.n	8015dc6 <ai_platform_network_init+0x9a>
 8015ebe:	2213      	movs	r2, #19
 8015ec0:	2116      	movs	r1, #22
 8015ec2:	f104 0010 	add.w	r0, r4, #16
 8015ec6:	f000 fb35 	bl	8016534 <core_set_error>
 8015eca:	e77c      	b.n	8015dc6 <ai_platform_network_init+0x9a>
 8015ecc:	2110      	movs	r1, #16
 8015ece:	2211      	movs	r2, #17
 8015ed0:	1860      	adds	r0, r4, r1
 8015ed2:	f000 fb2f 	bl	8016534 <core_set_error>
 8015ed6:	e776      	b.n	8015dc6 <ai_platform_network_init+0x9a>
 8015ed8:	46be      	mov	lr, r7
 8015eda:	e794      	b.n	8015e06 <ai_platform_network_init+0xda>
 8015edc:	2110      	movs	r1, #16
 8015ede:	2213      	movs	r2, #19
 8015ee0:	1860      	adds	r0, r4, r1
 8015ee2:	f000 fb27 	bl	8016534 <core_set_error>
 8015ee6:	463e      	mov	r6, r7
 8015ee8:	e76d      	b.n	8015dc6 <ai_platform_network_init+0x9a>
 8015eea:	bf00      	nop
 8015eec:	a1c00100 	.word	0xa1c00100
 8015ef0:	e0042000 	.word	0xe0042000
 8015ef4:	58024000 	.word	0x58024000
 8015ef8:	f407a5c2 	.word	0xf407a5c2
 8015efc:	b5e8b5cd 	.word	0xb5e8b5cd
 8015f00:	40023000 	.word	0x40023000
 8015f04:	a1facade 	.word	0xa1facade

08015f08 <ai_platform_network_post_init>:
 8015f08:	b538      	push	{r3, r4, r5, lr}
 8015f0a:	b1f0      	cbz	r0, 8015f4a <ai_platform_network_post_init+0x42>
 8015f0c:	4b3c      	ldr	r3, [pc, #240]	; (8016000 <ai_platform_network_post_init+0xf8>)
 8015f0e:	6802      	ldr	r2, [r0, #0]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	4604      	mov	r4, r0
 8015f14:	d119      	bne.n	8015f4a <ai_platform_network_post_init+0x42>
 8015f16:	f7ff fb4b 	bl	80155b0 <_ai_platform_acquire_crc>
 8015f1a:	4b3a      	ldr	r3, [pc, #232]	; (8016004 <ai_platform_network_post_init+0xfc>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015f26:	d03b      	beq.n	8015fa0 <ai_platform_network_post_init+0x98>
 8015f28:	4a37      	ldr	r2, [pc, #220]	; (8016008 <ai_platform_network_post_init+0x100>)
 8015f2a:	2301      	movs	r3, #1
 8015f2c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015f30:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d1fb      	bne.n	8015f30 <ai_platform_network_post_init+0x28>
 8015f38:	4b34      	ldr	r3, [pc, #208]	; (801600c <ai_platform_network_post_init+0x104>)
 8015f3a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015f3e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015f42:	4b33      	ldr	r3, [pc, #204]	; (8016010 <ai_platform_network_post_init+0x108>)
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d037      	beq.n	8015fb8 <ai_platform_network_post_init+0xb0>
 8015f48:	e7fe      	b.n	8015f48 <ai_platform_network_post_init+0x40>
 8015f4a:	f7ff fb31 	bl	80155b0 <_ai_platform_acquire_crc>
 8015f4e:	4b2d      	ldr	r3, [pc, #180]	; (8016004 <ai_platform_network_post_init+0xfc>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015f5a:	d010      	beq.n	8015f7e <ai_platform_network_post_init+0x76>
 8015f5c:	4a2a      	ldr	r2, [pc, #168]	; (8016008 <ai_platform_network_post_init+0x100>)
 8015f5e:	2301      	movs	r3, #1
 8015f60:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015f64:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d1fb      	bne.n	8015f64 <ai_platform_network_post_init+0x5c>
 8015f6c:	4b27      	ldr	r3, [pc, #156]	; (801600c <ai_platform_network_post_init+0x104>)
 8015f6e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015f72:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015f76:	4b26      	ldr	r3, [pc, #152]	; (8016010 <ai_platform_network_post_init+0x108>)
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d00d      	beq.n	8015f98 <ai_platform_network_post_init+0x90>
 8015f7c:	e7fe      	b.n	8015f7c <ai_platform_network_post_init+0x74>
 8015f7e:	4a25      	ldr	r2, [pc, #148]	; (8016014 <ai_platform_network_post_init+0x10c>)
 8015f80:	2301      	movs	r3, #1
 8015f82:	6093      	str	r3, [r2, #8]
 8015f84:	6893      	ldr	r3, [r2, #8]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d1fc      	bne.n	8015f84 <ai_platform_network_post_init+0x7c>
 8015f8a:	4b20      	ldr	r3, [pc, #128]	; (801600c <ai_platform_network_post_init+0x104>)
 8015f8c:	6013      	str	r3, [r2, #0]
 8015f8e:	6812      	ldr	r2, [r2, #0]
 8015f90:	4b1f      	ldr	r3, [pc, #124]	; (8016010 <ai_platform_network_post_init+0x108>)
 8015f92:	429a      	cmp	r2, r3
 8015f94:	d000      	beq.n	8015f98 <ai_platform_network_post_init+0x90>
 8015f96:	e7fe      	b.n	8015f96 <ai_platform_network_post_init+0x8e>
 8015f98:	f7ff fb0c 	bl	80155b4 <_ai_platform_release_crc>
 8015f9c:	2000      	movs	r0, #0
 8015f9e:	bd38      	pop	{r3, r4, r5, pc}
 8015fa0:	4a1c      	ldr	r2, [pc, #112]	; (8016014 <ai_platform_network_post_init+0x10c>)
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	6093      	str	r3, [r2, #8]
 8015fa6:	6893      	ldr	r3, [r2, #8]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d1fc      	bne.n	8015fa6 <ai_platform_network_post_init+0x9e>
 8015fac:	4b17      	ldr	r3, [pc, #92]	; (801600c <ai_platform_network_post_init+0x104>)
 8015fae:	6013      	str	r3, [r2, #0]
 8015fb0:	6812      	ldr	r2, [r2, #0]
 8015fb2:	4b17      	ldr	r3, [pc, #92]	; (8016010 <ai_platform_network_post_init+0x108>)
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d11a      	bne.n	8015fee <ai_platform_network_post_init+0xe6>
 8015fb8:	f7ff fafc 	bl	80155b4 <_ai_platform_release_crc>
 8015fbc:	68e3      	ldr	r3, [r4, #12]
 8015fbe:	f013 0502 	ands.w	r5, r3, #2
 8015fc2:	d015      	beq.n	8015ff0 <ai_platform_network_post_init+0xe8>
 8015fc4:	4620      	mov	r0, r4
 8015fc6:	f005 f877 	bl	801b0b8 <ai_layers_post_init_all>
 8015fca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015fcc:	b16b      	cbz	r3, 8015fea <ai_platform_network_post_init+0xe2>
 8015fce:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8015fd0:	e007      	b.n	8015fe2 <ai_platform_network_post_init+0xda>
 8015fd2:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8015fd6:	4798      	blx	r3
 8015fd8:	692b      	ldr	r3, [r5, #16]
 8015fda:	42ab      	cmp	r3, r5
 8015fdc:	d005      	beq.n	8015fea <ai_platform_network_post_init+0xe2>
 8015fde:	b123      	cbz	r3, 8015fea <ai_platform_network_post_init+0xe2>
 8015fe0:	461d      	mov	r5, r3
 8015fe2:	4629      	mov	r1, r5
 8015fe4:	2000      	movs	r0, #0
 8015fe6:	2d00      	cmp	r5, #0
 8015fe8:	d1f3      	bne.n	8015fd2 <ai_platform_network_post_init+0xca>
 8015fea:	2001      	movs	r0, #1
 8015fec:	bd38      	pop	{r3, r4, r5, pc}
 8015fee:	e7fe      	b.n	8015fee <ai_platform_network_post_init+0xe6>
 8015ff0:	2210      	movs	r2, #16
 8015ff2:	2111      	movs	r1, #17
 8015ff4:	18a0      	adds	r0, r4, r2
 8015ff6:	f000 fa9d 	bl	8016534 <core_set_error>
 8015ffa:	4628      	mov	r0, r5
 8015ffc:	bd38      	pop	{r3, r4, r5, pc}
 8015ffe:	bf00      	nop
 8016000:	a1c00100 	.word	0xa1c00100
 8016004:	e0042000 	.word	0xe0042000
 8016008:	58024000 	.word	0x58024000
 801600c:	f407a5c2 	.word	0xf407a5c2
 8016010:	b5e8b5cd 	.word	0xb5e8b5cd
 8016014:	40023000 	.word	0x40023000

08016018 <ai_platform_network_process>:
 8016018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801601c:	460e      	mov	r6, r1
 801601e:	b085      	sub	sp, #20
 8016020:	4693      	mov	fp, r2
 8016022:	4605      	mov	r5, r0
 8016024:	b120      	cbz	r0, 8016030 <ai_platform_network_process+0x18>
 8016026:	4bb8      	ldr	r3, [pc, #736]	; (8016308 <ai_platform_network_process+0x2f0>)
 8016028:	6802      	ldr	r2, [r0, #0]
 801602a:	429a      	cmp	r2, r3
 801602c:	bf18      	it	ne
 801602e:	2500      	movne	r5, #0
 8016030:	f7ff fabe 	bl	80155b0 <_ai_platform_acquire_crc>
 8016034:	4bb5      	ldr	r3, [pc, #724]	; (801630c <ai_platform_network_process+0x2f4>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801603c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016040:	d010      	beq.n	8016064 <ai_platform_network_process+0x4c>
 8016042:	4ab3      	ldr	r2, [pc, #716]	; (8016310 <ai_platform_network_process+0x2f8>)
 8016044:	2301      	movs	r3, #1
 8016046:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801604a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801604e:	2b00      	cmp	r3, #0
 8016050:	d1fb      	bne.n	801604a <ai_platform_network_process+0x32>
 8016052:	4bb0      	ldr	r3, [pc, #704]	; (8016314 <ai_platform_network_process+0x2fc>)
 8016054:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8016058:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801605c:	4bae      	ldr	r3, [pc, #696]	; (8016318 <ai_platform_network_process+0x300>)
 801605e:	429a      	cmp	r2, r3
 8016060:	d00d      	beq.n	801607e <ai_platform_network_process+0x66>
 8016062:	e7fe      	b.n	8016062 <ai_platform_network_process+0x4a>
 8016064:	4aad      	ldr	r2, [pc, #692]	; (801631c <ai_platform_network_process+0x304>)
 8016066:	2301      	movs	r3, #1
 8016068:	6093      	str	r3, [r2, #8]
 801606a:	6893      	ldr	r3, [r2, #8]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d1fc      	bne.n	801606a <ai_platform_network_process+0x52>
 8016070:	4ba8      	ldr	r3, [pc, #672]	; (8016314 <ai_platform_network_process+0x2fc>)
 8016072:	6013      	str	r3, [r2, #0]
 8016074:	6812      	ldr	r2, [r2, #0]
 8016076:	4ba8      	ldr	r3, [pc, #672]	; (8016318 <ai_platform_network_process+0x300>)
 8016078:	429a      	cmp	r2, r3
 801607a:	f040 812c 	bne.w	80162d6 <ai_platform_network_process+0x2be>
 801607e:	f7ff fa99 	bl	80155b4 <_ai_platform_release_crc>
 8016082:	2d00      	cmp	r5, #0
 8016084:	f000 8154 	beq.w	8016330 <ai_platform_network_process+0x318>
 8016088:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801608a:	2b00      	cmp	r3, #0
 801608c:	f000 8124 	beq.w	80162d8 <ai_platform_network_process+0x2c0>
 8016090:	68eb      	ldr	r3, [r5, #12]
 8016092:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8016096:	f003 0303 	and.w	r3, r3, #3
 801609a:	2700      	movs	r7, #0
 801609c:	2b03      	cmp	r3, #3
 801609e:	616f      	str	r7, [r5, #20]
 80160a0:	f040 813e 	bne.w	8016320 <ai_platform_network_process+0x308>
 80160a4:	2e00      	cmp	r6, #0
 80160a6:	f000 811d 	beq.w	80162e4 <ai_platform_network_process+0x2cc>
 80160aa:	f1ba 0f00 	cmp.w	sl, #0
 80160ae:	f000 8119 	beq.w	80162e4 <ai_platform_network_process+0x2cc>
 80160b2:	f8ba 3000 	ldrh.w	r3, [sl]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	f000 8114 	beq.w	80162e4 <ai_platform_network_process+0x2cc>
 80160bc:	69b3      	ldr	r3, [r6, #24]
 80160be:	f8cd b00c 	str.w	fp, [sp, #12]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80160c8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d072      	beq.n	80161b6 <ai_platform_network_process+0x19e>
 80160d0:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80160d4:	2c00      	cmp	r4, #0
 80160d6:	d06e      	beq.n	80161b6 <ai_platform_network_process+0x19e>
 80160d8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80160dc:	f8d3 9000 	ldr.w	r9, [r3]
 80160e0:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80160e4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80160e8:	f000 81e0 	beq.w	80164ac <ai_platform_network_process+0x494>
 80160ec:	69a3      	ldr	r3, [r4, #24]
 80160ee:	2101      	movs	r1, #1
 80160f0:	4630      	mov	r0, r6
 80160f2:	685d      	ldr	r5, [r3, #4]
 80160f4:	f7ff fa0e 	bl	8015514 <ai_buffer_get_size>
 80160f8:	4285      	cmp	r5, r0
 80160fa:	f0c0 811b 	bcc.w	8016334 <ai_platform_network_process+0x31c>
 80160fe:	68e0      	ldr	r0, [r4, #12]
 8016100:	69b1      	ldr	r1, [r6, #24]
 8016102:	68c2      	ldr	r2, [r0, #12]
 8016104:	68cb      	ldr	r3, [r1, #12]
 8016106:	429a      	cmp	r2, r3
 8016108:	f040 8114 	bne.w	8016334 <ai_platform_network_process+0x31c>
 801610c:	6882      	ldr	r2, [r0, #8]
 801610e:	688b      	ldr	r3, [r1, #8]
 8016110:	429a      	cmp	r2, r3
 8016112:	f040 810f 	bne.w	8016334 <ai_platform_network_process+0x31c>
 8016116:	6842      	ldr	r2, [r0, #4]
 8016118:	684b      	ldr	r3, [r1, #4]
 801611a:	429a      	cmp	r2, r3
 801611c:	f040 810a 	bne.w	8016334 <ai_platform_network_process+0x31c>
 8016120:	69a3      	ldr	r3, [r4, #24]
 8016122:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016126:	f005 f8d7 	bl	801b2d8 <ai_array_get_data_byte_size>
 801612a:	4605      	mov	r5, r0
 801612c:	4620      	mov	r0, r4
 801612e:	f005 f827 	bl	801b180 <get_tensor_byte_size>
 8016132:	4285      	cmp	r5, r0
 8016134:	f0c0 80fe 	bcc.w	8016334 <ai_platform_network_process+0x31c>
 8016138:	69a3      	ldr	r3, [r4, #24]
 801613a:	6818      	ldr	r0, [r3, #0]
 801613c:	f005 f838 	bl	801b1b0 <ai_array_to_buffer_fmt>
 8016140:	6833      	ldr	r3, [r6, #0]
 8016142:	4058      	eors	r0, r3
 8016144:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8016148:	f040 81bb 	bne.w	80164c2 <ai_platform_network_process+0x4aa>
 801614c:	6873      	ldr	r3, [r6, #4]
 801614e:	2b00      	cmp	r3, #0
 8016150:	f000 81ae 	beq.w	80164b0 <ai_platform_network_process+0x498>
 8016154:	69b3      	ldr	r3, [r6, #24]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	2b00      	cmp	r3, #0
 801615a:	f000 819e 	beq.w	801649a <ai_platform_network_process+0x482>
 801615e:	9a01      	ldr	r2, [sp, #4]
 8016160:	429a      	cmp	r2, r3
 8016162:	bf38      	it	cc
 8016164:	461a      	movcc	r2, r3
 8016166:	4620      	mov	r0, r4
 8016168:	9201      	str	r2, [sp, #4]
 801616a:	f005 f809 	bl	801b180 <get_tensor_byte_size>
 801616e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016172:	69b3      	ldr	r3, [r6, #24]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	fb00 f303 	mul.w	r3, r0, r3
 801617a:	f8c8 300c 	str.w	r3, [r8, #12]
 801617e:	6871      	ldr	r1, [r6, #4]
 8016180:	f8c8 1004 	str.w	r1, [r8, #4]
 8016184:	440b      	add	r3, r1
 8016186:	f849 300b 	str.w	r3, [r9, fp]
 801618a:	69a0      	ldr	r0, [r4, #24]
 801618c:	6803      	ldr	r3, [r0, #0]
 801618e:	009a      	lsls	r2, r3, #2
 8016190:	f107 0701 	add.w	r7, r7, #1
 8016194:	f106 061c 	add.w	r6, r6, #28
 8016198:	f100 80af 	bmi.w	80162fa <ai_platform_network_process+0x2e2>
 801619c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80161a0:	1a9b      	subs	r3, r3, r2
 80161a2:	4419      	add	r1, r3
 80161a4:	6081      	str	r1, [r0, #8]
 80161a6:	69a3      	ldr	r3, [r4, #24]
 80161a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80161ac:	60da      	str	r2, [r3, #12]
 80161ae:	f8ba 3000 	ldrh.w	r3, [sl]
 80161b2:	42bb      	cmp	r3, r7
 80161b4:	d888      	bhi.n	80160c8 <ai_platform_network_process+0xb0>
 80161b6:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80161ba:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80161bc:	f1bb 0f00 	cmp.w	fp, #0
 80161c0:	f000 8188 	beq.w	80164d4 <ai_platform_network_process+0x4bc>
 80161c4:	2a01      	cmp	r2, #1
 80161c6:	f240 8160 	bls.w	801648a <ai_platform_network_process+0x472>
 80161ca:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80161ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	f000 8159 	beq.w	801648a <ai_platform_network_process+0x472>
 80161d8:	465e      	mov	r6, fp
 80161da:	2700      	movs	r7, #0
 80161dc:	462c      	mov	r4, r5
 80161de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	f000 80b4 	beq.w	8016350 <ai_platform_network_process+0x338>
 80161e8:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80161ec:	2d00      	cmp	r5, #0
 80161ee:	f000 80af 	beq.w	8016350 <ai_platform_network_process+0x338>
 80161f2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80161f6:	f8d3 8000 	ldr.w	r8, [r3]
 80161fa:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80161fe:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8016202:	f000 8173 	beq.w	80164ec <ai_platform_network_process+0x4d4>
 8016206:	69ab      	ldr	r3, [r5, #24]
 8016208:	2101      	movs	r1, #1
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	9302      	str	r3, [sp, #8]
 801620e:	4630      	mov	r0, r6
 8016210:	f7ff f980 	bl	8015514 <ai_buffer_get_size>
 8016214:	9b02      	ldr	r3, [sp, #8]
 8016216:	4283      	cmp	r3, r0
 8016218:	f0c0 8136 	bcc.w	8016488 <ai_platform_network_process+0x470>
 801621c:	68e8      	ldr	r0, [r5, #12]
 801621e:	69b1      	ldr	r1, [r6, #24]
 8016220:	68c2      	ldr	r2, [r0, #12]
 8016222:	68cb      	ldr	r3, [r1, #12]
 8016224:	429a      	cmp	r2, r3
 8016226:	f040 812f 	bne.w	8016488 <ai_platform_network_process+0x470>
 801622a:	6882      	ldr	r2, [r0, #8]
 801622c:	688b      	ldr	r3, [r1, #8]
 801622e:	429a      	cmp	r2, r3
 8016230:	f040 812a 	bne.w	8016488 <ai_platform_network_process+0x470>
 8016234:	6842      	ldr	r2, [r0, #4]
 8016236:	684b      	ldr	r3, [r1, #4]
 8016238:	429a      	cmp	r2, r3
 801623a:	f040 8125 	bne.w	8016488 <ai_platform_network_process+0x470>
 801623e:	69ab      	ldr	r3, [r5, #24]
 8016240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016244:	f005 f848 	bl	801b2d8 <ai_array_get_data_byte_size>
 8016248:	9002      	str	r0, [sp, #8]
 801624a:	4628      	mov	r0, r5
 801624c:	f004 ff98 	bl	801b180 <get_tensor_byte_size>
 8016250:	9b02      	ldr	r3, [sp, #8]
 8016252:	4283      	cmp	r3, r0
 8016254:	f0c0 8118 	bcc.w	8016488 <ai_platform_network_process+0x470>
 8016258:	69ab      	ldr	r3, [r5, #24]
 801625a:	6818      	ldr	r0, [r3, #0]
 801625c:	f004 ffa8 	bl	801b1b0 <ai_array_to_buffer_fmt>
 8016260:	6833      	ldr	r3, [r6, #0]
 8016262:	4058      	eors	r0, r3
 8016264:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8016268:	f040 8138 	bne.w	80164dc <ai_platform_network_process+0x4c4>
 801626c:	6873      	ldr	r3, [r6, #4]
 801626e:	2b00      	cmp	r3, #0
 8016270:	f000 814f 	beq.w	8016512 <ai_platform_network_process+0x4fa>
 8016274:	69b3      	ldr	r3, [r6, #24]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	2b00      	cmp	r3, #0
 801627a:	f000 8141 	beq.w	8016500 <ai_platform_network_process+0x4e8>
 801627e:	9a01      	ldr	r2, [sp, #4]
 8016280:	429a      	cmp	r2, r3
 8016282:	bf38      	it	cc
 8016284:	461a      	movcc	r2, r3
 8016286:	4628      	mov	r0, r5
 8016288:	9201      	str	r2, [sp, #4]
 801628a:	f004 ff79 	bl	801b180 <get_tensor_byte_size>
 801628e:	f8ca 0008 	str.w	r0, [sl, #8]
 8016292:	69b3      	ldr	r3, [r6, #24]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	fb00 f303 	mul.w	r3, r0, r3
 801629a:	f8ca 300c 	str.w	r3, [sl, #12]
 801629e:	6871      	ldr	r1, [r6, #4]
 80162a0:	f8ca 1004 	str.w	r1, [sl, #4]
 80162a4:	440b      	add	r3, r1
 80162a6:	f848 300b 	str.w	r3, [r8, fp]
 80162aa:	69a8      	ldr	r0, [r5, #24]
 80162ac:	6803      	ldr	r3, [r0, #0]
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	f107 0701 	add.w	r7, r7, #1
 80162b4:	f106 061c 	add.w	r6, r6, #28
 80162b8:	d445      	bmi.n	8016346 <ai_platform_network_process+0x32e>
 80162ba:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80162be:	1a9b      	subs	r3, r3, r2
 80162c0:	4419      	add	r1, r3
 80162c2:	6081      	str	r1, [r0, #8]
 80162c4:	69ab      	ldr	r3, [r5, #24]
 80162c6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80162ca:	60da      	str	r2, [r3, #12]
 80162cc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80162d0:	429f      	cmp	r7, r3
 80162d2:	d384      	bcc.n	80161de <ai_platform_network_process+0x1c6>
 80162d4:	e03c      	b.n	8016350 <ai_platform_network_process+0x338>
 80162d6:	e7fe      	b.n	80162d6 <ai_platform_network_process+0x2be>
 80162d8:	68ea      	ldr	r2, [r5, #12]
 80162da:	616b      	str	r3, [r5, #20]
 80162dc:	f002 0203 	and.w	r2, r2, #3
 80162e0:	2a03      	cmp	r2, #3
 80162e2:	d11d      	bne.n	8016320 <ai_platform_network_process+0x308>
 80162e4:	2217      	movs	r2, #23
 80162e6:	2112      	movs	r1, #18
 80162e8:	f105 0010 	add.w	r0, r5, #16
 80162ec:	f000 f922 	bl	8016534 <core_set_error>
 80162f0:	2400      	movs	r4, #0
 80162f2:	4620      	mov	r0, r4
 80162f4:	b005      	add	sp, #20
 80162f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162fa:	f8ba 3000 	ldrh.w	r3, [sl]
 80162fe:	429f      	cmp	r7, r3
 8016300:	f4ff aee2 	bcc.w	80160c8 <ai_platform_network_process+0xb0>
 8016304:	e757      	b.n	80161b6 <ai_platform_network_process+0x19e>
 8016306:	bf00      	nop
 8016308:	a1c00100 	.word	0xa1c00100
 801630c:	e0042000 	.word	0xe0042000
 8016310:	58024000 	.word	0x58024000
 8016314:	f407a5c2 	.word	0xf407a5c2
 8016318:	b5e8b5cd 	.word	0xb5e8b5cd
 801631c:	40023000 	.word	0x40023000
 8016320:	2230      	movs	r2, #48	; 0x30
 8016322:	2111      	movs	r1, #17
 8016324:	f105 0010 	add.w	r0, r5, #16
 8016328:	f000 f904 	bl	8016534 <core_set_error>
 801632c:	2400      	movs	r4, #0
 801632e:	e7e0      	b.n	80162f2 <ai_platform_network_process+0x2da>
 8016330:	462c      	mov	r4, r5
 8016332:	e7de      	b.n	80162f2 <ai_platform_network_process+0x2da>
 8016334:	9d02      	ldr	r5, [sp, #8]
 8016336:	2218      	movs	r2, #24
 8016338:	2112      	movs	r1, #18
 801633a:	f105 0010 	add.w	r0, r5, #16
 801633e:	f000 f8f9 	bl	8016534 <core_set_error>
 8016342:	2400      	movs	r4, #0
 8016344:	e7d5      	b.n	80162f2 <ai_platform_network_process+0x2da>
 8016346:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801634a:	429f      	cmp	r7, r3
 801634c:	f4ff af47 	bcc.w	80161de <ai_platform_network_process+0x1c6>
 8016350:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016354:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8016356:	82a3      	strh	r3, [r4, #20]
 8016358:	4625      	mov	r5, r4
 801635a:	2a00      	cmp	r2, #0
 801635c:	f040 808e 	bne.w	801647c <ai_platform_network_process+0x464>
 8016360:	4616      	mov	r6, r2
 8016362:	4617      	mov	r7, r2
 8016364:	8aec      	ldrh	r4, [r5, #22]
 8016366:	429c      	cmp	r4, r3
 8016368:	bf38      	it	cc
 801636a:	46ab      	movcc	fp, r5
 801636c:	d2c1      	bcs.n	80162f2 <ai_platform_network_process+0x2da>
 801636e:	2e00      	cmp	r6, #0
 8016370:	d030      	beq.n	80163d4 <ai_platform_network_process+0x3bc>
 8016372:	f04f 0800 	mov.w	r8, #0
 8016376:	e014      	b.n	80163a2 <ai_platform_network_process+0x38a>
 8016378:	6882      	ldr	r2, [r0, #8]
 801637a:	68c5      	ldr	r5, [r0, #12]
 801637c:	6863      	ldr	r3, [r4, #4]
 801637e:	1b52      	subs	r2, r2, r5
 8016380:	4413      	add	r3, r2
 8016382:	6083      	str	r3, [r0, #8]
 8016384:	698b      	ldr	r3, [r1, #24]
 8016386:	6862      	ldr	r2, [r4, #4]
 8016388:	60da      	str	r2, [r3, #12]
 801638a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801638e:	f859 200a 	ldr.w	r2, [r9, sl]
 8016392:	440b      	add	r3, r1
 8016394:	4293      	cmp	r3, r2
 8016396:	bf24      	itt	cs
 8016398:	68e3      	ldrcs	r3, [r4, #12]
 801639a:	1ad3      	subcs	r3, r2, r3
 801639c:	6063      	str	r3, [r4, #4]
 801639e:	f108 0801 	add.w	r8, r8, #1
 80163a2:	8833      	ldrh	r3, [r6, #0]
 80163a4:	4543      	cmp	r3, r8
 80163a6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80163aa:	d913      	bls.n	80163d4 <ai_platform_network_process+0x3bc>
 80163ac:	6873      	ldr	r3, [r6, #4]
 80163ae:	b18b      	cbz	r3, 80163d4 <ai_platform_network_process+0x3bc>
 80163b0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80163b4:	b171      	cbz	r1, 80163d4 <ai_platform_network_process+0x3bc>
 80163b6:	6988      	ldr	r0, [r1, #24]
 80163b8:	68b2      	ldr	r2, [r6, #8]
 80163ba:	6803      	ldr	r3, [r0, #0]
 80163bc:	f8d2 9000 	ldr.w	r9, [r2]
 80163c0:	009d      	lsls	r5, r3, #2
 80163c2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80163c6:	d5d7      	bpl.n	8016378 <ai_platform_network_process+0x360>
 80163c8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80163cc:	6880      	ldr	r0, [r0, #8]
 80163ce:	f004 ffcf 	bl	801b370 <memcpy>
 80163d2:	e7da      	b.n	801638a <ai_platform_network_process+0x372>
 80163d4:	4658      	mov	r0, fp
 80163d6:	f004 fe83 	bl	801b0e0 <ai_layers_forward_all>
 80163da:	2f00      	cmp	r7, #0
 80163dc:	d03f      	beq.n	801645e <ai_platform_network_process+0x446>
 80163de:	2400      	movs	r4, #0
 80163e0:	e016      	b.n	8016410 <ai_platform_network_process+0x3f8>
 80163e2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80163e6:	f859 100a 	ldr.w	r1, [r9, sl]
 80163ea:	4413      	add	r3, r2
 80163ec:	428b      	cmp	r3, r1
 80163ee:	bf24      	itt	cs
 80163f0:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80163f4:	1acb      	subcs	r3, r1, r3
 80163f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80163fa:	6981      	ldr	r1, [r0, #24]
 80163fc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8016400:	1b52      	subs	r2, r2, r5
 8016402:	4413      	add	r3, r2
 8016404:	608b      	str	r3, [r1, #8]
 8016406:	6983      	ldr	r3, [r0, #24]
 8016408:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801640c:	60da      	str	r2, [r3, #12]
 801640e:	3401      	adds	r4, #1
 8016410:	883b      	ldrh	r3, [r7, #0]
 8016412:	42a3      	cmp	r3, r4
 8016414:	d923      	bls.n	801645e <ai_platform_network_process+0x446>
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	b30b      	cbz	r3, 801645e <ai_platform_network_process+0x446>
 801641a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801641e:	b1f0      	cbz	r0, 801645e <ai_platform_network_process+0x446>
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	6983      	ldr	r3, [r0, #24]
 8016424:	f8d2 9000 	ldr.w	r9, [r2]
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	0092      	lsls	r2, r2, #2
 801642c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8016430:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8016434:	d5d5      	bpl.n	80163e2 <ai_platform_network_process+0x3ca>
 8016436:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801643a:	6899      	ldr	r1, [r3, #8]
 801643c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016440:	f004 ff96 	bl	801b370 <memcpy>
 8016444:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8016448:	f859 200a 	ldr.w	r2, [r9, sl]
 801644c:	440b      	add	r3, r1
 801644e:	4293      	cmp	r3, r2
 8016450:	bf24      	itt	cs
 8016452:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8016456:	1ad3      	subcs	r3, r2, r3
 8016458:	f8c8 3004 	str.w	r3, [r8, #4]
 801645c:	e7d7      	b.n	801640e <ai_platform_network_process+0x3f6>
 801645e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8016462:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8016466:	3401      	adds	r4, #1
 8016468:	b2a4      	uxth	r4, r4
 801646a:	42a3      	cmp	r3, r4
 801646c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8016470:	f63f af7d 	bhi.w	801636e <ai_platform_network_process+0x356>
 8016474:	4620      	mov	r0, r4
 8016476:	b005      	add	sp, #20
 8016478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801647c:	2a01      	cmp	r2, #1
 801647e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8016480:	d03c      	beq.n	80164fc <ai_platform_network_process+0x4e4>
 8016482:	f106 070c 	add.w	r7, r6, #12
 8016486:	e76d      	b.n	8016364 <ai_platform_network_process+0x34c>
 8016488:	4625      	mov	r5, r4
 801648a:	2218      	movs	r2, #24
 801648c:	2113      	movs	r1, #19
 801648e:	f105 0010 	add.w	r0, r5, #16
 8016492:	f000 f84f 	bl	8016534 <core_set_error>
 8016496:	2400      	movs	r4, #0
 8016498:	e72b      	b.n	80162f2 <ai_platform_network_process+0x2da>
 801649a:	9d02      	ldr	r5, [sp, #8]
 801649c:	4604      	mov	r4, r0
 801649e:	2221      	movs	r2, #33	; 0x21
 80164a0:	2112      	movs	r1, #18
 80164a2:	f105 0010 	add.w	r0, r5, #16
 80164a6:	f000 f845 	bl	8016534 <core_set_error>
 80164aa:	e722      	b.n	80162f2 <ai_platform_network_process+0x2da>
 80164ac:	9d02      	ldr	r5, [sp, #8]
 80164ae:	e719      	b.n	80162e4 <ai_platform_network_process+0x2cc>
 80164b0:	9d02      	ldr	r5, [sp, #8]
 80164b2:	4604      	mov	r4, r0
 80164b4:	2217      	movs	r2, #23
 80164b6:	2112      	movs	r1, #18
 80164b8:	f105 0010 	add.w	r0, r5, #16
 80164bc:	f000 f83a 	bl	8016534 <core_set_error>
 80164c0:	e717      	b.n	80162f2 <ai_platform_network_process+0x2da>
 80164c2:	9d02      	ldr	r5, [sp, #8]
 80164c4:	2219      	movs	r2, #25
 80164c6:	2112      	movs	r1, #18
 80164c8:	f105 0010 	add.w	r0, r5, #16
 80164cc:	f000 f832 	bl	8016534 <core_set_error>
 80164d0:	2400      	movs	r4, #0
 80164d2:	e70e      	b.n	80162f2 <ai_platform_network_process+0x2da>
 80164d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80164d8:	82ab      	strh	r3, [r5, #20]
 80164da:	e73e      	b.n	801635a <ai_platform_network_process+0x342>
 80164dc:	f104 0010 	add.w	r0, r4, #16
 80164e0:	2219      	movs	r2, #25
 80164e2:	2113      	movs	r1, #19
 80164e4:	f000 f826 	bl	8016534 <core_set_error>
 80164e8:	2400      	movs	r4, #0
 80164ea:	e702      	b.n	80162f2 <ai_platform_network_process+0x2da>
 80164ec:	f104 0010 	add.w	r0, r4, #16
 80164f0:	2217      	movs	r2, #23
 80164f2:	2113      	movs	r1, #19
 80164f4:	f000 f81e 	bl	8016534 <core_set_error>
 80164f8:	4654      	mov	r4, sl
 80164fa:	e6fa      	b.n	80162f2 <ai_platform_network_process+0x2da>
 80164fc:	2700      	movs	r7, #0
 80164fe:	e731      	b.n	8016364 <ai_platform_network_process+0x34c>
 8016500:	4625      	mov	r5, r4
 8016502:	2221      	movs	r2, #33	; 0x21
 8016504:	4604      	mov	r4, r0
 8016506:	2113      	movs	r1, #19
 8016508:	f105 0010 	add.w	r0, r5, #16
 801650c:	f000 f812 	bl	8016534 <core_set_error>
 8016510:	e6ef      	b.n	80162f2 <ai_platform_network_process+0x2da>
 8016512:	4625      	mov	r5, r4
 8016514:	2217      	movs	r2, #23
 8016516:	4604      	mov	r4, r0
 8016518:	2113      	movs	r1, #19
 801651a:	f105 0010 	add.w	r0, r5, #16
 801651e:	f000 f809 	bl	8016534 <core_set_error>
 8016522:	e6e6      	b.n	80162f2 <ai_platform_network_process+0x2da>

08016524 <core_init>:
 8016524:	2001      	movs	r0, #1
 8016526:	4770      	bx	lr

08016528 <core_get_error>:
 8016528:	4603      	mov	r3, r0
 801652a:	2200      	movs	r2, #0
 801652c:	6800      	ldr	r0, [r0, #0]
 801652e:	601a      	str	r2, [r3, #0]
 8016530:	4770      	bx	lr
 8016532:	bf00      	nop

08016534 <core_set_error>:
 8016534:	4603      	mov	r3, r0
 8016536:	7800      	ldrb	r0, [r0, #0]
 8016538:	b108      	cbz	r0, 801653e <core_set_error+0xa>
 801653a:	2000      	movs	r0, #0
 801653c:	4770      	bx	lr
 801653e:	7019      	strb	r1, [r3, #0]
 8016540:	6819      	ldr	r1, [r3, #0]
 8016542:	f362 211f 	bfi	r1, r2, #8, #24
 8016546:	2001      	movs	r0, #1
 8016548:	6019      	str	r1, [r3, #0]
 801654a:	4770      	bx	lr

0801654c <_array_handle_get_as_float>:
 801654c:	b508      	push	{r3, lr}
 801654e:	4b34      	ldr	r3, [pc, #208]	; (8016620 <_array_handle_get_as_float+0xd4>)
 8016550:	4299      	cmp	r1, r3
 8016552:	d058      	beq.n	8016606 <_array_handle_get_as_float+0xba>
 8016554:	dc22      	bgt.n	801659c <_array_handle_get_as_float+0x50>
 8016556:	4b33      	ldr	r3, [pc, #204]	; (8016624 <_array_handle_get_as_float+0xd8>)
 8016558:	4299      	cmp	r1, r3
 801655a:	d05b      	beq.n	8016614 <_array_handle_get_as_float+0xc8>
 801655c:	dd10      	ble.n	8016580 <_array_handle_get_as_float+0x34>
 801655e:	4b32      	ldr	r3, [pc, #200]	; (8016628 <_array_handle_get_as_float+0xdc>)
 8016560:	4299      	cmp	r1, r3
 8016562:	d035      	beq.n	80165d0 <_array_handle_get_as_float+0x84>
 8016564:	f503 33f2 	add.w	r3, r3, #123904	; 0x1e400
 8016568:	4299      	cmp	r1, r3
 801656a:	d12e      	bne.n	80165ca <_array_handle_get_as_float+0x7e>
 801656c:	7803      	ldrb	r3, [r0, #0]
 801656e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 801662c <_array_handle_get_as_float+0xe0>
 8016572:	2b00      	cmp	r3, #0
 8016574:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016578:	bf08      	it	eq
 801657a:	eeb0 0a67 	vmoveq.f32	s0, s15
 801657e:	bd08      	pop	{r3, pc}
 8016580:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8016584:	4299      	cmp	r1, r3
 8016586:	d02a      	beq.n	80165de <_array_handle_get_as_float+0x92>
 8016588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801658c:	4299      	cmp	r1, r3
 801658e:	d11c      	bne.n	80165ca <_array_handle_get_as_float+0x7e>
 8016590:	8803      	ldrh	r3, [r0, #0]
 8016592:	ee00 3a10 	vmov	s0, r3
 8016596:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801659a:	bd08      	pop	{r3, pc}
 801659c:	4b24      	ldr	r3, [pc, #144]	; (8016630 <_array_handle_get_as_float+0xe4>)
 801659e:	4299      	cmp	r1, r3
 80165a0:	d023      	beq.n	80165ea <_array_handle_get_as_float+0x9e>
 80165a2:	dd05      	ble.n	80165b0 <_array_handle_get_as_float+0x64>
 80165a4:	4b23      	ldr	r3, [pc, #140]	; (8016634 <_array_handle_get_as_float+0xe8>)
 80165a6:	4299      	cmp	r1, r3
 80165a8:	d10f      	bne.n	80165ca <_array_handle_get_as_float+0x7e>
 80165aa:	ed90 0a00 	vldr	s0, [r0]
 80165ae:	bd08      	pop	{r3, pc}
 80165b0:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 80165b4:	4299      	cmp	r1, r3
 80165b6:	d01f      	beq.n	80165f8 <_array_handle_get_as_float+0xac>
 80165b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80165bc:	4299      	cmp	r1, r3
 80165be:	d104      	bne.n	80165ca <_array_handle_get_as_float+0x7e>
 80165c0:	ed90 0a00 	vldr	s0, [r0]
 80165c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80165c8:	bd08      	pop	{r3, pc}
 80165ca:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801662c <_array_handle_get_as_float+0xe0>
 80165ce:	bd08      	pop	{r3, pc}
 80165d0:	e9d0 0100 	ldrd	r0, r1, [r0]
 80165d4:	f7ea fbf0 	bl	8000db8 <__aeabi_ul2f>
 80165d8:	ee00 0a10 	vmov	s0, r0
 80165dc:	bd08      	pop	{r3, pc}
 80165de:	7803      	ldrb	r3, [r0, #0]
 80165e0:	ee00 3a10 	vmov	s0, r3
 80165e4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80165e8:	bd08      	pop	{r3, pc}
 80165ea:	e9d0 0100 	ldrd	r0, r1, [r0]
 80165ee:	f7ea fbeb 	bl	8000dc8 <__aeabi_l2f>
 80165f2:	ee00 0a10 	vmov	s0, r0
 80165f6:	bd08      	pop	{r3, pc}
 80165f8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80165fc:	ee00 3a10 	vmov	s0, r3
 8016600:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016604:	bd08      	pop	{r3, pc}
 8016606:	f990 3000 	ldrsb.w	r3, [r0]
 801660a:	ee00 3a10 	vmov	s0, r3
 801660e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016612:	bd08      	pop	{r3, pc}
 8016614:	ed90 0a00 	vldr	s0, [r0]
 8016618:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801661c:	bd08      	pop	{r3, pc}
 801661e:	bf00      	nop
 8016620:	00840440 	.word	0x00840440
 8016624:	00041040 	.word	0x00041040
 8016628:	00042040 	.word	0x00042040
 801662c:	00000000 	.word	0x00000000
 8016630:	00842040 	.word	0x00842040
 8016634:	01821040 	.word	0x01821040

08016638 <forward_cast>:
 8016638:	6983      	ldr	r3, [r0, #24]
 801663a:	881a      	ldrh	r2, [r3, #0]
 801663c:	2a00      	cmp	r2, #0
 801663e:	f000 815c 	beq.w	80168fa <forward_cast+0x2c2>
 8016642:	6859      	ldr	r1, [r3, #4]
 8016644:	684b      	ldr	r3, [r1, #4]
 8016646:	2b00      	cmp	r3, #0
 8016648:	f000 81bb 	beq.w	80169c2 <forward_cast+0x38a>
 801664c:	2a01      	cmp	r2, #1
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	f003 8722 	beq.w	801a498 <forward_cast+0x3e60>
 8016654:	690a      	ldr	r2, [r1, #16]
 8016656:	2a00      	cmp	r2, #0
 8016658:	f003 8721 	beq.w	801a49e <forward_cast+0x3e66>
 801665c:	6812      	ldr	r2, [r2, #0]
 801665e:	b103      	cbz	r3, 8016662 <forward_cast+0x2a>
 8016660:	699b      	ldr	r3, [r3, #24]
 8016662:	2a00      	cmp	r2, #0
 8016664:	f003 871b 	beq.w	801a49e <forward_cast+0x3e66>
 8016668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666c:	ed2d 8b02 	vpush	{d8}
 8016670:	6996      	ldr	r6, [r2, #24]
 8016672:	681a      	ldr	r2, [r3, #0]
 8016674:	69c7      	ldr	r7, [r0, #28]
 8016676:	6859      	ldr	r1, [r3, #4]
 8016678:	68dd      	ldr	r5, [r3, #12]
 801667a:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8016954 <forward_cast+0x31c>
 801667e:	f022 447e 	bic.w	r4, r2, #4261412864	; 0xfe000000
 8016682:	4610      	mov	r0, r2
 8016684:	6832      	ldr	r2, [r6, #0]
 8016686:	b083      	sub	sp, #12
 8016688:	f022 4b7e 	bic.w	fp, r2, #4261412864	; 0xfe000000
 801668c:	f004 fdfc 	bl	801b288 <ai_array_get_byte_size>
 8016690:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
 8016694:	f3cb 2383 	ubfx	r3, fp, #10, #4
 8016698:	4547      	cmp	r7, r8
 801669a:	68f6      	ldr	r6, [r6, #12]
 801669c:	9300      	str	r3, [sp, #0]
 801669e:	eb05 0a00 	add.w	sl, r5, r0
 80166a2:	f3c4 2983 	ubfx	r9, r4, #10, #4
 80166a6:	f000 81e2 	beq.w	8016a6e <forward_cast+0x436>
 80166aa:	f300 8083 	bgt.w	80167b4 <forward_cast+0x17c>
 80166ae:	4ba2      	ldr	r3, [pc, #648]	; (8016938 <forward_cast+0x300>)
 80166b0:	429f      	cmp	r7, r3
 80166b2:	f000 8227 	beq.w	8016b04 <forward_cast+0x4cc>
 80166b6:	dd2c      	ble.n	8016712 <forward_cast+0xda>
 80166b8:	4aa0      	ldr	r2, [pc, #640]	; (801693c <forward_cast+0x304>)
 80166ba:	4297      	cmp	r7, r2
 80166bc:	d124      	bne.n	8016708 <forward_cast+0xd0>
 80166be:	45c3      	cmp	fp, r8
 80166c0:	f001 8055 	beq.w	801776e <forward_cast+0x1136>
 80166c4:	f300 85f4 	bgt.w	80172b0 <forward_cast+0xc78>
 80166c8:	459b      	cmp	fp, r3
 80166ca:	f001 85aa 	beq.w	8018222 <forward_cast+0x1bea>
 80166ce:	f300 85d5 	bgt.w	801727c <forward_cast+0xc44>
 80166d2:	4b9b      	ldr	r3, [pc, #620]	; (8016940 <forward_cast+0x308>)
 80166d4:	459b      	cmp	fp, r3
 80166d6:	f002 825c 	beq.w	8018b92 <forward_cast+0x255a>
 80166da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80166de:	459b      	cmp	fp, r3
 80166e0:	d112      	bne.n	8016708 <forward_cast+0xd0>
 80166e2:	4555      	cmp	r5, sl
 80166e4:	d210      	bcs.n	8016708 <forward_cast+0xd0>
 80166e6:	9f00      	ldr	r7, [sp, #0]
 80166e8:	4628      	mov	r0, r5
 80166ea:	4621      	mov	r1, r4
 80166ec:	f7ff ff2e 	bl	801654c <_array_handle_get_as_float>
 80166f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80166f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f8:	444d      	add	r5, r9
 80166fa:	bf14      	ite	ne
 80166fc:	2301      	movne	r3, #1
 80166fe:	2300      	moveq	r3, #0
 8016700:	45aa      	cmp	sl, r5
 8016702:	8033      	strh	r3, [r6, #0]
 8016704:	443e      	add	r6, r7
 8016706:	d8ef      	bhi.n	80166e8 <forward_cast+0xb0>
 8016708:	b003      	add	sp, #12
 801670a:	ecbd 8b02 	vpop	{d8}
 801670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016712:	4a8b      	ldr	r2, [pc, #556]	; (8016940 <forward_cast+0x308>)
 8016714:	4297      	cmp	r7, r2
 8016716:	f000 80f2 	beq.w	80168fe <forward_cast+0x2c6>
 801671a:	498a      	ldr	r1, [pc, #552]	; (8016944 <forward_cast+0x30c>)
 801671c:	428f      	cmp	r7, r1
 801671e:	d1f3      	bne.n	8016708 <forward_cast+0xd0>
 8016720:	45c3      	cmp	fp, r8
 8016722:	f000 8780 	beq.w	8017626 <forward_cast+0xfee>
 8016726:	f300 86e7 	bgt.w	80174f8 <forward_cast+0xec0>
 801672a:	459b      	cmp	fp, r3
 801672c:	f001 8784 	beq.w	8018638 <forward_cast+0x2000>
 8016730:	4f81      	ldr	r7, [pc, #516]	; (8016938 <forward_cast+0x300>)
 8016732:	45bb      	cmp	fp, r7
 8016734:	f300 8554 	bgt.w	80171e0 <forward_cast+0xba8>
 8016738:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8016940 <forward_cast+0x308>
 801673c:	45c3      	cmp	fp, r8
 801673e:	f001 872d 	beq.w	801859c <forward_cast+0x1f64>
 8016742:	4b80      	ldr	r3, [pc, #512]	; (8016944 <forward_cast+0x30c>)
 8016744:	459b      	cmp	fp, r3
 8016746:	d1df      	bne.n	8016708 <forward_cast+0xd0>
 8016748:	4555      	cmp	r5, sl
 801674a:	d2dd      	bcs.n	8016708 <forward_cast+0xd0>
 801674c:	f8df b20c 	ldr.w	fp, [pc, #524]	; 801695c <forward_cast+0x324>
 8016750:	4b7d      	ldr	r3, [pc, #500]	; (8016948 <forward_cast+0x310>)
 8016752:	4a7e      	ldr	r2, [pc, #504]	; (801694c <forward_cast+0x314>)
 8016754:	e019      	b.n	801678a <forward_cast+0x152>
 8016756:	42bc      	cmp	r4, r7
 8016758:	f003 842b 	beq.w	8019fb2 <forward_cast+0x397a>
 801675c:	f341 80c0 	ble.w	80178e0 <forward_cast+0x12a8>
 8016760:	497b      	ldr	r1, [pc, #492]	; (8016950 <forward_cast+0x318>)
 8016762:	428c      	cmp	r4, r1
 8016764:	f003 83ef 	beq.w	8019f46 <forward_cast+0x390e>
 8016768:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 801676c:	428c      	cmp	r4, r1
 801676e:	f041 83a5 	bne.w	8017ebc <forward_cast+0x1884>
 8016772:	7828      	ldrb	r0, [r5, #0]
 8016774:	3800      	subs	r0, #0
 8016776:	bf18      	it	ne
 8016778:	2001      	movne	r0, #1
 801677a:	f380 0010 	usat	r0, #16, r0
 801677e:	9900      	ldr	r1, [sp, #0]
 8016780:	8030      	strh	r0, [r6, #0]
 8016782:	444d      	add	r5, r9
 8016784:	45aa      	cmp	sl, r5
 8016786:	440e      	add	r6, r1
 8016788:	d9be      	bls.n	8016708 <forward_cast+0xd0>
 801678a:	4972      	ldr	r1, [pc, #456]	; (8016954 <forward_cast+0x31c>)
 801678c:	428c      	cmp	r4, r1
 801678e:	f003 82df 	beq.w	8019d50 <forward_cast+0x3718>
 8016792:	dde0      	ble.n	8016756 <forward_cast+0x11e>
 8016794:	4970      	ldr	r1, [pc, #448]	; (8016958 <forward_cast+0x320>)
 8016796:	428c      	cmp	r4, r1
 8016798:	f002 87b0 	beq.w	80196fc <forward_cast+0x30c4>
 801679c:	f341 82c5 	ble.w	8017d2a <forward_cast+0x16f2>
 80167a0:	455c      	cmp	r4, fp
 80167a2:	f041 838b 	bne.w	8017ebc <forward_cast+0x1884>
 80167a6:	edd5 7a00 	vldr	s15, [r5]
 80167aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167ae:	ee17 0a90 	vmov	r0, s15
 80167b2:	e7e2      	b.n	801677a <forward_cast+0x142>
 80167b4:	4b65      	ldr	r3, [pc, #404]	; (801694c <forward_cast+0x314>)
 80167b6:	429f      	cmp	r7, r3
 80167b8:	f000 810c 	beq.w	80169d4 <forward_cast+0x39c>
 80167bc:	4a67      	ldr	r2, [pc, #412]	; (801695c <forward_cast+0x324>)
 80167be:	4297      	cmp	r7, r2
 80167c0:	d149      	bne.n	8016856 <forward_cast+0x21e>
 80167c2:	45c3      	cmp	fp, r8
 80167c4:	f000 8765 	beq.w	8017692 <forward_cast+0x105a>
 80167c8:	f300 82cc 	bgt.w	8016d64 <forward_cast+0x72c>
 80167cc:	4a5a      	ldr	r2, [pc, #360]	; (8016938 <forward_cast+0x300>)
 80167ce:	4593      	cmp	fp, r2
 80167d0:	f001 847e 	beq.w	80180d0 <forward_cast+0x1a98>
 80167d4:	f300 82b0 	bgt.w	8016d38 <forward_cast+0x700>
 80167d8:	4b59      	ldr	r3, [pc, #356]	; (8016940 <forward_cast+0x308>)
 80167da:	459b      	cmp	fp, r3
 80167dc:	f002 8344 	beq.w	8018e68 <forward_cast+0x2830>
 80167e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80167e4:	459b      	cmp	fp, r3
 80167e6:	d18f      	bne.n	8016708 <forward_cast+0xd0>
 80167e8:	4555      	cmp	r5, sl
 80167ea:	d28d      	bcs.n	8016708 <forward_cast+0xd0>
 80167ec:	f8df 816c 	ldr.w	r8, [pc, #364]	; 801695c <forward_cast+0x324>
 80167f0:	4f55      	ldr	r7, [pc, #340]	; (8016948 <forward_cast+0x310>)
 80167f2:	f8df b158 	ldr.w	fp, [pc, #344]	; 801694c <forward_cast+0x314>
 80167f6:	4b50      	ldr	r3, [pc, #320]	; (8016938 <forward_cast+0x300>)
 80167f8:	4a55      	ldr	r2, [pc, #340]	; (8016950 <forward_cast+0x318>)
 80167fa:	e016      	b.n	801682a <forward_cast+0x1f2>
 80167fc:	429c      	cmp	r4, r3
 80167fe:	f002 8541 	beq.w	8019284 <forward_cast+0x2c4c>
 8016802:	f341 8189 	ble.w	8017b18 <forward_cast+0x14e0>
 8016806:	4294      	cmp	r4, r2
 8016808:	f003 8254 	beq.w	8019cb4 <forward_cast+0x367c>
 801680c:	494b      	ldr	r1, [pc, #300]	; (801693c <forward_cast+0x304>)
 801680e:	428c      	cmp	r4, r1
 8016810:	f041 836f 	bne.w	8017ef2 <forward_cast+0x18ba>
 8016814:	7829      	ldrb	r1, [r5, #0]
 8016816:	3900      	subs	r1, #0
 8016818:	bf18      	it	ne
 801681a:	2101      	movne	r1, #1
 801681c:	8031      	strh	r1, [r6, #0]
 801681e:	444d      	add	r5, r9
 8016820:	9900      	ldr	r1, [sp, #0]
 8016822:	45aa      	cmp	sl, r5
 8016824:	440e      	add	r6, r1
 8016826:	f67f af6f 	bls.w	8016708 <forward_cast+0xd0>
 801682a:	494a      	ldr	r1, [pc, #296]	; (8016954 <forward_cast+0x31c>)
 801682c:	428c      	cmp	r4, r1
 801682e:	f002 86a5 	beq.w	801957c <forward_cast+0x2f44>
 8016832:	dde3      	ble.n	80167fc <forward_cast+0x1c4>
 8016834:	4948      	ldr	r1, [pc, #288]	; (8016958 <forward_cast+0x320>)
 8016836:	428c      	cmp	r4, r1
 8016838:	f002 876e 	beq.w	8019718 <forward_cast+0x30e0>
 801683c:	f341 8104 	ble.w	8017a48 <forward_cast+0x1410>
 8016840:	4544      	cmp	r4, r8
 8016842:	f041 8356 	bne.w	8017ef2 <forward_cast+0x18ba>
 8016846:	edd5 7a00 	vldr	s15, [r5]
 801684a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801684e:	ee17 1a90 	vmov	r1, s15
 8016852:	b289      	uxth	r1, r1
 8016854:	e7e2      	b.n	801681c <forward_cast+0x1e4>
 8016856:	493c      	ldr	r1, [pc, #240]	; (8016948 <forward_cast+0x310>)
 8016858:	428f      	cmp	r7, r1
 801685a:	f47f af55 	bne.w	8016708 <forward_cast+0xd0>
 801685e:	45c3      	cmp	fp, r8
 8016860:	f000 874d 	beq.w	80176fe <forward_cast+0x10c6>
 8016864:	f300 8546 	bgt.w	80172f4 <forward_cast+0xcbc>
 8016868:	4b33      	ldr	r3, [pc, #204]	; (8016938 <forward_cast+0x300>)
 801686a:	459b      	cmp	fp, r3
 801686c:	f001 8645 	beq.w	80184fa <forward_cast+0x1ec2>
 8016870:	f300 8227 	bgt.w	8016cc2 <forward_cast+0x68a>
 8016874:	4f32      	ldr	r7, [pc, #200]	; (8016940 <forward_cast+0x308>)
 8016876:	45bb      	cmp	fp, r7
 8016878:	f001 85dd 	beq.w	8018436 <forward_cast+0x1dfe>
 801687c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016880:	459b      	cmp	fp, r3
 8016882:	f47f af41 	bne.w	8016708 <forward_cast+0xd0>
 8016886:	4555      	cmp	r5, sl
 8016888:	f4bf af3e 	bcs.w	8016708 <forward_cast+0xd0>
 801688c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 801695c <forward_cast+0x324>
 8016890:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8016948 <forward_cast+0x310>
 8016894:	4b2d      	ldr	r3, [pc, #180]	; (801694c <forward_cast+0x314>)
 8016896:	4a28      	ldr	r2, [pc, #160]	; (8016938 <forward_cast+0x300>)
 8016898:	e01a      	b.n	80168d0 <forward_cast+0x298>
 801689a:	4294      	cmp	r4, r2
 801689c:	f002 85a7 	beq.w	80193ee <forward_cast+0x2db6>
 80168a0:	f341 80c8 	ble.w	8017a34 <forward_cast+0x13fc>
 80168a4:	492a      	ldr	r1, [pc, #168]	; (8016950 <forward_cast+0x318>)
 80168a6:	428c      	cmp	r4, r1
 80168a8:	f002 8593 	beq.w	80193d2 <forward_cast+0x2d9a>
 80168ac:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80168b0:	428c      	cmp	r4, r1
 80168b2:	f041 82cf 	bne.w	8017e54 <forward_cast+0x181c>
 80168b6:	7828      	ldrb	r0, [r5, #0]
 80168b8:	3800      	subs	r0, #0
 80168ba:	bf18      	it	ne
 80168bc:	2001      	movne	r0, #1
 80168be:	f300 000f 	ssat	r0, #16, r0
 80168c2:	9900      	ldr	r1, [sp, #0]
 80168c4:	8030      	strh	r0, [r6, #0]
 80168c6:	444d      	add	r5, r9
 80168c8:	45aa      	cmp	sl, r5
 80168ca:	440e      	add	r6, r1
 80168cc:	f67f af1c 	bls.w	8016708 <forward_cast+0xd0>
 80168d0:	4920      	ldr	r1, [pc, #128]	; (8016954 <forward_cast+0x31c>)
 80168d2:	428c      	cmp	r4, r1
 80168d4:	f002 855d 	beq.w	8019392 <forward_cast+0x2d5a>
 80168d8:	dddf      	ble.n	801689a <forward_cast+0x262>
 80168da:	491f      	ldr	r1, [pc, #124]	; (8016958 <forward_cast+0x320>)
 80168dc:	428c      	cmp	r4, r1
 80168de:	f003 84c0 	beq.w	801a262 <forward_cast+0x3c2a>
 80168e2:	f341 8097 	ble.w	8017a14 <forward_cast+0x13dc>
 80168e6:	4544      	cmp	r4, r8
 80168e8:	f041 82b4 	bne.w	8017e54 <forward_cast+0x181c>
 80168ec:	edd5 7a00 	vldr	s15, [r5]
 80168f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80168f4:	ee17 0a90 	vmov	r0, s15
 80168f8:	e7e1      	b.n	80168be <forward_cast+0x286>
 80168fa:	6853      	ldr	r3, [r2, #4]
 80168fc:	deff      	udf	#255	; 0xff
 80168fe:	45c3      	cmp	fp, r8
 8016900:	f001 854b 	beq.w	801839a <forward_cast+0x1d62>
 8016904:	f300 8448 	bgt.w	8017198 <forward_cast+0xb60>
 8016908:	459b      	cmp	fp, r3
 801690a:	f001 84f5 	beq.w	80182f8 <forward_cast+0x1cc0>
 801690e:	f300 842a 	bgt.w	8017166 <forward_cast+0xb2e>
 8016912:	4f0b      	ldr	r7, [pc, #44]	; (8016940 <forward_cast+0x308>)
 8016914:	45bb      	cmp	fp, r7
 8016916:	f001 84da 	beq.w	80182ce <forward_cast+0x1c96>
 801691a:	4b0a      	ldr	r3, [pc, #40]	; (8016944 <forward_cast+0x30c>)
 801691c:	459b      	cmp	fp, r3
 801691e:	f47f aef3 	bne.w	8016708 <forward_cast+0xd0>
 8016922:	4555      	cmp	r5, sl
 8016924:	f4bf aef0 	bcs.w	8016708 <forward_cast+0xd0>
 8016928:	f8df 8030 	ldr.w	r8, [pc, #48]	; 801695c <forward_cast+0x324>
 801692c:	f8df b018 	ldr.w	fp, [pc, #24]	; 8016948 <forward_cast+0x310>
 8016930:	4b06      	ldr	r3, [pc, #24]	; (801694c <forward_cast+0x314>)
 8016932:	4a01      	ldr	r2, [pc, #4]	; (8016938 <forward_cast+0x300>)
 8016934:	e030      	b.n	8016998 <forward_cast+0x360>
 8016936:	bf00      	nop
 8016938:	00041040 	.word	0x00041040
 801693c:	00060440 	.word	0x00060440
 8016940:	00040440 	.word	0x00040440
 8016944:	00040840 	.word	0x00040840
 8016948:	00840840 	.word	0x00840840
 801694c:	00841040 	.word	0x00841040
 8016950:	00042040 	.word	0x00042040
 8016954:	00840440 	.word	0x00840440
 8016958:	00842040 	.word	0x00842040
 801695c:	01821040 	.word	0x01821040
 8016960:	4294      	cmp	r4, r2
 8016962:	f003 80bf 	beq.w	8019ae4 <forward_cast+0x34ac>
 8016966:	f340 8792 	ble.w	801788e <forward_cast+0x1256>
 801696a:	49b2      	ldr	r1, [pc, #712]	; (8016c34 <forward_cast+0x5fc>)
 801696c:	428c      	cmp	r4, r1
 801696e:	f003 80ab 	beq.w	8019ac8 <forward_cast+0x3490>
 8016972:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8016976:	428c      	cmp	r4, r1
 8016978:	f041 8297 	bne.w	8017eaa <forward_cast+0x1872>
 801697c:	7828      	ldrb	r0, [r5, #0]
 801697e:	3800      	subs	r0, #0
 8016980:	bf18      	it	ne
 8016982:	2001      	movne	r0, #1
 8016984:	f380 0008 	usat	r0, #8, r0
 8016988:	9900      	ldr	r1, [sp, #0]
 801698a:	444d      	add	r5, r9
 801698c:	b2c0      	uxtb	r0, r0
 801698e:	45aa      	cmp	sl, r5
 8016990:	8030      	strh	r0, [r6, #0]
 8016992:	440e      	add	r6, r1
 8016994:	f67f aeb8 	bls.w	8016708 <forward_cast+0xd0>
 8016998:	49a7      	ldr	r1, [pc, #668]	; (8016c38 <forward_cast+0x600>)
 801699a:	428c      	cmp	r4, r1
 801699c:	f003 812a 	beq.w	8019bf4 <forward_cast+0x35bc>
 80169a0:	ddde      	ble.n	8016960 <forward_cast+0x328>
 80169a2:	49a6      	ldr	r1, [pc, #664]	; (8016c3c <forward_cast+0x604>)
 80169a4:	428c      	cmp	r4, r1
 80169a6:	f002 86f6 	beq.w	8019796 <forward_cast+0x315e>
 80169aa:	f341 80ec 	ble.w	8017b86 <forward_cast+0x154e>
 80169ae:	4544      	cmp	r4, r8
 80169b0:	f041 827b 	bne.w	8017eaa <forward_cast+0x1872>
 80169b4:	edd5 7a00 	vldr	s15, [r5]
 80169b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80169bc:	ee17 0a90 	vmov	r0, s15
 80169c0:	e7e0      	b.n	8016984 <forward_cast+0x34c>
 80169c2:	2a01      	cmp	r2, #1
 80169c4:	f003 8568 	beq.w	801a498 <forward_cast+0x3e60>
 80169c8:	690a      	ldr	r2, [r1, #16]
 80169ca:	2a00      	cmp	r2, #0
 80169cc:	f003 8567 	beq.w	801a49e <forward_cast+0x3e66>
 80169d0:	6812      	ldr	r2, [r2, #0]
 80169d2:	e646      	b.n	8016662 <forward_cast+0x2a>
 80169d4:	45c3      	cmp	fp, r8
 80169d6:	f002 8298 	beq.w	8018f0a <forward_cast+0x28d2>
 80169da:	f300 82d0 	bgt.w	8016f7e <forward_cast+0x946>
 80169de:	4b98      	ldr	r3, [pc, #608]	; (8016c40 <forward_cast+0x608>)
 80169e0:	459b      	cmp	fp, r3
 80169e2:	f001 87e1 	beq.w	80189a8 <forward_cast+0x2370>
 80169e6:	f300 81fa 	bgt.w	8016dde <forward_cast+0x7a6>
 80169ea:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80169ee:	459b      	cmp	fp, r3
 80169f0:	f001 8789 	beq.w	8018906 <forward_cast+0x22ce>
 80169f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80169f8:	459b      	cmp	fp, r3
 80169fa:	f47f ae85 	bne.w	8016708 <forward_cast+0xd0>
 80169fe:	4555      	cmp	r5, sl
 8016a00:	f4bf ae82 	bcs.w	8016708 <forward_cast+0xd0>
 8016a04:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8016c58 <forward_cast+0x620>
 8016a08:	4f8e      	ldr	r7, [pc, #568]	; (8016c44 <forward_cast+0x60c>)
 8016a0a:	f8df b248 	ldr.w	fp, [pc, #584]	; 8016c54 <forward_cast+0x61c>
 8016a0e:	4b8c      	ldr	r3, [pc, #560]	; (8016c40 <forward_cast+0x608>)
 8016a10:	4a88      	ldr	r2, [pc, #544]	; (8016c34 <forward_cast+0x5fc>)
 8016a12:	e016      	b.n	8016a42 <forward_cast+0x40a>
 8016a14:	429c      	cmp	r4, r3
 8016a16:	f003 8252 	beq.w	8019ebe <forward_cast+0x3886>
 8016a1a:	f340 8792 	ble.w	8017942 <forward_cast+0x130a>
 8016a1e:	4294      	cmp	r4, r2
 8016a20:	f003 81fa 	beq.w	8019e18 <forward_cast+0x37e0>
 8016a24:	4988      	ldr	r1, [pc, #544]	; (8016c48 <forward_cast+0x610>)
 8016a26:	428c      	cmp	r4, r1
 8016a28:	f041 824e 	bne.w	8017ec8 <forward_cast+0x1890>
 8016a2c:	7829      	ldrb	r1, [r5, #0]
 8016a2e:	3900      	subs	r1, #0
 8016a30:	bf18      	it	ne
 8016a32:	2101      	movne	r1, #1
 8016a34:	8031      	strh	r1, [r6, #0]
 8016a36:	444d      	add	r5, r9
 8016a38:	9900      	ldr	r1, [sp, #0]
 8016a3a:	45aa      	cmp	sl, r5
 8016a3c:	440e      	add	r6, r1
 8016a3e:	f67f ae63 	bls.w	8016708 <forward_cast+0xd0>
 8016a42:	497d      	ldr	r1, [pc, #500]	; (8016c38 <forward_cast+0x600>)
 8016a44:	428c      	cmp	r4, r1
 8016a46:	f002 8771 	beq.w	801992c <forward_cast+0x32f4>
 8016a4a:	dde3      	ble.n	8016a14 <forward_cast+0x3dc>
 8016a4c:	497b      	ldr	r1, [pc, #492]	; (8016c3c <forward_cast+0x604>)
 8016a4e:	428c      	cmp	r4, r1
 8016a50:	f003 8449 	beq.w	801a2e6 <forward_cast+0x3cae>
 8016a54:	f341 8158 	ble.w	8017d08 <forward_cast+0x16d0>
 8016a58:	4544      	cmp	r4, r8
 8016a5a:	f041 8235 	bne.w	8017ec8 <forward_cast+0x1890>
 8016a5e:	edd5 7a00 	vldr	s15, [r5]
 8016a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a66:	ee17 1a90 	vmov	r1, s15
 8016a6a:	b289      	uxth	r1, r1
 8016a6c:	e7e2      	b.n	8016a34 <forward_cast+0x3fc>
 8016a6e:	45bb      	cmp	fp, r7
 8016a70:	f001 82de 	beq.w	8018030 <forward_cast+0x19f8>
 8016a74:	f300 80ce 	bgt.w	8016c14 <forward_cast+0x5dc>
 8016a78:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8016c40 <forward_cast+0x608>
 8016a7c:	45c3      	cmp	fp, r8
 8016a7e:	f001 868f 	beq.w	80187a0 <forward_cast+0x2168>
 8016a82:	f300 808a 	bgt.w	8016b9a <forward_cast+0x562>
 8016a86:	4a71      	ldr	r2, [pc, #452]	; (8016c4c <forward_cast+0x614>)
 8016a88:	4593      	cmp	fp, r2
 8016a8a:	f001 8626 	beq.w	80186da <forward_cast+0x20a2>
 8016a8e:	4b70      	ldr	r3, [pc, #448]	; (8016c50 <forward_cast+0x618>)
 8016a90:	459b      	cmp	fp, r3
 8016a92:	f47f ae39 	bne.w	8016708 <forward_cast+0xd0>
 8016a96:	4555      	cmp	r5, sl
 8016a98:	f4bf ae36 	bcs.w	8016708 <forward_cast+0xd0>
 8016a9c:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8016c58 <forward_cast+0x620>
 8016aa0:	4b68      	ldr	r3, [pc, #416]	; (8016c44 <forward_cast+0x60c>)
 8016aa2:	e01b      	b.n	8016adc <forward_cast+0x4a4>
 8016aa4:	4544      	cmp	r4, r8
 8016aa6:	f003 81fd 	beq.w	8019ea4 <forward_cast+0x386c>
 8016aaa:	f340 8763 	ble.w	8017974 <forward_cast+0x133c>
 8016aae:	4961      	ldr	r1, [pc, #388]	; (8016c34 <forward_cast+0x5fc>)
 8016ab0:	428c      	cmp	r4, r1
 8016ab2:	f003 81e9 	beq.w	8019e88 <forward_cast+0x3850>
 8016ab6:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8016aba:	428c      	cmp	r4, r1
 8016abc:	f041 8213 	bne.w	8017ee6 <forward_cast+0x18ae>
 8016ac0:	7828      	ldrb	r0, [r5, #0]
 8016ac2:	3800      	subs	r0, #0
 8016ac4:	bf18      	it	ne
 8016ac6:	2001      	movne	r0, #1
 8016ac8:	f300 0007 	ssat	r0, #8, r0
 8016acc:	9900      	ldr	r1, [sp, #0]
 8016ace:	444d      	add	r5, r9
 8016ad0:	b240      	sxtb	r0, r0
 8016ad2:	45aa      	cmp	sl, r5
 8016ad4:	8030      	strh	r0, [r6, #0]
 8016ad6:	440e      	add	r6, r1
 8016ad8:	f67f ae16 	bls.w	8016708 <forward_cast+0xd0>
 8016adc:	42bc      	cmp	r4, r7
 8016ade:	f002 875c 	beq.w	801999a <forward_cast+0x3362>
 8016ae2:	dddf      	ble.n	8016aa4 <forward_cast+0x46c>
 8016ae4:	4955      	ldr	r1, [pc, #340]	; (8016c3c <forward_cast+0x604>)
 8016ae6:	428c      	cmp	r4, r1
 8016ae8:	f003 82e0 	beq.w	801a0ac <forward_cast+0x3a74>
 8016aec:	f341 8171 	ble.w	8017dd2 <forward_cast+0x179a>
 8016af0:	455c      	cmp	r4, fp
 8016af2:	f041 81f8 	bne.w	8017ee6 <forward_cast+0x18ae>
 8016af6:	edd5 7a00 	vldr	s15, [r5]
 8016afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016afe:	ee17 0a90 	vmov	r0, s15
 8016b02:	e7e1      	b.n	8016ac8 <forward_cast+0x490>
 8016b04:	45c3      	cmp	fp, r8
 8016b06:	f001 832b 	beq.w	8018160 <forward_cast+0x1b28>
 8016b0a:	f300 81e6 	bgt.w	8016eda <forward_cast+0x8a2>
 8016b0e:	45bb      	cmp	fp, r7
 8016b10:	f001 86ae 	beq.w	8018870 <forward_cast+0x2238>
 8016b14:	f300 81a2 	bgt.w	8016e5c <forward_cast+0x824>
 8016b18:	4b4c      	ldr	r3, [pc, #304]	; (8016c4c <forward_cast+0x614>)
 8016b1a:	459b      	cmp	fp, r3
 8016b1c:	f001 8657 	beq.w	80187ce <forward_cast+0x2196>
 8016b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016b24:	459b      	cmp	fp, r3
 8016b26:	f47f adef 	bne.w	8016708 <forward_cast+0xd0>
 8016b2a:	4555      	cmp	r5, sl
 8016b2c:	f4bf adec 	bcs.w	8016708 <forward_cast+0xd0>
 8016b30:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8016c58 <forward_cast+0x620>
 8016b34:	4f43      	ldr	r7, [pc, #268]	; (8016c44 <forward_cast+0x60c>)
 8016b36:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8016c54 <forward_cast+0x61c>
 8016b3a:	4b41      	ldr	r3, [pc, #260]	; (8016c40 <forward_cast+0x608>)
 8016b3c:	4a3d      	ldr	r2, [pc, #244]	; (8016c34 <forward_cast+0x5fc>)
 8016b3e:	e016      	b.n	8016b6e <forward_cast+0x536>
 8016b40:	429c      	cmp	r4, r3
 8016b42:	f002 84fa 	beq.w	801953a <forward_cast+0x2f02>
 8016b46:	f341 8046 	ble.w	8017bd6 <forward_cast+0x159e>
 8016b4a:	4294      	cmp	r4, r2
 8016b4c:	f002 83c3 	beq.w	80192d6 <forward_cast+0x2c9e>
 8016b50:	493d      	ldr	r1, [pc, #244]	; (8016c48 <forward_cast+0x610>)
 8016b52:	428c      	cmp	r4, r1
 8016b54:	f041 8181 	bne.w	8017e5a <forward_cast+0x1822>
 8016b58:	7829      	ldrb	r1, [r5, #0]
 8016b5a:	3900      	subs	r1, #0
 8016b5c:	bf18      	it	ne
 8016b5e:	2101      	movne	r1, #1
 8016b60:	8031      	strh	r1, [r6, #0]
 8016b62:	444d      	add	r5, r9
 8016b64:	9900      	ldr	r1, [sp, #0]
 8016b66:	45aa      	cmp	sl, r5
 8016b68:	440e      	add	r6, r1
 8016b6a:	f67f adcd 	bls.w	8016708 <forward_cast+0xd0>
 8016b6e:	4932      	ldr	r1, [pc, #200]	; (8016c38 <forward_cast+0x600>)
 8016b70:	428c      	cmp	r4, r1
 8016b72:	f002 8607 	beq.w	8019784 <forward_cast+0x314c>
 8016b76:	dde3      	ble.n	8016b40 <forward_cast+0x508>
 8016b78:	4930      	ldr	r1, [pc, #192]	; (8016c3c <forward_cast+0x604>)
 8016b7a:	428c      	cmp	r4, r1
 8016b7c:	f003 82a4 	beq.w	801a0c8 <forward_cast+0x3a90>
 8016b80:	f340 87ba 	ble.w	8017af8 <forward_cast+0x14c0>
 8016b84:	4544      	cmp	r4, r8
 8016b86:	f041 8168 	bne.w	8017e5a <forward_cast+0x1822>
 8016b8a:	edd5 7a00 	vldr	s15, [r5]
 8016b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016b92:	ee17 1a90 	vmov	r1, s15
 8016b96:	b289      	uxth	r1, r1
 8016b98:	e7e2      	b.n	8016b60 <forward_cast+0x528>
 8016b9a:	4b2b      	ldr	r3, [pc, #172]	; (8016c48 <forward_cast+0x610>)
 8016b9c:	459b      	cmp	fp, r3
 8016b9e:	f47f adb3 	bne.w	8016708 <forward_cast+0xd0>
 8016ba2:	4555      	cmp	r5, sl
 8016ba4:	f4bf adb0 	bcs.w	8016708 <forward_cast+0xd0>
 8016ba8:	2300      	movs	r3, #0
 8016baa:	4619      	mov	r1, r3
 8016bac:	4a29      	ldr	r2, [pc, #164]	; (8016c54 <forward_cast+0x61c>)
 8016bae:	464b      	mov	r3, r9
 8016bb0:	46b9      	mov	r9, r7
 8016bb2:	4637      	mov	r7, r6
 8016bb4:	460e      	mov	r6, r1
 8016bb6:	e018      	b.n	8016bea <forward_cast+0x5b2>
 8016bb8:	4544      	cmp	r4, r8
 8016bba:	f002 83aa 	beq.w	8019312 <forward_cast+0x2cda>
 8016bbe:	f340 878f 	ble.w	8017ae0 <forward_cast+0x14a8>
 8016bc2:	491c      	ldr	r1, [pc, #112]	; (8016c34 <forward_cast+0x5fc>)
 8016bc4:	428c      	cmp	r4, r1
 8016bc6:	f002 8395 	beq.w	80192f4 <forward_cast+0x2cbc>
 8016bca:	455c      	cmp	r4, fp
 8016bcc:	f041 8148 	bne.w	8017e60 <forward_cast+0x1828>
 8016bd0:	7828      	ldrb	r0, [r5, #0]
 8016bd2:	3800      	subs	r0, #0
 8016bd4:	bf18      	it	ne
 8016bd6:	2001      	movne	r0, #1
 8016bd8:	f300 0007 	ssat	r0, #8, r0
 8016bdc:	9900      	ldr	r1, [sp, #0]
 8016bde:	55b8      	strb	r0, [r7, r6]
 8016be0:	441d      	add	r5, r3
 8016be2:	45aa      	cmp	sl, r5
 8016be4:	440e      	add	r6, r1
 8016be6:	f67f ad8f 	bls.w	8016708 <forward_cast+0xd0>
 8016bea:	454c      	cmp	r4, r9
 8016bec:	f002 85cf 	beq.w	801978e <forward_cast+0x3156>
 8016bf0:	dde2      	ble.n	8016bb8 <forward_cast+0x580>
 8016bf2:	4912      	ldr	r1, [pc, #72]	; (8016c3c <forward_cast+0x604>)
 8016bf4:	428c      	cmp	r4, r1
 8016bf6:	f002 85b6 	beq.w	8019766 <forward_cast+0x312e>
 8016bfa:	f340 8735 	ble.w	8017a68 <forward_cast+0x1430>
 8016bfe:	4916      	ldr	r1, [pc, #88]	; (8016c58 <forward_cast+0x620>)
 8016c00:	428c      	cmp	r4, r1
 8016c02:	f041 812d 	bne.w	8017e60 <forward_cast+0x1828>
 8016c06:	edd5 7a00 	vldr	s15, [r5]
 8016c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016c0e:	ee17 0a90 	vmov	r0, s15
 8016c12:	e7e1      	b.n	8016bd8 <forward_cast+0x5a0>
 8016c14:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8016c54 <forward_cast+0x61c>
 8016c18:	45c3      	cmp	fp, r8
 8016c1a:	f001 876b 	beq.w	8018af4 <forward_cast+0x24bc>
 8016c1e:	4a0e      	ldr	r2, [pc, #56]	; (8016c58 <forward_cast+0x620>)
 8016c20:	4593      	cmp	fp, r2
 8016c22:	f040 83ac 	bne.w	801737e <forward_cast+0xd46>
 8016c26:	4555      	cmp	r5, sl
 8016c28:	f4bf ad6e 	bcs.w	8016708 <forward_cast+0xd0>
 8016c2c:	4b01      	ldr	r3, [pc, #4]	; (8016c34 <forward_cast+0x5fc>)
 8016c2e:	4a06      	ldr	r2, [pc, #24]	; (8016c48 <forward_cast+0x610>)
 8016c30:	e033      	b.n	8016c9a <forward_cast+0x662>
 8016c32:	bf00      	nop
 8016c34:	00042040 	.word	0x00042040
 8016c38:	00840440 	.word	0x00840440
 8016c3c:	00842040 	.word	0x00842040
 8016c40:	00041040 	.word	0x00041040
 8016c44:	00840840 	.word	0x00840840
 8016c48:	00060440 	.word	0x00060440
 8016c4c:	00040440 	.word	0x00040440
 8016c50:	00040840 	.word	0x00040840
 8016c54:	00841040 	.word	0x00841040
 8016c58:	01821040 	.word	0x01821040
 8016c5c:	49a6      	ldr	r1, [pc, #664]	; (8016ef8 <forward_cast+0x8c0>)
 8016c5e:	428c      	cmp	r4, r1
 8016c60:	f002 84c7 	beq.w	80195f2 <forward_cast+0x2fba>
 8016c64:	f340 85ee 	ble.w	8017844 <forward_cast+0x120c>
 8016c68:	429c      	cmp	r4, r3
 8016c6a:	f002 84b4 	beq.w	80195d6 <forward_cast+0x2f9e>
 8016c6e:	4294      	cmp	r4, r2
 8016c70:	f041 8109 	bne.w	8017e86 <forward_cast+0x184e>
 8016c74:	7828      	ldrb	r0, [r5, #0]
 8016c76:	3800      	subs	r0, #0
 8016c78:	bf18      	it	ne
 8016c7a:	2001      	movne	r0, #1
 8016c7c:	f300 0007 	ssat	r0, #8, r0
 8016c80:	b240      	sxtb	r0, r0
 8016c82:	ee07 0a90 	vmov	s15, r0
 8016c86:	9900      	ldr	r1, [sp, #0]
 8016c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c8c:	444d      	add	r5, r9
 8016c8e:	45aa      	cmp	sl, r5
 8016c90:	edc6 7a00 	vstr	s15, [r6]
 8016c94:	440e      	add	r6, r1
 8016c96:	f67f ad37 	bls.w	8016708 <forward_cast+0xd0>
 8016c9a:	42bc      	cmp	r4, r7
 8016c9c:	f002 8411 	beq.w	80194c2 <forward_cast+0x2e8a>
 8016ca0:	dddc      	ble.n	8016c5c <forward_cast+0x624>
 8016ca2:	4996      	ldr	r1, [pc, #600]	; (8016efc <forward_cast+0x8c4>)
 8016ca4:	428c      	cmp	r4, r1
 8016ca6:	f002 83f6 	beq.w	8019496 <forward_cast+0x2e5e>
 8016caa:	f340 87fb 	ble.w	8017ca4 <forward_cast+0x166c>
 8016cae:	455c      	cmp	r4, fp
 8016cb0:	f041 80e9 	bne.w	8017e86 <forward_cast+0x184e>
 8016cb4:	edd5 7a00 	vldr	s15, [r5]
 8016cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016cbc:	ee17 0a90 	vmov	r0, s15
 8016cc0:	e7dc      	b.n	8016c7c <forward_cast+0x644>
 8016cc2:	4b8f      	ldr	r3, [pc, #572]	; (8016f00 <forward_cast+0x8c8>)
 8016cc4:	459b      	cmp	fp, r3
 8016cc6:	f47f ad1f 	bne.w	8016708 <forward_cast+0xd0>
 8016cca:	4555      	cmp	r5, sl
 8016ccc:	f4bf ad1c 	bcs.w	8016708 <forward_cast+0xd0>
 8016cd0:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8016efc <forward_cast+0x8c4>
 8016cd4:	4b8b      	ldr	r3, [pc, #556]	; (8016f04 <forward_cast+0x8cc>)
 8016cd6:	4a88      	ldr	r2, [pc, #544]	; (8016ef8 <forward_cast+0x8c0>)
 8016cd8:	2700      	movs	r7, #0
 8016cda:	e018      	b.n	8016d0e <forward_cast+0x6d6>
 8016cdc:	4294      	cmp	r4, r2
 8016cde:	f003 815b 	beq.w	8019f98 <forward_cast+0x3960>
 8016ce2:	f340 8607 	ble.w	80178f4 <forward_cast+0x12bc>
 8016ce6:	4988      	ldr	r1, [pc, #544]	; (8016f08 <forward_cast+0x8d0>)
 8016ce8:	428c      	cmp	r4, r1
 8016cea:	f003 8103 	beq.w	8019ef4 <forward_cast+0x38bc>
 8016cee:	455c      	cmp	r4, fp
 8016cf0:	f041 80de 	bne.w	8017eb0 <forward_cast+0x1878>
 8016cf4:	7828      	ldrb	r0, [r5, #0]
 8016cf6:	3800      	subs	r0, #0
 8016cf8:	bf18      	it	ne
 8016cfa:	2001      	movne	r0, #1
 8016cfc:	f300 000f 	ssat	r0, #16, r0
 8016d00:	9900      	ldr	r1, [sp, #0]
 8016d02:	55f0      	strb	r0, [r6, r7]
 8016d04:	444d      	add	r5, r9
 8016d06:	45aa      	cmp	sl, r5
 8016d08:	440f      	add	r7, r1
 8016d0a:	f67f acfd 	bls.w	8016708 <forward_cast+0xd0>
 8016d0e:	497f      	ldr	r1, [pc, #508]	; (8016f0c <forward_cast+0x8d4>)
 8016d10:	428c      	cmp	r4, r1
 8016d12:	f002 876b 	beq.w	8019bec <forward_cast+0x35b4>
 8016d16:	dde1      	ble.n	8016cdc <forward_cast+0x6a4>
 8016d18:	4544      	cmp	r4, r8
 8016d1a:	f002 83a6 	beq.w	801946a <forward_cast+0x2e32>
 8016d1e:	f340 87b0 	ble.w	8017c82 <forward_cast+0x164a>
 8016d22:	497b      	ldr	r1, [pc, #492]	; (8016f10 <forward_cast+0x8d8>)
 8016d24:	428c      	cmp	r4, r1
 8016d26:	f041 80c3 	bne.w	8017eb0 <forward_cast+0x1878>
 8016d2a:	edd5 7a00 	vldr	s15, [r5]
 8016d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d32:	ee17 0a90 	vmov	r0, s15
 8016d36:	e7e1      	b.n	8016cfc <forward_cast+0x6c4>
 8016d38:	4b71      	ldr	r3, [pc, #452]	; (8016f00 <forward_cast+0x8c8>)
 8016d3a:	459b      	cmp	fp, r3
 8016d3c:	f47f ace4 	bne.w	8016708 <forward_cast+0xd0>
 8016d40:	4555      	cmp	r5, sl
 8016d42:	f4bf ace1 	bcs.w	8016708 <forward_cast+0xd0>
 8016d46:	9f00      	ldr	r7, [sp, #0]
 8016d48:	4628      	mov	r0, r5
 8016d4a:	4621      	mov	r1, r4
 8016d4c:	f7ff fbfe 	bl	801654c <_array_handle_get_as_float>
 8016d50:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016d54:	444d      	add	r5, r9
 8016d56:	ee17 3a90 	vmov	r3, s15
 8016d5a:	45aa      	cmp	sl, r5
 8016d5c:	7033      	strb	r3, [r6, #0]
 8016d5e:	443e      	add	r6, r7
 8016d60:	d8f2      	bhi.n	8016d48 <forward_cast+0x710>
 8016d62:	e4d1      	b.n	8016708 <forward_cast+0xd0>
 8016d64:	459b      	cmp	fp, r3
 8016d66:	f001 87e4 	beq.w	8018d32 <forward_cast+0x26fa>
 8016d6a:	45bb      	cmp	fp, r7
 8016d6c:	f040 8147 	bne.w	8016ffe <forward_cast+0x9c6>
 8016d70:	4555      	cmp	r5, sl
 8016d72:	f4bf acc9 	bcs.w	8016708 <forward_cast+0xd0>
 8016d76:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8016f14 <forward_cast+0x8dc>
 8016d7a:	4a64      	ldr	r2, [pc, #400]	; (8016f0c <forward_cast+0x8d4>)
 8016d7c:	4b5f      	ldr	r3, [pc, #380]	; (8016efc <forward_cast+0x8c4>)
 8016d7e:	f8df b190 	ldr.w	fp, [pc, #400]	; 8016f10 <forward_cast+0x8d8>
 8016d82:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8016ef8 <forward_cast+0x8c0>
 8016d86:	4f60      	ldr	r7, [pc, #384]	; (8016f08 <forward_cast+0x8d0>)
 8016d88:	e01a      	b.n	8016dc0 <forward_cast+0x788>
 8016d8a:	4544      	cmp	r4, r8
 8016d8c:	f002 847d 	beq.w	801968a <forward_cast+0x3052>
 8016d90:	f340 8513 	ble.w	80177ba <forward_cast+0x1182>
 8016d94:	42bc      	cmp	r4, r7
 8016d96:	f002 8414 	beq.w	80195c2 <forward_cast+0x2f8a>
 8016d9a:	4959      	ldr	r1, [pc, #356]	; (8016f00 <forward_cast+0x8c8>)
 8016d9c:	428c      	cmp	r4, r1
 8016d9e:	f041 806e 	bne.w	8017e7e <forward_cast+0x1846>
 8016da2:	7829      	ldrb	r1, [r5, #0]
 8016da4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016da8:	2900      	cmp	r1, #0
 8016daa:	bf08      	it	eq
 8016dac:	eef0 7a48 	vmoveq.f32	s15, s16
 8016db0:	9900      	ldr	r1, [sp, #0]
 8016db2:	edc6 7a00 	vstr	s15, [r6]
 8016db6:	444d      	add	r5, r9
 8016db8:	45aa      	cmp	sl, r5
 8016dba:	440e      	add	r6, r1
 8016dbc:	f67f aca4 	bls.w	8016708 <forward_cast+0xd0>
 8016dc0:	4294      	cmp	r4, r2
 8016dc2:	f002 819f 	beq.w	8019104 <forward_cast+0x2acc>
 8016dc6:	dde0      	ble.n	8016d8a <forward_cast+0x752>
 8016dc8:	429c      	cmp	r4, r3
 8016dca:	f002 848d 	beq.w	80196e8 <forward_cast+0x30b0>
 8016dce:	f340 8749 	ble.w	8017c64 <forward_cast+0x162c>
 8016dd2:	455c      	cmp	r4, fp
 8016dd4:	f041 8053 	bne.w	8017e7e <forward_cast+0x1846>
 8016dd8:	edd5 7a00 	vldr	s15, [r5]
 8016ddc:	e7e8      	b.n	8016db0 <forward_cast+0x778>
 8016dde:	4b48      	ldr	r3, [pc, #288]	; (8016f00 <forward_cast+0x8c8>)
 8016de0:	459b      	cmp	fp, r3
 8016de2:	f47f ac91 	bne.w	8016708 <forward_cast+0xd0>
 8016de6:	4555      	cmp	r5, sl
 8016de8:	f4bf ac8e 	bcs.w	8016708 <forward_cast+0xd0>
 8016dec:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8016f10 <forward_cast+0x8d8>
 8016df0:	f8df b124 	ldr.w	fp, [pc, #292]	; 8016f18 <forward_cast+0x8e0>
 8016df4:	4b43      	ldr	r3, [pc, #268]	; (8016f04 <forward_cast+0x8cc>)
 8016df6:	4a40      	ldr	r2, [pc, #256]	; (8016ef8 <forward_cast+0x8c0>)
 8016df8:	2700      	movs	r7, #0
 8016dfa:	e018      	b.n	8016e2e <forward_cast+0x7f6>
 8016dfc:	4294      	cmp	r4, r2
 8016dfe:	f002 8324 	beq.w	801944a <forward_cast+0x2e12>
 8016e02:	f340 86d0 	ble.w	8017ba6 <forward_cast+0x156e>
 8016e06:	4940      	ldr	r1, [pc, #256]	; (8016f08 <forward_cast+0x8d0>)
 8016e08:	428c      	cmp	r4, r1
 8016e0a:	f002 830e 	beq.w	801942a <forward_cast+0x2df2>
 8016e0e:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8016e12:	428c      	cmp	r4, r1
 8016e14:	f041 8019 	bne.w	8017e4a <forward_cast+0x1812>
 8016e18:	7829      	ldrb	r1, [r5, #0]
 8016e1a:	3900      	subs	r1, #0
 8016e1c:	bf18      	it	ne
 8016e1e:	2101      	movne	r1, #1
 8016e20:	55f1      	strb	r1, [r6, r7]
 8016e22:	444d      	add	r5, r9
 8016e24:	9900      	ldr	r1, [sp, #0]
 8016e26:	45aa      	cmp	sl, r5
 8016e28:	440f      	add	r7, r1
 8016e2a:	f67f ac6d 	bls.w	8016708 <forward_cast+0xd0>
 8016e2e:	4937      	ldr	r1, [pc, #220]	; (8016f0c <forward_cast+0x8d4>)
 8016e30:	428c      	cmp	r4, r1
 8016e32:	f000 86c1 	beq.w	8017bb8 <forward_cast+0x1580>
 8016e36:	dde1      	ble.n	8016dfc <forward_cast+0x7c4>
 8016e38:	4930      	ldr	r1, [pc, #192]	; (8016efc <forward_cast+0x8c4>)
 8016e3a:	428c      	cmp	r4, r1
 8016e3c:	f002 855c 	beq.w	80198f8 <forward_cast+0x32c0>
 8016e40:	f340 86ff 	ble.w	8017c42 <forward_cast+0x160a>
 8016e44:	4544      	cmp	r4, r8
 8016e46:	f041 8000 	bne.w	8017e4a <forward_cast+0x1812>
 8016e4a:	edd5 7a00 	vldr	s15, [r5]
 8016e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016e52:	edcd 7a01 	vstr	s15, [sp, #4]
 8016e56:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8016e5a:	e7e1      	b.n	8016e20 <forward_cast+0x7e8>
 8016e5c:	4b28      	ldr	r3, [pc, #160]	; (8016f00 <forward_cast+0x8c8>)
 8016e5e:	459b      	cmp	fp, r3
 8016e60:	f47f ac52 	bne.w	8016708 <forward_cast+0xd0>
 8016e64:	4555      	cmp	r5, sl
 8016e66:	f4bf ac4f 	bcs.w	8016708 <forward_cast+0xd0>
 8016e6a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8016f10 <forward_cast+0x8d8>
 8016e6e:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8016f18 <forward_cast+0x8e0>
 8016e72:	4b24      	ldr	r3, [pc, #144]	; (8016f04 <forward_cast+0x8cc>)
 8016e74:	4a20      	ldr	r2, [pc, #128]	; (8016ef8 <forward_cast+0x8c0>)
 8016e76:	2700      	movs	r7, #0
 8016e78:	e018      	b.n	8016eac <forward_cast+0x874>
 8016e7a:	4294      	cmp	r4, r2
 8016e7c:	f002 80ce 	beq.w	801901c <forward_cast+0x29e4>
 8016e80:	f340 869d 	ble.w	8017bbe <forward_cast+0x1586>
 8016e84:	4920      	ldr	r1, [pc, #128]	; (8016f08 <forward_cast+0x8d0>)
 8016e86:	428c      	cmp	r4, r1
 8016e88:	f002 82bf 	beq.w	801940a <forward_cast+0x2dd2>
 8016e8c:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8016e90:	428c      	cmp	r4, r1
 8016e92:	f040 87d7 	bne.w	8017e44 <forward_cast+0x180c>
 8016e96:	7829      	ldrb	r1, [r5, #0]
 8016e98:	3900      	subs	r1, #0
 8016e9a:	bf18      	it	ne
 8016e9c:	2101      	movne	r1, #1
 8016e9e:	55f1      	strb	r1, [r6, r7]
 8016ea0:	444d      	add	r5, r9
 8016ea2:	9900      	ldr	r1, [sp, #0]
 8016ea4:	45aa      	cmp	sl, r5
 8016ea6:	440f      	add	r7, r1
 8016ea8:	f67f ac2e 	bls.w	8016708 <forward_cast+0xd0>
 8016eac:	4917      	ldr	r1, [pc, #92]	; (8016f0c <forward_cast+0x8d4>)
 8016eae:	428c      	cmp	r4, r1
 8016eb0:	f000 868e 	beq.w	8017bd0 <forward_cast+0x1598>
 8016eb4:	dde1      	ble.n	8016e7a <forward_cast+0x842>
 8016eb6:	4911      	ldr	r1, [pc, #68]	; (8016efc <forward_cast+0x8c4>)
 8016eb8:	428c      	cmp	r4, r1
 8016eba:	f002 81ee 	beq.w	801929a <forward_cast+0x2c62>
 8016ebe:	f340 8641 	ble.w	8017b44 <forward_cast+0x150c>
 8016ec2:	4544      	cmp	r4, r8
 8016ec4:	f040 87be 	bne.w	8017e44 <forward_cast+0x180c>
 8016ec8:	edd5 7a00 	vldr	s15, [r5]
 8016ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016ed0:	edcd 7a01 	vstr	s15, [sp, #4]
 8016ed4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8016ed8:	e7e1      	b.n	8016e9e <forward_cast+0x866>
 8016eda:	4a0a      	ldr	r2, [pc, #40]	; (8016f04 <forward_cast+0x8cc>)
 8016edc:	4593      	cmp	fp, r2
 8016ede:	f001 85c0 	beq.w	8018a62 <forward_cast+0x242a>
 8016ee2:	4b0b      	ldr	r3, [pc, #44]	; (8016f10 <forward_cast+0x8d8>)
 8016ee4:	459b      	cmp	fp, r3
 8016ee6:	f040 80c6 	bne.w	8017076 <forward_cast+0xa3e>
 8016eea:	4555      	cmp	r5, sl
 8016eec:	f4bf ac0c 	bcs.w	8016708 <forward_cast+0xd0>
 8016ef0:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8016f14 <forward_cast+0x8dc>
 8016ef4:	4b08      	ldr	r3, [pc, #32]	; (8016f18 <forward_cast+0x8e0>)
 8016ef6:	e02e      	b.n	8016f56 <forward_cast+0x91e>
 8016ef8:	00041040 	.word	0x00041040
 8016efc:	00842040 	.word	0x00842040
 8016f00:	00060440 	.word	0x00060440
 8016f04:	00841040 	.word	0x00841040
 8016f08:	00042040 	.word	0x00042040
 8016f0c:	00840440 	.word	0x00840440
 8016f10:	01821040 	.word	0x01821040
 8016f14:	00000000 	.word	0x00000000
 8016f18:	00840840 	.word	0x00840840
 8016f1c:	42bc      	cmp	r4, r7
 8016f1e:	f002 812c 	beq.w	801917a <forward_cast+0x2b42>
 8016f22:	f340 843a 	ble.w	801779a <forward_cast+0x1162>
 8016f26:	49b4      	ldr	r1, [pc, #720]	; (80171f8 <forward_cast+0xbc0>)
 8016f28:	428c      	cmp	r4, r1
 8016f2a:	f002 813e 	beq.w	80191aa <forward_cast+0x2b72>
 8016f2e:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8016f32:	428c      	cmp	r4, r1
 8016f34:	f040 879f 	bne.w	8017e76 <forward_cast+0x183e>
 8016f38:	7829      	ldrb	r1, [r5, #0]
 8016f3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016f3e:	2900      	cmp	r1, #0
 8016f40:	bf08      	it	eq
 8016f42:	eef0 7a48 	vmoveq.f32	s15, s16
 8016f46:	9900      	ldr	r1, [sp, #0]
 8016f48:	edc6 7a00 	vstr	s15, [r6]
 8016f4c:	444d      	add	r5, r9
 8016f4e:	45aa      	cmp	sl, r5
 8016f50:	440e      	add	r6, r1
 8016f52:	f67f abd9 	bls.w	8016708 <forward_cast+0xd0>
 8016f56:	4544      	cmp	r4, r8
 8016f58:	f002 80e5 	beq.w	8019126 <forward_cast+0x2aee>
 8016f5c:	ddde      	ble.n	8016f1c <forward_cast+0x8e4>
 8016f5e:	49a7      	ldr	r1, [pc, #668]	; (80171fc <forward_cast+0xbc4>)
 8016f60:	428c      	cmp	r4, r1
 8016f62:	f002 8604 	beq.w	8019b6e <forward_cast+0x3536>
 8016f66:	f340 8746 	ble.w	8017df6 <forward_cast+0x17be>
 8016f6a:	455c      	cmp	r4, fp
 8016f6c:	f040 8783 	bne.w	8017e76 <forward_cast+0x183e>
 8016f70:	edd5 7a00 	vldr	s15, [r5]
 8016f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f7c:	e7e3      	b.n	8016f46 <forward_cast+0x90e>
 8016f7e:	45bb      	cmp	fp, r7
 8016f80:	f000 87ba 	beq.w	8017ef8 <forward_cast+0x18c0>
 8016f84:	4b9e      	ldr	r3, [pc, #632]	; (8017200 <forward_cast+0xbc8>)
 8016f86:	459b      	cmp	fp, r3
 8016f88:	f040 80b1 	bne.w	80170ee <forward_cast+0xab6>
 8016f8c:	4555      	cmp	r5, sl
 8016f8e:	f4bf abbb 	bcs.w	8016708 <forward_cast+0xd0>
 8016f92:	ed9f 8a9c 	vldr	s16, [pc, #624]	; 8017204 <forward_cast+0xbcc>
 8016f96:	4a99      	ldr	r2, [pc, #612]	; (80171fc <forward_cast+0xbc4>)
 8016f98:	4b9b      	ldr	r3, [pc, #620]	; (8017208 <forward_cast+0xbd0>)
 8016f9a:	e01d      	b.n	8016fd8 <forward_cast+0x9a0>
 8016f9c:	499b      	ldr	r1, [pc, #620]	; (801720c <forward_cast+0xbd4>)
 8016f9e:	428c      	cmp	r4, r1
 8016fa0:	f002 8757 	beq.w	8019e52 <forward_cast+0x381a>
 8016fa4:	f340 847d 	ble.w	80178a2 <forward_cast+0x126a>
 8016fa8:	4993      	ldr	r1, [pc, #588]	; (80171f8 <forward_cast+0xbc0>)
 8016faa:	428c      	cmp	r4, r1
 8016fac:	f002 8743 	beq.w	8019e36 <forward_cast+0x37fe>
 8016fb0:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8016fb4:	428c      	cmp	r4, r1
 8016fb6:	f040 878a 	bne.w	8017ece <forward_cast+0x1896>
 8016fba:	7829      	ldrb	r1, [r5, #0]
 8016fbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016fc0:	2900      	cmp	r1, #0
 8016fc2:	bf08      	it	eq
 8016fc4:	eef0 7a48 	vmoveq.f32	s15, s16
 8016fc8:	9900      	ldr	r1, [sp, #0]
 8016fca:	edc6 7a00 	vstr	s15, [r6]
 8016fce:	444d      	add	r5, r9
 8016fd0:	45aa      	cmp	sl, r5
 8016fd2:	440e      	add	r6, r1
 8016fd4:	f67f ab98 	bls.w	8016708 <forward_cast+0xd0>
 8016fd8:	4544      	cmp	r4, r8
 8016fda:	f002 8706 	beq.w	8019dea <forward_cast+0x37b2>
 8016fde:	dddd      	ble.n	8016f9c <forward_cast+0x964>
 8016fe0:	4294      	cmp	r4, r2
 8016fe2:	f002 85b2 	beq.w	8019b4a <forward_cast+0x3512>
 8016fe6:	f340 866f 	ble.w	8017cc8 <forward_cast+0x1690>
 8016fea:	455c      	cmp	r4, fp
 8016fec:	f040 876f 	bne.w	8017ece <forward_cast+0x1896>
 8016ff0:	edd5 7a00 	vldr	s15, [r5]
 8016ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ffc:	e7e4      	b.n	8016fc8 <forward_cast+0x990>
 8016ffe:	4b82      	ldr	r3, [pc, #520]	; (8017208 <forward_cast+0xbd0>)
 8017000:	459b      	cmp	fp, r3
 8017002:	f47f ab81 	bne.w	8016708 <forward_cast+0xd0>
 8017006:	4555      	cmp	r5, sl
 8017008:	f4bf ab7e 	bcs.w	8016708 <forward_cast+0xd0>
 801700c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8017200 <forward_cast+0xbc8>
 8017010:	4f7d      	ldr	r7, [pc, #500]	; (8017208 <forward_cast+0xbd0>)
 8017012:	f8df b204 	ldr.w	fp, [pc, #516]	; 8017218 <forward_cast+0xbe0>
 8017016:	4b7d      	ldr	r3, [pc, #500]	; (801720c <forward_cast+0xbd4>)
 8017018:	4a77      	ldr	r2, [pc, #476]	; (80171f8 <forward_cast+0xbc0>)
 801701a:	e016      	b.n	801704a <forward_cast+0xa12>
 801701c:	429c      	cmp	r4, r3
 801701e:	f002 861c 	beq.w	8019c5a <forward_cast+0x3622>
 8017022:	f340 8480 	ble.w	8017926 <forward_cast+0x12ee>
 8017026:	4294      	cmp	r4, r2
 8017028:	f002 8608 	beq.w	8019c3c <forward_cast+0x3604>
 801702c:	4978      	ldr	r1, [pc, #480]	; (8017210 <forward_cast+0xbd8>)
 801702e:	428c      	cmp	r4, r1
 8017030:	f040 8735 	bne.w	8017e9e <forward_cast+0x1866>
 8017034:	7829      	ldrb	r1, [r5, #0]
 8017036:	3900      	subs	r1, #0
 8017038:	bf18      	it	ne
 801703a:	2101      	movne	r1, #1
 801703c:	8031      	strh	r1, [r6, #0]
 801703e:	444d      	add	r5, r9
 8017040:	9900      	ldr	r1, [sp, #0]
 8017042:	45aa      	cmp	sl, r5
 8017044:	440e      	add	r6, r1
 8017046:	f67f ab5f 	bls.w	8016708 <forward_cast+0xd0>
 801704a:	4972      	ldr	r1, [pc, #456]	; (8017214 <forward_cast+0xbdc>)
 801704c:	428c      	cmp	r4, r1
 801704e:	f002 8616 	beq.w	8019c7e <forward_cast+0x3646>
 8017052:	dde3      	ble.n	801701c <forward_cast+0x9e4>
 8017054:	4969      	ldr	r1, [pc, #420]	; (80171fc <forward_cast+0xbc4>)
 8017056:	428c      	cmp	r4, r1
 8017058:	f002 8564 	beq.w	8019b24 <forward_cast+0x34ec>
 801705c:	f340 8685 	ble.w	8017d6a <forward_cast+0x1732>
 8017060:	4544      	cmp	r4, r8
 8017062:	f040 871c 	bne.w	8017e9e <forward_cast+0x1866>
 8017066:	edd5 7a00 	vldr	s15, [r5]
 801706a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801706e:	ee17 1a90 	vmov	r1, s15
 8017072:	b209      	sxth	r1, r1
 8017074:	e7e2      	b.n	801703c <forward_cast+0xa04>
 8017076:	4b64      	ldr	r3, [pc, #400]	; (8017208 <forward_cast+0xbd0>)
 8017078:	459b      	cmp	fp, r3
 801707a:	f47f ab45 	bne.w	8016708 <forward_cast+0xd0>
 801707e:	4555      	cmp	r5, sl
 8017080:	f4bf ab42 	bcs.w	8016708 <forward_cast+0xd0>
 8017084:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8017200 <forward_cast+0xbc8>
 8017088:	4f5f      	ldr	r7, [pc, #380]	; (8017208 <forward_cast+0xbd0>)
 801708a:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8017218 <forward_cast+0xbe0>
 801708e:	4b5f      	ldr	r3, [pc, #380]	; (801720c <forward_cast+0xbd4>)
 8017090:	4a59      	ldr	r2, [pc, #356]	; (80171f8 <forward_cast+0xbc0>)
 8017092:	e016      	b.n	80170c2 <forward_cast+0xa8a>
 8017094:	429c      	cmp	r4, r3
 8017096:	f002 8597 	beq.w	8019bc8 <forward_cast+0x3590>
 801709a:	f340 8413 	ble.w	80178c4 <forward_cast+0x128c>
 801709e:	4294      	cmp	r4, r2
 80170a0:	f002 8503 	beq.w	8019aaa <forward_cast+0x3472>
 80170a4:	495a      	ldr	r1, [pc, #360]	; (8017210 <forward_cast+0xbd8>)
 80170a6:	428c      	cmp	r4, r1
 80170a8:	f040 86fc 	bne.w	8017ea4 <forward_cast+0x186c>
 80170ac:	7829      	ldrb	r1, [r5, #0]
 80170ae:	3900      	subs	r1, #0
 80170b0:	bf18      	it	ne
 80170b2:	2101      	movne	r1, #1
 80170b4:	8031      	strh	r1, [r6, #0]
 80170b6:	444d      	add	r5, r9
 80170b8:	9900      	ldr	r1, [sp, #0]
 80170ba:	45aa      	cmp	sl, r5
 80170bc:	440e      	add	r6, r1
 80170be:	f67f ab23 	bls.w	8016708 <forward_cast+0xd0>
 80170c2:	4954      	ldr	r1, [pc, #336]	; (8017214 <forward_cast+0xbdc>)
 80170c4:	428c      	cmp	r4, r1
 80170c6:	f002 85de 	beq.w	8019c86 <forward_cast+0x364e>
 80170ca:	dde3      	ble.n	8017094 <forward_cast+0xa5c>
 80170cc:	494b      	ldr	r1, [pc, #300]	; (80171fc <forward_cast+0xbc4>)
 80170ce:	428c      	cmp	r4, r1
 80170d0:	f002 8594 	beq.w	8019bfc <forward_cast+0x35c4>
 80170d4:	f340 8458 	ble.w	8017988 <forward_cast+0x1350>
 80170d8:	4544      	cmp	r4, r8
 80170da:	f040 86e3 	bne.w	8017ea4 <forward_cast+0x186c>
 80170de:	edd5 7a00 	vldr	s15, [r5]
 80170e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80170e6:	ee17 1a90 	vmov	r1, s15
 80170ea:	b209      	sxth	r1, r1
 80170ec:	e7e2      	b.n	80170b4 <forward_cast+0xa7c>
 80170ee:	4b46      	ldr	r3, [pc, #280]	; (8017208 <forward_cast+0xbd0>)
 80170f0:	459b      	cmp	fp, r3
 80170f2:	f47f ab09 	bne.w	8016708 <forward_cast+0xd0>
 80170f6:	4555      	cmp	r5, sl
 80170f8:	f4bf ab06 	bcs.w	8016708 <forward_cast+0xd0>
 80170fc:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8017200 <forward_cast+0xbc8>
 8017100:	4f41      	ldr	r7, [pc, #260]	; (8017208 <forward_cast+0xbd0>)
 8017102:	f8df b114 	ldr.w	fp, [pc, #276]	; 8017218 <forward_cast+0xbe0>
 8017106:	4b41      	ldr	r3, [pc, #260]	; (801720c <forward_cast+0xbd4>)
 8017108:	4a3b      	ldr	r2, [pc, #236]	; (80171f8 <forward_cast+0xbc0>)
 801710a:	e016      	b.n	801713a <forward_cast+0xb02>
 801710c:	429c      	cmp	r4, r3
 801710e:	f002 8674 	beq.w	8019dfa <forward_cast+0x37c2>
 8017112:	f340 8588 	ble.w	8017c26 <forward_cast+0x15ee>
 8017116:	4294      	cmp	r4, r2
 8017118:	f002 85bd 	beq.w	8019c96 <forward_cast+0x365e>
 801711c:	493c      	ldr	r1, [pc, #240]	; (8017210 <forward_cast+0xbd8>)
 801711e:	428c      	cmp	r4, r1
 8017120:	f040 86e4 	bne.w	8017eec <forward_cast+0x18b4>
 8017124:	7829      	ldrb	r1, [r5, #0]
 8017126:	3900      	subs	r1, #0
 8017128:	bf18      	it	ne
 801712a:	2101      	movne	r1, #1
 801712c:	8031      	strh	r1, [r6, #0]
 801712e:	444d      	add	r5, r9
 8017130:	9900      	ldr	r1, [sp, #0]
 8017132:	45aa      	cmp	sl, r5
 8017134:	440e      	add	r6, r1
 8017136:	f67f aae7 	bls.w	8016708 <forward_cast+0xd0>
 801713a:	4936      	ldr	r1, [pc, #216]	; (8017214 <forward_cast+0xbdc>)
 801713c:	428c      	cmp	r4, r1
 801713e:	f002 8219 	beq.w	8019574 <forward_cast+0x2f3c>
 8017142:	dde3      	ble.n	801710c <forward_cast+0xad4>
 8017144:	492d      	ldr	r1, [pc, #180]	; (80171fc <forward_cast+0xbc4>)
 8017146:	428c      	cmp	r4, r1
 8017148:	f002 84d9 	beq.w	8019afe <forward_cast+0x34c6>
 801714c:	f340 849e 	ble.w	8017a8c <forward_cast+0x1454>
 8017150:	4544      	cmp	r4, r8
 8017152:	f040 86cb 	bne.w	8017eec <forward_cast+0x18b4>
 8017156:	edd5 7a00 	vldr	s15, [r5]
 801715a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801715e:	ee17 1a90 	vmov	r1, s15
 8017162:	b209      	sxth	r1, r1
 8017164:	e7e2      	b.n	801712c <forward_cast+0xaf4>
 8017166:	4b2a      	ldr	r3, [pc, #168]	; (8017210 <forward_cast+0xbd8>)
 8017168:	459b      	cmp	fp, r3
 801716a:	f47f aacd 	bne.w	8016708 <forward_cast+0xd0>
 801716e:	4555      	cmp	r5, sl
 8017170:	f4bf aaca 	bcs.w	8016708 <forward_cast+0xd0>
 8017174:	9f00      	ldr	r7, [sp, #0]
 8017176:	4621      	mov	r1, r4
 8017178:	4628      	mov	r0, r5
 801717a:	f7ff f9e7 	bl	801654c <_array_handle_get_as_float>
 801717e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017182:	ee17 3a90 	vmov	r3, s15
 8017186:	f383 0308 	usat	r3, #8, r3
 801718a:	444d      	add	r5, r9
 801718c:	45aa      	cmp	sl, r5
 801718e:	7033      	strb	r3, [r6, #0]
 8017190:	443e      	add	r6, r7
 8017192:	d8f0      	bhi.n	8017176 <forward_cast+0xb3e>
 8017194:	f7ff bab8 	b.w	8016708 <forward_cast+0xd0>
 8017198:	4b1f      	ldr	r3, [pc, #124]	; (8017218 <forward_cast+0xbe0>)
 801719a:	459b      	cmp	fp, r3
 801719c:	f001 850f 	beq.w	8018bbe <forward_cast+0x2586>
 80171a0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80171a4:	459b      	cmp	fp, r3
 80171a6:	f040 81ea 	bne.w	801757e <forward_cast+0xf46>
 80171aa:	4555      	cmp	r5, sl
 80171ac:	f4bf aaac 	bcs.w	8016708 <forward_cast+0xd0>
 80171b0:	9f00      	ldr	r7, [sp, #0]
 80171b2:	4621      	mov	r1, r4
 80171b4:	4628      	mov	r0, r5
 80171b6:	f7ff f9c9 	bl	801654c <_array_handle_get_as_float>
 80171ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80171be:	ee17 3a90 	vmov	r3, s15
 80171c2:	f383 0308 	usat	r3, #8, r3
 80171c6:	b2db      	uxtb	r3, r3
 80171c8:	ee07 3a90 	vmov	s15, r3
 80171cc:	444d      	add	r5, r9
 80171ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80171d2:	45aa      	cmp	sl, r5
 80171d4:	edc6 7a00 	vstr	s15, [r6]
 80171d8:	443e      	add	r6, r7
 80171da:	d8ea      	bhi.n	80171b2 <forward_cast+0xb7a>
 80171dc:	f7ff ba94 	b.w	8016708 <forward_cast+0xd0>
 80171e0:	4b0b      	ldr	r3, [pc, #44]	; (8017210 <forward_cast+0xbd8>)
 80171e2:	459b      	cmp	fp, r3
 80171e4:	f47f aa90 	bne.w	8016708 <forward_cast+0xd0>
 80171e8:	4555      	cmp	r5, sl
 80171ea:	f4bf aa8d 	bcs.w	8016708 <forward_cast+0xd0>
 80171ee:	4b06      	ldr	r3, [pc, #24]	; (8017208 <forward_cast+0xbd0>)
 80171f0:	4a09      	ldr	r2, [pc, #36]	; (8017218 <forward_cast+0xbe0>)
 80171f2:	f04f 0800 	mov.w	r8, #0
 80171f6:	e02b      	b.n	8017250 <forward_cast+0xc18>
 80171f8:	00042040 	.word	0x00042040
 80171fc:	00842040 	.word	0x00842040
 8017200:	01821040 	.word	0x01821040
 8017204:	00000000 	.word	0x00000000
 8017208:	00840840 	.word	0x00840840
 801720c:	00041040 	.word	0x00041040
 8017210:	00060440 	.word	0x00060440
 8017214:	00840440 	.word	0x00840440
 8017218:	00841040 	.word	0x00841040
 801721c:	42bc      	cmp	r4, r7
 801721e:	f002 8685 	beq.w	8019f2c <forward_cast+0x38f4>
 8017222:	f340 839b 	ble.w	801795c <forward_cast+0x1324>
 8017226:	49ac      	ldr	r1, [pc, #688]	; (80174d8 <forward_cast+0xea0>)
 8017228:	428c      	cmp	r4, r1
 801722a:	f002 8671 	beq.w	8019f10 <forward_cast+0x38d8>
 801722e:	455c      	cmp	r4, fp
 8017230:	f040 8641 	bne.w	8017eb6 <forward_cast+0x187e>
 8017234:	7828      	ldrb	r0, [r5, #0]
 8017236:	3800      	subs	r0, #0
 8017238:	bf18      	it	ne
 801723a:	2001      	movne	r0, #1
 801723c:	f380 0010 	usat	r0, #16, r0
 8017240:	9900      	ldr	r1, [sp, #0]
 8017242:	f806 0008 	strb.w	r0, [r6, r8]
 8017246:	444d      	add	r5, r9
 8017248:	45aa      	cmp	sl, r5
 801724a:	4488      	add	r8, r1
 801724c:	f67f aa5c 	bls.w	8016708 <forward_cast+0xd0>
 8017250:	49a2      	ldr	r1, [pc, #648]	; (80174dc <forward_cast+0xea4>)
 8017252:	428c      	cmp	r4, r1
 8017254:	f002 851b 	beq.w	8019c8e <forward_cast+0x3656>
 8017258:	dde0      	ble.n	801721c <forward_cast+0xbe4>
 801725a:	49a1      	ldr	r1, [pc, #644]	; (80174e0 <forward_cast+0xea8>)
 801725c:	428c      	cmp	r4, r1
 801725e:	f002 826d 	beq.w	801973c <forward_cast+0x3104>
 8017262:	f340 8572 	ble.w	8017d4a <forward_cast+0x1712>
 8017266:	499f      	ldr	r1, [pc, #636]	; (80174e4 <forward_cast+0xeac>)
 8017268:	428c      	cmp	r4, r1
 801726a:	f040 8624 	bne.w	8017eb6 <forward_cast+0x187e>
 801726e:	edd5 7a00 	vldr	s15, [r5]
 8017272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017276:	ee17 0a90 	vmov	r0, s15
 801727a:	e7df      	b.n	801723c <forward_cast+0xc04>
 801727c:	4b9a      	ldr	r3, [pc, #616]	; (80174e8 <forward_cast+0xeb0>)
 801727e:	459b      	cmp	fp, r3
 8017280:	f47f aa42 	bne.w	8016708 <forward_cast+0xd0>
 8017284:	4555      	cmp	r5, sl
 8017286:	f4bf aa3f 	bcs.w	8016708 <forward_cast+0xd0>
 801728a:	9f00      	ldr	r7, [sp, #0]
 801728c:	4628      	mov	r0, r5
 801728e:	4621      	mov	r1, r4
 8017290:	f7ff f95c 	bl	801654c <_array_handle_get_as_float>
 8017294:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8017298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801729c:	444d      	add	r5, r9
 801729e:	bf14      	ite	ne
 80172a0:	2301      	movne	r3, #1
 80172a2:	2300      	moveq	r3, #0
 80172a4:	45aa      	cmp	sl, r5
 80172a6:	7033      	strb	r3, [r6, #0]
 80172a8:	443e      	add	r6, r7
 80172aa:	d8ef      	bhi.n	801728c <forward_cast+0xc54>
 80172ac:	f7ff ba2c 	b.w	8016708 <forward_cast+0xd0>
 80172b0:	4b8e      	ldr	r3, [pc, #568]	; (80174ec <forward_cast+0xeb4>)
 80172b2:	459b      	cmp	fp, r3
 80172b4:	f001 84d4 	beq.w	8018c60 <forward_cast+0x2628>
 80172b8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80172bc:	459b      	cmp	fp, r3
 80172be:	f040 8096 	bne.w	80173ee <forward_cast+0xdb6>
 80172c2:	4555      	cmp	r5, sl
 80172c4:	f4bf aa20 	bcs.w	8016708 <forward_cast+0xd0>
 80172c8:	f04f 0800 	mov.w	r8, #0
 80172cc:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 80172d0:	4628      	mov	r0, r5
 80172d2:	4621      	mov	r1, r4
 80172d4:	f7ff f93a 	bl	801654c <_array_handle_get_as_float>
 80172d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80172dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172e0:	444d      	add	r5, r9
 80172e2:	f000 85a6 	beq.w	8017e32 <forward_cast+0x17fa>
 80172e6:	9b00      	ldr	r3, [sp, #0]
 80172e8:	6037      	str	r7, [r6, #0]
 80172ea:	45aa      	cmp	sl, r5
 80172ec:	441e      	add	r6, r3
 80172ee:	d8ef      	bhi.n	80172d0 <forward_cast+0xc98>
 80172f0:	f7ff ba0a 	b.w	8016708 <forward_cast+0xd0>
 80172f4:	459b      	cmp	fp, r3
 80172f6:	f001 8566 	beq.w	8018dc6 <forward_cast+0x278e>
 80172fa:	4593      	cmp	fp, r2
 80172fc:	f040 80b2 	bne.w	8017464 <forward_cast+0xe2c>
 8017300:	4555      	cmp	r5, sl
 8017302:	f4bf aa01 	bcs.w	8016708 <forward_cast+0xd0>
 8017306:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80174e4 <forward_cast+0xeac>
 801730a:	4f79      	ldr	r7, [pc, #484]	; (80174f0 <forward_cast+0xeb8>)
 801730c:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 80174ec <forward_cast+0xeb4>
 8017310:	4b78      	ldr	r3, [pc, #480]	; (80174f4 <forward_cast+0xebc>)
 8017312:	4a71      	ldr	r2, [pc, #452]	; (80174d8 <forward_cast+0xea0>)
 8017314:	e01e      	b.n	8017354 <forward_cast+0xd1c>
 8017316:	429c      	cmp	r4, r3
 8017318:	f002 8631 	beq.w	8019f7e <forward_cast+0x3946>
 801731c:	f340 82ab 	ble.w	8017876 <forward_cast+0x123e>
 8017320:	4294      	cmp	r4, r2
 8017322:	f002 861e 	beq.w	8019f62 <forward_cast+0x392a>
 8017326:	4970      	ldr	r1, [pc, #448]	; (80174e8 <forward_cast+0xeb0>)
 8017328:	428c      	cmp	r4, r1
 801732a:	f040 85ca 	bne.w	8017ec2 <forward_cast+0x188a>
 801732e:	7828      	ldrb	r0, [r5, #0]
 8017330:	3800      	subs	r0, #0
 8017332:	bf18      	it	ne
 8017334:	2001      	movne	r0, #1
 8017336:	f300 000f 	ssat	r0, #16, r0
 801733a:	b200      	sxth	r0, r0
 801733c:	ee07 0a90 	vmov	s15, r0
 8017340:	9900      	ldr	r1, [sp, #0]
 8017342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017346:	444d      	add	r5, r9
 8017348:	45aa      	cmp	sl, r5
 801734a:	edc6 7a00 	vstr	s15, [r6]
 801734e:	440e      	add	r6, r1
 8017350:	f67f a9da 	bls.w	8016708 <forward_cast+0xd0>
 8017354:	4961      	ldr	r1, [pc, #388]	; (80174dc <forward_cast+0xea4>)
 8017356:	428c      	cmp	r4, r1
 8017358:	f002 82f1 	beq.w	801993e <forward_cast+0x3306>
 801735c:	dddb      	ble.n	8017316 <forward_cast+0xcde>
 801735e:	4960      	ldr	r1, [pc, #384]	; (80174e0 <forward_cast+0xea8>)
 8017360:	428c      	cmp	r4, r1
 8017362:	f003 8018 	beq.w	801a396 <forward_cast+0x3d5e>
 8017366:	f340 84bf 	ble.w	8017ce8 <forward_cast+0x16b0>
 801736a:	4544      	cmp	r4, r8
 801736c:	f040 85a9 	bne.w	8017ec2 <forward_cast+0x188a>
 8017370:	edd5 7a00 	vldr	s15, [r5]
 8017374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017378:	ee17 0a90 	vmov	r0, s15
 801737c:	e7db      	b.n	8017336 <forward_cast+0xcfe>
 801737e:	4b5c      	ldr	r3, [pc, #368]	; (80174f0 <forward_cast+0xeb8>)
 8017380:	459b      	cmp	fp, r3
 8017382:	f47f a9c1 	bne.w	8016708 <forward_cast+0xd0>
 8017386:	4555      	cmp	r5, sl
 8017388:	f4bf a9be 	bcs.w	8016708 <forward_cast+0xd0>
 801738c:	4b52      	ldr	r3, [pc, #328]	; (80174d8 <forward_cast+0xea0>)
 801738e:	e01a      	b.n	80173c6 <forward_cast+0xd8e>
 8017390:	4958      	ldr	r1, [pc, #352]	; (80174f4 <forward_cast+0xebc>)
 8017392:	428c      	cmp	r4, r1
 8017394:	f002 816c 	beq.w	8019670 <forward_cast+0x3038>
 8017398:	f340 8261 	ble.w	801785e <forward_cast+0x1226>
 801739c:	429c      	cmp	r4, r3
 801739e:	f002 8159 	beq.w	8019654 <forward_cast+0x301c>
 80173a2:	4951      	ldr	r1, [pc, #324]	; (80174e8 <forward_cast+0xeb0>)
 80173a4:	428c      	cmp	r4, r1
 80173a6:	f040 8574 	bne.w	8017e92 <forward_cast+0x185a>
 80173aa:	7828      	ldrb	r0, [r5, #0]
 80173ac:	3800      	subs	r0, #0
 80173ae:	bf18      	it	ne
 80173b0:	2001      	movne	r0, #1
 80173b2:	f300 0007 	ssat	r0, #8, r0
 80173b6:	9900      	ldr	r1, [sp, #0]
 80173b8:	444d      	add	r5, r9
 80173ba:	b240      	sxtb	r0, r0
 80173bc:	45aa      	cmp	sl, r5
 80173be:	8030      	strh	r0, [r6, #0]
 80173c0:	440e      	add	r6, r1
 80173c2:	f67f a9a1 	bls.w	8016708 <forward_cast+0xd0>
 80173c6:	42bc      	cmp	r4, r7
 80173c8:	f002 807f 	beq.w	80194ca <forward_cast+0x2e92>
 80173cc:	dde0      	ble.n	8017390 <forward_cast+0xd58>
 80173ce:	4944      	ldr	r1, [pc, #272]	; (80174e0 <forward_cast+0xea8>)
 80173d0:	428c      	cmp	r4, r1
 80173d2:	f002 81f2 	beq.w	80197ba <forward_cast+0x3182>
 80173d6:	f340 851d 	ble.w	8017e14 <forward_cast+0x17dc>
 80173da:	4294      	cmp	r4, r2
 80173dc:	f040 8559 	bne.w	8017e92 <forward_cast+0x185a>
 80173e0:	edd5 7a00 	vldr	s15, [r5]
 80173e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80173e8:	ee17 0a90 	vmov	r0, s15
 80173ec:	e7e1      	b.n	80173b2 <forward_cast+0xd7a>
 80173ee:	4b40      	ldr	r3, [pc, #256]	; (80174f0 <forward_cast+0xeb8>)
 80173f0:	459b      	cmp	fp, r3
 80173f2:	f47f a989 	bne.w	8016708 <forward_cast+0xd0>
 80173f6:	4555      	cmp	r5, sl
 80173f8:	f4bf a986 	bcs.w	8016708 <forward_cast+0xd0>
 80173fc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80174e0 <forward_cast+0xea8>
 8017400:	4f38      	ldr	r7, [pc, #224]	; (80174e4 <forward_cast+0xeac>)
 8017402:	4b35      	ldr	r3, [pc, #212]	; (80174d8 <forward_cast+0xea0>)
 8017404:	4a38      	ldr	r2, [pc, #224]	; (80174e8 <forward_cast+0xeb0>)
 8017406:	e016      	b.n	8017436 <forward_cast+0xdfe>
 8017408:	493a      	ldr	r1, [pc, #232]	; (80174f4 <forward_cast+0xebc>)
 801740a:	428c      	cmp	r4, r1
 801740c:	f002 814a 	beq.w	80196a4 <forward_cast+0x306c>
 8017410:	f340 81f6 	ble.w	8017800 <forward_cast+0x11c8>
 8017414:	429c      	cmp	r4, r3
 8017416:	f002 80fd 	beq.w	8019614 <forward_cast+0x2fdc>
 801741a:	4294      	cmp	r4, r2
 801741c:	f040 8536 	bne.w	8017e8c <forward_cast+0x1854>
 8017420:	7829      	ldrb	r1, [r5, #0]
 8017422:	3900      	subs	r1, #0
 8017424:	bf18      	it	ne
 8017426:	2101      	movne	r1, #1
 8017428:	8031      	strh	r1, [r6, #0]
 801742a:	444d      	add	r5, r9
 801742c:	9900      	ldr	r1, [sp, #0]
 801742e:	45aa      	cmp	sl, r5
 8017430:	440e      	add	r6, r1
 8017432:	f67f a969 	bls.w	8016708 <forward_cast+0xd0>
 8017436:	4929      	ldr	r1, [pc, #164]	; (80174dc <forward_cast+0xea4>)
 8017438:	428c      	cmp	r4, r1
 801743a:	f002 804a 	beq.w	80194d2 <forward_cast+0x2e9a>
 801743e:	dde3      	ble.n	8017408 <forward_cast+0xdd0>
 8017440:	4544      	cmp	r4, r8
 8017442:	f002 83a6 	beq.w	8019b92 <forward_cast+0x355a>
 8017446:	f340 81ea 	ble.w	801781e <forward_cast+0x11e6>
 801744a:	42bc      	cmp	r4, r7
 801744c:	f040 851e 	bne.w	8017e8c <forward_cast+0x1854>
 8017450:	edd5 7a00 	vldr	s15, [r5]
 8017454:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801745c:	bf14      	ite	ne
 801745e:	2101      	movne	r1, #1
 8017460:	2100      	moveq	r1, #0
 8017462:	e7e1      	b.n	8017428 <forward_cast+0xdf0>
 8017464:	4b22      	ldr	r3, [pc, #136]	; (80174f0 <forward_cast+0xeb8>)
 8017466:	459b      	cmp	fp, r3
 8017468:	f47f a94e 	bne.w	8016708 <forward_cast+0xd0>
 801746c:	4555      	cmp	r5, sl
 801746e:	f4bf a94b 	bcs.w	8016708 <forward_cast+0xd0>
 8017472:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80174e0 <forward_cast+0xea8>
 8017476:	4f1b      	ldr	r7, [pc, #108]	; (80174e4 <forward_cast+0xeac>)
 8017478:	4b17      	ldr	r3, [pc, #92]	; (80174d8 <forward_cast+0xea0>)
 801747a:	4a1b      	ldr	r2, [pc, #108]	; (80174e8 <forward_cast+0xeb0>)
 801747c:	e018      	b.n	80174b0 <forward_cast+0xe78>
 801747e:	491d      	ldr	r1, [pc, #116]	; (80174f4 <forward_cast+0xebc>)
 8017480:	428c      	cmp	r4, r1
 8017482:	f002 852a 	beq.w	8019eda <forward_cast+0x38a2>
 8017486:	f340 8242 	ble.w	801790e <forward_cast+0x12d6>
 801748a:	429c      	cmp	r4, r3
 801748c:	f002 84ee 	beq.w	8019e6c <forward_cast+0x3834>
 8017490:	4294      	cmp	r4, r2
 8017492:	f040 8525 	bne.w	8017ee0 <forward_cast+0x18a8>
 8017496:	7828      	ldrb	r0, [r5, #0]
 8017498:	3800      	subs	r0, #0
 801749a:	bf18      	it	ne
 801749c:	2001      	movne	r0, #1
 801749e:	f300 000f 	ssat	r0, #16, r0
 80174a2:	9900      	ldr	r1, [sp, #0]
 80174a4:	8030      	strh	r0, [r6, #0]
 80174a6:	444d      	add	r5, r9
 80174a8:	45aa      	cmp	sl, r5
 80174aa:	440e      	add	r6, r1
 80174ac:	f67f a92c 	bls.w	8016708 <forward_cast+0xd0>
 80174b0:	490a      	ldr	r1, [pc, #40]	; (80174dc <forward_cast+0xea4>)
 80174b2:	428c      	cmp	r4, r1
 80174b4:	f002 82f5 	beq.w	8019aa2 <forward_cast+0x346a>
 80174b8:	dde1      	ble.n	801747e <forward_cast+0xe46>
 80174ba:	4544      	cmp	r4, r8
 80174bc:	f002 85e8 	beq.w	801a090 <forward_cast+0x3a58>
 80174c0:	f340 8464 	ble.w	8017d8c <forward_cast+0x1754>
 80174c4:	42bc      	cmp	r4, r7
 80174c6:	f040 850b 	bne.w	8017ee0 <forward_cast+0x18a8>
 80174ca:	edd5 7a00 	vldr	s15, [r5]
 80174ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80174d2:	ee17 0a90 	vmov	r0, s15
 80174d6:	e7e2      	b.n	801749e <forward_cast+0xe66>
 80174d8:	00042040 	.word	0x00042040
 80174dc:	00840440 	.word	0x00840440
 80174e0:	00842040 	.word	0x00842040
 80174e4:	01821040 	.word	0x01821040
 80174e8:	00060440 	.word	0x00060440
 80174ec:	00841040 	.word	0x00841040
 80174f0:	00840840 	.word	0x00840840
 80174f4:	00041040 	.word	0x00041040
 80174f8:	4bb8      	ldr	r3, [pc, #736]	; (80177dc <forward_cast+0x11a4>)
 80174fa:	459b      	cmp	fp, r3
 80174fc:	f000 8547 	beq.w	8017f8e <forward_cast+0x1956>
 8017500:	4fb7      	ldr	r7, [pc, #732]	; (80177e0 <forward_cast+0x11a8>)
 8017502:	45bb      	cmp	fp, r7
 8017504:	d155      	bne.n	80175b2 <forward_cast+0xf7a>
 8017506:	4555      	cmp	r5, sl
 8017508:	f4bf a8fe 	bcs.w	8016708 <forward_cast+0xd0>
 801750c:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 80177f8 <forward_cast+0x11c0>
 8017510:	4fb4      	ldr	r7, [pc, #720]	; (80177e4 <forward_cast+0x11ac>)
 8017512:	4bb5      	ldr	r3, [pc, #724]	; (80177e8 <forward_cast+0x11b0>)
 8017514:	4ab5      	ldr	r2, [pc, #724]	; (80177ec <forward_cast+0x11b4>)
 8017516:	e01e      	b.n	8017556 <forward_cast+0xf1e>
 8017518:	49b5      	ldr	r1, [pc, #724]	; (80177f0 <forward_cast+0x11b8>)
 801751a:	428c      	cmp	r4, r1
 801751c:	f002 834a 	beq.w	8019bb4 <forward_cast+0x357c>
 8017520:	f340 8242 	ble.w	80179a8 <forward_cast+0x1370>
 8017524:	429c      	cmp	r4, r3
 8017526:	f002 837b 	beq.w	8019c20 <forward_cast+0x35e8>
 801752a:	4294      	cmp	r4, r2
 801752c:	f040 84b4 	bne.w	8017e98 <forward_cast+0x1860>
 8017530:	7828      	ldrb	r0, [r5, #0]
 8017532:	3800      	subs	r0, #0
 8017534:	bf18      	it	ne
 8017536:	2001      	movne	r0, #1
 8017538:	f380 0010 	usat	r0, #16, r0
 801753c:	b280      	uxth	r0, r0
 801753e:	ee07 0a90 	vmov	s15, r0
 8017542:	9900      	ldr	r1, [sp, #0]
 8017544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017548:	444d      	add	r5, r9
 801754a:	45aa      	cmp	sl, r5
 801754c:	edc6 7a00 	vstr	s15, [r6]
 8017550:	440e      	add	r6, r1
 8017552:	f67f a8d9 	bls.w	8016708 <forward_cast+0xd0>
 8017556:	49a7      	ldr	r1, [pc, #668]	; (80177f4 <forward_cast+0x11bc>)
 8017558:	428c      	cmp	r4, r1
 801755a:	f002 838c 	beq.w	8019c76 <forward_cast+0x363e>
 801755e:	dddb      	ble.n	8017518 <forward_cast+0xee0>
 8017560:	4544      	cmp	r4, r8
 8017562:	f001 86aa 	beq.w	80192ba <forward_cast+0x2c82>
 8017566:	f340 82fe 	ble.w	8017b66 <forward_cast+0x152e>
 801756a:	455c      	cmp	r4, fp
 801756c:	f040 8494 	bne.w	8017e98 <forward_cast+0x1860>
 8017570:	edd5 7a00 	vldr	s15, [r5]
 8017574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017578:	ee17 0a90 	vmov	r0, s15
 801757c:	e7dc      	b.n	8017538 <forward_cast+0xf00>
 801757e:	4b99      	ldr	r3, [pc, #612]	; (80177e4 <forward_cast+0x11ac>)
 8017580:	459b      	cmp	fp, r3
 8017582:	f47f a8c1 	bne.w	8016708 <forward_cast+0xd0>
 8017586:	4555      	cmp	r5, sl
 8017588:	f4bf a8be 	bcs.w	8016708 <forward_cast+0xd0>
 801758c:	9f00      	ldr	r7, [sp, #0]
 801758e:	4621      	mov	r1, r4
 8017590:	4628      	mov	r0, r5
 8017592:	f7fe ffdb 	bl	801654c <_array_handle_get_as_float>
 8017596:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801759a:	ee17 3a90 	vmov	r3, s15
 801759e:	f383 0308 	usat	r3, #8, r3
 80175a2:	444d      	add	r5, r9
 80175a4:	b2db      	uxtb	r3, r3
 80175a6:	45aa      	cmp	sl, r5
 80175a8:	8033      	strh	r3, [r6, #0]
 80175aa:	443e      	add	r6, r7
 80175ac:	d8ef      	bhi.n	801758e <forward_cast+0xf56>
 80175ae:	f7ff b8ab 	b.w	8016708 <forward_cast+0xd0>
 80175b2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80175b6:	459b      	cmp	fp, r3
 80175b8:	f47f a8a6 	bne.w	8016708 <forward_cast+0xd0>
 80175bc:	4555      	cmp	r5, sl
 80175be:	f4bf a8a3 	bcs.w	8016708 <forward_cast+0xd0>
 80175c2:	f8df 8234 	ldr.w	r8, [pc, #564]	; 80177f8 <forward_cast+0x11c0>
 80175c6:	4b88      	ldr	r3, [pc, #544]	; (80177e8 <forward_cast+0x11b0>)
 80175c8:	4a88      	ldr	r2, [pc, #544]	; (80177ec <forward_cast+0x11b4>)
 80175ca:	e018      	b.n	80175fe <forward_cast+0xfc6>
 80175cc:	4988      	ldr	r1, [pc, #544]	; (80177f0 <forward_cast+0x11b8>)
 80175ce:	428c      	cmp	r4, r1
 80175d0:	f001 87be 	beq.w	8019550 <forward_cast+0x2f18>
 80175d4:	f340 8212 	ble.w	80179fc <forward_cast+0x13c4>
 80175d8:	429c      	cmp	r4, r3
 80175da:	f001 86a8 	beq.w	801932e <forward_cast+0x2cf6>
 80175de:	4294      	cmp	r4, r2
 80175e0:	f040 8441 	bne.w	8017e66 <forward_cast+0x182e>
 80175e4:	7828      	ldrb	r0, [r5, #0]
 80175e6:	3800      	subs	r0, #0
 80175e8:	bf18      	it	ne
 80175ea:	2001      	movne	r0, #1
 80175ec:	f380 0010 	usat	r0, #16, r0
 80175f0:	9900      	ldr	r1, [sp, #0]
 80175f2:	8030      	strh	r0, [r6, #0]
 80175f4:	444d      	add	r5, r9
 80175f6:	45aa      	cmp	sl, r5
 80175f8:	440e      	add	r6, r1
 80175fa:	f67f a885 	bls.w	8016708 <forward_cast+0xd0>
 80175fe:	497d      	ldr	r1, [pc, #500]	; (80177f4 <forward_cast+0x11bc>)
 8017600:	428c      	cmp	r4, r1
 8017602:	f001 87b3 	beq.w	801956c <forward_cast+0x2f34>
 8017606:	dde1      	ble.n	80175cc <forward_cast+0xf94>
 8017608:	4544      	cmp	r4, r8
 801760a:	f002 8153 	beq.w	80198b4 <forward_cast+0x327c>
 801760e:	f340 8257 	ble.w	8017ac0 <forward_cast+0x1488>
 8017612:	42bc      	cmp	r4, r7
 8017614:	f040 8427 	bne.w	8017e66 <forward_cast+0x182e>
 8017618:	edd5 7a00 	vldr	s15, [r5]
 801761c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017620:	ee17 0a90 	vmov	r0, s15
 8017624:	e7e2      	b.n	80175ec <forward_cast+0xfb4>
 8017626:	4555      	cmp	r5, sl
 8017628:	f4bf a86e 	bcs.w	8016708 <forward_cast+0xd0>
 801762c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80177f8 <forward_cast+0x11c0>
 8017630:	2700      	movs	r7, #0
 8017632:	e01a      	b.n	801766a <forward_cast+0x1032>
 8017634:	429c      	cmp	r4, r3
 8017636:	f002 835a 	beq.w	8019cee <forward_cast+0x36b6>
 801763a:	f340 8238 	ble.w	8017aae <forward_cast+0x1476>
 801763e:	496a      	ldr	r1, [pc, #424]	; (80177e8 <forward_cast+0x11b0>)
 8017640:	428c      	cmp	r4, r1
 8017642:	f001 85a4 	beq.w	801918e <forward_cast+0x2b56>
 8017646:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 801764a:	428c      	cmp	r4, r1
 801764c:	f040 8410 	bne.w	8017e70 <forward_cast+0x1838>
 8017650:	7828      	ldrb	r0, [r5, #0]
 8017652:	3800      	subs	r0, #0
 8017654:	bf18      	it	ne
 8017656:	2001      	movne	r0, #1
 8017658:	f380 0010 	usat	r0, #16, r0
 801765c:	9900      	ldr	r1, [sp, #0]
 801765e:	55f0      	strb	r0, [r6, r7]
 8017660:	444d      	add	r5, r9
 8017662:	45aa      	cmp	sl, r5
 8017664:	440f      	add	r7, r1
 8017666:	f67f a84f 	bls.w	8016708 <forward_cast+0xd0>
 801766a:	455c      	cmp	r4, fp
 801766c:	f001 85f2 	beq.w	8019254 <forward_cast+0x2c1c>
 8017670:	dde0      	ble.n	8017634 <forward_cast+0xffc>
 8017672:	4544      	cmp	r4, r8
 8017674:	f002 86a5 	beq.w	801a3c2 <forward_cast+0x3d8a>
 8017678:	f340 81ae 	ble.w	80179d8 <forward_cast+0x13a0>
 801767c:	4958      	ldr	r1, [pc, #352]	; (80177e0 <forward_cast+0x11a8>)
 801767e:	428c      	cmp	r4, r1
 8017680:	f040 83f6 	bne.w	8017e70 <forward_cast+0x1838>
 8017684:	edd5 7a00 	vldr	s15, [r5]
 8017688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801768c:	ee17 0a90 	vmov	r0, s15
 8017690:	e7e2      	b.n	8017658 <forward_cast+0x1020>
 8017692:	4555      	cmp	r5, sl
 8017694:	f4bf a838 	bcs.w	8016708 <forward_cast+0xd0>
 8017698:	4a53      	ldr	r2, [pc, #332]	; (80177e8 <forward_cast+0x11b0>)
 801769a:	f04f 0800 	mov.w	r8, #0
 801769e:	e018      	b.n	80176d2 <forward_cast+0x109a>
 80176a0:	4953      	ldr	r1, [pc, #332]	; (80177f0 <forward_cast+0x11b8>)
 80176a2:	428c      	cmp	r4, r1
 80176a4:	f001 85c6 	beq.w	8019234 <forward_cast+0x2bfc>
 80176a8:	f340 82a2 	ble.w	8017bf0 <forward_cast+0x15b8>
 80176ac:	4294      	cmp	r4, r2
 80176ae:	f001 8680 	beq.w	80193b2 <forward_cast+0x2d7a>
 80176b2:	494e      	ldr	r1, [pc, #312]	; (80177ec <forward_cast+0x11b4>)
 80176b4:	428c      	cmp	r4, r1
 80176b6:	f040 83cb 	bne.w	8017e50 <forward_cast+0x1818>
 80176ba:	7829      	ldrb	r1, [r5, #0]
 80176bc:	3900      	subs	r1, #0
 80176be:	bf18      	it	ne
 80176c0:	2101      	movne	r1, #1
 80176c2:	f806 1008 	strb.w	r1, [r6, r8]
 80176c6:	444d      	add	r5, r9
 80176c8:	9900      	ldr	r1, [sp, #0]
 80176ca:	45aa      	cmp	sl, r5
 80176cc:	4488      	add	r8, r1
 80176ce:	f67f a81b 	bls.w	8016708 <forward_cast+0xd0>
 80176d2:	455c      	cmp	r4, fp
 80176d4:	f000 8295 	beq.w	8017c02 <forward_cast+0x15ca>
 80176d8:	dde2      	ble.n	80176a0 <forward_cast+0x1068>
 80176da:	4947      	ldr	r1, [pc, #284]	; (80177f8 <forward_cast+0x11c0>)
 80176dc:	428c      	cmp	r4, r1
 80176de:	f002 8681 	beq.w	801a3e4 <forward_cast+0x3dac>
 80176e2:	f340 8364 	ble.w	8017dae <forward_cast+0x1776>
 80176e6:	42bc      	cmp	r4, r7
 80176e8:	f040 83b2 	bne.w	8017e50 <forward_cast+0x1818>
 80176ec:	edd5 7a00 	vldr	s15, [r5]
 80176f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80176f4:	edcd 7a01 	vstr	s15, [sp, #4]
 80176f8:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80176fc:	e7e1      	b.n	80176c2 <forward_cast+0x108a>
 80176fe:	4555      	cmp	r5, sl
 8017700:	bf38      	it	cc
 8017702:	f04f 0800 	movcc.w	r8, #0
 8017706:	d31e      	bcc.n	8017746 <forward_cast+0x110e>
 8017708:	f7fe bffe 	b.w	8016708 <forward_cast+0xd0>
 801770c:	4938      	ldr	r1, [pc, #224]	; (80177f0 <forward_cast+0x11b8>)
 801770e:	428c      	cmp	r4, r1
 8017710:	f001 8629 	beq.w	8019366 <forward_cast+0x2d2e>
 8017714:	f340 8154 	ble.w	80179c0 <forward_cast+0x1388>
 8017718:	4933      	ldr	r1, [pc, #204]	; (80177e8 <forward_cast+0x11b0>)
 801771a:	428c      	cmp	r4, r1
 801771c:	f001 8615 	beq.w	801934a <forward_cast+0x2d12>
 8017720:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8017724:	428c      	cmp	r4, r1
 8017726:	f040 83a1 	bne.w	8017e6c <forward_cast+0x1834>
 801772a:	7828      	ldrb	r0, [r5, #0]
 801772c:	3800      	subs	r0, #0
 801772e:	bf18      	it	ne
 8017730:	2001      	movne	r0, #1
 8017732:	f300 000f 	ssat	r0, #16, r0
 8017736:	9900      	ldr	r1, [sp, #0]
 8017738:	f806 0008 	strb.w	r0, [r6, r8]
 801773c:	444d      	add	r5, r9
 801773e:	45aa      	cmp	sl, r5
 8017740:	4488      	add	r8, r1
 8017742:	f67e afe1 	bls.w	8016708 <forward_cast+0xd0>
 8017746:	455c      	cmp	r4, fp
 8017748:	f001 8580 	beq.w	801924c <forward_cast+0x2c14>
 801774c:	ddde      	ble.n	801770c <forward_cast+0x10d4>
 801774e:	492a      	ldr	r1, [pc, #168]	; (80177f8 <forward_cast+0x11c0>)
 8017750:	428c      	cmp	r4, r1
 8017752:	f002 82be 	beq.w	8019cd2 <forward_cast+0x369a>
 8017756:	f340 8257 	ble.w	8017c08 <forward_cast+0x15d0>
 801775a:	4294      	cmp	r4, r2
 801775c:	f040 8386 	bne.w	8017e6c <forward_cast+0x1834>
 8017760:	edd5 7a00 	vldr	s15, [r5]
 8017764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017768:	ee17 0a90 	vmov	r0, s15
 801776c:	e7e1      	b.n	8017732 <forward_cast+0x10fa>
 801776e:	4555      	cmp	r5, sl
 8017770:	f4be afca 	bcs.w	8016708 <forward_cast+0xd0>
 8017774:	9f00      	ldr	r7, [sp, #0]
 8017776:	4628      	mov	r0, r5
 8017778:	4621      	mov	r1, r4
 801777a:	f7fe fee7 	bl	801654c <_array_handle_get_as_float>
 801777e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8017782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017786:	444d      	add	r5, r9
 8017788:	bf14      	ite	ne
 801778a:	2301      	movne	r3, #1
 801778c:	2300      	moveq	r3, #0
 801778e:	45aa      	cmp	sl, r5
 8017790:	7033      	strb	r3, [r6, #0]
 8017792:	443e      	add	r6, r7
 8017794:	d8ef      	bhi.n	8017776 <forward_cast+0x113e>
 8017796:	f7fe bfb7 	b.w	8016708 <forward_cast+0xd0>
 801779a:	4918      	ldr	r1, [pc, #96]	; (80177fc <forward_cast+0x11c4>)
 801779c:	428c      	cmp	r4, r1
 801779e:	f001 877a 	beq.w	8019696 <forward_cast+0x305e>
 80177a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80177a6:	428c      	cmp	r4, r1
 80177a8:	f040 8365 	bne.w	8017e76 <forward_cast+0x183e>
 80177ac:	8829      	ldrh	r1, [r5, #0]
 80177ae:	ee07 1a90 	vmov	s15, r1
 80177b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80177b6:	f7ff bbc6 	b.w	8016f46 <forward_cast+0x90e>
 80177ba:	4910      	ldr	r1, [pc, #64]	; (80177fc <forward_cast+0x11c4>)
 80177bc:	428c      	cmp	r4, r1
 80177be:	f001 877e 	beq.w	80196be <forward_cast+0x3086>
 80177c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80177c6:	428c      	cmp	r4, r1
 80177c8:	f040 8359 	bne.w	8017e7e <forward_cast+0x1846>
 80177cc:	8829      	ldrh	r1, [r5, #0]
 80177ce:	ee07 1a90 	vmov	s15, r1
 80177d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80177d6:	f7ff baeb 	b.w	8016db0 <forward_cast+0x778>
 80177da:	bf00      	nop
 80177dc:	00841040 	.word	0x00841040
 80177e0:	01821040 	.word	0x01821040
 80177e4:	00840840 	.word	0x00840840
 80177e8:	00042040 	.word	0x00042040
 80177ec:	00060440 	.word	0x00060440
 80177f0:	00041040 	.word	0x00041040
 80177f4:	00840440 	.word	0x00840440
 80177f8:	00842040 	.word	0x00842040
 80177fc:	00040440 	.word	0x00040440
 8017800:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8017804:	428c      	cmp	r4, r1
 8017806:	f43f ae0b 	beq.w	8017420 <forward_cast+0xde8>
 801780a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801780e:	428c      	cmp	r4, r1
 8017810:	f040 833c 	bne.w	8017e8c <forward_cast+0x1854>
 8017814:	8829      	ldrh	r1, [r5, #0]
 8017816:	3900      	subs	r1, #0
 8017818:	bf18      	it	ne
 801781a:	2101      	movne	r1, #1
 801781c:	e604      	b.n	8017428 <forward_cast+0xdf0>
 801781e:	455c      	cmp	r4, fp
 8017820:	f001 86f1 	beq.w	8019606 <forward_cast+0x2fce>
 8017824:	49c3      	ldr	r1, [pc, #780]	; (8017b34 <forward_cast+0x14fc>)
 8017826:	428c      	cmp	r4, r1
 8017828:	f040 8330 	bne.w	8017e8c <forward_cast+0x1854>
 801782c:	edd5 7a00 	vldr	s15, [r5]
 8017830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017834:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783c:	bf14      	ite	ne
 801783e:	2101      	movne	r1, #1
 8017840:	2100      	moveq	r1, #0
 8017842:	e5f1      	b.n	8017428 <forward_cast+0xdf0>
 8017844:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8017848:	428c      	cmp	r4, r1
 801784a:	f001 871b 	beq.w	8019684 <forward_cast+0x304c>
 801784e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017852:	428c      	cmp	r4, r1
 8017854:	f040 8317 	bne.w	8017e86 <forward_cast+0x184e>
 8017858:	8828      	ldrh	r0, [r5, #0]
 801785a:	f7ff ba0f 	b.w	8016c7c <forward_cast+0x644>
 801785e:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8017862:	428c      	cmp	r4, r1
 8017864:	f002 8395 	beq.w	8019f92 <forward_cast+0x395a>
 8017868:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801786c:	428c      	cmp	r4, r1
 801786e:	f040 8310 	bne.w	8017e92 <forward_cast+0x185a>
 8017872:	8828      	ldrh	r0, [r5, #0]
 8017874:	e59d      	b.n	80173b2 <forward_cast+0xd7a>
 8017876:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801787a:	428c      	cmp	r4, r1
 801787c:	f002 813c 	beq.w	8019af8 <forward_cast+0x34c0>
 8017880:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017884:	428c      	cmp	r4, r1
 8017886:	f040 831c 	bne.w	8017ec2 <forward_cast+0x188a>
 801788a:	8828      	ldrh	r0, [r5, #0]
 801788c:	e553      	b.n	8017336 <forward_cast+0xcfe>
 801788e:	42bc      	cmp	r4, r7
 8017890:	f002 82e9 	beq.w	8019e66 <forward_cast+0x382e>
 8017894:	49a8      	ldr	r1, [pc, #672]	; (8017b38 <forward_cast+0x1500>)
 8017896:	428c      	cmp	r4, r1
 8017898:	f040 8307 	bne.w	8017eaa <forward_cast+0x1872>
 801789c:	8828      	ldrh	r0, [r5, #0]
 801789e:	f7ff b871 	b.w	8016984 <forward_cast+0x34c>
 80178a2:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 80178a6:	428c      	cmp	r4, r1
 80178a8:	f002 8199 	beq.w	8019bde <forward_cast+0x35a6>
 80178ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80178b0:	428c      	cmp	r4, r1
 80178b2:	f040 830c 	bne.w	8017ece <forward_cast+0x1896>
 80178b6:	8829      	ldrh	r1, [r5, #0]
 80178b8:	ee07 1a90 	vmov	s15, r1
 80178bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80178c0:	f7ff bb82 	b.w	8016fc8 <forward_cast+0x990>
 80178c4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80178c8:	428c      	cmp	r4, r1
 80178ca:	f002 837c 	beq.w	8019fc6 <forward_cast+0x398e>
 80178ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80178d2:	428c      	cmp	r4, r1
 80178d4:	f040 82e6 	bne.w	8017ea4 <forward_cast+0x186c>
 80178d8:	f9b5 1000 	ldrsh.w	r1, [r5]
 80178dc:	f7ff bbea 	b.w	80170b4 <forward_cast+0xa7c>
 80178e0:	4544      	cmp	r4, r8
 80178e2:	f002 8363 	beq.w	8019fac <forward_cast+0x3974>
 80178e6:	4994      	ldr	r1, [pc, #592]	; (8017b38 <forward_cast+0x1500>)
 80178e8:	428c      	cmp	r4, r1
 80178ea:	f040 82e7 	bne.w	8017ebc <forward_cast+0x1884>
 80178ee:	8828      	ldrh	r0, [r5, #0]
 80178f0:	f7fe bf43 	b.w	801677a <forward_cast+0x142>
 80178f4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80178f8:	428c      	cmp	r4, r1
 80178fa:	f002 82f8 	beq.w	8019eee <forward_cast+0x38b6>
 80178fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017902:	428c      	cmp	r4, r1
 8017904:	f040 82d4 	bne.w	8017eb0 <forward_cast+0x1878>
 8017908:	8828      	ldrh	r0, [r5, #0]
 801790a:	f7ff b9f7 	b.w	8016cfc <forward_cast+0x6c4>
 801790e:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8017912:	428c      	cmp	r4, r1
 8017914:	f002 81ac 	beq.w	8019c70 <forward_cast+0x3638>
 8017918:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801791c:	428c      	cmp	r4, r1
 801791e:	f040 82df 	bne.w	8017ee0 <forward_cast+0x18a8>
 8017922:	8828      	ldrh	r0, [r5, #0]
 8017924:	e5bb      	b.n	801749e <forward_cast+0xe66>
 8017926:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801792a:	428c      	cmp	r4, r1
 801792c:	f002 82d2 	beq.w	8019ed4 <forward_cast+0x389c>
 8017930:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017934:	428c      	cmp	r4, r1
 8017936:	f040 82b2 	bne.w	8017e9e <forward_cast+0x1866>
 801793a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801793e:	f7ff bb7d 	b.w	801703c <forward_cast+0xa04>
 8017942:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017946:	428c      	cmp	r4, r1
 8017948:	f002 82fa 	beq.w	8019f40 <forward_cast+0x3908>
 801794c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017950:	428c      	cmp	r4, r1
 8017952:	f040 82b9 	bne.w	8017ec8 <forward_cast+0x1890>
 8017956:	8829      	ldrh	r1, [r5, #0]
 8017958:	f7ff b86c 	b.w	8016a34 <forward_cast+0x3fc>
 801795c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017960:	428c      	cmp	r4, r1
 8017962:	f002 82a9 	beq.w	8019eb8 <forward_cast+0x3880>
 8017966:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801796a:	428c      	cmp	r4, r1
 801796c:	f040 82a3 	bne.w	8017eb6 <forward_cast+0x187e>
 8017970:	8828      	ldrh	r0, [r5, #0]
 8017972:	e463      	b.n	801723c <forward_cast+0xc04>
 8017974:	4294      	cmp	r4, r2
 8017976:	f002 8150 	beq.w	8019c1a <forward_cast+0x35e2>
 801797a:	496f      	ldr	r1, [pc, #444]	; (8017b38 <forward_cast+0x1500>)
 801797c:	428c      	cmp	r4, r1
 801797e:	f040 82b2 	bne.w	8017ee6 <forward_cast+0x18ae>
 8017982:	8828      	ldrh	r0, [r5, #0]
 8017984:	f7ff b8a0 	b.w	8016ac8 <forward_cast+0x490>
 8017988:	42bc      	cmp	r4, r7
 801798a:	d0a5      	beq.n	80178d8 <forward_cast+0x12a0>
 801798c:	455c      	cmp	r4, fp
 801798e:	f040 8289 	bne.w	8017ea4 <forward_cast+0x186c>
 8017992:	edd5 7a00 	vldr	s15, [r5]
 8017996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801799a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801799e:	ee17 1a90 	vmov	r1, s15
 80179a2:	b209      	sxth	r1, r1
 80179a4:	f7ff bb86 	b.w	80170b4 <forward_cast+0xa7c>
 80179a8:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 80179ac:	428c      	cmp	r4, r1
 80179ae:	f001 84e4 	beq.w	801937a <forward_cast+0x2d42>
 80179b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80179b6:	428c      	cmp	r4, r1
 80179b8:	f040 826e 	bne.w	8017e98 <forward_cast+0x1860>
 80179bc:	8828      	ldrh	r0, [r5, #0]
 80179be:	e5bb      	b.n	8017538 <forward_cast+0xf00>
 80179c0:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 80179c4:	428c      	cmp	r4, r1
 80179c6:	f002 850a 	beq.w	801a3de <forward_cast+0x3da6>
 80179ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80179ce:	428c      	cmp	r4, r1
 80179d0:	f040 824c 	bne.w	8017e6c <forward_cast+0x1834>
 80179d4:	8828      	ldrh	r0, [r5, #0]
 80179d6:	e6ac      	b.n	8017732 <forward_cast+0x10fa>
 80179d8:	4958      	ldr	r1, [pc, #352]	; (8017b3c <forward_cast+0x1504>)
 80179da:	428c      	cmp	r4, r1
 80179dc:	f001 85c2 	beq.w	8019564 <forward_cast+0x2f2c>
 80179e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80179e4:	428c      	cmp	r4, r1
 80179e6:	f040 8243 	bne.w	8017e70 <forward_cast+0x1838>
 80179ea:	edd5 7a00 	vldr	s15, [r5]
 80179ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80179f6:	ee17 0a90 	vmov	r0, s15
 80179fa:	e62d      	b.n	8017658 <forward_cast+0x1020>
 80179fc:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8017a00:	428c      	cmp	r4, r1
 8017a02:	f002 843c 	beq.w	801a27e <forward_cast+0x3c46>
 8017a06:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017a0a:	428c      	cmp	r4, r1
 8017a0c:	f040 822b 	bne.w	8017e66 <forward_cast+0x182e>
 8017a10:	8828      	ldrh	r0, [r5, #0]
 8017a12:	e5eb      	b.n	80175ec <forward_cast+0xfb4>
 8017a14:	455c      	cmp	r4, fp
 8017a16:	f001 84f4 	beq.w	8019402 <forward_cast+0x2dca>
 8017a1a:	429c      	cmp	r4, r3
 8017a1c:	f040 821a 	bne.w	8017e54 <forward_cast+0x181c>
 8017a20:	edd5 7a00 	vldr	s15, [r5]
 8017a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a2c:	ee17 0a90 	vmov	r0, s15
 8017a30:	f7fe bf45 	b.w	80168be <forward_cast+0x286>
 8017a34:	42bc      	cmp	r4, r7
 8017a36:	f001 867e 	beq.w	8019736 <forward_cast+0x30fe>
 8017a3a:	493f      	ldr	r1, [pc, #252]	; (8017b38 <forward_cast+0x1500>)
 8017a3c:	428c      	cmp	r4, r1
 8017a3e:	f040 8209 	bne.w	8017e54 <forward_cast+0x181c>
 8017a42:	8828      	ldrh	r0, [r5, #0]
 8017a44:	f7fe bf3b 	b.w	80168be <forward_cast+0x286>
 8017a48:	42bc      	cmp	r4, r7
 8017a4a:	d06f      	beq.n	8017b2c <forward_cast+0x14f4>
 8017a4c:	455c      	cmp	r4, fp
 8017a4e:	f040 8250 	bne.w	8017ef2 <forward_cast+0x18ba>
 8017a52:	edd5 7a00 	vldr	s15, [r5]
 8017a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017a5e:	ee17 1a90 	vmov	r1, s15
 8017a62:	b289      	uxth	r1, r1
 8017a64:	f7fe beda 	b.w	801681c <forward_cast+0x1e4>
 8017a68:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8017a6c:	428c      	cmp	r4, r1
 8017a6e:	f002 8055 	beq.w	8019b1c <forward_cast+0x34e4>
 8017a72:	4294      	cmp	r4, r2
 8017a74:	f040 81f4 	bne.w	8017e60 <forward_cast+0x1828>
 8017a78:	edd5 7a00 	vldr	s15, [r5]
 8017a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a84:	ee17 0a90 	vmov	r0, s15
 8017a88:	f7ff b8a6 	b.w	8016bd8 <forward_cast+0x5a0>
 8017a8c:	42bc      	cmp	r4, r7
 8017a8e:	f000 80d4 	beq.w	8017c3a <forward_cast+0x1602>
 8017a92:	455c      	cmp	r4, fp
 8017a94:	f040 822a 	bne.w	8017eec <forward_cast+0x18b4>
 8017a98:	edd5 7a00 	vldr	s15, [r5]
 8017a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017aa4:	ee17 1a90 	vmov	r1, s15
 8017aa8:	b209      	sxth	r1, r1
 8017aaa:	f7ff bb3f 	b.w	801712c <forward_cast+0xaf4>
 8017aae:	4294      	cmp	r4, r2
 8017ab0:	f001 870e 	beq.w	80198d0 <forward_cast+0x3298>
 8017ab4:	4920      	ldr	r1, [pc, #128]	; (8017b38 <forward_cast+0x1500>)
 8017ab6:	428c      	cmp	r4, r1
 8017ab8:	f040 81da 	bne.w	8017e70 <forward_cast+0x1838>
 8017abc:	8828      	ldrh	r0, [r5, #0]
 8017abe:	e5cb      	b.n	8017658 <forward_cast+0x1020>
 8017ac0:	455c      	cmp	r4, fp
 8017ac2:	f001 8430 	beq.w	8019326 <forward_cast+0x2cee>
 8017ac6:	491b      	ldr	r1, [pc, #108]	; (8017b34 <forward_cast+0x14fc>)
 8017ac8:	428c      	cmp	r4, r1
 8017aca:	f040 81cc 	bne.w	8017e66 <forward_cast+0x182e>
 8017ace:	edd5 7a00 	vldr	s15, [r5]
 8017ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017ada:	ee17 0a90 	vmov	r0, s15
 8017ade:	e585      	b.n	80175ec <forward_cast+0xfb4>
 8017ae0:	4917      	ldr	r1, [pc, #92]	; (8017b40 <forward_cast+0x1508>)
 8017ae2:	428c      	cmp	r4, r1
 8017ae4:	f002 82ff 	beq.w	801a0e6 <forward_cast+0x3aae>
 8017ae8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017aec:	428c      	cmp	r4, r1
 8017aee:	f040 81b7 	bne.w	8017e60 <forward_cast+0x1828>
 8017af2:	8828      	ldrh	r0, [r5, #0]
 8017af4:	f7ff b870 	b.w	8016bd8 <forward_cast+0x5a0>
 8017af8:	42bc      	cmp	r4, r7
 8017afa:	d076      	beq.n	8017bea <forward_cast+0x15b2>
 8017afc:	455c      	cmp	r4, fp
 8017afe:	f040 81ac 	bne.w	8017e5a <forward_cast+0x1822>
 8017b02:	edd5 7a00 	vldr	s15, [r5]
 8017b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b0e:	ee17 1a90 	vmov	r1, s15
 8017b12:	b289      	uxth	r1, r1
 8017b14:	f7ff b824 	b.w	8016b60 <forward_cast+0x528>
 8017b18:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017b1c:	428c      	cmp	r4, r1
 8017b1e:	f001 861f 	beq.w	8019760 <forward_cast+0x3128>
 8017b22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017b26:	428c      	cmp	r4, r1
 8017b28:	f040 81e3 	bne.w	8017ef2 <forward_cast+0x18ba>
 8017b2c:	8829      	ldrh	r1, [r5, #0]
 8017b2e:	f7fe be75 	b.w	801681c <forward_cast+0x1e4>
 8017b32:	bf00      	nop
 8017b34:	00841040 	.word	0x00841040
 8017b38:	00040840 	.word	0x00040840
 8017b3c:	00840840 	.word	0x00840840
 8017b40:	00040440 	.word	0x00040440
 8017b44:	455c      	cmp	r4, fp
 8017b46:	d043      	beq.n	8017bd0 <forward_cast+0x1598>
 8017b48:	429c      	cmp	r4, r3
 8017b4a:	f040 817b 	bne.w	8017e44 <forward_cast+0x180c>
 8017b4e:	edd5 7a00 	vldr	s15, [r5]
 8017b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b5a:	edcd 7a01 	vstr	s15, [sp, #4]
 8017b5e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017b62:	f7ff b99c 	b.w	8016e9e <forward_cast+0x866>
 8017b66:	42bc      	cmp	r4, r7
 8017b68:	f001 8623 	beq.w	80197b2 <forward_cast+0x317a>
 8017b6c:	49da      	ldr	r1, [pc, #872]	; (8017ed8 <forward_cast+0x18a0>)
 8017b6e:	428c      	cmp	r4, r1
 8017b70:	f040 8192 	bne.w	8017e98 <forward_cast+0x1860>
 8017b74:	edd5 7a00 	vldr	s15, [r5]
 8017b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b80:	ee17 0a90 	vmov	r0, s15
 8017b84:	e4d8      	b.n	8017538 <forward_cast+0xf00>
 8017b86:	455c      	cmp	r4, fp
 8017b88:	f001 846b 	beq.w	8019462 <forward_cast+0x2e2a>
 8017b8c:	429c      	cmp	r4, r3
 8017b8e:	f040 818c 	bne.w	8017eaa <forward_cast+0x1872>
 8017b92:	edd5 7a00 	vldr	s15, [r5]
 8017b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b9e:	ee17 0a90 	vmov	r0, s15
 8017ba2:	f7fe beef 	b.w	8016984 <forward_cast+0x34c>
 8017ba6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017baa:	428c      	cmp	r4, r1
 8017bac:	d004      	beq.n	8017bb8 <forward_cast+0x1580>
 8017bae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017bb2:	428c      	cmp	r4, r1
 8017bb4:	f040 8149 	bne.w	8017e4a <forward_cast+0x1812>
 8017bb8:	7829      	ldrb	r1, [r5, #0]
 8017bba:	f7ff b931 	b.w	8016e20 <forward_cast+0x7e8>
 8017bbe:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017bc2:	428c      	cmp	r4, r1
 8017bc4:	d004      	beq.n	8017bd0 <forward_cast+0x1598>
 8017bc6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017bca:	428c      	cmp	r4, r1
 8017bcc:	f040 813a 	bne.w	8017e44 <forward_cast+0x180c>
 8017bd0:	7829      	ldrb	r1, [r5, #0]
 8017bd2:	f7ff b964 	b.w	8016e9e <forward_cast+0x866>
 8017bd6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017bda:	428c      	cmp	r4, r1
 8017bdc:	f001 833e 	beq.w	801925c <forward_cast+0x2c24>
 8017be0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017be4:	428c      	cmp	r4, r1
 8017be6:	f040 8138 	bne.w	8017e5a <forward_cast+0x1822>
 8017bea:	8829      	ldrh	r1, [r5, #0]
 8017bec:	f7fe bfb8 	b.w	8016b60 <forward_cast+0x528>
 8017bf0:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8017bf4:	428c      	cmp	r4, r1
 8017bf6:	d004      	beq.n	8017c02 <forward_cast+0x15ca>
 8017bf8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017bfc:	428c      	cmp	r4, r1
 8017bfe:	f040 8127 	bne.w	8017e50 <forward_cast+0x1818>
 8017c02:	f995 1000 	ldrsb.w	r1, [r5]
 8017c06:	e55c      	b.n	80176c2 <forward_cast+0x108a>
 8017c08:	42bc      	cmp	r4, r7
 8017c0a:	f002 8101 	beq.w	8019e10 <forward_cast+0x37d8>
 8017c0e:	429c      	cmp	r4, r3
 8017c10:	f040 812c 	bne.w	8017e6c <forward_cast+0x1834>
 8017c14:	edd5 7a00 	vldr	s15, [r5]
 8017c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c20:	ee17 0a90 	vmov	r0, s15
 8017c24:	e585      	b.n	8017732 <forward_cast+0x10fa>
 8017c26:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017c2a:	428c      	cmp	r4, r1
 8017c2c:	f001 8661 	beq.w	80198f2 <forward_cast+0x32ba>
 8017c30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017c34:	428c      	cmp	r4, r1
 8017c36:	f040 8159 	bne.w	8017eec <forward_cast+0x18b4>
 8017c3a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8017c3e:	f7ff ba75 	b.w	801712c <forward_cast+0xaf4>
 8017c42:	455c      	cmp	r4, fp
 8017c44:	d0b8      	beq.n	8017bb8 <forward_cast+0x1580>
 8017c46:	429c      	cmp	r4, r3
 8017c48:	f040 80ff 	bne.w	8017e4a <forward_cast+0x1812>
 8017c4c:	edd5 7a00 	vldr	s15, [r5]
 8017c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c58:	edcd 7a01 	vstr	s15, [sp, #4]
 8017c5c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017c60:	f7ff b8de 	b.w	8016e20 <forward_cast+0x7e8>
 8017c64:	499d      	ldr	r1, [pc, #628]	; (8017edc <forward_cast+0x18a4>)
 8017c66:	428c      	cmp	r4, r1
 8017c68:	f001 840d 	beq.w	8019486 <forward_cast+0x2e4e>
 8017c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017c70:	428c      	cmp	r4, r1
 8017c72:	f040 8104 	bne.w	8017e7e <forward_cast+0x1846>
 8017c76:	edd5 7a00 	vldr	s15, [r5]
 8017c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c7e:	f7ff b897 	b.w	8016db0 <forward_cast+0x778>
 8017c82:	4996      	ldr	r1, [pc, #600]	; (8017edc <forward_cast+0x18a4>)
 8017c84:	428c      	cmp	r4, r1
 8017c86:	f001 8414 	beq.w	80194b2 <forward_cast+0x2e7a>
 8017c8a:	429c      	cmp	r4, r3
 8017c8c:	f040 8110 	bne.w	8017eb0 <forward_cast+0x1878>
 8017c90:	edd5 7a00 	vldr	s15, [r5]
 8017c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c9c:	ee17 0a90 	vmov	r0, s15
 8017ca0:	f7ff b82c 	b.w	8016cfc <forward_cast+0x6c4>
 8017ca4:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8017ca8:	428c      	cmp	r4, r1
 8017caa:	f001 875c 	beq.w	8019b66 <forward_cast+0x352e>
 8017cae:	4544      	cmp	r4, r8
 8017cb0:	f040 80e9 	bne.w	8017e86 <forward_cast+0x184e>
 8017cb4:	edd5 7a00 	vldr	s15, [r5]
 8017cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017cc0:	ee17 0a90 	vmov	r0, s15
 8017cc4:	f7fe bfda 	b.w	8016c7c <forward_cast+0x644>
 8017cc8:	429c      	cmp	r4, r3
 8017cca:	f002 8372 	beq.w	801a3b2 <forward_cast+0x3d7a>
 8017cce:	42bc      	cmp	r4, r7
 8017cd0:	f040 80fd 	bne.w	8017ece <forward_cast+0x1896>
 8017cd4:	edd5 7a00 	vldr	s15, [r5]
 8017cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ce4:	f7ff b970 	b.w	8016fc8 <forward_cast+0x990>
 8017ce8:	42bc      	cmp	r4, r7
 8017cea:	f002 830b 	beq.w	801a304 <forward_cast+0x3ccc>
 8017cee:	455c      	cmp	r4, fp
 8017cf0:	f040 80e7 	bne.w	8017ec2 <forward_cast+0x188a>
 8017cf4:	edd5 7a00 	vldr	s15, [r5]
 8017cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d00:	ee17 0a90 	vmov	r0, s15
 8017d04:	f7ff bb17 	b.w	8017336 <forward_cast+0xcfe>
 8017d08:	42bc      	cmp	r4, r7
 8017d0a:	f43f ae24 	beq.w	8017956 <forward_cast+0x131e>
 8017d0e:	455c      	cmp	r4, fp
 8017d10:	f040 80da 	bne.w	8017ec8 <forward_cast+0x1890>
 8017d14:	edd5 7a00 	vldr	s15, [r5]
 8017d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d20:	ee17 1a90 	vmov	r1, s15
 8017d24:	b289      	uxth	r1, r1
 8017d26:	f7fe be85 	b.w	8016a34 <forward_cast+0x3fc>
 8017d2a:	429c      	cmp	r4, r3
 8017d2c:	f001 8514 	beq.w	8019758 <forward_cast+0x3120>
 8017d30:	4294      	cmp	r4, r2
 8017d32:	f040 80c3 	bne.w	8017ebc <forward_cast+0x1884>
 8017d36:	edd5 7a00 	vldr	s15, [r5]
 8017d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d42:	ee17 0a90 	vmov	r0, s15
 8017d46:	f7fe bd18 	b.w	801677a <forward_cast+0x142>
 8017d4a:	429c      	cmp	r4, r3
 8017d4c:	f001 86f9 	beq.w	8019b42 <forward_cast+0x350a>
 8017d50:	4294      	cmp	r4, r2
 8017d52:	f040 80b0 	bne.w	8017eb6 <forward_cast+0x187e>
 8017d56:	edd5 7a00 	vldr	s15, [r5]
 8017d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d62:	ee17 0a90 	vmov	r0, s15
 8017d66:	f7ff ba69 	b.w	801723c <forward_cast+0xc04>
 8017d6a:	42bc      	cmp	r4, r7
 8017d6c:	f43f ade5 	beq.w	801793a <forward_cast+0x1302>
 8017d70:	455c      	cmp	r4, fp
 8017d72:	f040 8094 	bne.w	8017e9e <forward_cast+0x1866>
 8017d76:	edd5 7a00 	vldr	s15, [r5]
 8017d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d82:	ee17 1a90 	vmov	r1, s15
 8017d86:	b209      	sxth	r1, r1
 8017d88:	f7ff b958 	b.w	801703c <forward_cast+0xa04>
 8017d8c:	455c      	cmp	r4, fp
 8017d8e:	f002 8339 	beq.w	801a404 <forward_cast+0x3dcc>
 8017d92:	4951      	ldr	r1, [pc, #324]	; (8017ed8 <forward_cast+0x18a0>)
 8017d94:	428c      	cmp	r4, r1
 8017d96:	f040 80a3 	bne.w	8017ee0 <forward_cast+0x18a8>
 8017d9a:	edd5 7a00 	vldr	s15, [r5]
 8017d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017da6:	ee17 0a90 	vmov	r0, s15
 8017daa:	f7ff bb78 	b.w	801749e <forward_cast+0xe66>
 8017dae:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8017db2:	428c      	cmp	r4, r1
 8017db4:	f43f af25 	beq.w	8017c02 <forward_cast+0x15ca>
 8017db8:	429c      	cmp	r4, r3
 8017dba:	d149      	bne.n	8017e50 <forward_cast+0x1818>
 8017dbc:	edd5 7a00 	vldr	s15, [r5]
 8017dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017dc8:	edcd 7a01 	vstr	s15, [sp, #4]
 8017dcc:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8017dd0:	e477      	b.n	80176c2 <forward_cast+0x108a>
 8017dd2:	429c      	cmp	r4, r3
 8017dd4:	f001 86d9 	beq.w	8019b8a <forward_cast+0x3552>
 8017dd8:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
 8017ddc:	428c      	cmp	r4, r1
 8017dde:	f040 8082 	bne.w	8017ee6 <forward_cast+0x18ae>
 8017de2:	edd5 7a00 	vldr	s15, [r5]
 8017de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017dee:	ee17 0a90 	vmov	r0, s15
 8017df2:	f7fe be69 	b.w	8016ac8 <forward_cast+0x490>
 8017df6:	429c      	cmp	r4, r3
 8017df8:	f001 84ed 	beq.w	80197d6 <forward_cast+0x319e>
 8017dfc:	4294      	cmp	r4, r2
 8017dfe:	d13a      	bne.n	8017e76 <forward_cast+0x183e>
 8017e00:	edd5 7a00 	vldr	s15, [r5]
 8017e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017e10:	f7ff b899 	b.w	8016f46 <forward_cast+0x90e>
 8017e14:	455c      	cmp	r4, fp
 8017e16:	f001 8463 	beq.w	80196e0 <forward_cast+0x30a8>
 8017e1a:	4544      	cmp	r4, r8
 8017e1c:	d139      	bne.n	8017e92 <forward_cast+0x185a>
 8017e1e:	edd5 7a00 	vldr	s15, [r5]
 8017e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e2a:	ee17 0a90 	vmov	r0, s15
 8017e2e:	f7ff bac0 	b.w	80173b2 <forward_cast+0xd7a>
 8017e32:	9b00      	ldr	r3, [sp, #0]
 8017e34:	f8c6 8000 	str.w	r8, [r6]
 8017e38:	45aa      	cmp	sl, r5
 8017e3a:	441e      	add	r6, r3
 8017e3c:	f63f aa48 	bhi.w	80172d0 <forward_cast+0xc98>
 8017e40:	f7fe bc62 	b.w	8016708 <forward_cast+0xd0>
 8017e44:	2100      	movs	r1, #0
 8017e46:	f7ff b82a 	b.w	8016e9e <forward_cast+0x866>
 8017e4a:	2100      	movs	r1, #0
 8017e4c:	f7fe bfe8 	b.w	8016e20 <forward_cast+0x7e8>
 8017e50:	2100      	movs	r1, #0
 8017e52:	e436      	b.n	80176c2 <forward_cast+0x108a>
 8017e54:	2000      	movs	r0, #0
 8017e56:	f7fe bd32 	b.w	80168be <forward_cast+0x286>
 8017e5a:	2100      	movs	r1, #0
 8017e5c:	f7fe be80 	b.w	8016b60 <forward_cast+0x528>
 8017e60:	2000      	movs	r0, #0
 8017e62:	f7fe beb9 	b.w	8016bd8 <forward_cast+0x5a0>
 8017e66:	2000      	movs	r0, #0
 8017e68:	f7ff bbc0 	b.w	80175ec <forward_cast+0xfb4>
 8017e6c:	2000      	movs	r0, #0
 8017e6e:	e460      	b.n	8017732 <forward_cast+0x10fa>
 8017e70:	2000      	movs	r0, #0
 8017e72:	f7ff bbf1 	b.w	8017658 <forward_cast+0x1020>
 8017e76:	eef0 7a48 	vmov.f32	s15, s16
 8017e7a:	f7ff b864 	b.w	8016f46 <forward_cast+0x90e>
 8017e7e:	eef0 7a48 	vmov.f32	s15, s16
 8017e82:	f7fe bf95 	b.w	8016db0 <forward_cast+0x778>
 8017e86:	2000      	movs	r0, #0
 8017e88:	f7fe bef8 	b.w	8016c7c <forward_cast+0x644>
 8017e8c:	2100      	movs	r1, #0
 8017e8e:	f7ff bacb 	b.w	8017428 <forward_cast+0xdf0>
 8017e92:	2000      	movs	r0, #0
 8017e94:	f7ff ba8d 	b.w	80173b2 <forward_cast+0xd7a>
 8017e98:	2000      	movs	r0, #0
 8017e9a:	f7ff bb4d 	b.w	8017538 <forward_cast+0xf00>
 8017e9e:	2100      	movs	r1, #0
 8017ea0:	f7ff b8cc 	b.w	801703c <forward_cast+0xa04>
 8017ea4:	2100      	movs	r1, #0
 8017ea6:	f7ff b905 	b.w	80170b4 <forward_cast+0xa7c>
 8017eaa:	2000      	movs	r0, #0
 8017eac:	f7fe bd6a 	b.w	8016984 <forward_cast+0x34c>
 8017eb0:	2000      	movs	r0, #0
 8017eb2:	f7fe bf23 	b.w	8016cfc <forward_cast+0x6c4>
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	f7ff b9c0 	b.w	801723c <forward_cast+0xc04>
 8017ebc:	2000      	movs	r0, #0
 8017ebe:	f7fe bc5c 	b.w	801677a <forward_cast+0x142>
 8017ec2:	2000      	movs	r0, #0
 8017ec4:	f7ff ba37 	b.w	8017336 <forward_cast+0xcfe>
 8017ec8:	2100      	movs	r1, #0
 8017eca:	f7fe bdb3 	b.w	8016a34 <forward_cast+0x3fc>
 8017ece:	eef0 7a48 	vmov.f32	s15, s16
 8017ed2:	f7ff b879 	b.w	8016fc8 <forward_cast+0x990>
 8017ed6:	bf00      	nop
 8017ed8:	00841040 	.word	0x00841040
 8017edc:	00840840 	.word	0x00840840
 8017ee0:	2000      	movs	r0, #0
 8017ee2:	f7ff badc 	b.w	801749e <forward_cast+0xe66>
 8017ee6:	2000      	movs	r0, #0
 8017ee8:	f7fe bdee 	b.w	8016ac8 <forward_cast+0x490>
 8017eec:	2100      	movs	r1, #0
 8017eee:	f7ff b91d 	b.w	801712c <forward_cast+0xaf4>
 8017ef2:	2100      	movs	r1, #0
 8017ef4:	f7fe bc92 	b.w	801681c <forward_cast+0x1e4>
 8017ef8:	4555      	cmp	r5, sl
 8017efa:	f4be ac05 	bcs.w	8016708 <forward_cast+0xd0>
 8017efe:	4f9c      	ldr	r7, [pc, #624]	; (8018170 <forward_cast+0x1b38>)
 8017f00:	4b9c      	ldr	r3, [pc, #624]	; (8018174 <forward_cast+0x1b3c>)
 8017f02:	4a9d      	ldr	r2, [pc, #628]	; (8018178 <forward_cast+0x1b40>)
 8017f04:	e014      	b.n	8017f30 <forward_cast+0x18f8>
 8017f06:	499d      	ldr	r1, [pc, #628]	; (801817c <forward_cast+0x1b44>)
 8017f08:	428c      	cmp	r4, r1
 8017f0a:	f001 8764 	beq.w	8019dd6 <forward_cast+0x379e>
 8017f0e:	dd21      	ble.n	8017f54 <forward_cast+0x191c>
 8017f10:	429c      	cmp	r4, r3
 8017f12:	f001 8707 	beq.w	8019d24 <forward_cast+0x36ec>
 8017f16:	4294      	cmp	r4, r2
 8017f18:	d137      	bne.n	8017f8a <forward_cast+0x1952>
 8017f1a:	7828      	ldrb	r0, [r5, #0]
 8017f1c:	3800      	subs	r0, #0
 8017f1e:	bf18      	it	ne
 8017f20:	2001      	movne	r0, #1
 8017f22:	9900      	ldr	r1, [sp, #0]
 8017f24:	6030      	str	r0, [r6, #0]
 8017f26:	444d      	add	r5, r9
 8017f28:	45aa      	cmp	sl, r5
 8017f2a:	440e      	add	r6, r1
 8017f2c:	f67e abec 	bls.w	8016708 <forward_cast+0xd0>
 8017f30:	4544      	cmp	r4, r8
 8017f32:	f001 8709 	beq.w	8019d48 <forward_cast+0x3710>
 8017f36:	dde6      	ble.n	8017f06 <forward_cast+0x18ce>
 8017f38:	4991      	ldr	r1, [pc, #580]	; (8018180 <forward_cast+0x1b48>)
 8017f3a:	428c      	cmp	r4, r1
 8017f3c:	f001 86e1 	beq.w	8019d02 <forward_cast+0x36ca>
 8017f40:	dd13      	ble.n	8017f6a <forward_cast+0x1932>
 8017f42:	42bc      	cmp	r4, r7
 8017f44:	d121      	bne.n	8017f8a <forward_cast+0x1952>
 8017f46:	edd5 7a00 	vldr	s15, [r5]
 8017f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f4e:	ee17 0a90 	vmov	r0, s15
 8017f52:	e7e6      	b.n	8017f22 <forward_cast+0x18ea>
 8017f54:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8017f58:	428c      	cmp	r4, r1
 8017f5a:	f001 86e0 	beq.w	8019d1e <forward_cast+0x36e6>
 8017f5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8017f62:	428c      	cmp	r4, r1
 8017f64:	d111      	bne.n	8017f8a <forward_cast+0x1952>
 8017f66:	8828      	ldrh	r0, [r5, #0]
 8017f68:	e7db      	b.n	8017f22 <forward_cast+0x18ea>
 8017f6a:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8017f6e:	428c      	cmp	r4, r1
 8017f70:	f001 86e6 	beq.w	8019d40 <forward_cast+0x3708>
 8017f74:	455c      	cmp	r4, fp
 8017f76:	d108      	bne.n	8017f8a <forward_cast+0x1952>
 8017f78:	edd5 7a00 	vldr	s15, [r5]
 8017f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f84:	ee17 0a90 	vmov	r0, s15
 8017f88:	e7cb      	b.n	8017f22 <forward_cast+0x18ea>
 8017f8a:	2000      	movs	r0, #0
 8017f8c:	e7c9      	b.n	8017f22 <forward_cast+0x18ea>
 8017f8e:	4555      	cmp	r5, sl
 8017f90:	f4be abba 	bcs.w	8016708 <forward_cast+0xd0>
 8017f94:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8018170 <forward_cast+0x1b38>
 8017f98:	4f7a      	ldr	r7, [pc, #488]	; (8018184 <forward_cast+0x1b4c>)
 8017f9a:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8018190 <forward_cast+0x1b58>
 8017f9e:	4b77      	ldr	r3, [pc, #476]	; (801817c <forward_cast+0x1b44>)
 8017fa0:	4a74      	ldr	r2, [pc, #464]	; (8018174 <forward_cast+0x1b3c>)
 8017fa2:	e017      	b.n	8017fd4 <forward_cast+0x199c>
 8017fa4:	429c      	cmp	r4, r3
 8017fa6:	f001 86db 	beq.w	8019d60 <forward_cast+0x3728>
 8017faa:	dd26      	ble.n	8017ffa <forward_cast+0x19c2>
 8017fac:	4294      	cmp	r4, r2
 8017fae:	f001 8700 	beq.w	8019db2 <forward_cast+0x377a>
 8017fb2:	4971      	ldr	r1, [pc, #452]	; (8018178 <forward_cast+0x1b40>)
 8017fb4:	428c      	cmp	r4, r1
 8017fb6:	d139      	bne.n	801802c <forward_cast+0x19f4>
 8017fb8:	7828      	ldrb	r0, [r5, #0]
 8017fba:	3800      	subs	r0, #0
 8017fbc:	bf18      	it	ne
 8017fbe:	2001      	movne	r0, #1
 8017fc0:	f380 0010 	usat	r0, #16, r0
 8017fc4:	9900      	ldr	r1, [sp, #0]
 8017fc6:	444d      	add	r5, r9
 8017fc8:	b280      	uxth	r0, r0
 8017fca:	45aa      	cmp	sl, r5
 8017fcc:	6030      	str	r0, [r6, #0]
 8017fce:	440e      	add	r6, r1
 8017fd0:	f67e ab9a 	bls.w	8016708 <forward_cast+0xd0>
 8017fd4:	496c      	ldr	r1, [pc, #432]	; (8018188 <forward_cast+0x1b50>)
 8017fd6:	428c      	cmp	r4, r1
 8017fd8:	f001 86be 	beq.w	8019d58 <forward_cast+0x3720>
 8017fdc:	dde2      	ble.n	8017fa4 <forward_cast+0x196c>
 8017fde:	4968      	ldr	r1, [pc, #416]	; (8018180 <forward_cast+0x1b48>)
 8017fe0:	428c      	cmp	r4, r1
 8017fe2:	f001 86d5 	beq.w	8019d90 <forward_cast+0x3758>
 8017fe6:	dd13      	ble.n	8018010 <forward_cast+0x19d8>
 8017fe8:	4544      	cmp	r4, r8
 8017fea:	d11f      	bne.n	801802c <forward_cast+0x19f4>
 8017fec:	edd5 7a00 	vldr	s15, [r5]
 8017ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017ff4:	ee17 0a90 	vmov	r0, s15
 8017ff8:	e7e2      	b.n	8017fc0 <forward_cast+0x1988>
 8017ffa:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017ffe:	428c      	cmp	r4, r1
 8018000:	f001 86d4 	beq.w	8019dac <forward_cast+0x3774>
 8018004:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018008:	428c      	cmp	r4, r1
 801800a:	d10f      	bne.n	801802c <forward_cast+0x19f4>
 801800c:	8828      	ldrh	r0, [r5, #0]
 801800e:	e7d7      	b.n	8017fc0 <forward_cast+0x1988>
 8018010:	42bc      	cmp	r4, r7
 8018012:	f001 86dc 	beq.w	8019dce <forward_cast+0x3796>
 8018016:	455c      	cmp	r4, fp
 8018018:	d108      	bne.n	801802c <forward_cast+0x19f4>
 801801a:	edd5 7a00 	vldr	s15, [r5]
 801801e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018026:	ee17 0a90 	vmov	r0, s15
 801802a:	e7c9      	b.n	8017fc0 <forward_cast+0x1988>
 801802c:	2000      	movs	r0, #0
 801802e:	e7c7      	b.n	8017fc0 <forward_cast+0x1988>
 8018030:	4555      	cmp	r5, sl
 8018032:	f4be ab69 	bcs.w	8016708 <forward_cast+0xd0>
 8018036:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8018170 <forward_cast+0x1b38>
 801803a:	4b50      	ldr	r3, [pc, #320]	; (801817c <forward_cast+0x1b44>)
 801803c:	4a4d      	ldr	r2, [pc, #308]	; (8018174 <forward_cast+0x1b3c>)
 801803e:	2700      	movs	r7, #0
 8018040:	e016      	b.n	8018070 <forward_cast+0x1a38>
 8018042:	429c      	cmp	r4, r3
 8018044:	f001 8468 	beq.w	8019918 <forward_cast+0x32e0>
 8018048:	dd24      	ble.n	8018094 <forward_cast+0x1a5c>
 801804a:	4294      	cmp	r4, r2
 801804c:	f001 87cf 	beq.w	8019fee <forward_cast+0x39b6>
 8018050:	4949      	ldr	r1, [pc, #292]	; (8018178 <forward_cast+0x1b40>)
 8018052:	428c      	cmp	r4, r1
 8018054:	d13a      	bne.n	80180cc <forward_cast+0x1a94>
 8018056:	7828      	ldrb	r0, [r5, #0]
 8018058:	3800      	subs	r0, #0
 801805a:	bf18      	it	ne
 801805c:	2001      	movne	r0, #1
 801805e:	f300 0007 	ssat	r0, #8, r0
 8018062:	9900      	ldr	r1, [sp, #0]
 8018064:	55f0      	strb	r0, [r6, r7]
 8018066:	444d      	add	r5, r9
 8018068:	45aa      	cmp	sl, r5
 801806a:	440f      	add	r7, r1
 801806c:	f67e ab4c 	bls.w	8016708 <forward_cast+0xd0>
 8018070:	455c      	cmp	r4, fp
 8018072:	f001 8460 	beq.w	8019936 <forward_cast+0x32fe>
 8018076:	dde4      	ble.n	8018042 <forward_cast+0x1a0a>
 8018078:	4941      	ldr	r1, [pc, #260]	; (8018180 <forward_cast+0x1b48>)
 801807a:	428c      	cmp	r4, r1
 801807c:	f001 87a6 	beq.w	8019fcc <forward_cast+0x3994>
 8018080:	dd12      	ble.n	80180a8 <forward_cast+0x1a70>
 8018082:	4544      	cmp	r4, r8
 8018084:	d122      	bne.n	80180cc <forward_cast+0x1a94>
 8018086:	edd5 7a00 	vldr	s15, [r5]
 801808a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801808e:	ee17 0a90 	vmov	r0, s15
 8018092:	e7e4      	b.n	801805e <forward_cast+0x1a26>
 8018094:	493d      	ldr	r1, [pc, #244]	; (801818c <forward_cast+0x1b54>)
 8018096:	428c      	cmp	r4, r1
 8018098:	f001 87a6 	beq.w	8019fe8 <forward_cast+0x39b0>
 801809c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80180a0:	428c      	cmp	r4, r1
 80180a2:	d113      	bne.n	80180cc <forward_cast+0x1a94>
 80180a4:	8828      	ldrh	r0, [r5, #0]
 80180a6:	e7da      	b.n	801805e <forward_cast+0x1a26>
 80180a8:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80180ac:	428c      	cmp	r4, r1
 80180ae:	f001 87ac 	beq.w	801a00a <forward_cast+0x39d2>
 80180b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80180b6:	428c      	cmp	r4, r1
 80180b8:	d108      	bne.n	80180cc <forward_cast+0x1a94>
 80180ba:	edd5 7a00 	vldr	s15, [r5]
 80180be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80180c6:	ee17 0a90 	vmov	r0, s15
 80180ca:	e7c8      	b.n	801805e <forward_cast+0x1a26>
 80180cc:	2000      	movs	r0, #0
 80180ce:	e7c6      	b.n	801805e <forward_cast+0x1a26>
 80180d0:	4555      	cmp	r5, sl
 80180d2:	f4be ab19 	bcs.w	8016708 <forward_cast+0xd0>
 80180d6:	4a28      	ldr	r2, [pc, #160]	; (8018178 <forward_cast+0x1b40>)
 80180d8:	e014      	b.n	8018104 <forward_cast+0x1acc>
 80180da:	455c      	cmp	r4, fp
 80180dc:	f001 8465 	beq.w	80199aa <forward_cast+0x3372>
 80180e0:	dd22      	ble.n	8018128 <forward_cast+0x1af0>
 80180e2:	4924      	ldr	r1, [pc, #144]	; (8018174 <forward_cast+0x1b3c>)
 80180e4:	428c      	cmp	r4, r1
 80180e6:	f001 843f 	beq.w	8019968 <forward_cast+0x3330>
 80180ea:	4294      	cmp	r4, r2
 80180ec:	d136      	bne.n	801815c <forward_cast+0x1b24>
 80180ee:	7828      	ldrb	r0, [r5, #0]
 80180f0:	3800      	subs	r0, #0
 80180f2:	bf18      	it	ne
 80180f4:	2001      	movne	r0, #1
 80180f6:	9900      	ldr	r1, [sp, #0]
 80180f8:	6030      	str	r0, [r6, #0]
 80180fa:	444d      	add	r5, r9
 80180fc:	45aa      	cmp	sl, r5
 80180fe:	440e      	add	r6, r1
 8018100:	f67e ab02 	bls.w	8016708 <forward_cast+0xd0>
 8018104:	4544      	cmp	r4, r8
 8018106:	f001 844c 	beq.w	80199a2 <forward_cast+0x336a>
 801810a:	dde6      	ble.n	80180da <forward_cast+0x1aa2>
 801810c:	491c      	ldr	r1, [pc, #112]	; (8018180 <forward_cast+0x1b48>)
 801810e:	428c      	cmp	r4, r1
 8018110:	f001 8419 	beq.w	8019946 <forward_cast+0x330e>
 8018114:	dd12      	ble.n	801813c <forward_cast+0x1b04>
 8018116:	42bc      	cmp	r4, r7
 8018118:	d120      	bne.n	801815c <forward_cast+0x1b24>
 801811a:	edd5 7a00 	vldr	s15, [r5]
 801811e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018122:	ee17 0a90 	vmov	r0, s15
 8018126:	e7e6      	b.n	80180f6 <forward_cast+0x1abe>
 8018128:	4918      	ldr	r1, [pc, #96]	; (801818c <forward_cast+0x1b54>)
 801812a:	428c      	cmp	r4, r1
 801812c:	f001 8419 	beq.w	8019962 <forward_cast+0x332a>
 8018130:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018134:	428c      	cmp	r4, r1
 8018136:	d111      	bne.n	801815c <forward_cast+0x1b24>
 8018138:	8828      	ldrh	r0, [r5, #0]
 801813a:	e7dc      	b.n	80180f6 <forward_cast+0x1abe>
 801813c:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8018140:	428c      	cmp	r4, r1
 8018142:	f001 841f 	beq.w	8019984 <forward_cast+0x334c>
 8018146:	429c      	cmp	r4, r3
 8018148:	d108      	bne.n	801815c <forward_cast+0x1b24>
 801814a:	edd5 7a00 	vldr	s15, [r5]
 801814e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018156:	ee17 0a90 	vmov	r0, s15
 801815a:	e7cc      	b.n	80180f6 <forward_cast+0x1abe>
 801815c:	2000      	movs	r0, #0
 801815e:	e7ca      	b.n	80180f6 <forward_cast+0x1abe>
 8018160:	4555      	cmp	r5, sl
 8018162:	f4be aad1 	bcs.w	8016708 <forward_cast+0xd0>
 8018166:	4b0a      	ldr	r3, [pc, #40]	; (8018190 <forward_cast+0x1b58>)
 8018168:	4a02      	ldr	r2, [pc, #8]	; (8018174 <forward_cast+0x1b3c>)
 801816a:	f04f 0800 	mov.w	r8, #0
 801816e:	e027      	b.n	80181c0 <forward_cast+0x1b88>
 8018170:	01821040 	.word	0x01821040
 8018174:	00042040 	.word	0x00042040
 8018178:	00060440 	.word	0x00060440
 801817c:	00041040 	.word	0x00041040
 8018180:	00842040 	.word	0x00842040
 8018184:	00840840 	.word	0x00840840
 8018188:	00840440 	.word	0x00840440
 801818c:	00040440 	.word	0x00040440
 8018190:	00841040 	.word	0x00841040
 8018194:	42bc      	cmp	r4, r7
 8018196:	f001 8478 	beq.w	8019a8a <forward_cast+0x3452>
 801819a:	dd25      	ble.n	80181e8 <forward_cast+0x1bb0>
 801819c:	4294      	cmp	r4, r2
 801819e:	f001 8464 	beq.w	8019a6a <forward_cast+0x3432>
 80181a2:	49a9      	ldr	r1, [pc, #676]	; (8018448 <forward_cast+0x1e10>)
 80181a4:	428c      	cmp	r4, r1
 80181a6:	d13a      	bne.n	801821e <forward_cast+0x1be6>
 80181a8:	7829      	ldrb	r1, [r5, #0]
 80181aa:	3900      	subs	r1, #0
 80181ac:	bf18      	it	ne
 80181ae:	2101      	movne	r1, #1
 80181b0:	f806 1008 	strb.w	r1, [r6, r8]
 80181b4:	444d      	add	r5, r9
 80181b6:	9900      	ldr	r1, [sp, #0]
 80181b8:	45aa      	cmp	sl, r5
 80181ba:	4488      	add	r8, r1
 80181bc:	f67e aaa4 	bls.w	8016708 <forward_cast+0xd0>
 80181c0:	455c      	cmp	r4, fp
 80181c2:	d018      	beq.n	80181f6 <forward_cast+0x1bbe>
 80181c4:	dde6      	ble.n	8018194 <forward_cast+0x1b5c>
 80181c6:	49a1      	ldr	r1, [pc, #644]	; (801844c <forward_cast+0x1e14>)
 80181c8:	428c      	cmp	r4, r1
 80181ca:	f001 843e 	beq.w	8019a4a <forward_cast+0x3412>
 80181ce:	dd15      	ble.n	80181fc <forward_cast+0x1bc4>
 80181d0:	499f      	ldr	r1, [pc, #636]	; (8018450 <forward_cast+0x1e18>)
 80181d2:	428c      	cmp	r4, r1
 80181d4:	d123      	bne.n	801821e <forward_cast+0x1be6>
 80181d6:	edd5 7a00 	vldr	s15, [r5]
 80181da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80181de:	edcd 7a01 	vstr	s15, [sp, #4]
 80181e2:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80181e6:	e7e3      	b.n	80181b0 <forward_cast+0x1b78>
 80181e8:	499a      	ldr	r1, [pc, #616]	; (8018454 <forward_cast+0x1e1c>)
 80181ea:	428c      	cmp	r4, r1
 80181ec:	d003      	beq.n	80181f6 <forward_cast+0x1bbe>
 80181ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80181f2:	428c      	cmp	r4, r1
 80181f4:	d113      	bne.n	801821e <forward_cast+0x1be6>
 80181f6:	f995 1000 	ldrsb.w	r1, [r5]
 80181fa:	e7d9      	b.n	80181b0 <forward_cast+0x1b78>
 80181fc:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8018200:	428c      	cmp	r4, r1
 8018202:	d0f8      	beq.n	80181f6 <forward_cast+0x1bbe>
 8018204:	429c      	cmp	r4, r3
 8018206:	d10a      	bne.n	801821e <forward_cast+0x1be6>
 8018208:	edd5 7a00 	vldr	s15, [r5]
 801820c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018214:	edcd 7a01 	vstr	s15, [sp, #4]
 8018218:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801821c:	e7c8      	b.n	80181b0 <forward_cast+0x1b78>
 801821e:	2100      	movs	r1, #0
 8018220:	e7c6      	b.n	80181b0 <forward_cast+0x1b78>
 8018222:	4555      	cmp	r5, sl
 8018224:	f4be aa70 	bcs.w	8016708 <forward_cast+0xd0>
 8018228:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8018450 <forward_cast+0x1e18>
 801822c:	4f8a      	ldr	r7, [pc, #552]	; (8018458 <forward_cast+0x1e20>)
 801822e:	f8df b238 	ldr.w	fp, [pc, #568]	; 8018468 <forward_cast+0x1e30>
 8018232:	4b8a      	ldr	r3, [pc, #552]	; (801845c <forward_cast+0x1e24>)
 8018234:	4a8a      	ldr	r2, [pc, #552]	; (8018460 <forward_cast+0x1e28>)
 8018236:	e014      	b.n	8018262 <forward_cast+0x1c2a>
 8018238:	429c      	cmp	r4, r3
 801823a:	f001 83c0 	beq.w	80199be <forward_cast+0x3386>
 801823e:	dd26      	ble.n	801828e <forward_cast+0x1c56>
 8018240:	4294      	cmp	r4, r2
 8018242:	f001 83ea 	beq.w	8019a1a <forward_cast+0x33e2>
 8018246:	4980      	ldr	r1, [pc, #512]	; (8018448 <forward_cast+0x1e10>)
 8018248:	428c      	cmp	r4, r1
 801824a:	d13e      	bne.n	80182ca <forward_cast+0x1c92>
 801824c:	7829      	ldrb	r1, [r5, #0]
 801824e:	3900      	subs	r1, #0
 8018250:	bf18      	it	ne
 8018252:	2101      	movne	r1, #1
 8018254:	6031      	str	r1, [r6, #0]
 8018256:	444d      	add	r5, r9
 8018258:	9900      	ldr	r1, [sp, #0]
 801825a:	45aa      	cmp	sl, r5
 801825c:	440e      	add	r6, r1
 801825e:	f67e aa53 	bls.w	8016708 <forward_cast+0xd0>
 8018262:	4980      	ldr	r1, [pc, #512]	; (8018464 <forward_cast+0x1e2c>)
 8018264:	428c      	cmp	r4, r1
 8018266:	f001 8391 	beq.w	801998c <forward_cast+0x3354>
 801826a:	dde5      	ble.n	8018238 <forward_cast+0x1c00>
 801826c:	4977      	ldr	r1, [pc, #476]	; (801844c <forward_cast+0x1e14>)
 801826e:	428c      	cmp	r4, r1
 8018270:	f001 83c2 	beq.w	80199f8 <forward_cast+0x33c0>
 8018274:	dd18      	ble.n	80182a8 <forward_cast+0x1c70>
 8018276:	4544      	cmp	r4, r8
 8018278:	d127      	bne.n	80182ca <forward_cast+0x1c92>
 801827a:	edd5 7a00 	vldr	s15, [r5]
 801827e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018286:	bf14      	ite	ne
 8018288:	2101      	movne	r1, #1
 801828a:	2100      	moveq	r1, #0
 801828c:	e7e2      	b.n	8018254 <forward_cast+0x1c1c>
 801828e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018292:	428c      	cmp	r4, r1
 8018294:	d0da      	beq.n	801824c <forward_cast+0x1c14>
 8018296:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801829a:	428c      	cmp	r4, r1
 801829c:	d115      	bne.n	80182ca <forward_cast+0x1c92>
 801829e:	8829      	ldrh	r1, [r5, #0]
 80182a0:	3900      	subs	r1, #0
 80182a2:	bf18      	it	ne
 80182a4:	2101      	movne	r1, #1
 80182a6:	e7d5      	b.n	8018254 <forward_cast+0x1c1c>
 80182a8:	42bc      	cmp	r4, r7
 80182aa:	f001 83c7 	beq.w	8019a3c <forward_cast+0x3404>
 80182ae:	455c      	cmp	r4, fp
 80182b0:	d10b      	bne.n	80182ca <forward_cast+0x1c92>
 80182b2:	edd5 7a00 	vldr	s15, [r5]
 80182b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80182be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182c2:	bf14      	ite	ne
 80182c4:	2101      	movne	r1, #1
 80182c6:	2100      	moveq	r1, #0
 80182c8:	e7c4      	b.n	8018254 <forward_cast+0x1c1c>
 80182ca:	2100      	movs	r1, #0
 80182cc:	e7c2      	b.n	8018254 <forward_cast+0x1c1c>
 80182ce:	4555      	cmp	r5, sl
 80182d0:	f4be aa1a 	bcs.w	8016708 <forward_cast+0xd0>
 80182d4:	9f00      	ldr	r7, [sp, #0]
 80182d6:	4621      	mov	r1, r4
 80182d8:	4628      	mov	r0, r5
 80182da:	f7fe f937 	bl	801654c <_array_handle_get_as_float>
 80182de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80182e2:	ee17 3a90 	vmov	r3, s15
 80182e6:	f383 0308 	usat	r3, #8, r3
 80182ea:	444d      	add	r5, r9
 80182ec:	45aa      	cmp	sl, r5
 80182ee:	7033      	strb	r3, [r6, #0]
 80182f0:	443e      	add	r6, r7
 80182f2:	d8f0      	bhi.n	80182d6 <forward_cast+0x1c9e>
 80182f4:	f7fe ba08 	b.w	8016708 <forward_cast+0xd0>
 80182f8:	4555      	cmp	r5, sl
 80182fa:	f4be aa05 	bcs.w	8016708 <forward_cast+0xd0>
 80182fe:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8018450 <forward_cast+0x1e18>
 8018302:	4f55      	ldr	r7, [pc, #340]	; (8018458 <forward_cast+0x1e20>)
 8018304:	f8df b160 	ldr.w	fp, [pc, #352]	; 8018468 <forward_cast+0x1e30>
 8018308:	4b54      	ldr	r3, [pc, #336]	; (801845c <forward_cast+0x1e24>)
 801830a:	4a55      	ldr	r2, [pc, #340]	; (8018460 <forward_cast+0x1e28>)
 801830c:	e017      	b.n	801833e <forward_cast+0x1d06>
 801830e:	429c      	cmp	r4, r3
 8018310:	f001 8726 	beq.w	801a160 <forward_cast+0x3b28>
 8018314:	dd26      	ble.n	8018364 <forward_cast+0x1d2c>
 8018316:	4294      	cmp	r4, r2
 8018318:	f001 86f9 	beq.w	801a10e <forward_cast+0x3ad6>
 801831c:	494a      	ldr	r1, [pc, #296]	; (8018448 <forward_cast+0x1e10>)
 801831e:	428c      	cmp	r4, r1
 8018320:	d139      	bne.n	8018396 <forward_cast+0x1d5e>
 8018322:	7828      	ldrb	r0, [r5, #0]
 8018324:	3800      	subs	r0, #0
 8018326:	bf18      	it	ne
 8018328:	2001      	movne	r0, #1
 801832a:	f380 0008 	usat	r0, #8, r0
 801832e:	9900      	ldr	r1, [sp, #0]
 8018330:	444d      	add	r5, r9
 8018332:	b2c0      	uxtb	r0, r0
 8018334:	45aa      	cmp	sl, r5
 8018336:	6030      	str	r0, [r6, #0]
 8018338:	440e      	add	r6, r1
 801833a:	f67e a9e5 	bls.w	8016708 <forward_cast+0xd0>
 801833e:	4949      	ldr	r1, [pc, #292]	; (8018464 <forward_cast+0x1e2c>)
 8018340:	428c      	cmp	r4, r1
 8018342:	f001 8709 	beq.w	801a158 <forward_cast+0x3b20>
 8018346:	dde2      	ble.n	801830e <forward_cast+0x1cd6>
 8018348:	4940      	ldr	r1, [pc, #256]	; (801844c <forward_cast+0x1e14>)
 801834a:	428c      	cmp	r4, r1
 801834c:	f001 86ce 	beq.w	801a0ec <forward_cast+0x3ab4>
 8018350:	dd13      	ble.n	801837a <forward_cast+0x1d42>
 8018352:	4544      	cmp	r4, r8
 8018354:	d11f      	bne.n	8018396 <forward_cast+0x1d5e>
 8018356:	edd5 7a00 	vldr	s15, [r5]
 801835a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801835e:	ee17 0a90 	vmov	r0, s15
 8018362:	e7e2      	b.n	801832a <forward_cast+0x1cf2>
 8018364:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018368:	428c      	cmp	r4, r1
 801836a:	f001 86cd 	beq.w	801a108 <forward_cast+0x3ad0>
 801836e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018372:	428c      	cmp	r4, r1
 8018374:	d10f      	bne.n	8018396 <forward_cast+0x1d5e>
 8018376:	8828      	ldrh	r0, [r5, #0]
 8018378:	e7d7      	b.n	801832a <forward_cast+0x1cf2>
 801837a:	42bc      	cmp	r4, r7
 801837c:	f001 86e4 	beq.w	801a148 <forward_cast+0x3b10>
 8018380:	455c      	cmp	r4, fp
 8018382:	d108      	bne.n	8018396 <forward_cast+0x1d5e>
 8018384:	edd5 7a00 	vldr	s15, [r5]
 8018388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801838c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018390:	ee17 0a90 	vmov	r0, s15
 8018394:	e7c9      	b.n	801832a <forward_cast+0x1cf2>
 8018396:	2000      	movs	r0, #0
 8018398:	e7c7      	b.n	801832a <forward_cast+0x1cf2>
 801839a:	4555      	cmp	r5, sl
 801839c:	f4be a9b4 	bcs.w	8016708 <forward_cast+0xd0>
 80183a0:	4a31      	ldr	r2, [pc, #196]	; (8018468 <forward_cast+0x1e30>)
 80183a2:	f04f 0800 	mov.w	r8, #0
 80183a6:	e019      	b.n	80183dc <forward_cast+0x1da4>
 80183a8:	429c      	cmp	r4, r3
 80183aa:	f001 8636 	beq.w	801a01a <forward_cast+0x39e2>
 80183ae:	dd28      	ble.n	8018402 <forward_cast+0x1dca>
 80183b0:	492b      	ldr	r1, [pc, #172]	; (8018460 <forward_cast+0x1e28>)
 80183b2:	428c      	cmp	r4, r1
 80183b4:	f001 86ef 	beq.w	801a196 <forward_cast+0x3b5e>
 80183b8:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80183bc:	428c      	cmp	r4, r1
 80183be:	d138      	bne.n	8018432 <forward_cast+0x1dfa>
 80183c0:	7828      	ldrb	r0, [r5, #0]
 80183c2:	3800      	subs	r0, #0
 80183c4:	bf18      	it	ne
 80183c6:	2001      	movne	r0, #1
 80183c8:	f380 0008 	usat	r0, #8, r0
 80183cc:	9900      	ldr	r1, [sp, #0]
 80183ce:	f806 0008 	strb.w	r0, [r6, r8]
 80183d2:	444d      	add	r5, r9
 80183d4:	45aa      	cmp	sl, r5
 80183d6:	4488      	add	r8, r1
 80183d8:	f67e a996 	bls.w	8016708 <forward_cast+0xd0>
 80183dc:	455c      	cmp	r4, fp
 80183de:	f001 86b7 	beq.w	801a150 <forward_cast+0x3b18>
 80183e2:	dde1      	ble.n	80183a8 <forward_cast+0x1d70>
 80183e4:	4919      	ldr	r1, [pc, #100]	; (801844c <forward_cast+0x1e14>)
 80183e6:	428c      	cmp	r4, r1
 80183e8:	f001 86c4 	beq.w	801a174 <forward_cast+0x3b3c>
 80183ec:	dd11      	ble.n	8018412 <forward_cast+0x1dda>
 80183ee:	4918      	ldr	r1, [pc, #96]	; (8018450 <forward_cast+0x1e18>)
 80183f0:	428c      	cmp	r4, r1
 80183f2:	d11e      	bne.n	8018432 <forward_cast+0x1dfa>
 80183f4:	edd5 7a00 	vldr	s15, [r5]
 80183f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80183fc:	ee17 0a90 	vmov	r0, s15
 8018400:	e7e2      	b.n	80183c8 <forward_cast+0x1d90>
 8018402:	42bc      	cmp	r4, r7
 8018404:	f001 86c4 	beq.w	801a190 <forward_cast+0x3b58>
 8018408:	4918      	ldr	r1, [pc, #96]	; (801846c <forward_cast+0x1e34>)
 801840a:	428c      	cmp	r4, r1
 801840c:	d111      	bne.n	8018432 <forward_cast+0x1dfa>
 801840e:	8828      	ldrh	r0, [r5, #0]
 8018410:	e7da      	b.n	80183c8 <forward_cast+0x1d90>
 8018412:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8018416:	428c      	cmp	r4, r1
 8018418:	f001 86cb 	beq.w	801a1b2 <forward_cast+0x3b7a>
 801841c:	4294      	cmp	r4, r2
 801841e:	d108      	bne.n	8018432 <forward_cast+0x1dfa>
 8018420:	edd5 7a00 	vldr	s15, [r5]
 8018424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801842c:	ee17 0a90 	vmov	r0, s15
 8018430:	e7ca      	b.n	80183c8 <forward_cast+0x1d90>
 8018432:	2000      	movs	r0, #0
 8018434:	e7c8      	b.n	80183c8 <forward_cast+0x1d90>
 8018436:	4555      	cmp	r5, sl
 8018438:	f4be a966 	bcs.w	8016708 <forward_cast+0xd0>
 801843c:	f8df 800c 	ldr.w	r8, [pc, #12]	; 801844c <forward_cast+0x1e14>
 8018440:	4b09      	ldr	r3, [pc, #36]	; (8018468 <forward_cast+0x1e30>)
 8018442:	4a06      	ldr	r2, [pc, #24]	; (801845c <forward_cast+0x1e24>)
 8018444:	2700      	movs	r7, #0
 8018446:	e02c      	b.n	80184a2 <forward_cast+0x1e6a>
 8018448:	00060440 	.word	0x00060440
 801844c:	00842040 	.word	0x00842040
 8018450:	01821040 	.word	0x01821040
 8018454:	00040440 	.word	0x00040440
 8018458:	00840840 	.word	0x00840840
 801845c:	00041040 	.word	0x00041040
 8018460:	00042040 	.word	0x00042040
 8018464:	00840440 	.word	0x00840440
 8018468:	00841040 	.word	0x00841040
 801846c:	00040840 	.word	0x00040840
 8018470:	4294      	cmp	r4, r2
 8018472:	f001 86ec 	beq.w	801a24e <forward_cast+0x3c16>
 8018476:	dd27      	ble.n	80184c8 <forward_cast+0x1e90>
 8018478:	499d      	ldr	r1, [pc, #628]	; (80186f0 <forward_cast+0x20b8>)
 801847a:	428c      	cmp	r4, r1
 801847c:	f001 86ae 	beq.w	801a1dc <forward_cast+0x3ba4>
 8018480:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8018484:	428c      	cmp	r4, r1
 8018486:	d136      	bne.n	80184f6 <forward_cast+0x1ebe>
 8018488:	7828      	ldrb	r0, [r5, #0]
 801848a:	3800      	subs	r0, #0
 801848c:	bf18      	it	ne
 801848e:	2001      	movne	r0, #1
 8018490:	f300 000f 	ssat	r0, #16, r0
 8018494:	9900      	ldr	r1, [sp, #0]
 8018496:	55f0      	strb	r0, [r6, r7]
 8018498:	444d      	add	r5, r9
 801849a:	45aa      	cmp	sl, r5
 801849c:	440f      	add	r7, r1
 801849e:	f67e a933 	bls.w	8016708 <forward_cast+0xd0>
 80184a2:	4994      	ldr	r1, [pc, #592]	; (80186f4 <forward_cast+0x20bc>)
 80184a4:	428c      	cmp	r4, r1
 80184a6:	f001 86ce 	beq.w	801a246 <forward_cast+0x3c0e>
 80184aa:	dde1      	ble.n	8018470 <forward_cast+0x1e38>
 80184ac:	4544      	cmp	r4, r8
 80184ae:	f001 8684 	beq.w	801a1ba <forward_cast+0x3b82>
 80184b2:	dd11      	ble.n	80184d8 <forward_cast+0x1ea0>
 80184b4:	4990      	ldr	r1, [pc, #576]	; (80186f8 <forward_cast+0x20c0>)
 80184b6:	428c      	cmp	r4, r1
 80184b8:	d11d      	bne.n	80184f6 <forward_cast+0x1ebe>
 80184ba:	edd5 7a00 	vldr	s15, [r5]
 80184be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80184c2:	ee17 0a90 	vmov	r0, s15
 80184c6:	e7e3      	b.n	8018490 <forward_cast+0x1e58>
 80184c8:	455c      	cmp	r4, fp
 80184ca:	f001 8684 	beq.w	801a1d6 <forward_cast+0x3b9e>
 80184ce:	498b      	ldr	r1, [pc, #556]	; (80186fc <forward_cast+0x20c4>)
 80184d0:	428c      	cmp	r4, r1
 80184d2:	d110      	bne.n	80184f6 <forward_cast+0x1ebe>
 80184d4:	8828      	ldrh	r0, [r5, #0]
 80184d6:	e7db      	b.n	8018490 <forward_cast+0x1e58>
 80184d8:	4989      	ldr	r1, [pc, #548]	; (8018700 <forward_cast+0x20c8>)
 80184da:	428c      	cmp	r4, r1
 80184dc:	f001 868c 	beq.w	801a1f8 <forward_cast+0x3bc0>
 80184e0:	429c      	cmp	r4, r3
 80184e2:	d108      	bne.n	80184f6 <forward_cast+0x1ebe>
 80184e4:	edd5 7a00 	vldr	s15, [r5]
 80184e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80184f0:	ee17 0a90 	vmov	r0, s15
 80184f4:	e7cc      	b.n	8018490 <forward_cast+0x1e58>
 80184f6:	2000      	movs	r0, #0
 80184f8:	e7ca      	b.n	8018490 <forward_cast+0x1e58>
 80184fa:	4555      	cmp	r5, sl
 80184fc:	f4be a904 	bcs.w	8016708 <forward_cast+0xd0>
 8018500:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80186f8 <forward_cast+0x20c0>
 8018504:	4f7e      	ldr	r7, [pc, #504]	; (8018700 <forward_cast+0x20c8>)
 8018506:	f8df b208 	ldr.w	fp, [pc, #520]	; 8018710 <forward_cast+0x20d8>
 801850a:	4b7e      	ldr	r3, [pc, #504]	; (8018704 <forward_cast+0x20cc>)
 801850c:	4a78      	ldr	r2, [pc, #480]	; (80186f0 <forward_cast+0x20b8>)
 801850e:	e017      	b.n	8018540 <forward_cast+0x1f08>
 8018510:	429c      	cmp	r4, r3
 8018512:	f001 86de 	beq.w	801a2d2 <forward_cast+0x3c9a>
 8018516:	dd26      	ble.n	8018566 <forward_cast+0x1f2e>
 8018518:	4294      	cmp	r4, r2
 801851a:	f001 8682 	beq.w	801a222 <forward_cast+0x3bea>
 801851e:	497a      	ldr	r1, [pc, #488]	; (8018708 <forward_cast+0x20d0>)
 8018520:	428c      	cmp	r4, r1
 8018522:	d139      	bne.n	8018598 <forward_cast+0x1f60>
 8018524:	7828      	ldrb	r0, [r5, #0]
 8018526:	3800      	subs	r0, #0
 8018528:	bf18      	it	ne
 801852a:	2001      	movne	r0, #1
 801852c:	f300 000f 	ssat	r0, #16, r0
 8018530:	9900      	ldr	r1, [sp, #0]
 8018532:	444d      	add	r5, r9
 8018534:	b200      	sxth	r0, r0
 8018536:	45aa      	cmp	sl, r5
 8018538:	6030      	str	r0, [r6, #0]
 801853a:	440e      	add	r6, r1
 801853c:	f67e a8e4 	bls.w	8016708 <forward_cast+0xd0>
 8018540:	496c      	ldr	r1, [pc, #432]	; (80186f4 <forward_cast+0x20bc>)
 8018542:	428c      	cmp	r4, r1
 8018544:	f001 8565 	beq.w	801a012 <forward_cast+0x39da>
 8018548:	dde2      	ble.n	8018510 <forward_cast+0x1ed8>
 801854a:	4970      	ldr	r1, [pc, #448]	; (801870c <forward_cast+0x20d4>)
 801854c:	428c      	cmp	r4, r1
 801854e:	f001 8657 	beq.w	801a200 <forward_cast+0x3bc8>
 8018552:	dd13      	ble.n	801857c <forward_cast+0x1f44>
 8018554:	4544      	cmp	r4, r8
 8018556:	d11f      	bne.n	8018598 <forward_cast+0x1f60>
 8018558:	edd5 7a00 	vldr	s15, [r5]
 801855c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018560:	ee17 0a90 	vmov	r0, s15
 8018564:	e7e2      	b.n	801852c <forward_cast+0x1ef4>
 8018566:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801856a:	428c      	cmp	r4, r1
 801856c:	f001 8656 	beq.w	801a21c <forward_cast+0x3be4>
 8018570:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018574:	428c      	cmp	r4, r1
 8018576:	d10f      	bne.n	8018598 <forward_cast+0x1f60>
 8018578:	8828      	ldrh	r0, [r5, #0]
 801857a:	e7d7      	b.n	801852c <forward_cast+0x1ef4>
 801857c:	42bc      	cmp	r4, r7
 801857e:	f001 865e 	beq.w	801a23e <forward_cast+0x3c06>
 8018582:	455c      	cmp	r4, fp
 8018584:	d108      	bne.n	8018598 <forward_cast+0x1f60>
 8018586:	edd5 7a00 	vldr	s15, [r5]
 801858a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801858e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018592:	ee17 0a90 	vmov	r0, s15
 8018596:	e7c9      	b.n	801852c <forward_cast+0x1ef4>
 8018598:	2000      	movs	r0, #0
 801859a:	e7c7      	b.n	801852c <forward_cast+0x1ef4>
 801859c:	4555      	cmp	r5, sl
 801859e:	f4be a8b3 	bcs.w	8016708 <forward_cast+0xd0>
 80185a2:	4b57      	ldr	r3, [pc, #348]	; (8018700 <forward_cast+0x20c8>)
 80185a4:	4a5a      	ldr	r2, [pc, #360]	; (8018710 <forward_cast+0x20d8>)
 80185a6:	f04f 0800 	mov.w	r8, #0
 80185aa:	e019      	b.n	80185e0 <forward_cast+0x1fa8>
 80185ac:	42bc      	cmp	r4, r7
 80185ae:	f001 8542 	beq.w	801a036 <forward_cast+0x39fe>
 80185b2:	dd29      	ble.n	8018608 <forward_cast+0x1fd0>
 80185b4:	494e      	ldr	r1, [pc, #312]	; (80186f0 <forward_cast+0x20b8>)
 80185b6:	428c      	cmp	r4, r1
 80185b8:	f001 8558 	beq.w	801a06c <forward_cast+0x3a34>
 80185bc:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80185c0:	428c      	cmp	r4, r1
 80185c2:	d137      	bne.n	8018634 <forward_cast+0x1ffc>
 80185c4:	7828      	ldrb	r0, [r5, #0]
 80185c6:	3800      	subs	r0, #0
 80185c8:	bf18      	it	ne
 80185ca:	2001      	movne	r0, #1
 80185cc:	f380 0010 	usat	r0, #16, r0
 80185d0:	9900      	ldr	r1, [sp, #0]
 80185d2:	f806 0008 	strb.w	r0, [r6, r8]
 80185d6:	444d      	add	r5, r9
 80185d8:	45aa      	cmp	sl, r5
 80185da:	4488      	add	r8, r1
 80185dc:	f67e a894 	bls.w	8016708 <forward_cast+0xd0>
 80185e0:	4944      	ldr	r1, [pc, #272]	; (80186f4 <forward_cast+0x20bc>)
 80185e2:	428c      	cmp	r4, r1
 80185e4:	f001 8523 	beq.w	801a02e <forward_cast+0x39f6>
 80185e8:	dde0      	ble.n	80185ac <forward_cast+0x1f74>
 80185ea:	4948      	ldr	r1, [pc, #288]	; (801870c <forward_cast+0x20d4>)
 80185ec:	428c      	cmp	r4, r1
 80185ee:	f001 852c 	beq.w	801a04a <forward_cast+0x3a12>
 80185f2:	dd11      	ble.n	8018618 <forward_cast+0x1fe0>
 80185f4:	4940      	ldr	r1, [pc, #256]	; (80186f8 <forward_cast+0x20c0>)
 80185f6:	428c      	cmp	r4, r1
 80185f8:	d11c      	bne.n	8018634 <forward_cast+0x1ffc>
 80185fa:	edd5 7a00 	vldr	s15, [r5]
 80185fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018602:	ee17 0a90 	vmov	r0, s15
 8018606:	e7e1      	b.n	80185cc <forward_cast+0x1f94>
 8018608:	455c      	cmp	r4, fp
 801860a:	f001 852c 	beq.w	801a066 <forward_cast+0x3a2e>
 801860e:	493b      	ldr	r1, [pc, #236]	; (80186fc <forward_cast+0x20c4>)
 8018610:	428c      	cmp	r4, r1
 8018612:	d10f      	bne.n	8018634 <forward_cast+0x1ffc>
 8018614:	8828      	ldrh	r0, [r5, #0]
 8018616:	e7d9      	b.n	80185cc <forward_cast+0x1f94>
 8018618:	429c      	cmp	r4, r3
 801861a:	f001 8535 	beq.w	801a088 <forward_cast+0x3a50>
 801861e:	4294      	cmp	r4, r2
 8018620:	d108      	bne.n	8018634 <forward_cast+0x1ffc>
 8018622:	edd5 7a00 	vldr	s15, [r5]
 8018626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801862a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801862e:	ee17 0a90 	vmov	r0, s15
 8018632:	e7cb      	b.n	80185cc <forward_cast+0x1f94>
 8018634:	2000      	movs	r0, #0
 8018636:	e7c9      	b.n	80185cc <forward_cast+0x1f94>
 8018638:	4555      	cmp	r5, sl
 801863a:	f4be a865 	bcs.w	8016708 <forward_cast+0xd0>
 801863e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80186f8 <forward_cast+0x20c0>
 8018642:	4f2f      	ldr	r7, [pc, #188]	; (8018700 <forward_cast+0x20c8>)
 8018644:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8018710 <forward_cast+0x20d8>
 8018648:	4b2e      	ldr	r3, [pc, #184]	; (8018704 <forward_cast+0x20cc>)
 801864a:	4a29      	ldr	r2, [pc, #164]	; (80186f0 <forward_cast+0x20b8>)
 801864c:	e017      	b.n	801867e <forward_cast+0x2046>
 801864e:	429c      	cmp	r4, r3
 8018650:	f001 8126 	beq.w	80198a0 <forward_cast+0x3268>
 8018654:	dd26      	ble.n	80186a4 <forward_cast+0x206c>
 8018656:	4294      	cmp	r4, r2
 8018658:	f001 8625 	beq.w	801a2a6 <forward_cast+0x3c6e>
 801865c:	492a      	ldr	r1, [pc, #168]	; (8018708 <forward_cast+0x20d0>)
 801865e:	428c      	cmp	r4, r1
 8018660:	d139      	bne.n	80186d6 <forward_cast+0x209e>
 8018662:	7828      	ldrb	r0, [r5, #0]
 8018664:	3800      	subs	r0, #0
 8018666:	bf18      	it	ne
 8018668:	2001      	movne	r0, #1
 801866a:	f380 0010 	usat	r0, #16, r0
 801866e:	9900      	ldr	r1, [sp, #0]
 8018670:	444d      	add	r5, r9
 8018672:	b280      	uxth	r0, r0
 8018674:	45aa      	cmp	sl, r5
 8018676:	6030      	str	r0, [r6, #0]
 8018678:	440e      	add	r6, r1
 801867a:	f67e a845 	bls.w	8016708 <forward_cast+0xd0>
 801867e:	491d      	ldr	r1, [pc, #116]	; (80186f4 <forward_cast+0x20bc>)
 8018680:	428c      	cmp	r4, r1
 8018682:	f001 8622 	beq.w	801a2ca <forward_cast+0x3c92>
 8018686:	dde2      	ble.n	801864e <forward_cast+0x2016>
 8018688:	4920      	ldr	r1, [pc, #128]	; (801870c <forward_cast+0x20d4>)
 801868a:	428c      	cmp	r4, r1
 801868c:	f001 85fa 	beq.w	801a284 <forward_cast+0x3c4c>
 8018690:	dd13      	ble.n	80186ba <forward_cast+0x2082>
 8018692:	4544      	cmp	r4, r8
 8018694:	d11f      	bne.n	80186d6 <forward_cast+0x209e>
 8018696:	edd5 7a00 	vldr	s15, [r5]
 801869a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801869e:	ee17 0a90 	vmov	r0, s15
 80186a2:	e7e2      	b.n	801866a <forward_cast+0x2032>
 80186a4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80186a8:	428c      	cmp	r4, r1
 80186aa:	f001 85f9 	beq.w	801a2a0 <forward_cast+0x3c68>
 80186ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80186b2:	428c      	cmp	r4, r1
 80186b4:	d10f      	bne.n	80186d6 <forward_cast+0x209e>
 80186b6:	8828      	ldrh	r0, [r5, #0]
 80186b8:	e7d7      	b.n	801866a <forward_cast+0x2032>
 80186ba:	42bc      	cmp	r4, r7
 80186bc:	f001 8601 	beq.w	801a2c2 <forward_cast+0x3c8a>
 80186c0:	455c      	cmp	r4, fp
 80186c2:	d108      	bne.n	80186d6 <forward_cast+0x209e>
 80186c4:	edd5 7a00 	vldr	s15, [r5]
 80186c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80186d0:	ee17 0a90 	vmov	r0, s15
 80186d4:	e7c9      	b.n	801866a <forward_cast+0x2032>
 80186d6:	2000      	movs	r0, #0
 80186d8:	e7c7      	b.n	801866a <forward_cast+0x2032>
 80186da:	4555      	cmp	r5, sl
 80186dc:	f4be a814 	bcs.w	8016708 <forward_cast+0xd0>
 80186e0:	2300      	movs	r3, #0
 80186e2:	4619      	mov	r1, r3
 80186e4:	4a0a      	ldr	r2, [pc, #40]	; (8018710 <forward_cast+0x20d8>)
 80186e6:	464b      	mov	r3, r9
 80186e8:	46b9      	mov	r9, r7
 80186ea:	4637      	mov	r7, r6
 80186ec:	460e      	mov	r6, r1
 80186ee:	e02a      	b.n	8018746 <forward_cast+0x210e>
 80186f0:	00042040 	.word	0x00042040
 80186f4:	00840440 	.word	0x00840440
 80186f8:	01821040 	.word	0x01821040
 80186fc:	00040840 	.word	0x00040840
 8018700:	00840840 	.word	0x00840840
 8018704:	00041040 	.word	0x00041040
 8018708:	00060440 	.word	0x00060440
 801870c:	00842040 	.word	0x00842040
 8018710:	00841040 	.word	0x00841040
 8018714:	4544      	cmp	r4, r8
 8018716:	f001 80e2 	beq.w	80198de <forward_cast+0x32a6>
 801871a:	dd27      	ble.n	801876c <forward_cast+0x2134>
 801871c:	49a5      	ldr	r1, [pc, #660]	; (80189b4 <forward_cast+0x237c>)
 801871e:	428c      	cmp	r4, r1
 8018720:	f001 8606 	beq.w	801a330 <forward_cast+0x3cf8>
 8018724:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8018728:	428c      	cmp	r4, r1
 801872a:	d137      	bne.n	801879c <forward_cast+0x2164>
 801872c:	7828      	ldrb	r0, [r5, #0]
 801872e:	3800      	subs	r0, #0
 8018730:	bf18      	it	ne
 8018732:	2001      	movne	r0, #1
 8018734:	f300 0007 	ssat	r0, #8, r0
 8018738:	9900      	ldr	r1, [sp, #0]
 801873a:	55b8      	strb	r0, [r7, r6]
 801873c:	441d      	add	r5, r3
 801873e:	45aa      	cmp	sl, r5
 8018740:	440e      	add	r6, r1
 8018742:	f67d afe1 	bls.w	8016708 <forward_cast+0xd0>
 8018746:	454c      	cmp	r4, r9
 8018748:	f001 80c5 	beq.w	80198d6 <forward_cast+0x329e>
 801874c:	dde2      	ble.n	8018714 <forward_cast+0x20dc>
 801874e:	499a      	ldr	r1, [pc, #616]	; (80189b8 <forward_cast+0x2380>)
 8018750:	428c      	cmp	r4, r1
 8018752:	f001 85db 	beq.w	801a30c <forward_cast+0x3cd4>
 8018756:	dd11      	ble.n	801877c <forward_cast+0x2144>
 8018758:	4998      	ldr	r1, [pc, #608]	; (80189bc <forward_cast+0x2384>)
 801875a:	428c      	cmp	r4, r1
 801875c:	d11e      	bne.n	801879c <forward_cast+0x2164>
 801875e:	edd5 7a00 	vldr	s15, [r5]
 8018762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018766:	ee17 0a90 	vmov	r0, s15
 801876a:	e7e3      	b.n	8018734 <forward_cast+0x20fc>
 801876c:	455c      	cmp	r4, fp
 801876e:	f001 85dc 	beq.w	801a32a <forward_cast+0x3cf2>
 8018772:	4993      	ldr	r1, [pc, #588]	; (80189c0 <forward_cast+0x2388>)
 8018774:	428c      	cmp	r4, r1
 8018776:	d111      	bne.n	801879c <forward_cast+0x2164>
 8018778:	8828      	ldrh	r0, [r5, #0]
 801877a:	e7db      	b.n	8018734 <forward_cast+0x20fc>
 801877c:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8018780:	428c      	cmp	r4, r1
 8018782:	f001 85e4 	beq.w	801a34e <forward_cast+0x3d16>
 8018786:	4294      	cmp	r4, r2
 8018788:	d108      	bne.n	801879c <forward_cast+0x2164>
 801878a:	edd5 7a00 	vldr	s15, [r5]
 801878e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018796:	ee17 0a90 	vmov	r0, s15
 801879a:	e7cb      	b.n	8018734 <forward_cast+0x20fc>
 801879c:	2000      	movs	r0, #0
 801879e:	e7c9      	b.n	8018734 <forward_cast+0x20fc>
 80187a0:	4555      	cmp	r5, sl
 80187a2:	bf38      	it	cc
 80187a4:	461f      	movcc	r7, r3
 80187a6:	f4bd afaf 	bcs.w	8016708 <forward_cast+0xd0>
 80187aa:	4621      	mov	r1, r4
 80187ac:	4628      	mov	r0, r5
 80187ae:	f7fd fecd 	bl	801654c <_array_handle_get_as_float>
 80187b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80187b6:	ee17 3a90 	vmov	r3, s15
 80187ba:	f303 0307 	ssat	r3, #8, r3
 80187be:	444d      	add	r5, r9
 80187c0:	b25b      	sxtb	r3, r3
 80187c2:	45aa      	cmp	sl, r5
 80187c4:	6033      	str	r3, [r6, #0]
 80187c6:	443e      	add	r6, r7
 80187c8:	d8ef      	bhi.n	80187aa <forward_cast+0x2172>
 80187ca:	f7fd bf9d 	b.w	8016708 <forward_cast+0xd0>
 80187ce:	4555      	cmp	r5, sl
 80187d0:	f4bd af9a 	bcs.w	8016708 <forward_cast+0xd0>
 80187d4:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80189bc <forward_cast+0x2384>
 80187d8:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80189d8 <forward_cast+0x23a0>
 80187dc:	4b79      	ldr	r3, [pc, #484]	; (80189c4 <forward_cast+0x238c>)
 80187de:	4a7a      	ldr	r2, [pc, #488]	; (80189c8 <forward_cast+0x2390>)
 80187e0:	2700      	movs	r7, #0
 80187e2:	e016      	b.n	8018812 <forward_cast+0x21da>
 80187e4:	4294      	cmp	r4, r2
 80187e6:	f000 87fe 	beq.w	80197e6 <forward_cast+0x31ae>
 80187ea:	dd26      	ble.n	801883a <forward_cast+0x2202>
 80187ec:	4971      	ldr	r1, [pc, #452]	; (80189b4 <forward_cast+0x237c>)
 80187ee:	428c      	cmp	r4, r1
 80187f0:	f001 8046 	beq.w	8019880 <forward_cast+0x3248>
 80187f4:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80187f8:	428c      	cmp	r4, r1
 80187fa:	d137      	bne.n	801886c <forward_cast+0x2234>
 80187fc:	7829      	ldrb	r1, [r5, #0]
 80187fe:	3900      	subs	r1, #0
 8018800:	bf18      	it	ne
 8018802:	2101      	movne	r1, #1
 8018804:	55f1      	strb	r1, [r6, r7]
 8018806:	444d      	add	r5, r9
 8018808:	9900      	ldr	r1, [sp, #0]
 801880a:	45aa      	cmp	sl, r5
 801880c:	440f      	add	r7, r1
 801880e:	f67d af7b 	bls.w	8016708 <forward_cast+0xd0>
 8018812:	496e      	ldr	r1, [pc, #440]	; (80189cc <forward_cast+0x2394>)
 8018814:	428c      	cmp	r4, r1
 8018816:	d018      	beq.n	801884a <forward_cast+0x2212>
 8018818:	dde4      	ble.n	80187e4 <forward_cast+0x21ac>
 801881a:	4967      	ldr	r1, [pc, #412]	; (80189b8 <forward_cast+0x2380>)
 801881c:	428c      	cmp	r4, r1
 801881e:	f000 87ee 	beq.w	80197fe <forward_cast+0x31c6>
 8018822:	dd14      	ble.n	801884e <forward_cast+0x2216>
 8018824:	4544      	cmp	r4, r8
 8018826:	d121      	bne.n	801886c <forward_cast+0x2234>
 8018828:	edd5 7a00 	vldr	s15, [r5]
 801882c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018830:	edcd 7a01 	vstr	s15, [sp, #4]
 8018834:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018838:	e7e4      	b.n	8018804 <forward_cast+0x21cc>
 801883a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801883e:	428c      	cmp	r4, r1
 8018840:	d003      	beq.n	801884a <forward_cast+0x2212>
 8018842:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018846:	428c      	cmp	r4, r1
 8018848:	d110      	bne.n	801886c <forward_cast+0x2234>
 801884a:	7829      	ldrb	r1, [r5, #0]
 801884c:	e7da      	b.n	8018804 <forward_cast+0x21cc>
 801884e:	455c      	cmp	r4, fp
 8018850:	d0fb      	beq.n	801884a <forward_cast+0x2212>
 8018852:	429c      	cmp	r4, r3
 8018854:	d10a      	bne.n	801886c <forward_cast+0x2234>
 8018856:	edd5 7a00 	vldr	s15, [r5]
 801885a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801885e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018862:	edcd 7a01 	vstr	s15, [sp, #4]
 8018866:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801886a:	e7cb      	b.n	8018804 <forward_cast+0x21cc>
 801886c:	2100      	movs	r1, #0
 801886e:	e7c9      	b.n	8018804 <forward_cast+0x21cc>
 8018870:	4555      	cmp	r5, sl
 8018872:	f4bd af49 	bcs.w	8016708 <forward_cast+0xd0>
 8018876:	4f51      	ldr	r7, [pc, #324]	; (80189bc <forward_cast+0x2384>)
 8018878:	4b4e      	ldr	r3, [pc, #312]	; (80189b4 <forward_cast+0x237c>)
 801887a:	4a55      	ldr	r2, [pc, #340]	; (80189d0 <forward_cast+0x2398>)
 801887c:	e013      	b.n	80188a6 <forward_cast+0x226e>
 801887e:	455c      	cmp	r4, fp
 8018880:	f000 87d1 	beq.w	8019826 <forward_cast+0x31ee>
 8018884:	dd21      	ble.n	80188ca <forward_cast+0x2292>
 8018886:	429c      	cmp	r4, r3
 8018888:	f000 87e8 	beq.w	801985c <forward_cast+0x3224>
 801888c:	4294      	cmp	r4, r2
 801888e:	d138      	bne.n	8018902 <forward_cast+0x22ca>
 8018890:	7828      	ldrb	r0, [r5, #0]
 8018892:	3800      	subs	r0, #0
 8018894:	bf18      	it	ne
 8018896:	2001      	movne	r0, #1
 8018898:	9900      	ldr	r1, [sp, #0]
 801889a:	6030      	str	r0, [r6, #0]
 801889c:	444d      	add	r5, r9
 801889e:	45aa      	cmp	sl, r5
 80188a0:	440e      	add	r6, r1
 80188a2:	f67d af31 	bls.w	8016708 <forward_cast+0xd0>
 80188a6:	4544      	cmp	r4, r8
 80188a8:	f000 87b9 	beq.w	801981e <forward_cast+0x31e6>
 80188ac:	dde7      	ble.n	801887e <forward_cast+0x2246>
 80188ae:	4942      	ldr	r1, [pc, #264]	; (80189b8 <forward_cast+0x2380>)
 80188b0:	428c      	cmp	r4, r1
 80188b2:	f000 87c2 	beq.w	801983a <forward_cast+0x3202>
 80188b6:	dd12      	ble.n	80188de <forward_cast+0x22a6>
 80188b8:	42bc      	cmp	r4, r7
 80188ba:	d122      	bne.n	8018902 <forward_cast+0x22ca>
 80188bc:	edd5 7a00 	vldr	s15, [r5]
 80188c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80188c4:	ee17 0a90 	vmov	r0, s15
 80188c8:	e7e6      	b.n	8018898 <forward_cast+0x2260>
 80188ca:	4942      	ldr	r1, [pc, #264]	; (80189d4 <forward_cast+0x239c>)
 80188cc:	428c      	cmp	r4, r1
 80188ce:	f000 87c2 	beq.w	8019856 <forward_cast+0x321e>
 80188d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80188d6:	428c      	cmp	r4, r1
 80188d8:	d113      	bne.n	8018902 <forward_cast+0x22ca>
 80188da:	8828      	ldrh	r0, [r5, #0]
 80188dc:	e7dc      	b.n	8018898 <forward_cast+0x2260>
 80188de:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80188e2:	428c      	cmp	r4, r1
 80188e4:	f000 87c8 	beq.w	8019878 <forward_cast+0x3240>
 80188e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80188ec:	428c      	cmp	r4, r1
 80188ee:	d108      	bne.n	8018902 <forward_cast+0x22ca>
 80188f0:	edd5 7a00 	vldr	s15, [r5]
 80188f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80188f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80188fc:	ee17 0a90 	vmov	r0, s15
 8018900:	e7ca      	b.n	8018898 <forward_cast+0x2260>
 8018902:	2000      	movs	r0, #0
 8018904:	e7c8      	b.n	8018898 <forward_cast+0x2260>
 8018906:	4555      	cmp	r5, sl
 8018908:	f4bd aefe 	bcs.w	8016708 <forward_cast+0xd0>
 801890c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80189bc <forward_cast+0x2384>
 8018910:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80189d8 <forward_cast+0x23a0>
 8018914:	4b2b      	ldr	r3, [pc, #172]	; (80189c4 <forward_cast+0x238c>)
 8018916:	4a2c      	ldr	r2, [pc, #176]	; (80189c8 <forward_cast+0x2390>)
 8018918:	2700      	movs	r7, #0
 801891a:	e016      	b.n	801894a <forward_cast+0x2312>
 801891c:	4294      	cmp	r4, r2
 801891e:	f000 8636 	beq.w	801958e <forward_cast+0x2f56>
 8018922:	dd26      	ble.n	8018972 <forward_cast+0x233a>
 8018924:	4923      	ldr	r1, [pc, #140]	; (80189b4 <forward_cast+0x237c>)
 8018926:	428c      	cmp	r4, r1
 8018928:	f001 8525 	beq.w	801a376 <forward_cast+0x3d3e>
 801892c:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8018930:	428c      	cmp	r4, r1
 8018932:	d137      	bne.n	80189a4 <forward_cast+0x236c>
 8018934:	7829      	ldrb	r1, [r5, #0]
 8018936:	3900      	subs	r1, #0
 8018938:	bf18      	it	ne
 801893a:	2101      	movne	r1, #1
 801893c:	55f1      	strb	r1, [r6, r7]
 801893e:	444d      	add	r5, r9
 8018940:	9900      	ldr	r1, [sp, #0]
 8018942:	45aa      	cmp	sl, r5
 8018944:	440f      	add	r7, r1
 8018946:	f67d aedf 	bls.w	8016708 <forward_cast+0xd0>
 801894a:	4920      	ldr	r1, [pc, #128]	; (80189cc <forward_cast+0x2394>)
 801894c:	428c      	cmp	r4, r1
 801894e:	d018      	beq.n	8018982 <forward_cast+0x234a>
 8018950:	dde4      	ble.n	801891c <forward_cast+0x22e4>
 8018952:	4919      	ldr	r1, [pc, #100]	; (80189b8 <forward_cast+0x2380>)
 8018954:	428c      	cmp	r4, r1
 8018956:	f001 84fe 	beq.w	801a356 <forward_cast+0x3d1e>
 801895a:	dd14      	ble.n	8018986 <forward_cast+0x234e>
 801895c:	4544      	cmp	r4, r8
 801895e:	d121      	bne.n	80189a4 <forward_cast+0x236c>
 8018960:	edd5 7a00 	vldr	s15, [r5]
 8018964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018968:	edcd 7a01 	vstr	s15, [sp, #4]
 801896c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018970:	e7e4      	b.n	801893c <forward_cast+0x2304>
 8018972:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018976:	428c      	cmp	r4, r1
 8018978:	d003      	beq.n	8018982 <forward_cast+0x234a>
 801897a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801897e:	428c      	cmp	r4, r1
 8018980:	d110      	bne.n	80189a4 <forward_cast+0x236c>
 8018982:	7829      	ldrb	r1, [r5, #0]
 8018984:	e7da      	b.n	801893c <forward_cast+0x2304>
 8018986:	455c      	cmp	r4, fp
 8018988:	d0fb      	beq.n	8018982 <forward_cast+0x234a>
 801898a:	429c      	cmp	r4, r3
 801898c:	d10a      	bne.n	80189a4 <forward_cast+0x236c>
 801898e:	edd5 7a00 	vldr	s15, [r5]
 8018992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801899a:	edcd 7a01 	vstr	s15, [sp, #4]
 801899e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80189a2:	e7cb      	b.n	801893c <forward_cast+0x2304>
 80189a4:	2100      	movs	r1, #0
 80189a6:	e7c9      	b.n	801893c <forward_cast+0x2304>
 80189a8:	4555      	cmp	r5, sl
 80189aa:	f4bd aead 	bcs.w	8016708 <forward_cast+0xd0>
 80189ae:	4b01      	ldr	r3, [pc, #4]	; (80189b4 <forward_cast+0x237c>)
 80189b0:	4a07      	ldr	r2, [pc, #28]	; (80189d0 <forward_cast+0x2398>)
 80189b2:	e027      	b.n	8018a04 <forward_cast+0x23cc>
 80189b4:	00042040 	.word	0x00042040
 80189b8:	00842040 	.word	0x00842040
 80189bc:	01821040 	.word	0x01821040
 80189c0:	00040840 	.word	0x00040840
 80189c4:	00841040 	.word	0x00841040
 80189c8:	00041040 	.word	0x00041040
 80189cc:	00840440 	.word	0x00840440
 80189d0:	00060440 	.word	0x00060440
 80189d4:	00040440 	.word	0x00040440
 80189d8:	00840840 	.word	0x00840840
 80189dc:	455c      	cmp	r4, fp
 80189de:	f000 8675 	beq.w	80196cc <forward_cast+0x3094>
 80189e2:	dd22      	ble.n	8018a2a <forward_cast+0x23f2>
 80189e4:	429c      	cmp	r4, r3
 80189e6:	f001 8522 	beq.w	801a42e <forward_cast+0x3df6>
 80189ea:	4294      	cmp	r4, r2
 80189ec:	d137      	bne.n	8018a5e <forward_cast+0x2426>
 80189ee:	7828      	ldrb	r0, [r5, #0]
 80189f0:	3800      	subs	r0, #0
 80189f2:	bf18      	it	ne
 80189f4:	2001      	movne	r0, #1
 80189f6:	9900      	ldr	r1, [sp, #0]
 80189f8:	6030      	str	r0, [r6, #0]
 80189fa:	444d      	add	r5, r9
 80189fc:	45aa      	cmp	sl, r5
 80189fe:	440e      	add	r6, r1
 8018a00:	f67d ae82 	bls.w	8016708 <forward_cast+0xd0>
 8018a04:	4544      	cmp	r4, r8
 8018a06:	f000 85be 	beq.w	8019586 <forward_cast+0x2f4e>
 8018a0a:	dde7      	ble.n	80189dc <forward_cast+0x23a4>
 8018a0c:	499a      	ldr	r1, [pc, #616]	; (8018c78 <forward_cast+0x2640>)
 8018a0e:	428c      	cmp	r4, r1
 8018a10:	f001 84fc 	beq.w	801a40c <forward_cast+0x3dd4>
 8018a14:	dd13      	ble.n	8018a3e <forward_cast+0x2406>
 8018a16:	4999      	ldr	r1, [pc, #612]	; (8018c7c <forward_cast+0x2644>)
 8018a18:	428c      	cmp	r4, r1
 8018a1a:	d120      	bne.n	8018a5e <forward_cast+0x2426>
 8018a1c:	edd5 7a00 	vldr	s15, [r5]
 8018a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a24:	ee17 0a90 	vmov	r0, s15
 8018a28:	e7e5      	b.n	80189f6 <forward_cast+0x23be>
 8018a2a:	4995      	ldr	r1, [pc, #596]	; (8018c80 <forward_cast+0x2648>)
 8018a2c:	428c      	cmp	r4, r1
 8018a2e:	f001 84fb 	beq.w	801a428 <forward_cast+0x3df0>
 8018a32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018a36:	428c      	cmp	r4, r1
 8018a38:	d111      	bne.n	8018a5e <forward_cast+0x2426>
 8018a3a:	8828      	ldrh	r0, [r5, #0]
 8018a3c:	e7db      	b.n	80189f6 <forward_cast+0x23be>
 8018a3e:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8018a42:	428c      	cmp	r4, r1
 8018a44:	f001 8501 	beq.w	801a44a <forward_cast+0x3e12>
 8018a48:	42bc      	cmp	r4, r7
 8018a4a:	d108      	bne.n	8018a5e <forward_cast+0x2426>
 8018a4c:	edd5 7a00 	vldr	s15, [r5]
 8018a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a58:	ee17 0a90 	vmov	r0, s15
 8018a5c:	e7cb      	b.n	80189f6 <forward_cast+0x23be>
 8018a5e:	2000      	movs	r0, #0
 8018a60:	e7c9      	b.n	80189f6 <forward_cast+0x23be>
 8018a62:	4555      	cmp	r5, sl
 8018a64:	f4bd ae50 	bcs.w	8016708 <forward_cast+0xd0>
 8018a68:	4b86      	ldr	r3, [pc, #536]	; (8018c84 <forward_cast+0x264c>)
 8018a6a:	4a87      	ldr	r2, [pc, #540]	; (8018c88 <forward_cast+0x2650>)
 8018a6c:	e013      	b.n	8018a96 <forward_cast+0x245e>
 8018a6e:	42bc      	cmp	r4, r7
 8018a70:	f000 859d 	beq.w	80195ae <forward_cast+0x2f76>
 8018a74:	dd22      	ble.n	8018abc <forward_cast+0x2484>
 8018a76:	429c      	cmp	r4, r3
 8018a78:	f001 84fc 	beq.w	801a474 <forward_cast+0x3e3c>
 8018a7c:	4294      	cmp	r4, r2
 8018a7e:	d137      	bne.n	8018af0 <forward_cast+0x24b8>
 8018a80:	7828      	ldrb	r0, [r5, #0]
 8018a82:	3800      	subs	r0, #0
 8018a84:	bf18      	it	ne
 8018a86:	2001      	movne	r0, #1
 8018a88:	9900      	ldr	r1, [sp, #0]
 8018a8a:	6030      	str	r0, [r6, #0]
 8018a8c:	444d      	add	r5, r9
 8018a8e:	45aa      	cmp	sl, r5
 8018a90:	440e      	add	r6, r1
 8018a92:	f67d ae39 	bls.w	8016708 <forward_cast+0xd0>
 8018a96:	4544      	cmp	r4, r8
 8018a98:	f000 8585 	beq.w	80195a6 <forward_cast+0x2f6e>
 8018a9c:	dde7      	ble.n	8018a6e <forward_cast+0x2436>
 8018a9e:	4976      	ldr	r1, [pc, #472]	; (8018c78 <forward_cast+0x2640>)
 8018aa0:	428c      	cmp	r4, r1
 8018aa2:	f001 84d6 	beq.w	801a452 <forward_cast+0x3e1a>
 8018aa6:	dd13      	ble.n	8018ad0 <forward_cast+0x2498>
 8018aa8:	4974      	ldr	r1, [pc, #464]	; (8018c7c <forward_cast+0x2644>)
 8018aaa:	428c      	cmp	r4, r1
 8018aac:	d120      	bne.n	8018af0 <forward_cast+0x24b8>
 8018aae:	edd5 7a00 	vldr	s15, [r5]
 8018ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ab6:	ee17 0a90 	vmov	r0, s15
 8018aba:	e7e5      	b.n	8018a88 <forward_cast+0x2450>
 8018abc:	4970      	ldr	r1, [pc, #448]	; (8018c80 <forward_cast+0x2648>)
 8018abe:	428c      	cmp	r4, r1
 8018ac0:	f001 84d5 	beq.w	801a46e <forward_cast+0x3e36>
 8018ac4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018ac8:	428c      	cmp	r4, r1
 8018aca:	d111      	bne.n	8018af0 <forward_cast+0x24b8>
 8018acc:	8828      	ldrh	r0, [r5, #0]
 8018ace:	e7db      	b.n	8018a88 <forward_cast+0x2450>
 8018ad0:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8018ad4:	428c      	cmp	r4, r1
 8018ad6:	f001 84db 	beq.w	801a490 <forward_cast+0x3e58>
 8018ada:	455c      	cmp	r4, fp
 8018adc:	d108      	bne.n	8018af0 <forward_cast+0x24b8>
 8018ade:	edd5 7a00 	vldr	s15, [r5]
 8018ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018aea:	ee17 0a90 	vmov	r0, s15
 8018aee:	e7cb      	b.n	8018a88 <forward_cast+0x2450>
 8018af0:	2000      	movs	r0, #0
 8018af2:	e7c9      	b.n	8018a88 <forward_cast+0x2450>
 8018af4:	4555      	cmp	r5, sl
 8018af6:	f4bd ae07 	bcs.w	8016708 <forward_cast+0xd0>
 8018afa:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8018c7c <forward_cast+0x2644>
 8018afe:	4b61      	ldr	r3, [pc, #388]	; (8018c84 <forward_cast+0x264c>)
 8018b00:	4a61      	ldr	r2, [pc, #388]	; (8018c88 <forward_cast+0x2650>)
 8018b02:	e017      	b.n	8018b34 <forward_cast+0x24fc>
 8018b04:	4961      	ldr	r1, [pc, #388]	; (8018c8c <forward_cast+0x2654>)
 8018b06:	428c      	cmp	r4, r1
 8018b08:	f000 850d 	beq.w	8019526 <forward_cast+0x2eee>
 8018b0c:	dd24      	ble.n	8018b58 <forward_cast+0x2520>
 8018b0e:	429c      	cmp	r4, r3
 8018b10:	f000 84f7 	beq.w	8019502 <forward_cast+0x2eca>
 8018b14:	4294      	cmp	r4, r2
 8018b16:	d13a      	bne.n	8018b8e <forward_cast+0x2556>
 8018b18:	7828      	ldrb	r0, [r5, #0]
 8018b1a:	3800      	subs	r0, #0
 8018b1c:	bf18      	it	ne
 8018b1e:	2001      	movne	r0, #1
 8018b20:	f300 0007 	ssat	r0, #8, r0
 8018b24:	9900      	ldr	r1, [sp, #0]
 8018b26:	444d      	add	r5, r9
 8018b28:	b240      	sxtb	r0, r0
 8018b2a:	45aa      	cmp	sl, r5
 8018b2c:	6030      	str	r0, [r6, #0]
 8018b2e:	440e      	add	r6, r1
 8018b30:	f67d adea 	bls.w	8016708 <forward_cast+0xd0>
 8018b34:	42bc      	cmp	r4, r7
 8018b36:	f000 84c0 	beq.w	80194ba <forward_cast+0x2e82>
 8018b3a:	dde3      	ble.n	8018b04 <forward_cast+0x24cc>
 8018b3c:	494e      	ldr	r1, [pc, #312]	; (8018c78 <forward_cast+0x2640>)
 8018b3e:	428c      	cmp	r4, r1
 8018b40:	f000 84ce 	beq.w	80194e0 <forward_cast+0x2ea8>
 8018b44:	dd13      	ble.n	8018b6e <forward_cast+0x2536>
 8018b46:	4544      	cmp	r4, r8
 8018b48:	d121      	bne.n	8018b8e <forward_cast+0x2556>
 8018b4a:	edd5 7a00 	vldr	s15, [r5]
 8018b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018b52:	ee17 0a90 	vmov	r0, s15
 8018b56:	e7e3      	b.n	8018b20 <forward_cast+0x24e8>
 8018b58:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8018b5c:	428c      	cmp	r4, r1
 8018b5e:	f000 84cd 	beq.w	80194fc <forward_cast+0x2ec4>
 8018b62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018b66:	428c      	cmp	r4, r1
 8018b68:	d111      	bne.n	8018b8e <forward_cast+0x2556>
 8018b6a:	8828      	ldrh	r0, [r5, #0]
 8018b6c:	e7d8      	b.n	8018b20 <forward_cast+0x24e8>
 8018b6e:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8018b72:	428c      	cmp	r4, r1
 8018b74:	f000 84d3 	beq.w	801951e <forward_cast+0x2ee6>
 8018b78:	455c      	cmp	r4, fp
 8018b7a:	d108      	bne.n	8018b8e <forward_cast+0x2556>
 8018b7c:	edd5 7a00 	vldr	s15, [r5]
 8018b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018b88:	ee17 0a90 	vmov	r0, s15
 8018b8c:	e7c8      	b.n	8018b20 <forward_cast+0x24e8>
 8018b8e:	2000      	movs	r0, #0
 8018b90:	e7c6      	b.n	8018b20 <forward_cast+0x24e8>
 8018b92:	4555      	cmp	r5, sl
 8018b94:	f4bd adb8 	bcs.w	8016708 <forward_cast+0xd0>
 8018b98:	9f00      	ldr	r7, [sp, #0]
 8018b9a:	4628      	mov	r0, r5
 8018b9c:	4621      	mov	r1, r4
 8018b9e:	f7fd fcd5 	bl	801654c <_array_handle_get_as_float>
 8018ba2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018baa:	444d      	add	r5, r9
 8018bac:	bf14      	ite	ne
 8018bae:	2301      	movne	r3, #1
 8018bb0:	2300      	moveq	r3, #0
 8018bb2:	45aa      	cmp	sl, r5
 8018bb4:	7033      	strb	r3, [r6, #0]
 8018bb6:	443e      	add	r6, r7
 8018bb8:	d8ef      	bhi.n	8018b9a <forward_cast+0x2562>
 8018bba:	f7fd bda5 	b.w	8016708 <forward_cast+0xd0>
 8018bbe:	4555      	cmp	r5, sl
 8018bc0:	f4bd ada2 	bcs.w	8016708 <forward_cast+0xd0>
 8018bc4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8018c7c <forward_cast+0x2644>
 8018bc8:	4f31      	ldr	r7, [pc, #196]	; (8018c90 <forward_cast+0x2658>)
 8018bca:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8018c98 <forward_cast+0x2660>
 8018bce:	4b2f      	ldr	r3, [pc, #188]	; (8018c8c <forward_cast+0x2654>)
 8018bd0:	4a2c      	ldr	r2, [pc, #176]	; (8018c84 <forward_cast+0x264c>)
 8018bd2:	e017      	b.n	8018c04 <forward_cast+0x25cc>
 8018bd4:	429c      	cmp	r4, r3
 8018bd6:	f000 829d 	beq.w	8019114 <forward_cast+0x2adc>
 8018bda:	dd26      	ble.n	8018c2a <forward_cast+0x25f2>
 8018bdc:	4294      	cmp	r4, r2
 8018bde:	f000 82b9 	beq.w	8019154 <forward_cast+0x2b1c>
 8018be2:	4929      	ldr	r1, [pc, #164]	; (8018c88 <forward_cast+0x2650>)
 8018be4:	428c      	cmp	r4, r1
 8018be6:	d139      	bne.n	8018c5c <forward_cast+0x2624>
 8018be8:	7828      	ldrb	r0, [r5, #0]
 8018bea:	3800      	subs	r0, #0
 8018bec:	bf18      	it	ne
 8018bee:	2001      	movne	r0, #1
 8018bf0:	f380 0008 	usat	r0, #8, r0
 8018bf4:	9900      	ldr	r1, [sp, #0]
 8018bf6:	444d      	add	r5, r9
 8018bf8:	b2c0      	uxtb	r0, r0
 8018bfa:	45aa      	cmp	sl, r5
 8018bfc:	6030      	str	r0, [r6, #0]
 8018bfe:	440e      	add	r6, r1
 8018c00:	f67d ad82 	bls.w	8016708 <forward_cast+0xd0>
 8018c04:	4923      	ldr	r1, [pc, #140]	; (8018c94 <forward_cast+0x265c>)
 8018c06:	428c      	cmp	r4, r1
 8018c08:	f000 82b4 	beq.w	8019174 <forward_cast+0x2b3c>
 8018c0c:	dde2      	ble.n	8018bd4 <forward_cast+0x259c>
 8018c0e:	491a      	ldr	r1, [pc, #104]	; (8018c78 <forward_cast+0x2640>)
 8018c10:	428c      	cmp	r4, r1
 8018c12:	f000 8290 	beq.w	8019136 <forward_cast+0x2afe>
 8018c16:	dd13      	ble.n	8018c40 <forward_cast+0x2608>
 8018c18:	4544      	cmp	r4, r8
 8018c1a:	d11f      	bne.n	8018c5c <forward_cast+0x2624>
 8018c1c:	edd5 7a00 	vldr	s15, [r5]
 8018c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018c24:	ee17 0a90 	vmov	r0, s15
 8018c28:	e7e2      	b.n	8018bf0 <forward_cast+0x25b8>
 8018c2a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018c2e:	428c      	cmp	r4, r1
 8018c30:	f000 828e 	beq.w	8019150 <forward_cast+0x2b18>
 8018c34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018c38:	428c      	cmp	r4, r1
 8018c3a:	d10f      	bne.n	8018c5c <forward_cast+0x2624>
 8018c3c:	8828      	ldrh	r0, [r5, #0]
 8018c3e:	e7d7      	b.n	8018bf0 <forward_cast+0x25b8>
 8018c40:	42bc      	cmp	r4, r7
 8018c42:	f000 8294 	beq.w	801916e <forward_cast+0x2b36>
 8018c46:	455c      	cmp	r4, fp
 8018c48:	d108      	bne.n	8018c5c <forward_cast+0x2624>
 8018c4a:	edd5 7a00 	vldr	s15, [r5]
 8018c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018c56:	ee17 0a90 	vmov	r0, s15
 8018c5a:	e7c9      	b.n	8018bf0 <forward_cast+0x25b8>
 8018c5c:	2000      	movs	r0, #0
 8018c5e:	e7c7      	b.n	8018bf0 <forward_cast+0x25b8>
 8018c60:	4555      	cmp	r5, sl
 8018c62:	f4bd ad51 	bcs.w	8016708 <forward_cast+0xd0>
 8018c66:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8018c7c <forward_cast+0x2644>
 8018c6a:	4f09      	ldr	r7, [pc, #36]	; (8018c90 <forward_cast+0x2658>)
 8018c6c:	f8df b028 	ldr.w	fp, [pc, #40]	; 8018c98 <forward_cast+0x2660>
 8018c70:	4b06      	ldr	r3, [pc, #24]	; (8018c8c <forward_cast+0x2654>)
 8018c72:	4a04      	ldr	r2, [pc, #16]	; (8018c84 <forward_cast+0x264c>)
 8018c74:	e027      	b.n	8018cc6 <forward_cast+0x268e>
 8018c76:	bf00      	nop
 8018c78:	00842040 	.word	0x00842040
 8018c7c:	01821040 	.word	0x01821040
 8018c80:	00040440 	.word	0x00040440
 8018c84:	00042040 	.word	0x00042040
 8018c88:	00060440 	.word	0x00060440
 8018c8c:	00041040 	.word	0x00041040
 8018c90:	00840840 	.word	0x00840840
 8018c94:	00840440 	.word	0x00840440
 8018c98:	00841040 	.word	0x00841040
 8018c9c:	429c      	cmp	r4, r3
 8018c9e:	f000 8298 	beq.w	80191d2 <forward_cast+0x2b9a>
 8018ca2:	dd26      	ble.n	8018cf2 <forward_cast+0x26ba>
 8018ca4:	4294      	cmp	r4, r2
 8018ca6:	f000 82a0 	beq.w	80191ea <forward_cast+0x2bb2>
 8018caa:	499c      	ldr	r1, [pc, #624]	; (8018f1c <forward_cast+0x28e4>)
 8018cac:	428c      	cmp	r4, r1
 8018cae:	d13e      	bne.n	8018d2e <forward_cast+0x26f6>
 8018cb0:	7829      	ldrb	r1, [r5, #0]
 8018cb2:	3900      	subs	r1, #0
 8018cb4:	bf18      	it	ne
 8018cb6:	2101      	movne	r1, #1
 8018cb8:	6031      	str	r1, [r6, #0]
 8018cba:	444d      	add	r5, r9
 8018cbc:	9900      	ldr	r1, [sp, #0]
 8018cbe:	45aa      	cmp	sl, r5
 8018cc0:	440e      	add	r6, r1
 8018cc2:	f67d ad21 	bls.w	8016708 <forward_cast+0xd0>
 8018cc6:	4996      	ldr	r1, [pc, #600]	; (8018f20 <forward_cast+0x28e8>)
 8018cc8:	428c      	cmp	r4, r1
 8018cca:	f000 827c 	beq.w	80191c6 <forward_cast+0x2b8e>
 8018cce:	dde5      	ble.n	8018c9c <forward_cast+0x2664>
 8018cd0:	4994      	ldr	r1, [pc, #592]	; (8018f24 <forward_cast+0x28ec>)
 8018cd2:	428c      	cmp	r4, r1
 8018cd4:	f000 8206 	beq.w	80190e4 <forward_cast+0x2aac>
 8018cd8:	dd18      	ble.n	8018d0c <forward_cast+0x26d4>
 8018cda:	4544      	cmp	r4, r8
 8018cdc:	d127      	bne.n	8018d2e <forward_cast+0x26f6>
 8018cde:	edd5 7a00 	vldr	s15, [r5]
 8018ce2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cea:	bf14      	ite	ne
 8018cec:	2101      	movne	r1, #1
 8018cee:	2100      	moveq	r1, #0
 8018cf0:	e7e2      	b.n	8018cb8 <forward_cast+0x2680>
 8018cf2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018cf6:	428c      	cmp	r4, r1
 8018cf8:	d0da      	beq.n	8018cb0 <forward_cast+0x2678>
 8018cfa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018cfe:	428c      	cmp	r4, r1
 8018d00:	d115      	bne.n	8018d2e <forward_cast+0x26f6>
 8018d02:	8829      	ldrh	r1, [r5, #0]
 8018d04:	3900      	subs	r1, #0
 8018d06:	bf18      	it	ne
 8018d08:	2101      	movne	r1, #1
 8018d0a:	e7d5      	b.n	8018cb8 <forward_cast+0x2680>
 8018d0c:	42bc      	cmp	r4, r7
 8018d0e:	f000 827c 	beq.w	801920a <forward_cast+0x2bd2>
 8018d12:	455c      	cmp	r4, fp
 8018d14:	d10b      	bne.n	8018d2e <forward_cast+0x26f6>
 8018d16:	edd5 7a00 	vldr	s15, [r5]
 8018d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d26:	bf14      	ite	ne
 8018d28:	2101      	movne	r1, #1
 8018d2a:	2100      	moveq	r1, #0
 8018d2c:	e7c4      	b.n	8018cb8 <forward_cast+0x2680>
 8018d2e:	2100      	movs	r1, #0
 8018d30:	e7c2      	b.n	8018cb8 <forward_cast+0x2680>
 8018d32:	4555      	cmp	r5, sl
 8018d34:	f4bd ace8 	bcs.w	8016708 <forward_cast+0xd0>
 8018d38:	4b7b      	ldr	r3, [pc, #492]	; (8018f28 <forward_cast+0x28f0>)
 8018d3a:	4a78      	ldr	r2, [pc, #480]	; (8018f1c <forward_cast+0x28e4>)
 8018d3c:	e014      	b.n	8018d68 <forward_cast+0x2730>
 8018d3e:	497b      	ldr	r1, [pc, #492]	; (8018f2c <forward_cast+0x28f4>)
 8018d40:	428c      	cmp	r4, r1
 8018d42:	f000 832d 	beq.w	80193a0 <forward_cast+0x2d68>
 8018d46:	dd21      	ble.n	8018d8c <forward_cast+0x2754>
 8018d48:	429c      	cmp	r4, r3
 8018d4a:	f000 819c 	beq.w	8019086 <forward_cast+0x2a4e>
 8018d4e:	4294      	cmp	r4, r2
 8018d50:	d137      	bne.n	8018dc2 <forward_cast+0x278a>
 8018d52:	7828      	ldrb	r0, [r5, #0]
 8018d54:	3800      	subs	r0, #0
 8018d56:	bf18      	it	ne
 8018d58:	2001      	movne	r0, #1
 8018d5a:	9900      	ldr	r1, [sp, #0]
 8018d5c:	6030      	str	r0, [r6, #0]
 8018d5e:	444d      	add	r5, r9
 8018d60:	45aa      	cmp	sl, r5
 8018d62:	440e      	add	r6, r1
 8018d64:	f67d acd0 	bls.w	8016708 <forward_cast+0xd0>
 8018d68:	4544      	cmp	r4, r8
 8018d6a:	f000 8316 	beq.w	801939a <forward_cast+0x2d62>
 8018d6e:	dde6      	ble.n	8018d3e <forward_cast+0x2706>
 8018d70:	496c      	ldr	r1, [pc, #432]	; (8018f24 <forward_cast+0x28ec>)
 8018d72:	428c      	cmp	r4, r1
 8018d74:	f000 8178 	beq.w	8019068 <forward_cast+0x2a30>
 8018d78:	dd13      	ble.n	8018da2 <forward_cast+0x276a>
 8018d7a:	42bc      	cmp	r4, r7
 8018d7c:	d121      	bne.n	8018dc2 <forward_cast+0x278a>
 8018d7e:	edd5 7a00 	vldr	s15, [r5]
 8018d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d86:	ee17 0a90 	vmov	r0, s15
 8018d8a:	e7e6      	b.n	8018d5a <forward_cast+0x2722>
 8018d8c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8018d90:	428c      	cmp	r4, r1
 8018d92:	f000 8176 	beq.w	8019082 <forward_cast+0x2a4a>
 8018d96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018d9a:	428c      	cmp	r4, r1
 8018d9c:	d111      	bne.n	8018dc2 <forward_cast+0x278a>
 8018d9e:	8828      	ldrh	r0, [r5, #0]
 8018da0:	e7db      	b.n	8018d5a <forward_cast+0x2722>
 8018da2:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8018da6:	428c      	cmp	r4, r1
 8018da8:	f000 817a 	beq.w	80190a0 <forward_cast+0x2a68>
 8018dac:	455c      	cmp	r4, fp
 8018dae:	d108      	bne.n	8018dc2 <forward_cast+0x278a>
 8018db0:	edd5 7a00 	vldr	s15, [r5]
 8018db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018dbc:	ee17 0a90 	vmov	r0, s15
 8018dc0:	e7cb      	b.n	8018d5a <forward_cast+0x2722>
 8018dc2:	2000      	movs	r0, #0
 8018dc4:	e7c9      	b.n	8018d5a <forward_cast+0x2722>
 8018dc6:	4555      	cmp	r5, sl
 8018dc8:	f4bd ac9e 	bcs.w	8016708 <forward_cast+0xd0>
 8018dcc:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8018f38 <forward_cast+0x2900>
 8018dd0:	4f57      	ldr	r7, [pc, #348]	; (8018f30 <forward_cast+0x28f8>)
 8018dd2:	f8df b160 	ldr.w	fp, [pc, #352]	; 8018f34 <forward_cast+0x28fc>
 8018dd6:	4b55      	ldr	r3, [pc, #340]	; (8018f2c <forward_cast+0x28f4>)
 8018dd8:	4a53      	ldr	r2, [pc, #332]	; (8018f28 <forward_cast+0x28f0>)
 8018dda:	e017      	b.n	8018e0c <forward_cast+0x27d4>
 8018ddc:	429c      	cmp	r4, r3
 8018dde:	f000 82cf 	beq.w	8019380 <forward_cast+0x2d48>
 8018de2:	dd26      	ble.n	8018e32 <forward_cast+0x27fa>
 8018de4:	4294      	cmp	r4, r2
 8018de6:	f000 816d 	beq.w	80190c4 <forward_cast+0x2a8c>
 8018dea:	494c      	ldr	r1, [pc, #304]	; (8018f1c <forward_cast+0x28e4>)
 8018dec:	428c      	cmp	r4, r1
 8018dee:	d139      	bne.n	8018e64 <forward_cast+0x282c>
 8018df0:	7828      	ldrb	r0, [r5, #0]
 8018df2:	3800      	subs	r0, #0
 8018df4:	bf18      	it	ne
 8018df6:	2001      	movne	r0, #1
 8018df8:	f300 000f 	ssat	r0, #16, r0
 8018dfc:	9900      	ldr	r1, [sp, #0]
 8018dfe:	444d      	add	r5, r9
 8018e00:	b200      	sxth	r0, r0
 8018e02:	45aa      	cmp	sl, r5
 8018e04:	6030      	str	r0, [r6, #0]
 8018e06:	440e      	add	r6, r1
 8018e08:	f67d ac7e 	bls.w	8016708 <forward_cast+0xd0>
 8018e0c:	4944      	ldr	r1, [pc, #272]	; (8018f20 <forward_cast+0x28e8>)
 8018e0e:	428c      	cmp	r4, r1
 8018e10:	f000 8101 	beq.w	8019016 <forward_cast+0x29de>
 8018e14:	dde2      	ble.n	8018ddc <forward_cast+0x27a4>
 8018e16:	4943      	ldr	r1, [pc, #268]	; (8018f24 <forward_cast+0x28ec>)
 8018e18:	428c      	cmp	r4, r1
 8018e1a:	f000 8144 	beq.w	80190a6 <forward_cast+0x2a6e>
 8018e1e:	dd13      	ble.n	8018e48 <forward_cast+0x2810>
 8018e20:	4544      	cmp	r4, r8
 8018e22:	d11f      	bne.n	8018e64 <forward_cast+0x282c>
 8018e24:	edd5 7a00 	vldr	s15, [r5]
 8018e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e2c:	ee17 0a90 	vmov	r0, s15
 8018e30:	e7e2      	b.n	8018df8 <forward_cast+0x27c0>
 8018e32:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018e36:	428c      	cmp	r4, r1
 8018e38:	f000 8142 	beq.w	80190c0 <forward_cast+0x2a88>
 8018e3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018e40:	428c      	cmp	r4, r1
 8018e42:	d10f      	bne.n	8018e64 <forward_cast+0x282c>
 8018e44:	8828      	ldrh	r0, [r5, #0]
 8018e46:	e7d7      	b.n	8018df8 <forward_cast+0x27c0>
 8018e48:	42bc      	cmp	r4, r7
 8018e4a:	f000 8148 	beq.w	80190de <forward_cast+0x2aa6>
 8018e4e:	455c      	cmp	r4, fp
 8018e50:	d108      	bne.n	8018e64 <forward_cast+0x282c>
 8018e52:	edd5 7a00 	vldr	s15, [r5]
 8018e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e5e:	ee17 0a90 	vmov	r0, s15
 8018e62:	e7c9      	b.n	8018df8 <forward_cast+0x27c0>
 8018e64:	2000      	movs	r0, #0
 8018e66:	e7c7      	b.n	8018df8 <forward_cast+0x27c0>
 8018e68:	4555      	cmp	r5, sl
 8018e6a:	f4bd ac4d 	bcs.w	8016708 <forward_cast+0xd0>
 8018e6e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8018f38 <forward_cast+0x2900>
 8018e72:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8018f30 <forward_cast+0x28f8>
 8018e76:	4b2f      	ldr	r3, [pc, #188]	; (8018f34 <forward_cast+0x28fc>)
 8018e78:	4a2c      	ldr	r2, [pc, #176]	; (8018f2c <forward_cast+0x28f4>)
 8018e7a:	2700      	movs	r7, #0
 8018e7c:	e016      	b.n	8018eac <forward_cast+0x2874>
 8018e7e:	4294      	cmp	r4, r2
 8018e80:	f000 80d8 	beq.w	8019034 <forward_cast+0x29fc>
 8018e84:	dd26      	ble.n	8018ed4 <forward_cast+0x289c>
 8018e86:	4928      	ldr	r1, [pc, #160]	; (8018f28 <forward_cast+0x28f0>)
 8018e88:	428c      	cmp	r4, r1
 8018e8a:	f000 81c4 	beq.w	8019216 <forward_cast+0x2bde>
 8018e8e:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8018e92:	428c      	cmp	r4, r1
 8018e94:	d137      	bne.n	8018f06 <forward_cast+0x28ce>
 8018e96:	7829      	ldrb	r1, [r5, #0]
 8018e98:	3900      	subs	r1, #0
 8018e9a:	bf18      	it	ne
 8018e9c:	2101      	movne	r1, #1
 8018e9e:	55f1      	strb	r1, [r6, r7]
 8018ea0:	444d      	add	r5, r9
 8018ea2:	9900      	ldr	r1, [sp, #0]
 8018ea4:	45aa      	cmp	sl, r5
 8018ea6:	440f      	add	r7, r1
 8018ea8:	f67d ac2e 	bls.w	8016708 <forward_cast+0xd0>
 8018eac:	491c      	ldr	r1, [pc, #112]	; (8018f20 <forward_cast+0x28e8>)
 8018eae:	428c      	cmp	r4, r1
 8018eb0:	d018      	beq.n	8018ee4 <forward_cast+0x28ac>
 8018eb2:	dde4      	ble.n	8018e7e <forward_cast+0x2846>
 8018eb4:	491b      	ldr	r1, [pc, #108]	; (8018f24 <forward_cast+0x28ec>)
 8018eb6:	428c      	cmp	r4, r1
 8018eb8:	f000 80c7 	beq.w	801904a <forward_cast+0x2a12>
 8018ebc:	dd14      	ble.n	8018ee8 <forward_cast+0x28b0>
 8018ebe:	4544      	cmp	r4, r8
 8018ec0:	d121      	bne.n	8018f06 <forward_cast+0x28ce>
 8018ec2:	edd5 7a00 	vldr	s15, [r5]
 8018ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018eca:	edcd 7a01 	vstr	s15, [sp, #4]
 8018ece:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018ed2:	e7e4      	b.n	8018e9e <forward_cast+0x2866>
 8018ed4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018ed8:	428c      	cmp	r4, r1
 8018eda:	d003      	beq.n	8018ee4 <forward_cast+0x28ac>
 8018edc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018ee0:	428c      	cmp	r4, r1
 8018ee2:	d110      	bne.n	8018f06 <forward_cast+0x28ce>
 8018ee4:	7829      	ldrb	r1, [r5, #0]
 8018ee6:	e7da      	b.n	8018e9e <forward_cast+0x2866>
 8018ee8:	455c      	cmp	r4, fp
 8018eea:	d0fb      	beq.n	8018ee4 <forward_cast+0x28ac>
 8018eec:	429c      	cmp	r4, r3
 8018eee:	d10a      	bne.n	8018f06 <forward_cast+0x28ce>
 8018ef0:	edd5 7a00 	vldr	s15, [r5]
 8018ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018efc:	edcd 7a01 	vstr	s15, [sp, #4]
 8018f00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018f04:	e7cb      	b.n	8018e9e <forward_cast+0x2866>
 8018f06:	2100      	movs	r1, #0
 8018f08:	e7c9      	b.n	8018e9e <forward_cast+0x2866>
 8018f0a:	4555      	cmp	r5, sl
 8018f0c:	f4bd abfc 	bcs.w	8016708 <forward_cast+0xd0>
 8018f10:	4b06      	ldr	r3, [pc, #24]	; (8018f2c <forward_cast+0x28f4>)
 8018f12:	4a05      	ldr	r2, [pc, #20]	; (8018f28 <forward_cast+0x28f0>)
 8018f14:	f04f 0800 	mov.w	r8, #0
 8018f18:	e024      	b.n	8018f64 <forward_cast+0x292c>
 8018f1a:	bf00      	nop
 8018f1c:	00060440 	.word	0x00060440
 8018f20:	00840440 	.word	0x00840440
 8018f24:	00842040 	.word	0x00842040
 8018f28:	00042040 	.word	0x00042040
 8018f2c:	00041040 	.word	0x00041040
 8018f30:	00840840 	.word	0x00840840
 8018f34:	00841040 	.word	0x00841040
 8018f38:	01821040 	.word	0x01821040
 8018f3c:	429c      	cmp	r4, r3
 8018f3e:	d050      	beq.n	8018fe2 <forward_cast+0x29aa>
 8018f40:	dd23      	ble.n	8018f8a <forward_cast+0x2952>
 8018f42:	4294      	cmp	r4, r2
 8018f44:	d03e      	beq.n	8018fc4 <forward_cast+0x298c>
 8018f46:	49c7      	ldr	r1, [pc, #796]	; (8019264 <forward_cast+0x2c2c>)
 8018f48:	428c      	cmp	r4, r1
 8018f4a:	d139      	bne.n	8018fc0 <forward_cast+0x2988>
 8018f4c:	7829      	ldrb	r1, [r5, #0]
 8018f4e:	3900      	subs	r1, #0
 8018f50:	bf18      	it	ne
 8018f52:	2101      	movne	r1, #1
 8018f54:	f806 1008 	strb.w	r1, [r6, r8]
 8018f58:	444d      	add	r5, r9
 8018f5a:	9900      	ldr	r1, [sp, #0]
 8018f5c:	45aa      	cmp	sl, r5
 8018f5e:	4488      	add	r8, r1
 8018f60:	f67d abd2 	bls.w	8016708 <forward_cast+0xd0>
 8018f64:	455c      	cmp	r4, fp
 8018f66:	d017      	beq.n	8018f98 <forward_cast+0x2960>
 8018f68:	dde8      	ble.n	8018f3c <forward_cast+0x2904>
 8018f6a:	49bf      	ldr	r1, [pc, #764]	; (8019268 <forward_cast+0x2c30>)
 8018f6c:	428c      	cmp	r4, r1
 8018f6e:	d043      	beq.n	8018ff8 <forward_cast+0x29c0>
 8018f70:	dd15      	ble.n	8018f9e <forward_cast+0x2966>
 8018f72:	49be      	ldr	r1, [pc, #760]	; (801926c <forward_cast+0x2c34>)
 8018f74:	428c      	cmp	r4, r1
 8018f76:	d123      	bne.n	8018fc0 <forward_cast+0x2988>
 8018f78:	edd5 7a00 	vldr	s15, [r5]
 8018f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018f80:	edcd 7a01 	vstr	s15, [sp, #4]
 8018f84:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8018f88:	e7e4      	b.n	8018f54 <forward_cast+0x291c>
 8018f8a:	49b9      	ldr	r1, [pc, #740]	; (8019270 <forward_cast+0x2c38>)
 8018f8c:	428c      	cmp	r4, r1
 8018f8e:	d003      	beq.n	8018f98 <forward_cast+0x2960>
 8018f90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8018f94:	428c      	cmp	r4, r1
 8018f96:	d113      	bne.n	8018fc0 <forward_cast+0x2988>
 8018f98:	f995 1000 	ldrsb.w	r1, [r5]
 8018f9c:	e7da      	b.n	8018f54 <forward_cast+0x291c>
 8018f9e:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8018fa2:	428c      	cmp	r4, r1
 8018fa4:	d0f8      	beq.n	8018f98 <forward_cast+0x2960>
 8018fa6:	42bc      	cmp	r4, r7
 8018fa8:	d10a      	bne.n	8018fc0 <forward_cast+0x2988>
 8018faa:	edd5 7a00 	vldr	s15, [r5]
 8018fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018fb6:	edcd 7a01 	vstr	s15, [sp, #4]
 8018fba:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8018fbe:	e7c9      	b.n	8018f54 <forward_cast+0x291c>
 8018fc0:	2100      	movs	r1, #0
 8018fc2:	e7c7      	b.n	8018f54 <forward_cast+0x291c>
 8018fc4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018fc8:	f7e7 fef6 	bl	8000db8 <__aeabi_ul2f>
 8018fcc:	ee07 0a90 	vmov	s15, r0
 8018fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018fd4:	4aa7      	ldr	r2, [pc, #668]	; (8019274 <forward_cast+0x2c3c>)
 8018fd6:	edcd 7a01 	vstr	s15, [sp, #4]
 8018fda:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8018fde:	4ba6      	ldr	r3, [pc, #664]	; (8019278 <forward_cast+0x2c40>)
 8018fe0:	e7b8      	b.n	8018f54 <forward_cast+0x291c>
 8018fe2:	edd5 7a00 	vldr	s15, [r5]
 8018fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018fee:	edcd 7a01 	vstr	s15, [sp, #4]
 8018ff2:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8018ff6:	e7ad      	b.n	8018f54 <forward_cast+0x291c>
 8018ff8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018ffc:	f7e7 fee4 	bl	8000dc8 <__aeabi_l2f>
 8019000:	ee07 0a90 	vmov	s15, r0
 8019004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019008:	4b9b      	ldr	r3, [pc, #620]	; (8019278 <forward_cast+0x2c40>)
 801900a:	edcd 7a01 	vstr	s15, [sp, #4]
 801900e:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8019012:	4a98      	ldr	r2, [pc, #608]	; (8019274 <forward_cast+0x2c3c>)
 8019014:	e79e      	b.n	8018f54 <forward_cast+0x291c>
 8019016:	f995 0000 	ldrsb.w	r0, [r5]
 801901a:	e6ed      	b.n	8018df8 <forward_cast+0x27c0>
 801901c:	edd5 7a00 	vldr	s15, [r5]
 8019020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019028:	edcd 7a01 	vstr	s15, [sp, #4]
 801902c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8019030:	f7fd bf35 	b.w	8016e9e <forward_cast+0x866>
 8019034:	edd5 7a00 	vldr	s15, [r5]
 8019038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801903c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019040:	edcd 7a01 	vstr	s15, [sp, #4]
 8019044:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8019048:	e729      	b.n	8018e9e <forward_cast+0x2866>
 801904a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801904e:	f7e7 febb 	bl	8000dc8 <__aeabi_l2f>
 8019052:	ee07 0a90 	vmov	s15, r0
 8019056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801905a:	4b88      	ldr	r3, [pc, #544]	; (801927c <forward_cast+0x2c44>)
 801905c:	edcd 7a01 	vstr	s15, [sp, #4]
 8019060:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8019064:	4a84      	ldr	r2, [pc, #528]	; (8019278 <forward_cast+0x2c40>)
 8019066:	e71a      	b.n	8018e9e <forward_cast+0x2866>
 8019068:	e9d5 0100 	ldrd	r0, r1, [r5]
 801906c:	f7e7 feac 	bl	8000dc8 <__aeabi_l2f>
 8019070:	ee07 0a90 	vmov	s15, r0
 8019074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019078:	4b7e      	ldr	r3, [pc, #504]	; (8019274 <forward_cast+0x2c3c>)
 801907a:	4a7a      	ldr	r2, [pc, #488]	; (8019264 <forward_cast+0x2c2c>)
 801907c:	ee17 0a90 	vmov	r0, s15
 8019080:	e66b      	b.n	8018d5a <forward_cast+0x2722>
 8019082:	7828      	ldrb	r0, [r5, #0]
 8019084:	e669      	b.n	8018d5a <forward_cast+0x2722>
 8019086:	e9d5 0100 	ldrd	r0, r1, [r5]
 801908a:	f7e7 fe95 	bl	8000db8 <__aeabi_ul2f>
 801908e:	ee07 0a90 	vmov	s15, r0
 8019092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019096:	4a73      	ldr	r2, [pc, #460]	; (8019264 <forward_cast+0x2c2c>)
 8019098:	4b76      	ldr	r3, [pc, #472]	; (8019274 <forward_cast+0x2c3c>)
 801909a:	ee17 0a90 	vmov	r0, s15
 801909e:	e65c      	b.n	8018d5a <forward_cast+0x2722>
 80190a0:	f9b5 0000 	ldrsh.w	r0, [r5]
 80190a4:	e659      	b.n	8018d5a <forward_cast+0x2722>
 80190a6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80190aa:	f7e7 fe8d 	bl	8000dc8 <__aeabi_l2f>
 80190ae:	ee07 0a90 	vmov	s15, r0
 80190b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80190b6:	4b70      	ldr	r3, [pc, #448]	; (8019278 <forward_cast+0x2c40>)
 80190b8:	4a6e      	ldr	r2, [pc, #440]	; (8019274 <forward_cast+0x2c3c>)
 80190ba:	ee17 0a90 	vmov	r0, s15
 80190be:	e69b      	b.n	8018df8 <forward_cast+0x27c0>
 80190c0:	7828      	ldrb	r0, [r5, #0]
 80190c2:	e699      	b.n	8018df8 <forward_cast+0x27c0>
 80190c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80190c8:	f7e7 fe76 	bl	8000db8 <__aeabi_ul2f>
 80190cc:	ee07 0a90 	vmov	s15, r0
 80190d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80190d4:	4a67      	ldr	r2, [pc, #412]	; (8019274 <forward_cast+0x2c3c>)
 80190d6:	4b68      	ldr	r3, [pc, #416]	; (8019278 <forward_cast+0x2c40>)
 80190d8:	ee17 0a90 	vmov	r0, s15
 80190dc:	e68c      	b.n	8018df8 <forward_cast+0x27c0>
 80190de:	f9b5 0000 	ldrsh.w	r0, [r5]
 80190e2:	e689      	b.n	8018df8 <forward_cast+0x27c0>
 80190e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80190e8:	f7e7 fe6e 	bl	8000dc8 <__aeabi_l2f>
 80190ec:	ee07 0a90 	vmov	s15, r0
 80190f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80190f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190f8:	4b5f      	ldr	r3, [pc, #380]	; (8019278 <forward_cast+0x2c40>)
 80190fa:	4a5e      	ldr	r2, [pc, #376]	; (8019274 <forward_cast+0x2c3c>)
 80190fc:	bf14      	ite	ne
 80190fe:	2101      	movne	r1, #1
 8019100:	2100      	moveq	r1, #0
 8019102:	e5d9      	b.n	8018cb8 <forward_cast+0x2680>
 8019104:	f995 1000 	ldrsb.w	r1, [r5]
 8019108:	ee07 1a90 	vmov	s15, r1
 801910c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019110:	f7fd be4e 	b.w	8016db0 <forward_cast+0x778>
 8019114:	edd5 7a00 	vldr	s15, [r5]
 8019118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801911c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019120:	ee17 0a90 	vmov	r0, s15
 8019124:	e564      	b.n	8018bf0 <forward_cast+0x25b8>
 8019126:	f995 1000 	ldrsb.w	r1, [r5]
 801912a:	ee07 1a90 	vmov	s15, r1
 801912e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019132:	f7fd bf08 	b.w	8016f46 <forward_cast+0x90e>
 8019136:	e9d5 0100 	ldrd	r0, r1, [r5]
 801913a:	f7e7 fe45 	bl	8000dc8 <__aeabi_l2f>
 801913e:	ee07 0a90 	vmov	s15, r0
 8019142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019146:	4b4c      	ldr	r3, [pc, #304]	; (8019278 <forward_cast+0x2c40>)
 8019148:	4a4a      	ldr	r2, [pc, #296]	; (8019274 <forward_cast+0x2c3c>)
 801914a:	ee17 0a90 	vmov	r0, s15
 801914e:	e54f      	b.n	8018bf0 <forward_cast+0x25b8>
 8019150:	7828      	ldrb	r0, [r5, #0]
 8019152:	e54d      	b.n	8018bf0 <forward_cast+0x25b8>
 8019154:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019158:	f7e7 fe2e 	bl	8000db8 <__aeabi_ul2f>
 801915c:	ee07 0a90 	vmov	s15, r0
 8019160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019164:	4a43      	ldr	r2, [pc, #268]	; (8019274 <forward_cast+0x2c3c>)
 8019166:	4b44      	ldr	r3, [pc, #272]	; (8019278 <forward_cast+0x2c40>)
 8019168:	ee17 0a90 	vmov	r0, s15
 801916c:	e540      	b.n	8018bf0 <forward_cast+0x25b8>
 801916e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019172:	e53d      	b.n	8018bf0 <forward_cast+0x25b8>
 8019174:	f995 0000 	ldrsb.w	r0, [r5]
 8019178:	e53a      	b.n	8018bf0 <forward_cast+0x25b8>
 801917a:	edd5 7a00 	vldr	s15, [r5]
 801917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801918a:	f7fd bedc 	b.w	8016f46 <forward_cast+0x90e>
 801918e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019192:	f7e7 fe11 	bl	8000db8 <__aeabi_ul2f>
 8019196:	ee07 0a90 	vmov	s15, r0
 801919a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801919e:	4a34      	ldr	r2, [pc, #208]	; (8019270 <forward_cast+0x2c38>)
 80191a0:	4b35      	ldr	r3, [pc, #212]	; (8019278 <forward_cast+0x2c40>)
 80191a2:	ee17 0a90 	vmov	r0, s15
 80191a6:	f7fe ba57 	b.w	8017658 <forward_cast+0x1020>
 80191aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80191ae:	f7e7 fe03 	bl	8000db8 <__aeabi_ul2f>
 80191b2:	ee07 0a90 	vmov	s15, r0
 80191b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80191ba:	4b31      	ldr	r3, [pc, #196]	; (8019280 <forward_cast+0x2c48>)
 80191bc:	4a2f      	ldr	r2, [pc, #188]	; (801927c <forward_cast+0x2c44>)
 80191be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191c2:	f7fd bec0 	b.w	8016f46 <forward_cast+0x90e>
 80191c6:	f995 1000 	ldrsb.w	r1, [r5]
 80191ca:	3900      	subs	r1, #0
 80191cc:	bf18      	it	ne
 80191ce:	2101      	movne	r1, #1
 80191d0:	e572      	b.n	8018cb8 <forward_cast+0x2680>
 80191d2:	edd5 7a00 	vldr	s15, [r5]
 80191d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80191da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80191de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191e2:	bf14      	ite	ne
 80191e4:	2101      	movne	r1, #1
 80191e6:	2100      	moveq	r1, #0
 80191e8:	e566      	b.n	8018cb8 <forward_cast+0x2680>
 80191ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80191ee:	f7e7 fde3 	bl	8000db8 <__aeabi_ul2f>
 80191f2:	ee07 0a90 	vmov	s15, r0
 80191f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80191fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191fe:	4a1d      	ldr	r2, [pc, #116]	; (8019274 <forward_cast+0x2c3c>)
 8019200:	4b1d      	ldr	r3, [pc, #116]	; (8019278 <forward_cast+0x2c40>)
 8019202:	bf14      	ite	ne
 8019204:	2101      	movne	r1, #1
 8019206:	2100      	moveq	r1, #0
 8019208:	e556      	b.n	8018cb8 <forward_cast+0x2680>
 801920a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801920e:	3900      	subs	r1, #0
 8019210:	bf18      	it	ne
 8019212:	2101      	movne	r1, #1
 8019214:	e550      	b.n	8018cb8 <forward_cast+0x2680>
 8019216:	e9d5 0100 	ldrd	r0, r1, [r5]
 801921a:	f7e7 fdcd 	bl	8000db8 <__aeabi_ul2f>
 801921e:	ee07 0a90 	vmov	s15, r0
 8019222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019226:	4a14      	ldr	r2, [pc, #80]	; (8019278 <forward_cast+0x2c40>)
 8019228:	edcd 7a01 	vstr	s15, [sp, #4]
 801922c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8019230:	4b12      	ldr	r3, [pc, #72]	; (801927c <forward_cast+0x2c44>)
 8019232:	e634      	b.n	8018e9e <forward_cast+0x2866>
 8019234:	edd5 7a00 	vldr	s15, [r5]
 8019238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801923c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019240:	edcd 7a01 	vstr	s15, [sp, #4]
 8019244:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8019248:	f7fe ba3b 	b.w	80176c2 <forward_cast+0x108a>
 801924c:	f995 0000 	ldrsb.w	r0, [r5]
 8019250:	f7fe ba6f 	b.w	8017732 <forward_cast+0x10fa>
 8019254:	f995 0000 	ldrsb.w	r0, [r5]
 8019258:	f7fe b9fe 	b.w	8017658 <forward_cast+0x1020>
 801925c:	7829      	ldrb	r1, [r5, #0]
 801925e:	f7fd bc7f 	b.w	8016b60 <forward_cast+0x528>
 8019262:	bf00      	nop
 8019264:	00060440 	.word	0x00060440
 8019268:	00842040 	.word	0x00842040
 801926c:	01821040 	.word	0x01821040
 8019270:	00040440 	.word	0x00040440
 8019274:	00042040 	.word	0x00042040
 8019278:	00041040 	.word	0x00041040
 801927c:	00841040 	.word	0x00841040
 8019280:	00840840 	.word	0x00840840
 8019284:	edd5 7a00 	vldr	s15, [r5]
 8019288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801928c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019290:	ee17 1a90 	vmov	r1, s15
 8019294:	b289      	uxth	r1, r1
 8019296:	f7fd bac1 	b.w	801681c <forward_cast+0x1e4>
 801929a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801929e:	f7e7 fd93 	bl	8000dc8 <__aeabi_l2f>
 80192a2:	ee07 0a90 	vmov	s15, r0
 80192a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192aa:	4be3      	ldr	r3, [pc, #908]	; (8019638 <forward_cast+0x3000>)
 80192ac:	edcd 7a01 	vstr	s15, [sp, #4]
 80192b0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80192b4:	4ae1      	ldr	r2, [pc, #900]	; (801963c <forward_cast+0x3004>)
 80192b6:	f7fd bdf2 	b.w	8016e9e <forward_cast+0x866>
 80192ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 80192be:	f7e7 fd83 	bl	8000dc8 <__aeabi_l2f>
 80192c2:	ee07 0a90 	vmov	s15, r0
 80192c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192ca:	4bdd      	ldr	r3, [pc, #884]	; (8019640 <forward_cast+0x3008>)
 80192cc:	4add      	ldr	r2, [pc, #884]	; (8019644 <forward_cast+0x300c>)
 80192ce:	ee17 0a90 	vmov	r0, s15
 80192d2:	f7fe b931 	b.w	8017538 <forward_cast+0xf00>
 80192d6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80192da:	f7e7 fd6d 	bl	8000db8 <__aeabi_ul2f>
 80192de:	ee07 0a90 	vmov	s15, r0
 80192e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192e6:	4ad6      	ldr	r2, [pc, #856]	; (8019640 <forward_cast+0x3008>)
 80192e8:	ee17 3a90 	vmov	r3, s15
 80192ec:	b299      	uxth	r1, r3
 80192ee:	4bd3      	ldr	r3, [pc, #844]	; (801963c <forward_cast+0x3004>)
 80192f0:	f7fd bc36 	b.w	8016b60 <forward_cast+0x528>
 80192f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80192f8:	9301      	str	r3, [sp, #4]
 80192fa:	f7e7 fd5d 	bl	8000db8 <__aeabi_ul2f>
 80192fe:	ee07 0a90 	vmov	s15, r0
 8019302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019306:	9b01      	ldr	r3, [sp, #4]
 8019308:	4acb      	ldr	r2, [pc, #812]	; (8019638 <forward_cast+0x3000>)
 801930a:	ee17 0a90 	vmov	r0, s15
 801930e:	f7fd bc63 	b.w	8016bd8 <forward_cast+0x5a0>
 8019312:	edd5 7a00 	vldr	s15, [r5]
 8019316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801931a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801931e:	ee17 0a90 	vmov	r0, s15
 8019322:	f7fd bc59 	b.w	8016bd8 <forward_cast+0x5a0>
 8019326:	f9b5 0000 	ldrsh.w	r0, [r5]
 801932a:	f7fe b95f 	b.w	80175ec <forward_cast+0xfb4>
 801932e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019332:	f7e7 fd41 	bl	8000db8 <__aeabi_ul2f>
 8019336:	ee07 0a90 	vmov	s15, r0
 801933a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801933e:	4ac1      	ldr	r2, [pc, #772]	; (8019644 <forward_cast+0x300c>)
 8019340:	4bbf      	ldr	r3, [pc, #764]	; (8019640 <forward_cast+0x3008>)
 8019342:	ee17 0a90 	vmov	r0, s15
 8019346:	f7fe b951 	b.w	80175ec <forward_cast+0xfb4>
 801934a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801934e:	f7e7 fd33 	bl	8000db8 <__aeabi_ul2f>
 8019352:	ee07 0a90 	vmov	s15, r0
 8019356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801935a:	4abb      	ldr	r2, [pc, #748]	; (8019648 <forward_cast+0x3010>)
 801935c:	4bb6      	ldr	r3, [pc, #728]	; (8019638 <forward_cast+0x3000>)
 801935e:	ee17 0a90 	vmov	r0, s15
 8019362:	f7fe b9e6 	b.w	8017732 <forward_cast+0x10fa>
 8019366:	edd5 7a00 	vldr	s15, [r5]
 801936a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801936e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019372:	ee17 0a90 	vmov	r0, s15
 8019376:	f7fe b9dc 	b.w	8017732 <forward_cast+0x10fa>
 801937a:	7828      	ldrb	r0, [r5, #0]
 801937c:	f7fe b8dc 	b.w	8017538 <forward_cast+0xf00>
 8019380:	edd5 7a00 	vldr	s15, [r5]
 8019384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801938c:	ee17 0a90 	vmov	r0, s15
 8019390:	e532      	b.n	8018df8 <forward_cast+0x27c0>
 8019392:	f995 0000 	ldrsb.w	r0, [r5]
 8019396:	f7fd ba92 	b.w	80168be <forward_cast+0x286>
 801939a:	f995 0000 	ldrsb.w	r0, [r5]
 801939e:	e4dc      	b.n	8018d5a <forward_cast+0x2722>
 80193a0:	edd5 7a00 	vldr	s15, [r5]
 80193a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80193a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80193ac:	ee17 0a90 	vmov	r0, s15
 80193b0:	e4d3      	b.n	8018d5a <forward_cast+0x2722>
 80193b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80193b6:	f7e7 fcff 	bl	8000db8 <__aeabi_ul2f>
 80193ba:	ee07 0a90 	vmov	s15, r0
 80193be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80193c2:	4a9f      	ldr	r2, [pc, #636]	; (8019640 <forward_cast+0x3008>)
 80193c4:	edcd 7a01 	vstr	s15, [sp, #4]
 80193c8:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80193cc:	4b9a      	ldr	r3, [pc, #616]	; (8019638 <forward_cast+0x3000>)
 80193ce:	f7fe b978 	b.w	80176c2 <forward_cast+0x108a>
 80193d2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80193d6:	f7e7 fcef 	bl	8000db8 <__aeabi_ul2f>
 80193da:	ee07 0a90 	vmov	s15, r0
 80193de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80193e2:	4a96      	ldr	r2, [pc, #600]	; (801963c <forward_cast+0x3004>)
 80193e4:	4b94      	ldr	r3, [pc, #592]	; (8019638 <forward_cast+0x3000>)
 80193e6:	ee17 0a90 	vmov	r0, s15
 80193ea:	f7fd ba68 	b.w	80168be <forward_cast+0x286>
 80193ee:	edd5 7a00 	vldr	s15, [r5]
 80193f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80193f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80193fa:	ee17 0a90 	vmov	r0, s15
 80193fe:	f7fd ba5e 	b.w	80168be <forward_cast+0x286>
 8019402:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019406:	f7fd ba5a 	b.w	80168be <forward_cast+0x286>
 801940a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801940e:	f7e7 fcd3 	bl	8000db8 <__aeabi_ul2f>
 8019412:	ee07 0a90 	vmov	s15, r0
 8019416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801941a:	4a88      	ldr	r2, [pc, #544]	; (801963c <forward_cast+0x3004>)
 801941c:	edcd 7a01 	vstr	s15, [sp, #4]
 8019420:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8019424:	4b84      	ldr	r3, [pc, #528]	; (8019638 <forward_cast+0x3000>)
 8019426:	f7fd bd3a 	b.w	8016e9e <forward_cast+0x866>
 801942a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801942e:	f7e7 fcc3 	bl	8000db8 <__aeabi_ul2f>
 8019432:	ee07 0a90 	vmov	s15, r0
 8019436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801943a:	4a80      	ldr	r2, [pc, #512]	; (801963c <forward_cast+0x3004>)
 801943c:	edcd 7a01 	vstr	s15, [sp, #4]
 8019440:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8019444:	4b7c      	ldr	r3, [pc, #496]	; (8019638 <forward_cast+0x3000>)
 8019446:	f7fd bceb 	b.w	8016e20 <forward_cast+0x7e8>
 801944a:	edd5 7a00 	vldr	s15, [r5]
 801944e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019456:	edcd 7a01 	vstr	s15, [sp, #4]
 801945a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801945e:	f7fd bcdf 	b.w	8016e20 <forward_cast+0x7e8>
 8019462:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019466:	f7fd ba8d 	b.w	8016984 <forward_cast+0x34c>
 801946a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801946e:	f7e7 fcab 	bl	8000dc8 <__aeabi_l2f>
 8019472:	ee07 0a90 	vmov	s15, r0
 8019476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801947a:	4b6f      	ldr	r3, [pc, #444]	; (8019638 <forward_cast+0x3000>)
 801947c:	4a6f      	ldr	r2, [pc, #444]	; (801963c <forward_cast+0x3004>)
 801947e:	ee17 0a90 	vmov	r0, s15
 8019482:	f7fd bc3b 	b.w	8016cfc <forward_cast+0x6c4>
 8019486:	f9b5 1000 	ldrsh.w	r1, [r5]
 801948a:	ee07 1a90 	vmov	s15, r1
 801948e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019492:	f7fd bc8d 	b.w	8016db0 <forward_cast+0x778>
 8019496:	e9d5 0100 	ldrd	r0, r1, [r5]
 801949a:	f7e7 fc95 	bl	8000dc8 <__aeabi_l2f>
 801949e:	ee07 0a90 	vmov	s15, r0
 80194a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194a6:	4b66      	ldr	r3, [pc, #408]	; (8019640 <forward_cast+0x3008>)
 80194a8:	4a66      	ldr	r2, [pc, #408]	; (8019644 <forward_cast+0x300c>)
 80194aa:	ee17 0a90 	vmov	r0, s15
 80194ae:	f7fd bbe5 	b.w	8016c7c <forward_cast+0x644>
 80194b2:	f9b5 0000 	ldrsh.w	r0, [r5]
 80194b6:	f7fd bc21 	b.w	8016cfc <forward_cast+0x6c4>
 80194ba:	f995 0000 	ldrsb.w	r0, [r5]
 80194be:	f7ff bb2f 	b.w	8018b20 <forward_cast+0x24e8>
 80194c2:	f995 0000 	ldrsb.w	r0, [r5]
 80194c6:	f7fd bbd9 	b.w	8016c7c <forward_cast+0x644>
 80194ca:	f995 0000 	ldrsb.w	r0, [r5]
 80194ce:	f7fd bf70 	b.w	80173b2 <forward_cast+0xd7a>
 80194d2:	f995 1000 	ldrsb.w	r1, [r5]
 80194d6:	3900      	subs	r1, #0
 80194d8:	bf18      	it	ne
 80194da:	2101      	movne	r1, #1
 80194dc:	f7fd bfa4 	b.w	8017428 <forward_cast+0xdf0>
 80194e0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80194e4:	f7e7 fc70 	bl	8000dc8 <__aeabi_l2f>
 80194e8:	ee07 0a90 	vmov	s15, r0
 80194ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194f0:	4b53      	ldr	r3, [pc, #332]	; (8019640 <forward_cast+0x3008>)
 80194f2:	4a54      	ldr	r2, [pc, #336]	; (8019644 <forward_cast+0x300c>)
 80194f4:	ee17 0a90 	vmov	r0, s15
 80194f8:	f7ff bb12 	b.w	8018b20 <forward_cast+0x24e8>
 80194fc:	7828      	ldrb	r0, [r5, #0]
 80194fe:	f7ff bb0f 	b.w	8018b20 <forward_cast+0x24e8>
 8019502:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019506:	f7e7 fc57 	bl	8000db8 <__aeabi_ul2f>
 801950a:	ee07 0a90 	vmov	s15, r0
 801950e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019512:	4a4c      	ldr	r2, [pc, #304]	; (8019644 <forward_cast+0x300c>)
 8019514:	4b4a      	ldr	r3, [pc, #296]	; (8019640 <forward_cast+0x3008>)
 8019516:	ee17 0a90 	vmov	r0, s15
 801951a:	f7ff bb01 	b.w	8018b20 <forward_cast+0x24e8>
 801951e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019522:	f7ff bafd 	b.w	8018b20 <forward_cast+0x24e8>
 8019526:	edd5 7a00 	vldr	s15, [r5]
 801952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801952e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019532:	ee17 0a90 	vmov	r0, s15
 8019536:	f7ff baf3 	b.w	8018b20 <forward_cast+0x24e8>
 801953a:	edd5 7a00 	vldr	s15, [r5]
 801953e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019546:	ee17 1a90 	vmov	r1, s15
 801954a:	b289      	uxth	r1, r1
 801954c:	f7fd bb08 	b.w	8016b60 <forward_cast+0x528>
 8019550:	edd5 7a00 	vldr	s15, [r5]
 8019554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801955c:	ee17 0a90 	vmov	r0, s15
 8019560:	f7fe b844 	b.w	80175ec <forward_cast+0xfb4>
 8019564:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019568:	f7fe b876 	b.w	8017658 <forward_cast+0x1020>
 801956c:	f995 0000 	ldrsb.w	r0, [r5]
 8019570:	f7fe b83c 	b.w	80175ec <forward_cast+0xfb4>
 8019574:	f995 1000 	ldrsb.w	r1, [r5]
 8019578:	f7fd bdd8 	b.w	801712c <forward_cast+0xaf4>
 801957c:	f995 1000 	ldrsb.w	r1, [r5]
 8019580:	b289      	uxth	r1, r1
 8019582:	f7fd b94b 	b.w	801681c <forward_cast+0x1e4>
 8019586:	f995 0000 	ldrsb.w	r0, [r5]
 801958a:	f7ff ba34 	b.w	80189f6 <forward_cast+0x23be>
 801958e:	edd5 7a00 	vldr	s15, [r5]
 8019592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801959a:	edcd 7a01 	vstr	s15, [sp, #4]
 801959e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80195a2:	f7ff b9cb 	b.w	801893c <forward_cast+0x2304>
 80195a6:	f995 0000 	ldrsb.w	r0, [r5]
 80195aa:	f7ff ba6d 	b.w	8018a88 <forward_cast+0x2450>
 80195ae:	edd5 7a00 	vldr	s15, [r5]
 80195b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80195b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80195ba:	ee17 0a90 	vmov	r0, s15
 80195be:	f7ff ba63 	b.w	8018a88 <forward_cast+0x2450>
 80195c2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80195c6:	f7e7 fbf7 	bl	8000db8 <__aeabi_ul2f>
 80195ca:	4b20      	ldr	r3, [pc, #128]	; (801964c <forward_cast+0x3014>)
 80195cc:	4a20      	ldr	r2, [pc, #128]	; (8019650 <forward_cast+0x3018>)
 80195ce:	ee07 0a90 	vmov	s15, r0
 80195d2:	f7fd bbed 	b.w	8016db0 <forward_cast+0x778>
 80195d6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80195da:	f7e7 fbed 	bl	8000db8 <__aeabi_ul2f>
 80195de:	ee07 0a90 	vmov	s15, r0
 80195e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80195e6:	4a17      	ldr	r2, [pc, #92]	; (8019644 <forward_cast+0x300c>)
 80195e8:	4b15      	ldr	r3, [pc, #84]	; (8019640 <forward_cast+0x3008>)
 80195ea:	ee17 0a90 	vmov	r0, s15
 80195ee:	f7fd bb45 	b.w	8016c7c <forward_cast+0x644>
 80195f2:	edd5 7a00 	vldr	s15, [r5]
 80195f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80195fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80195fe:	ee17 0a90 	vmov	r0, s15
 8019602:	f7fd bb3b 	b.w	8016c7c <forward_cast+0x644>
 8019606:	f9b5 1000 	ldrsh.w	r1, [r5]
 801960a:	3900      	subs	r1, #0
 801960c:	bf18      	it	ne
 801960e:	2101      	movne	r1, #1
 8019610:	f7fd bf0a 	b.w	8017428 <forward_cast+0xdf0>
 8019614:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019618:	f7e7 fbce 	bl	8000db8 <__aeabi_ul2f>
 801961c:	ee07 0a90 	vmov	s15, r0
 8019620:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019628:	4a06      	ldr	r2, [pc, #24]	; (8019644 <forward_cast+0x300c>)
 801962a:	4b05      	ldr	r3, [pc, #20]	; (8019640 <forward_cast+0x3008>)
 801962c:	bf14      	ite	ne
 801962e:	2101      	movne	r1, #1
 8019630:	2100      	moveq	r1, #0
 8019632:	f7fd bef9 	b.w	8017428 <forward_cast+0xdf0>
 8019636:	bf00      	nop
 8019638:	00841040 	.word	0x00841040
 801963c:	00041040 	.word	0x00041040
 8019640:	00042040 	.word	0x00042040
 8019644:	00060440 	.word	0x00060440
 8019648:	01821040 	.word	0x01821040
 801964c:	00842040 	.word	0x00842040
 8019650:	00840440 	.word	0x00840440
 8019654:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019658:	f7e7 fbae 	bl	8000db8 <__aeabi_ul2f>
 801965c:	ee07 0a90 	vmov	s15, r0
 8019660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019664:	4bdc      	ldr	r3, [pc, #880]	; (80199d8 <forward_cast+0x33a0>)
 8019666:	4add      	ldr	r2, [pc, #884]	; (80199dc <forward_cast+0x33a4>)
 8019668:	ee17 0a90 	vmov	r0, s15
 801966c:	f7fd bea1 	b.w	80173b2 <forward_cast+0xd7a>
 8019670:	edd5 7a00 	vldr	s15, [r5]
 8019674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801967c:	ee17 0a90 	vmov	r0, s15
 8019680:	f7fd be97 	b.w	80173b2 <forward_cast+0xd7a>
 8019684:	7828      	ldrb	r0, [r5, #0]
 8019686:	f7fd baf9 	b.w	8016c7c <forward_cast+0x644>
 801968a:	edd5 7a00 	vldr	s15, [r5]
 801968e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019692:	f7fd bb8d 	b.w	8016db0 <forward_cast+0x778>
 8019696:	7829      	ldrb	r1, [r5, #0]
 8019698:	ee07 1a90 	vmov	s15, r1
 801969c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80196a0:	f7fd bc51 	b.w	8016f46 <forward_cast+0x90e>
 80196a4:	edd5 7a00 	vldr	s15, [r5]
 80196a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80196ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80196b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196b4:	bf14      	ite	ne
 80196b6:	2101      	movne	r1, #1
 80196b8:	2100      	moveq	r1, #0
 80196ba:	f7fd beb5 	b.w	8017428 <forward_cast+0xdf0>
 80196be:	7829      	ldrb	r1, [r5, #0]
 80196c0:	ee07 1a90 	vmov	s15, r1
 80196c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80196c8:	f7fd bb72 	b.w	8016db0 <forward_cast+0x778>
 80196cc:	edd5 7a00 	vldr	s15, [r5]
 80196d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80196d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80196d8:	ee17 0a90 	vmov	r0, s15
 80196dc:	f7ff b98b 	b.w	80189f6 <forward_cast+0x23be>
 80196e0:	f9b5 0000 	ldrsh.w	r0, [r5]
 80196e4:	f7fd be65 	b.w	80173b2 <forward_cast+0xd7a>
 80196e8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80196ec:	f7e7 fb6c 	bl	8000dc8 <__aeabi_l2f>
 80196f0:	4abb      	ldr	r2, [pc, #748]	; (80199e0 <forward_cast+0x33a8>)
 80196f2:	4bbc      	ldr	r3, [pc, #752]	; (80199e4 <forward_cast+0x33ac>)
 80196f4:	ee07 0a90 	vmov	s15, r0
 80196f8:	f7fd bb5a 	b.w	8016db0 <forward_cast+0x778>
 80196fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019700:	f7e7 fb62 	bl	8000dc8 <__aeabi_l2f>
 8019704:	ee07 0a90 	vmov	s15, r0
 8019708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801970c:	4bb6      	ldr	r3, [pc, #728]	; (80199e8 <forward_cast+0x33b0>)
 801970e:	4ab7      	ldr	r2, [pc, #732]	; (80199ec <forward_cast+0x33b4>)
 8019710:	ee17 0a90 	vmov	r0, s15
 8019714:	f7fd b831 	b.w	801677a <forward_cast+0x142>
 8019718:	e9d5 0100 	ldrd	r0, r1, [r5]
 801971c:	f7e7 fb54 	bl	8000dc8 <__aeabi_l2f>
 8019720:	ee07 0a90 	vmov	s15, r0
 8019724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019728:	4aab      	ldr	r2, [pc, #684]	; (80199d8 <forward_cast+0x33a0>)
 801972a:	ee17 3a90 	vmov	r3, s15
 801972e:	b299      	uxth	r1, r3
 8019730:	4baf      	ldr	r3, [pc, #700]	; (80199f0 <forward_cast+0x33b8>)
 8019732:	f7fd b873 	b.w	801681c <forward_cast+0x1e4>
 8019736:	7828      	ldrb	r0, [r5, #0]
 8019738:	f7fd b8c1 	b.w	80168be <forward_cast+0x286>
 801973c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019740:	f7e7 fb42 	bl	8000dc8 <__aeabi_l2f>
 8019744:	ee07 0a90 	vmov	s15, r0
 8019748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801974c:	4ba6      	ldr	r3, [pc, #664]	; (80199e8 <forward_cast+0x33b0>)
 801974e:	4aa7      	ldr	r2, [pc, #668]	; (80199ec <forward_cast+0x33b4>)
 8019750:	ee17 0a90 	vmov	r0, s15
 8019754:	f7fd bd72 	b.w	801723c <forward_cast+0xc04>
 8019758:	f9b5 0000 	ldrsh.w	r0, [r5]
 801975c:	f7fd b80d 	b.w	801677a <forward_cast+0x142>
 8019760:	7829      	ldrb	r1, [r5, #0]
 8019762:	f7fd b85b 	b.w	801681c <forward_cast+0x1e4>
 8019766:	e9d5 0100 	ldrd	r0, r1, [r5]
 801976a:	9301      	str	r3, [sp, #4]
 801976c:	f7e7 fb2c 	bl	8000dc8 <__aeabi_l2f>
 8019770:	ee07 0a90 	vmov	s15, r0
 8019774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019778:	4a9c      	ldr	r2, [pc, #624]	; (80199ec <forward_cast+0x33b4>)
 801977a:	9b01      	ldr	r3, [sp, #4]
 801977c:	ee17 0a90 	vmov	r0, s15
 8019780:	f7fd ba2a 	b.w	8016bd8 <forward_cast+0x5a0>
 8019784:	f995 1000 	ldrsb.w	r1, [r5]
 8019788:	b289      	uxth	r1, r1
 801978a:	f7fd b9e9 	b.w	8016b60 <forward_cast+0x528>
 801978e:	f995 0000 	ldrsb.w	r0, [r5]
 8019792:	f7fd ba21 	b.w	8016bd8 <forward_cast+0x5a0>
 8019796:	e9d5 0100 	ldrd	r0, r1, [r5]
 801979a:	f7e7 fb15 	bl	8000dc8 <__aeabi_l2f>
 801979e:	ee07 0a90 	vmov	s15, r0
 80197a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197a6:	4b91      	ldr	r3, [pc, #580]	; (80199ec <forward_cast+0x33b4>)
 80197a8:	4a91      	ldr	r2, [pc, #580]	; (80199f0 <forward_cast+0x33b8>)
 80197aa:	ee17 0a90 	vmov	r0, s15
 80197ae:	f7fd b8e9 	b.w	8016984 <forward_cast+0x34c>
 80197b2:	f9b5 0000 	ldrsh.w	r0, [r5]
 80197b6:	f7fd bebf 	b.w	8017538 <forward_cast+0xf00>
 80197ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 80197be:	f7e7 fb03 	bl	8000dc8 <__aeabi_l2f>
 80197c2:	ee07 0a90 	vmov	s15, r0
 80197c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197ca:	4a84      	ldr	r2, [pc, #528]	; (80199dc <forward_cast+0x33a4>)
 80197cc:	4b82      	ldr	r3, [pc, #520]	; (80199d8 <forward_cast+0x33a0>)
 80197ce:	ee17 0a90 	vmov	r0, s15
 80197d2:	f7fd bdee 	b.w	80173b2 <forward_cast+0xd7a>
 80197d6:	f9b5 1000 	ldrsh.w	r1, [r5]
 80197da:	ee07 1a90 	vmov	s15, r1
 80197de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80197e2:	f7fd bbb0 	b.w	8016f46 <forward_cast+0x90e>
 80197e6:	edd5 7a00 	vldr	s15, [r5]
 80197ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80197ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197f2:	edcd 7a01 	vstr	s15, [sp, #4]
 80197f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80197fa:	f7ff b803 	b.w	8018804 <forward_cast+0x21cc>
 80197fe:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019802:	f7e7 fae1 	bl	8000dc8 <__aeabi_l2f>
 8019806:	ee07 0a90 	vmov	s15, r0
 801980a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801980e:	4b77      	ldr	r3, [pc, #476]	; (80199ec <forward_cast+0x33b4>)
 8019810:	edcd 7a01 	vstr	s15, [sp, #4]
 8019814:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8019818:	4a75      	ldr	r2, [pc, #468]	; (80199f0 <forward_cast+0x33b8>)
 801981a:	f7fe bff3 	b.w	8018804 <forward_cast+0x21cc>
 801981e:	f995 0000 	ldrsb.w	r0, [r5]
 8019822:	f7ff b839 	b.w	8018898 <forward_cast+0x2260>
 8019826:	edd5 7a00 	vldr	s15, [r5]
 801982a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801982e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019832:	ee17 0a90 	vmov	r0, s15
 8019836:	f7ff b82f 	b.w	8018898 <forward_cast+0x2260>
 801983a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801983e:	f7e7 fac3 	bl	8000dc8 <__aeabi_l2f>
 8019842:	ee07 0a90 	vmov	s15, r0
 8019846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801984a:	4b63      	ldr	r3, [pc, #396]	; (80199d8 <forward_cast+0x33a0>)
 801984c:	4a69      	ldr	r2, [pc, #420]	; (80199f4 <forward_cast+0x33bc>)
 801984e:	ee17 0a90 	vmov	r0, s15
 8019852:	f7ff b821 	b.w	8018898 <forward_cast+0x2260>
 8019856:	7828      	ldrb	r0, [r5, #0]
 8019858:	f7ff b81e 	b.w	8018898 <forward_cast+0x2260>
 801985c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019860:	f7e7 faaa 	bl	8000db8 <__aeabi_ul2f>
 8019864:	ee07 0a90 	vmov	s15, r0
 8019868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801986c:	4a61      	ldr	r2, [pc, #388]	; (80199f4 <forward_cast+0x33bc>)
 801986e:	4b5a      	ldr	r3, [pc, #360]	; (80199d8 <forward_cast+0x33a0>)
 8019870:	ee17 0a90 	vmov	r0, s15
 8019874:	f7ff b810 	b.w	8018898 <forward_cast+0x2260>
 8019878:	f9b5 0000 	ldrsh.w	r0, [r5]
 801987c:	f7ff b80c 	b.w	8018898 <forward_cast+0x2260>
 8019880:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019884:	f7e7 fa98 	bl	8000db8 <__aeabi_ul2f>
 8019888:	ee07 0a90 	vmov	s15, r0
 801988c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019890:	4a57      	ldr	r2, [pc, #348]	; (80199f0 <forward_cast+0x33b8>)
 8019892:	edcd 7a01 	vstr	s15, [sp, #4]
 8019896:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801989a:	4b54      	ldr	r3, [pc, #336]	; (80199ec <forward_cast+0x33b4>)
 801989c:	f7fe bfb2 	b.w	8018804 <forward_cast+0x21cc>
 80198a0:	edd5 7a00 	vldr	s15, [r5]
 80198a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80198a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80198ac:	ee17 0a90 	vmov	r0, s15
 80198b0:	f7fe bedb 	b.w	801866a <forward_cast+0x2032>
 80198b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80198b8:	f7e7 fa86 	bl	8000dc8 <__aeabi_l2f>
 80198bc:	ee07 0a90 	vmov	s15, r0
 80198c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80198c4:	4b44      	ldr	r3, [pc, #272]	; (80199d8 <forward_cast+0x33a0>)
 80198c6:	4a4b      	ldr	r2, [pc, #300]	; (80199f4 <forward_cast+0x33bc>)
 80198c8:	ee17 0a90 	vmov	r0, s15
 80198cc:	f7fd be8e 	b.w	80175ec <forward_cast+0xfb4>
 80198d0:	7828      	ldrb	r0, [r5, #0]
 80198d2:	f7fd bec1 	b.w	8017658 <forward_cast+0x1020>
 80198d6:	f995 0000 	ldrsb.w	r0, [r5]
 80198da:	f7fe bf2b 	b.w	8018734 <forward_cast+0x20fc>
 80198de:	edd5 7a00 	vldr	s15, [r5]
 80198e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80198e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80198ea:	ee17 0a90 	vmov	r0, s15
 80198ee:	f7fe bf21 	b.w	8018734 <forward_cast+0x20fc>
 80198f2:	7829      	ldrb	r1, [r5, #0]
 80198f4:	f7fd bc1a 	b.w	801712c <forward_cast+0xaf4>
 80198f8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80198fc:	f7e7 fa64 	bl	8000dc8 <__aeabi_l2f>
 8019900:	ee07 0a90 	vmov	s15, r0
 8019904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019908:	4b38      	ldr	r3, [pc, #224]	; (80199ec <forward_cast+0x33b4>)
 801990a:	edcd 7a01 	vstr	s15, [sp, #4]
 801990e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8019912:	4a37      	ldr	r2, [pc, #220]	; (80199f0 <forward_cast+0x33b8>)
 8019914:	f7fd ba84 	b.w	8016e20 <forward_cast+0x7e8>
 8019918:	edd5 7a00 	vldr	s15, [r5]
 801991c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019924:	ee17 0a90 	vmov	r0, s15
 8019928:	f7fe bb99 	b.w	801805e <forward_cast+0x1a26>
 801992c:	f995 1000 	ldrsb.w	r1, [r5]
 8019930:	b289      	uxth	r1, r1
 8019932:	f7fd b87f 	b.w	8016a34 <forward_cast+0x3fc>
 8019936:	f995 0000 	ldrsb.w	r0, [r5]
 801993a:	f7fe bb90 	b.w	801805e <forward_cast+0x1a26>
 801993e:	f995 0000 	ldrsb.w	r0, [r5]
 8019942:	f7fd bcf8 	b.w	8017336 <forward_cast+0xcfe>
 8019946:	e9d5 0100 	ldrd	r0, r1, [r5]
 801994a:	f7e7 fa3d 	bl	8000dc8 <__aeabi_l2f>
 801994e:	ee07 0a90 	vmov	s15, r0
 8019952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019956:	4b25      	ldr	r3, [pc, #148]	; (80199ec <forward_cast+0x33b4>)
 8019958:	4a26      	ldr	r2, [pc, #152]	; (80199f4 <forward_cast+0x33bc>)
 801995a:	ee17 0a90 	vmov	r0, s15
 801995e:	f7fe bbca 	b.w	80180f6 <forward_cast+0x1abe>
 8019962:	7828      	ldrb	r0, [r5, #0]
 8019964:	f7fe bbc7 	b.w	80180f6 <forward_cast+0x1abe>
 8019968:	e9d5 0100 	ldrd	r0, r1, [r5]
 801996c:	f7e7 fa24 	bl	8000db8 <__aeabi_ul2f>
 8019970:	ee07 0a90 	vmov	s15, r0
 8019974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019978:	4a1e      	ldr	r2, [pc, #120]	; (80199f4 <forward_cast+0x33bc>)
 801997a:	4b1c      	ldr	r3, [pc, #112]	; (80199ec <forward_cast+0x33b4>)
 801997c:	ee17 0a90 	vmov	r0, s15
 8019980:	f7fe bbb9 	b.w	80180f6 <forward_cast+0x1abe>
 8019984:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019988:	f7fe bbb5 	b.w	80180f6 <forward_cast+0x1abe>
 801998c:	f995 1000 	ldrsb.w	r1, [r5]
 8019990:	3900      	subs	r1, #0
 8019992:	bf18      	it	ne
 8019994:	2101      	movne	r1, #1
 8019996:	f7fe bc5d 	b.w	8018254 <forward_cast+0x1c1c>
 801999a:	f995 0000 	ldrsb.w	r0, [r5]
 801999e:	f7fd b893 	b.w	8016ac8 <forward_cast+0x490>
 80199a2:	f995 0000 	ldrsb.w	r0, [r5]
 80199a6:	f7fe bba6 	b.w	80180f6 <forward_cast+0x1abe>
 80199aa:	edd5 7a00 	vldr	s15, [r5]
 80199ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80199b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80199b6:	ee17 0a90 	vmov	r0, s15
 80199ba:	f7fe bb9c 	b.w	80180f6 <forward_cast+0x1abe>
 80199be:	edd5 7a00 	vldr	s15, [r5]
 80199c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80199c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80199ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199ce:	bf14      	ite	ne
 80199d0:	2101      	movne	r1, #1
 80199d2:	2100      	moveq	r1, #0
 80199d4:	f7fe bc3e 	b.w	8018254 <forward_cast+0x1c1c>
 80199d8:	00042040 	.word	0x00042040
 80199dc:	01821040 	.word	0x01821040
 80199e0:	00840440 	.word	0x00840440
 80199e4:	00842040 	.word	0x00842040
 80199e8:	00840840 	.word	0x00840840
 80199ec:	00841040 	.word	0x00841040
 80199f0:	00041040 	.word	0x00041040
 80199f4:	00060440 	.word	0x00060440
 80199f8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80199fc:	f7e7 f9e4 	bl	8000dc8 <__aeabi_l2f>
 8019a00:	ee07 0a90 	vmov	s15, r0
 8019a04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a0c:	4bd9      	ldr	r3, [pc, #868]	; (8019d74 <forward_cast+0x373c>)
 8019a0e:	4ada      	ldr	r2, [pc, #872]	; (8019d78 <forward_cast+0x3740>)
 8019a10:	bf14      	ite	ne
 8019a12:	2101      	movne	r1, #1
 8019a14:	2100      	moveq	r1, #0
 8019a16:	f7fe bc1d 	b.w	8018254 <forward_cast+0x1c1c>
 8019a1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019a1e:	f7e7 f9cb 	bl	8000db8 <__aeabi_ul2f>
 8019a22:	ee07 0a90 	vmov	s15, r0
 8019a26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a2e:	4ad2      	ldr	r2, [pc, #840]	; (8019d78 <forward_cast+0x3740>)
 8019a30:	4bd0      	ldr	r3, [pc, #832]	; (8019d74 <forward_cast+0x373c>)
 8019a32:	bf14      	ite	ne
 8019a34:	2101      	movne	r1, #1
 8019a36:	2100      	moveq	r1, #0
 8019a38:	f7fe bc0c 	b.w	8018254 <forward_cast+0x1c1c>
 8019a3c:	f9b5 1000 	ldrsh.w	r1, [r5]
 8019a40:	3900      	subs	r1, #0
 8019a42:	bf18      	it	ne
 8019a44:	2101      	movne	r1, #1
 8019a46:	f7fe bc05 	b.w	8018254 <forward_cast+0x1c1c>
 8019a4a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019a4e:	f7e7 f9bb 	bl	8000dc8 <__aeabi_l2f>
 8019a52:	ee07 0a90 	vmov	s15, r0
 8019a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a5a:	4bc8      	ldr	r3, [pc, #800]	; (8019d7c <forward_cast+0x3744>)
 8019a5c:	edcd 7a01 	vstr	s15, [sp, #4]
 8019a60:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8019a64:	4ac4      	ldr	r2, [pc, #784]	; (8019d78 <forward_cast+0x3740>)
 8019a66:	f7fe bba3 	b.w	80181b0 <forward_cast+0x1b78>
 8019a6a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019a6e:	f7e7 f9a3 	bl	8000db8 <__aeabi_ul2f>
 8019a72:	ee07 0a90 	vmov	s15, r0
 8019a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a7a:	4abf      	ldr	r2, [pc, #764]	; (8019d78 <forward_cast+0x3740>)
 8019a7c:	edcd 7a01 	vstr	s15, [sp, #4]
 8019a80:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8019a84:	4bbd      	ldr	r3, [pc, #756]	; (8019d7c <forward_cast+0x3744>)
 8019a86:	f7fe bb93 	b.w	80181b0 <forward_cast+0x1b78>
 8019a8a:	edd5 7a00 	vldr	s15, [r5]
 8019a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a96:	edcd 7a01 	vstr	s15, [sp, #4]
 8019a9a:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8019a9e:	f7fe bb87 	b.w	80181b0 <forward_cast+0x1b78>
 8019aa2:	f995 0000 	ldrsb.w	r0, [r5]
 8019aa6:	f7fd bcfa 	b.w	801749e <forward_cast+0xe66>
 8019aaa:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019aae:	f7e7 f983 	bl	8000db8 <__aeabi_ul2f>
 8019ab2:	ee07 0a90 	vmov	s15, r0
 8019ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019aba:	4aaf      	ldr	r2, [pc, #700]	; (8019d78 <forward_cast+0x3740>)
 8019abc:	ee17 3a90 	vmov	r3, s15
 8019ac0:	b219      	sxth	r1, r3
 8019ac2:	4bac      	ldr	r3, [pc, #688]	; (8019d74 <forward_cast+0x373c>)
 8019ac4:	f7fd baf6 	b.w	80170b4 <forward_cast+0xa7c>
 8019ac8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019acc:	f7e7 f974 	bl	8000db8 <__aeabi_ul2f>
 8019ad0:	ee07 0a90 	vmov	s15, r0
 8019ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ad8:	4aa6      	ldr	r2, [pc, #664]	; (8019d74 <forward_cast+0x373c>)
 8019ada:	4ba8      	ldr	r3, [pc, #672]	; (8019d7c <forward_cast+0x3744>)
 8019adc:	ee17 0a90 	vmov	r0, s15
 8019ae0:	f7fc bf50 	b.w	8016984 <forward_cast+0x34c>
 8019ae4:	edd5 7a00 	vldr	s15, [r5]
 8019ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019af0:	ee17 0a90 	vmov	r0, s15
 8019af4:	f7fc bf46 	b.w	8016984 <forward_cast+0x34c>
 8019af8:	7828      	ldrb	r0, [r5, #0]
 8019afa:	f7fd bc1c 	b.w	8017336 <forward_cast+0xcfe>
 8019afe:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019b02:	f7e7 f961 	bl	8000dc8 <__aeabi_l2f>
 8019b06:	ee07 0a90 	vmov	s15, r0
 8019b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b0e:	4a9a      	ldr	r2, [pc, #616]	; (8019d78 <forward_cast+0x3740>)
 8019b10:	ee17 3a90 	vmov	r3, s15
 8019b14:	b219      	sxth	r1, r3
 8019b16:	4b97      	ldr	r3, [pc, #604]	; (8019d74 <forward_cast+0x373c>)
 8019b18:	f7fd bb08 	b.w	801712c <forward_cast+0xaf4>
 8019b1c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019b20:	f7fd b85a 	b.w	8016bd8 <forward_cast+0x5a0>
 8019b24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019b28:	f7e7 f94e 	bl	8000dc8 <__aeabi_l2f>
 8019b2c:	ee07 0a90 	vmov	s15, r0
 8019b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b34:	4a90      	ldr	r2, [pc, #576]	; (8019d78 <forward_cast+0x3740>)
 8019b36:	ee17 3a90 	vmov	r3, s15
 8019b3a:	b219      	sxth	r1, r3
 8019b3c:	4b8d      	ldr	r3, [pc, #564]	; (8019d74 <forward_cast+0x373c>)
 8019b3e:	f7fd ba7d 	b.w	801703c <forward_cast+0xa04>
 8019b42:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019b46:	f7fd bb79 	b.w	801723c <forward_cast+0xc04>
 8019b4a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019b4e:	f7e7 f93b 	bl	8000dc8 <__aeabi_l2f>
 8019b52:	ee07 0a90 	vmov	s15, r0
 8019b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b5a:	4a89      	ldr	r2, [pc, #548]	; (8019d80 <forward_cast+0x3748>)
 8019b5c:	4b89      	ldr	r3, [pc, #548]	; (8019d84 <forward_cast+0x374c>)
 8019b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b62:	f7fd ba31 	b.w	8016fc8 <forward_cast+0x990>
 8019b66:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019b6a:	f7fd b887 	b.w	8016c7c <forward_cast+0x644>
 8019b6e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019b72:	f7e7 f929 	bl	8000dc8 <__aeabi_l2f>
 8019b76:	ee07 0a90 	vmov	s15, r0
 8019b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b7e:	4a7f      	ldr	r2, [pc, #508]	; (8019d7c <forward_cast+0x3744>)
 8019b80:	4b80      	ldr	r3, [pc, #512]	; (8019d84 <forward_cast+0x374c>)
 8019b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019b86:	f7fd b9de 	b.w	8016f46 <forward_cast+0x90e>
 8019b8a:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019b8e:	f7fc bf9b 	b.w	8016ac8 <forward_cast+0x490>
 8019b92:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019b96:	f7e7 f917 	bl	8000dc8 <__aeabi_l2f>
 8019b9a:	ee07 0a90 	vmov	s15, r0
 8019b9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ba6:	4b74      	ldr	r3, [pc, #464]	; (8019d78 <forward_cast+0x3740>)
 8019ba8:	4a77      	ldr	r2, [pc, #476]	; (8019d88 <forward_cast+0x3750>)
 8019baa:	bf14      	ite	ne
 8019bac:	2101      	movne	r1, #1
 8019bae:	2100      	moveq	r1, #0
 8019bb0:	f7fd bc3a 	b.w	8017428 <forward_cast+0xdf0>
 8019bb4:	edd5 7a00 	vldr	s15, [r5]
 8019bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019bc0:	ee17 0a90 	vmov	r0, s15
 8019bc4:	f7fd bcb8 	b.w	8017538 <forward_cast+0xf00>
 8019bc8:	edd5 7a00 	vldr	s15, [r5]
 8019bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019bd4:	ee17 1a90 	vmov	r1, s15
 8019bd8:	b209      	sxth	r1, r1
 8019bda:	f7fd ba6b 	b.w	80170b4 <forward_cast+0xa7c>
 8019bde:	7829      	ldrb	r1, [r5, #0]
 8019be0:	ee07 1a90 	vmov	s15, r1
 8019be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019be8:	f7fd b9ee 	b.w	8016fc8 <forward_cast+0x990>
 8019bec:	f995 0000 	ldrsb.w	r0, [r5]
 8019bf0:	f7fd b884 	b.w	8016cfc <forward_cast+0x6c4>
 8019bf4:	f995 0000 	ldrsb.w	r0, [r5]
 8019bf8:	f7fc bec4 	b.w	8016984 <forward_cast+0x34c>
 8019bfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019c00:	f7e7 f8e2 	bl	8000dc8 <__aeabi_l2f>
 8019c04:	ee07 0a90 	vmov	s15, r0
 8019c08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c0c:	4a5a      	ldr	r2, [pc, #360]	; (8019d78 <forward_cast+0x3740>)
 8019c0e:	ee17 3a90 	vmov	r3, s15
 8019c12:	b219      	sxth	r1, r3
 8019c14:	4b57      	ldr	r3, [pc, #348]	; (8019d74 <forward_cast+0x373c>)
 8019c16:	f7fd ba4d 	b.w	80170b4 <forward_cast+0xa7c>
 8019c1a:	7828      	ldrb	r0, [r5, #0]
 8019c1c:	f7fc bf54 	b.w	8016ac8 <forward_cast+0x490>
 8019c20:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019c24:	f7e7 f8c8 	bl	8000db8 <__aeabi_ul2f>
 8019c28:	ee07 0a90 	vmov	s15, r0
 8019c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c30:	4a55      	ldr	r2, [pc, #340]	; (8019d88 <forward_cast+0x3750>)
 8019c32:	4b51      	ldr	r3, [pc, #324]	; (8019d78 <forward_cast+0x3740>)
 8019c34:	ee17 0a90 	vmov	r0, s15
 8019c38:	f7fd bc7e 	b.w	8017538 <forward_cast+0xf00>
 8019c3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019c40:	f7e7 f8ba 	bl	8000db8 <__aeabi_ul2f>
 8019c44:	ee07 0a90 	vmov	s15, r0
 8019c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c4c:	4a4a      	ldr	r2, [pc, #296]	; (8019d78 <forward_cast+0x3740>)
 8019c4e:	ee17 3a90 	vmov	r3, s15
 8019c52:	b219      	sxth	r1, r3
 8019c54:	4b47      	ldr	r3, [pc, #284]	; (8019d74 <forward_cast+0x373c>)
 8019c56:	f7fd b9f1 	b.w	801703c <forward_cast+0xa04>
 8019c5a:	edd5 7a00 	vldr	s15, [r5]
 8019c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c66:	ee17 1a90 	vmov	r1, s15
 8019c6a:	b209      	sxth	r1, r1
 8019c6c:	f7fd b9e6 	b.w	801703c <forward_cast+0xa04>
 8019c70:	7828      	ldrb	r0, [r5, #0]
 8019c72:	f7fd bc14 	b.w	801749e <forward_cast+0xe66>
 8019c76:	f995 0000 	ldrsb.w	r0, [r5]
 8019c7a:	f7fd bc5d 	b.w	8017538 <forward_cast+0xf00>
 8019c7e:	f995 1000 	ldrsb.w	r1, [r5]
 8019c82:	f7fd b9db 	b.w	801703c <forward_cast+0xa04>
 8019c86:	f995 1000 	ldrsb.w	r1, [r5]
 8019c8a:	f7fd ba13 	b.w	80170b4 <forward_cast+0xa7c>
 8019c8e:	f995 0000 	ldrsb.w	r0, [r5]
 8019c92:	f7fd bad3 	b.w	801723c <forward_cast+0xc04>
 8019c96:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019c9a:	f7e7 f88d 	bl	8000db8 <__aeabi_ul2f>
 8019c9e:	ee07 0a90 	vmov	s15, r0
 8019ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ca6:	4a34      	ldr	r2, [pc, #208]	; (8019d78 <forward_cast+0x3740>)
 8019ca8:	ee17 3a90 	vmov	r3, s15
 8019cac:	b219      	sxth	r1, r3
 8019cae:	4b31      	ldr	r3, [pc, #196]	; (8019d74 <forward_cast+0x373c>)
 8019cb0:	f7fd ba3c 	b.w	801712c <forward_cast+0xaf4>
 8019cb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019cb8:	f7e7 f87e 	bl	8000db8 <__aeabi_ul2f>
 8019cbc:	ee07 0a90 	vmov	s15, r0
 8019cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019cc4:	4a2c      	ldr	r2, [pc, #176]	; (8019d78 <forward_cast+0x3740>)
 8019cc6:	ee17 3a90 	vmov	r3, s15
 8019cca:	b299      	uxth	r1, r3
 8019ccc:	4b29      	ldr	r3, [pc, #164]	; (8019d74 <forward_cast+0x373c>)
 8019cce:	f7fc bda5 	b.w	801681c <forward_cast+0x1e4>
 8019cd2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019cd6:	f7e7 f877 	bl	8000dc8 <__aeabi_l2f>
 8019cda:	ee07 0a90 	vmov	s15, r0
 8019cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ce2:	4b26      	ldr	r3, [pc, #152]	; (8019d7c <forward_cast+0x3744>)
 8019ce4:	4a29      	ldr	r2, [pc, #164]	; (8019d8c <forward_cast+0x3754>)
 8019ce6:	ee17 0a90 	vmov	r0, s15
 8019cea:	f7fd bd22 	b.w	8017732 <forward_cast+0x10fa>
 8019cee:	edd5 7a00 	vldr	s15, [r5]
 8019cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019cfa:	ee17 0a90 	vmov	r0, s15
 8019cfe:	f7fd bcab 	b.w	8017658 <forward_cast+0x1020>
 8019d02:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019d06:	f7e7 f85f 	bl	8000dc8 <__aeabi_l2f>
 8019d0a:	ee07 0a90 	vmov	s15, r0
 8019d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d12:	4b19      	ldr	r3, [pc, #100]	; (8019d78 <forward_cast+0x3740>)
 8019d14:	4a1c      	ldr	r2, [pc, #112]	; (8019d88 <forward_cast+0x3750>)
 8019d16:	ee17 0a90 	vmov	r0, s15
 8019d1a:	f7fe b902 	b.w	8017f22 <forward_cast+0x18ea>
 8019d1e:	7828      	ldrb	r0, [r5, #0]
 8019d20:	f7fe b8ff 	b.w	8017f22 <forward_cast+0x18ea>
 8019d24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019d28:	f7e7 f846 	bl	8000db8 <__aeabi_ul2f>
 8019d2c:	ee07 0a90 	vmov	s15, r0
 8019d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d34:	4a14      	ldr	r2, [pc, #80]	; (8019d88 <forward_cast+0x3750>)
 8019d36:	4b10      	ldr	r3, [pc, #64]	; (8019d78 <forward_cast+0x3740>)
 8019d38:	ee17 0a90 	vmov	r0, s15
 8019d3c:	f7fe b8f1 	b.w	8017f22 <forward_cast+0x18ea>
 8019d40:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019d44:	f7fe b8ed 	b.w	8017f22 <forward_cast+0x18ea>
 8019d48:	f995 0000 	ldrsb.w	r0, [r5]
 8019d4c:	f7fe b8e9 	b.w	8017f22 <forward_cast+0x18ea>
 8019d50:	f995 0000 	ldrsb.w	r0, [r5]
 8019d54:	f7fc bd11 	b.w	801677a <forward_cast+0x142>
 8019d58:	f995 0000 	ldrsb.w	r0, [r5]
 8019d5c:	f7fe b930 	b.w	8017fc0 <forward_cast+0x1988>
 8019d60:	edd5 7a00 	vldr	s15, [r5]
 8019d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d6c:	ee17 0a90 	vmov	r0, s15
 8019d70:	f7fe b926 	b.w	8017fc0 <forward_cast+0x1988>
 8019d74:	00041040 	.word	0x00041040
 8019d78:	00042040 	.word	0x00042040
 8019d7c:	00841040 	.word	0x00841040
 8019d80:	00842040 	.word	0x00842040
 8019d84:	00840840 	.word	0x00840840
 8019d88:	00060440 	.word	0x00060440
 8019d8c:	01821040 	.word	0x01821040
 8019d90:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019d94:	f7e7 f818 	bl	8000dc8 <__aeabi_l2f>
 8019d98:	ee07 0a90 	vmov	s15, r0
 8019d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019da0:	4be2      	ldr	r3, [pc, #904]	; (801a12c <forward_cast+0x3af4>)
 8019da2:	4ae3      	ldr	r2, [pc, #908]	; (801a130 <forward_cast+0x3af8>)
 8019da4:	ee17 0a90 	vmov	r0, s15
 8019da8:	f7fe b90a 	b.w	8017fc0 <forward_cast+0x1988>
 8019dac:	7828      	ldrb	r0, [r5, #0]
 8019dae:	f7fe b907 	b.w	8017fc0 <forward_cast+0x1988>
 8019db2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019db6:	f7e6 ffff 	bl	8000db8 <__aeabi_ul2f>
 8019dba:	ee07 0a90 	vmov	s15, r0
 8019dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019dc2:	4adb      	ldr	r2, [pc, #876]	; (801a130 <forward_cast+0x3af8>)
 8019dc4:	4bd9      	ldr	r3, [pc, #868]	; (801a12c <forward_cast+0x3af4>)
 8019dc6:	ee17 0a90 	vmov	r0, s15
 8019dca:	f7fe b8f9 	b.w	8017fc0 <forward_cast+0x1988>
 8019dce:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019dd2:	f7fe b8f5 	b.w	8017fc0 <forward_cast+0x1988>
 8019dd6:	edd5 7a00 	vldr	s15, [r5]
 8019dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019de2:	ee17 0a90 	vmov	r0, s15
 8019de6:	f7fe b89c 	b.w	8017f22 <forward_cast+0x18ea>
 8019dea:	f995 1000 	ldrsb.w	r1, [r5]
 8019dee:	ee07 1a90 	vmov	s15, r1
 8019df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019df6:	f7fd b8e7 	b.w	8016fc8 <forward_cast+0x990>
 8019dfa:	edd5 7a00 	vldr	s15, [r5]
 8019dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e06:	ee17 1a90 	vmov	r1, s15
 8019e0a:	b209      	sxth	r1, r1
 8019e0c:	f7fd b98e 	b.w	801712c <forward_cast+0xaf4>
 8019e10:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019e14:	f7fd bc8d 	b.w	8017732 <forward_cast+0x10fa>
 8019e18:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019e1c:	f7e6 ffcc 	bl	8000db8 <__aeabi_ul2f>
 8019e20:	ee07 0a90 	vmov	s15, r0
 8019e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e28:	4ac1      	ldr	r2, [pc, #772]	; (801a130 <forward_cast+0x3af8>)
 8019e2a:	ee17 3a90 	vmov	r3, s15
 8019e2e:	b299      	uxth	r1, r3
 8019e30:	4bbe      	ldr	r3, [pc, #760]	; (801a12c <forward_cast+0x3af4>)
 8019e32:	f7fc bdff 	b.w	8016a34 <forward_cast+0x3fc>
 8019e36:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019e3a:	f7e6 ffbd 	bl	8000db8 <__aeabi_ul2f>
 8019e3e:	ee07 0a90 	vmov	s15, r0
 8019e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e46:	4bbb      	ldr	r3, [pc, #748]	; (801a134 <forward_cast+0x3afc>)
 8019e48:	4abb      	ldr	r2, [pc, #748]	; (801a138 <forward_cast+0x3b00>)
 8019e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e4e:	f7fd b8bb 	b.w	8016fc8 <forward_cast+0x990>
 8019e52:	edd5 7a00 	vldr	s15, [r5]
 8019e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e62:	f7fd b8b1 	b.w	8016fc8 <forward_cast+0x990>
 8019e66:	7828      	ldrb	r0, [r5, #0]
 8019e68:	f7fc bd8c 	b.w	8016984 <forward_cast+0x34c>
 8019e6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019e70:	f7e6 ffa2 	bl	8000db8 <__aeabi_ul2f>
 8019e74:	ee07 0a90 	vmov	s15, r0
 8019e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e7c:	4aaf      	ldr	r2, [pc, #700]	; (801a13c <forward_cast+0x3b04>)
 8019e7e:	4bac      	ldr	r3, [pc, #688]	; (801a130 <forward_cast+0x3af8>)
 8019e80:	ee17 0a90 	vmov	r0, s15
 8019e84:	f7fd bb0b 	b.w	801749e <forward_cast+0xe66>
 8019e88:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019e8c:	f7e6 ff94 	bl	8000db8 <__aeabi_ul2f>
 8019e90:	ee07 0a90 	vmov	s15, r0
 8019e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e98:	4ba6      	ldr	r3, [pc, #664]	; (801a134 <forward_cast+0x3afc>)
 8019e9a:	4aa9      	ldr	r2, [pc, #676]	; (801a140 <forward_cast+0x3b08>)
 8019e9c:	ee17 0a90 	vmov	r0, s15
 8019ea0:	f7fc be12 	b.w	8016ac8 <forward_cast+0x490>
 8019ea4:	edd5 7a00 	vldr	s15, [r5]
 8019ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019eb0:	ee17 0a90 	vmov	r0, s15
 8019eb4:	f7fc be08 	b.w	8016ac8 <forward_cast+0x490>
 8019eb8:	7828      	ldrb	r0, [r5, #0]
 8019eba:	f7fd b9bf 	b.w	801723c <forward_cast+0xc04>
 8019ebe:	edd5 7a00 	vldr	s15, [r5]
 8019ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019eca:	ee17 1a90 	vmov	r1, s15
 8019ece:	b289      	uxth	r1, r1
 8019ed0:	f7fc bdb0 	b.w	8016a34 <forward_cast+0x3fc>
 8019ed4:	7829      	ldrb	r1, [r5, #0]
 8019ed6:	f7fd b8b1 	b.w	801703c <forward_cast+0xa04>
 8019eda:	edd5 7a00 	vldr	s15, [r5]
 8019ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ee6:	ee17 0a90 	vmov	r0, s15
 8019eea:	f7fd bad8 	b.w	801749e <forward_cast+0xe66>
 8019eee:	7828      	ldrb	r0, [r5, #0]
 8019ef0:	f7fc bf04 	b.w	8016cfc <forward_cast+0x6c4>
 8019ef4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019ef8:	f7e6 ff5e 	bl	8000db8 <__aeabi_ul2f>
 8019efc:	ee07 0a90 	vmov	s15, r0
 8019f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f04:	4a89      	ldr	r2, [pc, #548]	; (801a12c <forward_cast+0x3af4>)
 8019f06:	4b8f      	ldr	r3, [pc, #572]	; (801a144 <forward_cast+0x3b0c>)
 8019f08:	ee17 0a90 	vmov	r0, s15
 8019f0c:	f7fc bef6 	b.w	8016cfc <forward_cast+0x6c4>
 8019f10:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019f14:	f7e6 ff50 	bl	8000db8 <__aeabi_ul2f>
 8019f18:	ee07 0a90 	vmov	s15, r0
 8019f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f20:	4a88      	ldr	r2, [pc, #544]	; (801a144 <forward_cast+0x3b0c>)
 8019f22:	4b84      	ldr	r3, [pc, #528]	; (801a134 <forward_cast+0x3afc>)
 8019f24:	ee17 0a90 	vmov	r0, s15
 8019f28:	f7fd b988 	b.w	801723c <forward_cast+0xc04>
 8019f2c:	edd5 7a00 	vldr	s15, [r5]
 8019f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f38:	ee17 0a90 	vmov	r0, s15
 8019f3c:	f7fd b97e 	b.w	801723c <forward_cast+0xc04>
 8019f40:	7829      	ldrb	r1, [r5, #0]
 8019f42:	f7fc bd77 	b.w	8016a34 <forward_cast+0x3fc>
 8019f46:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019f4a:	f7e6 ff35 	bl	8000db8 <__aeabi_ul2f>
 8019f4e:	ee07 0a90 	vmov	s15, r0
 8019f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f56:	4a7b      	ldr	r2, [pc, #492]	; (801a144 <forward_cast+0x3b0c>)
 8019f58:	4b76      	ldr	r3, [pc, #472]	; (801a134 <forward_cast+0x3afc>)
 8019f5a:	ee17 0a90 	vmov	r0, s15
 8019f5e:	f7fc bc0c 	b.w	801677a <forward_cast+0x142>
 8019f62:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019f66:	f7e6 ff27 	bl	8000db8 <__aeabi_ul2f>
 8019f6a:	ee07 0a90 	vmov	s15, r0
 8019f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f72:	4a6f      	ldr	r2, [pc, #444]	; (801a130 <forward_cast+0x3af8>)
 8019f74:	4b6d      	ldr	r3, [pc, #436]	; (801a12c <forward_cast+0x3af4>)
 8019f76:	ee17 0a90 	vmov	r0, s15
 8019f7a:	f7fd b9dc 	b.w	8017336 <forward_cast+0xcfe>
 8019f7e:	edd5 7a00 	vldr	s15, [r5]
 8019f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f8a:	ee17 0a90 	vmov	r0, s15
 8019f8e:	f7fd b9d2 	b.w	8017336 <forward_cast+0xcfe>
 8019f92:	7828      	ldrb	r0, [r5, #0]
 8019f94:	f7fd ba0d 	b.w	80173b2 <forward_cast+0xd7a>
 8019f98:	edd5 7a00 	vldr	s15, [r5]
 8019f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019fa4:	ee17 0a90 	vmov	r0, s15
 8019fa8:	f7fc bea8 	b.w	8016cfc <forward_cast+0x6c4>
 8019fac:	7828      	ldrb	r0, [r5, #0]
 8019fae:	f7fc bbe4 	b.w	801677a <forward_cast+0x142>
 8019fb2:	edd5 7a00 	vldr	s15, [r5]
 8019fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019fbe:	ee17 0a90 	vmov	r0, s15
 8019fc2:	f7fc bbda 	b.w	801677a <forward_cast+0x142>
 8019fc6:	7829      	ldrb	r1, [r5, #0]
 8019fc8:	f7fd b874 	b.w	80170b4 <forward_cast+0xa7c>
 8019fcc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019fd0:	f7e6 fefa 	bl	8000dc8 <__aeabi_l2f>
 8019fd4:	ee07 0a90 	vmov	s15, r0
 8019fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019fdc:	4b53      	ldr	r3, [pc, #332]	; (801a12c <forward_cast+0x3af4>)
 8019fde:	4a54      	ldr	r2, [pc, #336]	; (801a130 <forward_cast+0x3af8>)
 8019fe0:	ee17 0a90 	vmov	r0, s15
 8019fe4:	f7fe b83b 	b.w	801805e <forward_cast+0x1a26>
 8019fe8:	7828      	ldrb	r0, [r5, #0]
 8019fea:	f7fe b838 	b.w	801805e <forward_cast+0x1a26>
 8019fee:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019ff2:	f7e6 fee1 	bl	8000db8 <__aeabi_ul2f>
 8019ff6:	ee07 0a90 	vmov	s15, r0
 8019ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ffe:	4a4c      	ldr	r2, [pc, #304]	; (801a130 <forward_cast+0x3af8>)
 801a000:	4b4a      	ldr	r3, [pc, #296]	; (801a12c <forward_cast+0x3af4>)
 801a002:	ee17 0a90 	vmov	r0, s15
 801a006:	f7fe b82a 	b.w	801805e <forward_cast+0x1a26>
 801a00a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a00e:	f7fe b826 	b.w	801805e <forward_cast+0x1a26>
 801a012:	f995 0000 	ldrsb.w	r0, [r5]
 801a016:	f7fe ba89 	b.w	801852c <forward_cast+0x1ef4>
 801a01a:	edd5 7a00 	vldr	s15, [r5]
 801a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a026:	ee17 0a90 	vmov	r0, s15
 801a02a:	f7fe b9cd 	b.w	80183c8 <forward_cast+0x1d90>
 801a02e:	f995 0000 	ldrsb.w	r0, [r5]
 801a032:	f7fe bacb 	b.w	80185cc <forward_cast+0x1f94>
 801a036:	edd5 7a00 	vldr	s15, [r5]
 801a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a03e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a042:	ee17 0a90 	vmov	r0, s15
 801a046:	f7fe bac1 	b.w	80185cc <forward_cast+0x1f94>
 801a04a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a04e:	f7e6 febb 	bl	8000dc8 <__aeabi_l2f>
 801a052:	ee07 0a90 	vmov	s15, r0
 801a056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a05a:	4b36      	ldr	r3, [pc, #216]	; (801a134 <forward_cast+0x3afc>)
 801a05c:	4a39      	ldr	r2, [pc, #228]	; (801a144 <forward_cast+0x3b0c>)
 801a05e:	ee17 0a90 	vmov	r0, s15
 801a062:	f7fe bab3 	b.w	80185cc <forward_cast+0x1f94>
 801a066:	7828      	ldrb	r0, [r5, #0]
 801a068:	f7fe bab0 	b.w	80185cc <forward_cast+0x1f94>
 801a06c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a070:	f7e6 fea2 	bl	8000db8 <__aeabi_ul2f>
 801a074:	ee07 0a90 	vmov	s15, r0
 801a078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a07c:	4a31      	ldr	r2, [pc, #196]	; (801a144 <forward_cast+0x3b0c>)
 801a07e:	4b2d      	ldr	r3, [pc, #180]	; (801a134 <forward_cast+0x3afc>)
 801a080:	ee17 0a90 	vmov	r0, s15
 801a084:	f7fe baa2 	b.w	80185cc <forward_cast+0x1f94>
 801a088:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a08c:	f7fe ba9e 	b.w	80185cc <forward_cast+0x1f94>
 801a090:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a094:	f7e6 fe98 	bl	8000dc8 <__aeabi_l2f>
 801a098:	ee07 0a90 	vmov	s15, r0
 801a09c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a0a0:	4b23      	ldr	r3, [pc, #140]	; (801a130 <forward_cast+0x3af8>)
 801a0a2:	4a26      	ldr	r2, [pc, #152]	; (801a13c <forward_cast+0x3b04>)
 801a0a4:	ee17 0a90 	vmov	r0, s15
 801a0a8:	f7fd b9f9 	b.w	801749e <forward_cast+0xe66>
 801a0ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a0b0:	f7e6 fe8a 	bl	8000dc8 <__aeabi_l2f>
 801a0b4:	ee07 0a90 	vmov	s15, r0
 801a0b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a0bc:	4a20      	ldr	r2, [pc, #128]	; (801a140 <forward_cast+0x3b08>)
 801a0be:	4b1d      	ldr	r3, [pc, #116]	; (801a134 <forward_cast+0x3afc>)
 801a0c0:	ee17 0a90 	vmov	r0, s15
 801a0c4:	f7fc bd00 	b.w	8016ac8 <forward_cast+0x490>
 801a0c8:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a0cc:	f7e6 fe7c 	bl	8000dc8 <__aeabi_l2f>
 801a0d0:	ee07 0a90 	vmov	s15, r0
 801a0d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a0d8:	4a15      	ldr	r2, [pc, #84]	; (801a130 <forward_cast+0x3af8>)
 801a0da:	ee17 3a90 	vmov	r3, s15
 801a0de:	b299      	uxth	r1, r3
 801a0e0:	4b12      	ldr	r3, [pc, #72]	; (801a12c <forward_cast+0x3af4>)
 801a0e2:	f7fc bd3d 	b.w	8016b60 <forward_cast+0x528>
 801a0e6:	7828      	ldrb	r0, [r5, #0]
 801a0e8:	f7fc bd76 	b.w	8016bd8 <forward_cast+0x5a0>
 801a0ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a0f0:	f7e6 fe6a 	bl	8000dc8 <__aeabi_l2f>
 801a0f4:	ee07 0a90 	vmov	s15, r0
 801a0f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a0fc:	4b0b      	ldr	r3, [pc, #44]	; (801a12c <forward_cast+0x3af4>)
 801a0fe:	4a0c      	ldr	r2, [pc, #48]	; (801a130 <forward_cast+0x3af8>)
 801a100:	ee17 0a90 	vmov	r0, s15
 801a104:	f7fe b911 	b.w	801832a <forward_cast+0x1cf2>
 801a108:	7828      	ldrb	r0, [r5, #0]
 801a10a:	f7fe b90e 	b.w	801832a <forward_cast+0x1cf2>
 801a10e:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a112:	f7e6 fe51 	bl	8000db8 <__aeabi_ul2f>
 801a116:	ee07 0a90 	vmov	s15, r0
 801a11a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a11e:	4a04      	ldr	r2, [pc, #16]	; (801a130 <forward_cast+0x3af8>)
 801a120:	4b02      	ldr	r3, [pc, #8]	; (801a12c <forward_cast+0x3af4>)
 801a122:	ee17 0a90 	vmov	r0, s15
 801a126:	f7fe b900 	b.w	801832a <forward_cast+0x1cf2>
 801a12a:	bf00      	nop
 801a12c:	00041040 	.word	0x00041040
 801a130:	00042040 	.word	0x00042040
 801a134:	00840840 	.word	0x00840840
 801a138:	00842040 	.word	0x00842040
 801a13c:	00060440 	.word	0x00060440
 801a140:	00040440 	.word	0x00040440
 801a144:	00841040 	.word	0x00841040
 801a148:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a14c:	f7fe b8ed 	b.w	801832a <forward_cast+0x1cf2>
 801a150:	f995 0000 	ldrsb.w	r0, [r5]
 801a154:	f7fe b938 	b.w	80183c8 <forward_cast+0x1d90>
 801a158:	f995 0000 	ldrsb.w	r0, [r5]
 801a15c:	f7fe b8e5 	b.w	801832a <forward_cast+0x1cf2>
 801a160:	edd5 7a00 	vldr	s15, [r5]
 801a164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a16c:	ee17 0a90 	vmov	r0, s15
 801a170:	f7fe b8db 	b.w	801832a <forward_cast+0x1cf2>
 801a174:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a178:	f7e6 fe26 	bl	8000dc8 <__aeabi_l2f>
 801a17c:	ee07 0a90 	vmov	s15, r0
 801a180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a184:	4bc7      	ldr	r3, [pc, #796]	; (801a4a4 <forward_cast+0x3e6c>)
 801a186:	4ac8      	ldr	r2, [pc, #800]	; (801a4a8 <forward_cast+0x3e70>)
 801a188:	ee17 0a90 	vmov	r0, s15
 801a18c:	f7fe b91c 	b.w	80183c8 <forward_cast+0x1d90>
 801a190:	7828      	ldrb	r0, [r5, #0]
 801a192:	f7fe b919 	b.w	80183c8 <forward_cast+0x1d90>
 801a196:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a19a:	f7e6 fe0d 	bl	8000db8 <__aeabi_ul2f>
 801a19e:	ee07 0a90 	vmov	s15, r0
 801a1a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a1a6:	4ac0      	ldr	r2, [pc, #768]	; (801a4a8 <forward_cast+0x3e70>)
 801a1a8:	4bbe      	ldr	r3, [pc, #760]	; (801a4a4 <forward_cast+0x3e6c>)
 801a1aa:	ee17 0a90 	vmov	r0, s15
 801a1ae:	f7fe b90b 	b.w	80183c8 <forward_cast+0x1d90>
 801a1b2:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a1b6:	f7fe b907 	b.w	80183c8 <forward_cast+0x1d90>
 801a1ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a1be:	f7e6 fe03 	bl	8000dc8 <__aeabi_l2f>
 801a1c2:	ee07 0a90 	vmov	s15, r0
 801a1c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a1ca:	4bb7      	ldr	r3, [pc, #732]	; (801a4a8 <forward_cast+0x3e70>)
 801a1cc:	4ab5      	ldr	r2, [pc, #724]	; (801a4a4 <forward_cast+0x3e6c>)
 801a1ce:	ee17 0a90 	vmov	r0, s15
 801a1d2:	f7fe b95d 	b.w	8018490 <forward_cast+0x1e58>
 801a1d6:	7828      	ldrb	r0, [r5, #0]
 801a1d8:	f7fe b95a 	b.w	8018490 <forward_cast+0x1e58>
 801a1dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a1e0:	f7e6 fdea 	bl	8000db8 <__aeabi_ul2f>
 801a1e4:	ee07 0a90 	vmov	s15, r0
 801a1e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a1ec:	4aad      	ldr	r2, [pc, #692]	; (801a4a4 <forward_cast+0x3e6c>)
 801a1ee:	4bae      	ldr	r3, [pc, #696]	; (801a4a8 <forward_cast+0x3e70>)
 801a1f0:	ee17 0a90 	vmov	r0, s15
 801a1f4:	f7fe b94c 	b.w	8018490 <forward_cast+0x1e58>
 801a1f8:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a1fc:	f7fe b948 	b.w	8018490 <forward_cast+0x1e58>
 801a200:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a204:	f7e6 fde0 	bl	8000dc8 <__aeabi_l2f>
 801a208:	ee07 0a90 	vmov	s15, r0
 801a20c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a210:	4ba4      	ldr	r3, [pc, #656]	; (801a4a4 <forward_cast+0x3e6c>)
 801a212:	4aa6      	ldr	r2, [pc, #664]	; (801a4ac <forward_cast+0x3e74>)
 801a214:	ee17 0a90 	vmov	r0, s15
 801a218:	f7fe b988 	b.w	801852c <forward_cast+0x1ef4>
 801a21c:	7828      	ldrb	r0, [r5, #0]
 801a21e:	f7fe b985 	b.w	801852c <forward_cast+0x1ef4>
 801a222:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a226:	f7e6 fdc7 	bl	8000db8 <__aeabi_ul2f>
 801a22a:	ee07 0a90 	vmov	s15, r0
 801a22e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a232:	4a9e      	ldr	r2, [pc, #632]	; (801a4ac <forward_cast+0x3e74>)
 801a234:	4b9b      	ldr	r3, [pc, #620]	; (801a4a4 <forward_cast+0x3e6c>)
 801a236:	ee17 0a90 	vmov	r0, s15
 801a23a:	f7fe b977 	b.w	801852c <forward_cast+0x1ef4>
 801a23e:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a242:	f7fe b973 	b.w	801852c <forward_cast+0x1ef4>
 801a246:	f995 0000 	ldrsb.w	r0, [r5]
 801a24a:	f7fe b921 	b.w	8018490 <forward_cast+0x1e58>
 801a24e:	edd5 7a00 	vldr	s15, [r5]
 801a252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a25a:	ee17 0a90 	vmov	r0, s15
 801a25e:	f7fe b917 	b.w	8018490 <forward_cast+0x1e58>
 801a262:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a266:	f7e6 fdaf 	bl	8000dc8 <__aeabi_l2f>
 801a26a:	ee07 0a90 	vmov	s15, r0
 801a26e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a272:	4b8d      	ldr	r3, [pc, #564]	; (801a4a8 <forward_cast+0x3e70>)
 801a274:	4a8b      	ldr	r2, [pc, #556]	; (801a4a4 <forward_cast+0x3e6c>)
 801a276:	ee17 0a90 	vmov	r0, s15
 801a27a:	f7fc bb20 	b.w	80168be <forward_cast+0x286>
 801a27e:	7828      	ldrb	r0, [r5, #0]
 801a280:	f7fd b9b4 	b.w	80175ec <forward_cast+0xfb4>
 801a284:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a288:	f7e6 fd9e 	bl	8000dc8 <__aeabi_l2f>
 801a28c:	ee07 0a90 	vmov	s15, r0
 801a290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a294:	4b83      	ldr	r3, [pc, #524]	; (801a4a4 <forward_cast+0x3e6c>)
 801a296:	4a85      	ldr	r2, [pc, #532]	; (801a4ac <forward_cast+0x3e74>)
 801a298:	ee17 0a90 	vmov	r0, s15
 801a29c:	f7fe b9e5 	b.w	801866a <forward_cast+0x2032>
 801a2a0:	7828      	ldrb	r0, [r5, #0]
 801a2a2:	f7fe b9e2 	b.w	801866a <forward_cast+0x2032>
 801a2a6:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a2aa:	f7e6 fd85 	bl	8000db8 <__aeabi_ul2f>
 801a2ae:	ee07 0a90 	vmov	s15, r0
 801a2b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a2b6:	4a7d      	ldr	r2, [pc, #500]	; (801a4ac <forward_cast+0x3e74>)
 801a2b8:	4b7a      	ldr	r3, [pc, #488]	; (801a4a4 <forward_cast+0x3e6c>)
 801a2ba:	ee17 0a90 	vmov	r0, s15
 801a2be:	f7fe b9d4 	b.w	801866a <forward_cast+0x2032>
 801a2c2:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a2c6:	f7fe b9d0 	b.w	801866a <forward_cast+0x2032>
 801a2ca:	f995 0000 	ldrsb.w	r0, [r5]
 801a2ce:	f7fe b9cc 	b.w	801866a <forward_cast+0x2032>
 801a2d2:	edd5 7a00 	vldr	s15, [r5]
 801a2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a2da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a2de:	ee17 0a90 	vmov	r0, s15
 801a2e2:	f7fe b923 	b.w	801852c <forward_cast+0x1ef4>
 801a2e6:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a2ea:	f7e6 fd6d 	bl	8000dc8 <__aeabi_l2f>
 801a2ee:	ee07 0a90 	vmov	s15, r0
 801a2f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a2f6:	4a6d      	ldr	r2, [pc, #436]	; (801a4ac <forward_cast+0x3e74>)
 801a2f8:	ee17 3a90 	vmov	r3, s15
 801a2fc:	b299      	uxth	r1, r3
 801a2fe:	4b69      	ldr	r3, [pc, #420]	; (801a4a4 <forward_cast+0x3e6c>)
 801a300:	f7fc bb98 	b.w	8016a34 <forward_cast+0x3fc>
 801a304:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a308:	f7fd b815 	b.w	8017336 <forward_cast+0xcfe>
 801a30c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a310:	9301      	str	r3, [sp, #4]
 801a312:	f7e6 fd59 	bl	8000dc8 <__aeabi_l2f>
 801a316:	ee07 0a90 	vmov	s15, r0
 801a31a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a31e:	4a62      	ldr	r2, [pc, #392]	; (801a4a8 <forward_cast+0x3e70>)
 801a320:	9b01      	ldr	r3, [sp, #4]
 801a322:	ee17 0a90 	vmov	r0, s15
 801a326:	f7fe ba05 	b.w	8018734 <forward_cast+0x20fc>
 801a32a:	7828      	ldrb	r0, [r5, #0]
 801a32c:	f7fe ba02 	b.w	8018734 <forward_cast+0x20fc>
 801a330:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a334:	9301      	str	r3, [sp, #4]
 801a336:	f7e6 fd3f 	bl	8000db8 <__aeabi_ul2f>
 801a33a:	ee07 0a90 	vmov	s15, r0
 801a33e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a342:	9b01      	ldr	r3, [sp, #4]
 801a344:	4a58      	ldr	r2, [pc, #352]	; (801a4a8 <forward_cast+0x3e70>)
 801a346:	ee17 0a90 	vmov	r0, s15
 801a34a:	f7fe b9f3 	b.w	8018734 <forward_cast+0x20fc>
 801a34e:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a352:	f7fe b9ef 	b.w	8018734 <forward_cast+0x20fc>
 801a356:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a35a:	f7e6 fd35 	bl	8000dc8 <__aeabi_l2f>
 801a35e:	ee07 0a90 	vmov	s15, r0
 801a362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a366:	4b50      	ldr	r3, [pc, #320]	; (801a4a8 <forward_cast+0x3e70>)
 801a368:	edcd 7a01 	vstr	s15, [sp, #4]
 801a36c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801a370:	4a4c      	ldr	r2, [pc, #304]	; (801a4a4 <forward_cast+0x3e6c>)
 801a372:	f7fe bae3 	b.w	801893c <forward_cast+0x2304>
 801a376:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a37a:	f7e6 fd1d 	bl	8000db8 <__aeabi_ul2f>
 801a37e:	ee07 0a90 	vmov	s15, r0
 801a382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a386:	4a47      	ldr	r2, [pc, #284]	; (801a4a4 <forward_cast+0x3e6c>)
 801a388:	edcd 7a01 	vstr	s15, [sp, #4]
 801a38c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801a390:	4b45      	ldr	r3, [pc, #276]	; (801a4a8 <forward_cast+0x3e70>)
 801a392:	f7fe bad3 	b.w	801893c <forward_cast+0x2304>
 801a396:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a39a:	f7e6 fd15 	bl	8000dc8 <__aeabi_l2f>
 801a39e:	ee07 0a90 	vmov	s15, r0
 801a3a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a3a6:	4b3f      	ldr	r3, [pc, #252]	; (801a4a4 <forward_cast+0x3e6c>)
 801a3a8:	4a40      	ldr	r2, [pc, #256]	; (801a4ac <forward_cast+0x3e74>)
 801a3aa:	ee17 0a90 	vmov	r0, s15
 801a3ae:	f7fc bfc2 	b.w	8017336 <forward_cast+0xcfe>
 801a3b2:	f9b5 1000 	ldrsh.w	r1, [r5]
 801a3b6:	ee07 1a90 	vmov	s15, r1
 801a3ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3be:	f7fc be03 	b.w	8016fc8 <forward_cast+0x990>
 801a3c2:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a3c6:	f7e6 fcff 	bl	8000dc8 <__aeabi_l2f>
 801a3ca:	ee07 0a90 	vmov	s15, r0
 801a3ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a3d2:	4b34      	ldr	r3, [pc, #208]	; (801a4a4 <forward_cast+0x3e6c>)
 801a3d4:	4a36      	ldr	r2, [pc, #216]	; (801a4b0 <forward_cast+0x3e78>)
 801a3d6:	ee17 0a90 	vmov	r0, s15
 801a3da:	f7fd b93d 	b.w	8017658 <forward_cast+0x1020>
 801a3de:	7828      	ldrb	r0, [r5, #0]
 801a3e0:	f7fd b9a7 	b.w	8017732 <forward_cast+0x10fa>
 801a3e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a3e8:	f7e6 fcee 	bl	8000dc8 <__aeabi_l2f>
 801a3ec:	ee07 0a90 	vmov	s15, r0
 801a3f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a3f4:	4b2c      	ldr	r3, [pc, #176]	; (801a4a8 <forward_cast+0x3e70>)
 801a3f6:	edcd 7a01 	vstr	s15, [sp, #4]
 801a3fa:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801a3fe:	4a2b      	ldr	r2, [pc, #172]	; (801a4ac <forward_cast+0x3e74>)
 801a400:	f7fd b95f 	b.w	80176c2 <forward_cast+0x108a>
 801a404:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a408:	f7fd b849 	b.w	801749e <forward_cast+0xe66>
 801a40c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a410:	f7e6 fcda 	bl	8000dc8 <__aeabi_l2f>
 801a414:	ee07 0a90 	vmov	s15, r0
 801a418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a41c:	4b23      	ldr	r3, [pc, #140]	; (801a4ac <forward_cast+0x3e74>)
 801a41e:	4a25      	ldr	r2, [pc, #148]	; (801a4b4 <forward_cast+0x3e7c>)
 801a420:	ee17 0a90 	vmov	r0, s15
 801a424:	f7fe bae7 	b.w	80189f6 <forward_cast+0x23be>
 801a428:	7828      	ldrb	r0, [r5, #0]
 801a42a:	f7fe bae4 	b.w	80189f6 <forward_cast+0x23be>
 801a42e:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a432:	f7e6 fcc1 	bl	8000db8 <__aeabi_ul2f>
 801a436:	ee07 0a90 	vmov	s15, r0
 801a43a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a43e:	4a1d      	ldr	r2, [pc, #116]	; (801a4b4 <forward_cast+0x3e7c>)
 801a440:	4b1a      	ldr	r3, [pc, #104]	; (801a4ac <forward_cast+0x3e74>)
 801a442:	ee17 0a90 	vmov	r0, s15
 801a446:	f7fe bad6 	b.w	80189f6 <forward_cast+0x23be>
 801a44a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a44e:	f7fe bad2 	b.w	80189f6 <forward_cast+0x23be>
 801a452:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a456:	f7e6 fcb7 	bl	8000dc8 <__aeabi_l2f>
 801a45a:	ee07 0a90 	vmov	s15, r0
 801a45e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a462:	4b12      	ldr	r3, [pc, #72]	; (801a4ac <forward_cast+0x3e74>)
 801a464:	4a13      	ldr	r2, [pc, #76]	; (801a4b4 <forward_cast+0x3e7c>)
 801a466:	ee17 0a90 	vmov	r0, s15
 801a46a:	f7fe bb0d 	b.w	8018a88 <forward_cast+0x2450>
 801a46e:	7828      	ldrb	r0, [r5, #0]
 801a470:	f7fe bb0a 	b.w	8018a88 <forward_cast+0x2450>
 801a474:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a478:	f7e6 fc9e 	bl	8000db8 <__aeabi_ul2f>
 801a47c:	ee07 0a90 	vmov	s15, r0
 801a480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a484:	4a0b      	ldr	r2, [pc, #44]	; (801a4b4 <forward_cast+0x3e7c>)
 801a486:	4b09      	ldr	r3, [pc, #36]	; (801a4ac <forward_cast+0x3e74>)
 801a488:	ee17 0a90 	vmov	r0, s15
 801a48c:	f7fe bafc 	b.w	8018a88 <forward_cast+0x2450>
 801a490:	f9b5 0000 	ldrsh.w	r0, [r5]
 801a494:	f7fe baf8 	b.w	8018a88 <forward_cast+0x2450>
 801a498:	2300      	movs	r3, #0
 801a49a:	685b      	ldr	r3, [r3, #4]
 801a49c:	deff      	udf	#255	; 0xff
 801a49e:	2300      	movs	r3, #0
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	deff      	udf	#255	; 0xff
 801a4a4:	00041040 	.word	0x00041040
 801a4a8:	00841040 	.word	0x00841040
 801a4ac:	00042040 	.word	0x00042040
 801a4b0:	00040440 	.word	0x00040440
 801a4b4:	00060440 	.word	0x00060440

0801a4b8 <forward_zipmap>:
 801a4b8:	6983      	ldr	r3, [r0, #24]
 801a4ba:	881a      	ldrh	r2, [r3, #0]
 801a4bc:	2a00      	cmp	r2, #0
 801a4be:	d047      	beq.n	801a550 <forward_zipmap+0x98>
 801a4c0:	b470      	push	{r4, r5, r6}
 801a4c2:	685d      	ldr	r5, [r3, #4]
 801a4c4:	686b      	ldr	r3, [r5, #4]
 801a4c6:	b103      	cbz	r3, 801a4ca <forward_zipmap+0x12>
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	2a01      	cmp	r2, #1
 801a4cc:	f000 8094 	beq.w	801a5f8 <forward_zipmap+0x140>
 801a4d0:	6929      	ldr	r1, [r5, #16]
 801a4d2:	2900      	cmp	r1, #0
 801a4d4:	f000 808c 	beq.w	801a5f0 <forward_zipmap+0x138>
 801a4d8:	680c      	ldr	r4, [r1, #0]
 801a4da:	68d8      	ldr	r0, [r3, #12]
 801a4dc:	6999      	ldr	r1, [r3, #24]
 801a4de:	69a3      	ldr	r3, [r4, #24]
 801a4e0:	68c4      	ldr	r4, [r0, #12]
 801a4e2:	6840      	ldr	r0, [r0, #4]
 801a4e4:	6889      	ldr	r1, [r1, #8]
 801a4e6:	689b      	ldr	r3, [r3, #8]
 801a4e8:	2a02      	cmp	r2, #2
 801a4ea:	fb00 f404 	mul.w	r4, r0, r4
 801a4ee:	f000 8086 	beq.w	801a5fe <forward_zipmap+0x146>
 801a4f2:	69ea      	ldr	r2, [r5, #28]
 801a4f4:	2a00      	cmp	r2, #0
 801a4f6:	d07d      	beq.n	801a5f4 <forward_zipmap+0x13c>
 801a4f8:	6812      	ldr	r2, [r2, #0]
 801a4fa:	6990      	ldr	r0, [r2, #24]
 801a4fc:	68d5      	ldr	r5, [r2, #12]
 801a4fe:	6802      	ldr	r2, [r0, #0]
 801a500:	686d      	ldr	r5, [r5, #4]
 801a502:	6886      	ldr	r6, [r0, #8]
 801a504:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 801a508:	b304      	cbz	r4, 801a54c <forward_zipmap+0x94>
 801a50a:	2a10      	cmp	r2, #16
 801a50c:	d022      	beq.n	801a554 <forward_zipmap+0x9c>
 801a50e:	2a08      	cmp	r2, #8
 801a510:	d03f      	beq.n	801a592 <forward_zipmap+0xda>
 801a512:	2000      	movs	r0, #0
 801a514:	4684      	mov	ip, r0
 801a516:	4285      	cmp	r5, r0
 801a518:	bf14      	ite	ne
 801a51a:	4602      	movne	r2, r0
 801a51c:	2200      	moveq	r2, #0
 801a51e:	f103 0308 	add.w	r3, r3, #8
 801a522:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801a526:	ee07 2a90 	vmov	s15, r2
 801a52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a52e:	f10c 0c01 	add.w	ip, ip, #1
 801a532:	ee17 2a90 	vmov	r2, s15
 801a536:	f843 2c08 	str.w	r2, [r3, #-8]
 801a53a:	f851 2b04 	ldr.w	r2, [r1], #4
 801a53e:	f843 2c04 	str.w	r2, [r3, #-4]
 801a542:	bf14      	ite	ne
 801a544:	3001      	addne	r0, #1
 801a546:	2001      	moveq	r0, #1
 801a548:	4564      	cmp	r4, ip
 801a54a:	d1e4      	bne.n	801a516 <forward_zipmap+0x5e>
 801a54c:	bc70      	pop	{r4, r5, r6}
 801a54e:	4770      	bx	lr
 801a550:	6853      	ldr	r3, [r2, #4]
 801a552:	deff      	udf	#255	; 0xff
 801a554:	2000      	movs	r0, #0
 801a556:	4684      	mov	ip, r0
 801a558:	4285      	cmp	r5, r0
 801a55a:	bf14      	ite	ne
 801a55c:	4602      	movne	r2, r0
 801a55e:	2200      	moveq	r2, #0
 801a560:	f103 0308 	add.w	r3, r3, #8
 801a564:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801a568:	ee07 2a90 	vmov	s15, r2
 801a56c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a570:	f10c 0c01 	add.w	ip, ip, #1
 801a574:	ee17 2a90 	vmov	r2, s15
 801a578:	f843 2c08 	str.w	r2, [r3, #-8]
 801a57c:	f851 2b04 	ldr.w	r2, [r1], #4
 801a580:	f843 2c04 	str.w	r2, [r3, #-4]
 801a584:	bf14      	ite	ne
 801a586:	3001      	addne	r0, #1
 801a588:	2001      	moveq	r0, #1
 801a58a:	4564      	cmp	r4, ip
 801a58c:	d1e4      	bne.n	801a558 <forward_zipmap+0xa0>
 801a58e:	bc70      	pop	{r4, r5, r6}
 801a590:	4770      	bx	lr
 801a592:	2200      	movs	r2, #0
 801a594:	4610      	mov	r0, r2
 801a596:	4295      	cmp	r5, r2
 801a598:	f100 0001 	add.w	r0, r0, #1
 801a59c:	d017      	beq.n	801a5ce <forward_zipmap+0x116>
 801a59e:	f816 c002 	ldrb.w	ip, [r6, r2]
 801a5a2:	ee07 ca90 	vmov	s15, ip
 801a5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a5aa:	4284      	cmp	r4, r0
 801a5ac:	ee17 ca90 	vmov	ip, s15
 801a5b0:	f8c3 c000 	str.w	ip, [r3]
 801a5b4:	f851 cb04 	ldr.w	ip, [r1], #4
 801a5b8:	f8c3 c004 	str.w	ip, [r3, #4]
 801a5bc:	f102 0201 	add.w	r2, r2, #1
 801a5c0:	f103 0308 	add.w	r3, r3, #8
 801a5c4:	d0c2      	beq.n	801a54c <forward_zipmap+0x94>
 801a5c6:	4295      	cmp	r5, r2
 801a5c8:	f100 0001 	add.w	r0, r0, #1
 801a5cc:	d1e7      	bne.n	801a59e <forward_zipmap+0xe6>
 801a5ce:	7832      	ldrb	r2, [r6, #0]
 801a5d0:	ee07 2a90 	vmov	s15, r2
 801a5d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a5d8:	4284      	cmp	r4, r0
 801a5da:	ee17 2a90 	vmov	r2, s15
 801a5de:	601a      	str	r2, [r3, #0]
 801a5e0:	f851 2b04 	ldr.w	r2, [r1], #4
 801a5e4:	605a      	str	r2, [r3, #4]
 801a5e6:	f103 0308 	add.w	r3, r3, #8
 801a5ea:	d0af      	beq.n	801a54c <forward_zipmap+0x94>
 801a5ec:	2201      	movs	r2, #1
 801a5ee:	e7d2      	b.n	801a596 <forward_zipmap+0xde>
 801a5f0:	698b      	ldr	r3, [r1, #24]
 801a5f2:	deff      	udf	#255	; 0xff
 801a5f4:	68d3      	ldr	r3, [r2, #12]
 801a5f6:	deff      	udf	#255	; 0xff
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	685b      	ldr	r3, [r3, #4]
 801a5fc:	deff      	udf	#255	; 0xff
 801a5fe:	2300      	movs	r3, #0
 801a600:	685b      	ldr	r3, [r3, #4]
 801a602:	deff      	udf	#255	; 0xff

0801a604 <svc_ovo_output>:
 801a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a608:	6886      	ldr	r6, [r0, #8]
 801a60a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801a60c:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
 801a610:	b08d      	sub	sp, #52	; 0x34
 801a612:	e9cd 1205 	strd	r1, r2, [sp, #20]
 801a616:	1e71      	subs	r1, r6, #1
 801a618:	461d      	mov	r5, r3
 801a61a:	9307      	str	r3, [sp, #28]
 801a61c:	fb06 f301 	mul.w	r3, r6, r1
 801a620:	9103      	str	r1, [sp, #12]
 801a622:	9408      	str	r4, [sp, #32]
 801a624:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 801a628:	eb05 0ec3 	add.w	lr, r5, r3, lsl #3
 801a62c:	2900      	cmp	r1, #0
 801a62e:	f000 80b4 	beq.w	801a79a <svc_ovo_output+0x196>
 801a632:	2e00      	cmp	r6, #0
 801a634:	d052      	beq.n	801a6dc <svc_ovo_output+0xd8>
 801a636:	00b1      	lsls	r1, r6, #2
 801a638:	e9cd ec00 	strd	lr, ip, [sp]
 801a63c:	e9cd ce0a 	strd	ip, lr, [sp, #40]	; 0x28
 801a640:	4602      	mov	r2, r0
 801a642:	9104      	str	r1, [sp, #16]
 801a644:	2100      	movs	r1, #0
 801a646:	4628      	mov	r0, r5
 801a648:	9502      	str	r5, [sp, #8]
 801a64a:	9309      	str	r3, [sp, #36]	; 0x24
 801a64c:	468a      	mov	sl, r1
 801a64e:	46b1      	mov	r9, r6
 801a650:	4690      	mov	r8, r2
 801a652:	e9dd ec00 	ldrd	lr, ip, [sp]
 801a656:	9d05      	ldr	r5, [sp, #20]
 801a658:	9f02      	ldr	r7, [sp, #8]
 801a65a:	4656      	mov	r6, sl
 801a65c:	2400      	movs	r4, #0
 801a65e:	f10a 0a01 	add.w	sl, sl, #1
 801a662:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 801a666:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801a66a:	2b08      	cmp	r3, #8
 801a66c:	f000 80a3 	beq.w	801a7b6 <svc_ovo_output+0x1b2>
 801a670:	2b10      	cmp	r3, #16
 801a672:	bf0c      	ite	eq
 801a674:	f832 0014 	ldrheq.w	r0, [r2, r4, lsl #1]
 801a678:	f852 0024 	ldrne.w	r0, [r2, r4, lsl #2]
 801a67c:	eddf 7a4f 	vldr	s15, [pc, #316]	; 801a7bc <svc_ovo_output+0x1b8>
 801a680:	b178      	cbz	r0, 801a6a2 <svc_ovo_output+0x9e>
 801a682:	4629      	mov	r1, r5
 801a684:	465a      	mov	r2, fp
 801a686:	2300      	movs	r3, #0
 801a688:	ecf2 6a01 	vldmia	r2!, {s13}
 801a68c:	ecb1 7a01 	vldmia	r1!, {s14}
 801a690:	3301      	adds	r3, #1
 801a692:	4283      	cmp	r3, r0
 801a694:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a698:	d1f6      	bne.n	801a688 <svc_ovo_output+0x84>
 801a69a:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
 801a69e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801a6a2:	42a6      	cmp	r6, r4
 801a6a4:	ece7 7a01 	vstmia	r7!, {s15}
 801a6a8:	f84c 4b04 	str.w	r4, [ip], #4
 801a6ac:	f104 0401 	add.w	r4, r4, #1
 801a6b0:	d276      	bcs.n	801a7a0 <svc_ovo_output+0x19c>
 801a6b2:	45a1      	cmp	r9, r4
 801a6b4:	f84e 6b04 	str.w	r6, [lr], #4
 801a6b8:	d1d3      	bne.n	801a662 <svc_ovo_output+0x5e>
 801a6ba:	9b04      	ldr	r3, [sp, #16]
 801a6bc:	9a02      	ldr	r2, [sp, #8]
 801a6be:	441a      	add	r2, r3
 801a6c0:	9202      	str	r2, [sp, #8]
 801a6c2:	9a01      	ldr	r2, [sp, #4]
 801a6c4:	441a      	add	r2, r3
 801a6c6:	9201      	str	r2, [sp, #4]
 801a6c8:	9a00      	ldr	r2, [sp, #0]
 801a6ca:	441a      	add	r2, r3
 801a6cc:	9b03      	ldr	r3, [sp, #12]
 801a6ce:	9200      	str	r2, [sp, #0]
 801a6d0:	4553      	cmp	r3, sl
 801a6d2:	d1be      	bne.n	801a652 <svc_ovo_output+0x4e>
 801a6d4:	e9dd ce0a 	ldrd	ip, lr, [sp, #40]	; 0x28
 801a6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6da:	464e      	mov	r6, r9
 801a6dc:	2700      	movs	r7, #0
 801a6de:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a6e2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801a6e6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a6ea:	46b9      	mov	r9, r7
 801a6ec:	f109 0901 	add.w	r9, r9, #1
 801a6f0:	454e      	cmp	r6, r9
 801a6f2:	bf88      	it	hi
 801a6f4:	464c      	movhi	r4, r9
 801a6f6:	d918      	bls.n	801a72a <svc_ovo_output+0x126>
 801a6f8:	b1a3      	cbz	r3, 801a724 <svc_ovo_output+0x120>
 801a6fa:	f1ae 0104 	sub.w	r1, lr, #4
 801a6fe:	4650      	mov	r0, sl
 801a700:	2200      	movs	r2, #0
 801a702:	e004      	b.n	801a70e <svc_ovo_output+0x10a>
 801a704:	3201      	adds	r2, #1
 801a706:	4293      	cmp	r3, r2
 801a708:	f100 0004 	add.w	r0, r0, #4
 801a70c:	d00a      	beq.n	801a724 <svc_ovo_output+0x120>
 801a70e:	f851 5f04 	ldr.w	r5, [r1, #4]!
 801a712:	42a5      	cmp	r5, r4
 801a714:	d1f6      	bne.n	801a704 <svc_ovo_output+0x100>
 801a716:	f85c 5022 	ldr.w	r5, [ip, r2, lsl #2]
 801a71a:	42bd      	cmp	r5, r7
 801a71c:	d1f2      	bne.n	801a704 <svc_ovo_output+0x100>
 801a71e:	6802      	ldr	r2, [r0, #0]
 801a720:	f848 2b04 	str.w	r2, [r8], #4
 801a724:	3401      	adds	r4, #1
 801a726:	42a6      	cmp	r6, r4
 801a728:	d1e6      	bne.n	801a6f8 <svc_ovo_output+0xf4>
 801a72a:	45cb      	cmp	fp, r9
 801a72c:	f107 0701 	add.w	r7, r7, #1
 801a730:	d1dc      	bne.n	801a6ec <svc_ovo_output+0xe8>
 801a732:	e9dd ba06 	ldrd	fp, sl, [sp, #24]
 801a736:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a73a:	f04f 0800 	mov.w	r8, #0
 801a73e:	4647      	mov	r7, r8
 801a740:	f108 0801 	add.w	r8, r8, #1
 801a744:	45b0      	cmp	r8, r6
 801a746:	bf38      	it	cc
 801a748:	4644      	movcc	r4, r8
 801a74a:	d223      	bcs.n	801a794 <svc_ovo_output+0x190>
 801a74c:	b1fb      	cbz	r3, 801a78e <svc_ovo_output+0x18a>
 801a74e:	f1ac 0104 	sub.w	r1, ip, #4
 801a752:	4650      	mov	r0, sl
 801a754:	2200      	movs	r2, #0
 801a756:	e004      	b.n	801a762 <svc_ovo_output+0x15e>
 801a758:	3201      	adds	r2, #1
 801a75a:	4293      	cmp	r3, r2
 801a75c:	f100 0004 	add.w	r0, r0, #4
 801a760:	d015      	beq.n	801a78e <svc_ovo_output+0x18a>
 801a762:	f851 5f04 	ldr.w	r5, [r1, #4]!
 801a766:	42a5      	cmp	r5, r4
 801a768:	d1f6      	bne.n	801a758 <svc_ovo_output+0x154>
 801a76a:	f85e 5022 	ldr.w	r5, [lr, r2, lsl #2]
 801a76e:	42bd      	cmp	r5, r7
 801a770:	d1f2      	bne.n	801a758 <svc_ovo_output+0x154>
 801a772:	465a      	mov	r2, fp
 801a774:	ecf2 6a01 	vldmia	r2!, {s13}
 801a778:	ecf9 7a01 	vldmia	r9!, {s15}
 801a77c:	ed90 7a00 	vldr	s14, [r0]
 801a780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a784:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a788:	edcb 7a00 	vstr	s15, [fp]
 801a78c:	4693      	mov	fp, r2
 801a78e:	3401      	adds	r4, #1
 801a790:	42a6      	cmp	r6, r4
 801a792:	d1db      	bne.n	801a74c <svc_ovo_output+0x148>
 801a794:	9a03      	ldr	r2, [sp, #12]
 801a796:	4542      	cmp	r2, r8
 801a798:	d1d1      	bne.n	801a73e <svc_ovo_output+0x13a>
 801a79a:	b00d      	add	sp, #52	; 0x34
 801a79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7a0:	45a1      	cmp	r9, r4
 801a7a2:	f84e ab04 	str.w	sl, [lr], #4
 801a7a6:	d088      	beq.n	801a6ba <svc_ovo_output+0xb6>
 801a7a8:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 801a7ac:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801a7b0:	2b08      	cmp	r3, #8
 801a7b2:	f47f af5d 	bne.w	801a670 <svc_ovo_output+0x6c>
 801a7b6:	5d10      	ldrb	r0, [r2, r4]
 801a7b8:	e760      	b.n	801a67c <svc_ovo_output+0x78>
 801a7ba:	bf00      	nop
 801a7bc:	00000000 	.word	0x00000000

0801a7c0 <svc_ovo_classification_vote>:
 801a7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7c4:	6884      	ldr	r4, [r0, #8]
 801a7c6:	4606      	mov	r6, r0
 801a7c8:	4692      	mov	sl, r2
 801a7ca:	b3bc      	cbz	r4, 801a83c <svc_ovo_classification_vote+0x7c>
 801a7cc:	ea4f 0884 	mov.w	r8, r4, lsl #2
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	460d      	mov	r5, r1
 801a7d4:	4642      	mov	r2, r8
 801a7d6:	2100      	movs	r1, #0
 801a7d8:	f000 fdd8 	bl	801b38c <memset>
 801a7dc:	2c01      	cmp	r4, #1
 801a7de:	4603      	mov	r3, r0
 801a7e0:	d02c      	beq.n	801a83c <svc_ovo_classification_vote+0x7c>
 801a7e2:	4480      	add	r8, r0
 801a7e4:	f1a8 0904 	sub.w	r9, r8, #4
 801a7e8:	4680      	mov	r8, r0
 801a7ea:	2001      	movs	r0, #1
 801a7ec:	4641      	mov	r1, r8
 801a7ee:	f108 0804 	add.w	r8, r8, #4
 801a7f2:	46c6      	mov	lr, r8
 801a7f4:	4684      	mov	ip, r0
 801a7f6:	462a      	mov	r2, r5
 801a7f8:	e008      	b.n	801a80c <svc_ovo_classification_vote+0x4c>
 801a7fa:	680f      	ldr	r7, [r1, #0]
 801a7fc:	f10c 0c01 	add.w	ip, ip, #1
 801a800:	3701      	adds	r7, #1
 801a802:	4564      	cmp	r4, ip
 801a804:	600f      	str	r7, [r1, #0]
 801a806:	f10e 0e04 	add.w	lr, lr, #4
 801a80a:	d911      	bls.n	801a830 <svc_ovo_classification_vote+0x70>
 801a80c:	ecf2 7a01 	vldmia	r2!, {s15}
 801a810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a818:	dcef      	bgt.n	801a7fa <svc_ovo_classification_vote+0x3a>
 801a81a:	f8de 7000 	ldr.w	r7, [lr]
 801a81e:	f10c 0c01 	add.w	ip, ip, #1
 801a822:	3701      	adds	r7, #1
 801a824:	4564      	cmp	r4, ip
 801a826:	f8ce 7000 	str.w	r7, [lr]
 801a82a:	f10e 0e04 	add.w	lr, lr, #4
 801a82e:	d8ed      	bhi.n	801a80c <svc_ovo_classification_vote+0x4c>
 801a830:	3001      	adds	r0, #1
 801a832:	eba9 0101 	sub.w	r1, r9, r1
 801a836:	4284      	cmp	r4, r0
 801a838:	440d      	add	r5, r1
 801a83a:	d1d7      	bne.n	801a7ec <svc_ovo_classification_vote+0x2c>
 801a83c:	f896 1025 	ldrb.w	r1, [r6, #37]	; 0x25
 801a840:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801a842:	2908      	cmp	r1, #8
 801a844:	d041      	beq.n	801a8ca <svc_ovo_classification_vote+0x10a>
 801a846:	2910      	cmp	r1, #16
 801a848:	d01f      	beq.n	801a88a <svc_ovo_classification_vote+0xca>
 801a84a:	edd3 7a00 	vldr	s15, [r3]
 801a84e:	6811      	ldr	r1, [r2, #0]
 801a850:	2c01      	cmp	r4, #1
 801a852:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801a856:	d914      	bls.n	801a882 <svc_ovo_classification_vote+0xc2>
 801a858:	1f18      	subs	r0, r3, #4
 801a85a:	3204      	adds	r2, #4
 801a85c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801a860:	edd3 7a01 	vldr	s15, [r3, #4]
 801a864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a868:	3304      	adds	r3, #4
 801a86a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a872:	bf44      	itt	mi
 801a874:	6811      	ldrmi	r1, [r2, #0]
 801a876:	eeb0 7a67 	vmovmi.f32	s14, s15
 801a87a:	429c      	cmp	r4, r3
 801a87c:	f102 0204 	add.w	r2, r2, #4
 801a880:	d1ee      	bne.n	801a860 <svc_ovo_classification_vote+0xa0>
 801a882:	f8ca 1000 	str.w	r1, [sl]
 801a886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a88a:	edd3 7a00 	vldr	s15, [r3]
 801a88e:	8811      	ldrh	r1, [r2, #0]
 801a890:	2c01      	cmp	r4, #1
 801a892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801a896:	d9f4      	bls.n	801a882 <svc_ovo_classification_vote+0xc2>
 801a898:	1f18      	subs	r0, r3, #4
 801a89a:	3202      	adds	r2, #2
 801a89c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801a8a0:	edd3 7a01 	vldr	s15, [r3, #4]
 801a8a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a8a8:	3304      	adds	r3, #4
 801a8aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b2:	bfc4      	itt	gt
 801a8b4:	8811      	ldrhgt	r1, [r2, #0]
 801a8b6:	eeb0 7a67 	vmovgt.f32	s14, s15
 801a8ba:	42a3      	cmp	r3, r4
 801a8bc:	f102 0202 	add.w	r2, r2, #2
 801a8c0:	d1ee      	bne.n	801a8a0 <svc_ovo_classification_vote+0xe0>
 801a8c2:	f8ca 1000 	str.w	r1, [sl]
 801a8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8ca:	edd3 7a00 	vldr	s15, [r3]
 801a8ce:	7811      	ldrb	r1, [r2, #0]
 801a8d0:	2c01      	cmp	r4, #1
 801a8d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801a8d6:	d9d4      	bls.n	801a882 <svc_ovo_classification_vote+0xc2>
 801a8d8:	1f18      	subs	r0, r3, #4
 801a8da:	3201      	adds	r2, #1
 801a8dc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801a8e0:	edd3 7a01 	vldr	s15, [r3, #4]
 801a8e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a8e8:	3304      	adds	r3, #4
 801a8ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8f2:	bfc4      	itt	gt
 801a8f4:	7811      	ldrbgt	r1, [r2, #0]
 801a8f6:	eeb0 7a67 	vmovgt.f32	s14, s15
 801a8fa:	42a3      	cmp	r3, r4
 801a8fc:	f102 0201 	add.w	r2, r2, #1
 801a900:	d1ee      	bne.n	801a8e0 <svc_ovo_classification_vote+0x120>
 801a902:	f8ca 1000 	str.w	r1, [sl]
 801a906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a90a:	bf00      	nop

0801a90c <svc_iter_prob_estimate>:
 801a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a910:	b089      	sub	sp, #36	; 0x24
 801a912:	6883      	ldr	r3, [r0, #8]
 801a914:	9304      	str	r3, [sp, #16]
 801a916:	4615      	mov	r5, r2
 801a918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a91a:	fb03 f903 	mul.w	r9, r3, r3
 801a91e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801a922:	9203      	str	r2, [sp, #12]
 801a924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a926:	eb02 09c9 	add.w	r9, r2, r9, lsl #3
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	f000 8158 	beq.w	801abe0 <svc_iter_prob_estimate+0x2d4>
 801a930:	2b01      	cmp	r3, #1
 801a932:	f000 8158 	beq.w	801abe6 <svc_iter_prob_estimate+0x2da>
 801a936:	f103 0b01 	add.w	fp, r3, #1
 801a93a:	ea4f 088b 	mov.w	r8, fp, lsl #2
 801a93e:	3204      	adds	r2, #4
 801a940:	f103 3eff 	add.w	lr, r3, #4294967295
 801a944:	f8cd 9008 	str.w	r9, [sp, #8]
 801a948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a94c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801a950:	9201      	str	r2, [sp, #4]
 801a952:	4694      	mov	ip, r2
 801a954:	f1a8 0604 	sub.w	r6, r8, #4
 801a958:	2701      	movs	r7, #1
 801a95a:	f1a8 0a08 	sub.w	sl, r8, #8
 801a95e:	4699      	mov	r9, r3
 801a960:	4608      	mov	r0, r1
 801a962:	eb0a 020c 	add.w	r2, sl, ip
 801a966:	4664      	mov	r4, ip
 801a968:	463b      	mov	r3, r7
 801a96a:	edd0 7a00 	vldr	s15, [r0]
 801a96e:	ece4 7a01 	vstmia	r4!, {s15}
 801a972:	ecf0 7a01 	vldmia	r0!, {s15}
 801a976:	3301      	adds	r3, #1
 801a978:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a97c:	4599      	cmp	r9, r3
 801a97e:	edc2 7a00 	vstr	s15, [r2]
 801a982:	4432      	add	r2, r6
 801a984:	d8f1      	bhi.n	801a96a <svc_iter_prob_estimate+0x5e>
 801a986:	3701      	adds	r7, #1
 801a988:	45b9      	cmp	r9, r7
 801a98a:	4471      	add	r1, lr
 801a98c:	44c4      	add	ip, r8
 801a98e:	f1ae 0e04 	sub.w	lr, lr, #4
 801a992:	d1e5      	bne.n	801a960 <svc_iter_prob_estimate+0x54>
 801a994:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801a998:	eddd 7a04 	vldr	s15, [sp, #16]
 801a99c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a99e:	9b03      	ldr	r3, [sp, #12]
 801a9a0:	f8cd 9018 	str.w	r9, [sp, #24]
 801a9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a9a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a9ac:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801a9b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801a9b4:	f1aa 0004 	sub.w	r0, sl, #4
 801a9b8:	1882      	adds	r2, r0, r2
 801a9ba:	9202      	str	r2, [sp, #8]
 801a9bc:	461a      	mov	r2, r3
 801a9be:	3204      	adds	r2, #4
 801a9c0:	f04f 0e00 	mov.w	lr, #0
 801a9c4:	9205      	str	r2, [sp, #20]
 801a9c6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801a9ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a9ce:	9507      	str	r5, [sp, #28]
 801a9d0:	f1aa 0208 	sub.w	r2, sl, #8
 801a9d4:	eb03 0b00 	add.w	fp, r3, r0
 801a9d8:	eddf 6a86 	vldr	s13, [pc, #536]	; 801abf4 <svc_iter_prob_estimate+0x2e8>
 801a9dc:	9201      	str	r2, [sp, #4]
 801a9de:	461e      	mov	r6, r3
 801a9e0:	4677      	mov	r7, lr
 801a9e2:	46ac      	mov	ip, r5
 801a9e4:	ecac 6a01 	vstmia	ip!, {s12}
 801a9e8:	edc3 6a00 	vstr	s13, [r3]
 801a9ec:	b34f      	cbz	r7, 801aa42 <svc_iter_prob_estimate+0x136>
 801a9ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a9f0:	9c03      	ldr	r4, [sp, #12]
 801a9f2:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 801a9f6:	edd2 7a00 	vldr	s15, [r2]
 801a9fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a9fe:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 801aa02:	edc3 7a00 	vstr	s15, [r3]
 801aa06:	6811      	ldr	r1, [r2, #0]
 801aa08:	eb04 028e 	add.w	r2, r4, lr, lsl #2
 801aa0c:	2f01      	cmp	r7, #1
 801aa0e:	6011      	str	r1, [r2, #0]
 801aa10:	ea4f 0187 	mov.w	r1, r7, lsl #2
 801aa14:	ea4f 028e 	mov.w	r2, lr, lsl #2
 801aa18:	d013      	beq.n	801aa42 <svc_iter_prob_estimate+0x136>
 801aa1a:	9c02      	ldr	r4, [sp, #8]
 801aa1c:	4421      	add	r1, r4
 801aa1e:	9c05      	ldr	r4, [sp, #20]
 801aa20:	4422      	add	r2, r4
 801aa22:	465c      	mov	r4, fp
 801aa24:	ed91 7a00 	vldr	s14, [r1]
 801aa28:	edd3 7a00 	vldr	s15, [r3]
 801aa2c:	eee7 7a07 	vfma.f32	s15, s14, s14
 801aa30:	4401      	add	r1, r0
 801aa32:	edc3 7a00 	vstr	s15, [r3]
 801aa36:	6825      	ldr	r5, [r4, #0]
 801aa38:	f842 5b04 	str.w	r5, [r2], #4
 801aa3c:	42b2      	cmp	r2, r6
 801aa3e:	4404      	add	r4, r0
 801aa40:	d1f0      	bne.n	801aa24 <svc_iter_prob_estimate+0x118>
 801aa42:	3701      	adds	r7, #1
 801aa44:	45b9      	cmp	r9, r7
 801aa46:	d020      	beq.n	801aa8a <svc_iter_prob_estimate+0x17e>
 801aa48:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aa4a:	9a01      	ldr	r2, [sp, #4]
 801aa4c:	44ce      	add	lr, r9
 801aa4e:	eb01 058e 	add.w	r5, r1, lr, lsl #2
 801aa52:	4442      	add	r2, r8
 801aa54:	1d34      	adds	r4, r6, #4
 801aa56:	4641      	mov	r1, r8
 801aa58:	ed92 7a00 	vldr	s14, [r2]
 801aa5c:	edd3 7a00 	vldr	s15, [r3]
 801aa60:	eee7 7a07 	vfma.f32	s15, s14, s14
 801aa64:	edc3 7a00 	vstr	s15, [r3]
 801aa68:	edd2 7a00 	vldr	s15, [r2]
 801aa6c:	ecb1 7a01 	vldmia	r1!, {s14}
 801aa70:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801aa74:	42a9      	cmp	r1, r5
 801aa76:	4402      	add	r2, r0
 801aa78:	ece4 7a01 	vstmia	r4!, {s15}
 801aa7c:	d1ec      	bne.n	801aa58 <svc_iter_prob_estimate+0x14c>
 801aa7e:	4453      	add	r3, sl
 801aa80:	44d0      	add	r8, sl
 801aa82:	4456      	add	r6, sl
 801aa84:	f10b 0b04 	add.w	fp, fp, #4
 801aa88:	e7ac      	b.n	801a9e4 <svc_iter_prob_estimate+0xd8>
 801aa8a:	e9dd 9506 	ldrd	r9, r5, [sp, #24]
 801aa8e:	eddd 7a04 	vldr	s15, [sp, #16]
 801aa92:	9b04      	ldr	r3, [sp, #16]
 801aa94:	9a03      	ldr	r2, [sp, #12]
 801aa96:	ed9f 4a58 	vldr	s8, [pc, #352]	; 801abf8 <svc_iter_prob_estimate+0x2ec>
 801aa9a:	eddf 4a56 	vldr	s9, [pc, #344]	; 801abf4 <svc_iter_prob_estimate+0x2e8>
 801aa9e:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 801aaa2:	eddf 7a56 	vldr	s15, [pc, #344]	; 801abfc <svc_iter_prob_estimate+0x2f0>
 801aaa6:	eec7 3a83 	vdiv.f32	s7, s15, s6
 801aaaa:	ebc3 7683 	rsb	r6, r3, r3, lsl #30
 801aaae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801aab2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801aab6:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 801aaba:	eb09 0783 	add.w	r7, r9, r3, lsl #2
 801aabe:	2364      	movs	r3, #100	; 0x64
 801aac0:	00b6      	lsls	r6, r6, #2
 801aac2:	9202      	str	r2, [sp, #8]
 801aac4:	9301      	str	r3, [sp, #4]
 801aac6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801aaca:	9b04      	ldr	r3, [sp, #16]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d07c      	beq.n	801abca <svc_iter_prob_estimate+0x2be>
 801aad0:	eddf 5a48 	vldr	s11, [pc, #288]	; 801abf4 <svc_iter_prob_estimate+0x2e8>
 801aad4:	9902      	ldr	r1, [sp, #8]
 801aad6:	462c      	mov	r4, r5
 801aad8:	4648      	mov	r0, r9
 801aada:	eddf 7a46 	vldr	s15, [pc, #280]	; 801abf4 <svc_iter_prob_estimate+0x2e8>
 801aade:	ece0 4a01 	vstmia	r0!, {s9}
 801aae2:	1873      	adds	r3, r6, r1
 801aae4:	462a      	mov	r2, r5
 801aae6:	ecf3 6a01 	vldmia	r3!, {s13}
 801aaea:	ecb2 7a01 	vldmia	r2!, {s14}
 801aaee:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aaf2:	428b      	cmp	r3, r1
 801aaf4:	ed40 7a01 	vstr	s15, [r0, #-4]
 801aaf8:	d1f5      	bne.n	801aae6 <svc_iter_prob_estimate+0x1da>
 801aafa:	ecb4 7a01 	vldmia	r4!, {s14}
 801aafe:	45a3      	cmp	fp, r4
 801ab00:	eee7 5a87 	vfma.f32	s11, s15, s14
 801ab04:	eb03 0108 	add.w	r1, r3, r8
 801ab08:	d1e7      	bne.n	801aada <svc_iter_prob_estimate+0x1ce>
 801ab0a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 801abf4 <svc_iter_prob_estimate+0x2e8>
 801ab0e:	464b      	mov	r3, r9
 801ab10:	ecf3 7a01 	vldmia	r3!, {s15}
 801ab14:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801ab18:	eef0 7ae7 	vabs.f32	s15, s15
 801ab1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ab20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab24:	bfb8      	it	lt
 801ab26:	eeb0 7a67 	vmovlt.f32	s14, s15
 801ab2a:	42bb      	cmp	r3, r7
 801ab2c:	d1f0      	bne.n	801ab10 <svc_iter_prob_estimate+0x204>
 801ab2e:	eeb4 7ae3 	vcmpe.f32	s14, s7
 801ab32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab36:	d445      	bmi.n	801abc4 <svc_iter_prob_estimate+0x2b8>
 801ab38:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801ab3c:	9802      	ldr	r0, [sp, #8]
 801ab3e:	46ae      	mov	lr, r5
 801ab40:	464c      	mov	r4, r9
 801ab42:	edd4 6a00 	vldr	s13, [r4]
 801ab46:	ed9c 7a00 	vldr	s14, [ip]
 801ab4a:	edde 7a00 	vldr	s15, [lr]
 801ab4e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801ab52:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ab56:	1831      	adds	r1, r6, r0
 801ab58:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801ab5c:	462a      	mov	r2, r5
 801ab5e:	464b      	mov	r3, r9
 801ab60:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ab64:	ee76 6a05 	vadd.f32	s13, s12, s10
 801ab68:	ecee 7a01 	vstmia	lr!, {s15}
 801ab6c:	ecf4 7a01 	vldmia	r4!, {s15}
 801ab70:	ed9c 7a00 	vldr	s14, [ip]
 801ab74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ab78:	ee66 2aa6 	vmul.f32	s5, s13, s13
 801ab7c:	eee7 7a06 	vfma.f32	s15, s14, s12
 801ab80:	ee85 7a26 	vdiv.f32	s14, s10, s13
 801ab84:	eef0 6a65 	vmov.f32	s13, s11
 801ab88:	eee7 6a86 	vfma.f32	s13, s15, s12
 801ab8c:	eec6 5aa2 	vdiv.f32	s11, s13, s5
 801ab90:	ecf1 6a01 	vldmia	r1!, {s13}
 801ab94:	edd3 7a00 	vldr	s15, [r3]
 801ab98:	eee6 7a86 	vfma.f32	s15, s13, s12
 801ab9c:	4281      	cmp	r1, r0
 801ab9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801aba2:	ece3 7a01 	vstmia	r3!, {s15}
 801aba6:	edd2 7a00 	vldr	s15, [r2]
 801abaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801abae:	ece2 7a01 	vstmia	r2!, {s15}
 801abb2:	d1ed      	bne.n	801ab90 <svc_iter_prob_estimate+0x284>
 801abb4:	42a7      	cmp	r7, r4
 801abb6:	4440      	add	r0, r8
 801abb8:	44d4      	add	ip, sl
 801abba:	d1c2      	bne.n	801ab42 <svc_iter_prob_estimate+0x236>
 801abbc:	9b01      	ldr	r3, [sp, #4]
 801abbe:	3b01      	subs	r3, #1
 801abc0:	9301      	str	r3, [sp, #4]
 801abc2:	d182      	bne.n	801aaca <svc_iter_prob_estimate+0x1be>
 801abc4:	b009      	add	sp, #36	; 0x24
 801abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abca:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 801abce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abd2:	dcf7      	bgt.n	801abc4 <svc_iter_prob_estimate+0x2b8>
 801abd4:	9b01      	ldr	r3, [sp, #4]
 801abd6:	3b01      	subs	r3, #1
 801abd8:	9301      	str	r3, [sp, #4]
 801abda:	f47f af76 	bne.w	801aaca <svc_iter_prob_estimate+0x1be>
 801abde:	e7f1      	b.n	801abc4 <svc_iter_prob_estimate+0x2b8>
 801abe0:	f04f 0a04 	mov.w	sl, #4
 801abe4:	e753      	b.n	801aa8e <svc_iter_prob_estimate+0x182>
 801abe6:	4613      	mov	r3, r2
 801abe8:	3304      	adds	r3, #4
 801abea:	f04f 0b02 	mov.w	fp, #2
 801abee:	9301      	str	r3, [sp, #4]
 801abf0:	e6d2      	b.n	801a998 <svc_iter_prob_estimate+0x8c>
 801abf2:	bf00      	nop
 801abf4:	00000000 	.word	0x00000000
 801abf8:	34000000 	.word	0x34000000
 801abfc:	3ba3d70a 	.word	0x3ba3d70a

0801ac00 <svc_decoder>:
 801ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac04:	ed2d 8b06 	vpush	{d8-d10}
 801ac08:	e9d3 9a01 	ldrd	r9, sl, [r3, #4]
 801ac0c:	b087      	sub	sp, #28
 801ac0e:	461d      	mov	r5, r3
 801ac10:	ee0a 2a10 	vmov	s20, r2
 801ac14:	f10a 36ff 	add.w	r6, sl, #4294967295
 801ac18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ac1a:	7d5b      	ldrb	r3, [r3, #21]
 801ac1c:	9102      	str	r1, [sp, #8]
 801ac1e:	fb0a f606 	mul.w	r6, sl, r6
 801ac22:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801ac26:	0876      	lsrs	r6, r6, #1
 801ac28:	7d2a      	ldrb	r2, [r5, #20]
 801ac2a:	9203      	str	r2, [sp, #12]
 801ac2c:	4607      	mov	r7, r0
 801ac2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801ac32:	2b03      	cmp	r3, #3
 801ac34:	f200 8140 	bhi.w	801aeb8 <svc_decoder+0x2b8>
 801ac38:	e8df f003 	tbb	[pc, r3]
 801ac3c:	0258ab8e 	.word	0x0258ab8e
 801ac40:	edd5 8a06 	vldr	s17, [r5, #24]
 801ac44:	ed95 8a07 	vldr	s16, [r5, #28]
 801ac48:	682b      	ldr	r3, [r5, #0]
 801ac4a:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801ac4c:	f1b9 0f00 	cmp.w	r9, #0
 801ac50:	d024      	beq.n	801ac9c <svc_decoder+0x9c>
 801ac52:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 801ac56:	ee09 6a10 	vmov	s18, r6
 801ac5a:	ea4f 0983 	mov.w	r9, r3, lsl #2
 801ac5e:	465e      	mov	r6, fp
 801ac60:	461f      	mov	r7, r3
 801ac62:	4683      	mov	fp, r0
 801ac64:	eeb0 0a48 	vmov.f32	s0, s16
 801ac68:	b187      	cbz	r7, 801ac8c <svc_decoder+0x8c>
 801ac6a:	eddf 7a96 	vldr	s15, [pc, #600]	; 801aec4 <svc_decoder+0x2c4>
 801ac6e:	465b      	mov	r3, fp
 801ac70:	eb04 0209 	add.w	r2, r4, r9
 801ac74:	ecb4 7a01 	vldmia	r4!, {s14}
 801ac78:	ecf3 6a01 	vldmia	r3!, {s13}
 801ac7c:	4294      	cmp	r4, r2
 801ac7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ac82:	d1f7      	bne.n	801ac74 <svc_decoder+0x74>
 801ac84:	eeb0 0a48 	vmov.f32	s0, s16
 801ac88:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801ac8c:	f001 fd72 	bl	801c774 <tanhf>
 801ac90:	eca6 0a01 	vstmia	r6!, {s0}
 801ac94:	45b0      	cmp	r8, r6
 801ac96:	d1e5      	bne.n	801ac64 <svc_decoder+0x64>
 801ac98:	ee19 6a10 	vmov	r6, s18
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	ee08 3a90 	vmov	s17, r3
 801aca2:	9b03      	ldr	r3, [sp, #12]
 801aca4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	f040 80b3 	bne.w	801ae12 <svc_decoder+0x212>
 801acac:	9c02      	ldr	r4, [sp, #8]
 801acae:	4633      	mov	r3, r6
 801acb0:	4622      	mov	r2, r4
 801acb2:	4628      	mov	r0, r5
 801acb4:	f7ff fca6 	bl	801a604 <svc_ovo_output>
 801acb8:	ee1a 2a10 	vmov	r2, s20
 801acbc:	4633      	mov	r3, r6
 801acbe:	4621      	mov	r1, r4
 801acc0:	4628      	mov	r0, r5
 801acc2:	f7ff fd7d 	bl	801a7c0 <svc_ovo_classification_vote>
 801acc6:	f1ba 0f02 	cmp.w	sl, #2
 801acca:	d108      	bne.n	801acde <svc_decoder+0xde>
 801accc:	9b02      	ldr	r3, [sp, #8]
 801acce:	edd3 7a00 	vldr	s15, [r3]
 801acd2:	eeb1 7a67 	vneg.f32	s14, s15
 801acd6:	edc3 7a01 	vstr	s15, [r3, #4]
 801acda:	ed83 7a00 	vstr	s14, [r3]
 801acde:	ee18 0a90 	vmov	r0, s17
 801ace2:	b007      	add	sp, #28
 801ace4:	ecbd 8b06 	vpop	{d8-d10}
 801ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acec:	ed95 8a06 	vldr	s16, [r5, #24]
 801acf0:	682a      	ldr	r2, [r5, #0]
 801acf2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801acf4:	f1b9 0f00 	cmp.w	r9, #0
 801acf8:	d0d0      	beq.n	801ac9c <svc_decoder+0x9c>
 801acfa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801acfc:	9504      	str	r5, [sp, #16]
 801acfe:	f04f 0b00 	mov.w	fp, #0
 801ad02:	0091      	lsls	r1, r2, #2
 801ad04:	ee08 6a90 	vmov	s17, r6
 801ad08:	f8cd 8014 	str.w	r8, [sp, #20]
 801ad0c:	465e      	mov	r6, fp
 801ad0e:	46a0      	mov	r8, r4
 801ad10:	468b      	mov	fp, r1
 801ad12:	4605      	mov	r5, r0
 801ad14:	4617      	mov	r7, r2
 801ad16:	461c      	mov	r4, r3
 801ad18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ad1c:	b197      	cbz	r7, 801ad44 <svc_decoder+0x144>
 801ad1e:	ed9f 0a69 	vldr	s0, [pc, #420]	; 801aec4 <svc_decoder+0x2c4>
 801ad22:	462b      	mov	r3, r5
 801ad24:	eb04 020b 	add.w	r2, r4, fp
 801ad28:	ecb4 7a01 	vldmia	r4!, {s14}
 801ad2c:	ecf3 7a01 	vldmia	r3!, {s15}
 801ad30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ad34:	4294      	cmp	r4, r2
 801ad36:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801ad3a:	d1f5      	bne.n	801ad28 <svc_decoder+0x128>
 801ad3c:	ee20 0a48 	vnmul.f32	s0, s0, s16
 801ad40:	f001 fe06 	bl	801c950 <expf>
 801ad44:	3601      	adds	r6, #1
 801ad46:	45b1      	cmp	r9, r6
 801ad48:	eca8 0a01 	vstmia	r8!, {s0}
 801ad4c:	d1e4      	bne.n	801ad18 <svc_decoder+0x118>
 801ad4e:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 801ad52:	ee18 6a90 	vmov	r6, s17
 801ad56:	e7a1      	b.n	801ac9c <svc_decoder+0x9c>
 801ad58:	682a      	ldr	r2, [r5, #0]
 801ad5a:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801ad5c:	f1b9 0f00 	cmp.w	r9, #0
 801ad60:	d09c      	beq.n	801ac9c <svc_decoder+0x9c>
 801ad62:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ad64:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 801ad68:	2100      	movs	r1, #0
 801ad6a:	eddf 7a56 	vldr	s15, [pc, #344]	; 801aec4 <svc_decoder+0x2c4>
 801ad6e:	b152      	cbz	r2, 801ad86 <svc_decoder+0x186>
 801ad70:	463b      	mov	r3, r7
 801ad72:	eb04 0c0b 	add.w	ip, r4, fp
 801ad76:	ecb4 7a01 	vldmia	r4!, {s14}
 801ad7a:	ecf3 6a01 	vldmia	r3!, {s13}
 801ad7e:	4564      	cmp	r4, ip
 801ad80:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ad84:	d1f7      	bne.n	801ad76 <svc_decoder+0x176>
 801ad86:	3101      	adds	r1, #1
 801ad88:	4589      	cmp	r9, r1
 801ad8a:	ece0 7a01 	vstmia	r0!, {s15}
 801ad8e:	d1ec      	bne.n	801ad6a <svc_decoder+0x16a>
 801ad90:	e784      	b.n	801ac9c <svc_decoder+0x9c>
 801ad92:	ed95 9a06 	vldr	s18, [r5, #24]
 801ad96:	edd5 8a07 	vldr	s17, [r5, #28]
 801ad9a:	682a      	ldr	r2, [r5, #0]
 801ad9c:	6a29      	ldr	r1, [r5, #32]
 801ad9e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801ada0:	f1b9 0f00 	cmp.w	r9, #0
 801ada4:	f43f af7a 	beq.w	801ac9c <svc_decoder+0x9c>
 801ada8:	ee07 1a90 	vmov	s15, r1
 801adac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801adae:	9504      	str	r5, [sp, #16]
 801adb0:	f04f 0b00 	mov.w	fp, #0
 801adb4:	0091      	lsls	r1, r2, #2
 801adb6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 801adba:	ee09 6a90 	vmov	s19, r6
 801adbe:	f8cd 8014 	str.w	r8, [sp, #20]
 801adc2:	465e      	mov	r6, fp
 801adc4:	46a0      	mov	r8, r4
 801adc6:	468b      	mov	fp, r1
 801adc8:	4605      	mov	r5, r0
 801adca:	4617      	mov	r7, r2
 801adcc:	461c      	mov	r4, r3
 801adce:	eeb0 0a68 	vmov.f32	s0, s17
 801add2:	b187      	cbz	r7, 801adf6 <svc_decoder+0x1f6>
 801add4:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801aec4 <svc_decoder+0x2c4>
 801add8:	462b      	mov	r3, r5
 801adda:	eb04 020b 	add.w	r2, r4, fp
 801adde:	ecb4 7a01 	vldmia	r4!, {s14}
 801ade2:	ecf3 6a01 	vldmia	r3!, {s13}
 801ade6:	4294      	cmp	r4, r2
 801ade8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801adec:	d1f7      	bne.n	801adde <svc_decoder+0x1de>
 801adee:	eeb0 0a68 	vmov.f32	s0, s17
 801adf2:	eea9 0a27 	vfma.f32	s0, s18, s15
 801adf6:	3601      	adds	r6, #1
 801adf8:	eef0 0a48 	vmov.f32	s1, s16
 801adfc:	f001 fdde 	bl	801c9bc <powf>
 801ae00:	45b1      	cmp	r9, r6
 801ae02:	eca8 0a01 	vstmia	r8!, {s0}
 801ae06:	d1e2      	bne.n	801adce <svc_decoder+0x1ce>
 801ae08:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 801ae0c:	ee19 6a90 	vmov	r6, s19
 801ae10:	e744      	b.n	801ac9c <svc_decoder+0x9c>
 801ae12:	4633      	mov	r3, r6
 801ae14:	4642      	mov	r2, r8
 801ae16:	4628      	mov	r0, r5
 801ae18:	f7ff fbf4 	bl	801a604 <svc_ovo_output>
 801ae1c:	4633      	mov	r3, r6
 801ae1e:	ee1a 2a10 	vmov	r2, s20
 801ae22:	4641      	mov	r1, r8
 801ae24:	4628      	mov	r0, r5
 801ae26:	f7ff fccb 	bl	801a7c0 <svc_ovo_classification_vote>
 801ae2a:	68ab      	ldr	r3, [r5, #8]
 801ae2c:	f8d5 9038 	ldr.w	r9, [r5, #56]	; 0x38
 801ae30:	f8d5 a03c 	ldr.w	sl, [r5, #60]	; 0x3c
 801ae34:	f103 3bff 	add.w	fp, r3, #4294967295
 801ae38:	fb03 fb0b 	mul.w	fp, r3, fp
 801ae3c:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
 801ae40:	d01d      	beq.n	801ae7e <svc_decoder+0x27e>
 801ae42:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801ae46:	4647      	mov	r7, r8
 801ae48:	2400      	movs	r4, #0
 801ae4a:	ecf7 6a01 	vldmia	r7!, {s13}
 801ae4e:	ecb9 7a01 	vldmia	r9!, {s14}
 801ae52:	ecfa 7a01 	vldmia	sl!, {s15}
 801ae56:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ae5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ae5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae62:	eeb1 0a67 	vneg.f32	s0, s15
 801ae66:	db19      	blt.n	801ae9c <svc_decoder+0x29c>
 801ae68:	f001 fd72 	bl	801c950 <expf>
 801ae6c:	ee30 7a08 	vadd.f32	s14, s0, s16
 801ae70:	3401      	adds	r4, #1
 801ae72:	eec0 7a07 	vdiv.f32	s15, s0, s14
 801ae76:	45a3      	cmp	fp, r4
 801ae78:	ed47 7a01 	vstr	s15, [r7, #-4]
 801ae7c:	d1e5      	bne.n	801ae4a <svc_decoder+0x24a>
 801ae7e:	4628      	mov	r0, r5
 801ae80:	ee1a 3a10 	vmov	r3, s20
 801ae84:	9a02      	ldr	r2, [sp, #8]
 801ae86:	9600      	str	r6, [sp, #0]
 801ae88:	4641      	mov	r1, r8
 801ae8a:	f7ff fd3f 	bl	801a90c <svc_iter_prob_estimate>
 801ae8e:	ee18 0a90 	vmov	r0, s17
 801ae92:	b007      	add	sp, #28
 801ae94:	ecbd 8b06 	vpop	{d8-d10}
 801ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae9c:	eeb0 0a67 	vmov.f32	s0, s15
 801aea0:	f001 fd56 	bl	801c950 <expf>
 801aea4:	ee30 0a08 	vadd.f32	s0, s0, s16
 801aea8:	3401      	adds	r4, #1
 801aeaa:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801aeae:	45a3      	cmp	fp, r4
 801aeb0:	ed47 7a01 	vstr	s15, [r7, #-4]
 801aeb4:	d1c9      	bne.n	801ae4a <svc_decoder+0x24a>
 801aeb6:	e7e2      	b.n	801ae7e <svc_decoder+0x27e>
 801aeb8:	f06f 0301 	mvn.w	r3, #1
 801aebc:	ee08 3a90 	vmov	s17, r3
 801aec0:	e6ef      	b.n	801aca2 <svc_decoder+0xa2>
 801aec2:	bf00      	nop
 801aec4:	00000000 	.word	0x00000000

0801aec8 <forward_svc>:
 801aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aecc:	6983      	ldr	r3, [r0, #24]
 801aece:	881c      	ldrh	r4, [r3, #0]
 801aed0:	b09b      	sub	sp, #108	; 0x6c
 801aed2:	2c00      	cmp	r4, #0
 801aed4:	f000 80b0 	beq.w	801b038 <forward_svc+0x170>
 801aed8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801aedc:	4602      	mov	r2, r0
 801aede:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801aee2:	2c01      	cmp	r4, #1
 801aee4:	bf14      	ite	ne
 801aee6:	f109 030c 	addne.w	r3, r9, #12
 801aeea:	2300      	moveq	r3, #0
 801aeec:	b100      	cbz	r0, 801aef0 <forward_svc+0x28>
 801aeee:	6800      	ldr	r0, [r0, #0]
 801aef0:	6859      	ldr	r1, [r3, #4]
 801aef2:	2900      	cmp	r1, #0
 801aef4:	f000 8096 	beq.w	801b024 <forward_svc+0x15c>
 801aef8:	e9d1 8100 	ldrd	r8, r1, [r1]
 801aefc:	2c02      	cmp	r4, #2
 801aefe:	f240 809f 	bls.w	801b040 <forward_svc+0x178>
 801af02:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801af06:	2b00      	cmp	r3, #0
 801af08:	f000 808e 	beq.w	801b028 <forward_svc+0x160>
 801af0c:	e9d3 6e00 	ldrd	r6, lr, [r3]
 801af10:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 801af14:	f8d3 c010 	ldr.w	ip, [r3, #16]
 801af18:	2c03      	cmp	r4, #3
 801af1a:	f000 8091 	beq.w	801b040 <forward_svc+0x178>
 801af1e:	f8d9 4028 	ldr.w	r4, [r9, #40]	; 0x28
 801af22:	2c00      	cmp	r4, #0
 801af24:	f000 808a 	beq.w	801b03c <forward_svc+0x174>
 801af28:	6824      	ldr	r4, [r4, #0]
 801af2a:	69a4      	ldr	r4, [r4, #24]
 801af2c:	68a4      	ldr	r4, [r4, #8]
 801af2e:	9407      	str	r4, [sp, #28]
 801af30:	f892 4029 	ldrb.w	r4, [r2, #41]	; 0x29
 801af34:	2c00      	cmp	r4, #0
 801af36:	d16e      	bne.n	801b016 <forward_svc+0x14e>
 801af38:	4623      	mov	r3, r4
 801af3a:	46a3      	mov	fp, r4
 801af3c:	f8d8 8018 	ldr.w	r8, [r8, #24]
 801af40:	6989      	ldr	r1, [r1, #24]
 801af42:	f8d8 9008 	ldr.w	r9, [r8, #8]
 801af46:	f8d7 800c 	ldr.w	r8, [r7, #12]
 801af4a:	69b6      	ldr	r6, [r6, #24]
 801af4c:	edd1 7a02 	vldr	s15, [r1, #8]
 801af50:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801af54:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801af58:	69ad      	ldr	r5, [r5, #24]
 801af5a:	68b6      	ldr	r6, [r6, #8]
 801af5c:	9103      	str	r1, [sp, #12]
 801af5e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801af62:	f8dc c018 	ldr.w	ip, [ip, #24]
 801af66:	69bf      	ldr	r7, [r7, #24]
 801af68:	9605      	str	r6, [sp, #20]
 801af6a:	9104      	str	r1, [sp, #16]
 801af6c:	68c6      	ldr	r6, [r0, #12]
 801af6e:	68a9      	ldr	r1, [r5, #8]
 801af70:	6980      	ldr	r0, [r0, #24]
 801af72:	f8de 500c 	ldr.w	r5, [lr, #12]
 801af76:	f8de e018 	ldr.w	lr, [lr, #24]
 801af7a:	6876      	ldr	r6, [r6, #4]
 801af7c:	68ed      	ldr	r5, [r5, #12]
 801af7e:	f8de a008 	ldr.w	sl, [lr, #8]
 801af82:	6880      	ldr	r0, [r0, #8]
 801af84:	f8dc e008 	ldr.w	lr, [ip, #8]
 801af88:	f8d7 8008 	ldr.w	r8, [r7, #8]
 801af8c:	9106      	str	r1, [sp, #24]
 801af8e:	fbb5 f5f6 	udiv	r5, r5, r6
 801af92:	2c00      	cmp	r4, #0
 801af94:	d043      	beq.n	801b01e <forward_svc+0x156>
 801af96:	f8db b018 	ldr.w	fp, [fp, #24]
 801af9a:	699b      	ldr	r3, [r3, #24]
 801af9c:	f8db b008 	ldr.w	fp, [fp, #8]
 801afa0:	689b      	ldr	r3, [r3, #8]
 801afa2:	9907      	ldr	r1, [sp, #28]
 801afa4:	f8dc c000 	ldr.w	ip, [ip]
 801afa8:	683f      	ldr	r7, [r7, #0]
 801afaa:	9100      	str	r1, [sp, #0]
 801afac:	9903      	ldr	r1, [sp, #12]
 801afae:	910b      	str	r1, [sp, #44]	; 0x2c
 801afb0:	9904      	ldr	r1, [sp, #16]
 801afb2:	910d      	str	r1, [sp, #52]	; 0x34
 801afb4:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
 801afb8:	9905      	ldr	r1, [sp, #20]
 801afba:	69d4      	ldr	r4, [r2, #28]
 801afbc:	940f      	str	r4, [sp, #60]	; 0x3c
 801afbe:	6a14      	ldr	r4, [r2, #32]
 801afc0:	9410      	str	r4, [sp, #64]	; 0x40
 801afc2:	e9cd 1a13 	strd	r1, sl, [sp, #76]	; 0x4c
 801afc6:	f892 4028 	ldrb.w	r4, [r2, #40]	; 0x28
 801afca:	9906      	ldr	r1, [sp, #24]
 801afcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801afce:	9115      	str	r1, [sp, #84]	; 0x54
 801afd0:	9318      	str	r3, [sp, #96]	; 0x60
 801afd2:	ee17 1a90 	vmov	r1, s15
 801afd6:	f3cc 1cc6 	ubfx	ip, ip, #7, #7
 801afda:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
 801afde:	9211      	str	r2, [sp, #68]	; 0x44
 801afe0:	f3c7 17c6 	ubfx	r7, r7, #7, #7
 801afe4:	ab09      	add	r3, sp, #36	; 0x24
 801afe6:	aa08      	add	r2, sp, #32
 801afe8:	2400      	movs	r4, #0
 801afea:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
 801afee:	e9cd eb16 	strd	lr, fp, [sp, #88]	; 0x58
 801aff2:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 801aff6:	f88d c048 	strb.w	ip, [sp, #72]	; 0x48
 801affa:	f88d 7049 	strb.w	r7, [sp, #73]	; 0x49
 801affe:	9408      	str	r4, [sp, #32]
 801b000:	f7ff fdfe 	bl	801ac00 <svc_decoder>
 801b004:	eddd 7a08 	vldr	s15, [sp, #32]
 801b008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b00c:	edc9 7a00 	vstr	s15, [r9]
 801b010:	b01b      	add	sp, #108	; 0x6c
 801b012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b016:	b16b      	cbz	r3, 801b034 <forward_svc+0x16c>
 801b018:	e9d3 b305 	ldrd	fp, r3, [r3, #20]
 801b01c:	e78e      	b.n	801af3c <forward_svc+0x74>
 801b01e:	4623      	mov	r3, r4
 801b020:	46a3      	mov	fp, r4
 801b022:	e7be      	b.n	801afa2 <forward_svc+0xda>
 801b024:	4688      	mov	r8, r1
 801b026:	e769      	b.n	801aefc <forward_svc+0x34>
 801b028:	461f      	mov	r7, r3
 801b02a:	461d      	mov	r5, r3
 801b02c:	469e      	mov	lr, r3
 801b02e:	461e      	mov	r6, r3
 801b030:	469c      	mov	ip, r3
 801b032:	e771      	b.n	801af18 <forward_svc+0x50>
 801b034:	469b      	mov	fp, r3
 801b036:	e781      	b.n	801af3c <forward_svc+0x74>
 801b038:	6863      	ldr	r3, [r4, #4]
 801b03a:	deff      	udf	#255	; 0xff
 801b03c:	69a3      	ldr	r3, [r4, #24]
 801b03e:	deff      	udf	#255	; 0xff
 801b040:	2300      	movs	r3, #0
 801b042:	685b      	ldr	r3, [r3, #4]
 801b044:	deff      	udf	#255	; 0xff
 801b046:	bf00      	nop

0801b048 <ai_check_custom_types>:
 801b048:	b082      	sub	sp, #8
 801b04a:	4b13      	ldr	r3, [pc, #76]	; (801b098 <ai_check_custom_types+0x50>)
 801b04c:	9301      	str	r3, [sp, #4]
 801b04e:	b118      	cbz	r0, 801b058 <ai_check_custom_types+0x10>
 801b050:	7803      	ldrb	r3, [r0, #0]
 801b052:	2b03      	cmp	r3, #3
 801b054:	d002      	beq.n	801b05c <ai_check_custom_types+0x14>
 801b056:	2000      	movs	r0, #0
 801b058:	b002      	add	sp, #8
 801b05a:	4770      	bx	lr
 801b05c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801b060:	4293      	cmp	r3, r2
 801b062:	d004      	beq.n	801b06e <ai_check_custom_types+0x26>
 801b064:	2001      	movs	r0, #1
 801b066:	f080 0001 	eor.w	r0, r0, #1
 801b06a:	b002      	add	sp, #8
 801b06c:	4770      	bx	lr
 801b06e:	7842      	ldrb	r2, [r0, #1]
 801b070:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801b074:	429a      	cmp	r2, r3
 801b076:	f100 0001 	add.w	r0, r0, #1
 801b07a:	d1f3      	bne.n	801b064 <ai_check_custom_types+0x1c>
 801b07c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801b080:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801b084:	429a      	cmp	r2, r3
 801b086:	d1ed      	bne.n	801b064 <ai_check_custom_types+0x1c>
 801b088:	7842      	ldrb	r2, [r0, #1]
 801b08a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801b08e:	429a      	cmp	r2, r3
 801b090:	d1e8      	bne.n	801b064 <ai_check_custom_types+0x1c>
 801b092:	2000      	movs	r0, #0
 801b094:	e7e7      	b.n	801b066 <ai_check_custom_types+0x1e>
 801b096:	bf00      	nop
 801b098:	84048403 	.word	0x84048403

0801b09c <ai_layers_init_all>:
 801b09c:	4601      	mov	r1, r0
 801b09e:	2000      	movs	r0, #0
 801b0a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801b0a2:	b143      	cbz	r3, 801b0b6 <ai_layers_init_all+0x1a>
 801b0a4:	691a      	ldr	r2, [r3, #16]
 801b0a6:	60d9      	str	r1, [r3, #12]
 801b0a8:	429a      	cmp	r2, r3
 801b0aa:	f100 0001 	add.w	r0, r0, #1
 801b0ae:	d002      	beq.n	801b0b6 <ai_layers_init_all+0x1a>
 801b0b0:	b10a      	cbz	r2, 801b0b6 <ai_layers_init_all+0x1a>
 801b0b2:	4613      	mov	r3, r2
 801b0b4:	e7f5      	b.n	801b0a2 <ai_layers_init_all+0x6>
 801b0b6:	4770      	bx	lr

0801b0b8 <ai_layers_post_init_all>:
 801b0b8:	b538      	push	{r3, r4, r5, lr}
 801b0ba:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801b0bc:	2500      	movs	r5, #0
 801b0be:	b16c      	cbz	r4, 801b0dc <ai_layers_post_init_all+0x24>
 801b0c0:	6863      	ldr	r3, [r4, #4]
 801b0c2:	07db      	lsls	r3, r3, #31
 801b0c4:	d504      	bpl.n	801b0d0 <ai_layers_post_init_all+0x18>
 801b0c6:	6a23      	ldr	r3, [r4, #32]
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	b10b      	cbz	r3, 801b0d0 <ai_layers_post_init_all+0x18>
 801b0cc:	4798      	blx	r3
 801b0ce:	3501      	adds	r5, #1
 801b0d0:	6923      	ldr	r3, [r4, #16]
 801b0d2:	42a3      	cmp	r3, r4
 801b0d4:	d002      	beq.n	801b0dc <ai_layers_post_init_all+0x24>
 801b0d6:	b10b      	cbz	r3, 801b0dc <ai_layers_post_init_all+0x24>
 801b0d8:	461c      	mov	r4, r3
 801b0da:	e7f0      	b.n	801b0be <ai_layers_post_init_all+0x6>
 801b0dc:	4628      	mov	r0, r5
 801b0de:	bd38      	pop	{r3, r4, r5, pc}

0801b0e0 <ai_layers_forward_all>:
 801b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0e4:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 801b0e8:	4604      	mov	r4, r0
 801b0ea:	f1b8 0f00 	cmp.w	r8, #0
 801b0ee:	d02b      	beq.n	801b148 <ai_layers_forward_all+0x68>
 801b0f0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801b0f2:	6381      	str	r1, [r0, #56]	; 0x38
 801b0f4:	b321      	cbz	r1, 801b140 <ai_layers_forward_all+0x60>
 801b0f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801b0f8:	2001      	movs	r0, #1
 801b0fa:	47c0      	blx	r8
 801b0fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b0fe:	b1fe      	cbz	r6, 801b140 <ai_layers_forward_all+0x60>
 801b100:	2700      	movs	r7, #0
 801b102:	4631      	mov	r1, r6
 801b104:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801b106:	2002      	movs	r0, #2
 801b108:	47c0      	blx	r8
 801b10a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801b10c:	4628      	mov	r0, r5
 801b10e:	696b      	ldr	r3, [r5, #20]
 801b110:	4798      	blx	r3
 801b112:	692e      	ldr	r6, [r5, #16]
 801b114:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801b116:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b118:	42b5      	cmp	r5, r6
 801b11a:	f04f 0003 	mov.w	r0, #3
 801b11e:	d007      	beq.n	801b130 <ai_layers_forward_all+0x50>
 801b120:	47c0      	blx	r8
 801b122:	3701      	adds	r7, #1
 801b124:	63a6      	str	r6, [r4, #56]	; 0x38
 801b126:	2e00      	cmp	r6, #0
 801b128:	d1eb      	bne.n	801b102 <ai_layers_forward_all+0x22>
 801b12a:	4638      	mov	r0, r7
 801b12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b130:	2003      	movs	r0, #3
 801b132:	47c0      	blx	r8
 801b134:	2300      	movs	r3, #0
 801b136:	3701      	adds	r7, #1
 801b138:	63a3      	str	r3, [r4, #56]	; 0x38
 801b13a:	4638      	mov	r0, r7
 801b13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b140:	2700      	movs	r7, #0
 801b142:	4638      	mov	r0, r7
 801b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b148:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801b14a:	6385      	str	r5, [r0, #56]	; 0x38
 801b14c:	2d00      	cmp	r5, #0
 801b14e:	d0f7      	beq.n	801b140 <ai_layers_forward_all+0x60>
 801b150:	4647      	mov	r7, r8
 801b152:	696b      	ldr	r3, [r5, #20]
 801b154:	4628      	mov	r0, r5
 801b156:	4798      	blx	r3
 801b158:	462b      	mov	r3, r5
 801b15a:	692d      	ldr	r5, [r5, #16]
 801b15c:	429d      	cmp	r5, r3
 801b15e:	d004      	beq.n	801b16a <ai_layers_forward_all+0x8a>
 801b160:	63a5      	str	r5, [r4, #56]	; 0x38
 801b162:	3701      	adds	r7, #1
 801b164:	2d00      	cmp	r5, #0
 801b166:	d1f4      	bne.n	801b152 <ai_layers_forward_all+0x72>
 801b168:	e7df      	b.n	801b12a <ai_layers_forward_all+0x4a>
 801b16a:	2300      	movs	r3, #0
 801b16c:	63a3      	str	r3, [r4, #56]	; 0x38
 801b16e:	3701      	adds	r7, #1
 801b170:	e7db      	b.n	801b12a <ai_layers_forward_all+0x4a>
 801b172:	bf00      	nop

0801b174 <ai_version_get>:
 801b174:	0212      	lsls	r2, r2, #8
 801b176:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801b17a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801b17e:	4770      	bx	lr

0801b180 <get_tensor_byte_size>:
 801b180:	b410      	push	{r4}
 801b182:	6983      	ldr	r3, [r0, #24]
 801b184:	68c4      	ldr	r4, [r0, #12]
 801b186:	6941      	ldr	r1, [r0, #20]
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	68e0      	ldr	r0, [r4, #12]
 801b18c:	4a07      	ldr	r2, [pc, #28]	; (801b1ac <get_tensor_byte_size+0x2c>)
 801b18e:	68c9      	ldr	r1, [r1, #12]
 801b190:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b194:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 801b198:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801b19c:	fb01 f000 	mul.w	r0, r1, r0
 801b1a0:	4293      	cmp	r3, r2
 801b1a2:	bf04      	itt	eq
 801b1a4:	3007      	addeq	r0, #7
 801b1a6:	08c0      	lsreq	r0, r0, #3
 801b1a8:	4770      	bx	lr
 801b1aa:	bf00      	nop
 801b1ac:	000400c0 	.word	0x000400c0

0801b1b0 <ai_array_to_buffer_fmt>:
 801b1b0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801b1b4:	2b02      	cmp	r3, #2
 801b1b6:	d050      	beq.n	801b25a <ai_array_to_buffer_fmt+0xaa>
 801b1b8:	4b2a      	ldr	r3, [pc, #168]	; (801b264 <ai_array_to_buffer_fmt+0xb4>)
 801b1ba:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	d00b      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b1c2:	dc1c      	bgt.n	801b1fe <ai_array_to_buffer_fmt+0x4e>
 801b1c4:	4b28      	ldr	r3, [pc, #160]	; (801b268 <ai_array_to_buffer_fmt+0xb8>)
 801b1c6:	429a      	cmp	r2, r3
 801b1c8:	d007      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b1ca:	dd0b      	ble.n	801b1e4 <ai_array_to_buffer_fmt+0x34>
 801b1cc:	4b27      	ldr	r3, [pc, #156]	; (801b26c <ai_array_to_buffer_fmt+0xbc>)
 801b1ce:	429a      	cmp	r2, r3
 801b1d0:	d003      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b1d2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801b1d6:	429a      	cmp	r2, r3
 801b1d8:	d131      	bne.n	801b23e <ai_array_to_buffer_fmt+0x8e>
 801b1da:	4613      	mov	r3, r2
 801b1dc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801b1e0:	4318      	orrs	r0, r3
 801b1e2:	4770      	bx	lr
 801b1e4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801b1e8:	429a      	cmp	r2, r3
 801b1ea:	d0f6      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b1ec:	dd2c      	ble.n	801b248 <ai_array_to_buffer_fmt+0x98>
 801b1ee:	4b20      	ldr	r3, [pc, #128]	; (801b270 <ai_array_to_buffer_fmt+0xc0>)
 801b1f0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801b1f4:	429a      	cmp	r2, r3
 801b1f6:	bf18      	it	ne
 801b1f8:	2340      	movne	r3, #64	; 0x40
 801b1fa:	4318      	orrs	r0, r3
 801b1fc:	4770      	bx	lr
 801b1fe:	4b1d      	ldr	r3, [pc, #116]	; (801b274 <ai_array_to_buffer_fmt+0xc4>)
 801b200:	429a      	cmp	r2, r3
 801b202:	d0ea      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b204:	dd0e      	ble.n	801b224 <ai_array_to_buffer_fmt+0x74>
 801b206:	4b1c      	ldr	r3, [pc, #112]	; (801b278 <ai_array_to_buffer_fmt+0xc8>)
 801b208:	429a      	cmp	r2, r3
 801b20a:	d0e6      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b20c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 801b210:	429a      	cmp	r2, r3
 801b212:	d0e2      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b214:	4b19      	ldr	r3, [pc, #100]	; (801b27c <ai_array_to_buffer_fmt+0xcc>)
 801b216:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801b21a:	429a      	cmp	r2, r3
 801b21c:	bf18      	it	ne
 801b21e:	2340      	movne	r3, #64	; 0x40
 801b220:	4318      	orrs	r0, r3
 801b222:	4770      	bx	lr
 801b224:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801b228:	429a      	cmp	r2, r3
 801b22a:	d0d6      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b22c:	3307      	adds	r3, #7
 801b22e:	429a      	cmp	r2, r3
 801b230:	d0d3      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b232:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801b236:	429a      	cmp	r2, r3
 801b238:	bf18      	it	ne
 801b23a:	2340      	movne	r3, #64	; 0x40
 801b23c:	e7ce      	b.n	801b1dc <ai_array_to_buffer_fmt+0x2c>
 801b23e:	4b10      	ldr	r3, [pc, #64]	; (801b280 <ai_array_to_buffer_fmt+0xd0>)
 801b240:	429a      	cmp	r2, r3
 801b242:	bf18      	it	ne
 801b244:	2340      	movne	r3, #64	; 0x40
 801b246:	e7c9      	b.n	801b1dc <ai_array_to_buffer_fmt+0x2c>
 801b248:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801b24c:	429a      	cmp	r2, r3
 801b24e:	d0c4      	beq.n	801b1da <ai_array_to_buffer_fmt+0x2a>
 801b250:	3380      	adds	r3, #128	; 0x80
 801b252:	429a      	cmp	r2, r3
 801b254:	bf18      	it	ne
 801b256:	2340      	movne	r3, #64	; 0x40
 801b258:	e7c0      	b.n	801b1dc <ai_array_to_buffer_fmt+0x2c>
 801b25a:	4b0a      	ldr	r3, [pc, #40]	; (801b284 <ai_array_to_buffer_fmt+0xd4>)
 801b25c:	4003      	ands	r3, r0
 801b25e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b262:	e7bb      	b.n	801b1dc <ai_array_to_buffer_fmt+0x2c>
 801b264:	00840040 	.word	0x00840040
 801b268:	00040840 	.word	0x00040840
 801b26c:	00041040 	.word	0x00041040
 801b270:	00040447 	.word	0x00040447
 801b274:	00840840 	.word	0x00840840
 801b278:	00841040 	.word	0x00841040
 801b27c:	0084084f 	.word	0x0084084f
 801b280:	0004084f 	.word	0x0004084f
 801b284:	00803fff 	.word	0x00803fff

0801b288 <ai_array_get_byte_size>:
 801b288:	b319      	cbz	r1, 801b2d2 <ai_array_get_byte_size+0x4a>
 801b28a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801b28e:	fb03 f101 	mul.w	r1, r3, r1
 801b292:	3107      	adds	r1, #7
 801b294:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801b298:	f021 0307 	bic.w	r3, r1, #7
 801b29c:	2a04      	cmp	r2, #4
 801b29e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 801b2a2:	fa23 f101 	lsr.w	r1, r3, r1
 801b2a6:	ea4f 10e0 	mov.w	r0, r0, asr #7
 801b2aa:	d00b      	beq.n	801b2c4 <ai_array_get_byte_size+0x3c>
 801b2ac:	2a08      	cmp	r2, #8
 801b2ae:	d002      	beq.n	801b2b6 <ai_array_get_byte_size+0x2e>
 801b2b0:	3107      	adds	r1, #7
 801b2b2:	08c8      	lsrs	r0, r1, #3
 801b2b4:	4770      	bx	lr
 801b2b6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b2ba:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801b2be:	3107      	adds	r1, #7
 801b2c0:	08c8      	lsrs	r0, r1, #3
 801b2c2:	4770      	bx	lr
 801b2c4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b2c8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801b2cc:	3107      	adds	r1, #7
 801b2ce:	08c8      	lsrs	r0, r1, #3
 801b2d0:	4770      	bx	lr
 801b2d2:	4608      	mov	r0, r1
 801b2d4:	4770      	bx	lr
 801b2d6:	bf00      	nop

0801b2d8 <ai_array_get_data_byte_size>:
 801b2d8:	b169      	cbz	r1, 801b2f6 <ai_array_get_data_byte_size+0x1e>
 801b2da:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 801b2de:	fb02 f101 	mul.w	r1, r2, r1
 801b2e2:	1dcb      	adds	r3, r1, #7
 801b2e4:	f023 0307 	bic.w	r3, r3, #7
 801b2e8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801b2ec:	fa23 f000 	lsr.w	r0, r3, r0
 801b2f0:	3007      	adds	r0, #7
 801b2f2:	08c0      	lsrs	r0, r0, #3
 801b2f4:	4770      	bx	lr
 801b2f6:	4608      	mov	r0, r1
 801b2f8:	4770      	bx	lr
 801b2fa:	bf00      	nop

0801b2fc <__errno>:
 801b2fc:	4b01      	ldr	r3, [pc, #4]	; (801b304 <__errno+0x8>)
 801b2fe:	6818      	ldr	r0, [r3, #0]
 801b300:	4770      	bx	lr
 801b302:	bf00      	nop
 801b304:	20000958 	.word	0x20000958

0801b308 <__libc_init_array>:
 801b308:	b570      	push	{r4, r5, r6, lr}
 801b30a:	4d0d      	ldr	r5, [pc, #52]	; (801b340 <__libc_init_array+0x38>)
 801b30c:	4c0d      	ldr	r4, [pc, #52]	; (801b344 <__libc_init_array+0x3c>)
 801b30e:	1b64      	subs	r4, r4, r5
 801b310:	10a4      	asrs	r4, r4, #2
 801b312:	2600      	movs	r6, #0
 801b314:	42a6      	cmp	r6, r4
 801b316:	d109      	bne.n	801b32c <__libc_init_array+0x24>
 801b318:	4d0b      	ldr	r5, [pc, #44]	; (801b348 <__libc_init_array+0x40>)
 801b31a:	4c0c      	ldr	r4, [pc, #48]	; (801b34c <__libc_init_array+0x44>)
 801b31c:	f002 ffe8 	bl	801e2f0 <_init>
 801b320:	1b64      	subs	r4, r4, r5
 801b322:	10a4      	asrs	r4, r4, #2
 801b324:	2600      	movs	r6, #0
 801b326:	42a6      	cmp	r6, r4
 801b328:	d105      	bne.n	801b336 <__libc_init_array+0x2e>
 801b32a:	bd70      	pop	{r4, r5, r6, pc}
 801b32c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b330:	4798      	blx	r3
 801b332:	3601      	adds	r6, #1
 801b334:	e7ee      	b.n	801b314 <__libc_init_array+0xc>
 801b336:	f855 3b04 	ldr.w	r3, [r5], #4
 801b33a:	4798      	blx	r3
 801b33c:	3601      	adds	r6, #1
 801b33e:	e7f2      	b.n	801b326 <__libc_init_array+0x1e>
 801b340:	0802b8c8 	.word	0x0802b8c8
 801b344:	0802b8c8 	.word	0x0802b8c8
 801b348:	0802b8c8 	.word	0x0802b8c8
 801b34c:	0802b8cc 	.word	0x0802b8cc

0801b350 <malloc>:
 801b350:	4b02      	ldr	r3, [pc, #8]	; (801b35c <malloc+0xc>)
 801b352:	4601      	mov	r1, r0
 801b354:	6818      	ldr	r0, [r3, #0]
 801b356:	f000 b88d 	b.w	801b474 <_malloc_r>
 801b35a:	bf00      	nop
 801b35c:	20000958 	.word	0x20000958

0801b360 <free>:
 801b360:	4b02      	ldr	r3, [pc, #8]	; (801b36c <free+0xc>)
 801b362:	4601      	mov	r1, r0
 801b364:	6818      	ldr	r0, [r3, #0]
 801b366:	f000 b819 	b.w	801b39c <_free_r>
 801b36a:	bf00      	nop
 801b36c:	20000958 	.word	0x20000958

0801b370 <memcpy>:
 801b370:	440a      	add	r2, r1
 801b372:	4291      	cmp	r1, r2
 801b374:	f100 33ff 	add.w	r3, r0, #4294967295
 801b378:	d100      	bne.n	801b37c <memcpy+0xc>
 801b37a:	4770      	bx	lr
 801b37c:	b510      	push	{r4, lr}
 801b37e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b382:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b386:	4291      	cmp	r1, r2
 801b388:	d1f9      	bne.n	801b37e <memcpy+0xe>
 801b38a:	bd10      	pop	{r4, pc}

0801b38c <memset>:
 801b38c:	4402      	add	r2, r0
 801b38e:	4603      	mov	r3, r0
 801b390:	4293      	cmp	r3, r2
 801b392:	d100      	bne.n	801b396 <memset+0xa>
 801b394:	4770      	bx	lr
 801b396:	f803 1b01 	strb.w	r1, [r3], #1
 801b39a:	e7f9      	b.n	801b390 <memset+0x4>

0801b39c <_free_r>:
 801b39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b39e:	2900      	cmp	r1, #0
 801b3a0:	d044      	beq.n	801b42c <_free_r+0x90>
 801b3a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b3a6:	9001      	str	r0, [sp, #4]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	f1a1 0404 	sub.w	r4, r1, #4
 801b3ae:	bfb8      	it	lt
 801b3b0:	18e4      	addlt	r4, r4, r3
 801b3b2:	f000 fc8d 	bl	801bcd0 <__malloc_lock>
 801b3b6:	4a1e      	ldr	r2, [pc, #120]	; (801b430 <_free_r+0x94>)
 801b3b8:	9801      	ldr	r0, [sp, #4]
 801b3ba:	6813      	ldr	r3, [r2, #0]
 801b3bc:	b933      	cbnz	r3, 801b3cc <_free_r+0x30>
 801b3be:	6063      	str	r3, [r4, #4]
 801b3c0:	6014      	str	r4, [r2, #0]
 801b3c2:	b003      	add	sp, #12
 801b3c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b3c8:	f000 bc88 	b.w	801bcdc <__malloc_unlock>
 801b3cc:	42a3      	cmp	r3, r4
 801b3ce:	d908      	bls.n	801b3e2 <_free_r+0x46>
 801b3d0:	6825      	ldr	r5, [r4, #0]
 801b3d2:	1961      	adds	r1, r4, r5
 801b3d4:	428b      	cmp	r3, r1
 801b3d6:	bf01      	itttt	eq
 801b3d8:	6819      	ldreq	r1, [r3, #0]
 801b3da:	685b      	ldreq	r3, [r3, #4]
 801b3dc:	1949      	addeq	r1, r1, r5
 801b3de:	6021      	streq	r1, [r4, #0]
 801b3e0:	e7ed      	b.n	801b3be <_free_r+0x22>
 801b3e2:	461a      	mov	r2, r3
 801b3e4:	685b      	ldr	r3, [r3, #4]
 801b3e6:	b10b      	cbz	r3, 801b3ec <_free_r+0x50>
 801b3e8:	42a3      	cmp	r3, r4
 801b3ea:	d9fa      	bls.n	801b3e2 <_free_r+0x46>
 801b3ec:	6811      	ldr	r1, [r2, #0]
 801b3ee:	1855      	adds	r5, r2, r1
 801b3f0:	42a5      	cmp	r5, r4
 801b3f2:	d10b      	bne.n	801b40c <_free_r+0x70>
 801b3f4:	6824      	ldr	r4, [r4, #0]
 801b3f6:	4421      	add	r1, r4
 801b3f8:	1854      	adds	r4, r2, r1
 801b3fa:	42a3      	cmp	r3, r4
 801b3fc:	6011      	str	r1, [r2, #0]
 801b3fe:	d1e0      	bne.n	801b3c2 <_free_r+0x26>
 801b400:	681c      	ldr	r4, [r3, #0]
 801b402:	685b      	ldr	r3, [r3, #4]
 801b404:	6053      	str	r3, [r2, #4]
 801b406:	4421      	add	r1, r4
 801b408:	6011      	str	r1, [r2, #0]
 801b40a:	e7da      	b.n	801b3c2 <_free_r+0x26>
 801b40c:	d902      	bls.n	801b414 <_free_r+0x78>
 801b40e:	230c      	movs	r3, #12
 801b410:	6003      	str	r3, [r0, #0]
 801b412:	e7d6      	b.n	801b3c2 <_free_r+0x26>
 801b414:	6825      	ldr	r5, [r4, #0]
 801b416:	1961      	adds	r1, r4, r5
 801b418:	428b      	cmp	r3, r1
 801b41a:	bf04      	itt	eq
 801b41c:	6819      	ldreq	r1, [r3, #0]
 801b41e:	685b      	ldreq	r3, [r3, #4]
 801b420:	6063      	str	r3, [r4, #4]
 801b422:	bf04      	itt	eq
 801b424:	1949      	addeq	r1, r1, r5
 801b426:	6021      	streq	r1, [r4, #0]
 801b428:	6054      	str	r4, [r2, #4]
 801b42a:	e7ca      	b.n	801b3c2 <_free_r+0x26>
 801b42c:	b003      	add	sp, #12
 801b42e:	bd30      	pop	{r4, r5, pc}
 801b430:	200045f8 	.word	0x200045f8

0801b434 <sbrk_aligned>:
 801b434:	b570      	push	{r4, r5, r6, lr}
 801b436:	4e0e      	ldr	r6, [pc, #56]	; (801b470 <sbrk_aligned+0x3c>)
 801b438:	460c      	mov	r4, r1
 801b43a:	6831      	ldr	r1, [r6, #0]
 801b43c:	4605      	mov	r5, r0
 801b43e:	b911      	cbnz	r1, 801b446 <sbrk_aligned+0x12>
 801b440:	f000 f91a 	bl	801b678 <_sbrk_r>
 801b444:	6030      	str	r0, [r6, #0]
 801b446:	4621      	mov	r1, r4
 801b448:	4628      	mov	r0, r5
 801b44a:	f000 f915 	bl	801b678 <_sbrk_r>
 801b44e:	1c43      	adds	r3, r0, #1
 801b450:	d00a      	beq.n	801b468 <sbrk_aligned+0x34>
 801b452:	1cc4      	adds	r4, r0, #3
 801b454:	f024 0403 	bic.w	r4, r4, #3
 801b458:	42a0      	cmp	r0, r4
 801b45a:	d007      	beq.n	801b46c <sbrk_aligned+0x38>
 801b45c:	1a21      	subs	r1, r4, r0
 801b45e:	4628      	mov	r0, r5
 801b460:	f000 f90a 	bl	801b678 <_sbrk_r>
 801b464:	3001      	adds	r0, #1
 801b466:	d101      	bne.n	801b46c <sbrk_aligned+0x38>
 801b468:	f04f 34ff 	mov.w	r4, #4294967295
 801b46c:	4620      	mov	r0, r4
 801b46e:	bd70      	pop	{r4, r5, r6, pc}
 801b470:	200045fc 	.word	0x200045fc

0801b474 <_malloc_r>:
 801b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b478:	1ccd      	adds	r5, r1, #3
 801b47a:	f025 0503 	bic.w	r5, r5, #3
 801b47e:	3508      	adds	r5, #8
 801b480:	2d0c      	cmp	r5, #12
 801b482:	bf38      	it	cc
 801b484:	250c      	movcc	r5, #12
 801b486:	2d00      	cmp	r5, #0
 801b488:	4607      	mov	r7, r0
 801b48a:	db01      	blt.n	801b490 <_malloc_r+0x1c>
 801b48c:	42a9      	cmp	r1, r5
 801b48e:	d905      	bls.n	801b49c <_malloc_r+0x28>
 801b490:	230c      	movs	r3, #12
 801b492:	603b      	str	r3, [r7, #0]
 801b494:	2600      	movs	r6, #0
 801b496:	4630      	mov	r0, r6
 801b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b49c:	4e2e      	ldr	r6, [pc, #184]	; (801b558 <_malloc_r+0xe4>)
 801b49e:	f000 fc17 	bl	801bcd0 <__malloc_lock>
 801b4a2:	6833      	ldr	r3, [r6, #0]
 801b4a4:	461c      	mov	r4, r3
 801b4a6:	bb34      	cbnz	r4, 801b4f6 <_malloc_r+0x82>
 801b4a8:	4629      	mov	r1, r5
 801b4aa:	4638      	mov	r0, r7
 801b4ac:	f7ff ffc2 	bl	801b434 <sbrk_aligned>
 801b4b0:	1c43      	adds	r3, r0, #1
 801b4b2:	4604      	mov	r4, r0
 801b4b4:	d14d      	bne.n	801b552 <_malloc_r+0xde>
 801b4b6:	6834      	ldr	r4, [r6, #0]
 801b4b8:	4626      	mov	r6, r4
 801b4ba:	2e00      	cmp	r6, #0
 801b4bc:	d140      	bne.n	801b540 <_malloc_r+0xcc>
 801b4be:	6823      	ldr	r3, [r4, #0]
 801b4c0:	4631      	mov	r1, r6
 801b4c2:	4638      	mov	r0, r7
 801b4c4:	eb04 0803 	add.w	r8, r4, r3
 801b4c8:	f000 f8d6 	bl	801b678 <_sbrk_r>
 801b4cc:	4580      	cmp	r8, r0
 801b4ce:	d13a      	bne.n	801b546 <_malloc_r+0xd2>
 801b4d0:	6821      	ldr	r1, [r4, #0]
 801b4d2:	3503      	adds	r5, #3
 801b4d4:	1a6d      	subs	r5, r5, r1
 801b4d6:	f025 0503 	bic.w	r5, r5, #3
 801b4da:	3508      	adds	r5, #8
 801b4dc:	2d0c      	cmp	r5, #12
 801b4de:	bf38      	it	cc
 801b4e0:	250c      	movcc	r5, #12
 801b4e2:	4629      	mov	r1, r5
 801b4e4:	4638      	mov	r0, r7
 801b4e6:	f7ff ffa5 	bl	801b434 <sbrk_aligned>
 801b4ea:	3001      	adds	r0, #1
 801b4ec:	d02b      	beq.n	801b546 <_malloc_r+0xd2>
 801b4ee:	6823      	ldr	r3, [r4, #0]
 801b4f0:	442b      	add	r3, r5
 801b4f2:	6023      	str	r3, [r4, #0]
 801b4f4:	e00e      	b.n	801b514 <_malloc_r+0xa0>
 801b4f6:	6822      	ldr	r2, [r4, #0]
 801b4f8:	1b52      	subs	r2, r2, r5
 801b4fa:	d41e      	bmi.n	801b53a <_malloc_r+0xc6>
 801b4fc:	2a0b      	cmp	r2, #11
 801b4fe:	d916      	bls.n	801b52e <_malloc_r+0xba>
 801b500:	1961      	adds	r1, r4, r5
 801b502:	42a3      	cmp	r3, r4
 801b504:	6025      	str	r5, [r4, #0]
 801b506:	bf18      	it	ne
 801b508:	6059      	strne	r1, [r3, #4]
 801b50a:	6863      	ldr	r3, [r4, #4]
 801b50c:	bf08      	it	eq
 801b50e:	6031      	streq	r1, [r6, #0]
 801b510:	5162      	str	r2, [r4, r5]
 801b512:	604b      	str	r3, [r1, #4]
 801b514:	4638      	mov	r0, r7
 801b516:	f104 060b 	add.w	r6, r4, #11
 801b51a:	f000 fbdf 	bl	801bcdc <__malloc_unlock>
 801b51e:	f026 0607 	bic.w	r6, r6, #7
 801b522:	1d23      	adds	r3, r4, #4
 801b524:	1af2      	subs	r2, r6, r3
 801b526:	d0b6      	beq.n	801b496 <_malloc_r+0x22>
 801b528:	1b9b      	subs	r3, r3, r6
 801b52a:	50a3      	str	r3, [r4, r2]
 801b52c:	e7b3      	b.n	801b496 <_malloc_r+0x22>
 801b52e:	6862      	ldr	r2, [r4, #4]
 801b530:	42a3      	cmp	r3, r4
 801b532:	bf0c      	ite	eq
 801b534:	6032      	streq	r2, [r6, #0]
 801b536:	605a      	strne	r2, [r3, #4]
 801b538:	e7ec      	b.n	801b514 <_malloc_r+0xa0>
 801b53a:	4623      	mov	r3, r4
 801b53c:	6864      	ldr	r4, [r4, #4]
 801b53e:	e7b2      	b.n	801b4a6 <_malloc_r+0x32>
 801b540:	4634      	mov	r4, r6
 801b542:	6876      	ldr	r6, [r6, #4]
 801b544:	e7b9      	b.n	801b4ba <_malloc_r+0x46>
 801b546:	230c      	movs	r3, #12
 801b548:	603b      	str	r3, [r7, #0]
 801b54a:	4638      	mov	r0, r7
 801b54c:	f000 fbc6 	bl	801bcdc <__malloc_unlock>
 801b550:	e7a1      	b.n	801b496 <_malloc_r+0x22>
 801b552:	6025      	str	r5, [r4, #0]
 801b554:	e7de      	b.n	801b514 <_malloc_r+0xa0>
 801b556:	bf00      	nop
 801b558:	200045f8 	.word	0x200045f8

0801b55c <iprintf>:
 801b55c:	b40f      	push	{r0, r1, r2, r3}
 801b55e:	4b0a      	ldr	r3, [pc, #40]	; (801b588 <iprintf+0x2c>)
 801b560:	b513      	push	{r0, r1, r4, lr}
 801b562:	681c      	ldr	r4, [r3, #0]
 801b564:	b124      	cbz	r4, 801b570 <iprintf+0x14>
 801b566:	69a3      	ldr	r3, [r4, #24]
 801b568:	b913      	cbnz	r3, 801b570 <iprintf+0x14>
 801b56a:	4620      	mov	r0, r4
 801b56c:	f000 faaa 	bl	801bac4 <__sinit>
 801b570:	ab05      	add	r3, sp, #20
 801b572:	9a04      	ldr	r2, [sp, #16]
 801b574:	68a1      	ldr	r1, [r4, #8]
 801b576:	9301      	str	r3, [sp, #4]
 801b578:	4620      	mov	r0, r4
 801b57a:	f000 fd69 	bl	801c050 <_vfiprintf_r>
 801b57e:	b002      	add	sp, #8
 801b580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b584:	b004      	add	sp, #16
 801b586:	4770      	bx	lr
 801b588:	20000958 	.word	0x20000958

0801b58c <_puts_r>:
 801b58c:	b570      	push	{r4, r5, r6, lr}
 801b58e:	460e      	mov	r6, r1
 801b590:	4605      	mov	r5, r0
 801b592:	b118      	cbz	r0, 801b59c <_puts_r+0x10>
 801b594:	6983      	ldr	r3, [r0, #24]
 801b596:	b90b      	cbnz	r3, 801b59c <_puts_r+0x10>
 801b598:	f000 fa94 	bl	801bac4 <__sinit>
 801b59c:	69ab      	ldr	r3, [r5, #24]
 801b59e:	68ac      	ldr	r4, [r5, #8]
 801b5a0:	b913      	cbnz	r3, 801b5a8 <_puts_r+0x1c>
 801b5a2:	4628      	mov	r0, r5
 801b5a4:	f000 fa8e 	bl	801bac4 <__sinit>
 801b5a8:	4b2c      	ldr	r3, [pc, #176]	; (801b65c <_puts_r+0xd0>)
 801b5aa:	429c      	cmp	r4, r3
 801b5ac:	d120      	bne.n	801b5f0 <_puts_r+0x64>
 801b5ae:	686c      	ldr	r4, [r5, #4]
 801b5b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5b2:	07db      	lsls	r3, r3, #31
 801b5b4:	d405      	bmi.n	801b5c2 <_puts_r+0x36>
 801b5b6:	89a3      	ldrh	r3, [r4, #12]
 801b5b8:	0598      	lsls	r0, r3, #22
 801b5ba:	d402      	bmi.n	801b5c2 <_puts_r+0x36>
 801b5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5be:	f000 fb1f 	bl	801bc00 <__retarget_lock_acquire_recursive>
 801b5c2:	89a3      	ldrh	r3, [r4, #12]
 801b5c4:	0719      	lsls	r1, r3, #28
 801b5c6:	d51d      	bpl.n	801b604 <_puts_r+0x78>
 801b5c8:	6923      	ldr	r3, [r4, #16]
 801b5ca:	b1db      	cbz	r3, 801b604 <_puts_r+0x78>
 801b5cc:	3e01      	subs	r6, #1
 801b5ce:	68a3      	ldr	r3, [r4, #8]
 801b5d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b5d4:	3b01      	subs	r3, #1
 801b5d6:	60a3      	str	r3, [r4, #8]
 801b5d8:	bb39      	cbnz	r1, 801b62a <_puts_r+0x9e>
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	da38      	bge.n	801b650 <_puts_r+0xc4>
 801b5de:	4622      	mov	r2, r4
 801b5e0:	210a      	movs	r1, #10
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	f000 f894 	bl	801b710 <__swbuf_r>
 801b5e8:	3001      	adds	r0, #1
 801b5ea:	d011      	beq.n	801b610 <_puts_r+0x84>
 801b5ec:	250a      	movs	r5, #10
 801b5ee:	e011      	b.n	801b614 <_puts_r+0x88>
 801b5f0:	4b1b      	ldr	r3, [pc, #108]	; (801b660 <_puts_r+0xd4>)
 801b5f2:	429c      	cmp	r4, r3
 801b5f4:	d101      	bne.n	801b5fa <_puts_r+0x6e>
 801b5f6:	68ac      	ldr	r4, [r5, #8]
 801b5f8:	e7da      	b.n	801b5b0 <_puts_r+0x24>
 801b5fa:	4b1a      	ldr	r3, [pc, #104]	; (801b664 <_puts_r+0xd8>)
 801b5fc:	429c      	cmp	r4, r3
 801b5fe:	bf08      	it	eq
 801b600:	68ec      	ldreq	r4, [r5, #12]
 801b602:	e7d5      	b.n	801b5b0 <_puts_r+0x24>
 801b604:	4621      	mov	r1, r4
 801b606:	4628      	mov	r0, r5
 801b608:	f000 f8d4 	bl	801b7b4 <__swsetup_r>
 801b60c:	2800      	cmp	r0, #0
 801b60e:	d0dd      	beq.n	801b5cc <_puts_r+0x40>
 801b610:	f04f 35ff 	mov.w	r5, #4294967295
 801b614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b616:	07da      	lsls	r2, r3, #31
 801b618:	d405      	bmi.n	801b626 <_puts_r+0x9a>
 801b61a:	89a3      	ldrh	r3, [r4, #12]
 801b61c:	059b      	lsls	r3, r3, #22
 801b61e:	d402      	bmi.n	801b626 <_puts_r+0x9a>
 801b620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b622:	f000 faee 	bl	801bc02 <__retarget_lock_release_recursive>
 801b626:	4628      	mov	r0, r5
 801b628:	bd70      	pop	{r4, r5, r6, pc}
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	da04      	bge.n	801b638 <_puts_r+0xac>
 801b62e:	69a2      	ldr	r2, [r4, #24]
 801b630:	429a      	cmp	r2, r3
 801b632:	dc06      	bgt.n	801b642 <_puts_r+0xb6>
 801b634:	290a      	cmp	r1, #10
 801b636:	d004      	beq.n	801b642 <_puts_r+0xb6>
 801b638:	6823      	ldr	r3, [r4, #0]
 801b63a:	1c5a      	adds	r2, r3, #1
 801b63c:	6022      	str	r2, [r4, #0]
 801b63e:	7019      	strb	r1, [r3, #0]
 801b640:	e7c5      	b.n	801b5ce <_puts_r+0x42>
 801b642:	4622      	mov	r2, r4
 801b644:	4628      	mov	r0, r5
 801b646:	f000 f863 	bl	801b710 <__swbuf_r>
 801b64a:	3001      	adds	r0, #1
 801b64c:	d1bf      	bne.n	801b5ce <_puts_r+0x42>
 801b64e:	e7df      	b.n	801b610 <_puts_r+0x84>
 801b650:	6823      	ldr	r3, [r4, #0]
 801b652:	250a      	movs	r5, #10
 801b654:	1c5a      	adds	r2, r3, #1
 801b656:	6022      	str	r2, [r4, #0]
 801b658:	701d      	strb	r5, [r3, #0]
 801b65a:	e7db      	b.n	801b614 <_puts_r+0x88>
 801b65c:	0802b7f4 	.word	0x0802b7f4
 801b660:	0802b814 	.word	0x0802b814
 801b664:	0802b7d4 	.word	0x0802b7d4

0801b668 <puts>:
 801b668:	4b02      	ldr	r3, [pc, #8]	; (801b674 <puts+0xc>)
 801b66a:	4601      	mov	r1, r0
 801b66c:	6818      	ldr	r0, [r3, #0]
 801b66e:	f7ff bf8d 	b.w	801b58c <_puts_r>
 801b672:	bf00      	nop
 801b674:	20000958 	.word	0x20000958

0801b678 <_sbrk_r>:
 801b678:	b538      	push	{r3, r4, r5, lr}
 801b67a:	4d06      	ldr	r5, [pc, #24]	; (801b694 <_sbrk_r+0x1c>)
 801b67c:	2300      	movs	r3, #0
 801b67e:	4604      	mov	r4, r0
 801b680:	4608      	mov	r0, r1
 801b682:	602b      	str	r3, [r5, #0]
 801b684:	f7e6 fe18 	bl	80022b8 <_sbrk>
 801b688:	1c43      	adds	r3, r0, #1
 801b68a:	d102      	bne.n	801b692 <_sbrk_r+0x1a>
 801b68c:	682b      	ldr	r3, [r5, #0]
 801b68e:	b103      	cbz	r3, 801b692 <_sbrk_r+0x1a>
 801b690:	6023      	str	r3, [r4, #0]
 801b692:	bd38      	pop	{r3, r4, r5, pc}
 801b694:	20004604 	.word	0x20004604

0801b698 <sniprintf>:
 801b698:	b40c      	push	{r2, r3}
 801b69a:	b530      	push	{r4, r5, lr}
 801b69c:	4b17      	ldr	r3, [pc, #92]	; (801b6fc <sniprintf+0x64>)
 801b69e:	1e0c      	subs	r4, r1, #0
 801b6a0:	681d      	ldr	r5, [r3, #0]
 801b6a2:	b09d      	sub	sp, #116	; 0x74
 801b6a4:	da08      	bge.n	801b6b8 <sniprintf+0x20>
 801b6a6:	238b      	movs	r3, #139	; 0x8b
 801b6a8:	602b      	str	r3, [r5, #0]
 801b6aa:	f04f 30ff 	mov.w	r0, #4294967295
 801b6ae:	b01d      	add	sp, #116	; 0x74
 801b6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b6b4:	b002      	add	sp, #8
 801b6b6:	4770      	bx	lr
 801b6b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b6bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b6c0:	bf14      	ite	ne
 801b6c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b6c6:	4623      	moveq	r3, r4
 801b6c8:	9304      	str	r3, [sp, #16]
 801b6ca:	9307      	str	r3, [sp, #28]
 801b6cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b6d0:	9002      	str	r0, [sp, #8]
 801b6d2:	9006      	str	r0, [sp, #24]
 801b6d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b6da:	ab21      	add	r3, sp, #132	; 0x84
 801b6dc:	a902      	add	r1, sp, #8
 801b6de:	4628      	mov	r0, r5
 801b6e0:	9301      	str	r3, [sp, #4]
 801b6e2:	f000 fb8b 	bl	801bdfc <_svfiprintf_r>
 801b6e6:	1c43      	adds	r3, r0, #1
 801b6e8:	bfbc      	itt	lt
 801b6ea:	238b      	movlt	r3, #139	; 0x8b
 801b6ec:	602b      	strlt	r3, [r5, #0]
 801b6ee:	2c00      	cmp	r4, #0
 801b6f0:	d0dd      	beq.n	801b6ae <sniprintf+0x16>
 801b6f2:	9b02      	ldr	r3, [sp, #8]
 801b6f4:	2200      	movs	r2, #0
 801b6f6:	701a      	strb	r2, [r3, #0]
 801b6f8:	e7d9      	b.n	801b6ae <sniprintf+0x16>
 801b6fa:	bf00      	nop
 801b6fc:	20000958 	.word	0x20000958

0801b700 <strcpy>:
 801b700:	4603      	mov	r3, r0
 801b702:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b706:	f803 2b01 	strb.w	r2, [r3], #1
 801b70a:	2a00      	cmp	r2, #0
 801b70c:	d1f9      	bne.n	801b702 <strcpy+0x2>
 801b70e:	4770      	bx	lr

0801b710 <__swbuf_r>:
 801b710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b712:	460e      	mov	r6, r1
 801b714:	4614      	mov	r4, r2
 801b716:	4605      	mov	r5, r0
 801b718:	b118      	cbz	r0, 801b722 <__swbuf_r+0x12>
 801b71a:	6983      	ldr	r3, [r0, #24]
 801b71c:	b90b      	cbnz	r3, 801b722 <__swbuf_r+0x12>
 801b71e:	f000 f9d1 	bl	801bac4 <__sinit>
 801b722:	4b21      	ldr	r3, [pc, #132]	; (801b7a8 <__swbuf_r+0x98>)
 801b724:	429c      	cmp	r4, r3
 801b726:	d12b      	bne.n	801b780 <__swbuf_r+0x70>
 801b728:	686c      	ldr	r4, [r5, #4]
 801b72a:	69a3      	ldr	r3, [r4, #24]
 801b72c:	60a3      	str	r3, [r4, #8]
 801b72e:	89a3      	ldrh	r3, [r4, #12]
 801b730:	071a      	lsls	r2, r3, #28
 801b732:	d52f      	bpl.n	801b794 <__swbuf_r+0x84>
 801b734:	6923      	ldr	r3, [r4, #16]
 801b736:	b36b      	cbz	r3, 801b794 <__swbuf_r+0x84>
 801b738:	6923      	ldr	r3, [r4, #16]
 801b73a:	6820      	ldr	r0, [r4, #0]
 801b73c:	1ac0      	subs	r0, r0, r3
 801b73e:	6963      	ldr	r3, [r4, #20]
 801b740:	b2f6      	uxtb	r6, r6
 801b742:	4283      	cmp	r3, r0
 801b744:	4637      	mov	r7, r6
 801b746:	dc04      	bgt.n	801b752 <__swbuf_r+0x42>
 801b748:	4621      	mov	r1, r4
 801b74a:	4628      	mov	r0, r5
 801b74c:	f000 f926 	bl	801b99c <_fflush_r>
 801b750:	bb30      	cbnz	r0, 801b7a0 <__swbuf_r+0x90>
 801b752:	68a3      	ldr	r3, [r4, #8]
 801b754:	3b01      	subs	r3, #1
 801b756:	60a3      	str	r3, [r4, #8]
 801b758:	6823      	ldr	r3, [r4, #0]
 801b75a:	1c5a      	adds	r2, r3, #1
 801b75c:	6022      	str	r2, [r4, #0]
 801b75e:	701e      	strb	r6, [r3, #0]
 801b760:	6963      	ldr	r3, [r4, #20]
 801b762:	3001      	adds	r0, #1
 801b764:	4283      	cmp	r3, r0
 801b766:	d004      	beq.n	801b772 <__swbuf_r+0x62>
 801b768:	89a3      	ldrh	r3, [r4, #12]
 801b76a:	07db      	lsls	r3, r3, #31
 801b76c:	d506      	bpl.n	801b77c <__swbuf_r+0x6c>
 801b76e:	2e0a      	cmp	r6, #10
 801b770:	d104      	bne.n	801b77c <__swbuf_r+0x6c>
 801b772:	4621      	mov	r1, r4
 801b774:	4628      	mov	r0, r5
 801b776:	f000 f911 	bl	801b99c <_fflush_r>
 801b77a:	b988      	cbnz	r0, 801b7a0 <__swbuf_r+0x90>
 801b77c:	4638      	mov	r0, r7
 801b77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b780:	4b0a      	ldr	r3, [pc, #40]	; (801b7ac <__swbuf_r+0x9c>)
 801b782:	429c      	cmp	r4, r3
 801b784:	d101      	bne.n	801b78a <__swbuf_r+0x7a>
 801b786:	68ac      	ldr	r4, [r5, #8]
 801b788:	e7cf      	b.n	801b72a <__swbuf_r+0x1a>
 801b78a:	4b09      	ldr	r3, [pc, #36]	; (801b7b0 <__swbuf_r+0xa0>)
 801b78c:	429c      	cmp	r4, r3
 801b78e:	bf08      	it	eq
 801b790:	68ec      	ldreq	r4, [r5, #12]
 801b792:	e7ca      	b.n	801b72a <__swbuf_r+0x1a>
 801b794:	4621      	mov	r1, r4
 801b796:	4628      	mov	r0, r5
 801b798:	f000 f80c 	bl	801b7b4 <__swsetup_r>
 801b79c:	2800      	cmp	r0, #0
 801b79e:	d0cb      	beq.n	801b738 <__swbuf_r+0x28>
 801b7a0:	f04f 37ff 	mov.w	r7, #4294967295
 801b7a4:	e7ea      	b.n	801b77c <__swbuf_r+0x6c>
 801b7a6:	bf00      	nop
 801b7a8:	0802b7f4 	.word	0x0802b7f4
 801b7ac:	0802b814 	.word	0x0802b814
 801b7b0:	0802b7d4 	.word	0x0802b7d4

0801b7b4 <__swsetup_r>:
 801b7b4:	4b32      	ldr	r3, [pc, #200]	; (801b880 <__swsetup_r+0xcc>)
 801b7b6:	b570      	push	{r4, r5, r6, lr}
 801b7b8:	681d      	ldr	r5, [r3, #0]
 801b7ba:	4606      	mov	r6, r0
 801b7bc:	460c      	mov	r4, r1
 801b7be:	b125      	cbz	r5, 801b7ca <__swsetup_r+0x16>
 801b7c0:	69ab      	ldr	r3, [r5, #24]
 801b7c2:	b913      	cbnz	r3, 801b7ca <__swsetup_r+0x16>
 801b7c4:	4628      	mov	r0, r5
 801b7c6:	f000 f97d 	bl	801bac4 <__sinit>
 801b7ca:	4b2e      	ldr	r3, [pc, #184]	; (801b884 <__swsetup_r+0xd0>)
 801b7cc:	429c      	cmp	r4, r3
 801b7ce:	d10f      	bne.n	801b7f0 <__swsetup_r+0x3c>
 801b7d0:	686c      	ldr	r4, [r5, #4]
 801b7d2:	89a3      	ldrh	r3, [r4, #12]
 801b7d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b7d8:	0719      	lsls	r1, r3, #28
 801b7da:	d42c      	bmi.n	801b836 <__swsetup_r+0x82>
 801b7dc:	06dd      	lsls	r5, r3, #27
 801b7de:	d411      	bmi.n	801b804 <__swsetup_r+0x50>
 801b7e0:	2309      	movs	r3, #9
 801b7e2:	6033      	str	r3, [r6, #0]
 801b7e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b7e8:	81a3      	strh	r3, [r4, #12]
 801b7ea:	f04f 30ff 	mov.w	r0, #4294967295
 801b7ee:	e03e      	b.n	801b86e <__swsetup_r+0xba>
 801b7f0:	4b25      	ldr	r3, [pc, #148]	; (801b888 <__swsetup_r+0xd4>)
 801b7f2:	429c      	cmp	r4, r3
 801b7f4:	d101      	bne.n	801b7fa <__swsetup_r+0x46>
 801b7f6:	68ac      	ldr	r4, [r5, #8]
 801b7f8:	e7eb      	b.n	801b7d2 <__swsetup_r+0x1e>
 801b7fa:	4b24      	ldr	r3, [pc, #144]	; (801b88c <__swsetup_r+0xd8>)
 801b7fc:	429c      	cmp	r4, r3
 801b7fe:	bf08      	it	eq
 801b800:	68ec      	ldreq	r4, [r5, #12]
 801b802:	e7e6      	b.n	801b7d2 <__swsetup_r+0x1e>
 801b804:	0758      	lsls	r0, r3, #29
 801b806:	d512      	bpl.n	801b82e <__swsetup_r+0x7a>
 801b808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b80a:	b141      	cbz	r1, 801b81e <__swsetup_r+0x6a>
 801b80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b810:	4299      	cmp	r1, r3
 801b812:	d002      	beq.n	801b81a <__swsetup_r+0x66>
 801b814:	4630      	mov	r0, r6
 801b816:	f7ff fdc1 	bl	801b39c <_free_r>
 801b81a:	2300      	movs	r3, #0
 801b81c:	6363      	str	r3, [r4, #52]	; 0x34
 801b81e:	89a3      	ldrh	r3, [r4, #12]
 801b820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b824:	81a3      	strh	r3, [r4, #12]
 801b826:	2300      	movs	r3, #0
 801b828:	6063      	str	r3, [r4, #4]
 801b82a:	6923      	ldr	r3, [r4, #16]
 801b82c:	6023      	str	r3, [r4, #0]
 801b82e:	89a3      	ldrh	r3, [r4, #12]
 801b830:	f043 0308 	orr.w	r3, r3, #8
 801b834:	81a3      	strh	r3, [r4, #12]
 801b836:	6923      	ldr	r3, [r4, #16]
 801b838:	b94b      	cbnz	r3, 801b84e <__swsetup_r+0x9a>
 801b83a:	89a3      	ldrh	r3, [r4, #12]
 801b83c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b844:	d003      	beq.n	801b84e <__swsetup_r+0x9a>
 801b846:	4621      	mov	r1, r4
 801b848:	4630      	mov	r0, r6
 801b84a:	f000 fa01 	bl	801bc50 <__smakebuf_r>
 801b84e:	89a0      	ldrh	r0, [r4, #12]
 801b850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b854:	f010 0301 	ands.w	r3, r0, #1
 801b858:	d00a      	beq.n	801b870 <__swsetup_r+0xbc>
 801b85a:	2300      	movs	r3, #0
 801b85c:	60a3      	str	r3, [r4, #8]
 801b85e:	6963      	ldr	r3, [r4, #20]
 801b860:	425b      	negs	r3, r3
 801b862:	61a3      	str	r3, [r4, #24]
 801b864:	6923      	ldr	r3, [r4, #16]
 801b866:	b943      	cbnz	r3, 801b87a <__swsetup_r+0xc6>
 801b868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b86c:	d1ba      	bne.n	801b7e4 <__swsetup_r+0x30>
 801b86e:	bd70      	pop	{r4, r5, r6, pc}
 801b870:	0781      	lsls	r1, r0, #30
 801b872:	bf58      	it	pl
 801b874:	6963      	ldrpl	r3, [r4, #20]
 801b876:	60a3      	str	r3, [r4, #8]
 801b878:	e7f4      	b.n	801b864 <__swsetup_r+0xb0>
 801b87a:	2000      	movs	r0, #0
 801b87c:	e7f7      	b.n	801b86e <__swsetup_r+0xba>
 801b87e:	bf00      	nop
 801b880:	20000958 	.word	0x20000958
 801b884:	0802b7f4 	.word	0x0802b7f4
 801b888:	0802b814 	.word	0x0802b814
 801b88c:	0802b7d4 	.word	0x0802b7d4

0801b890 <__sflush_r>:
 801b890:	898a      	ldrh	r2, [r1, #12]
 801b892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b896:	4605      	mov	r5, r0
 801b898:	0710      	lsls	r0, r2, #28
 801b89a:	460c      	mov	r4, r1
 801b89c:	d458      	bmi.n	801b950 <__sflush_r+0xc0>
 801b89e:	684b      	ldr	r3, [r1, #4]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	dc05      	bgt.n	801b8b0 <__sflush_r+0x20>
 801b8a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	dc02      	bgt.n	801b8b0 <__sflush_r+0x20>
 801b8aa:	2000      	movs	r0, #0
 801b8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b8b2:	2e00      	cmp	r6, #0
 801b8b4:	d0f9      	beq.n	801b8aa <__sflush_r+0x1a>
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b8bc:	682f      	ldr	r7, [r5, #0]
 801b8be:	602b      	str	r3, [r5, #0]
 801b8c0:	d032      	beq.n	801b928 <__sflush_r+0x98>
 801b8c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b8c4:	89a3      	ldrh	r3, [r4, #12]
 801b8c6:	075a      	lsls	r2, r3, #29
 801b8c8:	d505      	bpl.n	801b8d6 <__sflush_r+0x46>
 801b8ca:	6863      	ldr	r3, [r4, #4]
 801b8cc:	1ac0      	subs	r0, r0, r3
 801b8ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b8d0:	b10b      	cbz	r3, 801b8d6 <__sflush_r+0x46>
 801b8d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b8d4:	1ac0      	subs	r0, r0, r3
 801b8d6:	2300      	movs	r3, #0
 801b8d8:	4602      	mov	r2, r0
 801b8da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b8dc:	6a21      	ldr	r1, [r4, #32]
 801b8de:	4628      	mov	r0, r5
 801b8e0:	47b0      	blx	r6
 801b8e2:	1c43      	adds	r3, r0, #1
 801b8e4:	89a3      	ldrh	r3, [r4, #12]
 801b8e6:	d106      	bne.n	801b8f6 <__sflush_r+0x66>
 801b8e8:	6829      	ldr	r1, [r5, #0]
 801b8ea:	291d      	cmp	r1, #29
 801b8ec:	d82c      	bhi.n	801b948 <__sflush_r+0xb8>
 801b8ee:	4a2a      	ldr	r2, [pc, #168]	; (801b998 <__sflush_r+0x108>)
 801b8f0:	40ca      	lsrs	r2, r1
 801b8f2:	07d6      	lsls	r6, r2, #31
 801b8f4:	d528      	bpl.n	801b948 <__sflush_r+0xb8>
 801b8f6:	2200      	movs	r2, #0
 801b8f8:	6062      	str	r2, [r4, #4]
 801b8fa:	04d9      	lsls	r1, r3, #19
 801b8fc:	6922      	ldr	r2, [r4, #16]
 801b8fe:	6022      	str	r2, [r4, #0]
 801b900:	d504      	bpl.n	801b90c <__sflush_r+0x7c>
 801b902:	1c42      	adds	r2, r0, #1
 801b904:	d101      	bne.n	801b90a <__sflush_r+0x7a>
 801b906:	682b      	ldr	r3, [r5, #0]
 801b908:	b903      	cbnz	r3, 801b90c <__sflush_r+0x7c>
 801b90a:	6560      	str	r0, [r4, #84]	; 0x54
 801b90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b90e:	602f      	str	r7, [r5, #0]
 801b910:	2900      	cmp	r1, #0
 801b912:	d0ca      	beq.n	801b8aa <__sflush_r+0x1a>
 801b914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b918:	4299      	cmp	r1, r3
 801b91a:	d002      	beq.n	801b922 <__sflush_r+0x92>
 801b91c:	4628      	mov	r0, r5
 801b91e:	f7ff fd3d 	bl	801b39c <_free_r>
 801b922:	2000      	movs	r0, #0
 801b924:	6360      	str	r0, [r4, #52]	; 0x34
 801b926:	e7c1      	b.n	801b8ac <__sflush_r+0x1c>
 801b928:	6a21      	ldr	r1, [r4, #32]
 801b92a:	2301      	movs	r3, #1
 801b92c:	4628      	mov	r0, r5
 801b92e:	47b0      	blx	r6
 801b930:	1c41      	adds	r1, r0, #1
 801b932:	d1c7      	bne.n	801b8c4 <__sflush_r+0x34>
 801b934:	682b      	ldr	r3, [r5, #0]
 801b936:	2b00      	cmp	r3, #0
 801b938:	d0c4      	beq.n	801b8c4 <__sflush_r+0x34>
 801b93a:	2b1d      	cmp	r3, #29
 801b93c:	d001      	beq.n	801b942 <__sflush_r+0xb2>
 801b93e:	2b16      	cmp	r3, #22
 801b940:	d101      	bne.n	801b946 <__sflush_r+0xb6>
 801b942:	602f      	str	r7, [r5, #0]
 801b944:	e7b1      	b.n	801b8aa <__sflush_r+0x1a>
 801b946:	89a3      	ldrh	r3, [r4, #12]
 801b948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b94c:	81a3      	strh	r3, [r4, #12]
 801b94e:	e7ad      	b.n	801b8ac <__sflush_r+0x1c>
 801b950:	690f      	ldr	r7, [r1, #16]
 801b952:	2f00      	cmp	r7, #0
 801b954:	d0a9      	beq.n	801b8aa <__sflush_r+0x1a>
 801b956:	0793      	lsls	r3, r2, #30
 801b958:	680e      	ldr	r6, [r1, #0]
 801b95a:	bf08      	it	eq
 801b95c:	694b      	ldreq	r3, [r1, #20]
 801b95e:	600f      	str	r7, [r1, #0]
 801b960:	bf18      	it	ne
 801b962:	2300      	movne	r3, #0
 801b964:	eba6 0807 	sub.w	r8, r6, r7
 801b968:	608b      	str	r3, [r1, #8]
 801b96a:	f1b8 0f00 	cmp.w	r8, #0
 801b96e:	dd9c      	ble.n	801b8aa <__sflush_r+0x1a>
 801b970:	6a21      	ldr	r1, [r4, #32]
 801b972:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b974:	4643      	mov	r3, r8
 801b976:	463a      	mov	r2, r7
 801b978:	4628      	mov	r0, r5
 801b97a:	47b0      	blx	r6
 801b97c:	2800      	cmp	r0, #0
 801b97e:	dc06      	bgt.n	801b98e <__sflush_r+0xfe>
 801b980:	89a3      	ldrh	r3, [r4, #12]
 801b982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b986:	81a3      	strh	r3, [r4, #12]
 801b988:	f04f 30ff 	mov.w	r0, #4294967295
 801b98c:	e78e      	b.n	801b8ac <__sflush_r+0x1c>
 801b98e:	4407      	add	r7, r0
 801b990:	eba8 0800 	sub.w	r8, r8, r0
 801b994:	e7e9      	b.n	801b96a <__sflush_r+0xda>
 801b996:	bf00      	nop
 801b998:	20400001 	.word	0x20400001

0801b99c <_fflush_r>:
 801b99c:	b538      	push	{r3, r4, r5, lr}
 801b99e:	690b      	ldr	r3, [r1, #16]
 801b9a0:	4605      	mov	r5, r0
 801b9a2:	460c      	mov	r4, r1
 801b9a4:	b913      	cbnz	r3, 801b9ac <_fflush_r+0x10>
 801b9a6:	2500      	movs	r5, #0
 801b9a8:	4628      	mov	r0, r5
 801b9aa:	bd38      	pop	{r3, r4, r5, pc}
 801b9ac:	b118      	cbz	r0, 801b9b6 <_fflush_r+0x1a>
 801b9ae:	6983      	ldr	r3, [r0, #24]
 801b9b0:	b90b      	cbnz	r3, 801b9b6 <_fflush_r+0x1a>
 801b9b2:	f000 f887 	bl	801bac4 <__sinit>
 801b9b6:	4b14      	ldr	r3, [pc, #80]	; (801ba08 <_fflush_r+0x6c>)
 801b9b8:	429c      	cmp	r4, r3
 801b9ba:	d11b      	bne.n	801b9f4 <_fflush_r+0x58>
 801b9bc:	686c      	ldr	r4, [r5, #4]
 801b9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d0ef      	beq.n	801b9a6 <_fflush_r+0xa>
 801b9c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b9c8:	07d0      	lsls	r0, r2, #31
 801b9ca:	d404      	bmi.n	801b9d6 <_fflush_r+0x3a>
 801b9cc:	0599      	lsls	r1, r3, #22
 801b9ce:	d402      	bmi.n	801b9d6 <_fflush_r+0x3a>
 801b9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9d2:	f000 f915 	bl	801bc00 <__retarget_lock_acquire_recursive>
 801b9d6:	4628      	mov	r0, r5
 801b9d8:	4621      	mov	r1, r4
 801b9da:	f7ff ff59 	bl	801b890 <__sflush_r>
 801b9de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b9e0:	07da      	lsls	r2, r3, #31
 801b9e2:	4605      	mov	r5, r0
 801b9e4:	d4e0      	bmi.n	801b9a8 <_fflush_r+0xc>
 801b9e6:	89a3      	ldrh	r3, [r4, #12]
 801b9e8:	059b      	lsls	r3, r3, #22
 801b9ea:	d4dd      	bmi.n	801b9a8 <_fflush_r+0xc>
 801b9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9ee:	f000 f908 	bl	801bc02 <__retarget_lock_release_recursive>
 801b9f2:	e7d9      	b.n	801b9a8 <_fflush_r+0xc>
 801b9f4:	4b05      	ldr	r3, [pc, #20]	; (801ba0c <_fflush_r+0x70>)
 801b9f6:	429c      	cmp	r4, r3
 801b9f8:	d101      	bne.n	801b9fe <_fflush_r+0x62>
 801b9fa:	68ac      	ldr	r4, [r5, #8]
 801b9fc:	e7df      	b.n	801b9be <_fflush_r+0x22>
 801b9fe:	4b04      	ldr	r3, [pc, #16]	; (801ba10 <_fflush_r+0x74>)
 801ba00:	429c      	cmp	r4, r3
 801ba02:	bf08      	it	eq
 801ba04:	68ec      	ldreq	r4, [r5, #12]
 801ba06:	e7da      	b.n	801b9be <_fflush_r+0x22>
 801ba08:	0802b7f4 	.word	0x0802b7f4
 801ba0c:	0802b814 	.word	0x0802b814
 801ba10:	0802b7d4 	.word	0x0802b7d4

0801ba14 <std>:
 801ba14:	2300      	movs	r3, #0
 801ba16:	b510      	push	{r4, lr}
 801ba18:	4604      	mov	r4, r0
 801ba1a:	e9c0 3300 	strd	r3, r3, [r0]
 801ba1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ba22:	6083      	str	r3, [r0, #8]
 801ba24:	8181      	strh	r1, [r0, #12]
 801ba26:	6643      	str	r3, [r0, #100]	; 0x64
 801ba28:	81c2      	strh	r2, [r0, #14]
 801ba2a:	6183      	str	r3, [r0, #24]
 801ba2c:	4619      	mov	r1, r3
 801ba2e:	2208      	movs	r2, #8
 801ba30:	305c      	adds	r0, #92	; 0x5c
 801ba32:	f7ff fcab 	bl	801b38c <memset>
 801ba36:	4b05      	ldr	r3, [pc, #20]	; (801ba4c <std+0x38>)
 801ba38:	6263      	str	r3, [r4, #36]	; 0x24
 801ba3a:	4b05      	ldr	r3, [pc, #20]	; (801ba50 <std+0x3c>)
 801ba3c:	62a3      	str	r3, [r4, #40]	; 0x28
 801ba3e:	4b05      	ldr	r3, [pc, #20]	; (801ba54 <std+0x40>)
 801ba40:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ba42:	4b05      	ldr	r3, [pc, #20]	; (801ba58 <std+0x44>)
 801ba44:	6224      	str	r4, [r4, #32]
 801ba46:	6323      	str	r3, [r4, #48]	; 0x30
 801ba48:	bd10      	pop	{r4, pc}
 801ba4a:	bf00      	nop
 801ba4c:	0801c5d9 	.word	0x0801c5d9
 801ba50:	0801c5fb 	.word	0x0801c5fb
 801ba54:	0801c633 	.word	0x0801c633
 801ba58:	0801c657 	.word	0x0801c657

0801ba5c <_cleanup_r>:
 801ba5c:	4901      	ldr	r1, [pc, #4]	; (801ba64 <_cleanup_r+0x8>)
 801ba5e:	f000 b8af 	b.w	801bbc0 <_fwalk_reent>
 801ba62:	bf00      	nop
 801ba64:	0801b99d 	.word	0x0801b99d

0801ba68 <__sfmoreglue>:
 801ba68:	b570      	push	{r4, r5, r6, lr}
 801ba6a:	2268      	movs	r2, #104	; 0x68
 801ba6c:	1e4d      	subs	r5, r1, #1
 801ba6e:	4355      	muls	r5, r2
 801ba70:	460e      	mov	r6, r1
 801ba72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ba76:	f7ff fcfd 	bl	801b474 <_malloc_r>
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	b140      	cbz	r0, 801ba90 <__sfmoreglue+0x28>
 801ba7e:	2100      	movs	r1, #0
 801ba80:	e9c0 1600 	strd	r1, r6, [r0]
 801ba84:	300c      	adds	r0, #12
 801ba86:	60a0      	str	r0, [r4, #8]
 801ba88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ba8c:	f7ff fc7e 	bl	801b38c <memset>
 801ba90:	4620      	mov	r0, r4
 801ba92:	bd70      	pop	{r4, r5, r6, pc}

0801ba94 <__sfp_lock_acquire>:
 801ba94:	4801      	ldr	r0, [pc, #4]	; (801ba9c <__sfp_lock_acquire+0x8>)
 801ba96:	f000 b8b3 	b.w	801bc00 <__retarget_lock_acquire_recursive>
 801ba9a:	bf00      	nop
 801ba9c:	20004601 	.word	0x20004601

0801baa0 <__sfp_lock_release>:
 801baa0:	4801      	ldr	r0, [pc, #4]	; (801baa8 <__sfp_lock_release+0x8>)
 801baa2:	f000 b8ae 	b.w	801bc02 <__retarget_lock_release_recursive>
 801baa6:	bf00      	nop
 801baa8:	20004601 	.word	0x20004601

0801baac <__sinit_lock_acquire>:
 801baac:	4801      	ldr	r0, [pc, #4]	; (801bab4 <__sinit_lock_acquire+0x8>)
 801baae:	f000 b8a7 	b.w	801bc00 <__retarget_lock_acquire_recursive>
 801bab2:	bf00      	nop
 801bab4:	20004602 	.word	0x20004602

0801bab8 <__sinit_lock_release>:
 801bab8:	4801      	ldr	r0, [pc, #4]	; (801bac0 <__sinit_lock_release+0x8>)
 801baba:	f000 b8a2 	b.w	801bc02 <__retarget_lock_release_recursive>
 801babe:	bf00      	nop
 801bac0:	20004602 	.word	0x20004602

0801bac4 <__sinit>:
 801bac4:	b510      	push	{r4, lr}
 801bac6:	4604      	mov	r4, r0
 801bac8:	f7ff fff0 	bl	801baac <__sinit_lock_acquire>
 801bacc:	69a3      	ldr	r3, [r4, #24]
 801bace:	b11b      	cbz	r3, 801bad8 <__sinit+0x14>
 801bad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bad4:	f7ff bff0 	b.w	801bab8 <__sinit_lock_release>
 801bad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801badc:	6523      	str	r3, [r4, #80]	; 0x50
 801bade:	4b13      	ldr	r3, [pc, #76]	; (801bb2c <__sinit+0x68>)
 801bae0:	4a13      	ldr	r2, [pc, #76]	; (801bb30 <__sinit+0x6c>)
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	62a2      	str	r2, [r4, #40]	; 0x28
 801bae6:	42a3      	cmp	r3, r4
 801bae8:	bf04      	itt	eq
 801baea:	2301      	moveq	r3, #1
 801baec:	61a3      	streq	r3, [r4, #24]
 801baee:	4620      	mov	r0, r4
 801baf0:	f000 f820 	bl	801bb34 <__sfp>
 801baf4:	6060      	str	r0, [r4, #4]
 801baf6:	4620      	mov	r0, r4
 801baf8:	f000 f81c 	bl	801bb34 <__sfp>
 801bafc:	60a0      	str	r0, [r4, #8]
 801bafe:	4620      	mov	r0, r4
 801bb00:	f000 f818 	bl	801bb34 <__sfp>
 801bb04:	2200      	movs	r2, #0
 801bb06:	60e0      	str	r0, [r4, #12]
 801bb08:	2104      	movs	r1, #4
 801bb0a:	6860      	ldr	r0, [r4, #4]
 801bb0c:	f7ff ff82 	bl	801ba14 <std>
 801bb10:	68a0      	ldr	r0, [r4, #8]
 801bb12:	2201      	movs	r2, #1
 801bb14:	2109      	movs	r1, #9
 801bb16:	f7ff ff7d 	bl	801ba14 <std>
 801bb1a:	68e0      	ldr	r0, [r4, #12]
 801bb1c:	2202      	movs	r2, #2
 801bb1e:	2112      	movs	r1, #18
 801bb20:	f7ff ff78 	bl	801ba14 <std>
 801bb24:	2301      	movs	r3, #1
 801bb26:	61a3      	str	r3, [r4, #24]
 801bb28:	e7d2      	b.n	801bad0 <__sinit+0xc>
 801bb2a:	bf00      	nop
 801bb2c:	0802b7d0 	.word	0x0802b7d0
 801bb30:	0801ba5d 	.word	0x0801ba5d

0801bb34 <__sfp>:
 801bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb36:	4607      	mov	r7, r0
 801bb38:	f7ff ffac 	bl	801ba94 <__sfp_lock_acquire>
 801bb3c:	4b1e      	ldr	r3, [pc, #120]	; (801bbb8 <__sfp+0x84>)
 801bb3e:	681e      	ldr	r6, [r3, #0]
 801bb40:	69b3      	ldr	r3, [r6, #24]
 801bb42:	b913      	cbnz	r3, 801bb4a <__sfp+0x16>
 801bb44:	4630      	mov	r0, r6
 801bb46:	f7ff ffbd 	bl	801bac4 <__sinit>
 801bb4a:	3648      	adds	r6, #72	; 0x48
 801bb4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bb50:	3b01      	subs	r3, #1
 801bb52:	d503      	bpl.n	801bb5c <__sfp+0x28>
 801bb54:	6833      	ldr	r3, [r6, #0]
 801bb56:	b30b      	cbz	r3, 801bb9c <__sfp+0x68>
 801bb58:	6836      	ldr	r6, [r6, #0]
 801bb5a:	e7f7      	b.n	801bb4c <__sfp+0x18>
 801bb5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bb60:	b9d5      	cbnz	r5, 801bb98 <__sfp+0x64>
 801bb62:	4b16      	ldr	r3, [pc, #88]	; (801bbbc <__sfp+0x88>)
 801bb64:	60e3      	str	r3, [r4, #12]
 801bb66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bb6a:	6665      	str	r5, [r4, #100]	; 0x64
 801bb6c:	f000 f847 	bl	801bbfe <__retarget_lock_init_recursive>
 801bb70:	f7ff ff96 	bl	801baa0 <__sfp_lock_release>
 801bb74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bb78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bb7c:	6025      	str	r5, [r4, #0]
 801bb7e:	61a5      	str	r5, [r4, #24]
 801bb80:	2208      	movs	r2, #8
 801bb82:	4629      	mov	r1, r5
 801bb84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bb88:	f7ff fc00 	bl	801b38c <memset>
 801bb8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bb90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bb94:	4620      	mov	r0, r4
 801bb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb98:	3468      	adds	r4, #104	; 0x68
 801bb9a:	e7d9      	b.n	801bb50 <__sfp+0x1c>
 801bb9c:	2104      	movs	r1, #4
 801bb9e:	4638      	mov	r0, r7
 801bba0:	f7ff ff62 	bl	801ba68 <__sfmoreglue>
 801bba4:	4604      	mov	r4, r0
 801bba6:	6030      	str	r0, [r6, #0]
 801bba8:	2800      	cmp	r0, #0
 801bbaa:	d1d5      	bne.n	801bb58 <__sfp+0x24>
 801bbac:	f7ff ff78 	bl	801baa0 <__sfp_lock_release>
 801bbb0:	230c      	movs	r3, #12
 801bbb2:	603b      	str	r3, [r7, #0]
 801bbb4:	e7ee      	b.n	801bb94 <__sfp+0x60>
 801bbb6:	bf00      	nop
 801bbb8:	0802b7d0 	.word	0x0802b7d0
 801bbbc:	ffff0001 	.word	0xffff0001

0801bbc0 <_fwalk_reent>:
 801bbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bbc4:	4606      	mov	r6, r0
 801bbc6:	4688      	mov	r8, r1
 801bbc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bbcc:	2700      	movs	r7, #0
 801bbce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bbd2:	f1b9 0901 	subs.w	r9, r9, #1
 801bbd6:	d505      	bpl.n	801bbe4 <_fwalk_reent+0x24>
 801bbd8:	6824      	ldr	r4, [r4, #0]
 801bbda:	2c00      	cmp	r4, #0
 801bbdc:	d1f7      	bne.n	801bbce <_fwalk_reent+0xe>
 801bbde:	4638      	mov	r0, r7
 801bbe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bbe4:	89ab      	ldrh	r3, [r5, #12]
 801bbe6:	2b01      	cmp	r3, #1
 801bbe8:	d907      	bls.n	801bbfa <_fwalk_reent+0x3a>
 801bbea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bbee:	3301      	adds	r3, #1
 801bbf0:	d003      	beq.n	801bbfa <_fwalk_reent+0x3a>
 801bbf2:	4629      	mov	r1, r5
 801bbf4:	4630      	mov	r0, r6
 801bbf6:	47c0      	blx	r8
 801bbf8:	4307      	orrs	r7, r0
 801bbfa:	3568      	adds	r5, #104	; 0x68
 801bbfc:	e7e9      	b.n	801bbd2 <_fwalk_reent+0x12>

0801bbfe <__retarget_lock_init_recursive>:
 801bbfe:	4770      	bx	lr

0801bc00 <__retarget_lock_acquire_recursive>:
 801bc00:	4770      	bx	lr

0801bc02 <__retarget_lock_release_recursive>:
 801bc02:	4770      	bx	lr

0801bc04 <__swhatbuf_r>:
 801bc04:	b570      	push	{r4, r5, r6, lr}
 801bc06:	460e      	mov	r6, r1
 801bc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc0c:	2900      	cmp	r1, #0
 801bc0e:	b096      	sub	sp, #88	; 0x58
 801bc10:	4614      	mov	r4, r2
 801bc12:	461d      	mov	r5, r3
 801bc14:	da08      	bge.n	801bc28 <__swhatbuf_r+0x24>
 801bc16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bc1a:	2200      	movs	r2, #0
 801bc1c:	602a      	str	r2, [r5, #0]
 801bc1e:	061a      	lsls	r2, r3, #24
 801bc20:	d410      	bmi.n	801bc44 <__swhatbuf_r+0x40>
 801bc22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc26:	e00e      	b.n	801bc46 <__swhatbuf_r+0x42>
 801bc28:	466a      	mov	r2, sp
 801bc2a:	f000 fd3b 	bl	801c6a4 <_fstat_r>
 801bc2e:	2800      	cmp	r0, #0
 801bc30:	dbf1      	blt.n	801bc16 <__swhatbuf_r+0x12>
 801bc32:	9a01      	ldr	r2, [sp, #4]
 801bc34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bc38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bc3c:	425a      	negs	r2, r3
 801bc3e:	415a      	adcs	r2, r3
 801bc40:	602a      	str	r2, [r5, #0]
 801bc42:	e7ee      	b.n	801bc22 <__swhatbuf_r+0x1e>
 801bc44:	2340      	movs	r3, #64	; 0x40
 801bc46:	2000      	movs	r0, #0
 801bc48:	6023      	str	r3, [r4, #0]
 801bc4a:	b016      	add	sp, #88	; 0x58
 801bc4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bc50 <__smakebuf_r>:
 801bc50:	898b      	ldrh	r3, [r1, #12]
 801bc52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc54:	079d      	lsls	r5, r3, #30
 801bc56:	4606      	mov	r6, r0
 801bc58:	460c      	mov	r4, r1
 801bc5a:	d507      	bpl.n	801bc6c <__smakebuf_r+0x1c>
 801bc5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bc60:	6023      	str	r3, [r4, #0]
 801bc62:	6123      	str	r3, [r4, #16]
 801bc64:	2301      	movs	r3, #1
 801bc66:	6163      	str	r3, [r4, #20]
 801bc68:	b002      	add	sp, #8
 801bc6a:	bd70      	pop	{r4, r5, r6, pc}
 801bc6c:	ab01      	add	r3, sp, #4
 801bc6e:	466a      	mov	r2, sp
 801bc70:	f7ff ffc8 	bl	801bc04 <__swhatbuf_r>
 801bc74:	9900      	ldr	r1, [sp, #0]
 801bc76:	4605      	mov	r5, r0
 801bc78:	4630      	mov	r0, r6
 801bc7a:	f7ff fbfb 	bl	801b474 <_malloc_r>
 801bc7e:	b948      	cbnz	r0, 801bc94 <__smakebuf_r+0x44>
 801bc80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc84:	059a      	lsls	r2, r3, #22
 801bc86:	d4ef      	bmi.n	801bc68 <__smakebuf_r+0x18>
 801bc88:	f023 0303 	bic.w	r3, r3, #3
 801bc8c:	f043 0302 	orr.w	r3, r3, #2
 801bc90:	81a3      	strh	r3, [r4, #12]
 801bc92:	e7e3      	b.n	801bc5c <__smakebuf_r+0xc>
 801bc94:	4b0d      	ldr	r3, [pc, #52]	; (801bccc <__smakebuf_r+0x7c>)
 801bc96:	62b3      	str	r3, [r6, #40]	; 0x28
 801bc98:	89a3      	ldrh	r3, [r4, #12]
 801bc9a:	6020      	str	r0, [r4, #0]
 801bc9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bca0:	81a3      	strh	r3, [r4, #12]
 801bca2:	9b00      	ldr	r3, [sp, #0]
 801bca4:	6163      	str	r3, [r4, #20]
 801bca6:	9b01      	ldr	r3, [sp, #4]
 801bca8:	6120      	str	r0, [r4, #16]
 801bcaa:	b15b      	cbz	r3, 801bcc4 <__smakebuf_r+0x74>
 801bcac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bcb0:	4630      	mov	r0, r6
 801bcb2:	f000 fd09 	bl	801c6c8 <_isatty_r>
 801bcb6:	b128      	cbz	r0, 801bcc4 <__smakebuf_r+0x74>
 801bcb8:	89a3      	ldrh	r3, [r4, #12]
 801bcba:	f023 0303 	bic.w	r3, r3, #3
 801bcbe:	f043 0301 	orr.w	r3, r3, #1
 801bcc2:	81a3      	strh	r3, [r4, #12]
 801bcc4:	89a0      	ldrh	r0, [r4, #12]
 801bcc6:	4305      	orrs	r5, r0
 801bcc8:	81a5      	strh	r5, [r4, #12]
 801bcca:	e7cd      	b.n	801bc68 <__smakebuf_r+0x18>
 801bccc:	0801ba5d 	.word	0x0801ba5d

0801bcd0 <__malloc_lock>:
 801bcd0:	4801      	ldr	r0, [pc, #4]	; (801bcd8 <__malloc_lock+0x8>)
 801bcd2:	f7ff bf95 	b.w	801bc00 <__retarget_lock_acquire_recursive>
 801bcd6:	bf00      	nop
 801bcd8:	20004600 	.word	0x20004600

0801bcdc <__malloc_unlock>:
 801bcdc:	4801      	ldr	r0, [pc, #4]	; (801bce4 <__malloc_unlock+0x8>)
 801bcde:	f7ff bf90 	b.w	801bc02 <__retarget_lock_release_recursive>
 801bce2:	bf00      	nop
 801bce4:	20004600 	.word	0x20004600

0801bce8 <_realloc_r>:
 801bce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcec:	4680      	mov	r8, r0
 801bcee:	4614      	mov	r4, r2
 801bcf0:	460e      	mov	r6, r1
 801bcf2:	b921      	cbnz	r1, 801bcfe <_realloc_r+0x16>
 801bcf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bcf8:	4611      	mov	r1, r2
 801bcfa:	f7ff bbbb 	b.w	801b474 <_malloc_r>
 801bcfe:	b92a      	cbnz	r2, 801bd0c <_realloc_r+0x24>
 801bd00:	f7ff fb4c 	bl	801b39c <_free_r>
 801bd04:	4625      	mov	r5, r4
 801bd06:	4628      	mov	r0, r5
 801bd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd0c:	f000 fd18 	bl	801c740 <_malloc_usable_size_r>
 801bd10:	4284      	cmp	r4, r0
 801bd12:	4607      	mov	r7, r0
 801bd14:	d802      	bhi.n	801bd1c <_realloc_r+0x34>
 801bd16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bd1a:	d812      	bhi.n	801bd42 <_realloc_r+0x5a>
 801bd1c:	4621      	mov	r1, r4
 801bd1e:	4640      	mov	r0, r8
 801bd20:	f7ff fba8 	bl	801b474 <_malloc_r>
 801bd24:	4605      	mov	r5, r0
 801bd26:	2800      	cmp	r0, #0
 801bd28:	d0ed      	beq.n	801bd06 <_realloc_r+0x1e>
 801bd2a:	42bc      	cmp	r4, r7
 801bd2c:	4622      	mov	r2, r4
 801bd2e:	4631      	mov	r1, r6
 801bd30:	bf28      	it	cs
 801bd32:	463a      	movcs	r2, r7
 801bd34:	f7ff fb1c 	bl	801b370 <memcpy>
 801bd38:	4631      	mov	r1, r6
 801bd3a:	4640      	mov	r0, r8
 801bd3c:	f7ff fb2e 	bl	801b39c <_free_r>
 801bd40:	e7e1      	b.n	801bd06 <_realloc_r+0x1e>
 801bd42:	4635      	mov	r5, r6
 801bd44:	e7df      	b.n	801bd06 <_realloc_r+0x1e>

0801bd46 <__ssputs_r>:
 801bd46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd4a:	688e      	ldr	r6, [r1, #8]
 801bd4c:	429e      	cmp	r6, r3
 801bd4e:	4682      	mov	sl, r0
 801bd50:	460c      	mov	r4, r1
 801bd52:	4690      	mov	r8, r2
 801bd54:	461f      	mov	r7, r3
 801bd56:	d838      	bhi.n	801bdca <__ssputs_r+0x84>
 801bd58:	898a      	ldrh	r2, [r1, #12]
 801bd5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bd5e:	d032      	beq.n	801bdc6 <__ssputs_r+0x80>
 801bd60:	6825      	ldr	r5, [r4, #0]
 801bd62:	6909      	ldr	r1, [r1, #16]
 801bd64:	eba5 0901 	sub.w	r9, r5, r1
 801bd68:	6965      	ldr	r5, [r4, #20]
 801bd6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bd72:	3301      	adds	r3, #1
 801bd74:	444b      	add	r3, r9
 801bd76:	106d      	asrs	r5, r5, #1
 801bd78:	429d      	cmp	r5, r3
 801bd7a:	bf38      	it	cc
 801bd7c:	461d      	movcc	r5, r3
 801bd7e:	0553      	lsls	r3, r2, #21
 801bd80:	d531      	bpl.n	801bde6 <__ssputs_r+0xa0>
 801bd82:	4629      	mov	r1, r5
 801bd84:	f7ff fb76 	bl	801b474 <_malloc_r>
 801bd88:	4606      	mov	r6, r0
 801bd8a:	b950      	cbnz	r0, 801bda2 <__ssputs_r+0x5c>
 801bd8c:	230c      	movs	r3, #12
 801bd8e:	f8ca 3000 	str.w	r3, [sl]
 801bd92:	89a3      	ldrh	r3, [r4, #12]
 801bd94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd98:	81a3      	strh	r3, [r4, #12]
 801bd9a:	f04f 30ff 	mov.w	r0, #4294967295
 801bd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bda2:	6921      	ldr	r1, [r4, #16]
 801bda4:	464a      	mov	r2, r9
 801bda6:	f7ff fae3 	bl	801b370 <memcpy>
 801bdaa:	89a3      	ldrh	r3, [r4, #12]
 801bdac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bdb4:	81a3      	strh	r3, [r4, #12]
 801bdb6:	6126      	str	r6, [r4, #16]
 801bdb8:	6165      	str	r5, [r4, #20]
 801bdba:	444e      	add	r6, r9
 801bdbc:	eba5 0509 	sub.w	r5, r5, r9
 801bdc0:	6026      	str	r6, [r4, #0]
 801bdc2:	60a5      	str	r5, [r4, #8]
 801bdc4:	463e      	mov	r6, r7
 801bdc6:	42be      	cmp	r6, r7
 801bdc8:	d900      	bls.n	801bdcc <__ssputs_r+0x86>
 801bdca:	463e      	mov	r6, r7
 801bdcc:	6820      	ldr	r0, [r4, #0]
 801bdce:	4632      	mov	r2, r6
 801bdd0:	4641      	mov	r1, r8
 801bdd2:	f000 fc9b 	bl	801c70c <memmove>
 801bdd6:	68a3      	ldr	r3, [r4, #8]
 801bdd8:	1b9b      	subs	r3, r3, r6
 801bdda:	60a3      	str	r3, [r4, #8]
 801bddc:	6823      	ldr	r3, [r4, #0]
 801bdde:	4433      	add	r3, r6
 801bde0:	6023      	str	r3, [r4, #0]
 801bde2:	2000      	movs	r0, #0
 801bde4:	e7db      	b.n	801bd9e <__ssputs_r+0x58>
 801bde6:	462a      	mov	r2, r5
 801bde8:	f7ff ff7e 	bl	801bce8 <_realloc_r>
 801bdec:	4606      	mov	r6, r0
 801bdee:	2800      	cmp	r0, #0
 801bdf0:	d1e1      	bne.n	801bdb6 <__ssputs_r+0x70>
 801bdf2:	6921      	ldr	r1, [r4, #16]
 801bdf4:	4650      	mov	r0, sl
 801bdf6:	f7ff fad1 	bl	801b39c <_free_r>
 801bdfa:	e7c7      	b.n	801bd8c <__ssputs_r+0x46>

0801bdfc <_svfiprintf_r>:
 801bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be00:	4698      	mov	r8, r3
 801be02:	898b      	ldrh	r3, [r1, #12]
 801be04:	061b      	lsls	r3, r3, #24
 801be06:	b09d      	sub	sp, #116	; 0x74
 801be08:	4607      	mov	r7, r0
 801be0a:	460d      	mov	r5, r1
 801be0c:	4614      	mov	r4, r2
 801be0e:	d50e      	bpl.n	801be2e <_svfiprintf_r+0x32>
 801be10:	690b      	ldr	r3, [r1, #16]
 801be12:	b963      	cbnz	r3, 801be2e <_svfiprintf_r+0x32>
 801be14:	2140      	movs	r1, #64	; 0x40
 801be16:	f7ff fb2d 	bl	801b474 <_malloc_r>
 801be1a:	6028      	str	r0, [r5, #0]
 801be1c:	6128      	str	r0, [r5, #16]
 801be1e:	b920      	cbnz	r0, 801be2a <_svfiprintf_r+0x2e>
 801be20:	230c      	movs	r3, #12
 801be22:	603b      	str	r3, [r7, #0]
 801be24:	f04f 30ff 	mov.w	r0, #4294967295
 801be28:	e0d1      	b.n	801bfce <_svfiprintf_r+0x1d2>
 801be2a:	2340      	movs	r3, #64	; 0x40
 801be2c:	616b      	str	r3, [r5, #20]
 801be2e:	2300      	movs	r3, #0
 801be30:	9309      	str	r3, [sp, #36]	; 0x24
 801be32:	2320      	movs	r3, #32
 801be34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be38:	f8cd 800c 	str.w	r8, [sp, #12]
 801be3c:	2330      	movs	r3, #48	; 0x30
 801be3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bfe8 <_svfiprintf_r+0x1ec>
 801be42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be46:	f04f 0901 	mov.w	r9, #1
 801be4a:	4623      	mov	r3, r4
 801be4c:	469a      	mov	sl, r3
 801be4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be52:	b10a      	cbz	r2, 801be58 <_svfiprintf_r+0x5c>
 801be54:	2a25      	cmp	r2, #37	; 0x25
 801be56:	d1f9      	bne.n	801be4c <_svfiprintf_r+0x50>
 801be58:	ebba 0b04 	subs.w	fp, sl, r4
 801be5c:	d00b      	beq.n	801be76 <_svfiprintf_r+0x7a>
 801be5e:	465b      	mov	r3, fp
 801be60:	4622      	mov	r2, r4
 801be62:	4629      	mov	r1, r5
 801be64:	4638      	mov	r0, r7
 801be66:	f7ff ff6e 	bl	801bd46 <__ssputs_r>
 801be6a:	3001      	adds	r0, #1
 801be6c:	f000 80aa 	beq.w	801bfc4 <_svfiprintf_r+0x1c8>
 801be70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be72:	445a      	add	r2, fp
 801be74:	9209      	str	r2, [sp, #36]	; 0x24
 801be76:	f89a 3000 	ldrb.w	r3, [sl]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	f000 80a2 	beq.w	801bfc4 <_svfiprintf_r+0x1c8>
 801be80:	2300      	movs	r3, #0
 801be82:	f04f 32ff 	mov.w	r2, #4294967295
 801be86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801be8a:	f10a 0a01 	add.w	sl, sl, #1
 801be8e:	9304      	str	r3, [sp, #16]
 801be90:	9307      	str	r3, [sp, #28]
 801be92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801be96:	931a      	str	r3, [sp, #104]	; 0x68
 801be98:	4654      	mov	r4, sl
 801be9a:	2205      	movs	r2, #5
 801be9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bea0:	4851      	ldr	r0, [pc, #324]	; (801bfe8 <_svfiprintf_r+0x1ec>)
 801bea2:	f7e4 f9b5 	bl	8000210 <memchr>
 801bea6:	9a04      	ldr	r2, [sp, #16]
 801bea8:	b9d8      	cbnz	r0, 801bee2 <_svfiprintf_r+0xe6>
 801beaa:	06d0      	lsls	r0, r2, #27
 801beac:	bf44      	itt	mi
 801beae:	2320      	movmi	r3, #32
 801beb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801beb4:	0711      	lsls	r1, r2, #28
 801beb6:	bf44      	itt	mi
 801beb8:	232b      	movmi	r3, #43	; 0x2b
 801beba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bebe:	f89a 3000 	ldrb.w	r3, [sl]
 801bec2:	2b2a      	cmp	r3, #42	; 0x2a
 801bec4:	d015      	beq.n	801bef2 <_svfiprintf_r+0xf6>
 801bec6:	9a07      	ldr	r2, [sp, #28]
 801bec8:	4654      	mov	r4, sl
 801beca:	2000      	movs	r0, #0
 801becc:	f04f 0c0a 	mov.w	ip, #10
 801bed0:	4621      	mov	r1, r4
 801bed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bed6:	3b30      	subs	r3, #48	; 0x30
 801bed8:	2b09      	cmp	r3, #9
 801beda:	d94e      	bls.n	801bf7a <_svfiprintf_r+0x17e>
 801bedc:	b1b0      	cbz	r0, 801bf0c <_svfiprintf_r+0x110>
 801bede:	9207      	str	r2, [sp, #28]
 801bee0:	e014      	b.n	801bf0c <_svfiprintf_r+0x110>
 801bee2:	eba0 0308 	sub.w	r3, r0, r8
 801bee6:	fa09 f303 	lsl.w	r3, r9, r3
 801beea:	4313      	orrs	r3, r2
 801beec:	9304      	str	r3, [sp, #16]
 801beee:	46a2      	mov	sl, r4
 801bef0:	e7d2      	b.n	801be98 <_svfiprintf_r+0x9c>
 801bef2:	9b03      	ldr	r3, [sp, #12]
 801bef4:	1d19      	adds	r1, r3, #4
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	9103      	str	r1, [sp, #12]
 801befa:	2b00      	cmp	r3, #0
 801befc:	bfbb      	ittet	lt
 801befe:	425b      	neglt	r3, r3
 801bf00:	f042 0202 	orrlt.w	r2, r2, #2
 801bf04:	9307      	strge	r3, [sp, #28]
 801bf06:	9307      	strlt	r3, [sp, #28]
 801bf08:	bfb8      	it	lt
 801bf0a:	9204      	strlt	r2, [sp, #16]
 801bf0c:	7823      	ldrb	r3, [r4, #0]
 801bf0e:	2b2e      	cmp	r3, #46	; 0x2e
 801bf10:	d10c      	bne.n	801bf2c <_svfiprintf_r+0x130>
 801bf12:	7863      	ldrb	r3, [r4, #1]
 801bf14:	2b2a      	cmp	r3, #42	; 0x2a
 801bf16:	d135      	bne.n	801bf84 <_svfiprintf_r+0x188>
 801bf18:	9b03      	ldr	r3, [sp, #12]
 801bf1a:	1d1a      	adds	r2, r3, #4
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	9203      	str	r2, [sp, #12]
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	bfb8      	it	lt
 801bf24:	f04f 33ff 	movlt.w	r3, #4294967295
 801bf28:	3402      	adds	r4, #2
 801bf2a:	9305      	str	r3, [sp, #20]
 801bf2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bff8 <_svfiprintf_r+0x1fc>
 801bf30:	7821      	ldrb	r1, [r4, #0]
 801bf32:	2203      	movs	r2, #3
 801bf34:	4650      	mov	r0, sl
 801bf36:	f7e4 f96b 	bl	8000210 <memchr>
 801bf3a:	b140      	cbz	r0, 801bf4e <_svfiprintf_r+0x152>
 801bf3c:	2340      	movs	r3, #64	; 0x40
 801bf3e:	eba0 000a 	sub.w	r0, r0, sl
 801bf42:	fa03 f000 	lsl.w	r0, r3, r0
 801bf46:	9b04      	ldr	r3, [sp, #16]
 801bf48:	4303      	orrs	r3, r0
 801bf4a:	3401      	adds	r4, #1
 801bf4c:	9304      	str	r3, [sp, #16]
 801bf4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf52:	4826      	ldr	r0, [pc, #152]	; (801bfec <_svfiprintf_r+0x1f0>)
 801bf54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf58:	2206      	movs	r2, #6
 801bf5a:	f7e4 f959 	bl	8000210 <memchr>
 801bf5e:	2800      	cmp	r0, #0
 801bf60:	d038      	beq.n	801bfd4 <_svfiprintf_r+0x1d8>
 801bf62:	4b23      	ldr	r3, [pc, #140]	; (801bff0 <_svfiprintf_r+0x1f4>)
 801bf64:	bb1b      	cbnz	r3, 801bfae <_svfiprintf_r+0x1b2>
 801bf66:	9b03      	ldr	r3, [sp, #12]
 801bf68:	3307      	adds	r3, #7
 801bf6a:	f023 0307 	bic.w	r3, r3, #7
 801bf6e:	3308      	adds	r3, #8
 801bf70:	9303      	str	r3, [sp, #12]
 801bf72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf74:	4433      	add	r3, r6
 801bf76:	9309      	str	r3, [sp, #36]	; 0x24
 801bf78:	e767      	b.n	801be4a <_svfiprintf_r+0x4e>
 801bf7a:	fb0c 3202 	mla	r2, ip, r2, r3
 801bf7e:	460c      	mov	r4, r1
 801bf80:	2001      	movs	r0, #1
 801bf82:	e7a5      	b.n	801bed0 <_svfiprintf_r+0xd4>
 801bf84:	2300      	movs	r3, #0
 801bf86:	3401      	adds	r4, #1
 801bf88:	9305      	str	r3, [sp, #20]
 801bf8a:	4619      	mov	r1, r3
 801bf8c:	f04f 0c0a 	mov.w	ip, #10
 801bf90:	4620      	mov	r0, r4
 801bf92:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bf96:	3a30      	subs	r2, #48	; 0x30
 801bf98:	2a09      	cmp	r2, #9
 801bf9a:	d903      	bls.n	801bfa4 <_svfiprintf_r+0x1a8>
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d0c5      	beq.n	801bf2c <_svfiprintf_r+0x130>
 801bfa0:	9105      	str	r1, [sp, #20]
 801bfa2:	e7c3      	b.n	801bf2c <_svfiprintf_r+0x130>
 801bfa4:	fb0c 2101 	mla	r1, ip, r1, r2
 801bfa8:	4604      	mov	r4, r0
 801bfaa:	2301      	movs	r3, #1
 801bfac:	e7f0      	b.n	801bf90 <_svfiprintf_r+0x194>
 801bfae:	ab03      	add	r3, sp, #12
 801bfb0:	9300      	str	r3, [sp, #0]
 801bfb2:	462a      	mov	r2, r5
 801bfb4:	4b0f      	ldr	r3, [pc, #60]	; (801bff4 <_svfiprintf_r+0x1f8>)
 801bfb6:	a904      	add	r1, sp, #16
 801bfb8:	4638      	mov	r0, r7
 801bfba:	f3af 8000 	nop.w
 801bfbe:	1c42      	adds	r2, r0, #1
 801bfc0:	4606      	mov	r6, r0
 801bfc2:	d1d6      	bne.n	801bf72 <_svfiprintf_r+0x176>
 801bfc4:	89ab      	ldrh	r3, [r5, #12]
 801bfc6:	065b      	lsls	r3, r3, #25
 801bfc8:	f53f af2c 	bmi.w	801be24 <_svfiprintf_r+0x28>
 801bfcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bfce:	b01d      	add	sp, #116	; 0x74
 801bfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfd4:	ab03      	add	r3, sp, #12
 801bfd6:	9300      	str	r3, [sp, #0]
 801bfd8:	462a      	mov	r2, r5
 801bfda:	4b06      	ldr	r3, [pc, #24]	; (801bff4 <_svfiprintf_r+0x1f8>)
 801bfdc:	a904      	add	r1, sp, #16
 801bfde:	4638      	mov	r0, r7
 801bfe0:	f000 f9d4 	bl	801c38c <_printf_i>
 801bfe4:	e7eb      	b.n	801bfbe <_svfiprintf_r+0x1c2>
 801bfe6:	bf00      	nop
 801bfe8:	0802b834 	.word	0x0802b834
 801bfec:	0802b83e 	.word	0x0802b83e
 801bff0:	00000000 	.word	0x00000000
 801bff4:	0801bd47 	.word	0x0801bd47
 801bff8:	0802b83a 	.word	0x0802b83a

0801bffc <__sfputc_r>:
 801bffc:	6893      	ldr	r3, [r2, #8]
 801bffe:	3b01      	subs	r3, #1
 801c000:	2b00      	cmp	r3, #0
 801c002:	b410      	push	{r4}
 801c004:	6093      	str	r3, [r2, #8]
 801c006:	da08      	bge.n	801c01a <__sfputc_r+0x1e>
 801c008:	6994      	ldr	r4, [r2, #24]
 801c00a:	42a3      	cmp	r3, r4
 801c00c:	db01      	blt.n	801c012 <__sfputc_r+0x16>
 801c00e:	290a      	cmp	r1, #10
 801c010:	d103      	bne.n	801c01a <__sfputc_r+0x1e>
 801c012:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c016:	f7ff bb7b 	b.w	801b710 <__swbuf_r>
 801c01a:	6813      	ldr	r3, [r2, #0]
 801c01c:	1c58      	adds	r0, r3, #1
 801c01e:	6010      	str	r0, [r2, #0]
 801c020:	7019      	strb	r1, [r3, #0]
 801c022:	4608      	mov	r0, r1
 801c024:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c028:	4770      	bx	lr

0801c02a <__sfputs_r>:
 801c02a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c02c:	4606      	mov	r6, r0
 801c02e:	460f      	mov	r7, r1
 801c030:	4614      	mov	r4, r2
 801c032:	18d5      	adds	r5, r2, r3
 801c034:	42ac      	cmp	r4, r5
 801c036:	d101      	bne.n	801c03c <__sfputs_r+0x12>
 801c038:	2000      	movs	r0, #0
 801c03a:	e007      	b.n	801c04c <__sfputs_r+0x22>
 801c03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c040:	463a      	mov	r2, r7
 801c042:	4630      	mov	r0, r6
 801c044:	f7ff ffda 	bl	801bffc <__sfputc_r>
 801c048:	1c43      	adds	r3, r0, #1
 801c04a:	d1f3      	bne.n	801c034 <__sfputs_r+0xa>
 801c04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c050 <_vfiprintf_r>:
 801c050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c054:	460d      	mov	r5, r1
 801c056:	b09d      	sub	sp, #116	; 0x74
 801c058:	4614      	mov	r4, r2
 801c05a:	4698      	mov	r8, r3
 801c05c:	4606      	mov	r6, r0
 801c05e:	b118      	cbz	r0, 801c068 <_vfiprintf_r+0x18>
 801c060:	6983      	ldr	r3, [r0, #24]
 801c062:	b90b      	cbnz	r3, 801c068 <_vfiprintf_r+0x18>
 801c064:	f7ff fd2e 	bl	801bac4 <__sinit>
 801c068:	4b89      	ldr	r3, [pc, #548]	; (801c290 <_vfiprintf_r+0x240>)
 801c06a:	429d      	cmp	r5, r3
 801c06c:	d11b      	bne.n	801c0a6 <_vfiprintf_r+0x56>
 801c06e:	6875      	ldr	r5, [r6, #4]
 801c070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c072:	07d9      	lsls	r1, r3, #31
 801c074:	d405      	bmi.n	801c082 <_vfiprintf_r+0x32>
 801c076:	89ab      	ldrh	r3, [r5, #12]
 801c078:	059a      	lsls	r2, r3, #22
 801c07a:	d402      	bmi.n	801c082 <_vfiprintf_r+0x32>
 801c07c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c07e:	f7ff fdbf 	bl	801bc00 <__retarget_lock_acquire_recursive>
 801c082:	89ab      	ldrh	r3, [r5, #12]
 801c084:	071b      	lsls	r3, r3, #28
 801c086:	d501      	bpl.n	801c08c <_vfiprintf_r+0x3c>
 801c088:	692b      	ldr	r3, [r5, #16]
 801c08a:	b9eb      	cbnz	r3, 801c0c8 <_vfiprintf_r+0x78>
 801c08c:	4629      	mov	r1, r5
 801c08e:	4630      	mov	r0, r6
 801c090:	f7ff fb90 	bl	801b7b4 <__swsetup_r>
 801c094:	b1c0      	cbz	r0, 801c0c8 <_vfiprintf_r+0x78>
 801c096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c098:	07dc      	lsls	r4, r3, #31
 801c09a:	d50e      	bpl.n	801c0ba <_vfiprintf_r+0x6a>
 801c09c:	f04f 30ff 	mov.w	r0, #4294967295
 801c0a0:	b01d      	add	sp, #116	; 0x74
 801c0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0a6:	4b7b      	ldr	r3, [pc, #492]	; (801c294 <_vfiprintf_r+0x244>)
 801c0a8:	429d      	cmp	r5, r3
 801c0aa:	d101      	bne.n	801c0b0 <_vfiprintf_r+0x60>
 801c0ac:	68b5      	ldr	r5, [r6, #8]
 801c0ae:	e7df      	b.n	801c070 <_vfiprintf_r+0x20>
 801c0b0:	4b79      	ldr	r3, [pc, #484]	; (801c298 <_vfiprintf_r+0x248>)
 801c0b2:	429d      	cmp	r5, r3
 801c0b4:	bf08      	it	eq
 801c0b6:	68f5      	ldreq	r5, [r6, #12]
 801c0b8:	e7da      	b.n	801c070 <_vfiprintf_r+0x20>
 801c0ba:	89ab      	ldrh	r3, [r5, #12]
 801c0bc:	0598      	lsls	r0, r3, #22
 801c0be:	d4ed      	bmi.n	801c09c <_vfiprintf_r+0x4c>
 801c0c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c0c2:	f7ff fd9e 	bl	801bc02 <__retarget_lock_release_recursive>
 801c0c6:	e7e9      	b.n	801c09c <_vfiprintf_r+0x4c>
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	9309      	str	r3, [sp, #36]	; 0x24
 801c0cc:	2320      	movs	r3, #32
 801c0ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c0d2:	f8cd 800c 	str.w	r8, [sp, #12]
 801c0d6:	2330      	movs	r3, #48	; 0x30
 801c0d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c29c <_vfiprintf_r+0x24c>
 801c0dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c0e0:	f04f 0901 	mov.w	r9, #1
 801c0e4:	4623      	mov	r3, r4
 801c0e6:	469a      	mov	sl, r3
 801c0e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c0ec:	b10a      	cbz	r2, 801c0f2 <_vfiprintf_r+0xa2>
 801c0ee:	2a25      	cmp	r2, #37	; 0x25
 801c0f0:	d1f9      	bne.n	801c0e6 <_vfiprintf_r+0x96>
 801c0f2:	ebba 0b04 	subs.w	fp, sl, r4
 801c0f6:	d00b      	beq.n	801c110 <_vfiprintf_r+0xc0>
 801c0f8:	465b      	mov	r3, fp
 801c0fa:	4622      	mov	r2, r4
 801c0fc:	4629      	mov	r1, r5
 801c0fe:	4630      	mov	r0, r6
 801c100:	f7ff ff93 	bl	801c02a <__sfputs_r>
 801c104:	3001      	adds	r0, #1
 801c106:	f000 80aa 	beq.w	801c25e <_vfiprintf_r+0x20e>
 801c10a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c10c:	445a      	add	r2, fp
 801c10e:	9209      	str	r2, [sp, #36]	; 0x24
 801c110:	f89a 3000 	ldrb.w	r3, [sl]
 801c114:	2b00      	cmp	r3, #0
 801c116:	f000 80a2 	beq.w	801c25e <_vfiprintf_r+0x20e>
 801c11a:	2300      	movs	r3, #0
 801c11c:	f04f 32ff 	mov.w	r2, #4294967295
 801c120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c124:	f10a 0a01 	add.w	sl, sl, #1
 801c128:	9304      	str	r3, [sp, #16]
 801c12a:	9307      	str	r3, [sp, #28]
 801c12c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c130:	931a      	str	r3, [sp, #104]	; 0x68
 801c132:	4654      	mov	r4, sl
 801c134:	2205      	movs	r2, #5
 801c136:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c13a:	4858      	ldr	r0, [pc, #352]	; (801c29c <_vfiprintf_r+0x24c>)
 801c13c:	f7e4 f868 	bl	8000210 <memchr>
 801c140:	9a04      	ldr	r2, [sp, #16]
 801c142:	b9d8      	cbnz	r0, 801c17c <_vfiprintf_r+0x12c>
 801c144:	06d1      	lsls	r1, r2, #27
 801c146:	bf44      	itt	mi
 801c148:	2320      	movmi	r3, #32
 801c14a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c14e:	0713      	lsls	r3, r2, #28
 801c150:	bf44      	itt	mi
 801c152:	232b      	movmi	r3, #43	; 0x2b
 801c154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c158:	f89a 3000 	ldrb.w	r3, [sl]
 801c15c:	2b2a      	cmp	r3, #42	; 0x2a
 801c15e:	d015      	beq.n	801c18c <_vfiprintf_r+0x13c>
 801c160:	9a07      	ldr	r2, [sp, #28]
 801c162:	4654      	mov	r4, sl
 801c164:	2000      	movs	r0, #0
 801c166:	f04f 0c0a 	mov.w	ip, #10
 801c16a:	4621      	mov	r1, r4
 801c16c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c170:	3b30      	subs	r3, #48	; 0x30
 801c172:	2b09      	cmp	r3, #9
 801c174:	d94e      	bls.n	801c214 <_vfiprintf_r+0x1c4>
 801c176:	b1b0      	cbz	r0, 801c1a6 <_vfiprintf_r+0x156>
 801c178:	9207      	str	r2, [sp, #28]
 801c17a:	e014      	b.n	801c1a6 <_vfiprintf_r+0x156>
 801c17c:	eba0 0308 	sub.w	r3, r0, r8
 801c180:	fa09 f303 	lsl.w	r3, r9, r3
 801c184:	4313      	orrs	r3, r2
 801c186:	9304      	str	r3, [sp, #16]
 801c188:	46a2      	mov	sl, r4
 801c18a:	e7d2      	b.n	801c132 <_vfiprintf_r+0xe2>
 801c18c:	9b03      	ldr	r3, [sp, #12]
 801c18e:	1d19      	adds	r1, r3, #4
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	9103      	str	r1, [sp, #12]
 801c194:	2b00      	cmp	r3, #0
 801c196:	bfbb      	ittet	lt
 801c198:	425b      	neglt	r3, r3
 801c19a:	f042 0202 	orrlt.w	r2, r2, #2
 801c19e:	9307      	strge	r3, [sp, #28]
 801c1a0:	9307      	strlt	r3, [sp, #28]
 801c1a2:	bfb8      	it	lt
 801c1a4:	9204      	strlt	r2, [sp, #16]
 801c1a6:	7823      	ldrb	r3, [r4, #0]
 801c1a8:	2b2e      	cmp	r3, #46	; 0x2e
 801c1aa:	d10c      	bne.n	801c1c6 <_vfiprintf_r+0x176>
 801c1ac:	7863      	ldrb	r3, [r4, #1]
 801c1ae:	2b2a      	cmp	r3, #42	; 0x2a
 801c1b0:	d135      	bne.n	801c21e <_vfiprintf_r+0x1ce>
 801c1b2:	9b03      	ldr	r3, [sp, #12]
 801c1b4:	1d1a      	adds	r2, r3, #4
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	9203      	str	r2, [sp, #12]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	bfb8      	it	lt
 801c1be:	f04f 33ff 	movlt.w	r3, #4294967295
 801c1c2:	3402      	adds	r4, #2
 801c1c4:	9305      	str	r3, [sp, #20]
 801c1c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c2ac <_vfiprintf_r+0x25c>
 801c1ca:	7821      	ldrb	r1, [r4, #0]
 801c1cc:	2203      	movs	r2, #3
 801c1ce:	4650      	mov	r0, sl
 801c1d0:	f7e4 f81e 	bl	8000210 <memchr>
 801c1d4:	b140      	cbz	r0, 801c1e8 <_vfiprintf_r+0x198>
 801c1d6:	2340      	movs	r3, #64	; 0x40
 801c1d8:	eba0 000a 	sub.w	r0, r0, sl
 801c1dc:	fa03 f000 	lsl.w	r0, r3, r0
 801c1e0:	9b04      	ldr	r3, [sp, #16]
 801c1e2:	4303      	orrs	r3, r0
 801c1e4:	3401      	adds	r4, #1
 801c1e6:	9304      	str	r3, [sp, #16]
 801c1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1ec:	482c      	ldr	r0, [pc, #176]	; (801c2a0 <_vfiprintf_r+0x250>)
 801c1ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c1f2:	2206      	movs	r2, #6
 801c1f4:	f7e4 f80c 	bl	8000210 <memchr>
 801c1f8:	2800      	cmp	r0, #0
 801c1fa:	d03f      	beq.n	801c27c <_vfiprintf_r+0x22c>
 801c1fc:	4b29      	ldr	r3, [pc, #164]	; (801c2a4 <_vfiprintf_r+0x254>)
 801c1fe:	bb1b      	cbnz	r3, 801c248 <_vfiprintf_r+0x1f8>
 801c200:	9b03      	ldr	r3, [sp, #12]
 801c202:	3307      	adds	r3, #7
 801c204:	f023 0307 	bic.w	r3, r3, #7
 801c208:	3308      	adds	r3, #8
 801c20a:	9303      	str	r3, [sp, #12]
 801c20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c20e:	443b      	add	r3, r7
 801c210:	9309      	str	r3, [sp, #36]	; 0x24
 801c212:	e767      	b.n	801c0e4 <_vfiprintf_r+0x94>
 801c214:	fb0c 3202 	mla	r2, ip, r2, r3
 801c218:	460c      	mov	r4, r1
 801c21a:	2001      	movs	r0, #1
 801c21c:	e7a5      	b.n	801c16a <_vfiprintf_r+0x11a>
 801c21e:	2300      	movs	r3, #0
 801c220:	3401      	adds	r4, #1
 801c222:	9305      	str	r3, [sp, #20]
 801c224:	4619      	mov	r1, r3
 801c226:	f04f 0c0a 	mov.w	ip, #10
 801c22a:	4620      	mov	r0, r4
 801c22c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c230:	3a30      	subs	r2, #48	; 0x30
 801c232:	2a09      	cmp	r2, #9
 801c234:	d903      	bls.n	801c23e <_vfiprintf_r+0x1ee>
 801c236:	2b00      	cmp	r3, #0
 801c238:	d0c5      	beq.n	801c1c6 <_vfiprintf_r+0x176>
 801c23a:	9105      	str	r1, [sp, #20]
 801c23c:	e7c3      	b.n	801c1c6 <_vfiprintf_r+0x176>
 801c23e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c242:	4604      	mov	r4, r0
 801c244:	2301      	movs	r3, #1
 801c246:	e7f0      	b.n	801c22a <_vfiprintf_r+0x1da>
 801c248:	ab03      	add	r3, sp, #12
 801c24a:	9300      	str	r3, [sp, #0]
 801c24c:	462a      	mov	r2, r5
 801c24e:	4b16      	ldr	r3, [pc, #88]	; (801c2a8 <_vfiprintf_r+0x258>)
 801c250:	a904      	add	r1, sp, #16
 801c252:	4630      	mov	r0, r6
 801c254:	f3af 8000 	nop.w
 801c258:	4607      	mov	r7, r0
 801c25a:	1c78      	adds	r0, r7, #1
 801c25c:	d1d6      	bne.n	801c20c <_vfiprintf_r+0x1bc>
 801c25e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c260:	07d9      	lsls	r1, r3, #31
 801c262:	d405      	bmi.n	801c270 <_vfiprintf_r+0x220>
 801c264:	89ab      	ldrh	r3, [r5, #12]
 801c266:	059a      	lsls	r2, r3, #22
 801c268:	d402      	bmi.n	801c270 <_vfiprintf_r+0x220>
 801c26a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c26c:	f7ff fcc9 	bl	801bc02 <__retarget_lock_release_recursive>
 801c270:	89ab      	ldrh	r3, [r5, #12]
 801c272:	065b      	lsls	r3, r3, #25
 801c274:	f53f af12 	bmi.w	801c09c <_vfiprintf_r+0x4c>
 801c278:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c27a:	e711      	b.n	801c0a0 <_vfiprintf_r+0x50>
 801c27c:	ab03      	add	r3, sp, #12
 801c27e:	9300      	str	r3, [sp, #0]
 801c280:	462a      	mov	r2, r5
 801c282:	4b09      	ldr	r3, [pc, #36]	; (801c2a8 <_vfiprintf_r+0x258>)
 801c284:	a904      	add	r1, sp, #16
 801c286:	4630      	mov	r0, r6
 801c288:	f000 f880 	bl	801c38c <_printf_i>
 801c28c:	e7e4      	b.n	801c258 <_vfiprintf_r+0x208>
 801c28e:	bf00      	nop
 801c290:	0802b7f4 	.word	0x0802b7f4
 801c294:	0802b814 	.word	0x0802b814
 801c298:	0802b7d4 	.word	0x0802b7d4
 801c29c:	0802b834 	.word	0x0802b834
 801c2a0:	0802b83e 	.word	0x0802b83e
 801c2a4:	00000000 	.word	0x00000000
 801c2a8:	0801c02b 	.word	0x0801c02b
 801c2ac:	0802b83a 	.word	0x0802b83a

0801c2b0 <_printf_common>:
 801c2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c2b4:	4616      	mov	r6, r2
 801c2b6:	4699      	mov	r9, r3
 801c2b8:	688a      	ldr	r2, [r1, #8]
 801c2ba:	690b      	ldr	r3, [r1, #16]
 801c2bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c2c0:	4293      	cmp	r3, r2
 801c2c2:	bfb8      	it	lt
 801c2c4:	4613      	movlt	r3, r2
 801c2c6:	6033      	str	r3, [r6, #0]
 801c2c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c2cc:	4607      	mov	r7, r0
 801c2ce:	460c      	mov	r4, r1
 801c2d0:	b10a      	cbz	r2, 801c2d6 <_printf_common+0x26>
 801c2d2:	3301      	adds	r3, #1
 801c2d4:	6033      	str	r3, [r6, #0]
 801c2d6:	6823      	ldr	r3, [r4, #0]
 801c2d8:	0699      	lsls	r1, r3, #26
 801c2da:	bf42      	ittt	mi
 801c2dc:	6833      	ldrmi	r3, [r6, #0]
 801c2de:	3302      	addmi	r3, #2
 801c2e0:	6033      	strmi	r3, [r6, #0]
 801c2e2:	6825      	ldr	r5, [r4, #0]
 801c2e4:	f015 0506 	ands.w	r5, r5, #6
 801c2e8:	d106      	bne.n	801c2f8 <_printf_common+0x48>
 801c2ea:	f104 0a19 	add.w	sl, r4, #25
 801c2ee:	68e3      	ldr	r3, [r4, #12]
 801c2f0:	6832      	ldr	r2, [r6, #0]
 801c2f2:	1a9b      	subs	r3, r3, r2
 801c2f4:	42ab      	cmp	r3, r5
 801c2f6:	dc26      	bgt.n	801c346 <_printf_common+0x96>
 801c2f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c2fc:	1e13      	subs	r3, r2, #0
 801c2fe:	6822      	ldr	r2, [r4, #0]
 801c300:	bf18      	it	ne
 801c302:	2301      	movne	r3, #1
 801c304:	0692      	lsls	r2, r2, #26
 801c306:	d42b      	bmi.n	801c360 <_printf_common+0xb0>
 801c308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c30c:	4649      	mov	r1, r9
 801c30e:	4638      	mov	r0, r7
 801c310:	47c0      	blx	r8
 801c312:	3001      	adds	r0, #1
 801c314:	d01e      	beq.n	801c354 <_printf_common+0xa4>
 801c316:	6823      	ldr	r3, [r4, #0]
 801c318:	68e5      	ldr	r5, [r4, #12]
 801c31a:	6832      	ldr	r2, [r6, #0]
 801c31c:	f003 0306 	and.w	r3, r3, #6
 801c320:	2b04      	cmp	r3, #4
 801c322:	bf08      	it	eq
 801c324:	1aad      	subeq	r5, r5, r2
 801c326:	68a3      	ldr	r3, [r4, #8]
 801c328:	6922      	ldr	r2, [r4, #16]
 801c32a:	bf0c      	ite	eq
 801c32c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c330:	2500      	movne	r5, #0
 801c332:	4293      	cmp	r3, r2
 801c334:	bfc4      	itt	gt
 801c336:	1a9b      	subgt	r3, r3, r2
 801c338:	18ed      	addgt	r5, r5, r3
 801c33a:	2600      	movs	r6, #0
 801c33c:	341a      	adds	r4, #26
 801c33e:	42b5      	cmp	r5, r6
 801c340:	d11a      	bne.n	801c378 <_printf_common+0xc8>
 801c342:	2000      	movs	r0, #0
 801c344:	e008      	b.n	801c358 <_printf_common+0xa8>
 801c346:	2301      	movs	r3, #1
 801c348:	4652      	mov	r2, sl
 801c34a:	4649      	mov	r1, r9
 801c34c:	4638      	mov	r0, r7
 801c34e:	47c0      	blx	r8
 801c350:	3001      	adds	r0, #1
 801c352:	d103      	bne.n	801c35c <_printf_common+0xac>
 801c354:	f04f 30ff 	mov.w	r0, #4294967295
 801c358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c35c:	3501      	adds	r5, #1
 801c35e:	e7c6      	b.n	801c2ee <_printf_common+0x3e>
 801c360:	18e1      	adds	r1, r4, r3
 801c362:	1c5a      	adds	r2, r3, #1
 801c364:	2030      	movs	r0, #48	; 0x30
 801c366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c36a:	4422      	add	r2, r4
 801c36c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c374:	3302      	adds	r3, #2
 801c376:	e7c7      	b.n	801c308 <_printf_common+0x58>
 801c378:	2301      	movs	r3, #1
 801c37a:	4622      	mov	r2, r4
 801c37c:	4649      	mov	r1, r9
 801c37e:	4638      	mov	r0, r7
 801c380:	47c0      	blx	r8
 801c382:	3001      	adds	r0, #1
 801c384:	d0e6      	beq.n	801c354 <_printf_common+0xa4>
 801c386:	3601      	adds	r6, #1
 801c388:	e7d9      	b.n	801c33e <_printf_common+0x8e>
	...

0801c38c <_printf_i>:
 801c38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c390:	7e0f      	ldrb	r7, [r1, #24]
 801c392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c394:	2f78      	cmp	r7, #120	; 0x78
 801c396:	4691      	mov	r9, r2
 801c398:	4680      	mov	r8, r0
 801c39a:	460c      	mov	r4, r1
 801c39c:	469a      	mov	sl, r3
 801c39e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c3a2:	d807      	bhi.n	801c3b4 <_printf_i+0x28>
 801c3a4:	2f62      	cmp	r7, #98	; 0x62
 801c3a6:	d80a      	bhi.n	801c3be <_printf_i+0x32>
 801c3a8:	2f00      	cmp	r7, #0
 801c3aa:	f000 80d8 	beq.w	801c55e <_printf_i+0x1d2>
 801c3ae:	2f58      	cmp	r7, #88	; 0x58
 801c3b0:	f000 80a3 	beq.w	801c4fa <_printf_i+0x16e>
 801c3b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c3b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c3bc:	e03a      	b.n	801c434 <_printf_i+0xa8>
 801c3be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c3c2:	2b15      	cmp	r3, #21
 801c3c4:	d8f6      	bhi.n	801c3b4 <_printf_i+0x28>
 801c3c6:	a101      	add	r1, pc, #4	; (adr r1, 801c3cc <_printf_i+0x40>)
 801c3c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c3cc:	0801c425 	.word	0x0801c425
 801c3d0:	0801c439 	.word	0x0801c439
 801c3d4:	0801c3b5 	.word	0x0801c3b5
 801c3d8:	0801c3b5 	.word	0x0801c3b5
 801c3dc:	0801c3b5 	.word	0x0801c3b5
 801c3e0:	0801c3b5 	.word	0x0801c3b5
 801c3e4:	0801c439 	.word	0x0801c439
 801c3e8:	0801c3b5 	.word	0x0801c3b5
 801c3ec:	0801c3b5 	.word	0x0801c3b5
 801c3f0:	0801c3b5 	.word	0x0801c3b5
 801c3f4:	0801c3b5 	.word	0x0801c3b5
 801c3f8:	0801c545 	.word	0x0801c545
 801c3fc:	0801c469 	.word	0x0801c469
 801c400:	0801c527 	.word	0x0801c527
 801c404:	0801c3b5 	.word	0x0801c3b5
 801c408:	0801c3b5 	.word	0x0801c3b5
 801c40c:	0801c567 	.word	0x0801c567
 801c410:	0801c3b5 	.word	0x0801c3b5
 801c414:	0801c469 	.word	0x0801c469
 801c418:	0801c3b5 	.word	0x0801c3b5
 801c41c:	0801c3b5 	.word	0x0801c3b5
 801c420:	0801c52f 	.word	0x0801c52f
 801c424:	682b      	ldr	r3, [r5, #0]
 801c426:	1d1a      	adds	r2, r3, #4
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	602a      	str	r2, [r5, #0]
 801c42c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c434:	2301      	movs	r3, #1
 801c436:	e0a3      	b.n	801c580 <_printf_i+0x1f4>
 801c438:	6820      	ldr	r0, [r4, #0]
 801c43a:	6829      	ldr	r1, [r5, #0]
 801c43c:	0606      	lsls	r6, r0, #24
 801c43e:	f101 0304 	add.w	r3, r1, #4
 801c442:	d50a      	bpl.n	801c45a <_printf_i+0xce>
 801c444:	680e      	ldr	r6, [r1, #0]
 801c446:	602b      	str	r3, [r5, #0]
 801c448:	2e00      	cmp	r6, #0
 801c44a:	da03      	bge.n	801c454 <_printf_i+0xc8>
 801c44c:	232d      	movs	r3, #45	; 0x2d
 801c44e:	4276      	negs	r6, r6
 801c450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c454:	485e      	ldr	r0, [pc, #376]	; (801c5d0 <_printf_i+0x244>)
 801c456:	230a      	movs	r3, #10
 801c458:	e019      	b.n	801c48e <_printf_i+0x102>
 801c45a:	680e      	ldr	r6, [r1, #0]
 801c45c:	602b      	str	r3, [r5, #0]
 801c45e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c462:	bf18      	it	ne
 801c464:	b236      	sxthne	r6, r6
 801c466:	e7ef      	b.n	801c448 <_printf_i+0xbc>
 801c468:	682b      	ldr	r3, [r5, #0]
 801c46a:	6820      	ldr	r0, [r4, #0]
 801c46c:	1d19      	adds	r1, r3, #4
 801c46e:	6029      	str	r1, [r5, #0]
 801c470:	0601      	lsls	r1, r0, #24
 801c472:	d501      	bpl.n	801c478 <_printf_i+0xec>
 801c474:	681e      	ldr	r6, [r3, #0]
 801c476:	e002      	b.n	801c47e <_printf_i+0xf2>
 801c478:	0646      	lsls	r6, r0, #25
 801c47a:	d5fb      	bpl.n	801c474 <_printf_i+0xe8>
 801c47c:	881e      	ldrh	r6, [r3, #0]
 801c47e:	4854      	ldr	r0, [pc, #336]	; (801c5d0 <_printf_i+0x244>)
 801c480:	2f6f      	cmp	r7, #111	; 0x6f
 801c482:	bf0c      	ite	eq
 801c484:	2308      	moveq	r3, #8
 801c486:	230a      	movne	r3, #10
 801c488:	2100      	movs	r1, #0
 801c48a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c48e:	6865      	ldr	r5, [r4, #4]
 801c490:	60a5      	str	r5, [r4, #8]
 801c492:	2d00      	cmp	r5, #0
 801c494:	bfa2      	ittt	ge
 801c496:	6821      	ldrge	r1, [r4, #0]
 801c498:	f021 0104 	bicge.w	r1, r1, #4
 801c49c:	6021      	strge	r1, [r4, #0]
 801c49e:	b90e      	cbnz	r6, 801c4a4 <_printf_i+0x118>
 801c4a0:	2d00      	cmp	r5, #0
 801c4a2:	d04d      	beq.n	801c540 <_printf_i+0x1b4>
 801c4a4:	4615      	mov	r5, r2
 801c4a6:	fbb6 f1f3 	udiv	r1, r6, r3
 801c4aa:	fb03 6711 	mls	r7, r3, r1, r6
 801c4ae:	5dc7      	ldrb	r7, [r0, r7]
 801c4b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c4b4:	4637      	mov	r7, r6
 801c4b6:	42bb      	cmp	r3, r7
 801c4b8:	460e      	mov	r6, r1
 801c4ba:	d9f4      	bls.n	801c4a6 <_printf_i+0x11a>
 801c4bc:	2b08      	cmp	r3, #8
 801c4be:	d10b      	bne.n	801c4d8 <_printf_i+0x14c>
 801c4c0:	6823      	ldr	r3, [r4, #0]
 801c4c2:	07de      	lsls	r6, r3, #31
 801c4c4:	d508      	bpl.n	801c4d8 <_printf_i+0x14c>
 801c4c6:	6923      	ldr	r3, [r4, #16]
 801c4c8:	6861      	ldr	r1, [r4, #4]
 801c4ca:	4299      	cmp	r1, r3
 801c4cc:	bfde      	ittt	le
 801c4ce:	2330      	movle	r3, #48	; 0x30
 801c4d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c4d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c4d8:	1b52      	subs	r2, r2, r5
 801c4da:	6122      	str	r2, [r4, #16]
 801c4dc:	f8cd a000 	str.w	sl, [sp]
 801c4e0:	464b      	mov	r3, r9
 801c4e2:	aa03      	add	r2, sp, #12
 801c4e4:	4621      	mov	r1, r4
 801c4e6:	4640      	mov	r0, r8
 801c4e8:	f7ff fee2 	bl	801c2b0 <_printf_common>
 801c4ec:	3001      	adds	r0, #1
 801c4ee:	d14c      	bne.n	801c58a <_printf_i+0x1fe>
 801c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 801c4f4:	b004      	add	sp, #16
 801c4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4fa:	4835      	ldr	r0, [pc, #212]	; (801c5d0 <_printf_i+0x244>)
 801c4fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c500:	6829      	ldr	r1, [r5, #0]
 801c502:	6823      	ldr	r3, [r4, #0]
 801c504:	f851 6b04 	ldr.w	r6, [r1], #4
 801c508:	6029      	str	r1, [r5, #0]
 801c50a:	061d      	lsls	r5, r3, #24
 801c50c:	d514      	bpl.n	801c538 <_printf_i+0x1ac>
 801c50e:	07df      	lsls	r7, r3, #31
 801c510:	bf44      	itt	mi
 801c512:	f043 0320 	orrmi.w	r3, r3, #32
 801c516:	6023      	strmi	r3, [r4, #0]
 801c518:	b91e      	cbnz	r6, 801c522 <_printf_i+0x196>
 801c51a:	6823      	ldr	r3, [r4, #0]
 801c51c:	f023 0320 	bic.w	r3, r3, #32
 801c520:	6023      	str	r3, [r4, #0]
 801c522:	2310      	movs	r3, #16
 801c524:	e7b0      	b.n	801c488 <_printf_i+0xfc>
 801c526:	6823      	ldr	r3, [r4, #0]
 801c528:	f043 0320 	orr.w	r3, r3, #32
 801c52c:	6023      	str	r3, [r4, #0]
 801c52e:	2378      	movs	r3, #120	; 0x78
 801c530:	4828      	ldr	r0, [pc, #160]	; (801c5d4 <_printf_i+0x248>)
 801c532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c536:	e7e3      	b.n	801c500 <_printf_i+0x174>
 801c538:	0659      	lsls	r1, r3, #25
 801c53a:	bf48      	it	mi
 801c53c:	b2b6      	uxthmi	r6, r6
 801c53e:	e7e6      	b.n	801c50e <_printf_i+0x182>
 801c540:	4615      	mov	r5, r2
 801c542:	e7bb      	b.n	801c4bc <_printf_i+0x130>
 801c544:	682b      	ldr	r3, [r5, #0]
 801c546:	6826      	ldr	r6, [r4, #0]
 801c548:	6961      	ldr	r1, [r4, #20]
 801c54a:	1d18      	adds	r0, r3, #4
 801c54c:	6028      	str	r0, [r5, #0]
 801c54e:	0635      	lsls	r5, r6, #24
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	d501      	bpl.n	801c558 <_printf_i+0x1cc>
 801c554:	6019      	str	r1, [r3, #0]
 801c556:	e002      	b.n	801c55e <_printf_i+0x1d2>
 801c558:	0670      	lsls	r0, r6, #25
 801c55a:	d5fb      	bpl.n	801c554 <_printf_i+0x1c8>
 801c55c:	8019      	strh	r1, [r3, #0]
 801c55e:	2300      	movs	r3, #0
 801c560:	6123      	str	r3, [r4, #16]
 801c562:	4615      	mov	r5, r2
 801c564:	e7ba      	b.n	801c4dc <_printf_i+0x150>
 801c566:	682b      	ldr	r3, [r5, #0]
 801c568:	1d1a      	adds	r2, r3, #4
 801c56a:	602a      	str	r2, [r5, #0]
 801c56c:	681d      	ldr	r5, [r3, #0]
 801c56e:	6862      	ldr	r2, [r4, #4]
 801c570:	2100      	movs	r1, #0
 801c572:	4628      	mov	r0, r5
 801c574:	f7e3 fe4c 	bl	8000210 <memchr>
 801c578:	b108      	cbz	r0, 801c57e <_printf_i+0x1f2>
 801c57a:	1b40      	subs	r0, r0, r5
 801c57c:	6060      	str	r0, [r4, #4]
 801c57e:	6863      	ldr	r3, [r4, #4]
 801c580:	6123      	str	r3, [r4, #16]
 801c582:	2300      	movs	r3, #0
 801c584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c588:	e7a8      	b.n	801c4dc <_printf_i+0x150>
 801c58a:	6923      	ldr	r3, [r4, #16]
 801c58c:	462a      	mov	r2, r5
 801c58e:	4649      	mov	r1, r9
 801c590:	4640      	mov	r0, r8
 801c592:	47d0      	blx	sl
 801c594:	3001      	adds	r0, #1
 801c596:	d0ab      	beq.n	801c4f0 <_printf_i+0x164>
 801c598:	6823      	ldr	r3, [r4, #0]
 801c59a:	079b      	lsls	r3, r3, #30
 801c59c:	d413      	bmi.n	801c5c6 <_printf_i+0x23a>
 801c59e:	68e0      	ldr	r0, [r4, #12]
 801c5a0:	9b03      	ldr	r3, [sp, #12]
 801c5a2:	4298      	cmp	r0, r3
 801c5a4:	bfb8      	it	lt
 801c5a6:	4618      	movlt	r0, r3
 801c5a8:	e7a4      	b.n	801c4f4 <_printf_i+0x168>
 801c5aa:	2301      	movs	r3, #1
 801c5ac:	4632      	mov	r2, r6
 801c5ae:	4649      	mov	r1, r9
 801c5b0:	4640      	mov	r0, r8
 801c5b2:	47d0      	blx	sl
 801c5b4:	3001      	adds	r0, #1
 801c5b6:	d09b      	beq.n	801c4f0 <_printf_i+0x164>
 801c5b8:	3501      	adds	r5, #1
 801c5ba:	68e3      	ldr	r3, [r4, #12]
 801c5bc:	9903      	ldr	r1, [sp, #12]
 801c5be:	1a5b      	subs	r3, r3, r1
 801c5c0:	42ab      	cmp	r3, r5
 801c5c2:	dcf2      	bgt.n	801c5aa <_printf_i+0x21e>
 801c5c4:	e7eb      	b.n	801c59e <_printf_i+0x212>
 801c5c6:	2500      	movs	r5, #0
 801c5c8:	f104 0619 	add.w	r6, r4, #25
 801c5cc:	e7f5      	b.n	801c5ba <_printf_i+0x22e>
 801c5ce:	bf00      	nop
 801c5d0:	0802b845 	.word	0x0802b845
 801c5d4:	0802b856 	.word	0x0802b856

0801c5d8 <__sread>:
 801c5d8:	b510      	push	{r4, lr}
 801c5da:	460c      	mov	r4, r1
 801c5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5e0:	f000 f8b6 	bl	801c750 <_read_r>
 801c5e4:	2800      	cmp	r0, #0
 801c5e6:	bfab      	itete	ge
 801c5e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c5ea:	89a3      	ldrhlt	r3, [r4, #12]
 801c5ec:	181b      	addge	r3, r3, r0
 801c5ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c5f2:	bfac      	ite	ge
 801c5f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801c5f6:	81a3      	strhlt	r3, [r4, #12]
 801c5f8:	bd10      	pop	{r4, pc}

0801c5fa <__swrite>:
 801c5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5fe:	461f      	mov	r7, r3
 801c600:	898b      	ldrh	r3, [r1, #12]
 801c602:	05db      	lsls	r3, r3, #23
 801c604:	4605      	mov	r5, r0
 801c606:	460c      	mov	r4, r1
 801c608:	4616      	mov	r6, r2
 801c60a:	d505      	bpl.n	801c618 <__swrite+0x1e>
 801c60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c610:	2302      	movs	r3, #2
 801c612:	2200      	movs	r2, #0
 801c614:	f000 f868 	bl	801c6e8 <_lseek_r>
 801c618:	89a3      	ldrh	r3, [r4, #12]
 801c61a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c61e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c622:	81a3      	strh	r3, [r4, #12]
 801c624:	4632      	mov	r2, r6
 801c626:	463b      	mov	r3, r7
 801c628:	4628      	mov	r0, r5
 801c62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c62e:	f000 b817 	b.w	801c660 <_write_r>

0801c632 <__sseek>:
 801c632:	b510      	push	{r4, lr}
 801c634:	460c      	mov	r4, r1
 801c636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c63a:	f000 f855 	bl	801c6e8 <_lseek_r>
 801c63e:	1c43      	adds	r3, r0, #1
 801c640:	89a3      	ldrh	r3, [r4, #12]
 801c642:	bf15      	itete	ne
 801c644:	6560      	strne	r0, [r4, #84]	; 0x54
 801c646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c64a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c64e:	81a3      	strheq	r3, [r4, #12]
 801c650:	bf18      	it	ne
 801c652:	81a3      	strhne	r3, [r4, #12]
 801c654:	bd10      	pop	{r4, pc}

0801c656 <__sclose>:
 801c656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c65a:	f000 b813 	b.w	801c684 <_close_r>
	...

0801c660 <_write_r>:
 801c660:	b538      	push	{r3, r4, r5, lr}
 801c662:	4d07      	ldr	r5, [pc, #28]	; (801c680 <_write_r+0x20>)
 801c664:	4604      	mov	r4, r0
 801c666:	4608      	mov	r0, r1
 801c668:	4611      	mov	r1, r2
 801c66a:	2200      	movs	r2, #0
 801c66c:	602a      	str	r2, [r5, #0]
 801c66e:	461a      	mov	r2, r3
 801c670:	f001 fe36 	bl	801e2e0 <_write>
 801c674:	1c43      	adds	r3, r0, #1
 801c676:	d102      	bne.n	801c67e <_write_r+0x1e>
 801c678:	682b      	ldr	r3, [r5, #0]
 801c67a:	b103      	cbz	r3, 801c67e <_write_r+0x1e>
 801c67c:	6023      	str	r3, [r4, #0]
 801c67e:	bd38      	pop	{r3, r4, r5, pc}
 801c680:	20004604 	.word	0x20004604

0801c684 <_close_r>:
 801c684:	b538      	push	{r3, r4, r5, lr}
 801c686:	4d06      	ldr	r5, [pc, #24]	; (801c6a0 <_close_r+0x1c>)
 801c688:	2300      	movs	r3, #0
 801c68a:	4604      	mov	r4, r0
 801c68c:	4608      	mov	r0, r1
 801c68e:	602b      	str	r3, [r5, #0]
 801c690:	f001 fdfe 	bl	801e290 <_close>
 801c694:	1c43      	adds	r3, r0, #1
 801c696:	d102      	bne.n	801c69e <_close_r+0x1a>
 801c698:	682b      	ldr	r3, [r5, #0]
 801c69a:	b103      	cbz	r3, 801c69e <_close_r+0x1a>
 801c69c:	6023      	str	r3, [r4, #0]
 801c69e:	bd38      	pop	{r3, r4, r5, pc}
 801c6a0:	20004604 	.word	0x20004604

0801c6a4 <_fstat_r>:
 801c6a4:	b538      	push	{r3, r4, r5, lr}
 801c6a6:	4d07      	ldr	r5, [pc, #28]	; (801c6c4 <_fstat_r+0x20>)
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	4604      	mov	r4, r0
 801c6ac:	4608      	mov	r0, r1
 801c6ae:	4611      	mov	r1, r2
 801c6b0:	602b      	str	r3, [r5, #0]
 801c6b2:	f001 fdf5 	bl	801e2a0 <_fstat>
 801c6b6:	1c43      	adds	r3, r0, #1
 801c6b8:	d102      	bne.n	801c6c0 <_fstat_r+0x1c>
 801c6ba:	682b      	ldr	r3, [r5, #0]
 801c6bc:	b103      	cbz	r3, 801c6c0 <_fstat_r+0x1c>
 801c6be:	6023      	str	r3, [r4, #0]
 801c6c0:	bd38      	pop	{r3, r4, r5, pc}
 801c6c2:	bf00      	nop
 801c6c4:	20004604 	.word	0x20004604

0801c6c8 <_isatty_r>:
 801c6c8:	b538      	push	{r3, r4, r5, lr}
 801c6ca:	4d06      	ldr	r5, [pc, #24]	; (801c6e4 <_isatty_r+0x1c>)
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	4604      	mov	r4, r0
 801c6d0:	4608      	mov	r0, r1
 801c6d2:	602b      	str	r3, [r5, #0]
 801c6d4:	f001 fdec 	bl	801e2b0 <_isatty>
 801c6d8:	1c43      	adds	r3, r0, #1
 801c6da:	d102      	bne.n	801c6e2 <_isatty_r+0x1a>
 801c6dc:	682b      	ldr	r3, [r5, #0]
 801c6de:	b103      	cbz	r3, 801c6e2 <_isatty_r+0x1a>
 801c6e0:	6023      	str	r3, [r4, #0]
 801c6e2:	bd38      	pop	{r3, r4, r5, pc}
 801c6e4:	20004604 	.word	0x20004604

0801c6e8 <_lseek_r>:
 801c6e8:	b538      	push	{r3, r4, r5, lr}
 801c6ea:	4d07      	ldr	r5, [pc, #28]	; (801c708 <_lseek_r+0x20>)
 801c6ec:	4604      	mov	r4, r0
 801c6ee:	4608      	mov	r0, r1
 801c6f0:	4611      	mov	r1, r2
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	602a      	str	r2, [r5, #0]
 801c6f6:	461a      	mov	r2, r3
 801c6f8:	f001 fde2 	bl	801e2c0 <_lseek>
 801c6fc:	1c43      	adds	r3, r0, #1
 801c6fe:	d102      	bne.n	801c706 <_lseek_r+0x1e>
 801c700:	682b      	ldr	r3, [r5, #0]
 801c702:	b103      	cbz	r3, 801c706 <_lseek_r+0x1e>
 801c704:	6023      	str	r3, [r4, #0]
 801c706:	bd38      	pop	{r3, r4, r5, pc}
 801c708:	20004604 	.word	0x20004604

0801c70c <memmove>:
 801c70c:	4288      	cmp	r0, r1
 801c70e:	b510      	push	{r4, lr}
 801c710:	eb01 0402 	add.w	r4, r1, r2
 801c714:	d902      	bls.n	801c71c <memmove+0x10>
 801c716:	4284      	cmp	r4, r0
 801c718:	4623      	mov	r3, r4
 801c71a:	d807      	bhi.n	801c72c <memmove+0x20>
 801c71c:	1e43      	subs	r3, r0, #1
 801c71e:	42a1      	cmp	r1, r4
 801c720:	d008      	beq.n	801c734 <memmove+0x28>
 801c722:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c726:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c72a:	e7f8      	b.n	801c71e <memmove+0x12>
 801c72c:	4402      	add	r2, r0
 801c72e:	4601      	mov	r1, r0
 801c730:	428a      	cmp	r2, r1
 801c732:	d100      	bne.n	801c736 <memmove+0x2a>
 801c734:	bd10      	pop	{r4, pc}
 801c736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c73a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c73e:	e7f7      	b.n	801c730 <memmove+0x24>

0801c740 <_malloc_usable_size_r>:
 801c740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c744:	1f18      	subs	r0, r3, #4
 801c746:	2b00      	cmp	r3, #0
 801c748:	bfbc      	itt	lt
 801c74a:	580b      	ldrlt	r3, [r1, r0]
 801c74c:	18c0      	addlt	r0, r0, r3
 801c74e:	4770      	bx	lr

0801c750 <_read_r>:
 801c750:	b538      	push	{r3, r4, r5, lr}
 801c752:	4d07      	ldr	r5, [pc, #28]	; (801c770 <_read_r+0x20>)
 801c754:	4604      	mov	r4, r0
 801c756:	4608      	mov	r0, r1
 801c758:	4611      	mov	r1, r2
 801c75a:	2200      	movs	r2, #0
 801c75c:	602a      	str	r2, [r5, #0]
 801c75e:	461a      	mov	r2, r3
 801c760:	f001 fdb6 	bl	801e2d0 <_read>
 801c764:	1c43      	adds	r3, r0, #1
 801c766:	d102      	bne.n	801c76e <_read_r+0x1e>
 801c768:	682b      	ldr	r3, [r5, #0]
 801c76a:	b103      	cbz	r3, 801c76e <_read_r+0x1e>
 801c76c:	6023      	str	r3, [r4, #0]
 801c76e:	bd38      	pop	{r3, r4, r5, pc}
 801c770:	20004604 	.word	0x20004604

0801c774 <tanhf>:
 801c774:	b510      	push	{r4, lr}
 801c776:	ee10 4a10 	vmov	r4, s0
 801c77a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c77e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c782:	ed2d 8b02 	vpush	{d8}
 801c786:	eeb0 7a40 	vmov.f32	s14, s0
 801c78a:	db0c      	blt.n	801c7a6 <tanhf+0x32>
 801c78c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c790:	eec0 7a07 	vdiv.f32	s15, s0, s14
 801c794:	2c00      	cmp	r4, #0
 801c796:	bfac      	ite	ge
 801c798:	ee37 0a80 	vaddge.f32	s0, s15, s0
 801c79c:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 801c7a0:	ecbd 8b02 	vpop	{d8}
 801c7a4:	bd10      	pop	{r4, pc}
 801c7a6:	4a1b      	ldr	r2, [pc, #108]	; (801c814 <tanhf+0xa0>)
 801c7a8:	4293      	cmp	r3, r2
 801c7aa:	dc30      	bgt.n	801c80e <tanhf+0x9a>
 801c7ac:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 801c7b0:	da06      	bge.n	801c7c0 <tanhf+0x4c>
 801c7b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c7b6:	ee70 7a27 	vadd.f32	s15, s0, s15
 801c7ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c7be:	e7ef      	b.n	801c7a0 <tanhf+0x2c>
 801c7c0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801c7c4:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 801c7c8:	db12      	blt.n	801c7f0 <tanhf+0x7c>
 801c7ca:	f001 fcdb 	bl	801e184 <fabsf>
 801c7ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c7d2:	f001 fbbb 	bl	801df4c <expm1f>
 801c7d6:	ee30 0a08 	vadd.f32	s0, s0, s16
 801c7da:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801c7de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c7e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c7e6:	2c00      	cmp	r4, #0
 801c7e8:	bfb8      	it	lt
 801c7ea:	eeb1 0a40 	vneglt.f32	s0, s0
 801c7ee:	e7d7      	b.n	801c7a0 <tanhf+0x2c>
 801c7f0:	f001 fcc8 	bl	801e184 <fabsf>
 801c7f4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 801c7f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c7fc:	f001 fba6 	bl	801df4c <expm1f>
 801c800:	ee70 7a08 	vadd.f32	s15, s0, s16
 801c804:	eeb1 7a40 	vneg.f32	s14, s0
 801c808:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801c80c:	e7eb      	b.n	801c7e6 <tanhf+0x72>
 801c80e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c812:	e7e8      	b.n	801c7e6 <tanhf+0x72>
 801c814:	41afffff 	.word	0x41afffff

0801c818 <pow>:
 801c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c81a:	ed2d 8b02 	vpush	{d8}
 801c81e:	eeb0 8a40 	vmov.f32	s16, s0
 801c822:	eef0 8a60 	vmov.f32	s17, s1
 801c826:	ec55 4b11 	vmov	r4, r5, d1
 801c82a:	f000 f921 	bl	801ca70 <__ieee754_pow>
 801c82e:	4622      	mov	r2, r4
 801c830:	462b      	mov	r3, r5
 801c832:	4620      	mov	r0, r4
 801c834:	4629      	mov	r1, r5
 801c836:	ec57 6b10 	vmov	r6, r7, d0
 801c83a:	f7e4 f98f 	bl	8000b5c <__aeabi_dcmpun>
 801c83e:	2800      	cmp	r0, #0
 801c840:	d13b      	bne.n	801c8ba <pow+0xa2>
 801c842:	ec51 0b18 	vmov	r0, r1, d8
 801c846:	2200      	movs	r2, #0
 801c848:	2300      	movs	r3, #0
 801c84a:	f7e4 f955 	bl	8000af8 <__aeabi_dcmpeq>
 801c84e:	b1b8      	cbz	r0, 801c880 <pow+0x68>
 801c850:	2200      	movs	r2, #0
 801c852:	2300      	movs	r3, #0
 801c854:	4620      	mov	r0, r4
 801c856:	4629      	mov	r1, r5
 801c858:	f7e4 f94e 	bl	8000af8 <__aeabi_dcmpeq>
 801c85c:	2800      	cmp	r0, #0
 801c85e:	d146      	bne.n	801c8ee <pow+0xd6>
 801c860:	ec45 4b10 	vmov	d0, r4, r5
 801c864:	f001 fadf 	bl	801de26 <finite>
 801c868:	b338      	cbz	r0, 801c8ba <pow+0xa2>
 801c86a:	2200      	movs	r2, #0
 801c86c:	2300      	movs	r3, #0
 801c86e:	4620      	mov	r0, r4
 801c870:	4629      	mov	r1, r5
 801c872:	f7e4 f94b 	bl	8000b0c <__aeabi_dcmplt>
 801c876:	b300      	cbz	r0, 801c8ba <pow+0xa2>
 801c878:	f7fe fd40 	bl	801b2fc <__errno>
 801c87c:	2322      	movs	r3, #34	; 0x22
 801c87e:	e01b      	b.n	801c8b8 <pow+0xa0>
 801c880:	ec47 6b10 	vmov	d0, r6, r7
 801c884:	f001 facf 	bl	801de26 <finite>
 801c888:	b9e0      	cbnz	r0, 801c8c4 <pow+0xac>
 801c88a:	eeb0 0a48 	vmov.f32	s0, s16
 801c88e:	eef0 0a68 	vmov.f32	s1, s17
 801c892:	f001 fac8 	bl	801de26 <finite>
 801c896:	b1a8      	cbz	r0, 801c8c4 <pow+0xac>
 801c898:	ec45 4b10 	vmov	d0, r4, r5
 801c89c:	f001 fac3 	bl	801de26 <finite>
 801c8a0:	b180      	cbz	r0, 801c8c4 <pow+0xac>
 801c8a2:	4632      	mov	r2, r6
 801c8a4:	463b      	mov	r3, r7
 801c8a6:	4630      	mov	r0, r6
 801c8a8:	4639      	mov	r1, r7
 801c8aa:	f7e4 f957 	bl	8000b5c <__aeabi_dcmpun>
 801c8ae:	2800      	cmp	r0, #0
 801c8b0:	d0e2      	beq.n	801c878 <pow+0x60>
 801c8b2:	f7fe fd23 	bl	801b2fc <__errno>
 801c8b6:	2321      	movs	r3, #33	; 0x21
 801c8b8:	6003      	str	r3, [r0, #0]
 801c8ba:	ecbd 8b02 	vpop	{d8}
 801c8be:	ec47 6b10 	vmov	d0, r6, r7
 801c8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c8c4:	2200      	movs	r2, #0
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	4630      	mov	r0, r6
 801c8ca:	4639      	mov	r1, r7
 801c8cc:	f7e4 f914 	bl	8000af8 <__aeabi_dcmpeq>
 801c8d0:	2800      	cmp	r0, #0
 801c8d2:	d0f2      	beq.n	801c8ba <pow+0xa2>
 801c8d4:	eeb0 0a48 	vmov.f32	s0, s16
 801c8d8:	eef0 0a68 	vmov.f32	s1, s17
 801c8dc:	f001 faa3 	bl	801de26 <finite>
 801c8e0:	2800      	cmp	r0, #0
 801c8e2:	d0ea      	beq.n	801c8ba <pow+0xa2>
 801c8e4:	ec45 4b10 	vmov	d0, r4, r5
 801c8e8:	f001 fa9d 	bl	801de26 <finite>
 801c8ec:	e7c3      	b.n	801c876 <pow+0x5e>
 801c8ee:	4f01      	ldr	r7, [pc, #4]	; (801c8f4 <pow+0xdc>)
 801c8f0:	2600      	movs	r6, #0
 801c8f2:	e7e2      	b.n	801c8ba <pow+0xa2>
 801c8f4:	3ff00000 	.word	0x3ff00000

0801c8f8 <sqrt>:
 801c8f8:	b538      	push	{r3, r4, r5, lr}
 801c8fa:	ed2d 8b02 	vpush	{d8}
 801c8fe:	ec55 4b10 	vmov	r4, r5, d0
 801c902:	f000 fde3 	bl	801d4cc <__ieee754_sqrt>
 801c906:	4622      	mov	r2, r4
 801c908:	462b      	mov	r3, r5
 801c90a:	4620      	mov	r0, r4
 801c90c:	4629      	mov	r1, r5
 801c90e:	eeb0 8a40 	vmov.f32	s16, s0
 801c912:	eef0 8a60 	vmov.f32	s17, s1
 801c916:	f7e4 f921 	bl	8000b5c <__aeabi_dcmpun>
 801c91a:	b990      	cbnz	r0, 801c942 <sqrt+0x4a>
 801c91c:	2200      	movs	r2, #0
 801c91e:	2300      	movs	r3, #0
 801c920:	4620      	mov	r0, r4
 801c922:	4629      	mov	r1, r5
 801c924:	f7e4 f8f2 	bl	8000b0c <__aeabi_dcmplt>
 801c928:	b158      	cbz	r0, 801c942 <sqrt+0x4a>
 801c92a:	f7fe fce7 	bl	801b2fc <__errno>
 801c92e:	2321      	movs	r3, #33	; 0x21
 801c930:	6003      	str	r3, [r0, #0]
 801c932:	2200      	movs	r2, #0
 801c934:	2300      	movs	r3, #0
 801c936:	4610      	mov	r0, r2
 801c938:	4619      	mov	r1, r3
 801c93a:	f7e3 ff9f 	bl	800087c <__aeabi_ddiv>
 801c93e:	ec41 0b18 	vmov	d8, r0, r1
 801c942:	eeb0 0a48 	vmov.f32	s0, s16
 801c946:	eef0 0a68 	vmov.f32	s1, s17
 801c94a:	ecbd 8b02 	vpop	{d8}
 801c94e:	bd38      	pop	{r3, r4, r5, pc}

0801c950 <expf>:
 801c950:	b508      	push	{r3, lr}
 801c952:	ed2d 8b02 	vpush	{d8}
 801c956:	eef0 8a40 	vmov.f32	s17, s0
 801c95a:	f000 fe69 	bl	801d630 <__ieee754_expf>
 801c95e:	eeb0 8a40 	vmov.f32	s16, s0
 801c962:	eeb0 0a68 	vmov.f32	s0, s17
 801c966:	f001 fc14 	bl	801e192 <finitef>
 801c96a:	b160      	cbz	r0, 801c986 <expf+0x36>
 801c96c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801c9ac <expf+0x5c>
 801c970:	eef4 8ae7 	vcmpe.f32	s17, s15
 801c974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c978:	dd0a      	ble.n	801c990 <expf+0x40>
 801c97a:	f7fe fcbf 	bl	801b2fc <__errno>
 801c97e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801c9b0 <expf+0x60>
 801c982:	2322      	movs	r3, #34	; 0x22
 801c984:	6003      	str	r3, [r0, #0]
 801c986:	eeb0 0a48 	vmov.f32	s0, s16
 801c98a:	ecbd 8b02 	vpop	{d8}
 801c98e:	bd08      	pop	{r3, pc}
 801c990:	eddf 7a08 	vldr	s15, [pc, #32]	; 801c9b4 <expf+0x64>
 801c994:	eef4 8ae7 	vcmpe.f32	s17, s15
 801c998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c99c:	d5f3      	bpl.n	801c986 <expf+0x36>
 801c99e:	f7fe fcad 	bl	801b2fc <__errno>
 801c9a2:	2322      	movs	r3, #34	; 0x22
 801c9a4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801c9b8 <expf+0x68>
 801c9a8:	6003      	str	r3, [r0, #0]
 801c9aa:	e7ec      	b.n	801c986 <expf+0x36>
 801c9ac:	42b17180 	.word	0x42b17180
 801c9b0:	7f800000 	.word	0x7f800000
 801c9b4:	c2cff1b5 	.word	0xc2cff1b5
 801c9b8:	00000000 	.word	0x00000000

0801c9bc <powf>:
 801c9bc:	b508      	push	{r3, lr}
 801c9be:	ed2d 8b04 	vpush	{d8-d9}
 801c9c2:	eeb0 8a60 	vmov.f32	s16, s1
 801c9c6:	eeb0 9a40 	vmov.f32	s18, s0
 801c9ca:	f000 feff 	bl	801d7cc <__ieee754_powf>
 801c9ce:	eeb4 8a48 	vcmp.f32	s16, s16
 801c9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9d6:	eef0 8a40 	vmov.f32	s17, s0
 801c9da:	d63e      	bvs.n	801ca5a <powf+0x9e>
 801c9dc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801c9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9e4:	d112      	bne.n	801ca0c <powf+0x50>
 801c9e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9ee:	d039      	beq.n	801ca64 <powf+0xa8>
 801c9f0:	eeb0 0a48 	vmov.f32	s0, s16
 801c9f4:	f001 fbcd 	bl	801e192 <finitef>
 801c9f8:	b378      	cbz	r0, 801ca5a <powf+0x9e>
 801c9fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca02:	d52a      	bpl.n	801ca5a <powf+0x9e>
 801ca04:	f7fe fc7a 	bl	801b2fc <__errno>
 801ca08:	2322      	movs	r3, #34	; 0x22
 801ca0a:	e014      	b.n	801ca36 <powf+0x7a>
 801ca0c:	f001 fbc1 	bl	801e192 <finitef>
 801ca10:	b998      	cbnz	r0, 801ca3a <powf+0x7e>
 801ca12:	eeb0 0a49 	vmov.f32	s0, s18
 801ca16:	f001 fbbc 	bl	801e192 <finitef>
 801ca1a:	b170      	cbz	r0, 801ca3a <powf+0x7e>
 801ca1c:	eeb0 0a48 	vmov.f32	s0, s16
 801ca20:	f001 fbb7 	bl	801e192 <finitef>
 801ca24:	b148      	cbz	r0, 801ca3a <powf+0x7e>
 801ca26:	eef4 8a68 	vcmp.f32	s17, s17
 801ca2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca2e:	d7e9      	bvc.n	801ca04 <powf+0x48>
 801ca30:	f7fe fc64 	bl	801b2fc <__errno>
 801ca34:	2321      	movs	r3, #33	; 0x21
 801ca36:	6003      	str	r3, [r0, #0]
 801ca38:	e00f      	b.n	801ca5a <powf+0x9e>
 801ca3a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801ca3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca42:	d10a      	bne.n	801ca5a <powf+0x9e>
 801ca44:	eeb0 0a49 	vmov.f32	s0, s18
 801ca48:	f001 fba3 	bl	801e192 <finitef>
 801ca4c:	b128      	cbz	r0, 801ca5a <powf+0x9e>
 801ca4e:	eeb0 0a48 	vmov.f32	s0, s16
 801ca52:	f001 fb9e 	bl	801e192 <finitef>
 801ca56:	2800      	cmp	r0, #0
 801ca58:	d1d4      	bne.n	801ca04 <powf+0x48>
 801ca5a:	eeb0 0a68 	vmov.f32	s0, s17
 801ca5e:	ecbd 8b04 	vpop	{d8-d9}
 801ca62:	bd08      	pop	{r3, pc}
 801ca64:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801ca68:	e7f7      	b.n	801ca5a <powf+0x9e>
 801ca6a:	0000      	movs	r0, r0
 801ca6c:	0000      	movs	r0, r0
	...

0801ca70 <__ieee754_pow>:
 801ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca74:	ed2d 8b06 	vpush	{d8-d10}
 801ca78:	b089      	sub	sp, #36	; 0x24
 801ca7a:	ed8d 1b00 	vstr	d1, [sp]
 801ca7e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801ca82:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801ca86:	ea58 0102 	orrs.w	r1, r8, r2
 801ca8a:	ec57 6b10 	vmov	r6, r7, d0
 801ca8e:	d115      	bne.n	801cabc <__ieee754_pow+0x4c>
 801ca90:	19b3      	adds	r3, r6, r6
 801ca92:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801ca96:	4152      	adcs	r2, r2
 801ca98:	4299      	cmp	r1, r3
 801ca9a:	4b89      	ldr	r3, [pc, #548]	; (801ccc0 <__ieee754_pow+0x250>)
 801ca9c:	4193      	sbcs	r3, r2
 801ca9e:	f080 84d2 	bcs.w	801d446 <__ieee754_pow+0x9d6>
 801caa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801caa6:	4630      	mov	r0, r6
 801caa8:	4639      	mov	r1, r7
 801caaa:	f7e3 fc07 	bl	80002bc <__adddf3>
 801caae:	ec41 0b10 	vmov	d0, r0, r1
 801cab2:	b009      	add	sp, #36	; 0x24
 801cab4:	ecbd 8b06 	vpop	{d8-d10}
 801cab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cabc:	4b81      	ldr	r3, [pc, #516]	; (801ccc4 <__ieee754_pow+0x254>)
 801cabe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801cac2:	429c      	cmp	r4, r3
 801cac4:	ee10 aa10 	vmov	sl, s0
 801cac8:	463d      	mov	r5, r7
 801caca:	dc06      	bgt.n	801cada <__ieee754_pow+0x6a>
 801cacc:	d101      	bne.n	801cad2 <__ieee754_pow+0x62>
 801cace:	2e00      	cmp	r6, #0
 801cad0:	d1e7      	bne.n	801caa2 <__ieee754_pow+0x32>
 801cad2:	4598      	cmp	r8, r3
 801cad4:	dc01      	bgt.n	801cada <__ieee754_pow+0x6a>
 801cad6:	d10f      	bne.n	801caf8 <__ieee754_pow+0x88>
 801cad8:	b172      	cbz	r2, 801caf8 <__ieee754_pow+0x88>
 801cada:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801cade:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801cae2:	ea55 050a 	orrs.w	r5, r5, sl
 801cae6:	d1dc      	bne.n	801caa2 <__ieee754_pow+0x32>
 801cae8:	e9dd 3200 	ldrd	r3, r2, [sp]
 801caec:	18db      	adds	r3, r3, r3
 801caee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801caf2:	4152      	adcs	r2, r2
 801caf4:	429d      	cmp	r5, r3
 801caf6:	e7d0      	b.n	801ca9a <__ieee754_pow+0x2a>
 801caf8:	2d00      	cmp	r5, #0
 801cafa:	da3b      	bge.n	801cb74 <__ieee754_pow+0x104>
 801cafc:	4b72      	ldr	r3, [pc, #456]	; (801ccc8 <__ieee754_pow+0x258>)
 801cafe:	4598      	cmp	r8, r3
 801cb00:	dc51      	bgt.n	801cba6 <__ieee754_pow+0x136>
 801cb02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801cb06:	4598      	cmp	r8, r3
 801cb08:	f340 84ac 	ble.w	801d464 <__ieee754_pow+0x9f4>
 801cb0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801cb10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801cb14:	2b14      	cmp	r3, #20
 801cb16:	dd0f      	ble.n	801cb38 <__ieee754_pow+0xc8>
 801cb18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801cb1c:	fa22 f103 	lsr.w	r1, r2, r3
 801cb20:	fa01 f303 	lsl.w	r3, r1, r3
 801cb24:	4293      	cmp	r3, r2
 801cb26:	f040 849d 	bne.w	801d464 <__ieee754_pow+0x9f4>
 801cb2a:	f001 0101 	and.w	r1, r1, #1
 801cb2e:	f1c1 0302 	rsb	r3, r1, #2
 801cb32:	9304      	str	r3, [sp, #16]
 801cb34:	b182      	cbz	r2, 801cb58 <__ieee754_pow+0xe8>
 801cb36:	e05f      	b.n	801cbf8 <__ieee754_pow+0x188>
 801cb38:	2a00      	cmp	r2, #0
 801cb3a:	d15b      	bne.n	801cbf4 <__ieee754_pow+0x184>
 801cb3c:	f1c3 0314 	rsb	r3, r3, #20
 801cb40:	fa48 f103 	asr.w	r1, r8, r3
 801cb44:	fa01 f303 	lsl.w	r3, r1, r3
 801cb48:	4543      	cmp	r3, r8
 801cb4a:	f040 8488 	bne.w	801d45e <__ieee754_pow+0x9ee>
 801cb4e:	f001 0101 	and.w	r1, r1, #1
 801cb52:	f1c1 0302 	rsb	r3, r1, #2
 801cb56:	9304      	str	r3, [sp, #16]
 801cb58:	4b5c      	ldr	r3, [pc, #368]	; (801cccc <__ieee754_pow+0x25c>)
 801cb5a:	4598      	cmp	r8, r3
 801cb5c:	d132      	bne.n	801cbc4 <__ieee754_pow+0x154>
 801cb5e:	f1b9 0f00 	cmp.w	r9, #0
 801cb62:	f280 8478 	bge.w	801d456 <__ieee754_pow+0x9e6>
 801cb66:	4959      	ldr	r1, [pc, #356]	; (801cccc <__ieee754_pow+0x25c>)
 801cb68:	4632      	mov	r2, r6
 801cb6a:	463b      	mov	r3, r7
 801cb6c:	2000      	movs	r0, #0
 801cb6e:	f7e3 fe85 	bl	800087c <__aeabi_ddiv>
 801cb72:	e79c      	b.n	801caae <__ieee754_pow+0x3e>
 801cb74:	2300      	movs	r3, #0
 801cb76:	9304      	str	r3, [sp, #16]
 801cb78:	2a00      	cmp	r2, #0
 801cb7a:	d13d      	bne.n	801cbf8 <__ieee754_pow+0x188>
 801cb7c:	4b51      	ldr	r3, [pc, #324]	; (801ccc4 <__ieee754_pow+0x254>)
 801cb7e:	4598      	cmp	r8, r3
 801cb80:	d1ea      	bne.n	801cb58 <__ieee754_pow+0xe8>
 801cb82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801cb86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801cb8a:	ea53 030a 	orrs.w	r3, r3, sl
 801cb8e:	f000 845a 	beq.w	801d446 <__ieee754_pow+0x9d6>
 801cb92:	4b4f      	ldr	r3, [pc, #316]	; (801ccd0 <__ieee754_pow+0x260>)
 801cb94:	429c      	cmp	r4, r3
 801cb96:	dd08      	ble.n	801cbaa <__ieee754_pow+0x13a>
 801cb98:	f1b9 0f00 	cmp.w	r9, #0
 801cb9c:	f2c0 8457 	blt.w	801d44e <__ieee754_pow+0x9de>
 801cba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cba4:	e783      	b.n	801caae <__ieee754_pow+0x3e>
 801cba6:	2302      	movs	r3, #2
 801cba8:	e7e5      	b.n	801cb76 <__ieee754_pow+0x106>
 801cbaa:	f1b9 0f00 	cmp.w	r9, #0
 801cbae:	f04f 0000 	mov.w	r0, #0
 801cbb2:	f04f 0100 	mov.w	r1, #0
 801cbb6:	f6bf af7a 	bge.w	801caae <__ieee754_pow+0x3e>
 801cbba:	e9dd 0300 	ldrd	r0, r3, [sp]
 801cbbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801cbc2:	e774      	b.n	801caae <__ieee754_pow+0x3e>
 801cbc4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801cbc8:	d106      	bne.n	801cbd8 <__ieee754_pow+0x168>
 801cbca:	4632      	mov	r2, r6
 801cbcc:	463b      	mov	r3, r7
 801cbce:	4630      	mov	r0, r6
 801cbd0:	4639      	mov	r1, r7
 801cbd2:	f7e3 fd29 	bl	8000628 <__aeabi_dmul>
 801cbd6:	e76a      	b.n	801caae <__ieee754_pow+0x3e>
 801cbd8:	4b3e      	ldr	r3, [pc, #248]	; (801ccd4 <__ieee754_pow+0x264>)
 801cbda:	4599      	cmp	r9, r3
 801cbdc:	d10c      	bne.n	801cbf8 <__ieee754_pow+0x188>
 801cbde:	2d00      	cmp	r5, #0
 801cbe0:	db0a      	blt.n	801cbf8 <__ieee754_pow+0x188>
 801cbe2:	ec47 6b10 	vmov	d0, r6, r7
 801cbe6:	b009      	add	sp, #36	; 0x24
 801cbe8:	ecbd 8b06 	vpop	{d8-d10}
 801cbec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbf0:	f000 bc6c 	b.w	801d4cc <__ieee754_sqrt>
 801cbf4:	2300      	movs	r3, #0
 801cbf6:	9304      	str	r3, [sp, #16]
 801cbf8:	ec47 6b10 	vmov	d0, r6, r7
 801cbfc:	f001 f90a 	bl	801de14 <fabs>
 801cc00:	ec51 0b10 	vmov	r0, r1, d0
 801cc04:	f1ba 0f00 	cmp.w	sl, #0
 801cc08:	d129      	bne.n	801cc5e <__ieee754_pow+0x1ee>
 801cc0a:	b124      	cbz	r4, 801cc16 <__ieee754_pow+0x1a6>
 801cc0c:	4b2f      	ldr	r3, [pc, #188]	; (801cccc <__ieee754_pow+0x25c>)
 801cc0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801cc12:	429a      	cmp	r2, r3
 801cc14:	d123      	bne.n	801cc5e <__ieee754_pow+0x1ee>
 801cc16:	f1b9 0f00 	cmp.w	r9, #0
 801cc1a:	da05      	bge.n	801cc28 <__ieee754_pow+0x1b8>
 801cc1c:	4602      	mov	r2, r0
 801cc1e:	460b      	mov	r3, r1
 801cc20:	2000      	movs	r0, #0
 801cc22:	492a      	ldr	r1, [pc, #168]	; (801cccc <__ieee754_pow+0x25c>)
 801cc24:	f7e3 fe2a 	bl	800087c <__aeabi_ddiv>
 801cc28:	2d00      	cmp	r5, #0
 801cc2a:	f6bf af40 	bge.w	801caae <__ieee754_pow+0x3e>
 801cc2e:	9b04      	ldr	r3, [sp, #16]
 801cc30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801cc34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801cc38:	4323      	orrs	r3, r4
 801cc3a:	d108      	bne.n	801cc4e <__ieee754_pow+0x1de>
 801cc3c:	4602      	mov	r2, r0
 801cc3e:	460b      	mov	r3, r1
 801cc40:	4610      	mov	r0, r2
 801cc42:	4619      	mov	r1, r3
 801cc44:	f7e3 fb38 	bl	80002b8 <__aeabi_dsub>
 801cc48:	4602      	mov	r2, r0
 801cc4a:	460b      	mov	r3, r1
 801cc4c:	e78f      	b.n	801cb6e <__ieee754_pow+0xfe>
 801cc4e:	9b04      	ldr	r3, [sp, #16]
 801cc50:	2b01      	cmp	r3, #1
 801cc52:	f47f af2c 	bne.w	801caae <__ieee754_pow+0x3e>
 801cc56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cc5a:	4619      	mov	r1, r3
 801cc5c:	e727      	b.n	801caae <__ieee754_pow+0x3e>
 801cc5e:	0feb      	lsrs	r3, r5, #31
 801cc60:	3b01      	subs	r3, #1
 801cc62:	9306      	str	r3, [sp, #24]
 801cc64:	9a06      	ldr	r2, [sp, #24]
 801cc66:	9b04      	ldr	r3, [sp, #16]
 801cc68:	4313      	orrs	r3, r2
 801cc6a:	d102      	bne.n	801cc72 <__ieee754_pow+0x202>
 801cc6c:	4632      	mov	r2, r6
 801cc6e:	463b      	mov	r3, r7
 801cc70:	e7e6      	b.n	801cc40 <__ieee754_pow+0x1d0>
 801cc72:	4b19      	ldr	r3, [pc, #100]	; (801ccd8 <__ieee754_pow+0x268>)
 801cc74:	4598      	cmp	r8, r3
 801cc76:	f340 80fb 	ble.w	801ce70 <__ieee754_pow+0x400>
 801cc7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801cc7e:	4598      	cmp	r8, r3
 801cc80:	4b13      	ldr	r3, [pc, #76]	; (801ccd0 <__ieee754_pow+0x260>)
 801cc82:	dd0c      	ble.n	801cc9e <__ieee754_pow+0x22e>
 801cc84:	429c      	cmp	r4, r3
 801cc86:	dc0f      	bgt.n	801cca8 <__ieee754_pow+0x238>
 801cc88:	f1b9 0f00 	cmp.w	r9, #0
 801cc8c:	da0f      	bge.n	801ccae <__ieee754_pow+0x23e>
 801cc8e:	2000      	movs	r0, #0
 801cc90:	b009      	add	sp, #36	; 0x24
 801cc92:	ecbd 8b06 	vpop	{d8-d10}
 801cc96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc9a:	f001 b88f 	b.w	801ddbc <__math_oflow>
 801cc9e:	429c      	cmp	r4, r3
 801cca0:	dbf2      	blt.n	801cc88 <__ieee754_pow+0x218>
 801cca2:	4b0a      	ldr	r3, [pc, #40]	; (801cccc <__ieee754_pow+0x25c>)
 801cca4:	429c      	cmp	r4, r3
 801cca6:	dd19      	ble.n	801ccdc <__ieee754_pow+0x26c>
 801cca8:	f1b9 0f00 	cmp.w	r9, #0
 801ccac:	dcef      	bgt.n	801cc8e <__ieee754_pow+0x21e>
 801ccae:	2000      	movs	r0, #0
 801ccb0:	b009      	add	sp, #36	; 0x24
 801ccb2:	ecbd 8b06 	vpop	{d8-d10}
 801ccb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccba:	f001 b876 	b.w	801ddaa <__math_uflow>
 801ccbe:	bf00      	nop
 801ccc0:	fff00000 	.word	0xfff00000
 801ccc4:	7ff00000 	.word	0x7ff00000
 801ccc8:	433fffff 	.word	0x433fffff
 801cccc:	3ff00000 	.word	0x3ff00000
 801ccd0:	3fefffff 	.word	0x3fefffff
 801ccd4:	3fe00000 	.word	0x3fe00000
 801ccd8:	41e00000 	.word	0x41e00000
 801ccdc:	4b60      	ldr	r3, [pc, #384]	; (801ce60 <__ieee754_pow+0x3f0>)
 801ccde:	2200      	movs	r2, #0
 801cce0:	f7e3 faea 	bl	80002b8 <__aeabi_dsub>
 801cce4:	a354      	add	r3, pc, #336	; (adr r3, 801ce38 <__ieee754_pow+0x3c8>)
 801cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccea:	4604      	mov	r4, r0
 801ccec:	460d      	mov	r5, r1
 801ccee:	f7e3 fc9b 	bl	8000628 <__aeabi_dmul>
 801ccf2:	a353      	add	r3, pc, #332	; (adr r3, 801ce40 <__ieee754_pow+0x3d0>)
 801ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccf8:	4606      	mov	r6, r0
 801ccfa:	460f      	mov	r7, r1
 801ccfc:	4620      	mov	r0, r4
 801ccfe:	4629      	mov	r1, r5
 801cd00:	f7e3 fc92 	bl	8000628 <__aeabi_dmul>
 801cd04:	4b57      	ldr	r3, [pc, #348]	; (801ce64 <__ieee754_pow+0x3f4>)
 801cd06:	4682      	mov	sl, r0
 801cd08:	468b      	mov	fp, r1
 801cd0a:	2200      	movs	r2, #0
 801cd0c:	4620      	mov	r0, r4
 801cd0e:	4629      	mov	r1, r5
 801cd10:	f7e3 fc8a 	bl	8000628 <__aeabi_dmul>
 801cd14:	4602      	mov	r2, r0
 801cd16:	460b      	mov	r3, r1
 801cd18:	a14b      	add	r1, pc, #300	; (adr r1, 801ce48 <__ieee754_pow+0x3d8>)
 801cd1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd1e:	f7e3 facb 	bl	80002b8 <__aeabi_dsub>
 801cd22:	4622      	mov	r2, r4
 801cd24:	462b      	mov	r3, r5
 801cd26:	f7e3 fc7f 	bl	8000628 <__aeabi_dmul>
 801cd2a:	4602      	mov	r2, r0
 801cd2c:	460b      	mov	r3, r1
 801cd2e:	2000      	movs	r0, #0
 801cd30:	494d      	ldr	r1, [pc, #308]	; (801ce68 <__ieee754_pow+0x3f8>)
 801cd32:	f7e3 fac1 	bl	80002b8 <__aeabi_dsub>
 801cd36:	4622      	mov	r2, r4
 801cd38:	4680      	mov	r8, r0
 801cd3a:	4689      	mov	r9, r1
 801cd3c:	462b      	mov	r3, r5
 801cd3e:	4620      	mov	r0, r4
 801cd40:	4629      	mov	r1, r5
 801cd42:	f7e3 fc71 	bl	8000628 <__aeabi_dmul>
 801cd46:	4602      	mov	r2, r0
 801cd48:	460b      	mov	r3, r1
 801cd4a:	4640      	mov	r0, r8
 801cd4c:	4649      	mov	r1, r9
 801cd4e:	f7e3 fc6b 	bl	8000628 <__aeabi_dmul>
 801cd52:	a33f      	add	r3, pc, #252	; (adr r3, 801ce50 <__ieee754_pow+0x3e0>)
 801cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd58:	f7e3 fc66 	bl	8000628 <__aeabi_dmul>
 801cd5c:	4602      	mov	r2, r0
 801cd5e:	460b      	mov	r3, r1
 801cd60:	4650      	mov	r0, sl
 801cd62:	4659      	mov	r1, fp
 801cd64:	f7e3 faa8 	bl	80002b8 <__aeabi_dsub>
 801cd68:	4602      	mov	r2, r0
 801cd6a:	460b      	mov	r3, r1
 801cd6c:	4680      	mov	r8, r0
 801cd6e:	4689      	mov	r9, r1
 801cd70:	4630      	mov	r0, r6
 801cd72:	4639      	mov	r1, r7
 801cd74:	f7e3 faa2 	bl	80002bc <__adddf3>
 801cd78:	2000      	movs	r0, #0
 801cd7a:	4632      	mov	r2, r6
 801cd7c:	463b      	mov	r3, r7
 801cd7e:	4604      	mov	r4, r0
 801cd80:	460d      	mov	r5, r1
 801cd82:	f7e3 fa99 	bl	80002b8 <__aeabi_dsub>
 801cd86:	4602      	mov	r2, r0
 801cd88:	460b      	mov	r3, r1
 801cd8a:	4640      	mov	r0, r8
 801cd8c:	4649      	mov	r1, r9
 801cd8e:	f7e3 fa93 	bl	80002b8 <__aeabi_dsub>
 801cd92:	9b04      	ldr	r3, [sp, #16]
 801cd94:	9a06      	ldr	r2, [sp, #24]
 801cd96:	3b01      	subs	r3, #1
 801cd98:	4313      	orrs	r3, r2
 801cd9a:	4682      	mov	sl, r0
 801cd9c:	468b      	mov	fp, r1
 801cd9e:	f040 81e7 	bne.w	801d170 <__ieee754_pow+0x700>
 801cda2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801ce58 <__ieee754_pow+0x3e8>
 801cda6:	eeb0 8a47 	vmov.f32	s16, s14
 801cdaa:	eef0 8a67 	vmov.f32	s17, s15
 801cdae:	e9dd 6700 	ldrd	r6, r7, [sp]
 801cdb2:	2600      	movs	r6, #0
 801cdb4:	4632      	mov	r2, r6
 801cdb6:	463b      	mov	r3, r7
 801cdb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cdbc:	f7e3 fa7c 	bl	80002b8 <__aeabi_dsub>
 801cdc0:	4622      	mov	r2, r4
 801cdc2:	462b      	mov	r3, r5
 801cdc4:	f7e3 fc30 	bl	8000628 <__aeabi_dmul>
 801cdc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cdcc:	4680      	mov	r8, r0
 801cdce:	4689      	mov	r9, r1
 801cdd0:	4650      	mov	r0, sl
 801cdd2:	4659      	mov	r1, fp
 801cdd4:	f7e3 fc28 	bl	8000628 <__aeabi_dmul>
 801cdd8:	4602      	mov	r2, r0
 801cdda:	460b      	mov	r3, r1
 801cddc:	4640      	mov	r0, r8
 801cdde:	4649      	mov	r1, r9
 801cde0:	f7e3 fa6c 	bl	80002bc <__adddf3>
 801cde4:	4632      	mov	r2, r6
 801cde6:	463b      	mov	r3, r7
 801cde8:	4680      	mov	r8, r0
 801cdea:	4689      	mov	r9, r1
 801cdec:	4620      	mov	r0, r4
 801cdee:	4629      	mov	r1, r5
 801cdf0:	f7e3 fc1a 	bl	8000628 <__aeabi_dmul>
 801cdf4:	460b      	mov	r3, r1
 801cdf6:	4604      	mov	r4, r0
 801cdf8:	460d      	mov	r5, r1
 801cdfa:	4602      	mov	r2, r0
 801cdfc:	4649      	mov	r1, r9
 801cdfe:	4640      	mov	r0, r8
 801ce00:	f7e3 fa5c 	bl	80002bc <__adddf3>
 801ce04:	4b19      	ldr	r3, [pc, #100]	; (801ce6c <__ieee754_pow+0x3fc>)
 801ce06:	4299      	cmp	r1, r3
 801ce08:	ec45 4b19 	vmov	d9, r4, r5
 801ce0c:	4606      	mov	r6, r0
 801ce0e:	460f      	mov	r7, r1
 801ce10:	468b      	mov	fp, r1
 801ce12:	f340 82f1 	ble.w	801d3f8 <__ieee754_pow+0x988>
 801ce16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ce1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ce1e:	4303      	orrs	r3, r0
 801ce20:	f000 81e4 	beq.w	801d1ec <__ieee754_pow+0x77c>
 801ce24:	ec51 0b18 	vmov	r0, r1, d8
 801ce28:	2200      	movs	r2, #0
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	f7e3 fe6e 	bl	8000b0c <__aeabi_dcmplt>
 801ce30:	3800      	subs	r0, #0
 801ce32:	bf18      	it	ne
 801ce34:	2001      	movne	r0, #1
 801ce36:	e72b      	b.n	801cc90 <__ieee754_pow+0x220>
 801ce38:	60000000 	.word	0x60000000
 801ce3c:	3ff71547 	.word	0x3ff71547
 801ce40:	f85ddf44 	.word	0xf85ddf44
 801ce44:	3e54ae0b 	.word	0x3e54ae0b
 801ce48:	55555555 	.word	0x55555555
 801ce4c:	3fd55555 	.word	0x3fd55555
 801ce50:	652b82fe 	.word	0x652b82fe
 801ce54:	3ff71547 	.word	0x3ff71547
 801ce58:	00000000 	.word	0x00000000
 801ce5c:	bff00000 	.word	0xbff00000
 801ce60:	3ff00000 	.word	0x3ff00000
 801ce64:	3fd00000 	.word	0x3fd00000
 801ce68:	3fe00000 	.word	0x3fe00000
 801ce6c:	408fffff 	.word	0x408fffff
 801ce70:	4bd5      	ldr	r3, [pc, #852]	; (801d1c8 <__ieee754_pow+0x758>)
 801ce72:	402b      	ands	r3, r5
 801ce74:	2200      	movs	r2, #0
 801ce76:	b92b      	cbnz	r3, 801ce84 <__ieee754_pow+0x414>
 801ce78:	4bd4      	ldr	r3, [pc, #848]	; (801d1cc <__ieee754_pow+0x75c>)
 801ce7a:	f7e3 fbd5 	bl	8000628 <__aeabi_dmul>
 801ce7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ce82:	460c      	mov	r4, r1
 801ce84:	1523      	asrs	r3, r4, #20
 801ce86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ce8a:	4413      	add	r3, r2
 801ce8c:	9305      	str	r3, [sp, #20]
 801ce8e:	4bd0      	ldr	r3, [pc, #832]	; (801d1d0 <__ieee754_pow+0x760>)
 801ce90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ce94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ce98:	429c      	cmp	r4, r3
 801ce9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ce9e:	dd08      	ble.n	801ceb2 <__ieee754_pow+0x442>
 801cea0:	4bcc      	ldr	r3, [pc, #816]	; (801d1d4 <__ieee754_pow+0x764>)
 801cea2:	429c      	cmp	r4, r3
 801cea4:	f340 8162 	ble.w	801d16c <__ieee754_pow+0x6fc>
 801cea8:	9b05      	ldr	r3, [sp, #20]
 801ceaa:	3301      	adds	r3, #1
 801ceac:	9305      	str	r3, [sp, #20]
 801ceae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ceb2:	2400      	movs	r4, #0
 801ceb4:	00e3      	lsls	r3, r4, #3
 801ceb6:	9307      	str	r3, [sp, #28]
 801ceb8:	4bc7      	ldr	r3, [pc, #796]	; (801d1d8 <__ieee754_pow+0x768>)
 801ceba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cebe:	ed93 7b00 	vldr	d7, [r3]
 801cec2:	4629      	mov	r1, r5
 801cec4:	ec53 2b17 	vmov	r2, r3, d7
 801cec8:	eeb0 9a47 	vmov.f32	s18, s14
 801cecc:	eef0 9a67 	vmov.f32	s19, s15
 801ced0:	4682      	mov	sl, r0
 801ced2:	f7e3 f9f1 	bl	80002b8 <__aeabi_dsub>
 801ced6:	4652      	mov	r2, sl
 801ced8:	4606      	mov	r6, r0
 801ceda:	460f      	mov	r7, r1
 801cedc:	462b      	mov	r3, r5
 801cede:	ec51 0b19 	vmov	r0, r1, d9
 801cee2:	f7e3 f9eb 	bl	80002bc <__adddf3>
 801cee6:	4602      	mov	r2, r0
 801cee8:	460b      	mov	r3, r1
 801ceea:	2000      	movs	r0, #0
 801ceec:	49bb      	ldr	r1, [pc, #748]	; (801d1dc <__ieee754_pow+0x76c>)
 801ceee:	f7e3 fcc5 	bl	800087c <__aeabi_ddiv>
 801cef2:	ec41 0b1a 	vmov	d10, r0, r1
 801cef6:	4602      	mov	r2, r0
 801cef8:	460b      	mov	r3, r1
 801cefa:	4630      	mov	r0, r6
 801cefc:	4639      	mov	r1, r7
 801cefe:	f7e3 fb93 	bl	8000628 <__aeabi_dmul>
 801cf02:	2300      	movs	r3, #0
 801cf04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf08:	9302      	str	r3, [sp, #8]
 801cf0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801cf0e:	46ab      	mov	fp, r5
 801cf10:	106d      	asrs	r5, r5, #1
 801cf12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801cf16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801cf1a:	ec41 0b18 	vmov	d8, r0, r1
 801cf1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801cf22:	2200      	movs	r2, #0
 801cf24:	4640      	mov	r0, r8
 801cf26:	4649      	mov	r1, r9
 801cf28:	4614      	mov	r4, r2
 801cf2a:	461d      	mov	r5, r3
 801cf2c:	f7e3 fb7c 	bl	8000628 <__aeabi_dmul>
 801cf30:	4602      	mov	r2, r0
 801cf32:	460b      	mov	r3, r1
 801cf34:	4630      	mov	r0, r6
 801cf36:	4639      	mov	r1, r7
 801cf38:	f7e3 f9be 	bl	80002b8 <__aeabi_dsub>
 801cf3c:	ec53 2b19 	vmov	r2, r3, d9
 801cf40:	4606      	mov	r6, r0
 801cf42:	460f      	mov	r7, r1
 801cf44:	4620      	mov	r0, r4
 801cf46:	4629      	mov	r1, r5
 801cf48:	f7e3 f9b6 	bl	80002b8 <__aeabi_dsub>
 801cf4c:	4602      	mov	r2, r0
 801cf4e:	460b      	mov	r3, r1
 801cf50:	4650      	mov	r0, sl
 801cf52:	4659      	mov	r1, fp
 801cf54:	f7e3 f9b0 	bl	80002b8 <__aeabi_dsub>
 801cf58:	4642      	mov	r2, r8
 801cf5a:	464b      	mov	r3, r9
 801cf5c:	f7e3 fb64 	bl	8000628 <__aeabi_dmul>
 801cf60:	4602      	mov	r2, r0
 801cf62:	460b      	mov	r3, r1
 801cf64:	4630      	mov	r0, r6
 801cf66:	4639      	mov	r1, r7
 801cf68:	f7e3 f9a6 	bl	80002b8 <__aeabi_dsub>
 801cf6c:	ec53 2b1a 	vmov	r2, r3, d10
 801cf70:	f7e3 fb5a 	bl	8000628 <__aeabi_dmul>
 801cf74:	ec53 2b18 	vmov	r2, r3, d8
 801cf78:	ec41 0b19 	vmov	d9, r0, r1
 801cf7c:	ec51 0b18 	vmov	r0, r1, d8
 801cf80:	f7e3 fb52 	bl	8000628 <__aeabi_dmul>
 801cf84:	a37c      	add	r3, pc, #496	; (adr r3, 801d178 <__ieee754_pow+0x708>)
 801cf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf8a:	4604      	mov	r4, r0
 801cf8c:	460d      	mov	r5, r1
 801cf8e:	f7e3 fb4b 	bl	8000628 <__aeabi_dmul>
 801cf92:	a37b      	add	r3, pc, #492	; (adr r3, 801d180 <__ieee754_pow+0x710>)
 801cf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf98:	f7e3 f990 	bl	80002bc <__adddf3>
 801cf9c:	4622      	mov	r2, r4
 801cf9e:	462b      	mov	r3, r5
 801cfa0:	f7e3 fb42 	bl	8000628 <__aeabi_dmul>
 801cfa4:	a378      	add	r3, pc, #480	; (adr r3, 801d188 <__ieee754_pow+0x718>)
 801cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfaa:	f7e3 f987 	bl	80002bc <__adddf3>
 801cfae:	4622      	mov	r2, r4
 801cfb0:	462b      	mov	r3, r5
 801cfb2:	f7e3 fb39 	bl	8000628 <__aeabi_dmul>
 801cfb6:	a376      	add	r3, pc, #472	; (adr r3, 801d190 <__ieee754_pow+0x720>)
 801cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfbc:	f7e3 f97e 	bl	80002bc <__adddf3>
 801cfc0:	4622      	mov	r2, r4
 801cfc2:	462b      	mov	r3, r5
 801cfc4:	f7e3 fb30 	bl	8000628 <__aeabi_dmul>
 801cfc8:	a373      	add	r3, pc, #460	; (adr r3, 801d198 <__ieee754_pow+0x728>)
 801cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfce:	f7e3 f975 	bl	80002bc <__adddf3>
 801cfd2:	4622      	mov	r2, r4
 801cfd4:	462b      	mov	r3, r5
 801cfd6:	f7e3 fb27 	bl	8000628 <__aeabi_dmul>
 801cfda:	a371      	add	r3, pc, #452	; (adr r3, 801d1a0 <__ieee754_pow+0x730>)
 801cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfe0:	f7e3 f96c 	bl	80002bc <__adddf3>
 801cfe4:	4622      	mov	r2, r4
 801cfe6:	4606      	mov	r6, r0
 801cfe8:	460f      	mov	r7, r1
 801cfea:	462b      	mov	r3, r5
 801cfec:	4620      	mov	r0, r4
 801cfee:	4629      	mov	r1, r5
 801cff0:	f7e3 fb1a 	bl	8000628 <__aeabi_dmul>
 801cff4:	4602      	mov	r2, r0
 801cff6:	460b      	mov	r3, r1
 801cff8:	4630      	mov	r0, r6
 801cffa:	4639      	mov	r1, r7
 801cffc:	f7e3 fb14 	bl	8000628 <__aeabi_dmul>
 801d000:	4642      	mov	r2, r8
 801d002:	4604      	mov	r4, r0
 801d004:	460d      	mov	r5, r1
 801d006:	464b      	mov	r3, r9
 801d008:	ec51 0b18 	vmov	r0, r1, d8
 801d00c:	f7e3 f956 	bl	80002bc <__adddf3>
 801d010:	ec53 2b19 	vmov	r2, r3, d9
 801d014:	f7e3 fb08 	bl	8000628 <__aeabi_dmul>
 801d018:	4622      	mov	r2, r4
 801d01a:	462b      	mov	r3, r5
 801d01c:	f7e3 f94e 	bl	80002bc <__adddf3>
 801d020:	4642      	mov	r2, r8
 801d022:	4682      	mov	sl, r0
 801d024:	468b      	mov	fp, r1
 801d026:	464b      	mov	r3, r9
 801d028:	4640      	mov	r0, r8
 801d02a:	4649      	mov	r1, r9
 801d02c:	f7e3 fafc 	bl	8000628 <__aeabi_dmul>
 801d030:	4b6b      	ldr	r3, [pc, #428]	; (801d1e0 <__ieee754_pow+0x770>)
 801d032:	2200      	movs	r2, #0
 801d034:	4606      	mov	r6, r0
 801d036:	460f      	mov	r7, r1
 801d038:	f7e3 f940 	bl	80002bc <__adddf3>
 801d03c:	4652      	mov	r2, sl
 801d03e:	465b      	mov	r3, fp
 801d040:	f7e3 f93c 	bl	80002bc <__adddf3>
 801d044:	2000      	movs	r0, #0
 801d046:	4604      	mov	r4, r0
 801d048:	460d      	mov	r5, r1
 801d04a:	4602      	mov	r2, r0
 801d04c:	460b      	mov	r3, r1
 801d04e:	4640      	mov	r0, r8
 801d050:	4649      	mov	r1, r9
 801d052:	f7e3 fae9 	bl	8000628 <__aeabi_dmul>
 801d056:	4b62      	ldr	r3, [pc, #392]	; (801d1e0 <__ieee754_pow+0x770>)
 801d058:	4680      	mov	r8, r0
 801d05a:	4689      	mov	r9, r1
 801d05c:	2200      	movs	r2, #0
 801d05e:	4620      	mov	r0, r4
 801d060:	4629      	mov	r1, r5
 801d062:	f7e3 f929 	bl	80002b8 <__aeabi_dsub>
 801d066:	4632      	mov	r2, r6
 801d068:	463b      	mov	r3, r7
 801d06a:	f7e3 f925 	bl	80002b8 <__aeabi_dsub>
 801d06e:	4602      	mov	r2, r0
 801d070:	460b      	mov	r3, r1
 801d072:	4650      	mov	r0, sl
 801d074:	4659      	mov	r1, fp
 801d076:	f7e3 f91f 	bl	80002b8 <__aeabi_dsub>
 801d07a:	ec53 2b18 	vmov	r2, r3, d8
 801d07e:	f7e3 fad3 	bl	8000628 <__aeabi_dmul>
 801d082:	4622      	mov	r2, r4
 801d084:	4606      	mov	r6, r0
 801d086:	460f      	mov	r7, r1
 801d088:	462b      	mov	r3, r5
 801d08a:	ec51 0b19 	vmov	r0, r1, d9
 801d08e:	f7e3 facb 	bl	8000628 <__aeabi_dmul>
 801d092:	4602      	mov	r2, r0
 801d094:	460b      	mov	r3, r1
 801d096:	4630      	mov	r0, r6
 801d098:	4639      	mov	r1, r7
 801d09a:	f7e3 f90f 	bl	80002bc <__adddf3>
 801d09e:	4606      	mov	r6, r0
 801d0a0:	460f      	mov	r7, r1
 801d0a2:	4602      	mov	r2, r0
 801d0a4:	460b      	mov	r3, r1
 801d0a6:	4640      	mov	r0, r8
 801d0a8:	4649      	mov	r1, r9
 801d0aa:	f7e3 f907 	bl	80002bc <__adddf3>
 801d0ae:	a33e      	add	r3, pc, #248	; (adr r3, 801d1a8 <__ieee754_pow+0x738>)
 801d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0b4:	2000      	movs	r0, #0
 801d0b6:	4604      	mov	r4, r0
 801d0b8:	460d      	mov	r5, r1
 801d0ba:	f7e3 fab5 	bl	8000628 <__aeabi_dmul>
 801d0be:	4642      	mov	r2, r8
 801d0c0:	ec41 0b18 	vmov	d8, r0, r1
 801d0c4:	464b      	mov	r3, r9
 801d0c6:	4620      	mov	r0, r4
 801d0c8:	4629      	mov	r1, r5
 801d0ca:	f7e3 f8f5 	bl	80002b8 <__aeabi_dsub>
 801d0ce:	4602      	mov	r2, r0
 801d0d0:	460b      	mov	r3, r1
 801d0d2:	4630      	mov	r0, r6
 801d0d4:	4639      	mov	r1, r7
 801d0d6:	f7e3 f8ef 	bl	80002b8 <__aeabi_dsub>
 801d0da:	a335      	add	r3, pc, #212	; (adr r3, 801d1b0 <__ieee754_pow+0x740>)
 801d0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0e0:	f7e3 faa2 	bl	8000628 <__aeabi_dmul>
 801d0e4:	a334      	add	r3, pc, #208	; (adr r3, 801d1b8 <__ieee754_pow+0x748>)
 801d0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0ea:	4606      	mov	r6, r0
 801d0ec:	460f      	mov	r7, r1
 801d0ee:	4620      	mov	r0, r4
 801d0f0:	4629      	mov	r1, r5
 801d0f2:	f7e3 fa99 	bl	8000628 <__aeabi_dmul>
 801d0f6:	4602      	mov	r2, r0
 801d0f8:	460b      	mov	r3, r1
 801d0fa:	4630      	mov	r0, r6
 801d0fc:	4639      	mov	r1, r7
 801d0fe:	f7e3 f8dd 	bl	80002bc <__adddf3>
 801d102:	9a07      	ldr	r2, [sp, #28]
 801d104:	4b37      	ldr	r3, [pc, #220]	; (801d1e4 <__ieee754_pow+0x774>)
 801d106:	4413      	add	r3, r2
 801d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d10c:	f7e3 f8d6 	bl	80002bc <__adddf3>
 801d110:	4682      	mov	sl, r0
 801d112:	9805      	ldr	r0, [sp, #20]
 801d114:	468b      	mov	fp, r1
 801d116:	f7e3 fa1d 	bl	8000554 <__aeabi_i2d>
 801d11a:	9a07      	ldr	r2, [sp, #28]
 801d11c:	4b32      	ldr	r3, [pc, #200]	; (801d1e8 <__ieee754_pow+0x778>)
 801d11e:	4413      	add	r3, r2
 801d120:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d124:	4606      	mov	r6, r0
 801d126:	460f      	mov	r7, r1
 801d128:	4652      	mov	r2, sl
 801d12a:	465b      	mov	r3, fp
 801d12c:	ec51 0b18 	vmov	r0, r1, d8
 801d130:	f7e3 f8c4 	bl	80002bc <__adddf3>
 801d134:	4642      	mov	r2, r8
 801d136:	464b      	mov	r3, r9
 801d138:	f7e3 f8c0 	bl	80002bc <__adddf3>
 801d13c:	4632      	mov	r2, r6
 801d13e:	463b      	mov	r3, r7
 801d140:	f7e3 f8bc 	bl	80002bc <__adddf3>
 801d144:	2000      	movs	r0, #0
 801d146:	4632      	mov	r2, r6
 801d148:	463b      	mov	r3, r7
 801d14a:	4604      	mov	r4, r0
 801d14c:	460d      	mov	r5, r1
 801d14e:	f7e3 f8b3 	bl	80002b8 <__aeabi_dsub>
 801d152:	4642      	mov	r2, r8
 801d154:	464b      	mov	r3, r9
 801d156:	f7e3 f8af 	bl	80002b8 <__aeabi_dsub>
 801d15a:	ec53 2b18 	vmov	r2, r3, d8
 801d15e:	f7e3 f8ab 	bl	80002b8 <__aeabi_dsub>
 801d162:	4602      	mov	r2, r0
 801d164:	460b      	mov	r3, r1
 801d166:	4650      	mov	r0, sl
 801d168:	4659      	mov	r1, fp
 801d16a:	e610      	b.n	801cd8e <__ieee754_pow+0x31e>
 801d16c:	2401      	movs	r4, #1
 801d16e:	e6a1      	b.n	801ceb4 <__ieee754_pow+0x444>
 801d170:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801d1c0 <__ieee754_pow+0x750>
 801d174:	e617      	b.n	801cda6 <__ieee754_pow+0x336>
 801d176:	bf00      	nop
 801d178:	4a454eef 	.word	0x4a454eef
 801d17c:	3fca7e28 	.word	0x3fca7e28
 801d180:	93c9db65 	.word	0x93c9db65
 801d184:	3fcd864a 	.word	0x3fcd864a
 801d188:	a91d4101 	.word	0xa91d4101
 801d18c:	3fd17460 	.word	0x3fd17460
 801d190:	518f264d 	.word	0x518f264d
 801d194:	3fd55555 	.word	0x3fd55555
 801d198:	db6fabff 	.word	0xdb6fabff
 801d19c:	3fdb6db6 	.word	0x3fdb6db6
 801d1a0:	33333303 	.word	0x33333303
 801d1a4:	3fe33333 	.word	0x3fe33333
 801d1a8:	e0000000 	.word	0xe0000000
 801d1ac:	3feec709 	.word	0x3feec709
 801d1b0:	dc3a03fd 	.word	0xdc3a03fd
 801d1b4:	3feec709 	.word	0x3feec709
 801d1b8:	145b01f5 	.word	0x145b01f5
 801d1bc:	be3e2fe0 	.word	0xbe3e2fe0
 801d1c0:	00000000 	.word	0x00000000
 801d1c4:	3ff00000 	.word	0x3ff00000
 801d1c8:	7ff00000 	.word	0x7ff00000
 801d1cc:	43400000 	.word	0x43400000
 801d1d0:	0003988e 	.word	0x0003988e
 801d1d4:	000bb679 	.word	0x000bb679
 801d1d8:	0802b868 	.word	0x0802b868
 801d1dc:	3ff00000 	.word	0x3ff00000
 801d1e0:	40080000 	.word	0x40080000
 801d1e4:	0802b888 	.word	0x0802b888
 801d1e8:	0802b878 	.word	0x0802b878
 801d1ec:	a3b5      	add	r3, pc, #724	; (adr r3, 801d4c4 <__ieee754_pow+0xa54>)
 801d1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1f2:	4640      	mov	r0, r8
 801d1f4:	4649      	mov	r1, r9
 801d1f6:	f7e3 f861 	bl	80002bc <__adddf3>
 801d1fa:	4622      	mov	r2, r4
 801d1fc:	ec41 0b1a 	vmov	d10, r0, r1
 801d200:	462b      	mov	r3, r5
 801d202:	4630      	mov	r0, r6
 801d204:	4639      	mov	r1, r7
 801d206:	f7e3 f857 	bl	80002b8 <__aeabi_dsub>
 801d20a:	4602      	mov	r2, r0
 801d20c:	460b      	mov	r3, r1
 801d20e:	ec51 0b1a 	vmov	r0, r1, d10
 801d212:	f7e3 fc99 	bl	8000b48 <__aeabi_dcmpgt>
 801d216:	2800      	cmp	r0, #0
 801d218:	f47f ae04 	bne.w	801ce24 <__ieee754_pow+0x3b4>
 801d21c:	4aa4      	ldr	r2, [pc, #656]	; (801d4b0 <__ieee754_pow+0xa40>)
 801d21e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d222:	4293      	cmp	r3, r2
 801d224:	f340 8108 	ble.w	801d438 <__ieee754_pow+0x9c8>
 801d228:	151b      	asrs	r3, r3, #20
 801d22a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d22e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d232:	fa4a f303 	asr.w	r3, sl, r3
 801d236:	445b      	add	r3, fp
 801d238:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d23c:	4e9d      	ldr	r6, [pc, #628]	; (801d4b4 <__ieee754_pow+0xa44>)
 801d23e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d242:	4116      	asrs	r6, r2
 801d244:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d248:	2000      	movs	r0, #0
 801d24a:	ea23 0106 	bic.w	r1, r3, r6
 801d24e:	f1c2 0214 	rsb	r2, r2, #20
 801d252:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d256:	fa4a fa02 	asr.w	sl, sl, r2
 801d25a:	f1bb 0f00 	cmp.w	fp, #0
 801d25e:	4602      	mov	r2, r0
 801d260:	460b      	mov	r3, r1
 801d262:	4620      	mov	r0, r4
 801d264:	4629      	mov	r1, r5
 801d266:	bfb8      	it	lt
 801d268:	f1ca 0a00 	rsblt	sl, sl, #0
 801d26c:	f7e3 f824 	bl	80002b8 <__aeabi_dsub>
 801d270:	ec41 0b19 	vmov	d9, r0, r1
 801d274:	4642      	mov	r2, r8
 801d276:	464b      	mov	r3, r9
 801d278:	ec51 0b19 	vmov	r0, r1, d9
 801d27c:	f7e3 f81e 	bl	80002bc <__adddf3>
 801d280:	a37b      	add	r3, pc, #492	; (adr r3, 801d470 <__ieee754_pow+0xa00>)
 801d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d286:	2000      	movs	r0, #0
 801d288:	4604      	mov	r4, r0
 801d28a:	460d      	mov	r5, r1
 801d28c:	f7e3 f9cc 	bl	8000628 <__aeabi_dmul>
 801d290:	ec53 2b19 	vmov	r2, r3, d9
 801d294:	4606      	mov	r6, r0
 801d296:	460f      	mov	r7, r1
 801d298:	4620      	mov	r0, r4
 801d29a:	4629      	mov	r1, r5
 801d29c:	f7e3 f80c 	bl	80002b8 <__aeabi_dsub>
 801d2a0:	4602      	mov	r2, r0
 801d2a2:	460b      	mov	r3, r1
 801d2a4:	4640      	mov	r0, r8
 801d2a6:	4649      	mov	r1, r9
 801d2a8:	f7e3 f806 	bl	80002b8 <__aeabi_dsub>
 801d2ac:	a372      	add	r3, pc, #456	; (adr r3, 801d478 <__ieee754_pow+0xa08>)
 801d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2b2:	f7e3 f9b9 	bl	8000628 <__aeabi_dmul>
 801d2b6:	a372      	add	r3, pc, #456	; (adr r3, 801d480 <__ieee754_pow+0xa10>)
 801d2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2bc:	4680      	mov	r8, r0
 801d2be:	4689      	mov	r9, r1
 801d2c0:	4620      	mov	r0, r4
 801d2c2:	4629      	mov	r1, r5
 801d2c4:	f7e3 f9b0 	bl	8000628 <__aeabi_dmul>
 801d2c8:	4602      	mov	r2, r0
 801d2ca:	460b      	mov	r3, r1
 801d2cc:	4640      	mov	r0, r8
 801d2ce:	4649      	mov	r1, r9
 801d2d0:	f7e2 fff4 	bl	80002bc <__adddf3>
 801d2d4:	4604      	mov	r4, r0
 801d2d6:	460d      	mov	r5, r1
 801d2d8:	4602      	mov	r2, r0
 801d2da:	460b      	mov	r3, r1
 801d2dc:	4630      	mov	r0, r6
 801d2de:	4639      	mov	r1, r7
 801d2e0:	f7e2 ffec 	bl	80002bc <__adddf3>
 801d2e4:	4632      	mov	r2, r6
 801d2e6:	463b      	mov	r3, r7
 801d2e8:	4680      	mov	r8, r0
 801d2ea:	4689      	mov	r9, r1
 801d2ec:	f7e2 ffe4 	bl	80002b8 <__aeabi_dsub>
 801d2f0:	4602      	mov	r2, r0
 801d2f2:	460b      	mov	r3, r1
 801d2f4:	4620      	mov	r0, r4
 801d2f6:	4629      	mov	r1, r5
 801d2f8:	f7e2 ffde 	bl	80002b8 <__aeabi_dsub>
 801d2fc:	4642      	mov	r2, r8
 801d2fe:	4606      	mov	r6, r0
 801d300:	460f      	mov	r7, r1
 801d302:	464b      	mov	r3, r9
 801d304:	4640      	mov	r0, r8
 801d306:	4649      	mov	r1, r9
 801d308:	f7e3 f98e 	bl	8000628 <__aeabi_dmul>
 801d30c:	a35e      	add	r3, pc, #376	; (adr r3, 801d488 <__ieee754_pow+0xa18>)
 801d30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d312:	4604      	mov	r4, r0
 801d314:	460d      	mov	r5, r1
 801d316:	f7e3 f987 	bl	8000628 <__aeabi_dmul>
 801d31a:	a35d      	add	r3, pc, #372	; (adr r3, 801d490 <__ieee754_pow+0xa20>)
 801d31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d320:	f7e2 ffca 	bl	80002b8 <__aeabi_dsub>
 801d324:	4622      	mov	r2, r4
 801d326:	462b      	mov	r3, r5
 801d328:	f7e3 f97e 	bl	8000628 <__aeabi_dmul>
 801d32c:	a35a      	add	r3, pc, #360	; (adr r3, 801d498 <__ieee754_pow+0xa28>)
 801d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d332:	f7e2 ffc3 	bl	80002bc <__adddf3>
 801d336:	4622      	mov	r2, r4
 801d338:	462b      	mov	r3, r5
 801d33a:	f7e3 f975 	bl	8000628 <__aeabi_dmul>
 801d33e:	a358      	add	r3, pc, #352	; (adr r3, 801d4a0 <__ieee754_pow+0xa30>)
 801d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d344:	f7e2 ffb8 	bl	80002b8 <__aeabi_dsub>
 801d348:	4622      	mov	r2, r4
 801d34a:	462b      	mov	r3, r5
 801d34c:	f7e3 f96c 	bl	8000628 <__aeabi_dmul>
 801d350:	a355      	add	r3, pc, #340	; (adr r3, 801d4a8 <__ieee754_pow+0xa38>)
 801d352:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d356:	f7e2 ffb1 	bl	80002bc <__adddf3>
 801d35a:	4622      	mov	r2, r4
 801d35c:	462b      	mov	r3, r5
 801d35e:	f7e3 f963 	bl	8000628 <__aeabi_dmul>
 801d362:	4602      	mov	r2, r0
 801d364:	460b      	mov	r3, r1
 801d366:	4640      	mov	r0, r8
 801d368:	4649      	mov	r1, r9
 801d36a:	f7e2 ffa5 	bl	80002b8 <__aeabi_dsub>
 801d36e:	4604      	mov	r4, r0
 801d370:	460d      	mov	r5, r1
 801d372:	4602      	mov	r2, r0
 801d374:	460b      	mov	r3, r1
 801d376:	4640      	mov	r0, r8
 801d378:	4649      	mov	r1, r9
 801d37a:	f7e3 f955 	bl	8000628 <__aeabi_dmul>
 801d37e:	2200      	movs	r2, #0
 801d380:	ec41 0b19 	vmov	d9, r0, r1
 801d384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d388:	4620      	mov	r0, r4
 801d38a:	4629      	mov	r1, r5
 801d38c:	f7e2 ff94 	bl	80002b8 <__aeabi_dsub>
 801d390:	4602      	mov	r2, r0
 801d392:	460b      	mov	r3, r1
 801d394:	ec51 0b19 	vmov	r0, r1, d9
 801d398:	f7e3 fa70 	bl	800087c <__aeabi_ddiv>
 801d39c:	4632      	mov	r2, r6
 801d39e:	4604      	mov	r4, r0
 801d3a0:	460d      	mov	r5, r1
 801d3a2:	463b      	mov	r3, r7
 801d3a4:	4640      	mov	r0, r8
 801d3a6:	4649      	mov	r1, r9
 801d3a8:	f7e3 f93e 	bl	8000628 <__aeabi_dmul>
 801d3ac:	4632      	mov	r2, r6
 801d3ae:	463b      	mov	r3, r7
 801d3b0:	f7e2 ff84 	bl	80002bc <__adddf3>
 801d3b4:	4602      	mov	r2, r0
 801d3b6:	460b      	mov	r3, r1
 801d3b8:	4620      	mov	r0, r4
 801d3ba:	4629      	mov	r1, r5
 801d3bc:	f7e2 ff7c 	bl	80002b8 <__aeabi_dsub>
 801d3c0:	4642      	mov	r2, r8
 801d3c2:	464b      	mov	r3, r9
 801d3c4:	f7e2 ff78 	bl	80002b8 <__aeabi_dsub>
 801d3c8:	460b      	mov	r3, r1
 801d3ca:	4602      	mov	r2, r0
 801d3cc:	493a      	ldr	r1, [pc, #232]	; (801d4b8 <__ieee754_pow+0xa48>)
 801d3ce:	2000      	movs	r0, #0
 801d3d0:	f7e2 ff72 	bl	80002b8 <__aeabi_dsub>
 801d3d4:	ec41 0b10 	vmov	d0, r0, r1
 801d3d8:	ee10 3a90 	vmov	r3, s1
 801d3dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801d3e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d3e4:	da2b      	bge.n	801d43e <__ieee754_pow+0x9ce>
 801d3e6:	4650      	mov	r0, sl
 801d3e8:	f000 fd2a 	bl	801de40 <scalbn>
 801d3ec:	ec51 0b10 	vmov	r0, r1, d0
 801d3f0:	ec53 2b18 	vmov	r2, r3, d8
 801d3f4:	f7ff bbed 	b.w	801cbd2 <__ieee754_pow+0x162>
 801d3f8:	4b30      	ldr	r3, [pc, #192]	; (801d4bc <__ieee754_pow+0xa4c>)
 801d3fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d3fe:	429e      	cmp	r6, r3
 801d400:	f77f af0c 	ble.w	801d21c <__ieee754_pow+0x7ac>
 801d404:	4b2e      	ldr	r3, [pc, #184]	; (801d4c0 <__ieee754_pow+0xa50>)
 801d406:	440b      	add	r3, r1
 801d408:	4303      	orrs	r3, r0
 801d40a:	d009      	beq.n	801d420 <__ieee754_pow+0x9b0>
 801d40c:	ec51 0b18 	vmov	r0, r1, d8
 801d410:	2200      	movs	r2, #0
 801d412:	2300      	movs	r3, #0
 801d414:	f7e3 fb7a 	bl	8000b0c <__aeabi_dcmplt>
 801d418:	3800      	subs	r0, #0
 801d41a:	bf18      	it	ne
 801d41c:	2001      	movne	r0, #1
 801d41e:	e447      	b.n	801ccb0 <__ieee754_pow+0x240>
 801d420:	4622      	mov	r2, r4
 801d422:	462b      	mov	r3, r5
 801d424:	f7e2 ff48 	bl	80002b8 <__aeabi_dsub>
 801d428:	4642      	mov	r2, r8
 801d42a:	464b      	mov	r3, r9
 801d42c:	f7e3 fb82 	bl	8000b34 <__aeabi_dcmpge>
 801d430:	2800      	cmp	r0, #0
 801d432:	f43f aef3 	beq.w	801d21c <__ieee754_pow+0x7ac>
 801d436:	e7e9      	b.n	801d40c <__ieee754_pow+0x99c>
 801d438:	f04f 0a00 	mov.w	sl, #0
 801d43c:	e71a      	b.n	801d274 <__ieee754_pow+0x804>
 801d43e:	ec51 0b10 	vmov	r0, r1, d0
 801d442:	4619      	mov	r1, r3
 801d444:	e7d4      	b.n	801d3f0 <__ieee754_pow+0x980>
 801d446:	491c      	ldr	r1, [pc, #112]	; (801d4b8 <__ieee754_pow+0xa48>)
 801d448:	2000      	movs	r0, #0
 801d44a:	f7ff bb30 	b.w	801caae <__ieee754_pow+0x3e>
 801d44e:	2000      	movs	r0, #0
 801d450:	2100      	movs	r1, #0
 801d452:	f7ff bb2c 	b.w	801caae <__ieee754_pow+0x3e>
 801d456:	4630      	mov	r0, r6
 801d458:	4639      	mov	r1, r7
 801d45a:	f7ff bb28 	b.w	801caae <__ieee754_pow+0x3e>
 801d45e:	9204      	str	r2, [sp, #16]
 801d460:	f7ff bb7a 	b.w	801cb58 <__ieee754_pow+0xe8>
 801d464:	2300      	movs	r3, #0
 801d466:	f7ff bb64 	b.w	801cb32 <__ieee754_pow+0xc2>
 801d46a:	bf00      	nop
 801d46c:	f3af 8000 	nop.w
 801d470:	00000000 	.word	0x00000000
 801d474:	3fe62e43 	.word	0x3fe62e43
 801d478:	fefa39ef 	.word	0xfefa39ef
 801d47c:	3fe62e42 	.word	0x3fe62e42
 801d480:	0ca86c39 	.word	0x0ca86c39
 801d484:	be205c61 	.word	0xbe205c61
 801d488:	72bea4d0 	.word	0x72bea4d0
 801d48c:	3e663769 	.word	0x3e663769
 801d490:	c5d26bf1 	.word	0xc5d26bf1
 801d494:	3ebbbd41 	.word	0x3ebbbd41
 801d498:	af25de2c 	.word	0xaf25de2c
 801d49c:	3f11566a 	.word	0x3f11566a
 801d4a0:	16bebd93 	.word	0x16bebd93
 801d4a4:	3f66c16c 	.word	0x3f66c16c
 801d4a8:	5555553e 	.word	0x5555553e
 801d4ac:	3fc55555 	.word	0x3fc55555
 801d4b0:	3fe00000 	.word	0x3fe00000
 801d4b4:	000fffff 	.word	0x000fffff
 801d4b8:	3ff00000 	.word	0x3ff00000
 801d4bc:	4090cbff 	.word	0x4090cbff
 801d4c0:	3f6f3400 	.word	0x3f6f3400
 801d4c4:	652b82fe 	.word	0x652b82fe
 801d4c8:	3c971547 	.word	0x3c971547

0801d4cc <__ieee754_sqrt>:
 801d4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4d0:	ec55 4b10 	vmov	r4, r5, d0
 801d4d4:	4e55      	ldr	r6, [pc, #340]	; (801d62c <__ieee754_sqrt+0x160>)
 801d4d6:	43ae      	bics	r6, r5
 801d4d8:	ee10 0a10 	vmov	r0, s0
 801d4dc:	ee10 3a10 	vmov	r3, s0
 801d4e0:	462a      	mov	r2, r5
 801d4e2:	4629      	mov	r1, r5
 801d4e4:	d110      	bne.n	801d508 <__ieee754_sqrt+0x3c>
 801d4e6:	ee10 2a10 	vmov	r2, s0
 801d4ea:	462b      	mov	r3, r5
 801d4ec:	f7e3 f89c 	bl	8000628 <__aeabi_dmul>
 801d4f0:	4602      	mov	r2, r0
 801d4f2:	460b      	mov	r3, r1
 801d4f4:	4620      	mov	r0, r4
 801d4f6:	4629      	mov	r1, r5
 801d4f8:	f7e2 fee0 	bl	80002bc <__adddf3>
 801d4fc:	4604      	mov	r4, r0
 801d4fe:	460d      	mov	r5, r1
 801d500:	ec45 4b10 	vmov	d0, r4, r5
 801d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d508:	2d00      	cmp	r5, #0
 801d50a:	dc10      	bgt.n	801d52e <__ieee754_sqrt+0x62>
 801d50c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d510:	4330      	orrs	r0, r6
 801d512:	d0f5      	beq.n	801d500 <__ieee754_sqrt+0x34>
 801d514:	b15d      	cbz	r5, 801d52e <__ieee754_sqrt+0x62>
 801d516:	ee10 2a10 	vmov	r2, s0
 801d51a:	462b      	mov	r3, r5
 801d51c:	ee10 0a10 	vmov	r0, s0
 801d520:	f7e2 feca 	bl	80002b8 <__aeabi_dsub>
 801d524:	4602      	mov	r2, r0
 801d526:	460b      	mov	r3, r1
 801d528:	f7e3 f9a8 	bl	800087c <__aeabi_ddiv>
 801d52c:	e7e6      	b.n	801d4fc <__ieee754_sqrt+0x30>
 801d52e:	1512      	asrs	r2, r2, #20
 801d530:	d074      	beq.n	801d61c <__ieee754_sqrt+0x150>
 801d532:	07d4      	lsls	r4, r2, #31
 801d534:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801d538:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801d53c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d540:	bf5e      	ittt	pl
 801d542:	0fda      	lsrpl	r2, r3, #31
 801d544:	005b      	lslpl	r3, r3, #1
 801d546:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801d54a:	2400      	movs	r4, #0
 801d54c:	0fda      	lsrs	r2, r3, #31
 801d54e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d552:	107f      	asrs	r7, r7, #1
 801d554:	005b      	lsls	r3, r3, #1
 801d556:	2516      	movs	r5, #22
 801d558:	4620      	mov	r0, r4
 801d55a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801d55e:	1886      	adds	r6, r0, r2
 801d560:	428e      	cmp	r6, r1
 801d562:	bfde      	ittt	le
 801d564:	1b89      	suble	r1, r1, r6
 801d566:	18b0      	addle	r0, r6, r2
 801d568:	18a4      	addle	r4, r4, r2
 801d56a:	0049      	lsls	r1, r1, #1
 801d56c:	3d01      	subs	r5, #1
 801d56e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801d572:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801d576:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d57a:	d1f0      	bne.n	801d55e <__ieee754_sqrt+0x92>
 801d57c:	462a      	mov	r2, r5
 801d57e:	f04f 0e20 	mov.w	lr, #32
 801d582:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d586:	4281      	cmp	r1, r0
 801d588:	eb06 0c05 	add.w	ip, r6, r5
 801d58c:	dc02      	bgt.n	801d594 <__ieee754_sqrt+0xc8>
 801d58e:	d113      	bne.n	801d5b8 <__ieee754_sqrt+0xec>
 801d590:	459c      	cmp	ip, r3
 801d592:	d811      	bhi.n	801d5b8 <__ieee754_sqrt+0xec>
 801d594:	f1bc 0f00 	cmp.w	ip, #0
 801d598:	eb0c 0506 	add.w	r5, ip, r6
 801d59c:	da43      	bge.n	801d626 <__ieee754_sqrt+0x15a>
 801d59e:	2d00      	cmp	r5, #0
 801d5a0:	db41      	blt.n	801d626 <__ieee754_sqrt+0x15a>
 801d5a2:	f100 0801 	add.w	r8, r0, #1
 801d5a6:	1a09      	subs	r1, r1, r0
 801d5a8:	459c      	cmp	ip, r3
 801d5aa:	bf88      	it	hi
 801d5ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801d5b0:	eba3 030c 	sub.w	r3, r3, ip
 801d5b4:	4432      	add	r2, r6
 801d5b6:	4640      	mov	r0, r8
 801d5b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801d5bc:	f1be 0e01 	subs.w	lr, lr, #1
 801d5c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801d5c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d5c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d5cc:	d1db      	bne.n	801d586 <__ieee754_sqrt+0xba>
 801d5ce:	430b      	orrs	r3, r1
 801d5d0:	d006      	beq.n	801d5e0 <__ieee754_sqrt+0x114>
 801d5d2:	1c50      	adds	r0, r2, #1
 801d5d4:	bf13      	iteet	ne
 801d5d6:	3201      	addne	r2, #1
 801d5d8:	3401      	addeq	r4, #1
 801d5da:	4672      	moveq	r2, lr
 801d5dc:	f022 0201 	bicne.w	r2, r2, #1
 801d5e0:	1063      	asrs	r3, r4, #1
 801d5e2:	0852      	lsrs	r2, r2, #1
 801d5e4:	07e1      	lsls	r1, r4, #31
 801d5e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d5ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d5ee:	bf48      	it	mi
 801d5f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801d5f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801d5f8:	4614      	mov	r4, r2
 801d5fa:	e781      	b.n	801d500 <__ieee754_sqrt+0x34>
 801d5fc:	0ad9      	lsrs	r1, r3, #11
 801d5fe:	3815      	subs	r0, #21
 801d600:	055b      	lsls	r3, r3, #21
 801d602:	2900      	cmp	r1, #0
 801d604:	d0fa      	beq.n	801d5fc <__ieee754_sqrt+0x130>
 801d606:	02cd      	lsls	r5, r1, #11
 801d608:	d50a      	bpl.n	801d620 <__ieee754_sqrt+0x154>
 801d60a:	f1c2 0420 	rsb	r4, r2, #32
 801d60e:	fa23 f404 	lsr.w	r4, r3, r4
 801d612:	1e55      	subs	r5, r2, #1
 801d614:	4093      	lsls	r3, r2
 801d616:	4321      	orrs	r1, r4
 801d618:	1b42      	subs	r2, r0, r5
 801d61a:	e78a      	b.n	801d532 <__ieee754_sqrt+0x66>
 801d61c:	4610      	mov	r0, r2
 801d61e:	e7f0      	b.n	801d602 <__ieee754_sqrt+0x136>
 801d620:	0049      	lsls	r1, r1, #1
 801d622:	3201      	adds	r2, #1
 801d624:	e7ef      	b.n	801d606 <__ieee754_sqrt+0x13a>
 801d626:	4680      	mov	r8, r0
 801d628:	e7bd      	b.n	801d5a6 <__ieee754_sqrt+0xda>
 801d62a:	bf00      	nop
 801d62c:	7ff00000 	.word	0x7ff00000

0801d630 <__ieee754_expf>:
 801d630:	ee10 2a10 	vmov	r2, s0
 801d634:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801d638:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d63c:	d902      	bls.n	801d644 <__ieee754_expf+0x14>
 801d63e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d642:	4770      	bx	lr
 801d644:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801d648:	d106      	bne.n	801d658 <__ieee754_expf+0x28>
 801d64a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801d784 <__ieee754_expf+0x154>
 801d64e:	2b00      	cmp	r3, #0
 801d650:	bf18      	it	ne
 801d652:	eeb0 0a67 	vmovne.f32	s0, s15
 801d656:	4770      	bx	lr
 801d658:	484b      	ldr	r0, [pc, #300]	; (801d788 <__ieee754_expf+0x158>)
 801d65a:	4282      	cmp	r2, r0
 801d65c:	dd02      	ble.n	801d664 <__ieee754_expf+0x34>
 801d65e:	2000      	movs	r0, #0
 801d660:	f000 bbd2 	b.w	801de08 <__math_oflowf>
 801d664:	2a00      	cmp	r2, #0
 801d666:	da05      	bge.n	801d674 <__ieee754_expf+0x44>
 801d668:	4a48      	ldr	r2, [pc, #288]	; (801d78c <__ieee754_expf+0x15c>)
 801d66a:	4291      	cmp	r1, r2
 801d66c:	d902      	bls.n	801d674 <__ieee754_expf+0x44>
 801d66e:	2000      	movs	r0, #0
 801d670:	f000 bbc4 	b.w	801ddfc <__math_uflowf>
 801d674:	4a46      	ldr	r2, [pc, #280]	; (801d790 <__ieee754_expf+0x160>)
 801d676:	4291      	cmp	r1, r2
 801d678:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801d67c:	d952      	bls.n	801d724 <__ieee754_expf+0xf4>
 801d67e:	4a45      	ldr	r2, [pc, #276]	; (801d794 <__ieee754_expf+0x164>)
 801d680:	4291      	cmp	r1, r2
 801d682:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801d686:	d834      	bhi.n	801d6f2 <__ieee754_expf+0xc2>
 801d688:	4943      	ldr	r1, [pc, #268]	; (801d798 <__ieee754_expf+0x168>)
 801d68a:	4411      	add	r1, r2
 801d68c:	ed91 7a00 	vldr	s14, [r1]
 801d690:	4942      	ldr	r1, [pc, #264]	; (801d79c <__ieee754_expf+0x16c>)
 801d692:	440a      	add	r2, r1
 801d694:	edd2 7a00 	vldr	s15, [r2]
 801d698:	ee30 7a47 	vsub.f32	s14, s0, s14
 801d69c:	f1c3 0201 	rsb	r2, r3, #1
 801d6a0:	1ad2      	subs	r2, r2, r3
 801d6a2:	ee37 0a67 	vsub.f32	s0, s14, s15
 801d6a6:	ee20 6a00 	vmul.f32	s12, s0, s0
 801d6aa:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801d7a0 <__ieee754_expf+0x170>
 801d6ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801d7a4 <__ieee754_expf+0x174>
 801d6b2:	eee6 6a05 	vfma.f32	s13, s12, s10
 801d6b6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801d7a8 <__ieee754_expf+0x178>
 801d6ba:	eea6 5a86 	vfma.f32	s10, s13, s12
 801d6be:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801d7ac <__ieee754_expf+0x17c>
 801d6c2:	eee5 6a06 	vfma.f32	s13, s10, s12
 801d6c6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801d7b0 <__ieee754_expf+0x180>
 801d6ca:	eea6 5a86 	vfma.f32	s10, s13, s12
 801d6ce:	eef0 6a40 	vmov.f32	s13, s0
 801d6d2:	eee5 6a46 	vfms.f32	s13, s10, s12
 801d6d6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801d6da:	ee20 5a26 	vmul.f32	s10, s0, s13
 801d6de:	bb92      	cbnz	r2, 801d746 <__ieee754_expf+0x116>
 801d6e0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801d6e4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801d6e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801d6ec:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801d6f0:	4770      	bx	lr
 801d6f2:	4b30      	ldr	r3, [pc, #192]	; (801d7b4 <__ieee754_expf+0x184>)
 801d6f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801d7b8 <__ieee754_expf+0x188>
 801d6f8:	eddf 6a30 	vldr	s13, [pc, #192]	; 801d7bc <__ieee754_expf+0x18c>
 801d6fc:	4413      	add	r3, r2
 801d6fe:	edd3 7a00 	vldr	s15, [r3]
 801d702:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d706:	eeb0 7a40 	vmov.f32	s14, s0
 801d70a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d70e:	ee17 2a90 	vmov	r2, s15
 801d712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d716:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801d71a:	eddf 6a29 	vldr	s13, [pc, #164]	; 801d7c0 <__ieee754_expf+0x190>
 801d71e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d722:	e7be      	b.n	801d6a2 <__ieee754_expf+0x72>
 801d724:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 801d728:	d20b      	bcs.n	801d742 <__ieee754_expf+0x112>
 801d72a:	eddf 6a26 	vldr	s13, [pc, #152]	; 801d7c4 <__ieee754_expf+0x194>
 801d72e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801d732:	eef4 6ae5 	vcmpe.f32	s13, s11
 801d736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d73a:	dd02      	ble.n	801d742 <__ieee754_expf+0x112>
 801d73c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801d740:	4770      	bx	lr
 801d742:	2200      	movs	r2, #0
 801d744:	e7af      	b.n	801d6a6 <__ieee754_expf+0x76>
 801d746:	ee76 6a66 	vsub.f32	s13, s12, s13
 801d74a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801d74e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801d752:	bfb8      	it	lt
 801d754:	3264      	addlt	r2, #100	; 0x64
 801d756:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d75a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801d75e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801d762:	ee17 3a90 	vmov	r3, s15
 801d766:	bfab      	itete	ge
 801d768:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801d76c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801d770:	ee00 3a10 	vmovge	s0, r3
 801d774:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801d7c8 <__ieee754_expf+0x198>
 801d778:	bfbc      	itt	lt
 801d77a:	ee00 3a10 	vmovlt	s0, r3
 801d77e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801d782:	4770      	bx	lr
 801d784:	00000000 	.word	0x00000000
 801d788:	42b17217 	.word	0x42b17217
 801d78c:	42cff1b5 	.word	0x42cff1b5
 801d790:	3eb17218 	.word	0x3eb17218
 801d794:	3f851591 	.word	0x3f851591
 801d798:	0802b8a0 	.word	0x0802b8a0
 801d79c:	0802b8a8 	.word	0x0802b8a8
 801d7a0:	3331bb4c 	.word	0x3331bb4c
 801d7a4:	b5ddea0e 	.word	0xb5ddea0e
 801d7a8:	388ab355 	.word	0x388ab355
 801d7ac:	bb360b61 	.word	0xbb360b61
 801d7b0:	3e2aaaab 	.word	0x3e2aaaab
 801d7b4:	0802b898 	.word	0x0802b898
 801d7b8:	3fb8aa3b 	.word	0x3fb8aa3b
 801d7bc:	3f317180 	.word	0x3f317180
 801d7c0:	3717f7d1 	.word	0x3717f7d1
 801d7c4:	7149f2ca 	.word	0x7149f2ca
 801d7c8:	0d800000 	.word	0x0d800000

0801d7cc <__ieee754_powf>:
 801d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7d0:	ee10 4a90 	vmov	r4, s1
 801d7d4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801d7d8:	ed2d 8b02 	vpush	{d8}
 801d7dc:	ee10 6a10 	vmov	r6, s0
 801d7e0:	eeb0 8a40 	vmov.f32	s16, s0
 801d7e4:	eef0 8a60 	vmov.f32	s17, s1
 801d7e8:	d10c      	bne.n	801d804 <__ieee754_powf+0x38>
 801d7ea:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 801d7ee:	0076      	lsls	r6, r6, #1
 801d7f0:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 801d7f4:	f240 8296 	bls.w	801dd24 <__ieee754_powf+0x558>
 801d7f8:	ee38 0a28 	vadd.f32	s0, s16, s17
 801d7fc:	ecbd 8b02 	vpop	{d8}
 801d800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d804:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801d808:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801d80c:	dcf4      	bgt.n	801d7f8 <__ieee754_powf+0x2c>
 801d80e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801d812:	dd08      	ble.n	801d826 <__ieee754_powf+0x5a>
 801d814:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 801d818:	d1ee      	bne.n	801d7f8 <__ieee754_powf+0x2c>
 801d81a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801d81e:	0064      	lsls	r4, r4, #1
 801d820:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801d824:	e7e6      	b.n	801d7f4 <__ieee754_powf+0x28>
 801d826:	2e00      	cmp	r6, #0
 801d828:	da20      	bge.n	801d86c <__ieee754_powf+0xa0>
 801d82a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801d82e:	da2d      	bge.n	801d88c <__ieee754_powf+0xc0>
 801d830:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801d834:	f2c0 827f 	blt.w	801dd36 <__ieee754_powf+0x56a>
 801d838:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801d83c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801d840:	fa48 f703 	asr.w	r7, r8, r3
 801d844:	fa07 f303 	lsl.w	r3, r7, r3
 801d848:	4543      	cmp	r3, r8
 801d84a:	f040 8274 	bne.w	801dd36 <__ieee754_powf+0x56a>
 801d84e:	f007 0701 	and.w	r7, r7, #1
 801d852:	f1c7 0702 	rsb	r7, r7, #2
 801d856:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801d85a:	d11f      	bne.n	801d89c <__ieee754_powf+0xd0>
 801d85c:	2c00      	cmp	r4, #0
 801d85e:	f280 8267 	bge.w	801dd30 <__ieee754_powf+0x564>
 801d862:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d866:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801d86a:	e7c7      	b.n	801d7fc <__ieee754_powf+0x30>
 801d86c:	2700      	movs	r7, #0
 801d86e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801d872:	d1f0      	bne.n	801d856 <__ieee754_powf+0x8a>
 801d874:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801d878:	f000 8254 	beq.w	801dd24 <__ieee754_powf+0x558>
 801d87c:	dd08      	ble.n	801d890 <__ieee754_powf+0xc4>
 801d87e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 801db88 <__ieee754_powf+0x3bc>
 801d882:	2c00      	cmp	r4, #0
 801d884:	bfa8      	it	ge
 801d886:	eeb0 0a68 	vmovge.f32	s0, s17
 801d88a:	e7b7      	b.n	801d7fc <__ieee754_powf+0x30>
 801d88c:	2702      	movs	r7, #2
 801d88e:	e7ee      	b.n	801d86e <__ieee754_powf+0xa2>
 801d890:	2c00      	cmp	r4, #0
 801d892:	f280 824a 	bge.w	801dd2a <__ieee754_powf+0x55e>
 801d896:	eeb1 0a68 	vneg.f32	s0, s17
 801d89a:	e7af      	b.n	801d7fc <__ieee754_powf+0x30>
 801d89c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801d8a0:	d102      	bne.n	801d8a8 <__ieee754_powf+0xdc>
 801d8a2:	ee28 0a08 	vmul.f32	s0, s16, s16
 801d8a6:	e7a9      	b.n	801d7fc <__ieee754_powf+0x30>
 801d8a8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801d8ac:	eeb0 0a48 	vmov.f32	s0, s16
 801d8b0:	d107      	bne.n	801d8c2 <__ieee754_powf+0xf6>
 801d8b2:	2e00      	cmp	r6, #0
 801d8b4:	db05      	blt.n	801d8c2 <__ieee754_powf+0xf6>
 801d8b6:	ecbd 8b02 	vpop	{d8}
 801d8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d8be:	f000 ba53 	b.w	801dd68 <__ieee754_sqrtf>
 801d8c2:	f000 fc5f 	bl	801e184 <fabsf>
 801d8c6:	b125      	cbz	r5, 801d8d2 <__ieee754_powf+0x106>
 801d8c8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 801d8cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801d8d0:	d116      	bne.n	801d900 <__ieee754_powf+0x134>
 801d8d2:	2c00      	cmp	r4, #0
 801d8d4:	bfbc      	itt	lt
 801d8d6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801d8da:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801d8de:	2e00      	cmp	r6, #0
 801d8e0:	da8c      	bge.n	801d7fc <__ieee754_powf+0x30>
 801d8e2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801d8e6:	ea55 0307 	orrs.w	r3, r5, r7
 801d8ea:	d104      	bne.n	801d8f6 <__ieee754_powf+0x12a>
 801d8ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 801d8f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801d8f4:	e782      	b.n	801d7fc <__ieee754_powf+0x30>
 801d8f6:	2f01      	cmp	r7, #1
 801d8f8:	d180      	bne.n	801d7fc <__ieee754_powf+0x30>
 801d8fa:	eeb1 0a40 	vneg.f32	s0, s0
 801d8fe:	e77d      	b.n	801d7fc <__ieee754_powf+0x30>
 801d900:	0ff0      	lsrs	r0, r6, #31
 801d902:	3801      	subs	r0, #1
 801d904:	ea57 0300 	orrs.w	r3, r7, r0
 801d908:	d104      	bne.n	801d914 <__ieee754_powf+0x148>
 801d90a:	ee38 8a48 	vsub.f32	s16, s16, s16
 801d90e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801d912:	e773      	b.n	801d7fc <__ieee754_powf+0x30>
 801d914:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801d918:	dd74      	ble.n	801da04 <__ieee754_powf+0x238>
 801d91a:	4b9c      	ldr	r3, [pc, #624]	; (801db8c <__ieee754_powf+0x3c0>)
 801d91c:	429d      	cmp	r5, r3
 801d91e:	dc08      	bgt.n	801d932 <__ieee754_powf+0x166>
 801d920:	2c00      	cmp	r4, #0
 801d922:	da0b      	bge.n	801d93c <__ieee754_powf+0x170>
 801d924:	2000      	movs	r0, #0
 801d926:	ecbd 8b02 	vpop	{d8}
 801d92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d92e:	f000 ba6b 	b.w	801de08 <__math_oflowf>
 801d932:	4b97      	ldr	r3, [pc, #604]	; (801db90 <__ieee754_powf+0x3c4>)
 801d934:	429d      	cmp	r5, r3
 801d936:	dd08      	ble.n	801d94a <__ieee754_powf+0x17e>
 801d938:	2c00      	cmp	r4, #0
 801d93a:	dcf3      	bgt.n	801d924 <__ieee754_powf+0x158>
 801d93c:	2000      	movs	r0, #0
 801d93e:	ecbd 8b02 	vpop	{d8}
 801d942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d946:	f000 ba59 	b.w	801ddfc <__math_uflowf>
 801d94a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d94e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d952:	eddf 6a90 	vldr	s13, [pc, #576]	; 801db94 <__ieee754_powf+0x3c8>
 801d956:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801d95a:	eee0 6a67 	vfms.f32	s13, s0, s15
 801d95e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d962:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801d966:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d96e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801db98 <__ieee754_powf+0x3cc>
 801d972:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801d976:	ed9f 7a89 	vldr	s14, [pc, #548]	; 801db9c <__ieee754_powf+0x3d0>
 801d97a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d97e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801dba0 <__ieee754_powf+0x3d4>
 801d982:	eef0 6a67 	vmov.f32	s13, s15
 801d986:	eee0 6a07 	vfma.f32	s13, s0, s14
 801d98a:	ee16 3a90 	vmov	r3, s13
 801d98e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801d992:	f023 030f 	bic.w	r3, r3, #15
 801d996:	ee00 3a90 	vmov	s1, r3
 801d99a:	eee0 0a47 	vfms.f32	s1, s0, s14
 801d99e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d9a2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801d9a6:	f024 040f 	bic.w	r4, r4, #15
 801d9aa:	ee07 4a10 	vmov	s14, r4
 801d9ae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801d9b2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801d9b6:	ee07 3a90 	vmov	s15, r3
 801d9ba:	eee7 0a27 	vfma.f32	s1, s14, s15
 801d9be:	3f01      	subs	r7, #1
 801d9c0:	ea57 0200 	orrs.w	r2, r7, r0
 801d9c4:	ee07 4a10 	vmov	s14, r4
 801d9c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d9cc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801d9d0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801d9d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801d9d8:	ee17 4a10 	vmov	r4, s14
 801d9dc:	bf08      	it	eq
 801d9de:	eeb0 8a40 	vmoveq.f32	s16, s0
 801d9e2:	2c00      	cmp	r4, #0
 801d9e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d9e8:	f340 817e 	ble.w	801dce8 <__ieee754_powf+0x51c>
 801d9ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801d9f0:	f340 80f8 	ble.w	801dbe4 <__ieee754_powf+0x418>
 801d9f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801d9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9fc:	bf4c      	ite	mi
 801d9fe:	2001      	movmi	r0, #1
 801da00:	2000      	movpl	r0, #0
 801da02:	e790      	b.n	801d926 <__ieee754_powf+0x15a>
 801da04:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 801da08:	bf01      	itttt	eq
 801da0a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801dba4 <__ieee754_powf+0x3d8>
 801da0e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801da12:	f06f 0217 	mvneq.w	r2, #23
 801da16:	ee17 5a90 	vmoveq	r5, s15
 801da1a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801da1e:	bf18      	it	ne
 801da20:	2200      	movne	r2, #0
 801da22:	3b7f      	subs	r3, #127	; 0x7f
 801da24:	4413      	add	r3, r2
 801da26:	4a60      	ldr	r2, [pc, #384]	; (801dba8 <__ieee754_powf+0x3dc>)
 801da28:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801da2c:	4295      	cmp	r5, r2
 801da2e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801da32:	dd06      	ble.n	801da42 <__ieee754_powf+0x276>
 801da34:	4a5d      	ldr	r2, [pc, #372]	; (801dbac <__ieee754_powf+0x3e0>)
 801da36:	4295      	cmp	r5, r2
 801da38:	f340 80a4 	ble.w	801db84 <__ieee754_powf+0x3b8>
 801da3c:	3301      	adds	r3, #1
 801da3e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801da42:	2500      	movs	r5, #0
 801da44:	4a5a      	ldr	r2, [pc, #360]	; (801dbb0 <__ieee754_powf+0x3e4>)
 801da46:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801da4a:	ee07 1a90 	vmov	s15, r1
 801da4e:	ed92 7a00 	vldr	s14, [r2]
 801da52:	4a58      	ldr	r2, [pc, #352]	; (801dbb4 <__ieee754_powf+0x3e8>)
 801da54:	ee37 6a27 	vadd.f32	s12, s14, s15
 801da58:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801da5c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801da60:	1049      	asrs	r1, r1, #1
 801da62:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801da66:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801da6a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801da6e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801da72:	ee06 1a10 	vmov	s12, r1
 801da76:	ee65 4a26 	vmul.f32	s9, s10, s13
 801da7a:	ee36 7a47 	vsub.f32	s14, s12, s14
 801da7e:	ee14 6a90 	vmov	r6, s9
 801da82:	4016      	ands	r6, r2
 801da84:	ee05 6a90 	vmov	s11, r6
 801da88:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801da8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801da90:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801dbb8 <__ieee754_powf+0x3ec>
 801da94:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801da98:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801da9c:	ee25 6a26 	vmul.f32	s12, s10, s13
 801daa0:	eddf 6a46 	vldr	s13, [pc, #280]	; 801dbbc <__ieee754_powf+0x3f0>
 801daa4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801daa8:	eddf 6a45 	vldr	s13, [pc, #276]	; 801dbc0 <__ieee754_powf+0x3f4>
 801daac:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dab0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801db94 <__ieee754_powf+0x3c8>
 801dab4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dab8:	eddf 6a42 	vldr	s13, [pc, #264]	; 801dbc4 <__ieee754_powf+0x3f8>
 801dabc:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dac0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801dbc8 <__ieee754_powf+0x3fc>
 801dac4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dac8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801dacc:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801dad0:	ee66 6a86 	vmul.f32	s13, s13, s12
 801dad4:	eee5 6a07 	vfma.f32	s13, s10, s14
 801dad8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801dadc:	eef0 7a45 	vmov.f32	s15, s10
 801dae0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801dae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dae8:	ee17 1a90 	vmov	r1, s15
 801daec:	4011      	ands	r1, r2
 801daee:	ee07 1a90 	vmov	s15, r1
 801daf2:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801daf6:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801dafa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801dafe:	ee27 7a24 	vmul.f32	s14, s14, s9
 801db02:	eea6 7a27 	vfma.f32	s14, s12, s15
 801db06:	eeb0 6a47 	vmov.f32	s12, s14
 801db0a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801db0e:	ee16 1a10 	vmov	r1, s12
 801db12:	4011      	ands	r1, r2
 801db14:	ee06 1a90 	vmov	s13, r1
 801db18:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801db1c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801dbcc <__ieee754_powf+0x400>
 801db20:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801dbd0 <__ieee754_powf+0x404>
 801db24:	ee37 7a66 	vsub.f32	s14, s14, s13
 801db28:	ee06 1a10 	vmov	s12, r1
 801db2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801db30:	eddf 7a28 	vldr	s15, [pc, #160]	; 801dbd4 <__ieee754_powf+0x408>
 801db34:	4928      	ldr	r1, [pc, #160]	; (801dbd8 <__ieee754_powf+0x40c>)
 801db36:	eea6 7a27 	vfma.f32	s14, s12, s15
 801db3a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801db3e:	edd1 7a00 	vldr	s15, [r1]
 801db42:	ee37 7a27 	vadd.f32	s14, s14, s15
 801db46:	ee07 3a90 	vmov	s15, r3
 801db4a:	4b24      	ldr	r3, [pc, #144]	; (801dbdc <__ieee754_powf+0x410>)
 801db4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801db50:	eef0 7a47 	vmov.f32	s15, s14
 801db54:	eee6 7a25 	vfma.f32	s15, s12, s11
 801db58:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801db5c:	edd5 0a00 	vldr	s1, [r5]
 801db60:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801db64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db68:	ee17 3a90 	vmov	r3, s15
 801db6c:	4013      	ands	r3, r2
 801db6e:	ee07 3a90 	vmov	s15, r3
 801db72:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801db76:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801db7a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801db7e:	ee77 7a66 	vsub.f32	s15, s14, s13
 801db82:	e70e      	b.n	801d9a2 <__ieee754_powf+0x1d6>
 801db84:	2501      	movs	r5, #1
 801db86:	e75d      	b.n	801da44 <__ieee754_powf+0x278>
 801db88:	00000000 	.word	0x00000000
 801db8c:	3f7ffff3 	.word	0x3f7ffff3
 801db90:	3f800007 	.word	0x3f800007
 801db94:	3eaaaaab 	.word	0x3eaaaaab
 801db98:	3fb8aa3b 	.word	0x3fb8aa3b
 801db9c:	36eca570 	.word	0x36eca570
 801dba0:	3fb8aa00 	.word	0x3fb8aa00
 801dba4:	4b800000 	.word	0x4b800000
 801dba8:	001cc471 	.word	0x001cc471
 801dbac:	005db3d6 	.word	0x005db3d6
 801dbb0:	0802b8b0 	.word	0x0802b8b0
 801dbb4:	fffff000 	.word	0xfffff000
 801dbb8:	3e6c3255 	.word	0x3e6c3255
 801dbbc:	3e53f142 	.word	0x3e53f142
 801dbc0:	3e8ba305 	.word	0x3e8ba305
 801dbc4:	3edb6db7 	.word	0x3edb6db7
 801dbc8:	3f19999a 	.word	0x3f19999a
 801dbcc:	3f76384f 	.word	0x3f76384f
 801dbd0:	3f763800 	.word	0x3f763800
 801dbd4:	369dc3a0 	.word	0x369dc3a0
 801dbd8:	0802b8c0 	.word	0x0802b8c0
 801dbdc:	0802b8b8 	.word	0x0802b8b8
 801dbe0:	3338aa3c 	.word	0x3338aa3c
 801dbe4:	f040 8095 	bne.w	801dd12 <__ieee754_powf+0x546>
 801dbe8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801dbe0 <__ieee754_powf+0x414>
 801dbec:	ee37 7a67 	vsub.f32	s14, s14, s15
 801dbf0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801dbf4:	eef4 6ac7 	vcmpe.f32	s13, s14
 801dbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbfc:	f73f aefa 	bgt.w	801d9f4 <__ieee754_powf+0x228>
 801dc00:	15db      	asrs	r3, r3, #23
 801dc02:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801dc06:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801dc0a:	4103      	asrs	r3, r0
 801dc0c:	4423      	add	r3, r4
 801dc0e:	494b      	ldr	r1, [pc, #300]	; (801dd3c <__ieee754_powf+0x570>)
 801dc10:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801dc14:	3a7f      	subs	r2, #127	; 0x7f
 801dc16:	4111      	asrs	r1, r2
 801dc18:	ea23 0101 	bic.w	r1, r3, r1
 801dc1c:	ee07 1a10 	vmov	s14, r1
 801dc20:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801dc24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801dc28:	f1c2 0217 	rsb	r2, r2, #23
 801dc2c:	4110      	asrs	r0, r2
 801dc2e:	2c00      	cmp	r4, #0
 801dc30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dc34:	bfb8      	it	lt
 801dc36:	4240      	neglt	r0, r0
 801dc38:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801dc3c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 801dd40 <__ieee754_powf+0x574>
 801dc40:	eddf 6a40 	vldr	s13, [pc, #256]	; 801dd44 <__ieee754_powf+0x578>
 801dc44:	ee17 3a10 	vmov	r3, s14
 801dc48:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801dc4c:	f023 030f 	bic.w	r3, r3, #15
 801dc50:	ee07 3a10 	vmov	s14, r3
 801dc54:	ee77 7a67 	vsub.f32	s15, s14, s15
 801dc58:	ee27 0a00 	vmul.f32	s0, s14, s0
 801dc5c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801dc60:	eddf 7a39 	vldr	s15, [pc, #228]	; 801dd48 <__ieee754_powf+0x57c>
 801dc64:	eea0 0aa7 	vfma.f32	s0, s1, s15
 801dc68:	eef0 7a40 	vmov.f32	s15, s0
 801dc6c:	eee7 7a26 	vfma.f32	s15, s14, s13
 801dc70:	eeb0 6a67 	vmov.f32	s12, s15
 801dc74:	eea7 6a66 	vfms.f32	s12, s14, s13
 801dc78:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801dc7c:	ee30 0a46 	vsub.f32	s0, s0, s12
 801dc80:	eddf 6a32 	vldr	s13, [pc, #200]	; 801dd4c <__ieee754_powf+0x580>
 801dc84:	ed9f 6a32 	vldr	s12, [pc, #200]	; 801dd50 <__ieee754_powf+0x584>
 801dc88:	eee7 6a06 	vfma.f32	s13, s14, s12
 801dc8c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801dd54 <__ieee754_powf+0x588>
 801dc90:	eea6 6a87 	vfma.f32	s12, s13, s14
 801dc94:	eddf 6a30 	vldr	s13, [pc, #192]	; 801dd58 <__ieee754_powf+0x58c>
 801dc98:	eee6 6a07 	vfma.f32	s13, s12, s14
 801dc9c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801dd5c <__ieee754_powf+0x590>
 801dca0:	eea6 6a87 	vfma.f32	s12, s13, s14
 801dca4:	eef0 6a67 	vmov.f32	s13, s15
 801dca8:	eee6 6a47 	vfms.f32	s13, s12, s14
 801dcac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801dcb0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801dcb4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801dcb8:	eea7 0a80 	vfma.f32	s0, s15, s0
 801dcbc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801dcc0:	ee37 0a40 	vsub.f32	s0, s14, s0
 801dcc4:	ee70 7a67 	vsub.f32	s15, s0, s15
 801dcc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801dccc:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dcd0:	ee10 3a10 	vmov	r3, s0
 801dcd4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801dcd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801dcdc:	da1f      	bge.n	801dd1e <__ieee754_powf+0x552>
 801dcde:	f000 fa65 	bl	801e1ac <scalbnf>
 801dce2:	ee20 0a08 	vmul.f32	s0, s0, s16
 801dce6:	e589      	b.n	801d7fc <__ieee754_powf+0x30>
 801dce8:	4a1d      	ldr	r2, [pc, #116]	; (801dd60 <__ieee754_powf+0x594>)
 801dcea:	4293      	cmp	r3, r2
 801dcec:	dd07      	ble.n	801dcfe <__ieee754_powf+0x532>
 801dcee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801dcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcf6:	bf4c      	ite	mi
 801dcf8:	2001      	movmi	r0, #1
 801dcfa:	2000      	movpl	r0, #0
 801dcfc:	e61f      	b.n	801d93e <__ieee754_powf+0x172>
 801dcfe:	d108      	bne.n	801dd12 <__ieee754_powf+0x546>
 801dd00:	ee37 7a67 	vsub.f32	s14, s14, s15
 801dd04:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801dd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd0c:	f6ff af78 	blt.w	801dc00 <__ieee754_powf+0x434>
 801dd10:	e7ed      	b.n	801dcee <__ieee754_powf+0x522>
 801dd12:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801dd16:	f73f af73 	bgt.w	801dc00 <__ieee754_powf+0x434>
 801dd1a:	2000      	movs	r0, #0
 801dd1c:	e78c      	b.n	801dc38 <__ieee754_powf+0x46c>
 801dd1e:	ee00 3a10 	vmov	s0, r3
 801dd22:	e7de      	b.n	801dce2 <__ieee754_powf+0x516>
 801dd24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801dd28:	e568      	b.n	801d7fc <__ieee754_powf+0x30>
 801dd2a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801dd64 <__ieee754_powf+0x598>
 801dd2e:	e565      	b.n	801d7fc <__ieee754_powf+0x30>
 801dd30:	eeb0 0a48 	vmov.f32	s0, s16
 801dd34:	e562      	b.n	801d7fc <__ieee754_powf+0x30>
 801dd36:	2700      	movs	r7, #0
 801dd38:	e58d      	b.n	801d856 <__ieee754_powf+0x8a>
 801dd3a:	bf00      	nop
 801dd3c:	007fffff 	.word	0x007fffff
 801dd40:	35bfbe8c 	.word	0x35bfbe8c
 801dd44:	3f317200 	.word	0x3f317200
 801dd48:	3f317218 	.word	0x3f317218
 801dd4c:	b5ddea0e 	.word	0xb5ddea0e
 801dd50:	3331bb4c 	.word	0x3331bb4c
 801dd54:	388ab355 	.word	0x388ab355
 801dd58:	bb360b61 	.word	0xbb360b61
 801dd5c:	3e2aaaab 	.word	0x3e2aaaab
 801dd60:	43160000 	.word	0x43160000
 801dd64:	00000000 	.word	0x00000000

0801dd68 <__ieee754_sqrtf>:
 801dd68:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801dd6c:	4770      	bx	lr

0801dd6e <with_errno>:
 801dd6e:	b570      	push	{r4, r5, r6, lr}
 801dd70:	4604      	mov	r4, r0
 801dd72:	460d      	mov	r5, r1
 801dd74:	4616      	mov	r6, r2
 801dd76:	f7fd fac1 	bl	801b2fc <__errno>
 801dd7a:	4629      	mov	r1, r5
 801dd7c:	6006      	str	r6, [r0, #0]
 801dd7e:	4620      	mov	r0, r4
 801dd80:	bd70      	pop	{r4, r5, r6, pc}

0801dd82 <xflow>:
 801dd82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dd84:	4614      	mov	r4, r2
 801dd86:	461d      	mov	r5, r3
 801dd88:	b108      	cbz	r0, 801dd8e <xflow+0xc>
 801dd8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801dd8e:	e9cd 2300 	strd	r2, r3, [sp]
 801dd92:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dd96:	4620      	mov	r0, r4
 801dd98:	4629      	mov	r1, r5
 801dd9a:	f7e2 fc45 	bl	8000628 <__aeabi_dmul>
 801dd9e:	2222      	movs	r2, #34	; 0x22
 801dda0:	b003      	add	sp, #12
 801dda2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dda6:	f7ff bfe2 	b.w	801dd6e <with_errno>

0801ddaa <__math_uflow>:
 801ddaa:	b508      	push	{r3, lr}
 801ddac:	2200      	movs	r2, #0
 801ddae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ddb2:	f7ff ffe6 	bl	801dd82 <xflow>
 801ddb6:	ec41 0b10 	vmov	d0, r0, r1
 801ddba:	bd08      	pop	{r3, pc}

0801ddbc <__math_oflow>:
 801ddbc:	b508      	push	{r3, lr}
 801ddbe:	2200      	movs	r2, #0
 801ddc0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801ddc4:	f7ff ffdd 	bl	801dd82 <xflow>
 801ddc8:	ec41 0b10 	vmov	d0, r0, r1
 801ddcc:	bd08      	pop	{r3, pc}

0801ddce <with_errnof>:
 801ddce:	b513      	push	{r0, r1, r4, lr}
 801ddd0:	4604      	mov	r4, r0
 801ddd2:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ddd6:	f7fd fa91 	bl	801b2fc <__errno>
 801ddda:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ddde:	6004      	str	r4, [r0, #0]
 801dde0:	b002      	add	sp, #8
 801dde2:	bd10      	pop	{r4, pc}

0801dde4 <xflowf>:
 801dde4:	b130      	cbz	r0, 801ddf4 <xflowf+0x10>
 801dde6:	eef1 7a40 	vneg.f32	s15, s0
 801ddea:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ddee:	2022      	movs	r0, #34	; 0x22
 801ddf0:	f7ff bfed 	b.w	801ddce <with_errnof>
 801ddf4:	eef0 7a40 	vmov.f32	s15, s0
 801ddf8:	e7f7      	b.n	801ddea <xflowf+0x6>
	...

0801ddfc <__math_uflowf>:
 801ddfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801de04 <__math_uflowf+0x8>
 801de00:	f7ff bff0 	b.w	801dde4 <xflowf>
 801de04:	10000000 	.word	0x10000000

0801de08 <__math_oflowf>:
 801de08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801de10 <__math_oflowf+0x8>
 801de0c:	f7ff bfea 	b.w	801dde4 <xflowf>
 801de10:	70000000 	.word	0x70000000

0801de14 <fabs>:
 801de14:	ec51 0b10 	vmov	r0, r1, d0
 801de18:	ee10 2a10 	vmov	r2, s0
 801de1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801de20:	ec43 2b10 	vmov	d0, r2, r3
 801de24:	4770      	bx	lr

0801de26 <finite>:
 801de26:	b082      	sub	sp, #8
 801de28:	ed8d 0b00 	vstr	d0, [sp]
 801de2c:	9801      	ldr	r0, [sp, #4]
 801de2e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801de32:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801de36:	0fc0      	lsrs	r0, r0, #31
 801de38:	b002      	add	sp, #8
 801de3a:	4770      	bx	lr
 801de3c:	0000      	movs	r0, r0
	...

0801de40 <scalbn>:
 801de40:	b570      	push	{r4, r5, r6, lr}
 801de42:	ec55 4b10 	vmov	r4, r5, d0
 801de46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801de4a:	4606      	mov	r6, r0
 801de4c:	462b      	mov	r3, r5
 801de4e:	b99a      	cbnz	r2, 801de78 <scalbn+0x38>
 801de50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801de54:	4323      	orrs	r3, r4
 801de56:	d036      	beq.n	801dec6 <scalbn+0x86>
 801de58:	4b39      	ldr	r3, [pc, #228]	; (801df40 <scalbn+0x100>)
 801de5a:	4629      	mov	r1, r5
 801de5c:	ee10 0a10 	vmov	r0, s0
 801de60:	2200      	movs	r2, #0
 801de62:	f7e2 fbe1 	bl	8000628 <__aeabi_dmul>
 801de66:	4b37      	ldr	r3, [pc, #220]	; (801df44 <scalbn+0x104>)
 801de68:	429e      	cmp	r6, r3
 801de6a:	4604      	mov	r4, r0
 801de6c:	460d      	mov	r5, r1
 801de6e:	da10      	bge.n	801de92 <scalbn+0x52>
 801de70:	a32b      	add	r3, pc, #172	; (adr r3, 801df20 <scalbn+0xe0>)
 801de72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de76:	e03a      	b.n	801deee <scalbn+0xae>
 801de78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801de7c:	428a      	cmp	r2, r1
 801de7e:	d10c      	bne.n	801de9a <scalbn+0x5a>
 801de80:	ee10 2a10 	vmov	r2, s0
 801de84:	4620      	mov	r0, r4
 801de86:	4629      	mov	r1, r5
 801de88:	f7e2 fa18 	bl	80002bc <__adddf3>
 801de8c:	4604      	mov	r4, r0
 801de8e:	460d      	mov	r5, r1
 801de90:	e019      	b.n	801dec6 <scalbn+0x86>
 801de92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801de96:	460b      	mov	r3, r1
 801de98:	3a36      	subs	r2, #54	; 0x36
 801de9a:	4432      	add	r2, r6
 801de9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801dea0:	428a      	cmp	r2, r1
 801dea2:	dd08      	ble.n	801deb6 <scalbn+0x76>
 801dea4:	2d00      	cmp	r5, #0
 801dea6:	a120      	add	r1, pc, #128	; (adr r1, 801df28 <scalbn+0xe8>)
 801dea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801deac:	da1c      	bge.n	801dee8 <scalbn+0xa8>
 801deae:	a120      	add	r1, pc, #128	; (adr r1, 801df30 <scalbn+0xf0>)
 801deb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801deb4:	e018      	b.n	801dee8 <scalbn+0xa8>
 801deb6:	2a00      	cmp	r2, #0
 801deb8:	dd08      	ble.n	801decc <scalbn+0x8c>
 801deba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801debe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801dec2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801dec6:	ec45 4b10 	vmov	d0, r4, r5
 801deca:	bd70      	pop	{r4, r5, r6, pc}
 801decc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ded0:	da19      	bge.n	801df06 <scalbn+0xc6>
 801ded2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ded6:	429e      	cmp	r6, r3
 801ded8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801dedc:	dd0a      	ble.n	801def4 <scalbn+0xb4>
 801dede:	a112      	add	r1, pc, #72	; (adr r1, 801df28 <scalbn+0xe8>)
 801dee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dee4:	2b00      	cmp	r3, #0
 801dee6:	d1e2      	bne.n	801deae <scalbn+0x6e>
 801dee8:	a30f      	add	r3, pc, #60	; (adr r3, 801df28 <scalbn+0xe8>)
 801deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801deee:	f7e2 fb9b 	bl	8000628 <__aeabi_dmul>
 801def2:	e7cb      	b.n	801de8c <scalbn+0x4c>
 801def4:	a10a      	add	r1, pc, #40	; (adr r1, 801df20 <scalbn+0xe0>)
 801def6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801defa:	2b00      	cmp	r3, #0
 801defc:	d0b8      	beq.n	801de70 <scalbn+0x30>
 801defe:	a10e      	add	r1, pc, #56	; (adr r1, 801df38 <scalbn+0xf8>)
 801df00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801df04:	e7b4      	b.n	801de70 <scalbn+0x30>
 801df06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801df0a:	3236      	adds	r2, #54	; 0x36
 801df0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801df10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801df14:	4620      	mov	r0, r4
 801df16:	4b0c      	ldr	r3, [pc, #48]	; (801df48 <scalbn+0x108>)
 801df18:	2200      	movs	r2, #0
 801df1a:	e7e8      	b.n	801deee <scalbn+0xae>
 801df1c:	f3af 8000 	nop.w
 801df20:	c2f8f359 	.word	0xc2f8f359
 801df24:	01a56e1f 	.word	0x01a56e1f
 801df28:	8800759c 	.word	0x8800759c
 801df2c:	7e37e43c 	.word	0x7e37e43c
 801df30:	8800759c 	.word	0x8800759c
 801df34:	fe37e43c 	.word	0xfe37e43c
 801df38:	c2f8f359 	.word	0xc2f8f359
 801df3c:	81a56e1f 	.word	0x81a56e1f
 801df40:	43500000 	.word	0x43500000
 801df44:	ffff3cb0 	.word	0xffff3cb0
 801df48:	3c900000 	.word	0x3c900000

0801df4c <expm1f>:
 801df4c:	ee10 2a10 	vmov	r2, s0
 801df50:	497d      	ldr	r1, [pc, #500]	; (801e148 <expm1f+0x1fc>)
 801df52:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801df56:	428b      	cmp	r3, r1
 801df58:	d921      	bls.n	801df9e <expm1f+0x52>
 801df5a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801df5e:	d902      	bls.n	801df66 <expm1f+0x1a>
 801df60:	ee30 0a00 	vadd.f32	s0, s0, s0
 801df64:	4770      	bx	lr
 801df66:	d106      	bne.n	801df76 <expm1f+0x2a>
 801df68:	2a00      	cmp	r2, #0
 801df6a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801df6e:	bfb8      	it	lt
 801df70:	eeb0 0a67 	vmovlt.f32	s0, s15
 801df74:	4770      	bx	lr
 801df76:	2a00      	cmp	r2, #0
 801df78:	db05      	blt.n	801df86 <expm1f+0x3a>
 801df7a:	4974      	ldr	r1, [pc, #464]	; (801e14c <expm1f+0x200>)
 801df7c:	428b      	cmp	r3, r1
 801df7e:	d95c      	bls.n	801e03a <expm1f+0xee>
 801df80:	2000      	movs	r0, #0
 801df82:	f7ff bf41 	b.w	801de08 <__math_oflowf>
 801df86:	eddf 7a72 	vldr	s15, [pc, #456]	; 801e150 <expm1f+0x204>
 801df8a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801df8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801df92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df96:	d550      	bpl.n	801e03a <expm1f+0xee>
 801df98:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801df9c:	4770      	bx	lr
 801df9e:	496d      	ldr	r1, [pc, #436]	; (801e154 <expm1f+0x208>)
 801dfa0:	428b      	cmp	r3, r1
 801dfa2:	d967      	bls.n	801e074 <expm1f+0x128>
 801dfa4:	496c      	ldr	r1, [pc, #432]	; (801e158 <expm1f+0x20c>)
 801dfa6:	428b      	cmp	r3, r1
 801dfa8:	d847      	bhi.n	801e03a <expm1f+0xee>
 801dfaa:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801e15c <expm1f+0x210>
 801dfae:	2a00      	cmp	r2, #0
 801dfb0:	bfa7      	ittee	ge
 801dfb2:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801dfb6:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 801e160 <expm1f+0x214>
 801dfba:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 801e164 <expm1f+0x218>
 801dfbe:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801dfc2:	bfac      	ite	ge
 801dfc4:	2301      	movge	r3, #1
 801dfc6:	f04f 33ff 	movlt.w	r3, #4294967295
 801dfca:	ee37 0a67 	vsub.f32	s0, s14, s15
 801dfce:	ee37 7a40 	vsub.f32	s14, s14, s0
 801dfd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801dfd6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801dfda:	ee20 4a25 	vmul.f32	s8, s0, s11
 801dfde:	ed9f 6a62 	vldr	s12, [pc, #392]	; 801e168 <expm1f+0x21c>
 801dfe2:	eddf 6a62 	vldr	s13, [pc, #392]	; 801e16c <expm1f+0x220>
 801dfe6:	ed9f 5a62 	vldr	s10, [pc, #392]	; 801e170 <expm1f+0x224>
 801dfea:	ee20 7a04 	vmul.f32	s14, s0, s8
 801dfee:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801dff2:	eee7 6a06 	vfma.f32	s13, s14, s12
 801dff6:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 801e174 <expm1f+0x228>
 801dffa:	eea6 6a87 	vfma.f32	s12, s13, s14
 801dffe:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801e178 <expm1f+0x22c>
 801e002:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e006:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801e00a:	eea6 5a87 	vfma.f32	s10, s13, s14
 801e00e:	eef0 6a46 	vmov.f32	s13, s12
 801e012:	eee5 6a07 	vfma.f32	s13, s10, s14
 801e016:	eee4 4a66 	vfms.f32	s9, s8, s13
 801e01a:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801e01e:	eea0 4a64 	vfms.f32	s8, s0, s9
 801e022:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801e026:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801e02a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801e02e:	bb7b      	cbnz	r3, 801e090 <expm1f+0x144>
 801e030:	eef0 7a47 	vmov.f32	s15, s14
 801e034:	eed0 7a26 	vfnms.f32	s15, s0, s13
 801e038:	e025      	b.n	801e086 <expm1f+0x13a>
 801e03a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801e03e:	2a00      	cmp	r2, #0
 801e040:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e044:	bfb8      	it	lt
 801e046:	eef0 7a47 	vmovlt.f32	s15, s14
 801e04a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801e17c <expm1f+0x230>
 801e04e:	eddf 6a43 	vldr	s13, [pc, #268]	; 801e15c <expm1f+0x210>
 801e052:	ee40 7a07 	vmla.f32	s15, s0, s14
 801e056:	eeb0 7a40 	vmov.f32	s14, s0
 801e05a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e05e:	ee17 3a90 	vmov	r3, s15
 801e062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e066:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801e06a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801e160 <expm1f+0x214>
 801e06e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e072:	e7aa      	b.n	801dfca <expm1f+0x7e>
 801e074:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801e078:	d208      	bcs.n	801e08c <expm1f+0x140>
 801e07a:	eddf 7a41 	vldr	s15, [pc, #260]	; 801e180 <expm1f+0x234>
 801e07e:	ee70 7a27 	vadd.f32	s15, s0, s15
 801e082:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801e086:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e08a:	4770      	bx	lr
 801e08c:	2300      	movs	r3, #0
 801e08e:	e7a2      	b.n	801dfd6 <expm1f+0x8a>
 801e090:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801e094:	1c5a      	adds	r2, r3, #1
 801e096:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801e09a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e09e:	d106      	bne.n	801e0ae <expm1f+0x162>
 801e0a0:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e0a4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801e0a8:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801e0ac:	4770      	bx	lr
 801e0ae:	2b01      	cmp	r3, #1
 801e0b0:	d118      	bne.n	801e0e4 <expm1f+0x198>
 801e0b2:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801e0b6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801e0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0be:	bf5b      	ittet	pl
 801e0c0:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801e0c4:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801e0c8:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801e0cc:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801e0d0:	bf43      	ittte	mi
 801e0d2:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 801e0d6:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801e0da:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801e0de:	eeb0 0a46 	vmovpl.f32	s0, s12
 801e0e2:	4770      	bx	lr
 801e0e4:	1c5a      	adds	r2, r3, #1
 801e0e6:	2a39      	cmp	r2, #57	; 0x39
 801e0e8:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801e0ec:	d90b      	bls.n	801e106 <expm1f+0x1ba>
 801e0ee:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801e0f2:	ee36 0a40 	vsub.f32	s0, s12, s0
 801e0f6:	ee10 3a10 	vmov	r3, s0
 801e0fa:	440b      	add	r3, r1
 801e0fc:	ee00 3a10 	vmov	s0, r3
 801e100:	ee30 0a46 	vsub.f32	s0, s0, s12
 801e104:	4770      	bx	lr
 801e106:	2b16      	cmp	r3, #22
 801e108:	dc11      	bgt.n	801e12e <expm1f+0x1e2>
 801e10a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801e10e:	fa42 f303 	asr.w	r3, r2, r3
 801e112:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801e116:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801e11a:	ee07 3a90 	vmov	s15, r3
 801e11e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801e122:	ee10 3a10 	vmov	r3, s0
 801e126:	440b      	add	r3, r1
 801e128:	ee00 3a10 	vmov	s0, r3
 801e12c:	4770      	bx	lr
 801e12e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801e132:	05db      	lsls	r3, r3, #23
 801e134:	ee07 3a10 	vmov	s14, r3
 801e138:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e13c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e140:	ee37 0a86 	vadd.f32	s0, s15, s12
 801e144:	e7ed      	b.n	801e122 <expm1f+0x1d6>
 801e146:	bf00      	nop
 801e148:	4195b843 	.word	0x4195b843
 801e14c:	42b17217 	.word	0x42b17217
 801e150:	0da24260 	.word	0x0da24260
 801e154:	3eb17218 	.word	0x3eb17218
 801e158:	3f851591 	.word	0x3f851591
 801e15c:	3f317180 	.word	0x3f317180
 801e160:	3717f7d1 	.word	0x3717f7d1
 801e164:	b717f7d1 	.word	0xb717f7d1
 801e168:	b457edbb 	.word	0xb457edbb
 801e16c:	36867e54 	.word	0x36867e54
 801e170:	bd088889 	.word	0xbd088889
 801e174:	b8a670cd 	.word	0xb8a670cd
 801e178:	3ad00d01 	.word	0x3ad00d01
 801e17c:	3fb8aa3b 	.word	0x3fb8aa3b
 801e180:	7149f2ca 	.word	0x7149f2ca

0801e184 <fabsf>:
 801e184:	ee10 3a10 	vmov	r3, s0
 801e188:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e18c:	ee00 3a10 	vmov	s0, r3
 801e190:	4770      	bx	lr

0801e192 <finitef>:
 801e192:	b082      	sub	sp, #8
 801e194:	ed8d 0a01 	vstr	s0, [sp, #4]
 801e198:	9801      	ldr	r0, [sp, #4]
 801e19a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e19e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801e1a2:	bfac      	ite	ge
 801e1a4:	2000      	movge	r0, #0
 801e1a6:	2001      	movlt	r0, #1
 801e1a8:	b002      	add	sp, #8
 801e1aa:	4770      	bx	lr

0801e1ac <scalbnf>:
 801e1ac:	ee10 3a10 	vmov	r3, s0
 801e1b0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801e1b4:	d025      	beq.n	801e202 <scalbnf+0x56>
 801e1b6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801e1ba:	d302      	bcc.n	801e1c2 <scalbnf+0x16>
 801e1bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e1c0:	4770      	bx	lr
 801e1c2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801e1c6:	d122      	bne.n	801e20e <scalbnf+0x62>
 801e1c8:	4b2a      	ldr	r3, [pc, #168]	; (801e274 <scalbnf+0xc8>)
 801e1ca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801e278 <scalbnf+0xcc>
 801e1ce:	4298      	cmp	r0, r3
 801e1d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e1d4:	db16      	blt.n	801e204 <scalbnf+0x58>
 801e1d6:	ee10 3a10 	vmov	r3, s0
 801e1da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e1de:	3a19      	subs	r2, #25
 801e1e0:	4402      	add	r2, r0
 801e1e2:	2afe      	cmp	r2, #254	; 0xfe
 801e1e4:	dd15      	ble.n	801e212 <scalbnf+0x66>
 801e1e6:	ee10 3a10 	vmov	r3, s0
 801e1ea:	eddf 7a24 	vldr	s15, [pc, #144]	; 801e27c <scalbnf+0xd0>
 801e1ee:	eddf 6a24 	vldr	s13, [pc, #144]	; 801e280 <scalbnf+0xd4>
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	eeb0 7a67 	vmov.f32	s14, s15
 801e1f8:	bfb8      	it	lt
 801e1fa:	eef0 7a66 	vmovlt.f32	s15, s13
 801e1fe:	ee27 0a27 	vmul.f32	s0, s14, s15
 801e202:	4770      	bx	lr
 801e204:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801e284 <scalbnf+0xd8>
 801e208:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e20c:	4770      	bx	lr
 801e20e:	0dd2      	lsrs	r2, r2, #23
 801e210:	e7e6      	b.n	801e1e0 <scalbnf+0x34>
 801e212:	2a00      	cmp	r2, #0
 801e214:	dd06      	ble.n	801e224 <scalbnf+0x78>
 801e216:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e21a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801e21e:	ee00 3a10 	vmov	s0, r3
 801e222:	4770      	bx	lr
 801e224:	f112 0f16 	cmn.w	r2, #22
 801e228:	da1a      	bge.n	801e260 <scalbnf+0xb4>
 801e22a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801e22e:	4298      	cmp	r0, r3
 801e230:	ee10 3a10 	vmov	r3, s0
 801e234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e238:	dd0a      	ble.n	801e250 <scalbnf+0xa4>
 801e23a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801e27c <scalbnf+0xd0>
 801e23e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801e280 <scalbnf+0xd4>
 801e242:	eef0 7a40 	vmov.f32	s15, s0
 801e246:	2b00      	cmp	r3, #0
 801e248:	bf18      	it	ne
 801e24a:	eeb0 0a47 	vmovne.f32	s0, s14
 801e24e:	e7db      	b.n	801e208 <scalbnf+0x5c>
 801e250:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801e284 <scalbnf+0xd8>
 801e254:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801e288 <scalbnf+0xdc>
 801e258:	eef0 7a40 	vmov.f32	s15, s0
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	e7f3      	b.n	801e248 <scalbnf+0x9c>
 801e260:	3219      	adds	r2, #25
 801e262:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e266:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801e26a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801e28c <scalbnf+0xe0>
 801e26e:	ee07 3a10 	vmov	s14, r3
 801e272:	e7c4      	b.n	801e1fe <scalbnf+0x52>
 801e274:	ffff3cb0 	.word	0xffff3cb0
 801e278:	4c000000 	.word	0x4c000000
 801e27c:	7149f2ca 	.word	0x7149f2ca
 801e280:	f149f2ca 	.word	0xf149f2ca
 801e284:	0da24260 	.word	0x0da24260
 801e288:	8da24260 	.word	0x8da24260
 801e28c:	33000000 	.word	0x33000000

0801e290 <_close>:
 801e290:	4b02      	ldr	r3, [pc, #8]	; (801e29c <_close+0xc>)
 801e292:	2258      	movs	r2, #88	; 0x58
 801e294:	601a      	str	r2, [r3, #0]
 801e296:	f04f 30ff 	mov.w	r0, #4294967295
 801e29a:	4770      	bx	lr
 801e29c:	20004604 	.word	0x20004604

0801e2a0 <_fstat>:
 801e2a0:	4b02      	ldr	r3, [pc, #8]	; (801e2ac <_fstat+0xc>)
 801e2a2:	2258      	movs	r2, #88	; 0x58
 801e2a4:	601a      	str	r2, [r3, #0]
 801e2a6:	f04f 30ff 	mov.w	r0, #4294967295
 801e2aa:	4770      	bx	lr
 801e2ac:	20004604 	.word	0x20004604

0801e2b0 <_isatty>:
 801e2b0:	4b02      	ldr	r3, [pc, #8]	; (801e2bc <_isatty+0xc>)
 801e2b2:	2258      	movs	r2, #88	; 0x58
 801e2b4:	601a      	str	r2, [r3, #0]
 801e2b6:	2000      	movs	r0, #0
 801e2b8:	4770      	bx	lr
 801e2ba:	bf00      	nop
 801e2bc:	20004604 	.word	0x20004604

0801e2c0 <_lseek>:
 801e2c0:	4b02      	ldr	r3, [pc, #8]	; (801e2cc <_lseek+0xc>)
 801e2c2:	2258      	movs	r2, #88	; 0x58
 801e2c4:	601a      	str	r2, [r3, #0]
 801e2c6:	f04f 30ff 	mov.w	r0, #4294967295
 801e2ca:	4770      	bx	lr
 801e2cc:	20004604 	.word	0x20004604

0801e2d0 <_read>:
 801e2d0:	4b02      	ldr	r3, [pc, #8]	; (801e2dc <_read+0xc>)
 801e2d2:	2258      	movs	r2, #88	; 0x58
 801e2d4:	601a      	str	r2, [r3, #0]
 801e2d6:	f04f 30ff 	mov.w	r0, #4294967295
 801e2da:	4770      	bx	lr
 801e2dc:	20004604 	.word	0x20004604

0801e2e0 <_write>:
 801e2e0:	4b02      	ldr	r3, [pc, #8]	; (801e2ec <_write+0xc>)
 801e2e2:	2258      	movs	r2, #88	; 0x58
 801e2e4:	601a      	str	r2, [r3, #0]
 801e2e6:	f04f 30ff 	mov.w	r0, #4294967295
 801e2ea:	4770      	bx	lr
 801e2ec:	20004604 	.word	0x20004604

0801e2f0 <_init>:
 801e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2f2:	bf00      	nop
 801e2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e2f6:	bc08      	pop	{r3}
 801e2f8:	469e      	mov	lr, r3
 801e2fa:	4770      	bx	lr

0801e2fc <_fini>:
 801e2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2fe:	bf00      	nop
 801e300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e302:	bc08      	pop	{r3}
 801e304:	469e      	mov	lr, r3
 801e306:	4770      	bx	lr
