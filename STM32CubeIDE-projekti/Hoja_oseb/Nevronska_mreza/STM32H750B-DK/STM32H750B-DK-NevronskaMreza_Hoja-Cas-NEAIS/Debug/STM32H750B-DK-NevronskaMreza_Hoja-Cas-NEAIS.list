
STM32H750B-DK-NevronskaMreza_Hoja-Cas-NEAIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d34c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0800d5f0  0800d5f0  0001d5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e028  0800e028  0001e028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e02c  0800e02c  0001e02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000336c  24000000  0800e030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001ea4  2400336c  0801139c  0002336c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24005210  0801139c  00025210  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002336c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001aa43  00000000  00000000  0002339a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003797  00000000  00000000  0003dddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000014c0  00000000  00000000  00041578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001338  00000000  00000000  00042a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c155  00000000  00000000  00043d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001eb1f  00000000  00000000  0007fec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00175b5b  00000000  00000000  0009e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000c9  00000000  00000000  0021453f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005df4  00000000  00000000  00214608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400336c 	.word	0x2400336c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d5d4 	.word	0x0800d5d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003370 	.word	0x24003370
 80002dc:	0800d5d4 	.word	0x0800d5d4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2f>:
 8000708:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800070c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000710:	bf24      	itt	cs
 8000712:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000716:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800071a:	d90d      	bls.n	8000738 <__aeabi_d2f+0x30>
 800071c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000720:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000724:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000728:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800072c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000730:	bf08      	it	eq
 8000732:	f020 0001 	biceq.w	r0, r0, #1
 8000736:	4770      	bx	lr
 8000738:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800073c:	d121      	bne.n	8000782 <__aeabi_d2f+0x7a>
 800073e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000742:	bfbc      	itt	lt
 8000744:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000748:	4770      	bxlt	lr
 800074a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000752:	f1c2 0218 	rsb	r2, r2, #24
 8000756:	f1c2 0c20 	rsb	ip, r2, #32
 800075a:	fa10 f30c 	lsls.w	r3, r0, ip
 800075e:	fa20 f002 	lsr.w	r0, r0, r2
 8000762:	bf18      	it	ne
 8000764:	f040 0001 	orrne.w	r0, r0, #1
 8000768:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800076c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000770:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000774:	ea40 000c 	orr.w	r0, r0, ip
 8000778:	fa23 f302 	lsr.w	r3, r3, r2
 800077c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000780:	e7cc      	b.n	800071c <__aeabi_d2f+0x14>
 8000782:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000786:	d107      	bne.n	8000798 <__aeabi_d2f+0x90>
 8000788:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800078c:	bf1e      	ittt	ne
 800078e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000792:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000796:	4770      	bxne	lr
 8000798:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800079c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f001 f86f 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f83f 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f949 	bl	8000a4c <MX_GPIO_Init>
  MX_ADC3_Init();
 80007ba:	f000 f8bb 	bl	8000934 <MX_ADC3_Init>
  MX_TIM16_Init();
 80007be:	f000 f91d 	bl	80009fc <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 80007c2:	f00a fff1 	bl	800b7a8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim16);
 80007c6:	4816      	ldr	r0, [pc, #88]	; (8000820 <main+0x78>)
 80007c8:	f007 fbc6 	bl	8007f58 <HAL_TIM_Base_Start>

        enum neai_state error_code = neai_classification_init(knowledge);
 80007cc:	4815      	ldr	r0, [pc, #84]	; (8000824 <main+0x7c>)
 80007ce:	f00b fd2b 	bl	800c228 <neai_classification_init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
          if(error_code != NEAI_OK) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d010      	beq.n	80007fe <main+0x56>
        	  snprintf(SendBuffer,BUFSIZE,"Napaka pri inicializaciji znanja. \r\n");
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <main+0x80>)
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <main+0x84>)
 80007e4:	f00c f8fa 	bl	800c9dc <sniprintf>
        	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <main+0x84>)
 80007ea:	f7ff fd79 	bl	80002e0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4619      	mov	r1, r3
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <main+0x84>)
 80007f4:	f00b f898 	bl	800b928 <CDC_Transmit_FS>

        	  Error_Handler();
 80007f8:	f000 fe4c 	bl	8001494 <Error_Handler>
 80007fc:	e00d      	b.n	800081a <main+0x72>
          }
          else {
        	  snprintf(SendBuffer,BUFSIZE,"Opravljena inicializacija znanja. \r\n");
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <main+0x88>)
 8000800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <main+0x84>)
 8000806:	f00c f8e9 	bl	800c9dc <sniprintf>
        	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <main+0x84>)
 800080c:	f7ff fd68 	bl	80002e0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <main+0x84>)
 8000816:	f00b f887 	bl	800b928 <CDC_Transmit_FS>
          }

  while (1)
  {
	  Inference();
 800081a:	f000 fdc3 	bl	80013a4 <Inference>
 800081e:	e7fc      	b.n	800081a <main+0x72>
 8000820:	24003550 	.word	0x24003550
 8000824:	0800d6e8 	.word	0x0800d6e8
 8000828:	0800d620 	.word	0x0800d620
 800082c:	240033dc 	.word	0x240033dc
 8000830:	0800d648 	.word	0x0800d648

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09c      	sub	sp, #112	; 0x70
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	224c      	movs	r2, #76	; 0x4c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f00c f8c2 	bl	800c9cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00c f8bc 	bl	800c9cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000854:	2002      	movs	r0, #2
 8000856:	f003 fe0f 	bl	8004478 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <SystemClock_Config+0xf8>)
 8000860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000862:	4a32      	ldr	r2, [pc, #200]	; (800092c <SystemClock_Config+0xf8>)
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	62d3      	str	r3, [r2, #44]	; 0x2c
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <SystemClock_Config+0xf8>)
 800086c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <SystemClock_Config+0xfc>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800087c:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <SystemClock_Config+0xfc>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <SystemClock_Config+0xfc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <SystemClock_Config+0xfc>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008a0:	2303      	movs	r3, #3
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 80008ba:	2316      	movs	r3, #22
 80008bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 80008be:	23a9      	movs	r3, #169	; 0xa9
 80008c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fe14 	bl	800450c <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008ea:	f000 fdd3 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	233f      	movs	r3, #63	; 0x3f
 80008f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fa54 	bl	8004dc0 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800091e:	f000 fdb9 	bl	8001494 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3770      	adds	r7, #112	; 0x70
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	58000400 	.word	0x58000400
 8000930:	58024800 	.word	0x58024800

08000934 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]
 800094a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_ADC3_Init+0xb8>)
 800094e:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <MX_ADC3_Init+0xbc>)
 8000950:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_ADC3_Init+0xb8>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000960:	2204      	movs	r2, #4
 8000962:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000966:	2200      	movs	r2, #0
 8000968:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_ADC3_Init+0xb8>)
 800096c:	2200      	movs	r2, #0
 800096e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000972:	2201      	movs	r2, #1
 8000974:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000978:	2200      	movs	r2, #0
 800097a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_ADC3_Init+0xb8>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_ADC3_Init+0xb8>)
 800098a:	2200      	movs	r2, #0
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000996:	2200      	movs	r2, #0
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_ADC3_Init+0xb8>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <MX_ADC3_Init+0xb8>)
 80009a4:	f001 f9d8 	bl	8001d58 <HAL_ADC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80009ae:	f000 fd71 	bl	8001494 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_ADC3_Init+0xc0>)
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b6:	2306      	movs	r3, #6
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_ADC3_Init+0xc4>)
 80009c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c2:	2304      	movs	r3, #4
 80009c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_ADC3_Init+0xb8>)
 80009d4:	f001 fb62 	bl	800209c <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 80009de:	f000 fd59 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	240034ec 	.word	0x240034ec
 80009f0:	58026000 	.word	0x58026000
 80009f4:	04300002 	.word	0x04300002
 80009f8:	47ff0000 	.word	0x47ff0000

080009fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a02:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <MX_TIM16_Init+0x4c>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000 - 1;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a08:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a0c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a1a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a30:	f007 fa3a 	bl	8007ea8 <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a3a:	f000 fd2b 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	24003550 	.word	0x24003550
 8000a48:	40014400 	.word	0x40014400

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b090      	sub	sp, #64	; 0x40
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a62:	4bbd      	ldr	r3, [pc, #756]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	4abb      	ldr	r2, [pc, #748]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a72:	4bb9      	ldr	r3, [pc, #740]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	4bb5      	ldr	r3, [pc, #724]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	4ab4      	ldr	r2, [pc, #720]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a90:	4bb1      	ldr	r3, [pc, #708]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a9e:	4bae      	ldr	r3, [pc, #696]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	4aac      	ldr	r2, [pc, #688]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aae:	4baa      	ldr	r3, [pc, #680]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ab8:	623b      	str	r3, [r7, #32]
 8000aba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abc:	4ba6      	ldr	r3, [pc, #664]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	4aa5      	ldr	r2, [pc, #660]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000acc:	4ba2      	ldr	r3, [pc, #648]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	61fb      	str	r3, [r7, #28]
 8000ad8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b9f      	ldr	r3, [pc, #636]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	4a9d      	ldr	r2, [pc, #628]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aea:	4b9b      	ldr	r3, [pc, #620]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af8:	4b97      	ldr	r3, [pc, #604]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	4a96      	ldr	r2, [pc, #600]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b00:	f043 0310 	orr.w	r3, r3, #16
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b08:	4b93      	ldr	r3, [pc, #588]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b16:	4b90      	ldr	r3, [pc, #576]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	4a8e      	ldr	r2, [pc, #568]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b26:	4b8c      	ldr	r3, [pc, #560]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b34:	4b88      	ldr	r3, [pc, #544]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	4a87      	ldr	r2, [pc, #540]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b44:	4b84      	ldr	r3, [pc, #528]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	4b81      	ldr	r3, [pc, #516]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	4a7f      	ldr	r2, [pc, #508]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b62:	4b7d      	ldr	r3, [pc, #500]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b79      	ldr	r3, [pc, #484]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b76:	4a78      	ldr	r2, [pc, #480]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b80:	4b75      	ldr	r3, [pc, #468]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8e:	4b72      	ldr	r3, [pc, #456]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	4a70      	ldr	r2, [pc, #448]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9e:	4b6e      	ldr	r3, [pc, #440]	; (8000d58 <MX_GPIO_Init+0x30c>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	f003 0320 	and.w	r3, r3, #32
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	486a      	ldr	r0, [pc, #424]	; (8000d5c <MX_GPIO_Init+0x310>)
 8000bb4:	f002 f98e 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4868      	ldr	r0, [pc, #416]	; (8000d60 <MX_GPIO_Init+0x314>)
 8000bbe:	f002 f989 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc8:	4866      	ldr	r0, [pc, #408]	; (8000d64 <MX_GPIO_Init+0x318>)
 8000bca:	f002 f983 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8000bce:	23f0      	movs	r3, #240	; 0xf0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bde:	230a      	movs	r3, #10
 8000be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	485c      	ldr	r0, [pc, #368]	; (8000d5c <MX_GPIO_Init+0x310>)
 8000bea:	f001 ffc3 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000bee:	f242 0320 	movw	r3, #8224	; 0x2020
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000c00:	2309      	movs	r3, #9
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4856      	ldr	r0, [pc, #344]	; (8000d64 <MX_GPIO_Init+0x318>)
 8000c0c:	f001 ffb2 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000c10:	23fc      	movs	r3, #252	; 0xfc
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c20:	230e      	movs	r3, #14
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c28:	4619      	mov	r1, r3
 8000c2a:	484f      	ldr	r0, [pc, #316]	; (8000d68 <MX_GPIO_Init+0x31c>)
 8000c2c:	f001 ffa2 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c42:	230a      	movs	r3, #10
 8000c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4847      	ldr	r0, [pc, #284]	; (8000d6c <MX_GPIO_Init+0x320>)
 8000c4e:	f001 ff91 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000c52:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c64:	230c      	movs	r3, #12
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4840      	ldr	r0, [pc, #256]	; (8000d70 <MX_GPIO_Init+0x324>)
 8000c70:	f001 ff80 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000c74:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c86:	230e      	movs	r3, #14
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4832      	ldr	r0, [pc, #200]	; (8000d5c <MX_GPIO_Init+0x310>)
 8000c92:	f001 ff6f 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000c96:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4830      	ldr	r0, [pc, #192]	; (8000d74 <MX_GPIO_Init+0x328>)
 8000cb4:	f001 ff5e 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb8:	2340      	movs	r3, #64	; 0x40
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cc8:	230a      	movs	r3, #10
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4824      	ldr	r0, [pc, #144]	; (8000d64 <MX_GPIO_Init+0x318>)
 8000cd4:	f001 ff4e 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481c      	ldr	r0, [pc, #112]	; (8000d64 <MX_GPIO_Init+0x318>)
 8000cf4:	f001 ff3e 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000cf8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0a:	230b      	movs	r3, #11
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d12:	4619      	mov	r1, r3
 8000d14:	4815      	ldr	r0, [pc, #84]	; (8000d6c <MX_GPIO_Init+0x320>)
 8000d16:	f001 ff2d 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000d1a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d2c:	230e      	movs	r3, #14
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	480a      	ldr	r0, [pc, #40]	; (8000d60 <MX_GPIO_Init+0x314>)
 8000d38:	f001 ff1c 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d54:	4619      	mov	r1, r3
 8000d56:	e00f      	b.n	8000d78 <MX_GPIO_Init+0x32c>
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58022000 	.word	0x58022000
 8000d60:	58022400 	.word	0x58022400
 8000d64:	58020400 	.word	0x58020400
 8000d68:	58022800 	.word	0x58022800
 8000d6c:	58021800 	.word	0x58021800
 8000d70:	58020800 	.word	0x58020800
 8000d74:	58021000 	.word	0x58021000
 8000d78:	48bc      	ldr	r0, [pc, #752]	; (800106c <MX_GPIO_Init+0x620>)
 8000d7a:	f001 fefb 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d96:	4619      	mov	r1, r3
 8000d98:	48b5      	ldr	r0, [pc, #724]	; (8001070 <MX_GPIO_Init+0x624>)
 8000d9a:	f001 feeb 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000db0:	2303      	movs	r3, #3
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	48ae      	ldr	r0, [pc, #696]	; (8001074 <MX_GPIO_Init+0x628>)
 8000dbc:	f001 feda 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000dc0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000dd2:	2309      	movs	r3, #9
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	48a5      	ldr	r0, [pc, #660]	; (8001074 <MX_GPIO_Init+0x628>)
 8000dde:	f001 fec9 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000de2:	2304      	movs	r3, #4
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df2:	230b      	movs	r3, #11
 8000df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	489e      	ldr	r0, [pc, #632]	; (8001078 <MX_GPIO_Init+0x62c>)
 8000dfe:	f001 feb9 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e12:	4619      	mov	r1, r3
 8000e14:	4895      	ldr	r0, [pc, #596]	; (800106c <MX_GPIO_Init+0x620>)
 8000e16:	f001 fead 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000e1a:	2330      	movs	r3, #48	; 0x30
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	4890      	ldr	r0, [pc, #576]	; (8001078 <MX_GPIO_Init+0x62c>)
 8000e36:	f001 fe9d 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000e3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e54:	4619      	mov	r1, r3
 8000e56:	4889      	ldr	r0, [pc, #548]	; (800107c <MX_GPIO_Init+0x630>)
 8000e58:	f001 fe8c 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000e5c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e6e:	230c      	movs	r3, #12
 8000e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e76:	4619      	mov	r1, r3
 8000e78:	4881      	ldr	r0, [pc, #516]	; (8001080 <MX_GPIO_Init+0x634>)
 8000e7a:	f001 fe7b 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e96:	4619      	mov	r1, r3
 8000e98:	4874      	ldr	r0, [pc, #464]	; (800106c <MX_GPIO_Init+0x620>)
 8000e9a:	f001 fe6b 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000e9e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	486c      	ldr	r0, [pc, #432]	; (800106c <MX_GPIO_Init+0x620>)
 8000ebc:	f001 fe5a 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	486b      	ldr	r0, [pc, #428]	; (8001084 <MX_GPIO_Init+0x638>)
 8000ed6:	f001 fe4d 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	4866      	ldr	r0, [pc, #408]	; (8001088 <MX_GPIO_Init+0x63c>)
 8000ef0:	f001 fe40 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	485c      	ldr	r0, [pc, #368]	; (8001084 <MX_GPIO_Init+0x638>)
 8000f12:	f001 fe2f 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f28:	230b      	movs	r3, #11
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f30:	4619      	mov	r1, r3
 8000f32:	484f      	ldr	r0, [pc, #316]	; (8001070 <MX_GPIO_Init+0x624>)
 8000f34:	f001 fe1e 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000f38:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	484d      	ldr	r0, [pc, #308]	; (800108c <MX_GPIO_Init+0x640>)
 8000f56:	f001 fe0d 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	483f      	ldr	r0, [pc, #252]	; (8001070 <MX_GPIO_Init+0x624>)
 8000f74:	f001 fdfe 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	483c      	ldr	r0, [pc, #240]	; (8001080 <MX_GPIO_Init+0x634>)
 8000f8e:	f001 fdf1 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	483a      	ldr	r0, [pc, #232]	; (8001090 <MX_GPIO_Init+0x644>)
 8000fa6:	f001 fde5 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000faa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4831      	ldr	r0, [pc, #196]	; (800108c <MX_GPIO_Init+0x640>)
 8000fc8:	f001 fdd4 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <MX_GPIO_Init+0x63c>)
 8000fe0:	f001 fdc8 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	4619      	mov	r1, r3
 8001000:	4822      	ldr	r0, [pc, #136]	; (800108c <MX_GPIO_Init+0x640>)
 8001002:	f001 fdb7 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001006:	233e      	movs	r3, #62	; 0x3e
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001016:	230b      	movs	r3, #11
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <MX_GPIO_Init+0x63c>)
 8001022:	f001 fda7 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001026:	230c      	movs	r3, #12
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001036:	230b      	movs	r3, #11
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800103a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x628>)
 8001042:	f001 fd97 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001046:	2386      	movs	r3, #134	; 0x86
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001056:	230b      	movs	r3, #11
 8001058:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105e:	4619      	mov	r1, r3
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <MX_GPIO_Init+0x638>)
 8001062:	f001 fd87 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001066:	23e0      	movs	r3, #224	; 0xe0
 8001068:	e014      	b.n	8001094 <MX_GPIO_Init+0x648>
 800106a:	bf00      	nop
 800106c:	58020c00 	.word	0x58020c00
 8001070:	58022000 	.word	0x58022000
 8001074:	58021c00 	.word	0x58021c00
 8001078:	58021000 	.word	0x58021000
 800107c:	58020400 	.word	0x58020400
 8001080:	58021800 	.word	0x58021800
 8001084:	58020000 	.word	0x58020000
 8001088:	58020800 	.word	0x58020800
 800108c:	58021400 	.word	0x58021400
 8001090:	58022800 	.word	0x58022800
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4619      	mov	r1, r3
 80010ac:	4850      	ldr	r0, [pc, #320]	; (80011f0 <MX_GPIO_Init+0x7a4>)
 80010ae:	f001 fd61 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80010b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c4:	2307      	movs	r3, #7
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010cc:	4619      	mov	r1, r3
 80010ce:	4849      	ldr	r0, [pc, #292]	; (80011f4 <MX_GPIO_Init+0x7a8>)
 80010d0:	f001 fd50 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80010d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e8:	4619      	mov	r1, r3
 80010ea:	4841      	ldr	r0, [pc, #260]	; (80011f0 <MX_GPIO_Init+0x7a4>)
 80010ec:	f001 fd42 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f0:	2340      	movs	r3, #64	; 0x40
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001100:	2309      	movs	r3, #9
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001108:	4619      	mov	r1, r3
 800110a:	483b      	ldr	r0, [pc, #236]	; (80011f8 <MX_GPIO_Init+0x7ac>)
 800110c:	f001 fd32 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001122:	230e      	movs	r3, #14
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112a:	4619      	mov	r1, r3
 800112c:	4830      	ldr	r0, [pc, #192]	; (80011f0 <MX_GPIO_Init+0x7a4>)
 800112e:	f001 fd21 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001144:	2309      	movs	r3, #9
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114c:	4619      	mov	r1, r3
 800114e:	482b      	ldr	r0, [pc, #172]	; (80011fc <MX_GPIO_Init+0x7b0>)
 8001150:	f001 fd10 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001154:	2303      	movs	r3, #3
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001164:	230b      	movs	r3, #11
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116c:	4619      	mov	r1, r3
 800116e:	4821      	ldr	r0, [pc, #132]	; (80011f4 <MX_GPIO_Init+0x7a8>)
 8001170:	f001 fd00 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001174:	2304      	movs	r3, #4
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001188:	4619      	mov	r1, r3
 800118a:	481d      	ldr	r0, [pc, #116]	; (8001200 <MX_GPIO_Init+0x7b4>)
 800118c:	f001 fcf2 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <MX_GPIO_Init+0x7a8>)
 80011aa:	f001 fce3 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c0:	2305      	movs	r3, #5
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c8:	4619      	mov	r1, r3
 80011ca:	480a      	ldr	r0, [pc, #40]	; (80011f4 <MX_GPIO_Init+0x7a8>)
 80011cc:	f001 fcd2 	bl	8002b74 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80011d0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80011d4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80011d8:	f000 fc1c 	bl	8001a14 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80011dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80011e0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80011e4:	f000 fc16 	bl	8001a14 <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e8:	bf00      	nop
 80011ea:	3740      	adds	r7, #64	; 0x40
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	58021c00 	.word	0x58021c00
 80011f4:	58020400 	.word	0x58020400
 80011f8:	58020000 	.word	0x58020000
 80011fc:	58020c00 	.word	0x58020c00
 8001200:	58022400 	.word	0x58022400

08001204 <FillBuffer>:

/* USER CODE BEGIN 4 */

void FillBuffer(float* buffer, uint32_t size)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  uint32_t step = AXIS_NUMBER;
 8001212:	2310      	movs	r3, #16
 8001214:	60bb      	str	r3, [r7, #8]

  if(counterOfTestData == 0) {
 8001216:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <FillBuffer+0x190>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 80ad 	bne.w	800137a <FillBuffer+0x176>
	  timestamp = htim16.Instance->CNT;
 8001220:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <FillBuffer+0x194>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	4a5d      	ldr	r2, [pc, #372]	; (800139c <FillBuffer+0x198>)
 8001228:	6013      	str	r3, [r2, #0]
  }

  while (i < size)
 800122a:	e0a6      	b.n	800137a <FillBuffer+0x176>
  {

	  buffer[0] = testData[counterOfTestData][0];
 800122c:	4b59      	ldr	r3, [pc, #356]	; (8001394 <FillBuffer+0x190>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a5b      	ldr	r2, [pc, #364]	; (80013a0 <FillBuffer+0x19c>)
 8001232:	019b      	lsls	r3, r3, #6
 8001234:	4413      	add	r3, r2
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	601a      	str	r2, [r3, #0]
	  buffer[1] = testData[counterOfTestData][1];
 800123c:	4b55      	ldr	r3, [pc, #340]	; (8001394 <FillBuffer+0x190>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3304      	adds	r3, #4
 8001244:	4956      	ldr	r1, [pc, #344]	; (80013a0 <FillBuffer+0x19c>)
 8001246:	0192      	lsls	r2, r2, #6
 8001248:	440a      	add	r2, r1
 800124a:	3204      	adds	r2, #4
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	601a      	str	r2, [r3, #0]
	  buffer[2] = testData[counterOfTestData][2];
 8001250:	4b50      	ldr	r3, [pc, #320]	; (8001394 <FillBuffer+0x190>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3308      	adds	r3, #8
 8001258:	4951      	ldr	r1, [pc, #324]	; (80013a0 <FillBuffer+0x19c>)
 800125a:	0192      	lsls	r2, r2, #6
 800125c:	440a      	add	r2, r1
 800125e:	3208      	adds	r2, #8
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	601a      	str	r2, [r3, #0]
	  buffer[3] = testData[counterOfTestData][3];
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <FillBuffer+0x190>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	330c      	adds	r3, #12
 800126c:	494c      	ldr	r1, [pc, #304]	; (80013a0 <FillBuffer+0x19c>)
 800126e:	0192      	lsls	r2, r2, #6
 8001270:	440a      	add	r2, r1
 8001272:	320c      	adds	r2, #12
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	601a      	str	r2, [r3, #0]
	  buffer[4] = testData[counterOfTestData][4];
 8001278:	4b46      	ldr	r3, [pc, #280]	; (8001394 <FillBuffer+0x190>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3310      	adds	r3, #16
 8001280:	4947      	ldr	r1, [pc, #284]	; (80013a0 <FillBuffer+0x19c>)
 8001282:	0192      	lsls	r2, r2, #6
 8001284:	440a      	add	r2, r1
 8001286:	3210      	adds	r2, #16
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	601a      	str	r2, [r3, #0]
	  buffer[5] = testData[counterOfTestData][5];
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <FillBuffer+0x190>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3314      	adds	r3, #20
 8001294:	4942      	ldr	r1, [pc, #264]	; (80013a0 <FillBuffer+0x19c>)
 8001296:	0192      	lsls	r2, r2, #6
 8001298:	440a      	add	r2, r1
 800129a:	3214      	adds	r2, #20
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	601a      	str	r2, [r3, #0]
	  buffer[6] = testData[counterOfTestData][6];
 80012a0:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <FillBuffer+0x190>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3318      	adds	r3, #24
 80012a8:	493d      	ldr	r1, [pc, #244]	; (80013a0 <FillBuffer+0x19c>)
 80012aa:	0192      	lsls	r2, r2, #6
 80012ac:	440a      	add	r2, r1
 80012ae:	3218      	adds	r2, #24
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	601a      	str	r2, [r3, #0]
	  buffer[7] = testData[counterOfTestData][7];
 80012b4:	4b37      	ldr	r3, [pc, #220]	; (8001394 <FillBuffer+0x190>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	331c      	adds	r3, #28
 80012bc:	4938      	ldr	r1, [pc, #224]	; (80013a0 <FillBuffer+0x19c>)
 80012be:	0192      	lsls	r2, r2, #6
 80012c0:	440a      	add	r2, r1
 80012c2:	321c      	adds	r2, #28
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	601a      	str	r2, [r3, #0]
	  buffer[8] = testData[counterOfTestData][8];
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <FillBuffer+0x190>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3320      	adds	r3, #32
 80012d0:	4933      	ldr	r1, [pc, #204]	; (80013a0 <FillBuffer+0x19c>)
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	440a      	add	r2, r1
 80012d6:	3220      	adds	r2, #32
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	601a      	str	r2, [r3, #0]
	  buffer[9] = testData[counterOfTestData][9];
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <FillBuffer+0x190>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3324      	adds	r3, #36	; 0x24
 80012e4:	492e      	ldr	r1, [pc, #184]	; (80013a0 <FillBuffer+0x19c>)
 80012e6:	0192      	lsls	r2, r2, #6
 80012e8:	440a      	add	r2, r1
 80012ea:	3224      	adds	r2, #36	; 0x24
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	601a      	str	r2, [r3, #0]
	  buffer[10] = testData[counterOfTestData][10];
 80012f0:	4b28      	ldr	r3, [pc, #160]	; (8001394 <FillBuffer+0x190>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3328      	adds	r3, #40	; 0x28
 80012f8:	4929      	ldr	r1, [pc, #164]	; (80013a0 <FillBuffer+0x19c>)
 80012fa:	0192      	lsls	r2, r2, #6
 80012fc:	440a      	add	r2, r1
 80012fe:	3228      	adds	r2, #40	; 0x28
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	601a      	str	r2, [r3, #0]
	  buffer[11] = testData[counterOfTestData][11];
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <FillBuffer+0x190>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	332c      	adds	r3, #44	; 0x2c
 800130c:	4924      	ldr	r1, [pc, #144]	; (80013a0 <FillBuffer+0x19c>)
 800130e:	0192      	lsls	r2, r2, #6
 8001310:	440a      	add	r2, r1
 8001312:	322c      	adds	r2, #44	; 0x2c
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	601a      	str	r2, [r3, #0]
	  buffer[12] = testData[counterOfTestData][12];
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <FillBuffer+0x190>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3330      	adds	r3, #48	; 0x30
 8001320:	491f      	ldr	r1, [pc, #124]	; (80013a0 <FillBuffer+0x19c>)
 8001322:	0192      	lsls	r2, r2, #6
 8001324:	440a      	add	r2, r1
 8001326:	3230      	adds	r2, #48	; 0x30
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	601a      	str	r2, [r3, #0]
	  buffer[13] = testData[counterOfTestData][13];
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <FillBuffer+0x190>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3334      	adds	r3, #52	; 0x34
 8001334:	491a      	ldr	r1, [pc, #104]	; (80013a0 <FillBuffer+0x19c>)
 8001336:	0192      	lsls	r2, r2, #6
 8001338:	440a      	add	r2, r1
 800133a:	3234      	adds	r2, #52	; 0x34
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	601a      	str	r2, [r3, #0]
	  buffer[14] = testData[counterOfTestData][14];
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <FillBuffer+0x190>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3338      	adds	r3, #56	; 0x38
 8001348:	4915      	ldr	r1, [pc, #84]	; (80013a0 <FillBuffer+0x19c>)
 800134a:	0192      	lsls	r2, r2, #6
 800134c:	440a      	add	r2, r1
 800134e:	3238      	adds	r2, #56	; 0x38
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	601a      	str	r2, [r3, #0]
	  buffer[15] = testData[counterOfTestData][15];
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <FillBuffer+0x190>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	333c      	adds	r3, #60	; 0x3c
 800135c:	4910      	ldr	r1, [pc, #64]	; (80013a0 <FillBuffer+0x19c>)
 800135e:	0192      	lsls	r2, r2, #6
 8001360:	440a      	add	r2, r1
 8001362:	323c      	adds	r2, #60	; 0x3c
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	601a      	str	r2, [r3, #0]


	  counterOfTestData++;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <FillBuffer+0x190>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <FillBuffer+0x190>)
 8001370:	6013      	str	r3, [r2, #0]

	  i += step;
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  while (i < size)
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	f4ff af54 	bcc.w	800122c <FillBuffer+0x28>
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	240034dc 	.word	0x240034dc
 8001398:	24003550 	.word	0x24003550
 800139c:	240034e8 	.word	0x240034e8
 80013a0:	24000004 	.word	0x24000004

080013a4 <Inference>:


void Inference(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af02      	add	r7, sp, #8
  uint16_t id_class;

  FillBuffer(input_user_buffer,SIGNAL_SIZE);
 80013aa:	2110      	movs	r1, #16
 80013ac:	482d      	ldr	r0, [pc, #180]	; (8001464 <Inference+0xc0>)
 80013ae:	f7ff ff29 	bl	8001204 <FillBuffer>
  neai_classification(input_user_buffer,output_class_buffer,&id_class);
 80013b2:	1cbb      	adds	r3, r7, #2
 80013b4:	461a      	mov	r2, r3
 80013b6:	492c      	ldr	r1, [pc, #176]	; (8001468 <Inference+0xc4>)
 80013b8:	482a      	ldr	r0, [pc, #168]	; (8001464 <Inference+0xc0>)
 80013ba:	f00b f841 	bl	800c440 <neai_classification>

  //snprintf(SendBuffer,BUFSIZE,"Class: %s [%u%%]\r\n",id2class[id_class],(uint)(output_class_buffer[id_class-1]*100));
  //CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));

  if(counterOfTestData == sizeOfTestData) {
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <Inference+0xc8>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <Inference+0xcc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d147      	bne.n	800145a <Inference+0xb6>
	  counterOfTestData = 0;
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <Inference+0xc8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

	  uint32_t duration = htim16.Instance->CNT;
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <Inference+0xd0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	607b      	str	r3, [r7, #4]

	  if(duration >= timestamp)
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <Inference+0xd4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d305      	bcc.n	80013ee <Inference+0x4a>
	  	duration -= timestamp;
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <Inference+0xd4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	e006      	b.n	80013fc <Inference+0x58>
	  else
	  	duration += (65535 - timestamp) + 1; //+1 because of counting from 0 onwards
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <Inference+0xd4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80013fa:	607b      	str	r3, [r7, #4]

	  //snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: %lu milisekund. \r\n", duration);
	  //CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));

	  averageDurationValue += duration;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <Inference+0xd8>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	4a1d      	ldr	r2, [pc, #116]	; (800147c <Inference+0xd8>)
 8001406:	6013      	str	r3, [r2, #0]
	  countDurations++;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <Inference+0xdc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <Inference+0xdc>)
 8001410:	6013      	str	r3, [r2, #0]

	  if(countDurations == numberOfDurations) {
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <Inference+0xdc>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <Inference+0xe0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d11d      	bne.n	800145a <Inference+0xb6>
	  	snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: [%lu] %lu milisekund. \r\n", averageDurationValue, averageDurationValue / 100);
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <Inference+0xd8>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <Inference+0xd8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4918      	ldr	r1, [pc, #96]	; (8001488 <Inference+0xe4>)
 8001428:	fba1 1303 	umull	r1, r3, r1, r3
 800142c:	095b      	lsrs	r3, r3, #5
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4613      	mov	r3, r2
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <Inference+0xe8>)
 8001434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001438:	4815      	ldr	r0, [pc, #84]	; (8001490 <Inference+0xec>)
 800143a:	f00b facf 	bl	800c9dc <sniprintf>
	  	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800143e:	4814      	ldr	r0, [pc, #80]	; (8001490 <Inference+0xec>)
 8001440:	f7fe ff4e 	bl	80002e0 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4811      	ldr	r0, [pc, #68]	; (8001490 <Inference+0xec>)
 800144a:	f00a fa6d 	bl	800b928 <CDC_Transmit_FS>

	  	countDurations = 0;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <Inference+0xdc>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
	  	averageDurationValue = 0;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <Inference+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	  }
  }

}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	24003388 	.word	0x24003388
 8001468:	240033c8 	.word	0x240033c8
 800146c:	240034dc 	.word	0x240034dc
 8001470:	24003204 	.word	0x24003204
 8001474:	24003550 	.word	0x24003550
 8001478:	240034e8 	.word	0x240034e8
 800147c:	240034e0 	.word	0x240034e0
 8001480:	240034e4 	.word	0x240034e4
 8001484:	24000000 	.word	0x24000000
 8001488:	51eb851f 	.word	0x51eb851f
 800148c:	0800d670 	.word	0x0800d670
 8001490:	240033dc 	.word	0x240033dc

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>
	...

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_MspInit+0x30>)
 80014a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014ac:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x30>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x30>)
 80014b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	58024400 	.word	0x58024400

080014d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0bc      	sub	sp, #240	; 0xf0
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	22c0      	movs	r2, #192	; 0xc0
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00b fa69 	bl	800c9cc <memset>
  if(hadc->Instance==ADC3)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a41      	ldr	r2, [pc, #260]	; (8001604 <HAL_ADC_MspInit+0x130>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d17a      	bne.n	80015fa <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001504:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001514:	230c      	movs	r3, #12
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001518:	2304      	movs	r3, #4
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001524:	23c0      	movs	r3, #192	; 0xc0
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001528:	2320      	movs	r3, #32
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001536:	f107 0318 	add.w	r3, r7, #24
 800153a:	4618      	mov	r0, r3
 800153c:	f003 ffb6 	bl	80054ac <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001546:	f7ff ffa5 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_ADC_MspInit+0x134>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	4a2d      	ldr	r2, [pc, #180]	; (8001608 <HAL_ADC_MspInit+0x134>)
 8001552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_ADC_MspInit+0x134>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <HAL_ADC_MspInit+0x134>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	4a26      	ldr	r2, [pc, #152]	; (8001608 <HAL_ADC_MspInit+0x134>)
 8001570:	f043 0320 	orr.w	r3, r3, #32
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_ADC_MspInit+0x134>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_ADC_MspInit+0x134>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <HAL_ADC_MspInit+0x134>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_ADC_MspInit+0x134>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015bc:	4619      	mov	r1, r3
 80015be:	4813      	ldr	r0, [pc, #76]	; (800160c <HAL_ADC_MspInit+0x138>)
 80015c0:	f001 fad8 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <HAL_ADC_MspInit+0x13c>)
 80015de:	f001 fac9 	bl	8002b74 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80015e2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80015e6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80015ea:	f000 fa13 	bl	8001a14 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80015ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80015f2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80015f6:	f000 fa0d 	bl	8001a14 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	37f0      	adds	r7, #240	; 0xf0
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	58026000 	.word	0x58026000
 8001608:	58024400 	.word	0x58024400
 800160c:	58021400 	.word	0x58021400
 8001610:	58020800 	.word	0x58020800

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_TIM_Base_MspInit+0x3c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10e      	bne.n	8001644 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_TIM_Base_MspInit+0x40>)
 8001628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800162c:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_TIM_Base_MspInit+0x40>)
 800162e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001632:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_TIM_Base_MspInit+0x40>)
 8001638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40014400 	.word	0x40014400
 8001654:	58024400 	.word	0x58024400

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f966 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <OTG_FS_IRQHandler+0x10>)
 80016b2:	f001 fd81 	bl	80031b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	24004a84 	.word	0x24004a84

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f00b f942 	bl	800c978 <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	24080000 	.word	0x24080000
 8001720:	00000400 	.word	0x00000400
 8001724:	2400359c 	.word	0x2400359c
 8001728:	24005210 	.word	0x24005210

0800172c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001730:	4b37      	ldr	r3, [pc, #220]	; (8001810 <SystemInit+0xe4>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a36      	ldr	r2, [pc, #216]	; (8001810 <SystemInit+0xe4>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001740:	4b34      	ldr	r3, [pc, #208]	; (8001814 <SystemInit+0xe8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	2b06      	cmp	r3, #6
 800174a:	d807      	bhi.n	800175c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800174c:	4b31      	ldr	r3, [pc, #196]	; (8001814 <SystemInit+0xe8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 030f 	bic.w	r3, r3, #15
 8001754:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <SystemInit+0xe8>)
 8001756:	f043 0307 	orr.w	r3, r3, #7
 800175a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <SystemInit+0xec>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <SystemInit+0xec>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <SystemInit+0xec>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <SystemInit+0xec>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4929      	ldr	r1, [pc, #164]	; (8001818 <SystemInit+0xec>)
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <SystemInit+0xf0>)
 8001776:	4013      	ands	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <SystemInit+0xe8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <SystemInit+0xe8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 030f 	bic.w	r3, r3, #15
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <SystemInit+0xe8>)
 8001790:	f043 0307 	orr.w	r3, r3, #7
 8001794:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <SystemInit+0xec>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <SystemInit+0xec>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <SystemInit+0xec>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <SystemInit+0xec>)
 80017aa:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <SystemInit+0xf4>)
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <SystemInit+0xec>)
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <SystemInit+0xf8>)
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <SystemInit+0xec>)
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <SystemInit+0xfc>)
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <SystemInit+0xec>)
 80017bc:	2200      	movs	r2, #0
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <SystemInit+0xec>)
 80017c2:	4a19      	ldr	r2, [pc, #100]	; (8001828 <SystemInit+0xfc>)
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <SystemInit+0xec>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <SystemInit+0xec>)
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <SystemInit+0xfc>)
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <SystemInit+0xec>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <SystemInit+0xec>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <SystemInit+0xec>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <SystemInit+0xec>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <SystemInit+0x100>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <SystemInit+0x104>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017f6:	d202      	bcs.n	80017fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <SystemInit+0x108>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <SystemInit+0x10c>)
 8001800:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001804:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00
 8001814:	52002000 	.word	0x52002000
 8001818:	58024400 	.word	0x58024400
 800181c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001820:	02020200 	.word	0x02020200
 8001824:	01ff0000 	.word	0x01ff0000
 8001828:	01010280 	.word	0x01010280
 800182c:	5c001000 	.word	0x5c001000
 8001830:	ffff0000 	.word	0xffff0000
 8001834:	51008108 	.word	0x51008108
 8001838:	52004000 	.word	0x52004000

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001840:	f7ff ff74 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f00b f88b 	bl	800c984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7fe ff9b 	bl	80007a8 <main>
  bx  lr
 8001872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001878:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800187c:	2400336c 	.word	0x2400336c
  ldr r2, =_sidata
 8001880:	0800e030 	.word	0x0800e030
  ldr r2, =_sbss
 8001884:	2400336c 	.word	0x2400336c
  ldr r4, =_ebss
 8001888:	24005210 	.word	0x24005210

0800188c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC3_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001896:	2003      	movs	r0, #3
 8001898:	f001 f92c 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800189c:	f003 fc46 	bl	800512c <HAL_RCC_GetSysClockFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_Init+0x68>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	4913      	ldr	r1, [pc, #76]	; (80018fc <HAL_Init+0x6c>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_Init+0x68>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_Init+0x6c>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <HAL_Init+0x70>)
 80018d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_Init+0x74>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 f814 	bl	8001908 <HAL_InitTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e002      	b.n	80018f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018ea:	f7ff fdd9 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	58024400 	.word	0x58024400
 80018fc:	0800d774 	.word	0x0800d774
 8001900:	2400320c 	.word	0x2400320c
 8001904:	24003208 	.word	0x24003208

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_InitTick+0x60>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e021      	b.n	8001960 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_InitTick+0x64>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_InitTick+0x60>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f001 f911 	bl	8002b5a <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f001 f8db 	bl	8002b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_InitTick+0x68>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	24003214 	.word	0x24003214
 800196c:	24003208 	.word	0x24003208
 8001970:	24003210 	.word	0x24003210

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	24003214 	.word	0x24003214
 8001998:	240035a0 	.word	0x240035a0

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	240035a0 	.word	0x240035a0

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff ffee 	bl	800199c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d005      	beq.n	80019da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_Delay+0x44>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019da:	bf00      	nop
 80019dc:	f7ff ffde 	bl	800199c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8f7      	bhi.n	80019dc <HAL_Delay+0x28>
  {
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	24003214 	.word	0x24003214

080019fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_GetREVID+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0c1b      	lsrs	r3, r3, #16
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	5c001000 	.word	0x5c001000

08001a14 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	401a      	ands	r2, r3
 8001a28:	4904      	ldr	r1, [pc, #16]	; (8001a3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	58000400 	.word	0x58000400

08001a40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	609a      	str	r2, [r3, #8]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3360      	adds	r3, #96	; 0x60
 8001aba:	461a      	mov	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001adc:	bf00      	nop
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	611a      	str	r2, [r3, #16]
}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b087      	sub	sp, #28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3360      	adds	r3, #96	; 0x60
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	601a      	str	r2, [r3, #0]
  }
}
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3330      	adds	r3, #48	; 0x30
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	4413      	add	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	211f      	movs	r1, #31
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	401a      	ands	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	0e9b      	lsrs	r3, r3, #26
 8001b88:	f003 011f 	and.w	r1, r3, #31
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	431a      	orrs	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b9c:	bf00      	nop
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3314      	adds	r3, #20
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	0e5b      	lsrs	r3, r3, #25
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	4413      	add	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	0d1b      	lsrs	r3, r3, #20
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2107      	movs	r1, #7
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	401a      	ands	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	0d1b      	lsrs	r3, r3, #20
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	431a      	orrs	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0318 	and.w	r3, r3, #24
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c24:	40d9      	lsrs	r1, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	400b      	ands	r3, r1
 8001c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	000fffff 	.word	0x000fffff

08001c48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6093      	str	r3, [r2, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	5fffffc0 	.word	0x5fffffc0

08001c6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	6fffffc0 	.word	0x6fffffc0

08001cbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cd0:	d101      	bne.n	8001cd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <LL_ADC_IsEnabled+0x18>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <LL_ADC_IsEnabled+0x1a>
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d101      	bne.n	8001d22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d101      	bne.n	8001d48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e18f      	b.n	8002092 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fba7 	bl	80014d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff67 	bl	8001c6c <LL_ADC_IsDeepPowerDownEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff4d 	bl	8001c48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff82 	bl	8001cbc <LL_ADC_IsInternalRegulatorEnabled>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d114      	bne.n	8001de8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff66 	bl	8001c94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc8:	4b87      	ldr	r3, [pc, #540]	; (8001fe8 <HAL_ADC_Init+0x290>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	4a87      	ldr	r2, [pc, #540]	; (8001fec <HAL_ADC_Init+0x294>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dda:	e002      	b.n	8001de2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff65 	bl	8001cbc <LL_ADC_IsInternalRegulatorEnabled>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10d      	bne.n	8001e14 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f043 0210 	orr.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff76 	bl	8001d0a <LL_ADC_REG_IsConversionOngoing>
 8001e1e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 8129 	bne.w	8002080 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f040 8125 	bne.w	8002080 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e3e:	f043 0202 	orr.w	r2, r3, #2
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff4a 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d136      	bne.n	8001ec4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a65      	ldr	r2, [pc, #404]	; (8001ff0 <HAL_ADC_Init+0x298>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d004      	beq.n	8001e6a <HAL_ADC_Init+0x112>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a63      	ldr	r2, [pc, #396]	; (8001ff4 <HAL_ADC_Init+0x29c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10e      	bne.n	8001e88 <HAL_ADC_Init+0x130>
 8001e6a:	4861      	ldr	r0, [pc, #388]	; (8001ff0 <HAL_ADC_Init+0x298>)
 8001e6c:	f7ff ff3a 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001e70:	4604      	mov	r4, r0
 8001e72:	4860      	ldr	r0, [pc, #384]	; (8001ff4 <HAL_ADC_Init+0x29c>)
 8001e74:	f7ff ff36 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4323      	orrs	r3, r4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e008      	b.n	8001e9a <HAL_ADC_Init+0x142>
 8001e88:	485b      	ldr	r0, [pc, #364]	; (8001ff8 <HAL_ADC_Init+0x2a0>)
 8001e8a:	f7ff ff2b 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d012      	beq.n	8001ec4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a53      	ldr	r2, [pc, #332]	; (8001ff0 <HAL_ADC_Init+0x298>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_ADC_Init+0x15a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a51      	ldr	r2, [pc, #324]	; (8001ff4 <HAL_ADC_Init+0x29c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_Init+0x15e>
 8001eb2:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <HAL_ADC_Init+0x2a4>)
 8001eb4:	e000      	b.n	8001eb8 <HAL_ADC_Init+0x160>
 8001eb6:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_ADC_Init+0x2a8>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f7ff fdbe 	bl	8001a40 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001ec4:	f7ff fd9a 	bl	80019fc <HAL_GetREVID>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d914      	bls.n	8001efc <HAL_ADC_Init+0x1a4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d110      	bne.n	8001efc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7d5b      	ldrb	r3, [r3, #21]
 8001ede:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ee4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001eea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7f1b      	ldrb	r3, [r3, #28]
 8001ef0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ef2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ef4:	f043 030c 	orr.w	r3, r3, #12
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	e00d      	b.n	8001f18 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7d5b      	ldrb	r3, [r3, #21]
 8001f00:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f06:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001f0c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7f1b      	ldrb	r3, [r3, #28]
 8001f12:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7f1b      	ldrb	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	045b      	lsls	r3, r3, #17
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_ADC_Init+0x2ac>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	69b9      	ldr	r1, [r7, #24]
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fed1 	bl	8001d0a <LL_ADC_REG_IsConversionOngoing>
 8001f68:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fede 	bl	8001d30 <LL_ADC_INJ_IsConversionOngoing>
 8001f74:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d15f      	bne.n	800203c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d15c      	bne.n	800203c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7d1b      	ldrb	r3, [r3, #20]
 8001f86:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_ADC_Init+0x2b0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d130      	bne.n	8002010 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_ADC_Init+0x2b4>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fc2:	3a01      	subs	r2, #1
 8001fc4:	0411      	lsls	r1, r2, #16
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	611a      	str	r2, [r3, #16]
 8001fe4:	e01c      	b.n	8002020 <HAL_ADC_Init+0x2c8>
 8001fe6:	bf00      	nop
 8001fe8:	24003208 	.word	0x24003208
 8001fec:	053e2d63 	.word	0x053e2d63
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40022100 	.word	0x40022100
 8001ff8:	58026000 	.word	0x58026000
 8001ffc:	40022300 	.word	0x40022300
 8002000:	58026300 	.word	0x58026300
 8002004:	fff0c003 	.word	0xfff0c003
 8002008:	ffffbffc 	.word	0xffffbffc
 800200c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fb80 	bl	800273c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10c      	bne.n	800205e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f023 010f 	bic.w	r1, r3, #15
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
 800205c:	e007      	b.n	800206e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 020f 	bic.w	r2, r2, #15
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
 800207e:	e007      	b.n	8002090 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002090:	7ffb      	ldrb	r3, [r7, #31]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	bf00      	nop

0800209c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b0a1      	sub	sp, #132	; 0x84
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a9d      	ldr	r2, [pc, #628]	; (800232c <HAL_ADC_ConfigChannel+0x290>)
 80020b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x2a>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e321      	b.n	800270a <HAL_ADC_ConfigChannel+0x66e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fe19 	bl	8001d0a <LL_ADC_REG_IsConversionOngoing>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 8306 	bne.w	80026ec <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d108      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x62>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2201      	movs	r2, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	e016      	b.n	800212c <HAL_ADC_ConfigChannel+0x90>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800210c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800210e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e003      	b.n	8002122 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800211a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	2201      	movs	r2, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	69d1      	ldr	r1, [r2, #28]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	430b      	orrs	r3, r1
 8002138:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	f7ff fd02 	bl	8001b50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fdda 	bl	8001d0a <LL_ADC_REG_IsConversionOngoing>
 8002156:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fde7 	bl	8001d30 <LL_ADC_INJ_IsConversionOngoing>
 8002162:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80b3 	bne.w	80022d2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800216c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 80af 	bne.w	80022d2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	461a      	mov	r2, r3
 8002182:	f7ff fd11 	bl	8001ba8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002186:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_ADC_ConfigChannel+0x294>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800218e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x110>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	e01d      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x14c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10b      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x136>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	e00a      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x14c>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d027      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6919      	ldr	r1, [r3, #16]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002200:	f7ff fc52 	bl	8001aa8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6919      	ldr	r1, [r3, #16]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	7e5b      	ldrb	r3, [r3, #25]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_ADC_ConfigChannel+0x17e>
 8002214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002218:	e000      	b.n	800221c <HAL_ADC_ConfigChannel+0x180>
 800221a:	2300      	movs	r3, #0
 800221c:	461a      	mov	r2, r3
 800221e:	f7ff fc7c 	bl	8001b1a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7e1b      	ldrb	r3, [r3, #24]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x19c>
 8002232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002236:	e000      	b.n	800223a <HAL_ADC_ConfigChannel+0x19e>
 8002238:	2300      	movs	r3, #0
 800223a:	461a      	mov	r2, r3
 800223c:	f7ff fc54 	bl	8001ae8 <LL_ADC_SetDataRightShift>
 8002240:	e047      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	069b      	lsls	r3, r3, #26
 8002252:	429a      	cmp	r2, r3
 8002254:	d107      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002264:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800226c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	069b      	lsls	r3, r3, #26
 8002276:	429a      	cmp	r2, r3
 8002278:	d107      	bne.n	800228a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002288:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	429a      	cmp	r2, r3
 800229c:	d107      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022ac:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	069b      	lsls	r3, r3, #26
 80022be:	429a      	cmp	r2, r3
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fd04 	bl	8001ce4 <LL_ADC_IsEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 820d 	bne.w	80026fe <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	461a      	mov	r2, r3
 80022f2:	f7ff fc85 	bl	8001c00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_ADC_ConfigChannel+0x290>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	f040 8133 	bne.w	8002568 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800230e:	2b00      	cmp	r3, #0
 8002310:	d110      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x298>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0e9b      	lsrs	r3, r3, #26
 8002318:	3301      	adds	r3, #1
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2b09      	cmp	r3, #9
 8002320:	bf94      	ite	ls
 8002322:	2301      	movls	r3, #1
 8002324:	2300      	movhi	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	e01e      	b.n	8002368 <HAL_ADC_ConfigChannel+0x2cc>
 800232a:	bf00      	nop
 800232c:	47ff0000 	.word	0x47ff0000
 8002330:	5c001000 	.word	0x5c001000
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800234c:	2320      	movs	r3, #32
 800234e:	e003      	b.n	8002358 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3301      	adds	r3, #1
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2b09      	cmp	r3, #9
 8002360:	bf94      	ite	ls
 8002362:	2301      	movls	r3, #1
 8002364:	2300      	movhi	r3, #0
 8002366:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002368:	2b00      	cmp	r3, #0
 800236a:	d079      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x2ec>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	069b      	lsls	r3, r3, #26
 8002382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002386:	e015      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x318>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002398:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800239a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e003      	b.n	80023ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	069b      	lsls	r3, r3, #26
 80023b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x338>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	3301      	adds	r3, #1
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	e017      	b.n	8002404 <HAL_ADC_ConfigChannel+0x368>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e003      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80023f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	ea42 0103 	orr.w	r1, r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_ADC_ConfigChannel+0x38e>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	051b      	lsls	r3, r3, #20
 8002428:	e018      	b.n	800245c <HAL_ADC_ConfigChannel+0x3c0>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002442:	2320      	movs	r3, #32
 8002444:	e003      	b.n	800244e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245c:	430b      	orrs	r3, r1
 800245e:	e07e      	b.n	800255e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_ADC_ConfigChannel+0x3e0>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	069b      	lsls	r3, r3, #26
 8002476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247a:	e015      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x40c>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002494:	2320      	movs	r3, #32
 8002496:	e003      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	069b      	lsls	r3, r3, #26
 80024a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x42c>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	3301      	adds	r3, #1
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	e017      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x45c>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	61bb      	str	r3, [r7, #24]
  return result;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e003      	b.n	80024ec <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	ea42 0103 	orr.w	r1, r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x488>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	3b1e      	subs	r3, #30
 800251c:	051b      	lsls	r3, r3, #20
 800251e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002522:	e01b      	b.n	800255c <HAL_ADC_ConfigChannel+0x4c0>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	60fb      	str	r3, [r7, #12]
  return result;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e003      	b.n	8002548 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	3b1e      	subs	r3, #30
 8002556:	051b      	lsls	r3, r3, #20
 8002558:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255c:	430b      	orrs	r3, r1
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	6892      	ldr	r2, [r2, #8]
 8002562:	4619      	mov	r1, r3
 8002564:	f7ff fb20 	bl	8001ba8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f280 80c6 	bge.w	80026fe <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a67      	ldr	r2, [pc, #412]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d004      	beq.n	8002586 <HAL_ADC_ConfigChannel+0x4ea>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a65      	ldr	r2, [pc, #404]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x4ee>
 8002586:	4b65      	ldr	r3, [pc, #404]	; (800271c <HAL_ADC_ConfigChannel+0x680>)
 8002588:	e000      	b.n	800258c <HAL_ADC_ConfigChannel+0x4f0>
 800258a:	4b65      	ldr	r3, [pc, #404]	; (8002720 <HAL_ADC_ConfigChannel+0x684>)
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fa7d 	bl	8001a8c <LL_ADC_GetCommonPathInternalCh>
 8002592:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5e      	ldr	r2, [pc, #376]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x50c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5d      	ldr	r2, [pc, #372]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10e      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x52a>
 80025a8:	485a      	ldr	r0, [pc, #360]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 80025aa:	f7ff fb9b 	bl	8001ce4 <LL_ADC_IsEnabled>
 80025ae:	4604      	mov	r4, r0
 80025b0:	4859      	ldr	r0, [pc, #356]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 80025b2:	f7ff fb97 	bl	8001ce4 <LL_ADC_IsEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4323      	orrs	r3, r4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e008      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x53c>
 80025c6:	4857      	ldr	r0, [pc, #348]	; (8002724 <HAL_ADC_ConfigChannel+0x688>)
 80025c8:	f7ff fb8c 	bl	8001ce4 <LL_ADC_IsEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d07d      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a51      	ldr	r2, [pc, #324]	; (8002728 <HAL_ADC_ConfigChannel+0x68c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d130      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x5ac>
 80025e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d12b      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <HAL_ADC_ConfigChannel+0x688>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	f040 8081 	bne.w	80026fe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a44      	ldr	r2, [pc, #272]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x574>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a43      	ldr	r2, [pc, #268]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x578>
 8002610:	4a42      	ldr	r2, [pc, #264]	; (800271c <HAL_ADC_ConfigChannel+0x680>)
 8002612:	e000      	b.n	8002616 <HAL_ADC_ConfigChannel+0x57a>
 8002614:	4a42      	ldr	r2, [pc, #264]	; (8002720 <HAL_ADC_ConfigChannel+0x684>)
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f7ff fa21 	bl	8001a66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002624:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_ADC_ConfigChannel+0x690>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	4a41      	ldr	r2, [pc, #260]	; (8002730 <HAL_ADC_ConfigChannel+0x694>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002638:	e002      	b.n	8002640 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3b01      	subs	r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f9      	bne.n	800263a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002646:	e05a      	b.n	80026fe <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a39      	ldr	r2, [pc, #228]	; (8002734 <HAL_ADC_ConfigChannel+0x698>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d11e      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x5f4>
 8002652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d119      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a30      	ldr	r2, [pc, #192]	; (8002724 <HAL_ADC_ConfigChannel+0x688>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d14b      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2a      	ldr	r2, [pc, #168]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_ADC_ConfigChannel+0x5de>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x5e2>
 800267a:	4a28      	ldr	r2, [pc, #160]	; (800271c <HAL_ADC_ConfigChannel+0x680>)
 800267c:	e000      	b.n	8002680 <HAL_ADC_ConfigChannel+0x5e4>
 800267e:	4a28      	ldr	r2, [pc, #160]	; (8002720 <HAL_ADC_ConfigChannel+0x684>)
 8002680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f7ff f9ec 	bl	8001a66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800268e:	e036      	b.n	80026fe <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a28      	ldr	r2, [pc, #160]	; (8002738 <HAL_ADC_ConfigChannel+0x69c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d131      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x662>
 800269a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d12c      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_ADC_ConfigChannel+0x688>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d127      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a18      	ldr	r2, [pc, #96]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_ADC_ConfigChannel+0x626>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a16      	ldr	r2, [pc, #88]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x62a>
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_ADC_ConfigChannel+0x680>)
 80026c4:	e000      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x62c>
 80026c6:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_ADC_ConfigChannel+0x684>)
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f7ff f9c8 	bl	8001a66 <LL_ADC_SetCommonPathInternalCh>
 80026d6:	e012      	b.n	80026fe <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026ea:	e008      	b.n	80026fe <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002706:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800270a:	4618      	mov	r0, r3
 800270c:	3784      	adds	r7, #132	; 0x84
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	bf00      	nop
 8002714:	40022000 	.word	0x40022000
 8002718:	40022100 	.word	0x40022100
 800271c:	40022300 	.word	0x40022300
 8002720:	58026300 	.word	0x58026300
 8002724:	58026000 	.word	0x58026000
 8002728:	cb840000 	.word	0xcb840000
 800272c:	24003208 	.word	0x24003208
 8002730:	053e2d63 	.word	0x053e2d63
 8002734:	c7520000 	.word	0xc7520000
 8002738:	cfb80000 	.word	0xcfb80000

0800273c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a7a      	ldr	r2, [pc, #488]	; (8002934 <ADC_ConfigureBoostMode+0x1f8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <ADC_ConfigureBoostMode+0x1c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a79      	ldr	r2, [pc, #484]	; (8002938 <ADC_ConfigureBoostMode+0x1fc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d109      	bne.n	800276c <ADC_ConfigureBoostMode+0x30>
 8002758:	4b78      	ldr	r3, [pc, #480]	; (800293c <ADC_ConfigureBoostMode+0x200>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e008      	b.n	800277e <ADC_ConfigureBoostMode+0x42>
 800276c:	4b74      	ldr	r3, [pc, #464]	; (8002940 <ADC_ConfigureBoostMode+0x204>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01c      	beq.n	80027bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002782:	f002 fe4d 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8002786:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002790:	d010      	beq.n	80027b4 <ADC_ConfigureBoostMode+0x78>
 8002792:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002796:	d873      	bhi.n	8002880 <ADC_ConfigureBoostMode+0x144>
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d002      	beq.n	80027a4 <ADC_ConfigureBoostMode+0x68>
 800279e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027a2:	d16d      	bne.n	8002880 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	0c1b      	lsrs	r3, r3, #16
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	60fb      	str	r3, [r7, #12]
        break;
 80027b2:	e068      	b.n	8002886 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	60fb      	str	r3, [r7, #12]
        break;
 80027ba:	e064      	b.n	8002886 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80027bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	f004 f87c 	bl	80068c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80027c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80027d2:	d051      	beq.n	8002878 <ADC_ConfigureBoostMode+0x13c>
 80027d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80027d8:	d854      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x148>
 80027da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80027de:	d047      	beq.n	8002870 <ADC_ConfigureBoostMode+0x134>
 80027e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80027e4:	d84e      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x148>
 80027e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80027ea:	d03d      	beq.n	8002868 <ADC_ConfigureBoostMode+0x12c>
 80027ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80027f0:	d848      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x148>
 80027f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f6:	d033      	beq.n	8002860 <ADC_ConfigureBoostMode+0x124>
 80027f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027fc:	d842      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x148>
 80027fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002802:	d029      	beq.n	8002858 <ADC_ConfigureBoostMode+0x11c>
 8002804:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002808:	d83c      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x148>
 800280a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800280e:	d01a      	beq.n	8002846 <ADC_ConfigureBoostMode+0x10a>
 8002810:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002814:	d836      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x148>
 8002816:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800281a:	d014      	beq.n	8002846 <ADC_ConfigureBoostMode+0x10a>
 800281c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002820:	d830      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x148>
 8002822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002826:	d00e      	beq.n	8002846 <ADC_ConfigureBoostMode+0x10a>
 8002828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800282c:	d82a      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x148>
 800282e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002832:	d008      	beq.n	8002846 <ADC_ConfigureBoostMode+0x10a>
 8002834:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002838:	d824      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x148>
 800283a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800283e:	d002      	beq.n	8002846 <ADC_ConfigureBoostMode+0x10a>
 8002840:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002844:	d11e      	bne.n	8002884 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	60fb      	str	r3, [r7, #12]
        break;
 8002856:	e016      	b.n	8002886 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	60fb      	str	r3, [r7, #12]
        break;
 800285e:	e012      	b.n	8002886 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	60fb      	str	r3, [r7, #12]
        break;
 8002866:	e00e      	b.n	8002886 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	60fb      	str	r3, [r7, #12]
        break;
 800286e:	e00a      	b.n	8002886 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	09db      	lsrs	r3, r3, #7
 8002874:	60fb      	str	r3, [r7, #12]
        break;
 8002876:	e006      	b.n	8002886 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	60fb      	str	r3, [r7, #12]
        break;
 800287e:	e002      	b.n	8002886 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002884:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002886:	f7ff f8b9 	bl	80019fc <HAL_GetREVID>
 800288a:	4603      	mov	r3, r0
 800288c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002890:	4293      	cmp	r3, r2
 8002892:	d815      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a2b      	ldr	r2, [pc, #172]	; (8002944 <ADC_ConfigureBoostMode+0x208>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d908      	bls.n	80028ae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028ac:	e03e      	b.n	800292c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028bc:	609a      	str	r2, [r3, #8]
}
 80028be:	e035      	b.n	800292c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <ADC_ConfigureBoostMode+0x20c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d808      	bhi.n	80028e0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028dc:	609a      	str	r2, [r3, #8]
}
 80028de:	e025      	b.n	800292c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	; (800294c <ADC_ConfigureBoostMode+0x210>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d80a      	bhi.n	80028fe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	e016      	b.n	800292c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4a13      	ldr	r2, [pc, #76]	; (8002950 <ADC_ConfigureBoostMode+0x214>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d80a      	bhi.n	800291c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002918:	609a      	str	r2, [r3, #8]
}
 800291a:	e007      	b.n	800292c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40022000 	.word	0x40022000
 8002938:	40022100 	.word	0x40022100
 800293c:	40022300 	.word	0x40022300
 8002940:	58026300 	.word	0x58026300
 8002944:	01312d00 	.word	0x01312d00
 8002948:	005f5e10 	.word	0x005f5e10
 800294c:	00bebc20 	.word	0x00bebc20
 8002950:	017d7840 	.word	0x017d7840

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <__NVIC_SetPriorityGrouping+0x40>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	4313      	orrs	r3, r2
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__NVIC_SetPriorityGrouping+0x40>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00
 8002998:	05fa0000 	.word	0x05fa0000

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <__NVIC_EnableIRQ+0x38>)
 80029d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000e100 	.word	0xe000e100

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac0:	d301      	bcc.n	8002ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <SysTick_Config+0x40>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ace:	210f      	movs	r1, #15
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f7ff ff8e 	bl	80029f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <SysTick_Config+0x40>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <SysTick_Config+0x40>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff29 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b18:	f7ff ff40 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff90 	bl	8002a48 <NVIC_EncodePriority>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff5f 	bl	80029f4 <__NVIC_SetPriority>
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff33 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffa4 	bl	8002ab0 <SysTick_Config>
 8002b68:	4603      	mov	r3, r0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b82:	4b89      	ldr	r3, [pc, #548]	; (8002da8 <HAL_GPIO_Init+0x234>)
 8002b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b86:	e194      	b.n	8002eb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8186 	beq.w	8002eac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d005      	beq.n	8002bb8 <HAL_GPIO_Init+0x44>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d130      	bne.n	8002c1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bee:	2201      	movs	r2, #1
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0201 	and.w	r2, r3, #1
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d017      	beq.n	8002c56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d123      	bne.n	8002caa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	69b9      	ldr	r1, [r7, #24]
 8002ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0203 	and.w	r2, r3, #3
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80e0 	beq.w	8002eac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cec:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_GPIO_Init+0x238>)
 8002cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cf2:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <HAL_GPIO_Init+0x238>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <HAL_GPIO_Init+0x238>)
 8002cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d0a:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <HAL_GPIO_Init+0x23c>)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a20      	ldr	r2, [pc, #128]	; (8002db4 <HAL_GPIO_Init+0x240>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d052      	beq.n	8002ddc <HAL_GPIO_Init+0x268>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_GPIO_Init+0x244>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d031      	beq.n	8002da2 <HAL_GPIO_Init+0x22e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_GPIO_Init+0x248>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02b      	beq.n	8002d9e <HAL_GPIO_Init+0x22a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_GPIO_Init+0x24c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d025      	beq.n	8002d9a <HAL_GPIO_Init+0x226>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_GPIO_Init+0x250>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <HAL_GPIO_Init+0x222>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <HAL_GPIO_Init+0x254>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d019      	beq.n	8002d92 <HAL_GPIO_Init+0x21e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <HAL_GPIO_Init+0x258>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_GPIO_Init+0x21a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <HAL_GPIO_Init+0x25c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_GPIO_Init+0x216>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <HAL_GPIO_Init+0x260>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x212>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_GPIO_Init+0x264>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_GPIO_Init+0x20e>
 8002d7e:	2309      	movs	r3, #9
 8002d80:	e02d      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002d82:	230a      	movs	r3, #10
 8002d84:	e02b      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002d86:	2308      	movs	r3, #8
 8002d88:	e029      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002d8a:	2307      	movs	r3, #7
 8002d8c:	e027      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002d8e:	2306      	movs	r3, #6
 8002d90:	e025      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002d92:	2305      	movs	r3, #5
 8002d94:	e023      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e021      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e01f      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e01d      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e01b      	b.n	8002dde <HAL_GPIO_Init+0x26a>
 8002da6:	bf00      	nop
 8002da8:	58000080 	.word	0x58000080
 8002dac:	58024400 	.word	0x58024400
 8002db0:	58000400 	.word	0x58000400
 8002db4:	58020000 	.word	0x58020000
 8002db8:	58020400 	.word	0x58020400
 8002dbc:	58020800 	.word	0x58020800
 8002dc0:	58020c00 	.word	0x58020c00
 8002dc4:	58021000 	.word	0x58021000
 8002dc8:	58021400 	.word	0x58021400
 8002dcc:	58021800 	.word	0x58021800
 8002dd0:	58021c00 	.word	0x58021c00
 8002dd4:	58022000 	.word	0x58022000
 8002dd8:	58022400 	.word	0x58022400
 8002ddc:	2300      	movs	r3, #0
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	f002 0203 	and.w	r2, r2, #3
 8002de4:	0092      	lsls	r2, r2, #2
 8002de6:	4093      	lsls	r3, r2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dee:	4938      	ldr	r1, [pc, #224]	; (8002ed0 <HAL_GPIO_Init+0x35c>)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3302      	adds	r3, #2
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f47f ae63 	bne.w	8002b88 <HAL_GPIO_Init+0x14>
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
 8002ec6:	3724      	adds	r7, #36	; 0x24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	58000400 	.word	0x58000400

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ef0:	e003      	b.n	8002efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	619a      	str	r2, [r3, #24]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f08:	b08f      	sub	sp, #60	; 0x3c
 8002f0a:	af0a      	add	r7, sp, #40	; 0x28
 8002f0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e116      	b.n	8003146 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f008 fe40 	bl	800bbb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f005 fa29 	bl	80083ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	687e      	ldr	r6, [r7, #4]
 8002f64:	466d      	mov	r5, sp
 8002f66:	f106 0410 	add.w	r4, r6, #16
 8002f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f7a:	1d33      	adds	r3, r6, #4
 8002f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7e:	6838      	ldr	r0, [r7, #0]
 8002f80:	f005 f8f4 	bl	800816c <USB_CoreInit>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0d7      	b.n	8003146 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f005 fa17 	bl	80083d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	e04a      	b.n	800303e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	333d      	adds	r3, #61	; 0x3d
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	333c      	adds	r3, #60	; 0x3c
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	b298      	uxth	r0, r3
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3356      	adds	r3, #86	; 0x56
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3340      	adds	r3, #64	; 0x40
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3344      	adds	r3, #68	; 0x44
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3348      	adds	r3, #72	; 0x48
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	334c      	adds	r3, #76	; 0x4c
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	3301      	adds	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d3af      	bcc.n	8002fa8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e044      	b.n	80030d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	3301      	adds	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d3b5      	bcc.n	800304e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	687e      	ldr	r6, [r7, #4]
 80030ea:	466d      	mov	r5, sp
 80030ec:	f106 0410 	add.w	r4, r6, #16
 80030f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003100:	1d33      	adds	r3, r6, #4
 8003102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003104:	6838      	ldr	r0, [r7, #0]
 8003106:	f005 f9af 	bl	8008468 <USB_DevInit>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e014      	b.n	8003146 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b01      	cmp	r3, #1
 8003132:	d102      	bne.n	800313a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f001 f96f 	bl	8004418 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f006 f9f1 	bl	8009526 <USB_DevDisconnect>

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800314e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_PCD_Start+0x1c>
 8003166:	2302      	movs	r3, #2
 8003168:	e022      	b.n	80031b0 <HAL_PCD_Start+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f005 f8f8 	bl	800838c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f006 f99f 	bl	80094e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b08d      	sub	sp, #52	; 0x34
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f006 fa5d 	bl	800968e <USB_GetMode>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 84b7 	bne.w	8003b4a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f006 f9c1 	bl	8009568 <USB_ReadInterrupts>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 84ad 	beq.w	8003b48 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f006 f9ae 	bl	8009568 <USB_ReadInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d107      	bne.n	8003226 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f002 0202 	and.w	r2, r2, #2
 8003224:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f006 f99c 	bl	8009568 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b10      	cmp	r3, #16
 8003238:	d161      	bne.n	80032fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0210 	bic.w	r2, r2, #16
 8003248:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	0c5b      	lsrs	r3, r3, #17
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	2b02      	cmp	r3, #2
 8003274:	d124      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d035      	beq.n	80032ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800328c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	6a38      	ldr	r0, [r7, #32]
 8003296:	f005 ffd3 	bl	8009240 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a6:	441a      	add	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b8:	441a      	add	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	615a      	str	r2, [r3, #20]
 80032be:	e016      	b.n	80032ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	0c5b      	lsrs	r3, r3, #17
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d110      	bne.n	80032ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d2:	2208      	movs	r2, #8
 80032d4:	4619      	mov	r1, r3
 80032d6:	6a38      	ldr	r0, [r7, #32]
 80032d8:	f005 ffb2 	bl	8009240 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e8:	441a      	add	r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0210 	orr.w	r2, r2, #16
 80032fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f006 f930 	bl	8009568 <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003312:	f040 80a7 	bne.w	8003464 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f006 f935 	bl	800958e <USB_ReadDevAllOutEpInterrupt>
 8003324:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003326:	e099      	b.n	800345c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 808e 	beq.w	8003450 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f006 f959 	bl	80095f6 <USB_ReadDevOutEPInterrupt>
 8003344:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00c      	beq.n	800336a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335c:	461a      	mov	r2, r3
 800335e:	2301      	movs	r3, #1
 8003360:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fed1 	bl	800410c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00c      	beq.n	800338e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003380:	461a      	mov	r2, r3
 8003382:	2308      	movs	r3, #8
 8003384:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 ffa7 	bl	80042dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a4:	461a      	mov	r2, r3
 80033a6:	2310      	movs	r3, #16
 80033a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d030      	beq.n	8003416 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d109      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	3304      	adds	r3, #4
 80033e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	78db      	ldrb	r3, [r3, #3]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d108      	bne.n	8003404 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f008 fd00 	bl	800be04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003410:	461a      	mov	r2, r3
 8003412:	2302      	movs	r3, #2
 8003414:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342c:	461a      	mov	r2, r3
 800342e:	2320      	movs	r3, #32
 8003430:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003448:	461a      	mov	r2, r3
 800344a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800344e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	3301      	adds	r3, #1
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	2b00      	cmp	r3, #0
 8003460:	f47f af62 	bne.w	8003328 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f006 f87d 	bl	8009568 <USB_ReadInterrupts>
 800346e:	4603      	mov	r3, r0
 8003470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003474:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003478:	f040 80db 	bne.w	8003632 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f006 f89e 	bl	80095c2 <USB_ReadDevAllInEpInterrupt>
 8003486:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800348c:	e0cd      	b.n	800362a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80c2 	beq.w	800361e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f006 f8c4 	bl	8009632 <USB_ReadDevInEPInterrupt>
 80034aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d057      	beq.n	8003566 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	2201      	movs	r2, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69f9      	ldr	r1, [r7, #28]
 80034d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034d6:	4013      	ands	r3, r2
 80034d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e6:	461a      	mov	r2, r3
 80034e8:	2301      	movs	r3, #1
 80034ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d132      	bne.n	800355a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	3348      	adds	r3, #72	; 0x48
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4403      	add	r3, r0
 8003514:	3344      	adds	r3, #68	; 0x44
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4419      	add	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4403      	add	r3, r0
 8003528:	3348      	adds	r3, #72	; 0x48
 800352a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	2b00      	cmp	r3, #0
 8003530:	d113      	bne.n	800355a <HAL_PCD_IRQHandler+0x3a2>
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	334c      	adds	r3, #76	; 0x4c
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d108      	bne.n	800355a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003552:	461a      	mov	r2, r3
 8003554:	2101      	movs	r1, #1
 8003556:	f006 f8cd 	bl	80096f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	b2db      	uxtb	r3, r3
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f008 fbca 	bl	800bcfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	461a      	mov	r2, r3
 800357e:	2308      	movs	r3, #8
 8003580:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	461a      	mov	r2, r3
 800359a:	2310      	movs	r3, #16
 800359c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	461a      	mov	r2, r3
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c6:	6a38      	ldr	r0, [r7, #32]
 80035c8:	f005 f8ac 	bl	8008724 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	3338      	adds	r3, #56	; 0x38
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	78db      	ldrb	r3, [r3, #3]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d108      	bne.n	80035fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f008 fc17 	bl	800be28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003606:	461a      	mov	r2, r3
 8003608:	2302      	movs	r3, #2
 800360a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fcea 	bl	8003ff2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	3301      	adds	r3, #1
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	f47f af2e 	bne.w	800348e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f005 ff96 	bl	8009568 <USB_ReadInterrupts>
 800363c:	4603      	mov	r3, r0
 800363e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003646:	d122      	bne.n	800368e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800366e:	2100      	movs	r1, #0
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fef5 	bl	8004460 <HAL_PCDEx_LPM_Callback>
 8003676:	e002      	b.n	800367e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f008 fbb5 	bl	800bde8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800368c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f005 ff68 	bl	8009568 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a2:	d112      	bne.n	80036ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d102      	bne.n	80036ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f008 fb71 	bl	800bd9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f005 ff4a 	bl	8009568 <USB_ReadInterrupts>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036de:	d121      	bne.n	8003724 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80036ee:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d111      	bne.n	800371e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	f003 020f 	and.w	r2, r3, #15
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003714:	2101      	movs	r1, #1
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fea2 	bl	8004460 <HAL_PCDEx_LPM_Callback>
 800371c:	e002      	b.n	8003724 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f008 fb3c 	bl	800bd9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f005 ff1d 	bl	8009568 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	f040 80b7 	bne.w	80038aa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2110      	movs	r1, #16
 8003756:	4618      	mov	r0, r3
 8003758:	f004 ffe4 	bl	8008724 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003760:	e046      	b.n	80037f0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	461a      	mov	r2, r3
 8003770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003774:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003794:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	3301      	adds	r3, #1
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d3b3      	bcc.n	8003762 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003808:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800380c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003826:	f043 030b 	orr.w	r3, r3, #11
 800382a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383c:	f043 030b 	orr.w	r3, r3, #11
 8003840:	6453      	str	r3, [r2, #68]	; 0x44
 8003842:	e015      	b.n	8003870 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	4619      	mov	r1, r3
 8003854:	f242 032b 	movw	r3, #8235	; 0x202b
 8003858:	4313      	orrs	r3, r2
 800385a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386a:	f043 030b 	orr.w	r3, r3, #11
 800386e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800387e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003882:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003894:	461a      	mov	r2, r3
 8003896:	f005 ff2d 	bl	80096f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f005 fe5a 	bl	8009568 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038be:	d124      	bne.n	800390a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f005 fef1 	bl	80096ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 ffa5 	bl	800881e <USB_GetDevSpeed>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681c      	ldr	r4, [r3, #0]
 80038e0:	f001 fd9e 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 80038e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	4620      	mov	r0, r4
 80038f0:	f004 fcaa 	bl	8008248 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f008 fa28 	bl	800bd4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003908:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f005 fe2a 	bl	8009568 <USB_ReadInterrupts>
 8003914:	4603      	mov	r3, r0
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b08      	cmp	r3, #8
 800391c:	d10a      	bne.n	8003934 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f008 fa05 	bl	800bd2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f002 0208 	and.w	r2, r2, #8
 8003932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f005 fe15 	bl	8009568 <USB_ReadInterrupts>
 800393e:	4603      	mov	r3, r0
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d122      	bne.n	800398e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003954:	2301      	movs	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
 8003958:	e014      	b.n	8003984 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fb09 	bl	8003f90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	3301      	adds	r3, #1
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398a:	429a      	cmp	r2, r3
 800398c:	d3e5      	bcc.n	800395a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f005 fde8 	bl	8009568 <USB_ReadInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a2:	d13b      	bne.n	8003a1c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a4:	2301      	movs	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	e02b      	b.n	8003a02 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3340      	adds	r3, #64	; 0x40
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d115      	bne.n	80039fc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da12      	bge.n	80039fc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	333f      	adds	r3, #63	; 0x3f
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 faca 	bl	8003f90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	3301      	adds	r3, #1
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d3ce      	bcc.n	80039aa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f005 fda1 	bl	8009568 <USB_ReadInterrupts>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a30:	d155      	bne.n	8003ade <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a32:	2301      	movs	r3, #1
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	e045      	b.n	8003ac4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d12e      	bne.n	8003abe <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da2b      	bge.n	8003abe <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d121      	bne.n	8003abe <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aba:	6053      	str	r3, [r2, #4]
            break;
 8003abc:	e007      	b.n	8003ace <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d3b4      	bcc.n	8003a38 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f005 fd40 	bl	8009568 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af2:	d10a      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f008 f9a9 	bl	800be4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f005 fd2a 	bl	8009568 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d115      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f008 f999 	bl	800be68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	e000      	b.n	8003b4a <HAL_PCD_IRQHandler+0x992>
      return;
 8003b48:	bf00      	nop
    }
  }
}
 8003b4a:	3734      	adds	r7, #52	; 0x34
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd90      	pop	{r4, r7, pc}

08003b50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_PCD_SetAddress+0x1a>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e013      	b.n	8003b92 <HAL_PCD_SetAddress+0x42>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f005 fc88 	bl	8009498 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	4608      	mov	r0, r1
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4603      	mov	r3, r0
 8003baa:	70fb      	strb	r3, [r7, #3]
 8003bac:	460b      	mov	r3, r1
 8003bae:	803b      	strh	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da0f      	bge.n	8003be0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	f003 020f 	and.w	r2, r3, #15
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	3338      	adds	r3, #56	; 0x38
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	705a      	strb	r2, [r3, #1]
 8003bde:	e00f      	b.n	8003c00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 020f 	and.w	r2, r3, #15
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c0c:	883a      	ldrh	r2, [r7, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	78ba      	ldrb	r2, [r7, #2]
 8003c16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c2a:	78bb      	ldrb	r3, [r7, #2]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d102      	bne.n	8003c36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_PCD_EP_Open+0xaa>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e00e      	b.n	8003c62 <HAL_PCD_EP_Open+0xc8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68f9      	ldr	r1, [r7, #12]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f004 fe08 	bl	8008868 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c60:	7afb      	ldrb	r3, [r7, #11]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da0f      	bge.n	8003c9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	f003 020f 	and.w	r2, r3, #15
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3338      	adds	r3, #56	; 0x38
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	705a      	strb	r2, [r3, #1]
 8003c9c:	e00f      	b.n	8003cbe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_PCD_EP_Close+0x6e>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e00e      	b.n	8003cf6 <HAL_PCD_EP_Close+0x8c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 fe46 	bl	8008978 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d0e:	7afb      	ldrb	r3, [r7, #11]
 8003d10:	f003 020f 	and.w	r2, r3, #15
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	3304      	adds	r3, #4
 8003d26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d40:	7afb      	ldrb	r3, [r7, #11]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	6979      	ldr	r1, [r7, #20]
 8003d68:	f004 fee2 	bl	8008b30 <USB_EPStartXfer>

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003d98:	681b      	ldr	r3, [r3, #0]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	460b      	mov	r3, r1
 8003db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db6:	7afb      	ldrb	r3, [r7, #11]
 8003db8:	f003 020f 	and.w	r2, r3, #15
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	3338      	adds	r3, #56	; 0x38
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2201      	movs	r2, #1
 8003de4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de6:	7afb      	ldrb	r3, [r7, #11]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d102      	bne.n	8003e00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6979      	ldr	r1, [r7, #20]
 8003e0e:	f004 fe8f 	bl	8008b30 <USB_EPStartXfer>

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 020f 	and.w	r2, r3, #15
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d901      	bls.n	8003e3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e050      	b.n	8003edc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da0f      	bge.n	8003e62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 020f 	and.w	r2, r3, #15
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3338      	adds	r3, #56	; 0x38
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	3304      	adds	r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	705a      	strb	r2, [r3, #1]
 8003e60:	e00d      	b.n	8003e7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_PCD_EP_SetStall+0x82>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e01e      	b.n	8003edc <HAL_PCD_EP_SetStall+0xc0>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f005 fa1f 	bl	80092f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	b2d9      	uxtb	r1, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f005 fc11 	bl	80096f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d901      	bls.n	8003f02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e042      	b.n	8003f88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da0f      	bge.n	8003f2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	f003 020f 	and.w	r2, r3, #15
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	3338      	adds	r3, #56	; 0x38
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3304      	adds	r3, #4
 8003f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	705a      	strb	r2, [r3, #1]
 8003f28:	e00f      	b.n	8003f4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_PCD_EP_ClrStall+0x86>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e00e      	b.n	8003f88 <HAL_PCD_EP_ClrStall+0xa4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f005 fa27 	bl	80093cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	da0c      	bge.n	8003fbe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 020f 	and.w	r2, r3, #15
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	3338      	adds	r3, #56	; 0x38
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e00c      	b.n	8003fd8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68f9      	ldr	r1, [r7, #12]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f005 f846 	bl	8009070 <USB_EPStopXfer>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fe8:	7afb      	ldrb	r3, [r7, #11]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b08a      	sub	sp, #40	; 0x28
 8003ff6:	af02      	add	r7, sp, #8
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	3338      	adds	r3, #56	; 0x38
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	3304      	adds	r3, #4
 8004018:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	429a      	cmp	r2, r3
 8004024:	d901      	bls.n	800402a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06c      	b.n	8004104 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	429a      	cmp	r2, r3
 800403e:	d902      	bls.n	8004046 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3303      	adds	r3, #3
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800404e:	e02b      	b.n	80040a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	429a      	cmp	r2, r3
 8004064:	d902      	bls.n	800406c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3303      	adds	r3, #3
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68d9      	ldr	r1, [r3, #12]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	b2da      	uxtb	r2, r3
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004084:	b2db      	uxtb	r3, r3
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	4603      	mov	r3, r0
 800408a:	6978      	ldr	r0, [r7, #20]
 800408c:	f005 f89a 	bl	80091c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	441a      	add	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d809      	bhi.n	80040d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d203      	bcs.n	80040d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1be      	bne.n	8004050 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d811      	bhi.n	8004102 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	2201      	movs	r2, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	6939      	ldr	r1, [r7, #16]
 80040fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040fe:	4013      	ands	r3, r2
 8004100:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	333c      	adds	r3, #60	; 0x3c
 8004124:	3304      	adds	r3, #4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d17b      	bne.n	800423a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	4a61      	ldr	r2, [pc, #388]	; (80042d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	f240 80b9 	bls.w	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80b3 	beq.w	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	461a      	mov	r2, r3
 8004170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004174:	6093      	str	r3, [r2, #8]
 8004176:	e0a7      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	461a      	mov	r2, r3
 8004190:	2320      	movs	r3, #32
 8004192:	6093      	str	r3, [r2, #8]
 8004194:	e098      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 8093 	bne.w	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4a4b      	ldr	r2, [pc, #300]	; (80042d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d90f      	bls.n	80041ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c6:	6093      	str	r3, [r2, #8]
 80041c8:	e07e      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	0159      	lsls	r1, r3, #5
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	440b      	add	r3, r1
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d114      	bne.n	800422c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004214:	461a      	mov	r2, r3
 8004216:	2101      	movs	r1, #1
 8004218:	f005 fa6c 	bl	80096f4 <USB_EP0_OutStart>
 800421c:	e006      	b.n	800422c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	441a      	add	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f007 fd46 	bl	800bcc4 <HAL_PCD_DataOutStageCallback>
 8004238:	e046      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d124      	bne.n	800428c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	461a      	mov	r2, r3
 800425a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425e:	6093      	str	r3, [r2, #8]
 8004260:	e032      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	461a      	mov	r2, r3
 800427a:	2320      	movs	r3, #32
 800427c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f007 fd1d 	bl	800bcc4 <HAL_PCD_DataOutStageCallback>
 800428a:	e01d      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d114      	bne.n	80042bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042b4:	461a      	mov	r2, r3
 80042b6:	2100      	movs	r1, #0
 80042b8:	f005 fa1c 	bl	80096f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f007 fcfe 	bl	800bcc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	4f54300a 	.word	0x4f54300a
 80042d8:	4f54310a 	.word	0x4f54310a

080042dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	333c      	adds	r3, #60	; 0x3c
 80042f4:	3304      	adds	r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <PCD_EP_OutSetupPacket_int+0x88>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d90e      	bls.n	8004330 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f007 fcb5 	bl	800bca0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <PCD_EP_OutSetupPacket_int+0x88>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d90c      	bls.n	8004358 <PCD_EP_OutSetupPacket_int+0x7c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d108      	bne.n	8004358 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004350:	461a      	mov	r2, r3
 8004352:	2101      	movs	r1, #1
 8004354:	f005 f9ce 	bl	80096f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	4f54300a 	.word	0x4f54300a

08004368 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
 8004374:	4613      	mov	r3, r2
 8004376:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d107      	bne.n	8004396 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004386:	883b      	ldrh	r3, [r7, #0]
 8004388:	0419      	lsls	r1, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	430a      	orrs	r2, r1
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
 8004394:	e028      	b.n	80043e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4413      	add	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e00d      	b.n	80043c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	3340      	adds	r3, #64	; 0x40
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	4413      	add	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	3301      	adds	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3ec      	bcc.n	80043aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043d0:	883b      	ldrh	r3, [r7, #0]
 80043d2:	0418      	lsls	r0, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6819      	ldr	r1, [r3, #0]
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	3b01      	subs	r3, #1
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	4302      	orrs	r2, r0
 80043e0:	3340      	adds	r3, #64	; 0x40
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	460b      	mov	r3, r1
 8004400:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	887a      	ldrh	r2, [r7, #2]
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_PCDEx_ActivateLPM+0x44>)
 8004448:	4313      	orrs	r3, r2
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	10000003 	.word	0x10000003

08004460 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004480:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <HAL_PWREx_ConfigSupply+0x70>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d00a      	beq.n	80044a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800448c:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <HAL_PWREx_ConfigSupply+0x70>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e01f      	b.n	80044de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e01d      	b.n	80044de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_PWREx_ConfigSupply+0x70>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f023 0207 	bic.w	r2, r3, #7
 80044aa:	490f      	ldr	r1, [pc, #60]	; (80044e8 <HAL_PWREx_ConfigSupply+0x70>)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80044b2:	f7fd fa73 	bl	800199c <HAL_GetTick>
 80044b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044b8:	e009      	b.n	80044ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044ba:	f7fd fa6f 	bl	800199c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c8:	d901      	bls.n	80044ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e007      	b.n	80044de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_PWREx_ConfigSupply+0x70>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044da:	d1ee      	bne.n	80044ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	58024800 	.word	0x58024800

080044ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a04      	ldr	r2, [pc, #16]	; (8004508 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80044f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fa:	60d3      	str	r3, [r2, #12]
}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	58024800 	.word	0x58024800

0800450c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08c      	sub	sp, #48	; 0x30
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f000 bc48 	b.w	8004db0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8088 	beq.w	800463e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452e:	4b99      	ldr	r3, [pc, #612]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004538:	4b96      	ldr	r3, [pc, #600]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	2b10      	cmp	r3, #16
 8004542:	d007      	beq.n	8004554 <HAL_RCC_OscConfig+0x48>
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	2b18      	cmp	r3, #24
 8004548:	d111      	bne.n	800456e <HAL_RCC_OscConfig+0x62>
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d10c      	bne.n	800456e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	4b8f      	ldr	r3, [pc, #572]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d06d      	beq.n	800463c <HAL_RCC_OscConfig+0x130>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d169      	bne.n	800463c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f000 bc21 	b.w	8004db0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x7a>
 8004578:	4b86      	ldr	r3, [pc, #536]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a85      	ldr	r2, [pc, #532]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800457e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	e02e      	b.n	80045e4 <HAL_RCC_OscConfig+0xd8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x9c>
 800458e:	4b81      	ldr	r3, [pc, #516]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a80      	ldr	r2, [pc, #512]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4b7e      	ldr	r3, [pc, #504]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7d      	ldr	r2, [pc, #500]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80045a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e01d      	b.n	80045e4 <HAL_RCC_OscConfig+0xd8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0xc0>
 80045b2:	4b78      	ldr	r3, [pc, #480]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a77      	ldr	r2, [pc, #476]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80045b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4b75      	ldr	r3, [pc, #468]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a74      	ldr	r2, [pc, #464]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0xd8>
 80045cc:	4b71      	ldr	r3, [pc, #452]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a70      	ldr	r2, [pc, #448]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80045d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4b6e      	ldr	r3, [pc, #440]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6d      	ldr	r2, [pc, #436]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80045de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fd f9d6 	bl	800199c <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd f9d2 	bl	800199c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e3d4      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004606:	4b63      	ldr	r3, [pc, #396]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe8>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd f9c2 	bl	800199c <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fd f9be 	bl	800199c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e3c0      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800462e:	4b59      	ldr	r3, [pc, #356]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x110>
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80ca 	beq.w	80047e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464c:	4b51      	ldr	r3, [pc, #324]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004654:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004656:	4b4f      	ldr	r3, [pc, #316]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_RCC_OscConfig+0x166>
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	2b18      	cmp	r3, #24
 8004666:	d156      	bne.n	8004716 <HAL_RCC_OscConfig+0x20a>
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d151      	bne.n	8004716 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004672:	4b48      	ldr	r3, [pc, #288]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_RCC_OscConfig+0x17e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e392      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800468a:	4b42      	ldr	r3, [pc, #264]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 0219 	bic.w	r2, r3, #25
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	493f      	ldr	r1, [pc, #252]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004698:	4313      	orrs	r3, r2
 800469a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fd f97e 	bl	800199c <HAL_GetTick>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a4:	f7fd f97a 	bl	800199c <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e37c      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046b6:	4b37      	ldr	r3, [pc, #220]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c2:	f7fd f99b 	bl	80019fc <HAL_GetREVID>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d817      	bhi.n	8004700 <HAL_RCC_OscConfig+0x1f4>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b40      	cmp	r3, #64	; 0x40
 80046d6:	d108      	bne.n	80046ea <HAL_RCC_OscConfig+0x1de>
 80046d8:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046e0:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80046e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e8:	e07a      	b.n	80047e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b2a      	ldr	r3, [pc, #168]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	031b      	lsls	r3, r3, #12
 80046f8:	4926      	ldr	r1, [pc, #152]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046fe:	e06f      	b.n	80047e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b24      	ldr	r3, [pc, #144]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	4921      	ldr	r1, [pc, #132]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004714:	e064      	b.n	80047e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d047      	beq.n	80047ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800471e:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 0219 	bic.w	r2, r3, #25
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	491a      	ldr	r1, [pc, #104]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800472c:	4313      	orrs	r3, r2
 800472e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fd f934 	bl	800199c <HAL_GetTick>
 8004734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004738:	f7fd f930 	bl	800199c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e332      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004756:	f7fd f951 	bl	80019fc <HAL_GetREVID>
 800475a:	4603      	mov	r3, r0
 800475c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004760:	4293      	cmp	r3, r2
 8004762:	d819      	bhi.n	8004798 <HAL_RCC_OscConfig+0x28c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d108      	bne.n	800477e <HAL_RCC_OscConfig+0x272>
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004774:	4a07      	ldr	r2, [pc, #28]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477a:	6053      	str	r3, [r2, #4]
 800477c:	e030      	b.n	80047e0 <HAL_RCC_OscConfig+0x2d4>
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	031b      	lsls	r3, r3, #12
 800478c:	4901      	ldr	r1, [pc, #4]	; (8004794 <HAL_RCC_OscConfig+0x288>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
 8004792:	e025      	b.n	80047e0 <HAL_RCC_OscConfig+0x2d4>
 8004794:	58024400 	.word	0x58024400
 8004798:	4b9a      	ldr	r3, [pc, #616]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	4997      	ldr	r1, [pc, #604]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]
 80047ac:	e018      	b.n	80047e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ae:	4b95      	ldr	r3, [pc, #596]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a94      	ldr	r2, [pc, #592]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fd f8ef 	bl	800199c <HAL_GetTick>
 80047be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c2:	f7fd f8eb 	bl	800199c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e2ed      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047d4:	4b8b      	ldr	r3, [pc, #556]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f0      	bne.n	80047c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80a9 	beq.w	8004940 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ee:	4b85      	ldr	r3, [pc, #532]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047f8:	4b82      	ldr	r3, [pc, #520]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d007      	beq.n	8004814 <HAL_RCC_OscConfig+0x308>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2b18      	cmp	r3, #24
 8004808:	d13a      	bne.n	8004880 <HAL_RCC_OscConfig+0x374>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d135      	bne.n	8004880 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004814:	4b7b      	ldr	r3, [pc, #492]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_OscConfig+0x320>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d001      	beq.n	800482c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e2c1      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800482c:	f7fd f8e6 	bl	80019fc <HAL_GetREVID>
 8004830:	4603      	mov	r3, r0
 8004832:	f241 0203 	movw	r2, #4099	; 0x1003
 8004836:	4293      	cmp	r3, r2
 8004838:	d817      	bhi.n	800486a <HAL_RCC_OscConfig+0x35e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	2b20      	cmp	r3, #32
 8004840:	d108      	bne.n	8004854 <HAL_RCC_OscConfig+0x348>
 8004842:	4b70      	ldr	r3, [pc, #448]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800484a:	4a6e      	ldr	r2, [pc, #440]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800484c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004850:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004852:	e075      	b.n	8004940 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004854:	4b6b      	ldr	r3, [pc, #428]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	069b      	lsls	r3, r3, #26
 8004862:	4968      	ldr	r1, [pc, #416]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 8004864:	4313      	orrs	r3, r2
 8004866:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004868:	e06a      	b.n	8004940 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800486a:	4b66      	ldr	r3, [pc, #408]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	061b      	lsls	r3, r3, #24
 8004878:	4962      	ldr	r1, [pc, #392]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800487a:	4313      	orrs	r3, r2
 800487c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800487e:	e05f      	b.n	8004940 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d042      	beq.n	800490e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004888:	4b5e      	ldr	r3, [pc, #376]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a5d      	ldr	r2, [pc, #372]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800488e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd f882 	bl	800199c <HAL_GetTick>
 8004898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800489c:	f7fd f87e 	bl	800199c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e280      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ae:	4b55      	ldr	r3, [pc, #340]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ba:	f7fd f89f 	bl	80019fc <HAL_GetREVID>
 80048be:	4603      	mov	r3, r0
 80048c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d817      	bhi.n	80048f8 <HAL_RCC_OscConfig+0x3ec>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d108      	bne.n	80048e2 <HAL_RCC_OscConfig+0x3d6>
 80048d0:	4b4c      	ldr	r3, [pc, #304]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048d8:	4a4a      	ldr	r2, [pc, #296]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80048da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048de:	6053      	str	r3, [r2, #4]
 80048e0:	e02e      	b.n	8004940 <HAL_RCC_OscConfig+0x434>
 80048e2:	4b48      	ldr	r3, [pc, #288]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	069b      	lsls	r3, r3, #26
 80048f0:	4944      	ldr	r1, [pc, #272]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
 80048f6:	e023      	b.n	8004940 <HAL_RCC_OscConfig+0x434>
 80048f8:	4b42      	ldr	r3, [pc, #264]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	493f      	ldr	r1, [pc, #252]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 8004908:	4313      	orrs	r3, r2
 800490a:	60cb      	str	r3, [r1, #12]
 800490c:	e018      	b.n	8004940 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800490e:	4b3d      	ldr	r3, [pc, #244]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3c      	ldr	r2, [pc, #240]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 8004914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fd f83f 	bl	800199c <HAL_GetTick>
 800491e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004922:	f7fd f83b 	bl	800199c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e23d      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004934:	4b33      	ldr	r3, [pc, #204]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f0      	bne.n	8004922 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d036      	beq.n	80049ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d019      	beq.n	8004988 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004954:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 8004956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004958:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fd f81c 	bl	800199c <HAL_GetTick>
 8004964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004968:	f7fd f818 	bl	800199c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e21a      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800497c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x45c>
 8004986:	e018      	b.n	80049ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004988:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800498a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498c:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fd f802 	bl	800199c <HAL_GetTick>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800499c:	f7fc fffe 	bl	800199c <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e200      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ae:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80049b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d039      	beq.n	8004a3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01c      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a0c      	ldr	r2, [pc, #48]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80049d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049da:	f7fc ffdf 	bl	800199c <HAL_GetTick>
 80049de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e2:	f7fc ffdb 	bl	800199c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e1dd      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <HAL_RCC_OscConfig+0x4f8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x4d6>
 8004a00:	e01b      	b.n	8004a3a <HAL_RCC_OscConfig+0x52e>
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a08:	4b9b      	ldr	r3, [pc, #620]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a9a      	ldr	r2, [pc, #616]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a14:	f7fc ffc2 	bl	800199c <HAL_GetTick>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a1c:	f7fc ffbe 	bl	800199c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1c0      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a2e:	4b92      	ldr	r3, [pc, #584]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8081 	beq.w	8004b4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a48:	4b8c      	ldr	r3, [pc, #560]	; (8004c7c <HAL_RCC_OscConfig+0x770>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a8b      	ldr	r2, [pc, #556]	; (8004c7c <HAL_RCC_OscConfig+0x770>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a54:	f7fc ffa2 	bl	800199c <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5c:	f7fc ff9e 	bl	800199c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1a0      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a6e:	4b83      	ldr	r3, [pc, #524]	; (8004c7c <HAL_RCC_OscConfig+0x770>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_OscConfig+0x584>
 8004a82:	4b7d      	ldr	r3, [pc, #500]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a7c      	ldr	r2, [pc, #496]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	e02d      	b.n	8004aec <HAL_RCC_OscConfig+0x5e0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x5a6>
 8004a98:	4b77      	ldr	r3, [pc, #476]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	4a76      	ldr	r2, [pc, #472]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa4:	4b74      	ldr	r3, [pc, #464]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	4a73      	ldr	r2, [pc, #460]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004aaa:	f023 0304 	bic.w	r3, r3, #4
 8004aae:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab0:	e01c      	b.n	8004aec <HAL_RCC_OscConfig+0x5e0>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x5c8>
 8004aba:	4b6f      	ldr	r3, [pc, #444]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	4a6e      	ldr	r2, [pc, #440]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	f043 0304 	orr.w	r3, r3, #4
 8004ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac6:	4b6c      	ldr	r3, [pc, #432]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	4a6b      	ldr	r2, [pc, #428]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad2:	e00b      	b.n	8004aec <HAL_RCC_OscConfig+0x5e0>
 8004ad4:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	4a67      	ldr	r2, [pc, #412]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae0:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	4a64      	ldr	r2, [pc, #400]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004ae6:	f023 0304 	bic.w	r3, r3, #4
 8004aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d015      	beq.n	8004b20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fc ff52 	bl	800199c <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fc ff4e 	bl	800199c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e14e      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b12:	4b59      	ldr	r3, [pc, #356]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ee      	beq.n	8004afc <HAL_RCC_OscConfig+0x5f0>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fc ff3c 	bl	800199c <HAL_GetTick>
 8004b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fc ff38 	bl	800199c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e138      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b3e:	4b4e      	ldr	r3, [pc, #312]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ee      	bne.n	8004b28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 812d 	beq.w	8004dae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b54:	4b48      	ldr	r3, [pc, #288]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b5c:	2b18      	cmp	r3, #24
 8004b5e:	f000 80bd 	beq.w	8004cdc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	f040 809e 	bne.w	8004ca8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6c:	4b42      	ldr	r3, [pc, #264]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a41      	ldr	r2, [pc, #260]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fc ff10 	bl	800199c <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fc ff0c 	bl	800199c <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e10e      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b92:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b9e:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ba2:	4b37      	ldr	r3, [pc, #220]	; (8004c80 <HAL_RCC_OscConfig+0x774>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bae:	0112      	lsls	r2, r2, #4
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	4931      	ldr	r1, [pc, #196]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	628b      	str	r3, [r1, #40]	; 0x28
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	025b      	lsls	r3, r3, #9
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	3b01      	subs	r3, #1
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004be8:	4923      	ldr	r1, [pc, #140]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004bee:	4b22      	ldr	r3, [pc, #136]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bfa:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x778>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c06:	00d2      	lsls	r2, r2, #3
 8004c08:	491b      	ldr	r1, [pc, #108]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	f023 020c 	bic.w	r2, r3, #12
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	4917      	ldr	r1, [pc, #92]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c20:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	f023 0202 	bic.w	r2, r3, #2
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2c:	4912      	ldr	r1, [pc, #72]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c32:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <HAL_RCC_OscConfig+0x76c>)
 8004c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6e:	f7fc fe95 	bl	800199c <HAL_GetTick>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c74:	e011      	b.n	8004c9a <HAL_RCC_OscConfig+0x78e>
 8004c76:	bf00      	nop
 8004c78:	58024400 	.word	0x58024400
 8004c7c:	58024800 	.word	0x58024800
 8004c80:	fffffc0c 	.word	0xfffffc0c
 8004c84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fc fe88 	bl	800199c <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e08a      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c9a:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x77c>
 8004ca6:	e082      	b.n	8004dae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca8:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a42      	ldr	r2, [pc, #264]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fc fe72 	bl	800199c <HAL_GetTick>
 8004cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fc fe6e 	bl	800199c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e070      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cce:	4b3a      	ldr	r3, [pc, #232]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x7b0>
 8004cda:	e068      	b.n	8004dae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cdc:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ce2:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d031      	beq.n	8004d54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f003 0203 	and.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d12a      	bne.n	8004d54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d122      	bne.n	8004d54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d11a      	bne.n	8004d54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	0a5b      	lsrs	r3, r3, #9
 8004d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d111      	bne.n	8004d54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	0c1b      	lsrs	r3, r3, #16
 8004d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d108      	bne.n	8004d54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	0e1b      	lsrs	r3, r3, #24
 8004d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e02b      	b.n	8004db0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d58:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	08db      	lsrs	r3, r3, #3
 8004d5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d01f      	beq.n	8004dae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d6e:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d7a:	f7fc fe0f 	bl	800199c <HAL_GetTick>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d80:	bf00      	nop
 8004d82:	f7fc fe0b 	bl	800199c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d0f9      	beq.n	8004d82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <HAL_RCC_OscConfig+0x8b0>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d9a:	00d2      	lsls	r2, r2, #3
 8004d9c:	4906      	ldr	r1, [pc, #24]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	4a04      	ldr	r2, [pc, #16]	; (8004db8 <HAL_RCC_OscConfig+0x8ac>)
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3730      	adds	r7, #48	; 0x30
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	ffff0007 	.word	0xffff0007

08004dc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e19c      	b.n	800510e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b8a      	ldr	r3, [pc, #552]	; (8005000 <HAL_RCC_ClockConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d910      	bls.n	8004e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b87      	ldr	r3, [pc, #540]	; (8005000 <HAL_RCC_ClockConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 020f 	bic.w	r2, r3, #15
 8004dea:	4985      	ldr	r1, [pc, #532]	; (8005000 <HAL_RCC_ClockConfig+0x240>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b83      	ldr	r3, [pc, #524]	; (8005000 <HAL_RCC_ClockConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e184      	b.n	800510e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d010      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	4b7b      	ldr	r3, [pc, #492]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d908      	bls.n	8004e32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e20:	4b78      	ldr	r3, [pc, #480]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	4975      	ldr	r1, [pc, #468]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d010      	beq.n	8004e60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	4b70      	ldr	r3, [pc, #448]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d908      	bls.n	8004e60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e4e:	4b6d      	ldr	r3, [pc, #436]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	496a      	ldr	r1, [pc, #424]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d010      	beq.n	8004e8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	4b64      	ldr	r3, [pc, #400]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d908      	bls.n	8004e8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e7c:	4b61      	ldr	r3, [pc, #388]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	495e      	ldr	r1, [pc, #376]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d010      	beq.n	8004ebc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	4b59      	ldr	r3, [pc, #356]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d908      	bls.n	8004ebc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004eaa:	4b56      	ldr	r3, [pc, #344]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	4953      	ldr	r1, [pc, #332]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d010      	beq.n	8004eea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	4b4d      	ldr	r3, [pc, #308]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d908      	bls.n	8004eea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed8:	4b4a      	ldr	r3, [pc, #296]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f023 020f 	bic.w	r2, r3, #15
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4947      	ldr	r1, [pc, #284]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d055      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ef6:	4b43      	ldr	r3, [pc, #268]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	4940      	ldr	r1, [pc, #256]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f10:	4b3c      	ldr	r3, [pc, #240]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d121      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0f6      	b.n	800510e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d107      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f28:	4b36      	ldr	r3, [pc, #216]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d115      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0ea      	b.n	800510e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f40:	4b30      	ldr	r3, [pc, #192]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0de      	b.n	800510e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f50:	4b2c      	ldr	r3, [pc, #176]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0d6      	b.n	800510e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f60:	4b28      	ldr	r3, [pc, #160]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f023 0207 	bic.w	r2, r3, #7
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4925      	ldr	r1, [pc, #148]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f72:	f7fc fd13 	bl	800199c <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f78:	e00a      	b.n	8004f90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f7a:	f7fc fd0f 	bl	800199c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e0be      	b.n	800510e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f90:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d1eb      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	4b14      	ldr	r3, [pc, #80]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d208      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f023 020f 	bic.w	r2, r3, #15
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	490e      	ldr	r1, [pc, #56]	; (8005004 <HAL_RCC_ClockConfig+0x244>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCC_ClockConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d214      	bcs.n	8005008 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_RCC_ClockConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 020f 	bic.w	r2, r3, #15
 8004fe6:	4906      	ldr	r1, [pc, #24]	; (8005000 <HAL_RCC_ClockConfig+0x240>)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b04      	ldr	r3, [pc, #16]	; (8005000 <HAL_RCC_ClockConfig+0x240>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d005      	beq.n	8005008 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e086      	b.n	800510e <HAL_RCC_ClockConfig+0x34e>
 8005000:	52002000 	.word	0x52002000
 8005004:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	4b3f      	ldr	r3, [pc, #252]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005020:	429a      	cmp	r2, r3
 8005022:	d208      	bcs.n	8005036 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005024:	4b3c      	ldr	r3, [pc, #240]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	4939      	ldr	r1, [pc, #228]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 8005032:	4313      	orrs	r3, r2
 8005034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d010      	beq.n	8005064 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	4b34      	ldr	r3, [pc, #208]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800504e:	429a      	cmp	r2, r3
 8005050:	d208      	bcs.n	8005064 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005052:	4b31      	ldr	r3, [pc, #196]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	492e      	ldr	r1, [pc, #184]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 8005060:	4313      	orrs	r3, r2
 8005062:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	4b28      	ldr	r3, [pc, #160]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800507c:	429a      	cmp	r2, r3
 800507e:	d208      	bcs.n	8005092 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005080:	4b25      	ldr	r3, [pc, #148]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	4922      	ldr	r1, [pc, #136]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 800508e:	4313      	orrs	r3, r2
 8005090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d208      	bcs.n	80050c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050ae:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	4917      	ldr	r1, [pc, #92]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050c0:	f000 f834 	bl	800512c <HAL_RCC_GetSysClockFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	4912      	ldr	r1, [pc, #72]	; (800511c <HAL_RCC_ClockConfig+0x35c>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
 80050dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050de:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <HAL_RCC_ClockConfig+0x358>)
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	4a0d      	ldr	r2, [pc, #52]	; (800511c <HAL_RCC_ClockConfig+0x35c>)
 80050e8:	5cd3      	ldrb	r3, [r2, r3]
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
 80050f4:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <HAL_RCC_ClockConfig+0x360>)
 80050f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050f8:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <HAL_RCC_ClockConfig+0x364>)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80050fe:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <HAL_RCC_ClockConfig+0x368>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7fc fc00 	bl	8001908 <HAL_InitTick>
 8005108:	4603      	mov	r3, r0
 800510a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
 800511c:	0800d774 	.word	0x0800d774
 8005120:	2400320c 	.word	0x2400320c
 8005124:	24003208 	.word	0x24003208
 8005128:	24003210 	.word	0x24003210

0800512c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	b089      	sub	sp, #36	; 0x24
 8005130:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005132:	4bb3      	ldr	r3, [pc, #716]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800513a:	2b18      	cmp	r3, #24
 800513c:	f200 8155 	bhi.w	80053ea <HAL_RCC_GetSysClockFreq+0x2be>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	080051ad 	.word	0x080051ad
 800514c:	080053eb 	.word	0x080053eb
 8005150:	080053eb 	.word	0x080053eb
 8005154:	080053eb 	.word	0x080053eb
 8005158:	080053eb 	.word	0x080053eb
 800515c:	080053eb 	.word	0x080053eb
 8005160:	080053eb 	.word	0x080053eb
 8005164:	080053eb 	.word	0x080053eb
 8005168:	080051d3 	.word	0x080051d3
 800516c:	080053eb 	.word	0x080053eb
 8005170:	080053eb 	.word	0x080053eb
 8005174:	080053eb 	.word	0x080053eb
 8005178:	080053eb 	.word	0x080053eb
 800517c:	080053eb 	.word	0x080053eb
 8005180:	080053eb 	.word	0x080053eb
 8005184:	080053eb 	.word	0x080053eb
 8005188:	080051d9 	.word	0x080051d9
 800518c:	080053eb 	.word	0x080053eb
 8005190:	080053eb 	.word	0x080053eb
 8005194:	080053eb 	.word	0x080053eb
 8005198:	080053eb 	.word	0x080053eb
 800519c:	080053eb 	.word	0x080053eb
 80051a0:	080053eb 	.word	0x080053eb
 80051a4:	080053eb 	.word	0x080053eb
 80051a8:	080051df 	.word	0x080051df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ac:	4b94      	ldr	r3, [pc, #592]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d009      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051b8:	4b91      	ldr	r3, [pc, #580]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	08db      	lsrs	r3, r3, #3
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	4a90      	ldr	r2, [pc, #576]	; (8005404 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
 80051c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051ca:	e111      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051cc:	4b8d      	ldr	r3, [pc, #564]	; (8005404 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051ce:	61bb      	str	r3, [r7, #24]
      break;
 80051d0:	e10e      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051d2:	4b8d      	ldr	r3, [pc, #564]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051d4:	61bb      	str	r3, [r7, #24]
      break;
 80051d6:	e10b      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051d8:	4b8c      	ldr	r3, [pc, #560]	; (800540c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051da:	61bb      	str	r3, [r7, #24]
      break;
 80051dc:	e108      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051de:	4b88      	ldr	r3, [pc, #544]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051e8:	4b85      	ldr	r3, [pc, #532]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051f4:	4b82      	ldr	r3, [pc, #520]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051fe:	4b80      	ldr	r3, [pc, #512]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005202:	08db      	lsrs	r3, r3, #3
 8005204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80e1 	beq.w	80053e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b02      	cmp	r3, #2
 8005226:	f000 8083 	beq.w	8005330 <HAL_RCC_GetSysClockFreq+0x204>
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b02      	cmp	r3, #2
 800522e:	f200 80a1 	bhi.w	8005374 <HAL_RCC_GetSysClockFreq+0x248>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0x114>
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d056      	beq.n	80052ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800523e:	e099      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005240:	4b6f      	ldr	r3, [pc, #444]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d02d      	beq.n	80052a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800524c:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	08db      	lsrs	r3, r3, #3
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	4a6b      	ldr	r2, [pc, #428]	; (8005404 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
 800525c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	ee07 3a90 	vmov	s15, r3
 8005264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	4b62      	ldr	r3, [pc, #392]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005286:	ed97 6a02 	vldr	s12, [r7, #8]
 800528a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005410 <HAL_RCC_GetSysClockFreq+0x2e4>
 800528e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052a6:	e087      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005414 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ba:	4b51      	ldr	r3, [pc, #324]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005410 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052ea:	e065      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005418 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fe:	4b40      	ldr	r3, [pc, #256]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005312:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005410 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800532e:	e043      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800541c <HAL_RCC_GetSysClockFreq+0x2f0>
 800533e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005342:	4b2f      	ldr	r3, [pc, #188]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005352:	ed97 6a02 	vldr	s12, [r7, #8]
 8005356:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005410 <HAL_RCC_GetSysClockFreq+0x2e4>
 800535a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005372:	e021      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005418 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005386:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005396:	ed97 6a02 	vldr	s12, [r7, #8]
 800539a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005410 <HAL_RCC_GetSysClockFreq+0x2e4>
 800539e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	0a5b      	lsrs	r3, r3, #9
 80053be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c2:	3301      	adds	r3, #1
 80053c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053dc:	ee17 3a90 	vmov	r3, s15
 80053e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053e2:	e005      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61bb      	str	r3, [r7, #24]
      break;
 80053e8:	e002      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053ec:	61bb      	str	r3, [r7, #24]
      break;
 80053ee:	bf00      	nop
  }

  return sysclockfreq;
 80053f0:	69bb      	ldr	r3, [r7, #24]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3724      	adds	r7, #36	; 0x24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	58024400 	.word	0x58024400
 8005404:	03d09000 	.word	0x03d09000
 8005408:	003d0900 	.word	0x003d0900
 800540c:	017d7840 	.word	0x017d7840
 8005410:	46000000 	.word	0x46000000
 8005414:	4c742400 	.word	0x4c742400
 8005418:	4a742400 	.word	0x4a742400
 800541c:	4bbebc20 	.word	0x4bbebc20

08005420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005426:	f7ff fe81 	bl	800512c <HAL_RCC_GetSysClockFreq>
 800542a:	4602      	mov	r2, r0
 800542c:	4b10      	ldr	r3, [pc, #64]	; (8005470 <HAL_RCC_GetHCLKFreq+0x50>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	490f      	ldr	r1, [pc, #60]	; (8005474 <HAL_RCC_GetHCLKFreq+0x54>)
 8005438:	5ccb      	ldrb	r3, [r1, r3]
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005444:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <HAL_RCC_GetHCLKFreq+0x50>)
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	4a09      	ldr	r2, [pc, #36]	; (8005474 <HAL_RCC_GetHCLKFreq+0x54>)
 800544e:	5cd3      	ldrb	r3, [r2, r3]
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	fa22 f303 	lsr.w	r3, r2, r3
 800545a:	4a07      	ldr	r2, [pc, #28]	; (8005478 <HAL_RCC_GetHCLKFreq+0x58>)
 800545c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800545e:	4a07      	ldr	r2, [pc, #28]	; (800547c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005464:	4b04      	ldr	r3, [pc, #16]	; (8005478 <HAL_RCC_GetHCLKFreq+0x58>)
 8005466:	681b      	ldr	r3, [r3, #0]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	58024400 	.word	0x58024400
 8005474:	0800d774 	.word	0x0800d774
 8005478:	2400320c 	.word	0x2400320c
 800547c:	24003208 	.word	0x24003208

08005480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005484:	f7ff ffcc 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4904      	ldr	r1, [pc, #16]	; (80054a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	58024400 	.word	0x58024400
 80054a8:	0800d774 	.word	0x0800d774

080054ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b0:	b0ca      	sub	sp, #296	; 0x128
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054be:	2300      	movs	r3, #0
 80054c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80054d0:	2500      	movs	r5, #0
 80054d2:	ea54 0305 	orrs.w	r3, r4, r5
 80054d6:	d049      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054e2:	d02f      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80054e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054e8:	d828      	bhi.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ee:	d01a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054f4:	d822      	bhi.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054fe:	d007      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005500:	e01c      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005502:	4bb8      	ldr	r3, [pc, #736]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	4ab7      	ldr	r2, [pc, #732]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800550e:	e01a      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005514:	3308      	adds	r3, #8
 8005516:	2102      	movs	r1, #2
 8005518:	4618      	mov	r0, r3
 800551a:	f002 fb61 	bl	8007be0 <RCCEx_PLL2_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005524:	e00f      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552a:	3328      	adds	r3, #40	; 0x28
 800552c:	2102      	movs	r1, #2
 800552e:	4618      	mov	r0, r3
 8005530:	f002 fc08 	bl	8007d44 <RCCEx_PLL3_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800553a:	e004      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005542:	e000      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800554e:	4ba5      	ldr	r3, [pc, #660]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005552:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800555c:	4aa1      	ldr	r2, [pc, #644]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800555e:	430b      	orrs	r3, r1
 8005560:	6513      	str	r3, [r2, #80]	; 0x50
 8005562:	e003      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005568:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005578:	f04f 0900 	mov.w	r9, #0
 800557c:	ea58 0309 	orrs.w	r3, r8, r9
 8005580:	d047      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	2b04      	cmp	r3, #4
 800558a:	d82a      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055a9 	.word	0x080055a9
 8005598:	080055b7 	.word	0x080055b7
 800559c:	080055cd 	.word	0x080055cd
 80055a0:	080055eb 	.word	0x080055eb
 80055a4:	080055eb 	.word	0x080055eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a8:	4b8e      	ldr	r3, [pc, #568]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	4a8d      	ldr	r2, [pc, #564]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055b4:	e01a      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ba:	3308      	adds	r3, #8
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f002 fb0e 	bl	8007be0 <RCCEx_PLL2_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055ca:	e00f      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d0:	3328      	adds	r3, #40	; 0x28
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f002 fbb5 	bl	8007d44 <RCCEx_PLL3_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055e0:	e004      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055e8:	e000      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80055ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055f4:	4b7b      	ldr	r3, [pc, #492]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	f023 0107 	bic.w	r1, r3, #7
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005602:	4a78      	ldr	r2, [pc, #480]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005604:	430b      	orrs	r3, r1
 8005606:	6513      	str	r3, [r2, #80]	; 0x50
 8005608:	e003      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800560e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800561e:	f04f 0b00 	mov.w	fp, #0
 8005622:	ea5a 030b 	orrs.w	r3, sl, fp
 8005626:	d04c      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005632:	d030      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005638:	d829      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800563a:	2bc0      	cmp	r3, #192	; 0xc0
 800563c:	d02d      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800563e:	2bc0      	cmp	r3, #192	; 0xc0
 8005640:	d825      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005642:	2b80      	cmp	r3, #128	; 0x80
 8005644:	d018      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005646:	2b80      	cmp	r3, #128	; 0x80
 8005648:	d821      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d007      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005652:	e01c      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005654:	4b63      	ldr	r3, [pc, #396]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	4a62      	ldr	r2, [pc, #392]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800565a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800565e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005660:	e01c      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005666:	3308      	adds	r3, #8
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f002 fab8 	bl	8007be0 <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005676:	e011      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567c:	3328      	adds	r3, #40	; 0x28
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f002 fb5f 	bl	8007d44 <RCCEx_PLL3_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800568c:	e006      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005694:	e002      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005696:	bf00      	nop
 8005698:	e000      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800569a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800569c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80056a4:	4b4f      	ldr	r3, [pc, #316]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b2:	4a4c      	ldr	r2, [pc, #304]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6513      	str	r3, [r2, #80]	; 0x50
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80056ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80056d2:	2300      	movs	r3, #0
 80056d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80056d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80056dc:	460b      	mov	r3, r1
 80056de:	4313      	orrs	r3, r2
 80056e0:	d053      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ee:	d035      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80056f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f4:	d82e      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056fa:	d031      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80056fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005700:	d828      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005706:	d01a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800570c:	d822      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005716:	d007      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005718:	e01c      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571a:	4b32      	ldr	r3, [pc, #200]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	4a31      	ldr	r2, [pc, #196]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005724:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005726:	e01c      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572c:	3308      	adds	r3, #8
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f002 fa55 	bl	8007be0 <RCCEx_PLL2_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800573c:	e011      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005742:	3328      	adds	r3, #40	; 0x28
 8005744:	2100      	movs	r1, #0
 8005746:	4618      	mov	r0, r3
 8005748:	f002 fafc 	bl	8007d44 <RCCEx_PLL3_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005752:	e006      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800575a:	e002      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800576a:	4b1e      	ldr	r3, [pc, #120]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800577a:	4a1a      	ldr	r2, [pc, #104]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800577c:	430b      	orrs	r3, r1
 800577e:	6593      	str	r3, [r2, #88]	; 0x58
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005786:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005796:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800579a:	2300      	movs	r3, #0
 800579c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80057a4:	460b      	mov	r3, r1
 80057a6:	4313      	orrs	r3, r2
 80057a8:	d056      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057b6:	d038      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80057b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057bc:	d831      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057c2:	d034      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80057c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057c8:	d82b      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ce:	d01d      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80057d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057d4:	d825      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d006      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80057da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057e0:	e01f      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057e2:	bf00      	nop
 80057e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e8:	4ba2      	ldr	r3, [pc, #648]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4aa1      	ldr	r2, [pc, #644]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057f4:	e01c      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fa:	3308      	adds	r3, #8
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f002 f9ee 	bl	8007be0 <RCCEx_PLL2_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800580a:	e011      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800580c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005810:	3328      	adds	r3, #40	; 0x28
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f002 fa95 	bl	8007d44 <RCCEx_PLL3_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005820:	e006      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005828:	e002      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005838:	4b8e      	ldr	r3, [pc, #568]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005844:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005848:	4a8a      	ldr	r2, [pc, #552]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800584a:	430b      	orrs	r3, r1
 800584c:	6593      	str	r3, [r2, #88]	; 0x58
 800584e:	e003      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005854:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800586e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005872:	460b      	mov	r3, r1
 8005874:	4313      	orrs	r3, r2
 8005876:	d03a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587e:	2b30      	cmp	r3, #48	; 0x30
 8005880:	d01f      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005882:	2b30      	cmp	r3, #48	; 0x30
 8005884:	d819      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005886:	2b20      	cmp	r3, #32
 8005888:	d00c      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800588a:	2b20      	cmp	r3, #32
 800588c:	d815      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d019      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005892:	2b10      	cmp	r3, #16
 8005894:	d111      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005896:	4b77      	ldr	r3, [pc, #476]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	4a76      	ldr	r2, [pc, #472]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800589c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058a2:	e011      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a8:	3308      	adds	r3, #8
 80058aa:	2102      	movs	r1, #2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f002 f997 	bl	8007be0 <RCCEx_PLL2_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058c0:	e002      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058d0:	4b68      	ldr	r3, [pc, #416]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058de:	4a65      	ldr	r2, [pc, #404]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80058fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005904:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d051      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005918:	d035      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800591a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800591e:	d82e      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005920:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005924:	d031      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005926:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800592a:	d828      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800592c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005930:	d01a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005936:	d822      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800593c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005940:	d007      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005942:	e01c      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005944:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	4a4a      	ldr	r2, [pc, #296]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005950:	e01c      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005956:	3308      	adds	r3, #8
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f002 f940 	bl	8007be0 <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005966:	e011      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800596c:	3328      	adds	r3, #40	; 0x28
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f002 f9e7 	bl	8007d44 <RCCEx_PLL3_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800597c:	e006      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005984:	e002      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005994:	4b37      	ldr	r3, [pc, #220]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005998:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a2:	4a34      	ldr	r2, [pc, #208]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6513      	str	r3, [r2, #80]	; 0x50
 80059a8:	e003      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80059be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d056      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059dc:	d033      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80059de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e2:	d82c      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059e8:	d02f      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80059ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059ee:	d826      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059f4:	d02b      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80059f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059fa:	d820      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a00:	d012      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a06:	d81a      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d022      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a10:	d115      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a16:	3308      	adds	r3, #8
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f002 f8e0 	bl	8007be0 <RCCEx_PLL2_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a26:	e015      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2c:	3328      	adds	r3, #40	; 0x28
 8005a2e:	2101      	movs	r1, #1
 8005a30:	4618      	mov	r0, r3
 8005a32:	f002 f987 	bl	8007d44 <RCCEx_PLL3_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a3c:	e00a      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a44:	e006      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a46:	bf00      	nop
 8005a48:	e004      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a4a:	bf00      	nop
 8005a4c:	e002      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10d      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a5c:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6a:	4a02      	ldr	r2, [pc, #8]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6513      	str	r3, [r2, #80]	; 0x50
 8005a70:	e006      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a72:	bf00      	nop
 8005a74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	d055      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aac:	d033      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ab2:	d82c      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab8:	d02f      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d826      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ac4:	d02b      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005ac6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005aca:	d820      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad0:	d012      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad6:	d81a      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d022      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ae0:	d115      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	2101      	movs	r1, #1
 8005aea:	4618      	mov	r0, r3
 8005aec:	f002 f878 	bl	8007be0 <RCCEx_PLL2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005af6:	e015      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afc:	3328      	adds	r3, #40	; 0x28
 8005afe:	2101      	movs	r1, #1
 8005b00:	4618      	mov	r0, r3
 8005b02:	f002 f91f 	bl	8007d44 <RCCEx_PLL3_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b0c:	e00a      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b14:	e006      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b16:	bf00      	nop
 8005b18:	e004      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b2c:	4ba3      	ldr	r3, [pc, #652]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b3c:	4a9f      	ldr	r2, [pc, #636]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	6593      	str	r3, [r2, #88]	; 0x58
 8005b42:	e003      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b66:	460b      	mov	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	d037      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b76:	d00e      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b7c:	d816      	bhi.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d018      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b86:	d111      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b88:	4b8c      	ldr	r3, [pc, #560]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	4a8b      	ldr	r2, [pc, #556]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b94:	e00f      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f002 f81e 	bl	8007be0 <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005baa:	e004      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bbe:	4b7f      	ldr	r3, [pc, #508]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	4a7b      	ldr	r2, [pc, #492]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6513      	str	r3, [r2, #80]	; 0x50
 8005bd2:	e003      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bec:	2300      	movs	r3, #0
 8005bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005bf2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	d039      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d81c      	bhi.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c49 	.word	0x08005c49
 8005c10:	08005c1d 	.word	0x08005c1d
 8005c14:	08005c2b 	.word	0x08005c2b
 8005c18:	08005c49 	.word	0x08005c49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1c:	4b67      	ldr	r3, [pc, #412]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a66      	ldr	r2, [pc, #408]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c28:	e00f      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2e:	3308      	adds	r3, #8
 8005c30:	2102      	movs	r1, #2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 ffd4 	bl	8007be0 <RCCEx_PLL2_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c3e:	e004      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c46:	e000      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c52:	4b5a      	ldr	r3, [pc, #360]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c56:	f023 0103 	bic.w	r1, r3, #3
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c60:	4a56      	ldr	r2, [pc, #344]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c62:	430b      	orrs	r3, r1
 8005c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c66:	e003      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f000 809f 	beq.w	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c92:	4b4b      	ldr	r3, [pc, #300]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a4a      	ldr	r2, [pc, #296]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c9e:	f7fb fe7d 	bl	800199c <HAL_GetTick>
 8005ca2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca8:	f7fb fe78 	bl	800199c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b64      	cmp	r3, #100	; 0x64
 8005cb6:	d903      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cbe:	e005      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc0:	4b3f      	ldr	r3, [pc, #252]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ed      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d179      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cd4:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ce0:	4053      	eors	r3, r2
 8005ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d015      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cea:	4b34      	ldr	r3, [pc, #208]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cf6:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	4a30      	ldr	r2, [pc, #192]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d00:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d02:	4b2e      	ldr	r3, [pc, #184]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	4a2d      	ldr	r2, [pc, #180]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d0e:	4a2b      	ldr	r2, [pc, #172]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d22:	d118      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fb fe3a 	bl	800199c <HAL_GetTick>
 8005d28:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d2c:	e00d      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d2e:	f7fb fe35 	bl	800199c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d38:	1ad2      	subs	r2, r2, r3
 8005d3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d903      	bls.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005d48:	e005      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0eb      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d129      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d6e:	d10e      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d70:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d80:	091a      	lsrs	r2, r3, #4
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6113      	str	r3, [r2, #16]
 8005d8c:	e005      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d98:	6113      	str	r3, [r2, #16]
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005daa:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6713      	str	r3, [r2, #112]	; 0x70
 8005db0:	e00e      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005db6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005dba:	e009      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	58024800 	.word	0x58024800
 8005dc4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f002 0301 	and.w	r3, r2, #1
 8005ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005de0:	2300      	movs	r3, #0
 8005de2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005de6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f000 8089 	beq.w	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df8:	2b28      	cmp	r3, #40	; 0x28
 8005dfa:	d86b      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005edd 	.word	0x08005edd
 8005e08:	08005ed5 	.word	0x08005ed5
 8005e0c:	08005ed5 	.word	0x08005ed5
 8005e10:	08005ed5 	.word	0x08005ed5
 8005e14:	08005ed5 	.word	0x08005ed5
 8005e18:	08005ed5 	.word	0x08005ed5
 8005e1c:	08005ed5 	.word	0x08005ed5
 8005e20:	08005ed5 	.word	0x08005ed5
 8005e24:	08005ea9 	.word	0x08005ea9
 8005e28:	08005ed5 	.word	0x08005ed5
 8005e2c:	08005ed5 	.word	0x08005ed5
 8005e30:	08005ed5 	.word	0x08005ed5
 8005e34:	08005ed5 	.word	0x08005ed5
 8005e38:	08005ed5 	.word	0x08005ed5
 8005e3c:	08005ed5 	.word	0x08005ed5
 8005e40:	08005ed5 	.word	0x08005ed5
 8005e44:	08005ebf 	.word	0x08005ebf
 8005e48:	08005ed5 	.word	0x08005ed5
 8005e4c:	08005ed5 	.word	0x08005ed5
 8005e50:	08005ed5 	.word	0x08005ed5
 8005e54:	08005ed5 	.word	0x08005ed5
 8005e58:	08005ed5 	.word	0x08005ed5
 8005e5c:	08005ed5 	.word	0x08005ed5
 8005e60:	08005ed5 	.word	0x08005ed5
 8005e64:	08005edd 	.word	0x08005edd
 8005e68:	08005ed5 	.word	0x08005ed5
 8005e6c:	08005ed5 	.word	0x08005ed5
 8005e70:	08005ed5 	.word	0x08005ed5
 8005e74:	08005ed5 	.word	0x08005ed5
 8005e78:	08005ed5 	.word	0x08005ed5
 8005e7c:	08005ed5 	.word	0x08005ed5
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005edd 	.word	0x08005edd
 8005e88:	08005ed5 	.word	0x08005ed5
 8005e8c:	08005ed5 	.word	0x08005ed5
 8005e90:	08005ed5 	.word	0x08005ed5
 8005e94:	08005ed5 	.word	0x08005ed5
 8005e98:	08005ed5 	.word	0x08005ed5
 8005e9c:	08005ed5 	.word	0x08005ed5
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005edd 	.word	0x08005edd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eac:	3308      	adds	r3, #8
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 fe95 	bl	8007be0 <RCCEx_PLL2_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ebc:	e00f      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec2:	3328      	adds	r3, #40	; 0x28
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 ff3c 	bl	8007d44 <RCCEx_PLL3_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ed2:	e004      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005eda:	e000      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ee6:	4bbf      	ldr	r3, [pc, #764]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef4:	4abb      	ldr	r2, [pc, #748]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	6553      	str	r3, [r2, #84]	; 0x54
 8005efa:	e003      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f002 0302 	and.w	r3, r2, #2
 8005f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4313      	orrs	r3, r2
 8005f22:	d041      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	d824      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f81 	.word	0x08005f81
 8005f38:	08005f4d 	.word	0x08005f4d
 8005f3c:	08005f63 	.word	0x08005f63
 8005f40:	08005f81 	.word	0x08005f81
 8005f44:	08005f81 	.word	0x08005f81
 8005f48:	08005f81 	.word	0x08005f81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f50:	3308      	adds	r3, #8
 8005f52:	2101      	movs	r1, #1
 8005f54:	4618      	mov	r0, r3
 8005f56:	f001 fe43 	bl	8007be0 <RCCEx_PLL2_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f60:	e00f      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f66:	3328      	adds	r3, #40	; 0x28
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 feea 	bl	8007d44 <RCCEx_PLL3_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f76:	e004      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f8a:	4b96      	ldr	r3, [pc, #600]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8e:	f023 0107 	bic.w	r1, r3, #7
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f98:	4a92      	ldr	r2, [pc, #584]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	6553      	str	r3, [r2, #84]	; 0x54
 8005f9e:	e003      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f002 0304 	and.w	r3, r2, #4
 8005fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	d044      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd0:	2b05      	cmp	r3, #5
 8005fd2:	d825      	bhi.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005fd4:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08006029 	.word	0x08006029
 8005fe0:	08005ff5 	.word	0x08005ff5
 8005fe4:	0800600b 	.word	0x0800600b
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	08006029 	.word	0x08006029
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fdef 	bl	8007be0 <RCCEx_PLL2_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006008:	e00f      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800600a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600e:	3328      	adds	r3, #40	; 0x28
 8006010:	2101      	movs	r1, #1
 8006012:	4618      	mov	r0, r3
 8006014:	f001 fe96 	bl	8007d44 <RCCEx_PLL3_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800601e:	e004      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006026:	e000      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006032:	4b6c      	ldr	r3, [pc, #432]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006036:	f023 0107 	bic.w	r1, r3, #7
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006042:	4a68      	ldr	r2, [pc, #416]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006044:	430b      	orrs	r3, r1
 8006046:	6593      	str	r3, [r2, #88]	; 0x58
 8006048:	e003      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800604e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f002 0320 	and.w	r3, r2, #32
 800605e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006062:	2300      	movs	r3, #0
 8006064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006068:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800606c:	460b      	mov	r3, r1
 800606e:	4313      	orrs	r3, r2
 8006070:	d055      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800607e:	d033      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006084:	d82c      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608a:	d02f      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006090:	d826      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006096:	d02b      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006098:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800609c:	d820      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800609e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060a2:	d012      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80060a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060a8:	d81a      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d022      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80060ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060b2:	d115      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b8:	3308      	adds	r3, #8
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 fd8f 	bl	8007be0 <RCCEx_PLL2_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060c8:	e015      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ce:	3328      	adds	r3, #40	; 0x28
 80060d0:	2102      	movs	r1, #2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fe36 	bl	8007d44 <RCCEx_PLL3_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060de:	e00a      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060e6:	e006      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e8:	bf00      	nop
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060ec:	bf00      	nop
 80060ee:	e002      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060fe:	4b39      	ldr	r3, [pc, #228]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006102:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	4a35      	ldr	r2, [pc, #212]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006110:	430b      	orrs	r3, r1
 8006112:	6553      	str	r3, [r2, #84]	; 0x54
 8006114:	e003      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800611a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800612a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006134:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006138:	460b      	mov	r3, r1
 800613a:	4313      	orrs	r3, r2
 800613c:	d058      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006146:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800614a:	d033      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800614c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006150:	d82c      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006156:	d02f      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615c:	d826      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800615e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006162:	d02b      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006168:	d820      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800616a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616e:	d012      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006174:	d81a      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d022      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	d115      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006184:	3308      	adds	r3, #8
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fd29 	bl	8007be0 <RCCEx_PLL2_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006194:	e015      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619a:	3328      	adds	r3, #40	; 0x28
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fdd0 	bl	8007d44 <RCCEx_PLL3_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061aa:	e00a      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061b2:	e006      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b4:	bf00      	nop
 80061b6:	e004      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b8:	bf00      	nop
 80061ba:	e002      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061bc:	bf00      	nop
 80061be:	e000      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10e      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061ca:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061da:	4a02      	ldr	r2, [pc, #8]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061dc:	430b      	orrs	r3, r1
 80061de:	6593      	str	r3, [r2, #88]	; 0x58
 80061e0:	e006      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80061fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006206:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800620a:	460b      	mov	r3, r1
 800620c:	4313      	orrs	r3, r2
 800620e:	d055      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006214:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006218:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800621c:	d033      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800621e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006222:	d82c      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006228:	d02f      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622e:	d826      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006230:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006234:	d02b      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006236:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800623a:	d820      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800623c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006240:	d012      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006246:	d81a      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d022      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800624c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006250:	d115      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006256:	3308      	adds	r3, #8
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f001 fcc0 	bl	8007be0 <RCCEx_PLL2_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006266:	e015      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626c:	3328      	adds	r3, #40	; 0x28
 800626e:	2102      	movs	r1, #2
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fd67 	bl	8007d44 <RCCEx_PLL3_Config>
 8006276:	4603      	mov	r3, r0
 8006278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800627c:	e00a      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006284:	e006      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006286:	bf00      	nop
 8006288:	e004      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800628a:	bf00      	nop
 800628c:	e002      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800629c:	4ba1      	ldr	r3, [pc, #644]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800629e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062ac:	4a9d      	ldr	r2, [pc, #628]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ae:	430b      	orrs	r3, r1
 80062b0:	6593      	str	r3, [r2, #88]	; 0x58
 80062b2:	e003      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 0308 	and.w	r3, r2, #8
 80062c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d01e      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e8:	d10c      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ee:	3328      	adds	r3, #40	; 0x28
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 fd26 	bl	8007d44 <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006304:	4b87      	ldr	r3, [pc, #540]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006314:	4a83      	ldr	r2, [pc, #524]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006316:	430b      	orrs	r3, r1
 8006318:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f002 0310 	and.w	r3, r2, #16
 8006326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800632a:	2300      	movs	r3, #0
 800632c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006330:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006334:	460b      	mov	r3, r1
 8006336:	4313      	orrs	r3, r2
 8006338:	d01e      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006346:	d10c      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800634c:	3328      	adds	r3, #40	; 0x28
 800634e:	2102      	movs	r1, #2
 8006350:	4618      	mov	r0, r3
 8006352:	f001 fcf7 	bl	8007d44 <RCCEx_PLL3_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006362:	4b70      	ldr	r3, [pc, #448]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006372:	4a6c      	ldr	r2, [pc, #432]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006374:	430b      	orrs	r3, r1
 8006376:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800638e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006392:	460b      	mov	r3, r1
 8006394:	4313      	orrs	r3, r2
 8006396:	d03e      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063a4:	d022      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80063a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063aa:	d81b      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b4:	d00b      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80063b6:	e015      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063bc:	3308      	adds	r3, #8
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 fc0d 	bl	8007be0 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063cc:	e00f      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d2:	3328      	adds	r3, #40	; 0x28
 80063d4:	2102      	movs	r1, #2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 fcb4 	bl	8007d44 <RCCEx_PLL3_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063e2:	e004      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063ea:	e000      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063f6:	4b4b      	ldr	r3, [pc, #300]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006402:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006406:	4a47      	ldr	r2, [pc, #284]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006408:	430b      	orrs	r3, r1
 800640a:	6593      	str	r3, [r2, #88]	; 0x58
 800640c:	e003      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006412:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006422:	67bb      	str	r3, [r7, #120]	; 0x78
 8006424:	2300      	movs	r3, #0
 8006426:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006428:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800642c:	460b      	mov	r3, r1
 800642e:	4313      	orrs	r3, r2
 8006430:	d03b      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800643e:	d01f      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006444:	d818      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800644a:	d003      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800644c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006450:	d007      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006452:	e011      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006454:	4b33      	ldr	r3, [pc, #204]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4a32      	ldr	r2, [pc, #200]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800645a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006460:	e00f      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006466:	3328      	adds	r3, #40	; 0x28
 8006468:	2101      	movs	r1, #1
 800646a:	4618      	mov	r0, r3
 800646c:	f001 fc6a 	bl	8007d44 <RCCEx_PLL3_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006476:	e004      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800647e:	e000      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800648a:	4b26      	ldr	r3, [pc, #152]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	4a22      	ldr	r2, [pc, #136]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800649c:	430b      	orrs	r3, r1
 800649e:	6553      	str	r3, [r2, #84]	; 0x54
 80064a0:	e003      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80064b6:	673b      	str	r3, [r7, #112]	; 0x70
 80064b8:	2300      	movs	r3, #0
 80064ba:	677b      	str	r3, [r7, #116]	; 0x74
 80064bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d034      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d4:	d007      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80064d6:	e011      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d8:	4b12      	ldr	r3, [pc, #72]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	4a11      	ldr	r2, [pc, #68]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064e4:	e00e      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ea:	3308      	adds	r3, #8
 80064ec:	2102      	movs	r1, #2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 fb76 	bl	8007be0 <RCCEx_PLL2_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064fa:	e003      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10d      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800650e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651a:	4a02      	ldr	r2, [pc, #8]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800651c:	430b      	orrs	r3, r1
 800651e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006520:	e006      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006522:	bf00      	nop
 8006524:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800652c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800653c:	66bb      	str	r3, [r7, #104]	; 0x68
 800653e:	2300      	movs	r3, #0
 8006540:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006542:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006546:	460b      	mov	r3, r1
 8006548:	4313      	orrs	r3, r2
 800654a:	d00c      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006550:	3328      	adds	r3, #40	; 0x28
 8006552:	2102      	movs	r1, #2
 8006554:	4618      	mov	r0, r3
 8006556:	f001 fbf5 	bl	8007d44 <RCCEx_PLL3_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006572:	663b      	str	r3, [r7, #96]	; 0x60
 8006574:	2300      	movs	r3, #0
 8006576:	667b      	str	r3, [r7, #100]	; 0x64
 8006578:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800657c:	460b      	mov	r3, r1
 800657e:	4313      	orrs	r3, r2
 8006580:	d038      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800658a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800658e:	d018      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006594:	d811      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659a:	d014      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800659c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a0:	d80b      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d011      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065aa:	d106      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ac:	4bc3      	ldr	r3, [pc, #780]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4ac2      	ldr	r2, [pc, #776]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065b8:	e008      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065c0:	e004      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10b      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065d4:	4bb9      	ldr	r3, [pc, #740]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e4:	4ab5      	ldr	r2, [pc, #724]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e6:	430b      	orrs	r3, r1
 80065e8:	6553      	str	r3, [r2, #84]	; 0x54
 80065ea:	e003      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006600:	65bb      	str	r3, [r7, #88]	; 0x58
 8006602:	2300      	movs	r3, #0
 8006604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006606:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800660a:	460b      	mov	r3, r1
 800660c:	4313      	orrs	r3, r2
 800660e:	d009      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006610:	4baa      	ldr	r3, [pc, #680]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800661c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661e:	4aa7      	ldr	r2, [pc, #668]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006620:	430b      	orrs	r3, r1
 8006622:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006630:	653b      	str	r3, [r7, #80]	; 0x50
 8006632:	2300      	movs	r3, #0
 8006634:	657b      	str	r3, [r7, #84]	; 0x54
 8006636:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800663a:	460b      	mov	r3, r1
 800663c:	4313      	orrs	r3, r2
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006640:	4b9e      	ldr	r3, [pc, #632]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006650:	4a9a      	ldr	r2, [pc, #616]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006652:	430b      	orrs	r3, r1
 8006654:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006662:	64bb      	str	r3, [r7, #72]	; 0x48
 8006664:	2300      	movs	r3, #0
 8006666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006668:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800666c:	460b      	mov	r3, r1
 800666e:	4313      	orrs	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006672:	4b92      	ldr	r3, [pc, #584]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006676:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006680:	4a8e      	ldr	r2, [pc, #568]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006682:	430b      	orrs	r3, r1
 8006684:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006692:	643b      	str	r3, [r7, #64]	; 0x40
 8006694:	2300      	movs	r3, #0
 8006696:	647b      	str	r3, [r7, #68]	; 0x44
 8006698:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800669c:	460b      	mov	r3, r1
 800669e:	4313      	orrs	r3, r2
 80066a0:	d00e      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066a2:	4b86      	ldr	r3, [pc, #536]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	4a85      	ldr	r2, [pc, #532]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ac:	6113      	str	r3, [r2, #16]
 80066ae:	4b83      	ldr	r3, [pc, #524]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066b0:	6919      	ldr	r1, [r3, #16]
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80066ba:	4a80      	ldr	r2, [pc, #512]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066bc:	430b      	orrs	r3, r1
 80066be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80066cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80066ce:	2300      	movs	r3, #0
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80066d6:	460b      	mov	r3, r1
 80066d8:	4313      	orrs	r3, r2
 80066da:	d009      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066dc:	4b77      	ldr	r3, [pc, #476]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	4a74      	ldr	r2, [pc, #464]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ec:	430b      	orrs	r3, r1
 80066ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80066fc:	633b      	str	r3, [r7, #48]	; 0x30
 80066fe:	2300      	movs	r3, #0
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
 8006702:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006706:	460b      	mov	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800670c:	4b6b      	ldr	r3, [pc, #428]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800671c:	4a67      	ldr	r2, [pc, #412]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800671e:	430b      	orrs	r3, r1
 8006720:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	2100      	movs	r1, #0
 800672c:	62b9      	str	r1, [r7, #40]	; 0x28
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006734:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d011      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006742:	3308      	adds	r3, #8
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f001 fa4a 	bl	8007be0 <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800675e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	2100      	movs	r1, #0
 800676c:	6239      	str	r1, [r7, #32]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
 8006774:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006778:	460b      	mov	r3, r1
 800677a:	4313      	orrs	r3, r2
 800677c:	d011      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006782:	3308      	adds	r3, #8
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f001 fa2a 	bl	8007be0 <RCCEx_PLL2_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800679e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	2100      	movs	r1, #0
 80067ac:	61b9      	str	r1, [r7, #24]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d011      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c2:	3308      	adds	r3, #8
 80067c4:	2102      	movs	r1, #2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 fa0a 	bl	8007be0 <RCCEx_PLL2_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80067d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	2100      	movs	r1, #0
 80067ec:	6139      	str	r1, [r7, #16]
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d011      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006802:	3328      	adds	r3, #40	; 0x28
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f001 fa9c 	bl	8007d44 <RCCEx_PLL3_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800681e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	2100      	movs	r1, #0
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006838:	460b      	mov	r3, r1
 800683a:	4313      	orrs	r3, r2
 800683c:	d011      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006842:	3328      	adds	r3, #40	; 0x28
 8006844:	2101      	movs	r1, #1
 8006846:	4618      	mov	r0, r3
 8006848:	f001 fa7c 	bl	8007d44 <RCCEx_PLL3_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800685e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	2100      	movs	r1, #0
 800686c:	6039      	str	r1, [r7, #0]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d011      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006882:	3328      	adds	r3, #40	; 0x28
 8006884:	2102      	movs	r1, #2
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fa5c 	bl	8007d44 <RCCEx_PLL3_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80068a2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e000      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80068b6:	46bd      	mov	sp, r7
 80068b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068bc:	58024400 	.word	0x58024400

080068c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b090      	sub	sp, #64	; 0x40
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ce:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80068d2:	430b      	orrs	r3, r1
 80068d4:	f040 8094 	bne.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80068d8:	4b9e      	ldr	r3, [pc, #632]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	f200 8087 	bhi.w	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006905 	.word	0x08006905
 80068f4:	0800692d 	.word	0x0800692d
 80068f8:	08006955 	.word	0x08006955
 80068fc:	080069f1 	.word	0x080069f1
 8006900:	0800697d 	.word	0x0800697d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006904:	4b93      	ldr	r3, [pc, #588]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006910:	d108      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006916:	4618      	mov	r0, r3
 8006918:	f001 f810 	bl	800793c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006920:	f000 bd45 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006928:	f000 bd41 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800692c:	4b89      	ldr	r3, [pc, #548]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006938:	d108      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800693a:	f107 0318 	add.w	r3, r7, #24
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fd54 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006948:	f000 bd31 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006950:	f000 bd2d 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006954:	4b7f      	ldr	r3, [pc, #508]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800695c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006960:	d108      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006962:	f107 030c 	add.w	r3, r7, #12
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fe94 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006970:	f000 bd1d 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006978:	f000 bd19 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800697c:	4b75      	ldr	r3, [pc, #468]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800697e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006984:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006986:	4b73      	ldr	r3, [pc, #460]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b04      	cmp	r3, #4
 8006990:	d10c      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006994:	2b00      	cmp	r3, #0
 8006996:	d109      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006998:	4b6e      	ldr	r3, [pc, #440]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	08db      	lsrs	r3, r3, #3
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	4a6d      	ldr	r2, [pc, #436]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
 80069a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069aa:	e01f      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069ac:	4b69      	ldr	r3, [pc, #420]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b8:	d106      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069c0:	d102      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069c2:	4b66      	ldr	r3, [pc, #408]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c6:	e011      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069c8:	4b62      	ldr	r3, [pc, #392]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069d4:	d106      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069dc:	d102      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069de:	4b60      	ldr	r3, [pc, #384]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e2:	e003      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069e8:	f000 bce1 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069ec:	f000 bcdf 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069f0:	4b5c      	ldr	r3, [pc, #368]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f4:	f000 bcdb 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fc:	f000 bcd7 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a04:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	f040 80ad 	bne.w	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006a0e:	4b51      	ldr	r3, [pc, #324]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1e:	d056      	beq.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a26:	f200 8090 	bhi.w	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	2bc0      	cmp	r3, #192	; 0xc0
 8006a2e:	f000 8088 	beq.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2bc0      	cmp	r3, #192	; 0xc0
 8006a36:	f200 8088 	bhi.w	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b80      	cmp	r3, #128	; 0x80
 8006a3e:	d032      	beq.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2b80      	cmp	r3, #128	; 0x80
 8006a44:	f200 8081 	bhi.w	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	2b40      	cmp	r3, #64	; 0x40
 8006a52:	d014      	beq.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006a54:	e079      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a56:	4b3f      	ldr	r3, [pc, #252]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a62:	d108      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 ff67 	bl	800793c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a72:	f000 bc9c 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a7a:	f000 bc98 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a7e:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a8a:	d108      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a8c:	f107 0318 	add.w	r3, r7, #24
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fcab 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a9a:	f000 bc88 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa2:	f000 bc84 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006aa6:	4b2b      	ldr	r3, [pc, #172]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab2:	d108      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ab4:	f107 030c 	add.w	r3, r7, #12
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fdeb 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac2:	f000 bc74 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aca:	f000 bc70 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ace:	4b21      	ldr	r3, [pc, #132]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ad6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ad8:	4b1e      	ldr	r3, [pc, #120]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d10c      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	08db      	lsrs	r3, r3, #3
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006af6:	fa22 f303 	lsr.w	r3, r2, r3
 8006afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afc:	e01f      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006afe:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b0a:	d106      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b12:	d102      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b14:	4b11      	ldr	r3, [pc, #68]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b18:	e011      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b1a:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b26:	d106      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b2e:	d102      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b34:	e003      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b3a:	f000 bc38 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b3e:	f000 bc36 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b42:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b46:	f000 bc32 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b4e:	f000 bc2e 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b52:	bf00      	nop
 8006b54:	58024400 	.word	0x58024400
 8006b58:	03d09000 	.word	0x03d09000
 8006b5c:	003d0900 	.word	0x003d0900
 8006b60:	017d7840 	.word	0x017d7840
 8006b64:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b6c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006b70:	430b      	orrs	r3, r1
 8006b72:	f040 809c 	bne.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006b76:	4b9e      	ldr	r3, [pc, #632]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006b7e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b86:	d054      	beq.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b8e:	f200 808b 	bhi.w	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b98:	f000 8083 	beq.w	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ba2:	f200 8081 	bhi.w	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bac:	d02f      	beq.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb4:	d878      	bhi.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc2:	d012      	beq.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006bc4:	e070      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bc6:	4b8a      	ldr	r3, [pc, #552]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bd2:	d107      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 feaf 	bl	800793c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be2:	e3e4      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be8:	e3e1      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bea:	4b81      	ldr	r3, [pc, #516]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bf8:	f107 0318 	add.w	r3, r7, #24
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fbf5 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c06:	e3d2      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0c:	e3cf      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c0e:	4b78      	ldr	r3, [pc, #480]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c1a:	d107      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c1c:	f107 030c 	add.w	r3, r7, #12
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fd37 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c2a:	e3c0      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c30:	e3bd      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c32:	4b6f      	ldr	r3, [pc, #444]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c3c:	4b6c      	ldr	r3, [pc, #432]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d10c      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c4e:	4b68      	ldr	r3, [pc, #416]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	08db      	lsrs	r3, r3, #3
 8006c54:	f003 0303 	and.w	r3, r3, #3
 8006c58:	4a66      	ldr	r2, [pc, #408]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c60:	e01e      	b.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c62:	4b63      	ldr	r3, [pc, #396]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c6e:	d106      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c76:	d102      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c78:	4b5f      	ldr	r3, [pc, #380]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c7c:	e010      	b.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c7e:	4b5c      	ldr	r3, [pc, #368]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c8a:	d106      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c92:	d102      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c94:	4b59      	ldr	r3, [pc, #356]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c98:	e002      	b.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c9e:	e386      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ca0:	e385      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ca2:	4b57      	ldr	r3, [pc, #348]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca6:	e382      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cac:	e37f      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	f040 80a7 	bne.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006cbc:	4b4c      	ldr	r3, [pc, #304]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ccc:	d055      	beq.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cd4:	f200 8096 	bhi.w	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cde:	f000 8084 	beq.w	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ce8:	f200 808c 	bhi.w	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cf2:	d030      	beq.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cfa:	f200 8083 	bhi.w	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d0a:	d012      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006d0c:	e07a      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d0e:	4b38      	ldr	r3, [pc, #224]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d1a:	d107      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fe0b 	bl	800793c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d2a:	e340      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d30:	e33d      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d32:	4b2f      	ldr	r3, [pc, #188]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d3e:	d107      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d40:	f107 0318 	add.w	r3, r7, #24
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fb51 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d4e:	e32e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d54:	e32b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d56:	4b26      	ldr	r3, [pc, #152]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d62:	d107      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d64:	f107 030c 	add.w	r3, r7, #12
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fc93 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d72:	e31c      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d78:	e319      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d7a:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d10c      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d96:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	08db      	lsrs	r3, r3, #3
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	4a14      	ldr	r2, [pc, #80]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006da2:	fa22 f303 	lsr.w	r3, r2, r3
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da8:	e01e      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006daa:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db6:	d106      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dbe:	d102      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dc4:	e010      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd2:	d106      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dda:	d102      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ddc:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de0:	e002      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006de6:	e2e2      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006de8:	e2e1      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006dea:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dee:	e2de      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006df0:	58024400 	.word	0x58024400
 8006df4:	03d09000 	.word	0x03d09000
 8006df8:	003d0900 	.word	0x003d0900
 8006dfc:	017d7840 	.word	0x017d7840
 8006e00:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e08:	e2d1      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006e12:	430b      	orrs	r3, r1
 8006e14:	f040 809c 	bne.w	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006e18:	4b93      	ldr	r3, [pc, #588]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e28:	d054      	beq.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e30:	f200 808b 	bhi.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e3a:	f000 8083 	beq.w	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e44:	f200 8081 	bhi.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e4e:	d02f      	beq.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e56:	d878      	bhi.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e64:	d012      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006e66:	e070      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e68:	4b7f      	ldr	r3, [pc, #508]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e74:	d107      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fd5e 	bl	800793c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e84:	e293      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e8a:	e290      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e8c:	4b76      	ldr	r3, [pc, #472]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e98:	d107      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e9a:	f107 0318 	add.w	r3, r7, #24
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 faa4 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea8:	e281      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eae:	e27e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006eb0:	4b6d      	ldr	r3, [pc, #436]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ebc:	d107      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ebe:	f107 030c 	add.w	r3, r7, #12
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fbe6 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ecc:	e26f      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ed2:	e26c      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ed4:	4b64      	ldr	r3, [pc, #400]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ede:	4b62      	ldr	r3, [pc, #392]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d10c      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ef0:	4b5d      	ldr	r3, [pc, #372]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	08db      	lsrs	r3, r3, #3
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	4a5c      	ldr	r2, [pc, #368]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
 8006f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f02:	e01e      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f04:	4b58      	ldr	r3, [pc, #352]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f10:	d106      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f18:	d102      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f1a:	4b55      	ldr	r3, [pc, #340]	; (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f1e:	e010      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f20:	4b51      	ldr	r3, [pc, #324]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f2c:	d106      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f34:	d102      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f36:	4b4f      	ldr	r3, [pc, #316]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3a:	e002      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006f40:	e235      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f42:	e234      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f44:	4b4c      	ldr	r3, [pc, #304]	; (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f48:	e231      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f4e:	e22e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f54:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	f040 808f 	bne.w	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006f5e:	4b42      	ldr	r3, [pc, #264]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f62:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f66:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f6e:	d06b      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f76:	d874      	bhi.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f7e:	d056      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f86:	d86c      	bhi.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f8e:	d03b      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f96:	d864      	bhi.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f9e:	d021      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa6:	d85c      	bhi.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d004      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb4:	d004      	beq.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006fb6:	e054      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f7fe fa62 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8006fbc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fbe:	e1f6      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fc0:	4b29      	ldr	r3, [pc, #164]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fcc:	d107      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fce:	f107 0318 	add.w	r3, r7, #24
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fa0a 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fdc:	e1e7      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe2:	e1e4      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fe4:	4b20      	ldr	r3, [pc, #128]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff0:	d107      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff2:	f107 030c 	add.w	r3, r7, #12
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fb4c 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007000:	e1d5      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007006:	e1d2      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007008:	4b17      	ldr	r3, [pc, #92]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b04      	cmp	r3, #4
 8007012:	d109      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007014:	4b14      	ldr	r3, [pc, #80]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	08db      	lsrs	r3, r3, #3
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	4a13      	ldr	r2, [pc, #76]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007026:	e1c2      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702c:	e1bf      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800702e:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703a:	d102      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800703c:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007040:	e1b5      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007046:	e1b2      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007048:	4b07      	ldr	r3, [pc, #28]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007054:	d102      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800705a:	e1a8      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007060:	e1a5      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007066:	e1a2      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007068:	58024400 	.word	0x58024400
 800706c:	03d09000 	.word	0x03d09000
 8007070:	003d0900 	.word	0x003d0900
 8007074:	017d7840 	.word	0x017d7840
 8007078:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800707c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007080:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007084:	430b      	orrs	r3, r1
 8007086:	d173      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007088:	4b9c      	ldr	r3, [pc, #624]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800708a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007090:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007098:	d02f      	beq.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a0:	d863      	bhi.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d004      	beq.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ae:	d012      	beq.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80070b0:	e05b      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070b2:	4b92      	ldr	r3, [pc, #584]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070be:	d107      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c0:	f107 0318 	add.w	r3, r7, #24
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 f991 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ce:	e16e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d4:	e16b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070d6:	4b89      	ldr	r3, [pc, #548]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e2:	d107      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e4:	f107 030c 	add.w	r3, r7, #12
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fad3 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f2:	e15c      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f8:	e159      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070fa:	4b80      	ldr	r3, [pc, #512]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007102:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007104:	4b7d      	ldr	r3, [pc, #500]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b04      	cmp	r3, #4
 800710e:	d10c      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007112:	2b00      	cmp	r3, #0
 8007114:	d109      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007116:	4b79      	ldr	r3, [pc, #484]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	08db      	lsrs	r3, r3, #3
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	4a77      	ldr	r2, [pc, #476]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007122:	fa22 f303 	lsr.w	r3, r2, r3
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007128:	e01e      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800712a:	4b74      	ldr	r3, [pc, #464]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007136:	d106      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800713e:	d102      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007140:	4b70      	ldr	r3, [pc, #448]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007144:	e010      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007146:	4b6d      	ldr	r3, [pc, #436]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007152:	d106      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715a:	d102      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800715c:	4b6a      	ldr	r3, [pc, #424]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800715e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007160:	e002      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007166:	e122      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007168:	e121      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800716e:	e11e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007174:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007178:	430b      	orrs	r3, r1
 800717a:	d133      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800717c:	4b5f      	ldr	r3, [pc, #380]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800717e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007184:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007192:	d012      	beq.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007194:	e023      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007196:	4b59      	ldr	r3, [pc, #356]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071a2:	d107      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fbc7 	bl	800793c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b2:	e0fc      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b8:	e0f9      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071ba:	4b50      	ldr	r3, [pc, #320]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c6:	d107      	bne.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071c8:	f107 0318 	add.w	r3, r7, #24
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 f90d 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d6:	e0ea      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071dc:	e0e7      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e2:	e0e4      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80071e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80071ec:	430b      	orrs	r3, r1
 80071ee:	f040 808d 	bne.w	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80071f2:	4b42      	ldr	r3, [pc, #264]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80071fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007202:	d06b      	beq.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800720a:	d874      	bhi.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007212:	d056      	beq.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d86c      	bhi.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007222:	d03b      	beq.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800722a:	d864      	bhi.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007232:	d021      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800723a:	d85c      	bhi.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007248:	d004      	beq.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800724a:	e054      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800724c:	f000 f8b8 	bl	80073c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007250:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007252:	e0ac      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007254:	4b29      	ldr	r3, [pc, #164]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800725c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007260:	d107      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007262:	f107 0318 	add.w	r3, r7, #24
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f8c0 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007270:	e09d      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007276:	e09a      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007278:	4b20      	ldr	r3, [pc, #128]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007284:	d107      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007286:	f107 030c 	add.w	r3, r7, #12
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fa02 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007294:	e08b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800729a:	e088      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800729c:	4b17      	ldr	r3, [pc, #92]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d109      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072a8:	4b14      	ldr	r3, [pc, #80]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	08db      	lsrs	r3, r3, #3
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	4a13      	ldr	r2, [pc, #76]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ba:	e078      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c0:	e075      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072c2:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ce:	d102      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80072d0:	4b0c      	ldr	r3, [pc, #48]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072d4:	e06b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072da:	e068      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072dc:	4b07      	ldr	r3, [pc, #28]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072e8:	d102      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ee:	e05e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072f4:	e05b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072fa:	e058      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072fc:	58024400 	.word	0x58024400
 8007300:	03d09000 	.word	0x03d09000
 8007304:	003d0900 	.word	0x003d0900
 8007308:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800730c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007310:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007314:	430b      	orrs	r3, r1
 8007316:	d148      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007318:	4b27      	ldr	r3, [pc, #156]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007320:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007328:	d02a      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007330:	d838      	bhi.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	2b00      	cmp	r3, #0
 8007336:	d004      	beq.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800733e:	d00d      	beq.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007340:	e030      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007342:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800734e:	d102      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007350:	4b1a      	ldr	r3, [pc, #104]	; (80073bc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007354:	e02b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800735a:	e028      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800735c:	4b16      	ldr	r3, [pc, #88]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007368:	d107      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800736a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fae4 	bl	800793c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007378:	e019      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800737e:	e016      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007380:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800738c:	d107      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800738e:	f107 0318 	add.w	r3, r7, #24
 8007392:	4618      	mov	r0, r3
 8007394:	f000 f82a 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800739c:	e007      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a2:	e004      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a8:	e001      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80073ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3740      	adds	r7, #64	; 0x40
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	58024400 	.word	0x58024400
 80073bc:	017d7840 	.word	0x017d7840

080073c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073c4:	f7fe f82c 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 80073c8:	4602      	mov	r2, r0
 80073ca:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	091b      	lsrs	r3, r3, #4
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	4904      	ldr	r1, [pc, #16]	; (80073e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073d6:	5ccb      	ldrb	r3, [r1, r3]
 80073d8:	f003 031f 	and.w	r3, r3, #31
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	58024400 	.word	0x58024400
 80073e8:	0800d774 	.word	0x0800d774

080073ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073f4:	4ba1      	ldr	r3, [pc, #644]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80073fe:	4b9f      	ldr	r3, [pc, #636]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	0b1b      	lsrs	r3, r3, #12
 8007404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007408:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800740a:	4b9c      	ldr	r3, [pc, #624]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	091b      	lsrs	r3, r3, #4
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007416:	4b99      	ldr	r3, [pc, #612]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741a:	08db      	lsrs	r3, r3, #3
 800741c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	fb02 f303 	mul.w	r3, r2, r3
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8111 	beq.w	800765c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f000 8083 	beq.w	8007548 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b02      	cmp	r3, #2
 8007446:	f200 80a1 	bhi.w	800758c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d056      	beq.n	8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007456:	e099      	b.n	800758c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007458:	4b88      	ldr	r3, [pc, #544]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d02d      	beq.n	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007464:	4b85      	ldr	r3, [pc, #532]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	08db      	lsrs	r3, r3, #3
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	4a84      	ldr	r2, [pc, #528]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
 8007474:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b7b      	ldr	r3, [pc, #492]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074be:	e087      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b6a      	ldr	r3, [pc, #424]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007502:	e065      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b59      	ldr	r3, [pc, #356]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a03 	vldr	s12, [r7, #12]
 800752a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007546:	e043      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007690 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b48      	ldr	r3, [pc, #288]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a03 	vldr	s12, [r7, #12]
 800756e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758a:	e021      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b37      	ldr	r3, [pc, #220]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80075d0:	4b2a      	ldr	r3, [pc, #168]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	0a5b      	lsrs	r3, r3, #9
 80075d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f6:	ee17 2a90 	vmov	r2, s15
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80075fe:	4b1f      	ldr	r3, [pc, #124]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	0c1b      	lsrs	r3, r3, #16
 8007604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007614:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007618:	edd7 6a07 	vldr	s13, [r7, #28]
 800761c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007624:	ee17 2a90 	vmov	r2, s15
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800762c:	4b13      	ldr	r3, [pc, #76]	; (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	0e1b      	lsrs	r3, r3, #24
 8007632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007646:	edd7 6a07 	vldr	s13, [r7, #28]
 800764a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007652:	ee17 2a90 	vmov	r2, s15
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800765a:	e008      	b.n	800766e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	609a      	str	r2, [r3, #8]
}
 800766e:	bf00      	nop
 8007670:	3724      	adds	r7, #36	; 0x24
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	58024400 	.word	0x58024400
 8007680:	03d09000 	.word	0x03d09000
 8007684:	46000000 	.word	0x46000000
 8007688:	4c742400 	.word	0x4c742400
 800768c:	4a742400 	.word	0x4a742400
 8007690:	4bbebc20 	.word	0x4bbebc20

08007694 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007694:	b480      	push	{r7}
 8007696:	b089      	sub	sp, #36	; 0x24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800769c:	4ba1      	ldr	r3, [pc, #644]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80076a6:	4b9f      	ldr	r3, [pc, #636]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076aa:	0d1b      	lsrs	r3, r3, #20
 80076ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076b2:	4b9c      	ldr	r3, [pc, #624]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	0a1b      	lsrs	r3, r3, #8
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80076be:	4b99      	ldr	r3, [pc, #612]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	08db      	lsrs	r3, r3, #3
 80076c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8111 	beq.w	8007904 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	f000 8083 	beq.w	80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	f200 80a1 	bhi.w	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d056      	beq.n	80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80076fe:	e099      	b.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007700:	4b88      	ldr	r3, [pc, #544]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b00      	cmp	r3, #0
 800770a:	d02d      	beq.n	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800770c:	4b85      	ldr	r3, [pc, #532]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	08db      	lsrs	r3, r3, #3
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	4a84      	ldr	r2, [pc, #528]	; (8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007718:	fa22 f303 	lsr.w	r3, r2, r3
 800771c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007736:	4b7b      	ldr	r3, [pc, #492]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	ed97 6a03 	vldr	s12, [r7, #12]
 800774a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800774e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800775a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007766:	e087      	b.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777a:	4b6a      	ldr	r3, [pc, #424]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	ed97 6a03 	vldr	s12, [r7, #12]
 800778e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077aa:	e065      	b.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077be:	4b59      	ldr	r3, [pc, #356]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ee:	e043      	b.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	4b48      	ldr	r3, [pc, #288]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	ed97 6a03 	vldr	s12, [r7, #12]
 8007816:	eddf 5a45 	vldr	s11, [pc, #276]	; 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007832:	e021      	b.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b37      	ldr	r3, [pc, #220]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a03 	vldr	s12, [r7, #12]
 800785a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007876:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007878:	4b2a      	ldr	r3, [pc, #168]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	0a5b      	lsrs	r3, r3, #9
 800787e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800788e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007892:	edd7 6a07 	vldr	s13, [r7, #28]
 8007896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800789a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800789e:	ee17 2a90 	vmov	r2, s15
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80078a6:	4b1f      	ldr	r3, [pc, #124]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80078c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078cc:	ee17 2a90 	vmov	r2, s15
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80078d4:	4b13      	ldr	r3, [pc, #76]	; (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d8:	0e1b      	lsrs	r3, r3, #24
 80078da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078fa:	ee17 2a90 	vmov	r2, s15
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007902:	e008      	b.n	8007916 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	609a      	str	r2, [r3, #8]
}
 8007916:	bf00      	nop
 8007918:	3724      	adds	r7, #36	; 0x24
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	58024400 	.word	0x58024400
 8007928:	03d09000 	.word	0x03d09000
 800792c:	46000000 	.word	0x46000000
 8007930:	4c742400 	.word	0x4c742400
 8007934:	4a742400 	.word	0x4a742400
 8007938:	4bbebc20 	.word	0x4bbebc20

0800793c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800793c:	b480      	push	{r7}
 800793e:	b089      	sub	sp, #36	; 0x24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007944:	4ba0      	ldr	r3, [pc, #640]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007948:	f003 0303 	and.w	r3, r3, #3
 800794c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800794e:	4b9e      	ldr	r3, [pc, #632]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	091b      	lsrs	r3, r3, #4
 8007954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007958:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800795a:	4b9b      	ldr	r3, [pc, #620]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007964:	4b98      	ldr	r3, [pc, #608]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007968:	08db      	lsrs	r3, r3, #3
 800796a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	fb02 f303 	mul.w	r3, r2, r3
 8007974:	ee07 3a90 	vmov	s15, r3
 8007978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8111 	beq.w	8007baa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	2b02      	cmp	r3, #2
 800798c:	f000 8083 	beq.w	8007a96 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b02      	cmp	r3, #2
 8007994:	f200 80a1 	bhi.w	8007ada <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d056      	beq.n	8007a52 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80079a4:	e099      	b.n	8007ada <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a6:	4b88      	ldr	r3, [pc, #544]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d02d      	beq.n	8007a0e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079b2:	4b85      	ldr	r3, [pc, #532]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	08db      	lsrs	r3, r3, #3
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	4a83      	ldr	r2, [pc, #524]	; (8007bcc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80079be:	fa22 f303 	lsr.w	r3, r2, r3
 80079c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	ee07 3a90 	vmov	s15, r3
 80079d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079dc:	4b7a      	ldr	r3, [pc, #488]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a08:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a0c:	e087      	b.n	8007b1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	ee07 3a90 	vmov	s15, r3
 8007a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a18:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a20:	4b69      	ldr	r3, [pc, #420]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a28:	ee07 3a90 	vmov	s15, r3
 8007a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a34:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a50:	e065      	b.n	8007b1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a64:	4b58      	ldr	r3, [pc, #352]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a74:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a78:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a94:	e043      	b.n	8007b1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007bdc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa8:	4b47      	ldr	r3, [pc, #284]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007abc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad8:	e021      	b.n	8007b1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aec:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b00:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b1c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007b1e:	4b2a      	ldr	r3, [pc, #168]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	0a5b      	lsrs	r3, r3, #9
 8007b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b44:	ee17 2a90 	vmov	r2, s15
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007b4c:	4b1e      	ldr	r3, [pc, #120]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	0c1b      	lsrs	r3, r3, #16
 8007b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b72:	ee17 2a90 	vmov	r2, s15
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007b7a:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	0e1b      	lsrs	r3, r3, #24
 8007b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b84:	ee07 3a90 	vmov	s15, r3
 8007b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ba0:	ee17 2a90 	vmov	r2, s15
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ba8:	e008      	b.n	8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	609a      	str	r2, [r3, #8]
}
 8007bbc:	bf00      	nop
 8007bbe:	3724      	adds	r7, #36	; 0x24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	58024400 	.word	0x58024400
 8007bcc:	03d09000 	.word	0x03d09000
 8007bd0:	46000000 	.word	0x46000000
 8007bd4:	4c742400 	.word	0x4c742400
 8007bd8:	4a742400 	.word	0x4a742400
 8007bdc:	4bbebc20 	.word	0x4bbebc20

08007be0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bee:	4b53      	ldr	r3, [pc, #332]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d101      	bne.n	8007bfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e099      	b.n	8007d32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007bfe:	4b4f      	ldr	r3, [pc, #316]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a4e      	ldr	r2, [pc, #312]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c0a:	f7f9 fec7 	bl	800199c <HAL_GetTick>
 8007c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c10:	e008      	b.n	8007c24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c12:	f7f9 fec3 	bl	800199c <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d901      	bls.n	8007c24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e086      	b.n	8007d32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c24:	4b45      	ldr	r3, [pc, #276]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1f0      	bne.n	8007c12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c30:	4b42      	ldr	r3, [pc, #264]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	031b      	lsls	r3, r3, #12
 8007c3e:	493f      	ldr	r1, [pc, #252]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	628b      	str	r3, [r1, #40]	; 0x28
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	025b      	lsls	r3, r3, #9
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	041b      	lsls	r3, r3, #16
 8007c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	061b      	lsls	r3, r3, #24
 8007c70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c74:	4931      	ldr	r1, [pc, #196]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c7a:	4b30      	ldr	r3, [pc, #192]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	492d      	ldr	r1, [pc, #180]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c8c:	4b2b      	ldr	r3, [pc, #172]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	f023 0220 	bic.w	r2, r3, #32
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	4928      	ldr	r1, [pc, #160]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c9e:	4b27      	ldr	r3, [pc, #156]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	4a26      	ldr	r2, [pc, #152]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007ca4:	f023 0310 	bic.w	r3, r3, #16
 8007ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007caa:	4b24      	ldr	r3, [pc, #144]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cae:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <RCCEx_PLL2_Config+0x160>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	69d2      	ldr	r2, [r2, #28]
 8007cb6:	00d2      	lsls	r2, r2, #3
 8007cb8:	4920      	ldr	r1, [pc, #128]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cbe:	4b1f      	ldr	r3, [pc, #124]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	4a1e      	ldr	r2, [pc, #120]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007cc4:	f043 0310 	orr.w	r3, r3, #16
 8007cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d106      	bne.n	8007cde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cd0:	4b1a      	ldr	r3, [pc, #104]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	4a19      	ldr	r2, [pc, #100]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cdc:	e00f      	b.n	8007cfe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d106      	bne.n	8007cf2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ce4:	4b15      	ldr	r3, [pc, #84]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4a14      	ldr	r2, [pc, #80]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cf0:	e005      	b.n	8007cfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007cf2:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	4a11      	ldr	r2, [pc, #68]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a0e      	ldr	r2, [pc, #56]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007d04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d0a:	f7f9 fe47 	bl	800199c <HAL_GetTick>
 8007d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d10:	e008      	b.n	8007d24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d12:	f7f9 fe43 	bl	800199c <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d901      	bls.n	8007d24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e006      	b.n	8007d32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <RCCEx_PLL2_Config+0x15c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0f0      	beq.n	8007d12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	58024400 	.word	0x58024400
 8007d40:	ffff0007 	.word	0xffff0007

08007d44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d52:	4b53      	ldr	r3, [pc, #332]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d101      	bne.n	8007d62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e099      	b.n	8007e96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d62:	4b4f      	ldr	r3, [pc, #316]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a4e      	ldr	r2, [pc, #312]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d6e:	f7f9 fe15 	bl	800199c <HAL_GetTick>
 8007d72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d74:	e008      	b.n	8007d88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d76:	f7f9 fe11 	bl	800199c <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d901      	bls.n	8007d88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e086      	b.n	8007e96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d88:	4b45      	ldr	r3, [pc, #276]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1f0      	bne.n	8007d76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d94:	4b42      	ldr	r3, [pc, #264]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	051b      	lsls	r3, r3, #20
 8007da2:	493f      	ldr	r1, [pc, #252]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	628b      	str	r3, [r1, #40]	; 0x28
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	025b      	lsls	r3, r3, #9
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	041b      	lsls	r3, r3, #16
 8007dc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	061b      	lsls	r3, r3, #24
 8007dd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007dd8:	4931      	ldr	r1, [pc, #196]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007dde:	4b30      	ldr	r3, [pc, #192]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	492d      	ldr	r1, [pc, #180]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007df0:	4b2b      	ldr	r3, [pc, #172]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	4928      	ldr	r1, [pc, #160]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e02:	4b27      	ldr	r3, [pc, #156]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	4a26      	ldr	r2, [pc, #152]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e0e:	4b24      	ldr	r3, [pc, #144]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e12:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <RCCEx_PLL3_Config+0x160>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	69d2      	ldr	r2, [r2, #28]
 8007e1a:	00d2      	lsls	r2, r2, #3
 8007e1c:	4920      	ldr	r1, [pc, #128]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e22:	4b1f      	ldr	r3, [pc, #124]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	4a1e      	ldr	r2, [pc, #120]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d106      	bne.n	8007e42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e34:	4b1a      	ldr	r3, [pc, #104]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	4a19      	ldr	r2, [pc, #100]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e40:	e00f      	b.n	8007e62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d106      	bne.n	8007e56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e48:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	4a14      	ldr	r2, [pc, #80]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e54:	e005      	b.n	8007e62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e56:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	4a11      	ldr	r2, [pc, #68]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e62:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a0e      	ldr	r2, [pc, #56]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e6e:	f7f9 fd95 	bl	800199c <HAL_GetTick>
 8007e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e74:	e008      	b.n	8007e88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e76:	f7f9 fd91 	bl	800199c <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d901      	bls.n	8007e88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e006      	b.n	8007e96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e88:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <RCCEx_PLL3_Config+0x15c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0f0      	beq.n	8007e76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	58024400 	.word	0x58024400
 8007ea4:	ffff0007 	.word	0xffff0007

08007ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e049      	b.n	8007f4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7f9 fba0 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	f000 f8a6 	bl	8008038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d001      	beq.n	8007f70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e04c      	b.n	800800a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a26      	ldr	r2, [pc, #152]	; (8008018 <HAL_TIM_Base_Start+0xc0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d022      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x70>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8a:	d01d      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x70>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a22      	ldr	r2, [pc, #136]	; (800801c <HAL_TIM_Base_Start+0xc4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d018      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x70>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a21      	ldr	r2, [pc, #132]	; (8008020 <HAL_TIM_Base_Start+0xc8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x70>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1f      	ldr	r2, [pc, #124]	; (8008024 <HAL_TIM_Base_Start+0xcc>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x70>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a1e      	ldr	r2, [pc, #120]	; (8008028 <HAL_TIM_Base_Start+0xd0>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d009      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x70>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a1c      	ldr	r2, [pc, #112]	; (800802c <HAL_TIM_Base_Start+0xd4>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x70>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a1b      	ldr	r2, [pc, #108]	; (8008030 <HAL_TIM_Base_Start+0xd8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d115      	bne.n	8007ff4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	4b19      	ldr	r3, [pc, #100]	; (8008034 <HAL_TIM_Base_Start+0xdc>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b06      	cmp	r3, #6
 8007fd8:	d015      	beq.n	8008006 <HAL_TIM_Base_Start+0xae>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe0:	d011      	beq.n	8008006 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0201 	orr.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff2:	e008      	b.n	8008006 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e000      	b.n	8008008 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40010000 	.word	0x40010000
 800801c:	40000400 	.word	0x40000400
 8008020:	40000800 	.word	0x40000800
 8008024:	40000c00 	.word	0x40000c00
 8008028:	40010400 	.word	0x40010400
 800802c:	40001800 	.word	0x40001800
 8008030:	40014000 	.word	0x40014000
 8008034:	00010007 	.word	0x00010007

08008038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a40      	ldr	r2, [pc, #256]	; (800814c <TIM_Base_SetConfig+0x114>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d013      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008056:	d00f      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a3d      	ldr	r2, [pc, #244]	; (8008150 <TIM_Base_SetConfig+0x118>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00b      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a3c      	ldr	r2, [pc, #240]	; (8008154 <TIM_Base_SetConfig+0x11c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d007      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a3b      	ldr	r2, [pc, #236]	; (8008158 <TIM_Base_SetConfig+0x120>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a3a      	ldr	r2, [pc, #232]	; (800815c <TIM_Base_SetConfig+0x124>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d108      	bne.n	800808a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a2f      	ldr	r2, [pc, #188]	; (800814c <TIM_Base_SetConfig+0x114>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d01f      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008098:	d01b      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a2c      	ldr	r2, [pc, #176]	; (8008150 <TIM_Base_SetConfig+0x118>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d017      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a2b      	ldr	r2, [pc, #172]	; (8008154 <TIM_Base_SetConfig+0x11c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a2a      	ldr	r2, [pc, #168]	; (8008158 <TIM_Base_SetConfig+0x120>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00f      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a29      	ldr	r2, [pc, #164]	; (800815c <TIM_Base_SetConfig+0x124>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00b      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a28      	ldr	r2, [pc, #160]	; (8008160 <TIM_Base_SetConfig+0x128>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d007      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a27      	ldr	r2, [pc, #156]	; (8008164 <TIM_Base_SetConfig+0x12c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d003      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a26      	ldr	r2, [pc, #152]	; (8008168 <TIM_Base_SetConfig+0x130>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d108      	bne.n	80080e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a10      	ldr	r2, [pc, #64]	; (800814c <TIM_Base_SetConfig+0x114>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00f      	beq.n	8008130 <TIM_Base_SetConfig+0xf8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a12      	ldr	r2, [pc, #72]	; (800815c <TIM_Base_SetConfig+0x124>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d00b      	beq.n	8008130 <TIM_Base_SetConfig+0xf8>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a11      	ldr	r2, [pc, #68]	; (8008160 <TIM_Base_SetConfig+0x128>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d007      	beq.n	8008130 <TIM_Base_SetConfig+0xf8>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a10      	ldr	r2, [pc, #64]	; (8008164 <TIM_Base_SetConfig+0x12c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d003      	beq.n	8008130 <TIM_Base_SetConfig+0xf8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a0f      	ldr	r2, [pc, #60]	; (8008168 <TIM_Base_SetConfig+0x130>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d103      	bne.n	8008138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	615a      	str	r2, [r3, #20]
}
 800813e:	bf00      	nop
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40010000 	.word	0x40010000
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40010400 	.word	0x40010400
 8008160:	40014000 	.word	0x40014000
 8008164:	40014400 	.word	0x40014400
 8008168:	40014800 	.word	0x40014800

0800816c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800816c:	b084      	sub	sp, #16
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	f107 001c 	add.w	r0, r7, #28
 800817a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	2b01      	cmp	r3, #1
 8008182:	d120      	bne.n	80081c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	4b2a      	ldr	r3, [pc, #168]	; (8008240 <USB_CoreInit+0xd4>)
 8008196:	4013      	ands	r3, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d105      	bne.n	80081ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f001 faf8 	bl	80097b0 <USB_CoreReset>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]
 80081c4:	e01a      	b.n	80081fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 faec 	bl	80097b0 <USB_CoreReset>
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80081dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	639a      	str	r2, [r3, #56]	; 0x38
 80081ee:	e005      	b.n	80081fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d116      	bne.n	8008230 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008206:	b29a      	uxth	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008210:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <USB_CoreInit+0xd8>)
 8008212:	4313      	orrs	r3, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f043 0206 	orr.w	r2, r3, #6
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f043 0220 	orr.w	r2, r3, #32
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800823c:	b004      	add	sp, #16
 800823e:	4770      	bx	lr
 8008240:	ffbdffbf 	.word	0xffbdffbf
 8008244:	03ee0000 	.word	0x03ee0000

08008248 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	4613      	mov	r3, r2
 8008254:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	2b02      	cmp	r3, #2
 800825a:	d165      	bne.n	8008328 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4a41      	ldr	r2, [pc, #260]	; (8008364 <USB_SetTurnaroundTime+0x11c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d906      	bls.n	8008272 <USB_SetTurnaroundTime+0x2a>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	4a40      	ldr	r2, [pc, #256]	; (8008368 <USB_SetTurnaroundTime+0x120>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d202      	bcs.n	8008272 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800826c:	230f      	movs	r3, #15
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	e062      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	4a3c      	ldr	r2, [pc, #240]	; (8008368 <USB_SetTurnaroundTime+0x120>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d306      	bcc.n	8008288 <USB_SetTurnaroundTime+0x40>
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	4a3b      	ldr	r2, [pc, #236]	; (800836c <USB_SetTurnaroundTime+0x124>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d202      	bcs.n	8008288 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008282:	230e      	movs	r3, #14
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	e057      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	4a38      	ldr	r2, [pc, #224]	; (800836c <USB_SetTurnaroundTime+0x124>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d306      	bcc.n	800829e <USB_SetTurnaroundTime+0x56>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4a37      	ldr	r2, [pc, #220]	; (8008370 <USB_SetTurnaroundTime+0x128>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d202      	bcs.n	800829e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008298:	230d      	movs	r3, #13
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	e04c      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	4a33      	ldr	r2, [pc, #204]	; (8008370 <USB_SetTurnaroundTime+0x128>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d306      	bcc.n	80082b4 <USB_SetTurnaroundTime+0x6c>
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	4a32      	ldr	r2, [pc, #200]	; (8008374 <USB_SetTurnaroundTime+0x12c>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d802      	bhi.n	80082b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80082ae:	230c      	movs	r3, #12
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	e041      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	4a2f      	ldr	r2, [pc, #188]	; (8008374 <USB_SetTurnaroundTime+0x12c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d906      	bls.n	80082ca <USB_SetTurnaroundTime+0x82>
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4a2e      	ldr	r2, [pc, #184]	; (8008378 <USB_SetTurnaroundTime+0x130>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d802      	bhi.n	80082ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80082c4:	230b      	movs	r3, #11
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	e036      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	4a2a      	ldr	r2, [pc, #168]	; (8008378 <USB_SetTurnaroundTime+0x130>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d906      	bls.n	80082e0 <USB_SetTurnaroundTime+0x98>
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4a29      	ldr	r2, [pc, #164]	; (800837c <USB_SetTurnaroundTime+0x134>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d802      	bhi.n	80082e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80082da:	230a      	movs	r3, #10
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	e02b      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4a26      	ldr	r2, [pc, #152]	; (800837c <USB_SetTurnaroundTime+0x134>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d906      	bls.n	80082f6 <USB_SetTurnaroundTime+0xae>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4a25      	ldr	r2, [pc, #148]	; (8008380 <USB_SetTurnaroundTime+0x138>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d202      	bcs.n	80082f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80082f0:	2309      	movs	r3, #9
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e020      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4a21      	ldr	r2, [pc, #132]	; (8008380 <USB_SetTurnaroundTime+0x138>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d306      	bcc.n	800830c <USB_SetTurnaroundTime+0xc4>
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	4a20      	ldr	r2, [pc, #128]	; (8008384 <USB_SetTurnaroundTime+0x13c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d802      	bhi.n	800830c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008306:	2308      	movs	r3, #8
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	e015      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4a1d      	ldr	r2, [pc, #116]	; (8008384 <USB_SetTurnaroundTime+0x13c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d906      	bls.n	8008322 <USB_SetTurnaroundTime+0xda>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4a1c      	ldr	r2, [pc, #112]	; (8008388 <USB_SetTurnaroundTime+0x140>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d202      	bcs.n	8008322 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800831c:	2307      	movs	r3, #7
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e00a      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008322:	2306      	movs	r3, #6
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	e007      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800832e:	2309      	movs	r3, #9
 8008330:	617b      	str	r3, [r7, #20]
 8008332:	e001      	b.n	8008338 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008334:	2309      	movs	r3, #9
 8008336:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	029b      	lsls	r3, r3, #10
 800834c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008350:	431a      	orrs	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	00d8acbf 	.word	0x00d8acbf
 8008368:	00e4e1c0 	.word	0x00e4e1c0
 800836c:	00f42400 	.word	0x00f42400
 8008370:	01067380 	.word	0x01067380
 8008374:	011a499f 	.word	0x011a499f
 8008378:	01312cff 	.word	0x01312cff
 800837c:	014ca43f 	.word	0x014ca43f
 8008380:	016e3600 	.word	0x016e3600
 8008384:	01a6ab1f 	.word	0x01a6ab1f
 8008388:	01e84800 	.word	0x01e84800

0800838c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f043 0201 	orr.w	r2, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f023 0201 	bic.w	r2, r3, #1
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d115      	bne.n	800841e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083fe:	2001      	movs	r0, #1
 8008400:	f7f9 fad8 	bl	80019b4 <HAL_Delay>
      ms++;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3301      	adds	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 f93f 	bl	800968e <USB_GetMode>
 8008410:	4603      	mov	r3, r0
 8008412:	2b01      	cmp	r3, #1
 8008414:	d01e      	beq.n	8008454 <USB_SetCurrentMode+0x84>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b31      	cmp	r3, #49	; 0x31
 800841a:	d9f0      	bls.n	80083fe <USB_SetCurrentMode+0x2e>
 800841c:	e01a      	b.n	8008454 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d115      	bne.n	8008450 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008430:	2001      	movs	r0, #1
 8008432:	f7f9 fabf 	bl	80019b4 <HAL_Delay>
      ms++;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 f926 	bl	800968e <USB_GetMode>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <USB_SetCurrentMode+0x84>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b31      	cmp	r3, #49	; 0x31
 800844c:	d9f0      	bls.n	8008430 <USB_SetCurrentMode+0x60>
 800844e:	e001      	b.n	8008454 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e005      	b.n	8008460 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b32      	cmp	r3, #50	; 0x32
 8008458:	d101      	bne.n	800845e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008468:	b084      	sub	sp, #16
 800846a:	b580      	push	{r7, lr}
 800846c:	b086      	sub	sp, #24
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008482:	2300      	movs	r3, #0
 8008484:	613b      	str	r3, [r7, #16]
 8008486:	e009      	b.n	800849c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	3340      	adds	r3, #64	; 0x40
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	2200      	movs	r2, #0
 8008494:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	3301      	adds	r3, #1
 800849a:	613b      	str	r3, [r7, #16]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	2b0e      	cmp	r3, #14
 80084a0:	d9f2      	bls.n	8008488 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d11c      	bne.n	80084e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084b6:	f043 0302 	orr.w	r3, r3, #2
 80084ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e005      	b.n	80084ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084f4:	461a      	mov	r2, r3
 80084f6:	2300      	movs	r3, #0
 80084f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008500:	4619      	mov	r1, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008508:	461a      	mov	r2, r3
 800850a:	680b      	ldr	r3, [r1, #0]
 800850c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	2b01      	cmp	r3, #1
 8008512:	d10c      	bne.n	800852e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	2b00      	cmp	r3, #0
 8008518:	d104      	bne.n	8008524 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800851a:	2100      	movs	r1, #0
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f965 	bl	80087ec <USB_SetDevSpeed>
 8008522:	e008      	b.n	8008536 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008524:	2101      	movs	r1, #1
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f960 	bl	80087ec <USB_SetDevSpeed>
 800852c:	e003      	b.n	8008536 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800852e:	2103      	movs	r1, #3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f95b 	bl	80087ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008536:	2110      	movs	r1, #16
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f8f3 	bl	8008724 <USB_FlushTxFifo>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f91f 	bl	800878c <USB_FlushRxFifo>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855e:	461a      	mov	r2, r3
 8008560:	2300      	movs	r3, #0
 8008562:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856a:	461a      	mov	r2, r3
 800856c:	2300      	movs	r3, #0
 800856e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008576:	461a      	mov	r2, r3
 8008578:	2300      	movs	r3, #0
 800857a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800857c:	2300      	movs	r3, #0
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	e043      	b.n	800860a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008598:	d118      	bne.n	80085cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	461a      	mov	r2, r3
 80085ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	e013      	b.n	80085de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c2:	461a      	mov	r2, r3
 80085c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	e008      	b.n	80085de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d8:	461a      	mov	r2, r3
 80085da:	2300      	movs	r3, #0
 80085dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ea:	461a      	mov	r2, r3
 80085ec:	2300      	movs	r3, #0
 80085ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fc:	461a      	mov	r2, r3
 80085fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008602:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	3301      	adds	r3, #1
 8008608:	613b      	str	r3, [r7, #16]
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	429a      	cmp	r2, r3
 8008610:	d3b7      	bcc.n	8008582 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008612:	2300      	movs	r3, #0
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	e043      	b.n	80086a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800862a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800862e:	d118      	bne.n	8008662 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10a      	bne.n	800864c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008642:	461a      	mov	r2, r3
 8008644:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	e013      	b.n	8008674 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008658:	461a      	mov	r2, r3
 800865a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	e008      	b.n	8008674 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866e:	461a      	mov	r2, r3
 8008670:	2300      	movs	r3, #0
 8008672:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008680:	461a      	mov	r2, r3
 8008682:	2300      	movs	r3, #0
 8008684:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008692:	461a      	mov	r2, r3
 8008694:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008698:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3301      	adds	r3, #1
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d3b7      	bcc.n	8008618 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80086c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d105      	bne.n	80086dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	f043 0210 	orr.w	r2, r3, #16
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	699a      	ldr	r2, [r3, #24]
 80086e0:	4b0e      	ldr	r3, [pc, #56]	; (800871c <USB_DevInit+0x2b4>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80086e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d005      	beq.n	80086fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f043 0208 	orr.w	r2, r3, #8
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80086fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d105      	bne.n	800870c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	699a      	ldr	r2, [r3, #24]
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <USB_DevInit+0x2b8>)
 8008706:	4313      	orrs	r3, r2
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008718:	b004      	add	sp, #16
 800871a:	4770      	bx	lr
 800871c:	803c3800 	.word	0x803c3800
 8008720:	40000004 	.word	0x40000004

08008724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	4a13      	ldr	r2, [pc, #76]	; (8008788 <USB_FlushTxFifo+0x64>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d901      	bls.n	8008744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e01b      	b.n	800877c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	daf2      	bge.n	8008732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	019b      	lsls	r3, r3, #6
 8008754:	f043 0220 	orr.w	r2, r3, #32
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3301      	adds	r3, #1
 8008760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	4a08      	ldr	r2, [pc, #32]	; (8008788 <USB_FlushTxFifo+0x64>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d901      	bls.n	800876e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e006      	b.n	800877c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b20      	cmp	r3, #32
 8008778:	d0f0      	beq.n	800875c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	00030d40 	.word	0x00030d40

0800878c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3301      	adds	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4a11      	ldr	r2, [pc, #68]	; (80087e8 <USB_FlushRxFifo+0x5c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d901      	bls.n	80087aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e018      	b.n	80087dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	daf2      	bge.n	8008798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2210      	movs	r2, #16
 80087ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3301      	adds	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4a08      	ldr	r2, [pc, #32]	; (80087e8 <USB_FlushRxFifo+0x5c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d901      	bls.n	80087ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e006      	b.n	80087dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	d0f0      	beq.n	80087bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	00030d40 	.word	0x00030d40

080087ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800880c:	4313      	orrs	r3, r2
 800880e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800881e:	b480      	push	{r7}
 8008820:	b087      	sub	sp, #28
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f003 0306 	and.w	r3, r3, #6
 8008836:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800883e:	2300      	movs	r3, #0
 8008840:	75fb      	strb	r3, [r7, #23]
 8008842:	e00a      	b.n	800885a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d002      	beq.n	8008850 <USB_GetDevSpeed+0x32>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b06      	cmp	r3, #6
 800884e:	d102      	bne.n	8008856 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008850:	2302      	movs	r3, #2
 8008852:	75fb      	strb	r3, [r7, #23]
 8008854:	e001      	b.n	800885a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008856:	230f      	movs	r3, #15
 8008858:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
}
 800885c:	4618      	mov	r0, r3
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d139      	bne.n	80088f8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800888a:	69da      	ldr	r2, [r3, #28]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	f003 030f 	and.w	r3, r3, #15
 8008894:	2101      	movs	r1, #1
 8008896:	fa01 f303 	lsl.w	r3, r1, r3
 800889a:	b29b      	uxth	r3, r3
 800889c:	68f9      	ldr	r1, [r7, #12]
 800889e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088a2:	4313      	orrs	r3, r2
 80088a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d153      	bne.n	8008964 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	791b      	ldrb	r3, [r3, #4]
 80088d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	059b      	lsls	r3, r3, #22
 80088de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088e0:	431a      	orrs	r2, r3
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	0159      	lsls	r1, r3, #5
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	440b      	add	r3, r1
 80088ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ee:	4619      	mov	r1, r3
 80088f0:	4b20      	ldr	r3, [pc, #128]	; (8008974 <USB_ActivateEndpoint+0x10c>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	600b      	str	r3, [r1, #0]
 80088f6:	e035      	b.n	8008964 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fe:	69da      	ldr	r2, [r3, #28]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	2101      	movs	r1, #1
 800890a:	fa01 f303 	lsl.w	r3, r1, r3
 800890e:	041b      	lsls	r3, r3, #16
 8008910:	68f9      	ldr	r1, [r7, #12]
 8008912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008916:	4313      	orrs	r3, r2
 8008918:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d119      	bne.n	8008964 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800894c:	430b      	orrs	r3, r1
 800894e:	431a      	orrs	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	0159      	lsls	r1, r3, #5
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	440b      	add	r3, r1
 8008958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895c:	4619      	mov	r1, r3
 800895e:	4b05      	ldr	r3, [pc, #20]	; (8008974 <USB_ActivateEndpoint+0x10c>)
 8008960:	4313      	orrs	r3, r2
 8008962:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	10008000 	.word	0x10008000

08008978 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d161      	bne.n	8008a58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089aa:	d11f      	bne.n	80089ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	0151      	lsls	r1, r2, #5
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	440a      	add	r2, r1
 80089e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	f003 030f 	and.w	r3, r3, #15
 80089fc:	2101      	movs	r1, #1
 80089fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	43db      	mvns	r3, r3
 8008a06:	68f9      	ldr	r1, [r7, #12]
 8008a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a16:	69da      	ldr	r2, [r3, #28]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	2101      	movs	r1, #1
 8008a22:	fa01 f303 	lsl.w	r3, r1, r3
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	43db      	mvns	r3, r3
 8008a2a:	68f9      	ldr	r1, [r7, #12]
 8008a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a30:	4013      	ands	r3, r2
 8008a32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	0159      	lsls	r1, r3, #5
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	440b      	add	r3, r1
 8008a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4b35      	ldr	r3, [pc, #212]	; (8008b28 <USB_DeactivateEndpoint+0x1b0>)
 8008a52:	4013      	ands	r3, r2
 8008a54:	600b      	str	r3, [r1, #0]
 8008a56:	e060      	b.n	8008b1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a6e:	d11f      	bne.n	8008ab0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	0151      	lsls	r1, r2, #5
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	440a      	add	r2, r1
 8008a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	0151      	lsls	r1, r2, #5
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	440a      	add	r2, r1
 8008aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	f003 030f 	and.w	r3, r3, #15
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac6:	041b      	lsls	r3, r3, #16
 8008ac8:	43db      	mvns	r3, r3
 8008aca:	68f9      	ldr	r1, [r7, #12]
 8008acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ada:	69da      	ldr	r2, [r3, #28]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	f003 030f 	and.w	r3, r3, #15
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aea:	041b      	lsls	r3, r3, #16
 8008aec:	43db      	mvns	r3, r3
 8008aee:	68f9      	ldr	r1, [r7, #12]
 8008af0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008af4:	4013      	ands	r3, r2
 8008af6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	0159      	lsls	r1, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	440b      	add	r3, r1
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b12:	4619      	mov	r1, r3
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <USB_DeactivateEndpoint+0x1b4>)
 8008b16:	4013      	ands	r3, r2
 8008b18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	ec337800 	.word	0xec337800
 8008b2c:	eff37800 	.word	0xeff37800

08008b30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08a      	sub	sp, #40	; 0x28
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	f040 8181 	bne.w	8008e54 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d132      	bne.n	8008bc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b66:	691a      	ldr	r2, [r3, #16]
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	0159      	lsls	r1, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	440b      	add	r3, r1
 8008b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b74:	4619      	mov	r1, r3
 8008b76:	4ba5      	ldr	r3, [pc, #660]	; (8008e0c <USB_EPStartXfer+0x2dc>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba8:	691a      	ldr	r2, [r3, #16]
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	0159      	lsls	r1, r3, #5
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	440b      	add	r3, r1
 8008bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4b95      	ldr	r3, [pc, #596]	; (8008e10 <USB_EPStartXfer+0x2e0>)
 8008bba:	4013      	ands	r3, r2
 8008bbc:	610b      	str	r3, [r1, #16]
 8008bbe:	e092      	b.n	8008ce6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bcc:	691a      	ldr	r2, [r3, #16]
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	0159      	lsls	r1, r3, #5
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	440b      	add	r3, r1
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4b8c      	ldr	r3, [pc, #560]	; (8008e10 <USB_EPStartXfer+0x2e0>)
 8008bde:	4013      	ands	r3, r2
 8008be0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	691a      	ldr	r2, [r3, #16]
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	0159      	lsls	r1, r3, #5
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	440b      	add	r3, r1
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4b83      	ldr	r3, [pc, #524]	; (8008e0c <USB_EPStartXfer+0x2dc>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11a      	bne.n	8008c40 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	691a      	ldr	r2, [r3, #16]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d903      	bls.n	8008c1e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c3c:	6113      	str	r3, [r2, #16]
 8008c3e:	e01b      	b.n	8008c78 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6919      	ldr	r1, [r3, #16]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	440b      	add	r3, r1
 8008c58:	1e59      	subs	r1, r3, #1
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c62:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c64:	4b6b      	ldr	r3, [pc, #428]	; (8008e14 <USB_EPStartXfer+0x2e4>)
 8008c66:	400b      	ands	r3, r1
 8008c68:	69b9      	ldr	r1, [r7, #24]
 8008c6a:	0148      	lsls	r0, r1, #5
 8008c6c:	69f9      	ldr	r1, [r7, #28]
 8008c6e:	4401      	add	r1, r0
 8008c70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c74:	4313      	orrs	r3, r2
 8008c76:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c8e:	69b9      	ldr	r1, [r7, #24]
 8008c90:	0148      	lsls	r0, r1, #5
 8008c92:	69f9      	ldr	r1, [r7, #28]
 8008c94:	4401      	add	r1, r0
 8008c96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	791b      	ldrb	r3, [r3, #4]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d11f      	bne.n	8008ce6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	0151      	lsls	r1, r2, #5
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	440a      	add	r2, r1
 8008cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008cc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	0151      	lsls	r1, r2, #5
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	440a      	add	r2, r1
 8008cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ce4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d14b      	bne.n	8008d84 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d009      	beq.n	8008d08 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d00:	461a      	mov	r2, r3
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	791b      	ldrb	r3, [r3, #4]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d128      	bne.n	8008d62 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d110      	bne.n	8008d42 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	0151      	lsls	r1, r2, #5
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	440a      	add	r2, r1
 8008d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d3e:	6013      	str	r3, [r2, #0]
 8008d40:	e00f      	b.n	8008d62 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	015a      	lsls	r2, r3, #5
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	4413      	add	r3, r2
 8008d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	0151      	lsls	r1, r2, #5
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	440a      	add	r2, r1
 8008d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	0151      	lsls	r1, r2, #5
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	440a      	add	r2, r1
 8008d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	e16a      	b.n	800905a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	0151      	lsls	r1, r2, #5
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	440a      	add	r2, r1
 8008d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008da2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	791b      	ldrb	r3, [r3, #4]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d015      	beq.n	8008dd8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 8152 	beq.w	800905a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dcc:	69f9      	ldr	r1, [r7, #28]
 8008dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	634b      	str	r3, [r1, #52]	; 0x34
 8008dd6:	e140      	b.n	800905a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d117      	bne.n	8008e18 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	0151      	lsls	r1, r2, #5
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	440a      	add	r2, r1
 8008dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	e016      	b.n	8008e38 <USB_EPStartXfer+0x308>
 8008e0a:	bf00      	nop
 8008e0c:	e007ffff 	.word	0xe007ffff
 8008e10:	fff80000 	.word	0xfff80000
 8008e14:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	0151      	lsls	r1, r2, #5
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	440a      	add	r2, r1
 8008e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e36:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	68d9      	ldr	r1, [r3, #12]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	b298      	uxth	r0, r3
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f9b9 	bl	80091c4 <USB_WritePacket>
 8008e52:	e102      	b.n	800905a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e60:	691a      	ldr	r2, [r3, #16]
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	0159      	lsls	r1, r3, #5
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	440b      	add	r3, r1
 8008e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4b7c      	ldr	r3, [pc, #496]	; (8009064 <USB_EPStartXfer+0x534>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	0159      	lsls	r1, r3, #5
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	440b      	add	r3, r1
 8008e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e90:	4619      	mov	r1, r3
 8008e92:	4b75      	ldr	r3, [pc, #468]	; (8009068 <USB_EPStartXfer+0x538>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d12f      	bne.n	8008efe <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	689a      	ldr	r2, [r3, #8]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec2:	691a      	ldr	r2, [r3, #16]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ecc:	69b9      	ldr	r1, [r7, #24]
 8008ece:	0148      	lsls	r0, r1, #5
 8008ed0:	69f9      	ldr	r1, [r7, #28]
 8008ed2:	4401      	add	r1, r0
 8008ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008efa:	6113      	str	r3, [r2, #16]
 8008efc:	e05f      	b.n	8008fbe <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d123      	bne.n	8008f4e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f1c:	69b9      	ldr	r1, [r7, #24]
 8008f1e:	0148      	lsls	r0, r1, #5
 8008f20:	69f9      	ldr	r1, [r7, #28]
 8008f22:	4401      	add	r1, r0
 8008f24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f4a:	6113      	str	r3, [r2, #16]
 8008f4c:	e037      	b.n	8008fbe <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	691a      	ldr	r2, [r3, #16]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	4413      	add	r3, r2
 8008f58:	1e5a      	subs	r2, r3, #1
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f62:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	8afa      	ldrh	r2, [r7, #22]
 8008f6a:	fb03 f202 	mul.w	r2, r3, r2
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	8afb      	ldrh	r3, [r7, #22]
 8008f82:	04d9      	lsls	r1, r3, #19
 8008f84:	4b39      	ldr	r3, [pc, #228]	; (800906c <USB_EPStartXfer+0x53c>)
 8008f86:	400b      	ands	r3, r1
 8008f88:	69b9      	ldr	r1, [r7, #24]
 8008f8a:	0148      	lsls	r0, r1, #5
 8008f8c:	69f9      	ldr	r1, [r7, #28]
 8008f8e:	4401      	add	r1, r0
 8008f90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f94:	4313      	orrs	r3, r2
 8008f96:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fae:	69b9      	ldr	r1, [r7, #24]
 8008fb0:	0148      	lsls	r0, r1, #5
 8008fb2:	69f9      	ldr	r1, [r7, #28]
 8008fb4:	4401      	add	r1, r0
 8008fb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008fbe:	79fb      	ldrb	r3, [r7, #7]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d10d      	bne.n	8008fe0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d009      	beq.n	8008fe0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	68d9      	ldr	r1, [r3, #12]
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fdc:	460a      	mov	r2, r1
 8008fde:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	791b      	ldrb	r3, [r3, #4]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d128      	bne.n	800903a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d110      	bne.n	800901a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	69fa      	ldr	r2, [r7, #28]
 800900c:	440a      	add	r2, r1
 800900e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009012:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	e00f      	b.n	800903a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	0151      	lsls	r1, r2, #5
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	440a      	add	r2, r1
 8009030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009038:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	440a      	add	r2, r1
 8009050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009054:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009058:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3720      	adds	r7, #32
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	fff80000 	.word	0xfff80000
 8009068:	e007ffff 	.word	0xe007ffff
 800906c:	1ff80000 	.word	0x1ff80000

08009070 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d14a      	bne.n	8009124 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090a6:	f040 8086 	bne.w	80091b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	7812      	ldrb	r2, [r2, #0]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3301      	adds	r3, #1
 80090f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80090fe:	4293      	cmp	r3, r2
 8009100:	d902      	bls.n	8009108 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	75fb      	strb	r3, [r7, #23]
          break;
 8009106:	e056      	b.n	80091b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800911c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009120:	d0e7      	beq.n	80090f2 <USB_EPStopXfer+0x82>
 8009122:	e048      	b.n	80091b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800913c:	d13b      	bne.n	80091b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	7812      	ldrb	r2, [r2, #0]
 8009152:	0151      	lsls	r1, r2, #5
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	440a      	add	r2, r1
 8009158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800915c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009160:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	7812      	ldrb	r2, [r2, #0]
 8009176:	0151      	lsls	r1, r2, #5
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	440a      	add	r2, r1
 800917c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009184:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3301      	adds	r3, #1
 800918a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009192:	4293      	cmp	r3, r2
 8009194:	d902      	bls.n	800919c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	75fb      	strb	r3, [r7, #23]
          break;
 800919a:	e00c      	b.n	80091b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091b4:	d0e7      	beq.n	8009186 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	371c      	adds	r7, #28
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b089      	sub	sp, #36	; 0x24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4611      	mov	r1, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	460b      	mov	r3, r1
 80091d4:	71fb      	strb	r3, [r7, #7]
 80091d6:	4613      	mov	r3, r2
 80091d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80091e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d123      	bne.n	8009232 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80091ea:	88bb      	ldrh	r3, [r7, #4]
 80091ec:	3303      	adds	r3, #3
 80091ee:	089b      	lsrs	r3, r3, #2
 80091f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80091f2:	2300      	movs	r3, #0
 80091f4:	61bb      	str	r3, [r7, #24]
 80091f6:	e018      	b.n	800922a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	031a      	lsls	r2, r3, #12
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009204:	461a      	mov	r2, r3
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	3301      	adds	r3, #1
 8009210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	3301      	adds	r3, #1
 8009216:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	3301      	adds	r3, #1
 800921c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	3301      	adds	r3, #1
 8009222:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	3301      	adds	r3, #1
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	69ba      	ldr	r2, [r7, #24]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	429a      	cmp	r2, r3
 8009230:	d3e2      	bcc.n	80091f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3724      	adds	r7, #36	; 0x24
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009240:	b480      	push	{r7}
 8009242:	b08b      	sub	sp, #44	; 0x2c
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	4613      	mov	r3, r2
 800924c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009256:	88fb      	ldrh	r3, [r7, #6]
 8009258:	089b      	lsrs	r3, r3, #2
 800925a:	b29b      	uxth	r3, r3
 800925c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	f003 0303 	and.w	r3, r3, #3
 8009264:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009266:	2300      	movs	r3, #0
 8009268:	623b      	str	r3, [r7, #32]
 800926a:	e014      	b.n	8009296 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	601a      	str	r2, [r3, #0]
    pDest++;
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	3301      	adds	r3, #1
 800927c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	3301      	adds	r3, #1
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	3301      	adds	r3, #1
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	3301      	adds	r3, #1
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	3301      	adds	r3, #1
 8009294:	623b      	str	r3, [r7, #32]
 8009296:	6a3a      	ldr	r2, [r7, #32]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	429a      	cmp	r2, r3
 800929c:	d3e6      	bcc.n	800926c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800929e:	8bfb      	ldrh	r3, [r7, #30]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d01e      	beq.n	80092e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ae:	461a      	mov	r2, r3
 80092b0:	f107 0310 	add.w	r3, r7, #16
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	fa22 f303 	lsr.w	r3, r2, r3
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	701a      	strb	r2, [r3, #0]
      i++;
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	3301      	adds	r3, #1
 80092ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	3301      	adds	r3, #1
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80092d6:	8bfb      	ldrh	r3, [r7, #30]
 80092d8:	3b01      	subs	r3, #1
 80092da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80092dc:	8bfb      	ldrh	r3, [r7, #30]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1ea      	bne.n	80092b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	372c      	adds	r7, #44	; 0x2c
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d12c      	bne.n	8009366 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	db12      	blt.n	8009344 <USB_EPSetStall+0x54>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00f      	beq.n	8009344 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009342:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	e02b      	b.n	80093be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	db12      	blt.n	800939e <USB_EPSetStall+0xae>
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00f      	beq.n	800939e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	015a      	lsls	r2, r3, #5
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	4413      	add	r3, r2
 8009386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	0151      	lsls	r1, r2, #5
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	440a      	add	r2, r1
 8009394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009398:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800939c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	0151      	lsls	r1, r2, #5
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	440a      	add	r2, r1
 80093b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d128      	bne.n	800943a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009406:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	791b      	ldrb	r3, [r3, #4]
 800940c:	2b03      	cmp	r3, #3
 800940e:	d003      	beq.n	8009418 <USB_EPClearStall+0x4c>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	791b      	ldrb	r3, [r3, #4]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d138      	bne.n	800948a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	0151      	lsls	r1, r2, #5
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	440a      	add	r2, r1
 800942e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	e027      	b.n	800948a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	0151      	lsls	r1, r2, #5
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	440a      	add	r2, r1
 8009450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009454:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009458:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	791b      	ldrb	r3, [r3, #4]
 800945e:	2b03      	cmp	r3, #3
 8009460:	d003      	beq.n	800946a <USB_EPClearStall+0x9e>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	791b      	ldrb	r3, [r3, #4]
 8009466:	2b02      	cmp	r3, #2
 8009468:	d10f      	bne.n	800948a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009488:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80094ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80094cc:	68f9      	ldr	r1, [r7, #12]
 80094ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094d2:	4313      	orrs	r3, r2
 80094d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094fe:	f023 0303 	bic.w	r3, r3, #3
 8009502:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009512:	f023 0302 	bic.w	r3, r3, #2
 8009516:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009540:	f023 0303 	bic.w	r3, r3, #3
 8009544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009554:	f043 0302 	orr.w	r3, r3, #2
 8009558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	4013      	ands	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009580:	68fb      	ldr	r3, [r7, #12]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800958e:	b480      	push	{r7}
 8009590:	b085      	sub	sp, #20
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	4013      	ands	r3, r2
 80095b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	0c1b      	lsrs	r3, r3, #16
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	4013      	ands	r3, r2
 80095e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	b29b      	uxth	r3, r3
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b085      	sub	sp, #20
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	4013      	ands	r3, r2
 8009622:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009624:	68bb      	ldr	r3, [r7, #8]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009632:	b480      	push	{r7}
 8009634:	b087      	sub	sp, #28
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009654:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009656:	78fb      	ldrb	r3, [r7, #3]
 8009658:	f003 030f 	and.w	r3, r3, #15
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	fa22 f303 	lsr.w	r3, r2, r3
 8009662:	01db      	lsls	r3, r3, #7
 8009664:	b2db      	uxtb	r3, r3
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	4313      	orrs	r3, r2
 800966a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	4013      	ands	r3, r2
 800967e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009680:	68bb      	ldr	r3, [r7, #8]
}
 8009682:	4618      	mov	r0, r3
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	f003 0301 	and.w	r3, r3, #1
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
	...

080096ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c6:	4619      	mov	r1, r3
 80096c8:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <USB_ActivateSetup+0x44>)
 80096ca:	4013      	ands	r3, r2
 80096cc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	fffff800 	.word	0xfffff800

080096f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	460b      	mov	r3, r1
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	333c      	adds	r3, #60	; 0x3c
 800970a:	3304      	adds	r3, #4
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	4a26      	ldr	r2, [pc, #152]	; (80097ac <USB_EP0_OutStart+0xb8>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d90a      	bls.n	800972e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009728:	d101      	bne.n	800972e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	e037      	b.n	800979e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009734:	461a      	mov	r2, r3
 8009736:	2300      	movs	r3, #0
 8009738:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800974c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800975c:	f043 0318 	orr.w	r3, r3, #24
 8009760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009770:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009774:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009776:	7afb      	ldrb	r3, [r7, #11]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d10f      	bne.n	800979c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009782:	461a      	mov	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009796:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800979a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	371c      	adds	r7, #28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	4f54300a 	.word	0x4f54300a

080097b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3301      	adds	r3, #1
 80097c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4a13      	ldr	r2, [pc, #76]	; (8009814 <USB_CoreReset+0x64>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d901      	bls.n	80097ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e01b      	b.n	8009806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	daf2      	bge.n	80097bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	f043 0201 	orr.w	r2, r3, #1
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3301      	adds	r3, #1
 80097ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4a09      	ldr	r2, [pc, #36]	; (8009814 <USB_CoreReset+0x64>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d901      	bls.n	80097f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e006      	b.n	8009806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b01      	cmp	r3, #1
 8009802:	d0f0      	beq.n	80097e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	00030d40 	.word	0x00030d40

08009818 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009824:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009828:	f002 fcba 	bl	800c1a0 <USBD_static_malloc>
 800982c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d109      	bne.n	8009848 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	32b0      	adds	r2, #176	; 0xb0
 800983e:	2100      	movs	r1, #0
 8009840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009844:	2302      	movs	r3, #2
 8009846:	e0d4      	b.n	80099f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009848:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800984c:	2100      	movs	r1, #0
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f003 f8bc 	bl	800c9cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	32b0      	adds	r2, #176	; 0xb0
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	32b0      	adds	r2, #176	; 0xb0
 800986e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	7c1b      	ldrb	r3, [r3, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d138      	bne.n	80098f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009880:	4b5e      	ldr	r3, [pc, #376]	; (80099fc <USBD_CDC_Init+0x1e4>)
 8009882:	7819      	ldrb	r1, [r3, #0]
 8009884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009888:	2202      	movs	r2, #2
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f002 fb65 	bl	800bf5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009890:	4b5a      	ldr	r3, [pc, #360]	; (80099fc <USBD_CDC_Init+0x1e4>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	f003 020f 	and.w	r2, r3, #15
 8009898:	6879      	ldr	r1, [r7, #4]
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	3324      	adds	r3, #36	; 0x24
 80098a6:	2201      	movs	r2, #1
 80098a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80098aa:	4b55      	ldr	r3, [pc, #340]	; (8009a00 <USBD_CDC_Init+0x1e8>)
 80098ac:	7819      	ldrb	r1, [r3, #0]
 80098ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098b2:	2202      	movs	r2, #2
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f002 fb50 	bl	800bf5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80098ba:	4b51      	ldr	r3, [pc, #324]	; (8009a00 <USBD_CDC_Init+0x1e8>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	f003 020f 	and.w	r2, r3, #15
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098d2:	2201      	movs	r2, #1
 80098d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80098d6:	4b4b      	ldr	r3, [pc, #300]	; (8009a04 <USBD_CDC_Init+0x1ec>)
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	f003 020f 	and.w	r2, r3, #15
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	4613      	mov	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	440b      	add	r3, r1
 80098ea:	3326      	adds	r3, #38	; 0x26
 80098ec:	2210      	movs	r2, #16
 80098ee:	801a      	strh	r2, [r3, #0]
 80098f0:	e035      	b.n	800995e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098f2:	4b42      	ldr	r3, [pc, #264]	; (80099fc <USBD_CDC_Init+0x1e4>)
 80098f4:	7819      	ldrb	r1, [r3, #0]
 80098f6:	2340      	movs	r3, #64	; 0x40
 80098f8:	2202      	movs	r2, #2
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f002 fb2d 	bl	800bf5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009900:	4b3e      	ldr	r3, [pc, #248]	; (80099fc <USBD_CDC_Init+0x1e4>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	f003 020f 	and.w	r2, r3, #15
 8009908:	6879      	ldr	r1, [r7, #4]
 800990a:	4613      	mov	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	440b      	add	r3, r1
 8009914:	3324      	adds	r3, #36	; 0x24
 8009916:	2201      	movs	r2, #1
 8009918:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800991a:	4b39      	ldr	r3, [pc, #228]	; (8009a00 <USBD_CDC_Init+0x1e8>)
 800991c:	7819      	ldrb	r1, [r3, #0]
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	2202      	movs	r2, #2
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f002 fb19 	bl	800bf5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009928:	4b35      	ldr	r3, [pc, #212]	; (8009a00 <USBD_CDC_Init+0x1e8>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	f003 020f 	and.w	r2, r3, #15
 8009930:	6879      	ldr	r1, [r7, #4]
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	440b      	add	r3, r1
 800993c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009940:	2201      	movs	r2, #1
 8009942:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009944:	4b2f      	ldr	r3, [pc, #188]	; (8009a04 <USBD_CDC_Init+0x1ec>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	f003 020f 	and.w	r2, r3, #15
 800994c:	6879      	ldr	r1, [r7, #4]
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	440b      	add	r3, r1
 8009958:	3326      	adds	r3, #38	; 0x26
 800995a:	2210      	movs	r2, #16
 800995c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800995e:	4b29      	ldr	r3, [pc, #164]	; (8009a04 <USBD_CDC_Init+0x1ec>)
 8009960:	7819      	ldrb	r1, [r3, #0]
 8009962:	2308      	movs	r3, #8
 8009964:	2203      	movs	r2, #3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f002 faf7 	bl	800bf5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800996c:	4b25      	ldr	r3, [pc, #148]	; (8009a04 <USBD_CDC_Init+0x1ec>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	f003 020f 	and.w	r2, r3, #15
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	440b      	add	r3, r1
 8009980:	3324      	adds	r3, #36	; 0x24
 8009982:	2201      	movs	r2, #1
 8009984:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	33b0      	adds	r3, #176	; 0xb0
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80099bc:	2302      	movs	r3, #2
 80099be:	e018      	b.n	80099f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	7c1b      	ldrb	r3, [r3, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099c8:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <USBD_CDC_Init+0x1e8>)
 80099ca:	7819      	ldrb	r1, [r3, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f002 fbae 	bl	800c138 <USBD_LL_PrepareReceive>
 80099dc:	e008      	b.n	80099f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099de:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <USBD_CDC_Init+0x1e8>)
 80099e0:	7819      	ldrb	r1, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099e8:	2340      	movs	r3, #64	; 0x40
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f002 fba4 	bl	800c138 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	2400329f 	.word	0x2400329f
 8009a00:	240032a0 	.word	0x240032a0
 8009a04:	240032a1 	.word	0x240032a1

08009a08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a14:	4b3a      	ldr	r3, [pc, #232]	; (8009b00 <USBD_CDC_DeInit+0xf8>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f002 fac3 	bl	800bfa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a20:	4b37      	ldr	r3, [pc, #220]	; (8009b00 <USBD_CDC_DeInit+0xf8>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	f003 020f 	and.w	r2, r3, #15
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	440b      	add	r3, r1
 8009a34:	3324      	adds	r3, #36	; 0x24
 8009a36:	2200      	movs	r2, #0
 8009a38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a3a:	4b32      	ldr	r3, [pc, #200]	; (8009b04 <USBD_CDC_DeInit+0xfc>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f002 fab0 	bl	800bfa6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009a46:	4b2f      	ldr	r3, [pc, #188]	; (8009b04 <USBD_CDC_DeInit+0xfc>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	f003 020f 	and.w	r2, r3, #15
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	440b      	add	r3, r1
 8009a5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a5e:	2200      	movs	r2, #0
 8009a60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009a62:	4b29      	ldr	r3, [pc, #164]	; (8009b08 <USBD_CDC_DeInit+0x100>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f002 fa9c 	bl	800bfa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009a6e:	4b26      	ldr	r3, [pc, #152]	; (8009b08 <USBD_CDC_DeInit+0x100>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	f003 020f 	and.w	r2, r3, #15
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	440b      	add	r3, r1
 8009a82:	3324      	adds	r3, #36	; 0x24
 8009a84:	2200      	movs	r2, #0
 8009a86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009a88:	4b1f      	ldr	r3, [pc, #124]	; (8009b08 <USBD_CDC_DeInit+0x100>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	f003 020f 	and.w	r2, r3, #15
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	3326      	adds	r3, #38	; 0x26
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	32b0      	adds	r2, #176	; 0xb0
 8009aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01f      	beq.n	8009af4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	33b0      	adds	r3, #176	; 0xb0
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	32b0      	adds	r2, #176	; 0xb0
 8009ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f002 fb70 	bl	800c1bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	32b0      	adds	r2, #176	; 0xb0
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	2400329f 	.word	0x2400329f
 8009b04:	240032a0 	.word	0x240032a0
 8009b08:	240032a1 	.word	0x240032a1

08009b0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	32b0      	adds	r2, #176	; 0xb0
 8009b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e0bf      	b.n	8009cbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d050      	beq.n	8009bea <USBD_CDC_Setup+0xde>
 8009b48:	2b20      	cmp	r3, #32
 8009b4a:	f040 80af 	bne.w	8009cac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	88db      	ldrh	r3, [r3, #6]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d03a      	beq.n	8009bcc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	b25b      	sxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	da1b      	bge.n	8009b98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	33b0      	adds	r3, #176	; 0xb0
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009b76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	88d2      	ldrh	r2, [r2, #6]
 8009b7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	88db      	ldrh	r3, [r3, #6]
 8009b82:	2b07      	cmp	r3, #7
 8009b84:	bf28      	it	cs
 8009b86:	2307      	movcs	r3, #7
 8009b88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	89fa      	ldrh	r2, [r7, #14]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f001 fd89 	bl	800b6a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009b96:	e090      	b.n	8009cba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	785a      	ldrb	r2, [r3, #1]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	2b3f      	cmp	r3, #63	; 0x3f
 8009ba8:	d803      	bhi.n	8009bb2 <USBD_CDC_Setup+0xa6>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	88db      	ldrh	r3, [r3, #6]
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	e000      	b.n	8009bb4 <USBD_CDC_Setup+0xa8>
 8009bb2:	2240      	movs	r2, #64	; 0x40
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009bba:	6939      	ldr	r1, [r7, #16]
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 fd9b 	bl	800b700 <USBD_CtlPrepareRx>
      break;
 8009bca:	e076      	b.n	8009cba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	33b0      	adds	r3, #176	; 0xb0
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	7850      	ldrb	r0, [r2, #1]
 8009be2:	2200      	movs	r2, #0
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	4798      	blx	r3
      break;
 8009be8:	e067      	b.n	8009cba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b0b      	cmp	r3, #11
 8009bf0:	d851      	bhi.n	8009c96 <USBD_CDC_Setup+0x18a>
 8009bf2:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <USBD_CDC_Setup+0xec>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c29 	.word	0x08009c29
 8009bfc:	08009ca5 	.word	0x08009ca5
 8009c00:	08009c97 	.word	0x08009c97
 8009c04:	08009c97 	.word	0x08009c97
 8009c08:	08009c97 	.word	0x08009c97
 8009c0c:	08009c97 	.word	0x08009c97
 8009c10:	08009c97 	.word	0x08009c97
 8009c14:	08009c97 	.word	0x08009c97
 8009c18:	08009c97 	.word	0x08009c97
 8009c1c:	08009c97 	.word	0x08009c97
 8009c20:	08009c53 	.word	0x08009c53
 8009c24:	08009c7d 	.word	0x08009c7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	d107      	bne.n	8009c44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c34:	f107 030a 	add.w	r3, r7, #10
 8009c38:	2202      	movs	r2, #2
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f001 fd33 	bl	800b6a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c42:	e032      	b.n	8009caa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 fcbd 	bl	800b5c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	75fb      	strb	r3, [r7, #23]
          break;
 8009c50:	e02b      	b.n	8009caa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d107      	bne.n	8009c6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c5e:	f107 030d 	add.w	r3, r7, #13
 8009c62:	2201      	movs	r2, #1
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 fd1e 	bl	800b6a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c6c:	e01d      	b.n	8009caa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 fca8 	bl	800b5c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c76:	2303      	movs	r3, #3
 8009c78:	75fb      	strb	r3, [r7, #23]
          break;
 8009c7a:	e016      	b.n	8009caa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d00f      	beq.n	8009ca8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 fc9b 	bl	800b5c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c90:	2303      	movs	r3, #3
 8009c92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c94:	e008      	b.n	8009ca8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fc94 	bl	800b5c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ca2:	e002      	b.n	8009caa <USBD_CDC_Setup+0x19e>
          break;
 8009ca4:	bf00      	nop
 8009ca6:	e008      	b.n	8009cba <USBD_CDC_Setup+0x1ae>
          break;
 8009ca8:	bf00      	nop
      }
      break;
 8009caa:	e006      	b.n	8009cba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f001 fc89 	bl	800b5c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	32b0      	adds	r2, #176	; 0xb0
 8009ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e065      	b.n	8009dba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	32b0      	adds	r2, #176	; 0xb0
 8009cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009cfe:	78fb      	ldrb	r3, [r7, #3]
 8009d00:	f003 020f 	and.w	r2, r3, #15
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	4613      	mov	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	440b      	add	r3, r1
 8009d10:	3318      	adds	r3, #24
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d02f      	beq.n	8009d78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	f003 020f 	and.w	r2, r3, #15
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	440b      	add	r3, r1
 8009d2a:	3318      	adds	r3, #24
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	f003 010f 	and.w	r1, r3, #15
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	460b      	mov	r3, r1
 8009d38:	00db      	lsls	r3, r3, #3
 8009d3a:	440b      	add	r3, r1
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4403      	add	r3, r0
 8009d40:	3344      	adds	r3, #68	; 0x44
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d48:	fb01 f303 	mul.w	r3, r1, r3
 8009d4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d112      	bne.n	8009d78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009d52:	78fb      	ldrb	r3, [r7, #3]
 8009d54:	f003 020f 	and.w	r2, r3, #15
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	440b      	add	r3, r1
 8009d64:	3318      	adds	r3, #24
 8009d66:	2200      	movs	r2, #0
 8009d68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d6a:	78f9      	ldrb	r1, [r7, #3]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	2200      	movs	r2, #0
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f002 f9c0 	bl	800c0f6 <USBD_LL_Transmit>
 8009d76:	e01f      	b.n	8009db8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	33b0      	adds	r3, #176	; 0xb0
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d010      	beq.n	8009db8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	33b0      	adds	r3, #176	; 0xb0
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009db4:	78fa      	ldrb	r2, [r7, #3]
 8009db6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	32b0      	adds	r2, #176	; 0xb0
 8009dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ddc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	32b0      	adds	r2, #176	; 0xb0
 8009de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e01a      	b.n	8009e2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f002 f9be 	bl	800c17a <USBD_LL_GetRxDataSize>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	33b0      	adds	r3, #176	; 0xb0
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e24:	4611      	mov	r1, r2
 8009e26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	32b0      	adds	r2, #176	; 0xb0
 8009e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e025      	b.n	8009ea0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	33b0      	adds	r3, #176	; 0xb0
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d01a      	beq.n	8009e9e <USBD_CDC_EP0_RxReady+0x6c>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009e6e:	2bff      	cmp	r3, #255	; 0xff
 8009e70:	d015      	beq.n	8009e9e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	33b0      	adds	r3, #176	; 0xb0
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009e8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009e92:	b292      	uxth	r2, r2
 8009e94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	22ff      	movs	r2, #255	; 0xff
 8009e9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009eb0:	2182      	movs	r1, #130	; 0x82
 8009eb2:	4818      	ldr	r0, [pc, #96]	; (8009f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009eb4:	f000 fd4f 	bl	800a956 <USBD_GetEpDesc>
 8009eb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009eba:	2101      	movs	r1, #1
 8009ebc:	4815      	ldr	r0, [pc, #84]	; (8009f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ebe:	f000 fd4a 	bl	800a956 <USBD_GetEpDesc>
 8009ec2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ec4:	2181      	movs	r1, #129	; 0x81
 8009ec6:	4813      	ldr	r0, [pc, #76]	; (8009f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ec8:	f000 fd45 	bl	800a956 <USBD_GetEpDesc>
 8009ecc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2210      	movs	r2, #16
 8009ed8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d006      	beq.n	8009eee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ee8:	711a      	strb	r2, [r3, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d006      	beq.n	8009f02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009efc:	711a      	strb	r2, [r3, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2243      	movs	r2, #67	; 0x43
 8009f06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f08:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	2400325c 	.word	0x2400325c

08009f18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f20:	2182      	movs	r1, #130	; 0x82
 8009f22:	4818      	ldr	r0, [pc, #96]	; (8009f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f24:	f000 fd17 	bl	800a956 <USBD_GetEpDesc>
 8009f28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	4815      	ldr	r0, [pc, #84]	; (8009f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f2e:	f000 fd12 	bl	800a956 <USBD_GetEpDesc>
 8009f32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f34:	2181      	movs	r1, #129	; 0x81
 8009f36:	4813      	ldr	r0, [pc, #76]	; (8009f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f38:	f000 fd0d 	bl	800a956 <USBD_GetEpDesc>
 8009f3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2210      	movs	r2, #16
 8009f48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d006      	beq.n	8009f5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2200      	movs	r2, #0
 8009f54:	711a      	strb	r2, [r3, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f042 0202 	orr.w	r2, r2, #2
 8009f5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d006      	beq.n	8009f72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	711a      	strb	r2, [r3, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f042 0202 	orr.w	r2, r2, #2
 8009f70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2243      	movs	r2, #67	; 0x43
 8009f76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f78:	4b02      	ldr	r3, [pc, #8]	; (8009f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	2400325c 	.word	0x2400325c

08009f88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f90:	2182      	movs	r1, #130	; 0x82
 8009f92:	4818      	ldr	r0, [pc, #96]	; (8009ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f94:	f000 fcdf 	bl	800a956 <USBD_GetEpDesc>
 8009f98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	4815      	ldr	r0, [pc, #84]	; (8009ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f9e:	f000 fcda 	bl	800a956 <USBD_GetEpDesc>
 8009fa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fa4:	2181      	movs	r1, #129	; 0x81
 8009fa6:	4813      	ldr	r0, [pc, #76]	; (8009ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fa8:	f000 fcd5 	bl	800a956 <USBD_GetEpDesc>
 8009fac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	2210      	movs	r2, #16
 8009fb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d006      	beq.n	8009fce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fc8:	711a      	strb	r2, [r3, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d006      	beq.n	8009fe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fdc:	711a      	strb	r2, [r3, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2243      	movs	r2, #67	; 0x43
 8009fe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fe8:	4b02      	ldr	r3, [pc, #8]	; (8009ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	2400325c 	.word	0x2400325c

08009ff8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	220a      	movs	r2, #10
 800a004:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a006:	4b03      	ldr	r3, [pc, #12]	; (800a014 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	24003218 	.word	0x24003218

0800a018 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a028:	2303      	movs	r3, #3
 800a02a:	e009      	b.n	800a040 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	33b0      	adds	r3, #176	; 0xb0
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	32b0      	adds	r2, #176	; 0xb0
 800a062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a066:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a06e:	2303      	movs	r3, #3
 800a070:	e008      	b.n	800a084 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	371c      	adds	r7, #28
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	32b0      	adds	r2, #176	; 0xb0
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e004      	b.n	800a0be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
	...

0800a0cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	32b0      	adds	r2, #176	; 0xb0
 800a0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e025      	b.n	800a13e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d11f      	bne.n	800a13c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a104:	4b10      	ldr	r3, [pc, #64]	; (800a148 <USBD_CDC_TransmitPacket+0x7c>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	f003 020f 	and.w	r2, r3, #15
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4403      	add	r3, r0
 800a11e:	3318      	adds	r3, #24
 800a120:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <USBD_CDC_TransmitPacket+0x7c>)
 800a124:	7819      	ldrb	r1, [r3, #0]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 ffdf 	bl	800c0f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a138:	2300      	movs	r3, #0
 800a13a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	2400329f 	.word	0x2400329f

0800a14c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	32b0      	adds	r2, #176	; 0xb0
 800a15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a162:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	32b0      	adds	r2, #176	; 0xb0
 800a16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a176:	2303      	movs	r3, #3
 800a178:	e018      	b.n	800a1ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	7c1b      	ldrb	r3, [r3, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10a      	bne.n	800a198 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a182:	4b0c      	ldr	r3, [pc, #48]	; (800a1b4 <USBD_CDC_ReceivePacket+0x68>)
 800a184:	7819      	ldrb	r1, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a18c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 ffd1 	bl	800c138 <USBD_LL_PrepareReceive>
 800a196:	e008      	b.n	800a1aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a198:	4b06      	ldr	r3, [pc, #24]	; (800a1b4 <USBD_CDC_ReceivePacket+0x68>)
 800a19a:	7819      	ldrb	r1, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1a2:	2340      	movs	r3, #64	; 0x40
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f001 ffc7 	bl	800c138 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	240032a0 	.word	0x240032a0

0800a1b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d101      	bne.n	800a1d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	e01f      	b.n	800a210 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	79fa      	ldrb	r2, [r7, #7]
 800a202:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f001 fe3d 	bl	800be84 <USBD_LL_Init>
 800a20a:	4603      	mov	r3, r0
 800a20c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e025      	b.n	800a27c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32ae      	adds	r2, #174	; 0xae
 800a242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00f      	beq.n	800a26c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	32ae      	adds	r2, #174	; 0xae
 800a256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25c:	f107 020e 	add.w	r2, r7, #14
 800a260:	4610      	mov	r0, r2
 800a262:	4798      	blx	r3
 800a264:	4602      	mov	r2, r0
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f001 fe49 	bl	800bf24 <USBD_LL_Start>
 800a292:	4603      	mov	r3, r0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d009      	beq.n	800a2e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	78fa      	ldrb	r2, [r7, #3]
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	4798      	blx	r3
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	4611      	mov	r1, r2
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	4798      	blx	r3
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a310:	2303      	movs	r3, #3
 800a312:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a314:	7bfb      	ldrb	r3, [r7, #15]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b084      	sub	sp, #16
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	4618      	mov	r0, r3
 800a332:	f001 f90e 	bl	800b552 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a344:	461a      	mov	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a352:	f003 031f 	and.w	r3, r3, #31
 800a356:	2b02      	cmp	r3, #2
 800a358:	d01a      	beq.n	800a390 <USBD_LL_SetupStage+0x72>
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d822      	bhi.n	800a3a4 <USBD_LL_SetupStage+0x86>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <USBD_LL_SetupStage+0x4a>
 800a362:	2b01      	cmp	r3, #1
 800a364:	d00a      	beq.n	800a37c <USBD_LL_SetupStage+0x5e>
 800a366:	e01d      	b.n	800a3a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fb65 	bl	800aa40 <USBD_StdDevReq>
 800a376:	4603      	mov	r3, r0
 800a378:	73fb      	strb	r3, [r7, #15]
      break;
 800a37a:	e020      	b.n	800a3be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fbcd 	bl	800ab24 <USBD_StdItfReq>
 800a38a:	4603      	mov	r3, r0
 800a38c:	73fb      	strb	r3, [r7, #15]
      break;
 800a38e:	e016      	b.n	800a3be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fc2f 	bl	800abfc <USBD_StdEPReq>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3a2:	e00c      	b.n	800a3be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f001 fe16 	bl	800bfe4 <USBD_LL_StallEP>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a3bc:	bf00      	nop
  }

  return ret;
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a3da:	7afb      	ldrb	r3, [r7, #11]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d16e      	bne.n	800a4be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	f040 8098 	bne.w	800a524 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d913      	bls.n	800a428 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	1ad2      	subs	r2, r2, r3
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	4293      	cmp	r3, r2
 800a418:	bf28      	it	cs
 800a41a:	4613      	movcs	r3, r2
 800a41c:	461a      	mov	r2, r3
 800a41e:	6879      	ldr	r1, [r7, #4]
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f001 f98a 	bl	800b73a <USBD_CtlContinueRx>
 800a426:	e07d      	b.n	800a524 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a42e:	f003 031f 	and.w	r3, r3, #31
 800a432:	2b02      	cmp	r3, #2
 800a434:	d014      	beq.n	800a460 <USBD_LL_DataOutStage+0x98>
 800a436:	2b02      	cmp	r3, #2
 800a438:	d81d      	bhi.n	800a476 <USBD_LL_DataOutStage+0xae>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d002      	beq.n	800a444 <USBD_LL_DataOutStage+0x7c>
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d003      	beq.n	800a44a <USBD_LL_DataOutStage+0x82>
 800a442:	e018      	b.n	800a476 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a444:	2300      	movs	r3, #0
 800a446:	75bb      	strb	r3, [r7, #22]
            break;
 800a448:	e018      	b.n	800a47c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a450:	b2db      	uxtb	r3, r3
 800a452:	4619      	mov	r1, r3
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f000 fa64 	bl	800a922 <USBD_CoreFindIF>
 800a45a:	4603      	mov	r3, r0
 800a45c:	75bb      	strb	r3, [r7, #22]
            break;
 800a45e:	e00d      	b.n	800a47c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a466:	b2db      	uxtb	r3, r3
 800a468:	4619      	mov	r1, r3
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f000 fa66 	bl	800a93c <USBD_CoreFindEP>
 800a470:	4603      	mov	r3, r0
 800a472:	75bb      	strb	r3, [r7, #22]
            break;
 800a474:	e002      	b.n	800a47c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	75bb      	strb	r3, [r7, #22]
            break;
 800a47a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a47c:	7dbb      	ldrb	r3, [r7, #22]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d119      	bne.n	800a4b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d113      	bne.n	800a4b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a48e:	7dba      	ldrb	r2, [r7, #22]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	32ae      	adds	r2, #174	; 0xae
 800a494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a49e:	7dba      	ldrb	r2, [r7, #22]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a4a6:	7dba      	ldrb	r2, [r7, #22]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	32ae      	adds	r2, #174	; 0xae
 800a4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f001 f950 	bl	800b75c <USBD_CtlSendStatus>
 800a4bc:	e032      	b.n	800a524 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a4be:	7afb      	ldrb	r3, [r7, #11]
 800a4c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 fa37 	bl	800a93c <USBD_CoreFindEP>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4d2:	7dbb      	ldrb	r3, [r7, #22]
 800a4d4:	2bff      	cmp	r3, #255	; 0xff
 800a4d6:	d025      	beq.n	800a524 <USBD_LL_DataOutStage+0x15c>
 800a4d8:	7dbb      	ldrb	r3, [r7, #22]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d122      	bne.n	800a524 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d117      	bne.n	800a51a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a4ea:	7dba      	ldrb	r2, [r7, #22]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	32ae      	adds	r2, #174	; 0xae
 800a4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00f      	beq.n	800a51a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a4fa:	7dba      	ldrb	r2, [r7, #22]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a502:	7dba      	ldrb	r2, [r7, #22]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	32ae      	adds	r2, #174	; 0xae
 800a508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	7afa      	ldrb	r2, [r7, #11]
 800a510:	4611      	mov	r1, r2
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	4798      	blx	r3
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a520:	7dfb      	ldrb	r3, [r7, #23]
 800a522:	e000      	b.n	800a526 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b086      	sub	sp, #24
 800a532:	af00      	add	r7, sp, #0
 800a534:	60f8      	str	r0, [r7, #12]
 800a536:	460b      	mov	r3, r1
 800a538:	607a      	str	r2, [r7, #4]
 800a53a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d16f      	bne.n	800a622 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3314      	adds	r3, #20
 800a546:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d15a      	bne.n	800a608 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	689a      	ldr	r2, [r3, #8]
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d914      	bls.n	800a588 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	689a      	ldr	r2, [r3, #8]
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	1ad2      	subs	r2, r2, r3
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	461a      	mov	r2, r3
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f001 f8b2 	bl	800b6de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a57a:	2300      	movs	r3, #0
 800a57c:	2200      	movs	r2, #0
 800a57e:	2100      	movs	r1, #0
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f001 fdd9 	bl	800c138 <USBD_LL_PrepareReceive>
 800a586:	e03f      	b.n	800a608 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	68da      	ldr	r2, [r3, #12]
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	429a      	cmp	r2, r3
 800a592:	d11c      	bne.n	800a5ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d316      	bcc.n	800a5ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d20f      	bcs.n	800a5ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f001 f893 	bl	800b6de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f001 fdb6 	bl	800c138 <USBD_LL_PrepareReceive>
 800a5cc:	e01c      	b.n	800a608 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d10f      	bne.n	800a5fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5fa:	2180      	movs	r1, #128	; 0x80
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f001 fcf1 	bl	800bfe4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f001 f8bd 	bl	800b782 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d03a      	beq.n	800a688 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff fe42 	bl	800a29c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a620:	e032      	b.n	800a688 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a622:	7afb      	ldrb	r3, [r7, #11]
 800a624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	4619      	mov	r1, r3
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 f985 	bl	800a93c <USBD_CoreFindEP>
 800a632:	4603      	mov	r3, r0
 800a634:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a636:	7dfb      	ldrb	r3, [r7, #23]
 800a638:	2bff      	cmp	r3, #255	; 0xff
 800a63a:	d025      	beq.n	800a688 <USBD_LL_DataInStage+0x15a>
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d122      	bne.n	800a688 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b03      	cmp	r3, #3
 800a64c:	d11c      	bne.n	800a688 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a64e:	7dfa      	ldrb	r2, [r7, #23]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	32ae      	adds	r2, #174	; 0xae
 800a654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d014      	beq.n	800a688 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a65e:	7dfa      	ldrb	r2, [r7, #23]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a666:	7dfa      	ldrb	r2, [r7, #23]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	32ae      	adds	r2, #174	; 0xae
 800a66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	7afa      	ldrb	r2, [r7, #11]
 800a674:	4611      	mov	r1, r2
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	4798      	blx	r3
 800a67a:	4603      	mov	r3, r0
 800a67c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a67e:	7dbb      	ldrb	r3, [r7, #22]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a684:	7dbb      	ldrb	r3, [r7, #22]
 800a686:	e000      	b.n	800a68a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d014      	beq.n	800a6f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00e      	beq.n	800a6f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	6852      	ldr	r2, [r2, #4]
 800a6e6:	b2d2      	uxtb	r2, r2
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	4798      	blx	r3
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6f8:	2340      	movs	r3, #64	; 0x40
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f001 fc2b 	bl	800bf5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2240      	movs	r2, #64	; 0x40
 800a710:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a714:	2340      	movs	r3, #64	; 0x40
 800a716:	2200      	movs	r2, #0
 800a718:	2180      	movs	r1, #128	; 0x80
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 fc1d 	bl	800bf5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2240      	movs	r2, #64	; 0x40
 800a72a:	621a      	str	r2, [r3, #32]

  return ret;
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	460b      	mov	r3, r1
 800a740:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	78fa      	ldrb	r2, [r7, #3]
 800a746:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b04      	cmp	r3, #4
 800a768:	d006      	beq.n	800a778 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a770:	b2da      	uxtb	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2204      	movs	r2, #4
 800a77c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b04      	cmp	r3, #4
 800a7a0:	d106      	bne.n	800a7b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d110      	bne.n	800a7f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00b      	beq.n	800a7f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	460b      	mov	r3, r1
 800a808:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	32ae      	adds	r2, #174	; 0xae
 800a814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d101      	bne.n	800a820 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a81c:	2303      	movs	r3, #3
 800a81e:	e01c      	b.n	800a85a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d115      	bne.n	800a858 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	32ae      	adds	r2, #174	; 0xae
 800a836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00b      	beq.n	800a858 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	32ae      	adds	r2, #174	; 0xae
 800a84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84e:	6a1b      	ldr	r3, [r3, #32]
 800a850:	78fa      	ldrb	r2, [r7, #3]
 800a852:	4611      	mov	r1, r2
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	32ae      	adds	r2, #174	; 0xae
 800a878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a880:	2303      	movs	r3, #3
 800a882:	e01c      	b.n	800a8be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d115      	bne.n	800a8bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	32ae      	adds	r2, #174	; 0xae
 800a89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00b      	beq.n	800a8bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	32ae      	adds	r2, #174	; 0xae
 800a8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	78fa      	ldrb	r2, [r7, #3]
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00e      	beq.n	800a918 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	6852      	ldr	r2, [r2, #4]
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	4611      	mov	r1, r2
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	4798      	blx	r3
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a914:	2303      	movs	r3, #3
 800a916:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a918:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a922:	b480      	push	{r7}
 800a924:	b083      	sub	sp, #12
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	460b      	mov	r3, r1
 800a92c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a92e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a930:	4618      	mov	r0, r3
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a948:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b086      	sub	sp, #24
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	885b      	ldrh	r3, [r3, #2]
 800a972:	b29a      	uxth	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d920      	bls.n	800a9c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	b29b      	uxth	r3, r3
 800a984:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a986:	e013      	b.n	800a9b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a988:	f107 030a 	add.w	r3, r7, #10
 800a98c:	4619      	mov	r1, r3
 800a98e:	6978      	ldr	r0, [r7, #20]
 800a990:	f000 f81b 	bl	800a9ca <USBD_GetNextDesc>
 800a994:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	785b      	ldrb	r3, [r3, #1]
 800a99a:	2b05      	cmp	r3, #5
 800a99c:	d108      	bne.n	800a9b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	789b      	ldrb	r3, [r3, #2]
 800a9a6:	78fa      	ldrb	r2, [r7, #3]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d008      	beq.n	800a9be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	885b      	ldrh	r3, [r3, #2]
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	897b      	ldrh	r3, [r7, #10]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d8e5      	bhi.n	800a988 <USBD_GetEpDesc+0x32>
 800a9bc:	e000      	b.n	800a9c0 <USBD_GetEpDesc+0x6a>
          break;
 800a9be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a9c0:	693b      	ldr	r3, [r7, #16]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b085      	sub	sp, #20
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	881a      	ldrh	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	4413      	add	r3, r2
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa22:	8a3b      	ldrh	r3, [r7, #16]
 800aa24:	021b      	lsls	r3, r3, #8
 800aa26:	b21a      	sxth	r2, r3
 800aa28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	b21b      	sxth	r3, r3
 800aa30:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa32:	89fb      	ldrh	r3, [r7, #14]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	371c      	adds	r7, #28
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa56:	2b40      	cmp	r3, #64	; 0x40
 800aa58:	d005      	beq.n	800aa66 <USBD_StdDevReq+0x26>
 800aa5a:	2b40      	cmp	r3, #64	; 0x40
 800aa5c:	d857      	bhi.n	800ab0e <USBD_StdDevReq+0xce>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00f      	beq.n	800aa82 <USBD_StdDevReq+0x42>
 800aa62:	2b20      	cmp	r3, #32
 800aa64:	d153      	bne.n	800ab0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	32ae      	adds	r2, #174	; 0xae
 800aa70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	4798      	blx	r3
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa80:	e04a      	b.n	800ab18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	785b      	ldrb	r3, [r3, #1]
 800aa86:	2b09      	cmp	r3, #9
 800aa88:	d83b      	bhi.n	800ab02 <USBD_StdDevReq+0xc2>
 800aa8a:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <USBD_StdDevReq+0x50>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800aae5 	.word	0x0800aae5
 800aa94:	0800aaf9 	.word	0x0800aaf9
 800aa98:	0800ab03 	.word	0x0800ab03
 800aa9c:	0800aaef 	.word	0x0800aaef
 800aaa0:	0800ab03 	.word	0x0800ab03
 800aaa4:	0800aac3 	.word	0x0800aac3
 800aaa8:	0800aab9 	.word	0x0800aab9
 800aaac:	0800ab03 	.word	0x0800ab03
 800aab0:	0800aadb 	.word	0x0800aadb
 800aab4:	0800aacd 	.word	0x0800aacd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fa3c 	bl	800af38 <USBD_GetDescriptor>
          break;
 800aac0:	e024      	b.n	800ab0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fba1 	bl	800b20c <USBD_SetAddress>
          break;
 800aaca:	e01f      	b.n	800ab0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fbe0 	bl	800b294 <USBD_SetConfig>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73fb      	strb	r3, [r7, #15]
          break;
 800aad8:	e018      	b.n	800ab0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fc83 	bl	800b3e8 <USBD_GetConfig>
          break;
 800aae2:	e013      	b.n	800ab0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aae4:	6839      	ldr	r1, [r7, #0]
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fcb4 	bl	800b454 <USBD_GetStatus>
          break;
 800aaec:	e00e      	b.n	800ab0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fce3 	bl	800b4bc <USBD_SetFeature>
          break;
 800aaf6:	e009      	b.n	800ab0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fd07 	bl	800b50e <USBD_ClrFeature>
          break;
 800ab00:	e004      	b.n	800ab0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fd5e 	bl	800b5c6 <USBD_CtlError>
          break;
 800ab0a:	bf00      	nop
      }
      break;
 800ab0c:	e004      	b.n	800ab18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fd58 	bl	800b5c6 <USBD_CtlError>
      break;
 800ab16:	bf00      	nop
  }

  return ret;
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop

0800ab24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab3a:	2b40      	cmp	r3, #64	; 0x40
 800ab3c:	d005      	beq.n	800ab4a <USBD_StdItfReq+0x26>
 800ab3e:	2b40      	cmp	r3, #64	; 0x40
 800ab40:	d852      	bhi.n	800abe8 <USBD_StdItfReq+0xc4>
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <USBD_StdItfReq+0x26>
 800ab46:	2b20      	cmp	r3, #32
 800ab48:	d14e      	bne.n	800abe8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	3b01      	subs	r3, #1
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d840      	bhi.n	800abda <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	889b      	ldrh	r3, [r3, #4]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d836      	bhi.n	800abd0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	889b      	ldrh	r3, [r3, #4]
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff fed9 	bl	800a922 <USBD_CoreFindIF>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	2bff      	cmp	r3, #255	; 0xff
 800ab78:	d01d      	beq.n	800abb6 <USBD_StdItfReq+0x92>
 800ab7a:	7bbb      	ldrb	r3, [r7, #14]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d11a      	bne.n	800abb6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ab80:	7bba      	ldrb	r2, [r7, #14]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	32ae      	adds	r2, #174	; 0xae
 800ab86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00f      	beq.n	800abb0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ab90:	7bba      	ldrb	r2, [r7, #14]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab98:	7bba      	ldrb	r2, [r7, #14]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	32ae      	adds	r2, #174	; 0xae
 800ab9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	4798      	blx	r3
 800abaa:	4603      	mov	r3, r0
 800abac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abae:	e004      	b.n	800abba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800abb0:	2303      	movs	r3, #3
 800abb2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abb4:	e001      	b.n	800abba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800abb6:	2303      	movs	r3, #3
 800abb8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	88db      	ldrh	r3, [r3, #6]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d110      	bne.n	800abe4 <USBD_StdItfReq+0xc0>
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10d      	bne.n	800abe4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fdc7 	bl	800b75c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abce:	e009      	b.n	800abe4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fcf7 	bl	800b5c6 <USBD_CtlError>
          break;
 800abd8:	e004      	b.n	800abe4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fcf2 	bl	800b5c6 <USBD_CtlError>
          break;
 800abe2:	e000      	b.n	800abe6 <USBD_StdItfReq+0xc2>
          break;
 800abe4:	bf00      	nop
      }
      break;
 800abe6:	e004      	b.n	800abf2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fceb 	bl	800b5c6 <USBD_CtlError>
      break;
 800abf0:	bf00      	nop
  }

  return ret;
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	889b      	ldrh	r3, [r3, #4]
 800ac0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac18:	2b40      	cmp	r3, #64	; 0x40
 800ac1a:	d007      	beq.n	800ac2c <USBD_StdEPReq+0x30>
 800ac1c:	2b40      	cmp	r3, #64	; 0x40
 800ac1e:	f200 817f 	bhi.w	800af20 <USBD_StdEPReq+0x324>
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d02a      	beq.n	800ac7c <USBD_StdEPReq+0x80>
 800ac26:	2b20      	cmp	r3, #32
 800ac28:	f040 817a 	bne.w	800af20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fe83 	bl	800a93c <USBD_CoreFindEP>
 800ac36:	4603      	mov	r3, r0
 800ac38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac3a:	7b7b      	ldrb	r3, [r7, #13]
 800ac3c:	2bff      	cmp	r3, #255	; 0xff
 800ac3e:	f000 8174 	beq.w	800af2a <USBD_StdEPReq+0x32e>
 800ac42:	7b7b      	ldrb	r3, [r7, #13]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f040 8170 	bne.w	800af2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac4a:	7b7a      	ldrb	r2, [r7, #13]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ac52:	7b7a      	ldrb	r2, [r7, #13]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	32ae      	adds	r2, #174	; 0xae
 800ac58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 8163 	beq.w	800af2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ac64:	7b7a      	ldrb	r2, [r7, #13]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	32ae      	adds	r2, #174	; 0xae
 800ac6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	4798      	blx	r3
 800ac76:	4603      	mov	r3, r0
 800ac78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac7a:	e156      	b.n	800af2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	785b      	ldrb	r3, [r3, #1]
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d008      	beq.n	800ac96 <USBD_StdEPReq+0x9a>
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	f300 8145 	bgt.w	800af14 <USBD_StdEPReq+0x318>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 809b 	beq.w	800adc6 <USBD_StdEPReq+0x1ca>
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d03c      	beq.n	800ad0e <USBD_StdEPReq+0x112>
 800ac94:	e13e      	b.n	800af14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d002      	beq.n	800aca8 <USBD_StdEPReq+0xac>
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d016      	beq.n	800acd4 <USBD_StdEPReq+0xd8>
 800aca6:	e02c      	b.n	800ad02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00d      	beq.n	800acca <USBD_StdEPReq+0xce>
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	2b80      	cmp	r3, #128	; 0x80
 800acb2:	d00a      	beq.n	800acca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f001 f993 	bl	800bfe4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800acbe:	2180      	movs	r1, #128	; 0x80
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f001 f98f 	bl	800bfe4 <USBD_LL_StallEP>
 800acc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acc8:	e020      	b.n	800ad0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fc7a 	bl	800b5c6 <USBD_CtlError>
              break;
 800acd2:	e01b      	b.n	800ad0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	885b      	ldrh	r3, [r3, #2]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10e      	bne.n	800acfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00b      	beq.n	800acfa <USBD_StdEPReq+0xfe>
 800ace2:	7bbb      	ldrb	r3, [r7, #14]
 800ace4:	2b80      	cmp	r3, #128	; 0x80
 800ace6:	d008      	beq.n	800acfa <USBD_StdEPReq+0xfe>
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	88db      	ldrh	r3, [r3, #6]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d104      	bne.n	800acfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	4619      	mov	r1, r3
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f001 f975 	bl	800bfe4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fd2e 	bl	800b75c <USBD_CtlSendStatus>

              break;
 800ad00:	e004      	b.n	800ad0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fc5e 	bl	800b5c6 <USBD_CtlError>
              break;
 800ad0a:	bf00      	nop
          }
          break;
 800ad0c:	e107      	b.n	800af1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d002      	beq.n	800ad20 <USBD_StdEPReq+0x124>
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d016      	beq.n	800ad4c <USBD_StdEPReq+0x150>
 800ad1e:	e04b      	b.n	800adb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00d      	beq.n	800ad42 <USBD_StdEPReq+0x146>
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b80      	cmp	r3, #128	; 0x80
 800ad2a:	d00a      	beq.n	800ad42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 f957 	bl	800bfe4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad36:	2180      	movs	r1, #128	; 0x80
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 f953 	bl	800bfe4 <USBD_LL_StallEP>
 800ad3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad40:	e040      	b.n	800adc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fc3e 	bl	800b5c6 <USBD_CtlError>
              break;
 800ad4a:	e03b      	b.n	800adc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	885b      	ldrh	r3, [r3, #2]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d136      	bne.n	800adc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d004      	beq.n	800ad68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f001 f95d 	bl	800c022 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fcf7 	bl	800b75c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad6e:	7bbb      	ldrb	r3, [r7, #14]
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff fde2 	bl	800a93c <USBD_CoreFindEP>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad7c:	7b7b      	ldrb	r3, [r7, #13]
 800ad7e:	2bff      	cmp	r3, #255	; 0xff
 800ad80:	d01f      	beq.n	800adc2 <USBD_StdEPReq+0x1c6>
 800ad82:	7b7b      	ldrb	r3, [r7, #13]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d11c      	bne.n	800adc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ad88:	7b7a      	ldrb	r2, [r7, #13]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ad90:	7b7a      	ldrb	r2, [r7, #13]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	32ae      	adds	r2, #174	; 0xae
 800ad96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d010      	beq.n	800adc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ada0:	7b7a      	ldrb	r2, [r7, #13]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	32ae      	adds	r2, #174	; 0xae
 800ada6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	4798      	blx	r3
 800adb2:	4603      	mov	r3, r0
 800adb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800adb6:	e004      	b.n	800adc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fc03 	bl	800b5c6 <USBD_CtlError>
              break;
 800adc0:	e000      	b.n	800adc4 <USBD_StdEPReq+0x1c8>
              break;
 800adc2:	bf00      	nop
          }
          break;
 800adc4:	e0ab      	b.n	800af1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b02      	cmp	r3, #2
 800add0:	d002      	beq.n	800add8 <USBD_StdEPReq+0x1dc>
 800add2:	2b03      	cmp	r3, #3
 800add4:	d032      	beq.n	800ae3c <USBD_StdEPReq+0x240>
 800add6:	e097      	b.n	800af08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800add8:	7bbb      	ldrb	r3, [r7, #14]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d007      	beq.n	800adee <USBD_StdEPReq+0x1f2>
 800adde:	7bbb      	ldrb	r3, [r7, #14]
 800ade0:	2b80      	cmp	r3, #128	; 0x80
 800ade2:	d004      	beq.n	800adee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fbed 	bl	800b5c6 <USBD_CtlError>
                break;
 800adec:	e091      	b.n	800af12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	da0b      	bge.n	800ae0e <USBD_StdEPReq+0x212>
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adfc:	4613      	mov	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	3310      	adds	r3, #16
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	4413      	add	r3, r2
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	e00b      	b.n	800ae26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
 800ae10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae14:	4613      	mov	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	4413      	add	r3, r2
 800ae24:	3304      	adds	r3, #4
 800ae26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	2202      	movs	r2, #2
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fc37 	bl	800b6a8 <USBD_CtlSendData>
              break;
 800ae3a:	e06a      	b.n	800af12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	da11      	bge.n	800ae68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
 800ae46:	f003 020f 	and.w	r2, r3, #15
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	440b      	add	r3, r1
 800ae56:	3324      	adds	r3, #36	; 0x24
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d117      	bne.n	800ae8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fbb0 	bl	800b5c6 <USBD_CtlError>
                  break;
 800ae66:	e054      	b.n	800af12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	f003 020f 	and.w	r2, r3, #15
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	4613      	mov	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	4413      	add	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	440b      	add	r3, r1
 800ae7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d104      	bne.n	800ae8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fb9d 	bl	800b5c6 <USBD_CtlError>
                  break;
 800ae8c:	e041      	b.n	800af12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	da0b      	bge.n	800aeae <USBD_StdEPReq+0x2b2>
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
 800ae98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	3310      	adds	r3, #16
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	4413      	add	r3, r2
 800aeaa:	3304      	adds	r3, #4
 800aeac:	e00b      	b.n	800aec6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	4413      	add	r3, r2
 800aec4:	3304      	adds	r3, #4
 800aec6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d002      	beq.n	800aed4 <USBD_StdEPReq+0x2d8>
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	2b80      	cmp	r3, #128	; 0x80
 800aed2:	d103      	bne.n	800aedc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2200      	movs	r2, #0
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	e00e      	b.n	800aefa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f001 f8bd 	bl	800c060 <USBD_LL_IsStallEP>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2201      	movs	r2, #1
 800aef0:	601a      	str	r2, [r3, #0]
 800aef2:	e002      	b.n	800aefa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	2202      	movs	r2, #2
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fbd1 	bl	800b6a8 <USBD_CtlSendData>
              break;
 800af06:	e004      	b.n	800af12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fb5b 	bl	800b5c6 <USBD_CtlError>
              break;
 800af10:	bf00      	nop
          }
          break;
 800af12:	e004      	b.n	800af1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fb55 	bl	800b5c6 <USBD_CtlError>
          break;
 800af1c:	bf00      	nop
      }
      break;
 800af1e:	e005      	b.n	800af2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fb4f 	bl	800b5c6 <USBD_CtlError>
      break;
 800af28:	e000      	b.n	800af2c <USBD_StdEPReq+0x330>
      break;
 800af2a:	bf00      	nop
  }

  return ret;
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af46:	2300      	movs	r3, #0
 800af48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	885b      	ldrh	r3, [r3, #2]
 800af52:	0a1b      	lsrs	r3, r3, #8
 800af54:	b29b      	uxth	r3, r3
 800af56:	3b01      	subs	r3, #1
 800af58:	2b06      	cmp	r3, #6
 800af5a:	f200 8128 	bhi.w	800b1ae <USBD_GetDescriptor+0x276>
 800af5e:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <USBD_GetDescriptor+0x2c>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800af81 	.word	0x0800af81
 800af68:	0800af99 	.word	0x0800af99
 800af6c:	0800afd9 	.word	0x0800afd9
 800af70:	0800b1af 	.word	0x0800b1af
 800af74:	0800b1af 	.word	0x0800b1af
 800af78:	0800b14f 	.word	0x0800b14f
 800af7c:	0800b17b 	.word	0x0800b17b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7c12      	ldrb	r2, [r2, #16]
 800af8c:	f107 0108 	add.w	r1, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
      break;
 800af96:	e112      	b.n	800b1be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7c1b      	ldrb	r3, [r3, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10d      	bne.n	800afbc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa8:	f107 0208 	add.w	r2, r7, #8
 800afac:	4610      	mov	r0, r2
 800afae:	4798      	blx	r3
 800afb0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3301      	adds	r3, #1
 800afb6:	2202      	movs	r2, #2
 800afb8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800afba:	e100      	b.n	800b1be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	f107 0208 	add.w	r2, r7, #8
 800afc8:	4610      	mov	r0, r2
 800afca:	4798      	blx	r3
 800afcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3301      	adds	r3, #1
 800afd2:	2202      	movs	r2, #2
 800afd4:	701a      	strb	r2, [r3, #0]
      break;
 800afd6:	e0f2      	b.n	800b1be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	885b      	ldrh	r3, [r3, #2]
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b05      	cmp	r3, #5
 800afe0:	f200 80ac 	bhi.w	800b13c <USBD_GetDescriptor+0x204>
 800afe4:	a201      	add	r2, pc, #4	; (adr r2, 800afec <USBD_GetDescriptor+0xb4>)
 800afe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afea:	bf00      	nop
 800afec:	0800b005 	.word	0x0800b005
 800aff0:	0800b039 	.word	0x0800b039
 800aff4:	0800b06d 	.word	0x0800b06d
 800aff8:	0800b0a1 	.word	0x0800b0a1
 800affc:	0800b0d5 	.word	0x0800b0d5
 800b000:	0800b109 	.word	0x0800b109
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00b      	beq.n	800b028 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	7c12      	ldrb	r2, [r2, #16]
 800b01c:	f107 0108 	add.w	r1, r7, #8
 800b020:	4610      	mov	r0, r2
 800b022:	4798      	blx	r3
 800b024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b026:	e091      	b.n	800b14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 facb 	bl	800b5c6 <USBD_CtlError>
            err++;
 800b030:	7afb      	ldrb	r3, [r7, #11]
 800b032:	3301      	adds	r3, #1
 800b034:	72fb      	strb	r3, [r7, #11]
          break;
 800b036:	e089      	b.n	800b14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00b      	beq.n	800b05c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	7c12      	ldrb	r2, [r2, #16]
 800b050:	f107 0108 	add.w	r1, r7, #8
 800b054:	4610      	mov	r0, r2
 800b056:	4798      	blx	r3
 800b058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b05a:	e077      	b.n	800b14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fab1 	bl	800b5c6 <USBD_CtlError>
            err++;
 800b064:	7afb      	ldrb	r3, [r7, #11]
 800b066:	3301      	adds	r3, #1
 800b068:	72fb      	strb	r3, [r7, #11]
          break;
 800b06a:	e06f      	b.n	800b14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00b      	beq.n	800b090 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	7c12      	ldrb	r2, [r2, #16]
 800b084:	f107 0108 	add.w	r1, r7, #8
 800b088:	4610      	mov	r0, r2
 800b08a:	4798      	blx	r3
 800b08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b08e:	e05d      	b.n	800b14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fa97 	bl	800b5c6 <USBD_CtlError>
            err++;
 800b098:	7afb      	ldrb	r3, [r7, #11]
 800b09a:	3301      	adds	r3, #1
 800b09c:	72fb      	strb	r3, [r7, #11]
          break;
 800b09e:	e055      	b.n	800b14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00b      	beq.n	800b0c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	7c12      	ldrb	r2, [r2, #16]
 800b0b8:	f107 0108 	add.w	r1, r7, #8
 800b0bc:	4610      	mov	r0, r2
 800b0be:	4798      	blx	r3
 800b0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0c2:	e043      	b.n	800b14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fa7d 	bl	800b5c6 <USBD_CtlError>
            err++;
 800b0cc:	7afb      	ldrb	r3, [r7, #11]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0d2:	e03b      	b.n	800b14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0e6:	695b      	ldr	r3, [r3, #20]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	7c12      	ldrb	r2, [r2, #16]
 800b0ec:	f107 0108 	add.w	r1, r7, #8
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	4798      	blx	r3
 800b0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0f6:	e029      	b.n	800b14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fa63 	bl	800b5c6 <USBD_CtlError>
            err++;
 800b100:	7afb      	ldrb	r3, [r7, #11]
 800b102:	3301      	adds	r3, #1
 800b104:	72fb      	strb	r3, [r7, #11]
          break;
 800b106:	e021      	b.n	800b14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00b      	beq.n	800b12c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	7c12      	ldrb	r2, [r2, #16]
 800b120:	f107 0108 	add.w	r1, r7, #8
 800b124:	4610      	mov	r0, r2
 800b126:	4798      	blx	r3
 800b128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b12a:	e00f      	b.n	800b14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fa49 	bl	800b5c6 <USBD_CtlError>
            err++;
 800b134:	7afb      	ldrb	r3, [r7, #11]
 800b136:	3301      	adds	r3, #1
 800b138:	72fb      	strb	r3, [r7, #11]
          break;
 800b13a:	e007      	b.n	800b14c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fa41 	bl	800b5c6 <USBD_CtlError>
          err++;
 800b144:	7afb      	ldrb	r3, [r7, #11]
 800b146:	3301      	adds	r3, #1
 800b148:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b14a:	bf00      	nop
      }
      break;
 800b14c:	e037      	b.n	800b1be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	7c1b      	ldrb	r3, [r3, #16]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d109      	bne.n	800b16a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15e:	f107 0208 	add.w	r2, r7, #8
 800b162:	4610      	mov	r0, r2
 800b164:	4798      	blx	r3
 800b166:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b168:	e029      	b.n	800b1be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fa2a 	bl	800b5c6 <USBD_CtlError>
        err++;
 800b172:	7afb      	ldrb	r3, [r7, #11]
 800b174:	3301      	adds	r3, #1
 800b176:	72fb      	strb	r3, [r7, #11]
      break;
 800b178:	e021      	b.n	800b1be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	7c1b      	ldrb	r3, [r3, #16]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10d      	bne.n	800b19e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18a:	f107 0208 	add.w	r2, r7, #8
 800b18e:	4610      	mov	r0, r2
 800b190:	4798      	blx	r3
 800b192:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3301      	adds	r3, #1
 800b198:	2207      	movs	r2, #7
 800b19a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b19c:	e00f      	b.n	800b1be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fa10 	bl	800b5c6 <USBD_CtlError>
        err++;
 800b1a6:	7afb      	ldrb	r3, [r7, #11]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	72fb      	strb	r3, [r7, #11]
      break;
 800b1ac:	e007      	b.n	800b1be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fa08 	bl	800b5c6 <USBD_CtlError>
      err++;
 800b1b6:	7afb      	ldrb	r3, [r7, #11]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	72fb      	strb	r3, [r7, #11]
      break;
 800b1bc:	bf00      	nop
  }

  if (err != 0U)
 800b1be:	7afb      	ldrb	r3, [r7, #11]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d11e      	bne.n	800b202 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	88db      	ldrh	r3, [r3, #6]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d016      	beq.n	800b1fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b1cc:	893b      	ldrh	r3, [r7, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00e      	beq.n	800b1f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	88da      	ldrh	r2, [r3, #6]
 800b1d6:	893b      	ldrh	r3, [r7, #8]
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	bf28      	it	cs
 800b1dc:	4613      	movcs	r3, r2
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1e2:	893b      	ldrh	r3, [r7, #8]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	68f9      	ldr	r1, [r7, #12]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fa5d 	bl	800b6a8 <USBD_CtlSendData>
 800b1ee:	e009      	b.n	800b204 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f9e7 	bl	800b5c6 <USBD_CtlError>
 800b1f8:	e004      	b.n	800b204 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 faae 	bl	800b75c <USBD_CtlSendStatus>
 800b200:	e000      	b.n	800b204 <USBD_GetDescriptor+0x2cc>
    return;
 800b202:	bf00      	nop
  }
}
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop

0800b20c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	889b      	ldrh	r3, [r3, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d131      	bne.n	800b282 <USBD_SetAddress+0x76>
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	88db      	ldrh	r3, [r3, #6]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d12d      	bne.n	800b282 <USBD_SetAddress+0x76>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	885b      	ldrh	r3, [r3, #2]
 800b22a:	2b7f      	cmp	r3, #127	; 0x7f
 800b22c:	d829      	bhi.n	800b282 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	885b      	ldrh	r3, [r3, #2]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b238:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b03      	cmp	r3, #3
 800b244:	d104      	bne.n	800b250 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f9bc 	bl	800b5c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24e:	e01d      	b.n	800b28c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	7bfa      	ldrb	r2, [r7, #15]
 800b254:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b258:	7bfb      	ldrb	r3, [r7, #15]
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 ff2b 	bl	800c0b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa7a 	bl	800b75c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b268:	7bfb      	ldrb	r3, [r7, #15]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d004      	beq.n	800b278 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2202      	movs	r2, #2
 800b272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b276:	e009      	b.n	800b28c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b280:	e004      	b.n	800b28c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f99e 	bl	800b5c6 <USBD_CtlError>
  }
}
 800b28a:	bf00      	nop
 800b28c:	bf00      	nop
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	885b      	ldrh	r3, [r3, #2]
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	4b4e      	ldr	r3, [pc, #312]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b2aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b2ac:	4b4d      	ldr	r3, [pc, #308]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d905      	bls.n	800b2c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f985 	bl	800b5c6 <USBD_CtlError>
    return USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e08c      	b.n	800b3da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d002      	beq.n	800b2d2 <USBD_SetConfig+0x3e>
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d029      	beq.n	800b324 <USBD_SetConfig+0x90>
 800b2d0:	e075      	b.n	800b3be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b2d2:	4b44      	ldr	r3, [pc, #272]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d020      	beq.n	800b31c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b2da:	4b42      	ldr	r3, [pc, #264]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2e4:	4b3f      	ldr	r3, [pc, #252]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7fe ffe1 	bl	800a2b2 <USBD_SetClassConfig>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d008      	beq.n	800b30c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f962 	bl	800b5c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2202      	movs	r2, #2
 800b306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b30a:	e065      	b.n	800b3d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fa25 	bl	800b75c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2203      	movs	r2, #3
 800b316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b31a:	e05d      	b.n	800b3d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fa1d 	bl	800b75c <USBD_CtlSendStatus>
      break;
 800b322:	e059      	b.n	800b3d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b324:	4b2f      	ldr	r3, [pc, #188]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d112      	bne.n	800b352 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2202      	movs	r2, #2
 800b330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b334:	4b2b      	ldr	r3, [pc, #172]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	461a      	mov	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b33e:	4b29      	ldr	r3, [pc, #164]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7fe ffd0 	bl	800a2ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fa06 	bl	800b75c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b350:	e042      	b.n	800b3d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b352:	4b24      	ldr	r3, [pc, #144]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d02a      	beq.n	800b3b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	b2db      	uxtb	r3, r3
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7fe ffbe 	bl	800a2ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b36e:	4b1d      	ldr	r3, [pc, #116]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	461a      	mov	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b378:	4b1a      	ldr	r3, [pc, #104]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7fe ff97 	bl	800a2b2 <USBD_SetClassConfig>
 800b384:	4603      	mov	r3, r0
 800b386:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00f      	beq.n	800b3ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f918 	bl	800b5c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7fe ffa3 	bl	800a2ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3ac:	e014      	b.n	800b3d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f9d4 	bl	800b75c <USBD_CtlSendStatus>
      break;
 800b3b4:	e010      	b.n	800b3d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f9d0 	bl	800b75c <USBD_CtlSendStatus>
      break;
 800b3bc:	e00c      	b.n	800b3d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f900 	bl	800b5c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3c6:	4b07      	ldr	r3, [pc, #28]	; (800b3e4 <USBD_SetConfig+0x150>)
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7fe ff8c 	bl	800a2ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b3d6:	bf00      	nop
  }

  return ret;
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	240035a4 	.word	0x240035a4

0800b3e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	88db      	ldrh	r3, [r3, #6]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d004      	beq.n	800b404 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f8e2 	bl	800b5c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b402:	e023      	b.n	800b44c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	dc02      	bgt.n	800b416 <USBD_GetConfig+0x2e>
 800b410:	2b00      	cmp	r3, #0
 800b412:	dc03      	bgt.n	800b41c <USBD_GetConfig+0x34>
 800b414:	e015      	b.n	800b442 <USBD_GetConfig+0x5a>
 800b416:	2b03      	cmp	r3, #3
 800b418:	d00b      	beq.n	800b432 <USBD_GetConfig+0x4a>
 800b41a:	e012      	b.n	800b442 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3308      	adds	r3, #8
 800b426:	2201      	movs	r2, #1
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f93c 	bl	800b6a8 <USBD_CtlSendData>
        break;
 800b430:	e00c      	b.n	800b44c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3304      	adds	r3, #4
 800b436:	2201      	movs	r2, #1
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f934 	bl	800b6a8 <USBD_CtlSendData>
        break;
 800b440:	e004      	b.n	800b44c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f8be 	bl	800b5c6 <USBD_CtlError>
        break;
 800b44a:	bf00      	nop
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b464:	b2db      	uxtb	r3, r3
 800b466:	3b01      	subs	r3, #1
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d81e      	bhi.n	800b4aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	88db      	ldrh	r3, [r3, #6]
 800b470:	2b02      	cmp	r3, #2
 800b472:	d004      	beq.n	800b47e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b474:	6839      	ldr	r1, [r7, #0]
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f8a5 	bl	800b5c6 <USBD_CtlError>
        break;
 800b47c:	e01a      	b.n	800b4b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d005      	beq.n	800b49a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f043 0202 	orr.w	r2, r3, #2
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	330c      	adds	r3, #12
 800b49e:	2202      	movs	r2, #2
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f900 	bl	800b6a8 <USBD_CtlSendData>
      break;
 800b4a8:	e004      	b.n	800b4b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 f88a 	bl	800b5c6 <USBD_CtlError>
      break;
 800b4b2:	bf00      	nop
  }
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	885b      	ldrh	r3, [r3, #2]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d107      	bne.n	800b4de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f940 	bl	800b75c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b4dc:	e013      	b.n	800b506 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	885b      	ldrh	r3, [r3, #2]
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d10b      	bne.n	800b4fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	889b      	ldrh	r3, [r3, #4]
 800b4ea:	0a1b      	lsrs	r3, r3, #8
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f930 	bl	800b75c <USBD_CtlSendStatus>
}
 800b4fc:	e003      	b.n	800b506 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b4fe:	6839      	ldr	r1, [r7, #0]
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f860 	bl	800b5c6 <USBD_CtlError>
}
 800b506:	bf00      	nop
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b082      	sub	sp, #8
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	3b01      	subs	r3, #1
 800b522:	2b02      	cmp	r3, #2
 800b524:	d80b      	bhi.n	800b53e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	885b      	ldrh	r3, [r3, #2]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d10c      	bne.n	800b548 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f910 	bl	800b75c <USBD_CtlSendStatus>
      }
      break;
 800b53c:	e004      	b.n	800b548 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f840 	bl	800b5c6 <USBD_CtlError>
      break;
 800b546:	e000      	b.n	800b54a <USBD_ClrFeature+0x3c>
      break;
 800b548:	bf00      	nop
  }
}
 800b54a:	bf00      	nop
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b084      	sub	sp, #16
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	781a      	ldrb	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	3301      	adds	r3, #1
 800b56c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	781a      	ldrb	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3301      	adds	r3, #1
 800b57a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f7ff fa41 	bl	800aa04 <SWAPBYTE>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3301      	adds	r3, #1
 800b58e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	3301      	adds	r3, #1
 800b594:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7ff fa34 	bl	800aa04 <SWAPBYTE>
 800b59c:	4603      	mov	r3, r0
 800b59e:	461a      	mov	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f7ff fa27 	bl	800aa04 <SWAPBYTE>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	80da      	strh	r2, [r3, #6]
}
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b082      	sub	sp, #8
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5d0:	2180      	movs	r1, #128	; 0x80
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fd06 	bl	800bfe4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b5d8:	2100      	movs	r1, #0
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fd02 	bl	800bfe4 <USBD_LL_StallEP>
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d036      	beq.n	800b66c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b602:	6938      	ldr	r0, [r7, #16]
 800b604:	f000 f836 	bl	800b674 <USBD_GetLen>
 800b608:	4603      	mov	r3, r0
 800b60a:	3301      	adds	r3, #1
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	b29a      	uxth	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	4413      	add	r3, r2
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	7812      	ldrb	r2, [r2, #0]
 800b620:	701a      	strb	r2, [r3, #0]
  idx++;
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	3301      	adds	r3, #1
 800b626:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	4413      	add	r3, r2
 800b62e:	2203      	movs	r2, #3
 800b630:	701a      	strb	r2, [r3, #0]
  idx++;
 800b632:	7dfb      	ldrb	r3, [r7, #23]
 800b634:	3301      	adds	r3, #1
 800b636:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b638:	e013      	b.n	800b662 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b63a:	7dfb      	ldrb	r3, [r7, #23]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	4413      	add	r3, r2
 800b640:	693a      	ldr	r2, [r7, #16]
 800b642:	7812      	ldrb	r2, [r2, #0]
 800b644:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	3301      	adds	r3, #1
 800b64a:	613b      	str	r3, [r7, #16]
    idx++;
 800b64c:	7dfb      	ldrb	r3, [r7, #23]
 800b64e:	3301      	adds	r3, #1
 800b650:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b652:	7dfb      	ldrb	r3, [r7, #23]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	4413      	add	r3, r2
 800b658:	2200      	movs	r2, #0
 800b65a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	3301      	adds	r3, #1
 800b660:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1e7      	bne.n	800b63a <USBD_GetString+0x52>
 800b66a:	e000      	b.n	800b66e <USBD_GetString+0x86>
    return;
 800b66c:	bf00      	nop
  }
}
 800b66e:	3718      	adds	r7, #24
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b67c:	2300      	movs	r3, #0
 800b67e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b684:	e005      	b.n	800b692 <USBD_GetLen+0x1e>
  {
    len++;
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	3301      	adds	r3, #1
 800b68a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	3301      	adds	r3, #1
 800b690:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1f5      	bne.n	800b686 <USBD_GetLen+0x12>
  }

  return len;
 800b69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3714      	adds	r7, #20
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f000 fd11 	bl	800c0f6 <USBD_LL_Transmit>

  return USBD_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 fd00 	bl	800c0f6 <USBD_LL_Transmit>

  return USBD_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2203      	movs	r2, #3
 800b710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	68ba      	ldr	r2, [r7, #8]
 800b728:	2100      	movs	r1, #0
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 fd04 	bl	800c138 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b084      	sub	sp, #16
 800b73e:	af00      	add	r7, sp, #0
 800b740:	60f8      	str	r0, [r7, #12]
 800b742:	60b9      	str	r1, [r7, #8]
 800b744:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	2100      	movs	r1, #0
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f000 fcf3 	bl	800c138 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2204      	movs	r2, #4
 800b768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b76c:	2300      	movs	r3, #0
 800b76e:	2200      	movs	r2, #0
 800b770:	2100      	movs	r1, #0
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fcbf 	bl	800c0f6 <USBD_LL_Transmit>

  return USBD_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b082      	sub	sp, #8
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2205      	movs	r2, #5
 800b78e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b792:	2300      	movs	r3, #0
 800b794:	2200      	movs	r2, #0
 800b796:	2100      	movs	r1, #0
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fccd 	bl	800c138 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	4913      	ldr	r1, [pc, #76]	; (800b7fc <MX_USB_DEVICE_Init+0x54>)
 800b7b0:	4813      	ldr	r0, [pc, #76]	; (800b800 <MX_USB_DEVICE_Init+0x58>)
 800b7b2:	f7fe fd01 	bl	800a1b8 <USBD_Init>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b7bc:	f7f5 fe6a 	bl	8001494 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b7c0:	4910      	ldr	r1, [pc, #64]	; (800b804 <MX_USB_DEVICE_Init+0x5c>)
 800b7c2:	480f      	ldr	r0, [pc, #60]	; (800b800 <MX_USB_DEVICE_Init+0x58>)
 800b7c4:	f7fe fd28 	bl	800a218 <USBD_RegisterClass>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b7ce:	f7f5 fe61 	bl	8001494 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b7d2:	490d      	ldr	r1, [pc, #52]	; (800b808 <MX_USB_DEVICE_Init+0x60>)
 800b7d4:	480a      	ldr	r0, [pc, #40]	; (800b800 <MX_USB_DEVICE_Init+0x58>)
 800b7d6:	f7fe fc1f 	bl	800a018 <USBD_CDC_RegisterInterface>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b7e0:	f7f5 fe58 	bl	8001494 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b7e4:	4806      	ldr	r0, [pc, #24]	; (800b800 <MX_USB_DEVICE_Init+0x58>)
 800b7e6:	f7fe fd4d 	bl	800a284 <USBD_Start>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b7f0:	f7f5 fe50 	bl	8001494 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800b7f4:	f7f8 fe7a 	bl	80044ec <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b7f8:	bf00      	nop
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	240032b8 	.word	0x240032b8
 800b800:	240035a8 	.word	0x240035a8
 800b804:	24003224 	.word	0x24003224
 800b808:	240032a4 	.word	0x240032a4

0800b80c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b810:	2200      	movs	r2, #0
 800b812:	4905      	ldr	r1, [pc, #20]	; (800b828 <CDC_Init_FS+0x1c>)
 800b814:	4805      	ldr	r0, [pc, #20]	; (800b82c <CDC_Init_FS+0x20>)
 800b816:	f7fe fc19 	bl	800a04c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b81a:	4905      	ldr	r1, [pc, #20]	; (800b830 <CDC_Init_FS+0x24>)
 800b81c:	4803      	ldr	r0, [pc, #12]	; (800b82c <CDC_Init_FS+0x20>)
 800b81e:	f7fe fc37 	bl	800a090 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b822:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b824:	4618      	mov	r0, r3
 800b826:	bd80      	pop	{r7, pc}
 800b828:	24004084 	.word	0x24004084
 800b82c:	240035a8 	.word	0x240035a8
 800b830:	24003884 	.word	0x24003884

0800b834 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b834:	b480      	push	{r7}
 800b836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b838:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	6039      	str	r1, [r7, #0]
 800b84e:	71fb      	strb	r3, [r7, #7]
 800b850:	4613      	mov	r3, r2
 800b852:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	2b23      	cmp	r3, #35	; 0x23
 800b858:	d84a      	bhi.n	800b8f0 <CDC_Control_FS+0xac>
 800b85a:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <CDC_Control_FS+0x1c>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b8f1 	.word	0x0800b8f1
 800b864:	0800b8f1 	.word	0x0800b8f1
 800b868:	0800b8f1 	.word	0x0800b8f1
 800b86c:	0800b8f1 	.word	0x0800b8f1
 800b870:	0800b8f1 	.word	0x0800b8f1
 800b874:	0800b8f1 	.word	0x0800b8f1
 800b878:	0800b8f1 	.word	0x0800b8f1
 800b87c:	0800b8f1 	.word	0x0800b8f1
 800b880:	0800b8f1 	.word	0x0800b8f1
 800b884:	0800b8f1 	.word	0x0800b8f1
 800b888:	0800b8f1 	.word	0x0800b8f1
 800b88c:	0800b8f1 	.word	0x0800b8f1
 800b890:	0800b8f1 	.word	0x0800b8f1
 800b894:	0800b8f1 	.word	0x0800b8f1
 800b898:	0800b8f1 	.word	0x0800b8f1
 800b89c:	0800b8f1 	.word	0x0800b8f1
 800b8a0:	0800b8f1 	.word	0x0800b8f1
 800b8a4:	0800b8f1 	.word	0x0800b8f1
 800b8a8:	0800b8f1 	.word	0x0800b8f1
 800b8ac:	0800b8f1 	.word	0x0800b8f1
 800b8b0:	0800b8f1 	.word	0x0800b8f1
 800b8b4:	0800b8f1 	.word	0x0800b8f1
 800b8b8:	0800b8f1 	.word	0x0800b8f1
 800b8bc:	0800b8f1 	.word	0x0800b8f1
 800b8c0:	0800b8f1 	.word	0x0800b8f1
 800b8c4:	0800b8f1 	.word	0x0800b8f1
 800b8c8:	0800b8f1 	.word	0x0800b8f1
 800b8cc:	0800b8f1 	.word	0x0800b8f1
 800b8d0:	0800b8f1 	.word	0x0800b8f1
 800b8d4:	0800b8f1 	.word	0x0800b8f1
 800b8d8:	0800b8f1 	.word	0x0800b8f1
 800b8dc:	0800b8f1 	.word	0x0800b8f1
 800b8e0:	0800b8f1 	.word	0x0800b8f1
 800b8e4:	0800b8f1 	.word	0x0800b8f1
 800b8e8:	0800b8f1 	.word	0x0800b8f1
 800b8ec:	0800b8f1 	.word	0x0800b8f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b8f0:	bf00      	nop
  }

  return (USBD_OK);
 800b8f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b90a:	6879      	ldr	r1, [r7, #4]
 800b90c:	4805      	ldr	r0, [pc, #20]	; (800b924 <CDC_Receive_FS+0x24>)
 800b90e:	f7fe fbbf 	bl	800a090 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b912:	4804      	ldr	r0, [pc, #16]	; (800b924 <CDC_Receive_FS+0x24>)
 800b914:	f7fe fc1a 	bl	800a14c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b918:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	240035a8 	.word	0x240035a8

0800b928 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b938:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <CDC_Transmit_FS+0x48>)
 800b93a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b93e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e00b      	b.n	800b966 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b94e:	887b      	ldrh	r3, [r7, #2]
 800b950:	461a      	mov	r2, r3
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	4806      	ldr	r0, [pc, #24]	; (800b970 <CDC_Transmit_FS+0x48>)
 800b956:	f7fe fb79 	bl	800a04c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b95a:	4805      	ldr	r0, [pc, #20]	; (800b970 <CDC_Transmit_FS+0x48>)
 800b95c:	f7fe fbb6 	bl	800a0cc <USBD_CDC_TransmitPacket>
 800b960:	4603      	mov	r3, r0
 800b962:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b964:	7bfb      	ldrb	r3, [r7, #15]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	240035a8 	.word	0x240035a8

0800b974 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b974:	b480      	push	{r7}
 800b976:	b087      	sub	sp, #28
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4613      	mov	r3, r2
 800b980:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	371c      	adds	r7, #28
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
	...

0800b998 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	6039      	str	r1, [r7, #0]
 800b9a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2212      	movs	r2, #18
 800b9a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b9aa:	4b03      	ldr	r3, [pc, #12]	; (800b9b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr
 800b9b8:	240032d4 	.word	0x240032d4

0800b9bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	6039      	str	r1, [r7, #0]
 800b9c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2204      	movs	r2, #4
 800b9cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b9ce:	4b03      	ldr	r3, [pc, #12]	; (800b9dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	240032e8 	.word	0x240032e8

0800b9e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	6039      	str	r1, [r7, #0]
 800b9ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d105      	bne.n	800b9fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	4907      	ldr	r1, [pc, #28]	; (800ba14 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9f6:	4808      	ldr	r0, [pc, #32]	; (800ba18 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9f8:	f7ff fdf6 	bl	800b5e8 <USBD_GetString>
 800b9fc:	e004      	b.n	800ba08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	4904      	ldr	r1, [pc, #16]	; (800ba14 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba02:	4805      	ldr	r0, [pc, #20]	; (800ba18 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba04:	f7ff fdf0 	bl	800b5e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba08:	4b02      	ldr	r3, [pc, #8]	; (800ba14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	24004884 	.word	0x24004884
 800ba18:	0800d6a0 	.word	0x0800d6a0

0800ba1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	4603      	mov	r3, r0
 800ba24:	6039      	str	r1, [r7, #0]
 800ba26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	4904      	ldr	r1, [pc, #16]	; (800ba3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba2c:	4804      	ldr	r0, [pc, #16]	; (800ba40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba2e:	f7ff fddb 	bl	800b5e8 <USBD_GetString>
  return USBD_StrDesc;
 800ba32:	4b02      	ldr	r3, [pc, #8]	; (800ba3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	24004884 	.word	0x24004884
 800ba40:	0800d6b8 	.word	0x0800d6b8

0800ba44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	6039      	str	r1, [r7, #0]
 800ba4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	221a      	movs	r2, #26
 800ba54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba56:	f000 f843 	bl	800bae0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba5a:	4b02      	ldr	r3, [pc, #8]	; (800ba64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	240032ec 	.word	0x240032ec

0800ba68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	6039      	str	r1, [r7, #0]
 800ba72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d105      	bne.n	800ba86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	4907      	ldr	r1, [pc, #28]	; (800ba9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba7e:	4808      	ldr	r0, [pc, #32]	; (800baa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba80:	f7ff fdb2 	bl	800b5e8 <USBD_GetString>
 800ba84:	e004      	b.n	800ba90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	4904      	ldr	r1, [pc, #16]	; (800ba9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba8a:	4805      	ldr	r0, [pc, #20]	; (800baa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba8c:	f7ff fdac 	bl	800b5e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba90:	4b02      	ldr	r3, [pc, #8]	; (800ba9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	24004884 	.word	0x24004884
 800baa0:	0800d6cc 	.word	0x0800d6cc

0800baa4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bab0:	79fb      	ldrb	r3, [r7, #7]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d105      	bne.n	800bac2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	4907      	ldr	r1, [pc, #28]	; (800bad8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800baba:	4808      	ldr	r0, [pc, #32]	; (800badc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800babc:	f7ff fd94 	bl	800b5e8 <USBD_GetString>
 800bac0:	e004      	b.n	800bacc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	4904      	ldr	r1, [pc, #16]	; (800bad8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bac6:	4805      	ldr	r0, [pc, #20]	; (800badc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bac8:	f7ff fd8e 	bl	800b5e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bacc:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	24004884 	.word	0x24004884
 800badc:	0800d6d8 	.word	0x0800d6d8

0800bae0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bae6:	4b0f      	ldr	r3, [pc, #60]	; (800bb24 <Get_SerialNum+0x44>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800baec:	4b0e      	ldr	r3, [pc, #56]	; (800bb28 <Get_SerialNum+0x48>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800baf2:	4b0e      	ldr	r3, [pc, #56]	; (800bb2c <Get_SerialNum+0x4c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4413      	add	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb06:	2208      	movs	r2, #8
 800bb08:	4909      	ldr	r1, [pc, #36]	; (800bb30 <Get_SerialNum+0x50>)
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f000 f814 	bl	800bb38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb10:	2204      	movs	r2, #4
 800bb12:	4908      	ldr	r1, [pc, #32]	; (800bb34 <Get_SerialNum+0x54>)
 800bb14:	68b8      	ldr	r0, [r7, #8]
 800bb16:	f000 f80f 	bl	800bb38 <IntToUnicode>
  }
}
 800bb1a:	bf00      	nop
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	1ff1e800 	.word	0x1ff1e800
 800bb28:	1ff1e804 	.word	0x1ff1e804
 800bb2c:	1ff1e808 	.word	0x1ff1e808
 800bb30:	240032ee 	.word	0x240032ee
 800bb34:	240032fe 	.word	0x240032fe

0800bb38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	4613      	mov	r3, r2
 800bb44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	75fb      	strb	r3, [r7, #23]
 800bb4e:	e027      	b.n	800bba0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	0f1b      	lsrs	r3, r3, #28
 800bb54:	2b09      	cmp	r3, #9
 800bb56:	d80b      	bhi.n	800bb70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	0f1b      	lsrs	r3, r3, #28
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	4619      	mov	r1, r3
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	440b      	add	r3, r1
 800bb68:	3230      	adds	r2, #48	; 0x30
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	701a      	strb	r2, [r3, #0]
 800bb6e:	e00a      	b.n	800bb86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	0f1b      	lsrs	r3, r3, #28
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	440b      	add	r3, r1
 800bb80:	3237      	adds	r2, #55	; 0x37
 800bb82:	b2d2      	uxtb	r2, r2
 800bb84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	011b      	lsls	r3, r3, #4
 800bb8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
 800bb8e:	005b      	lsls	r3, r3, #1
 800bb90:	3301      	adds	r3, #1
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	4413      	add	r3, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb9a:	7dfb      	ldrb	r3, [r7, #23]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	75fb      	strb	r3, [r7, #23]
 800bba0:	7dfa      	ldrb	r2, [r7, #23]
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d3d3      	bcc.n	800bb50 <IntToUnicode+0x18>
  }
}
 800bba8:	bf00      	nop
 800bbaa:	bf00      	nop
 800bbac:	371c      	adds	r7, #28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
	...

0800bbb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b0ba      	sub	sp, #232	; 0xe8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	601a      	str	r2, [r3, #0]
 800bbc8:	605a      	str	r2, [r3, #4]
 800bbca:	609a      	str	r2, [r3, #8]
 800bbcc:	60da      	str	r2, [r3, #12]
 800bbce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bbd0:	f107 0310 	add.w	r3, r7, #16
 800bbd4:	22c0      	movs	r2, #192	; 0xc0
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 fef7 	bl	800c9cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a2c      	ldr	r2, [pc, #176]	; (800bc94 <HAL_PCD_MspInit+0xdc>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d151      	bne.n	800bc8c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bbe8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bbec:	f04f 0300 	mov.w	r3, #0
 800bbf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bbf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bbf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bbfc:	f107 0310 	add.w	r3, r7, #16
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7f9 fc53 	bl	80054ac <HAL_RCCEx_PeriphCLKConfig>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800bc0c:	f7f5 fc42 	bl	8001494 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bc10:	f7f8 fc6c 	bl	80044ec <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc14:	4b20      	ldr	r3, [pc, #128]	; (800bc98 <HAL_PCD_MspInit+0xe0>)
 800bc16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc1a:	4a1f      	ldr	r2, [pc, #124]	; (800bc98 <HAL_PCD_MspInit+0xe0>)
 800bc1c:	f043 0301 	orr.w	r3, r3, #1
 800bc20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bc24:	4b1c      	ldr	r3, [pc, #112]	; (800bc98 <HAL_PCD_MspInit+0xe0>)
 800bc26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	60fb      	str	r3, [r7, #12]
 800bc30:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800bc32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc40:	2300      	movs	r3, #0
 800bc42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc46:	2300      	movs	r3, #0
 800bc48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bc4c:	230a      	movs	r3, #10
 800bc4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bc56:	4619      	mov	r1, r3
 800bc58:	4810      	ldr	r0, [pc, #64]	; (800bc9c <HAL_PCD_MspInit+0xe4>)
 800bc5a:	f7f6 ff8b 	bl	8002b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc5e:	4b0e      	ldr	r3, [pc, #56]	; (800bc98 <HAL_PCD_MspInit+0xe0>)
 800bc60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bc64:	4a0c      	ldr	r2, [pc, #48]	; (800bc98 <HAL_PCD_MspInit+0xe0>)
 800bc66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bc6e:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <HAL_PCD_MspInit+0xe0>)
 800bc70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bc74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc78:	60bb      	str	r3, [r7, #8]
 800bc7a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2100      	movs	r1, #0
 800bc80:	2065      	movs	r0, #101	; 0x65
 800bc82:	f7f6 ff42 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc86:	2065      	movs	r0, #101	; 0x65
 800bc88:	f7f6 ff59 	bl	8002b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc8c:	bf00      	nop
 800bc8e:	37e8      	adds	r7, #232	; 0xe8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	40080000 	.word	0x40080000
 800bc98:	58024400 	.word	0x58024400
 800bc9c:	58020000 	.word	0x58020000

0800bca0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f7fe fb31 	bl	800a31e <USBD_LL_SetupStage>
}
 800bcbc:	bf00      	nop
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bcd6:	78fa      	ldrb	r2, [r7, #3]
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	00db      	lsls	r3, r3, #3
 800bcde:	4413      	add	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	440b      	add	r3, r1
 800bce4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	78fb      	ldrb	r3, [r7, #3]
 800bcec:	4619      	mov	r1, r3
 800bcee:	f7fe fb6b 	bl	800a3c8 <USBD_LL_DataOutStage>
}
 800bcf2:	bf00      	nop
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b082      	sub	sp, #8
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bd0c:	78fa      	ldrb	r2, [r7, #3]
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	4613      	mov	r3, r2
 800bd12:	00db      	lsls	r3, r3, #3
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	440b      	add	r3, r1
 800bd1a:	3348      	adds	r3, #72	; 0x48
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	78fb      	ldrb	r3, [r7, #3]
 800bd20:	4619      	mov	r1, r3
 800bd22:	f7fe fc04 	bl	800a52e <USBD_LL_DataInStage>
}
 800bd26:	bf00      	nop
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b082      	sub	sp, #8
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7fe fd3e 	bl	800a7be <USBD_LL_SOF>
}
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd52:	2301      	movs	r3, #1
 800bd54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	73fb      	strb	r3, [r7, #15]
 800bd62:	e008      	b.n	800bd76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	d102      	bne.n	800bd72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	73fb      	strb	r3, [r7, #15]
 800bd70:	e001      	b.n	800bd76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bd72:	f7f5 fb8f 	bl	8001494 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd7c:	7bfa      	ldrb	r2, [r7, #15]
 800bd7e:	4611      	mov	r1, r2
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fe fcd8 	bl	800a736 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe fc80 	bl	800a692 <USBD_LL_Reset>
}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe fcd3 	bl	800a756 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	6812      	ldr	r2, [r2, #0]
 800bdbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bdc2:	f043 0301 	orr.w	r3, r3, #1
 800bdc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a1b      	ldr	r3, [r3, #32]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d005      	beq.n	800bddc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdd0:	4b04      	ldr	r3, [pc, #16]	; (800bde4 <HAL_PCD_SuspendCallback+0x48>)
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	4a03      	ldr	r2, [pc, #12]	; (800bde4 <HAL_PCD_SuspendCallback+0x48>)
 800bdd6:	f043 0306 	orr.w	r3, r3, #6
 800bdda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	e000ed00 	.word	0xe000ed00

0800bde8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe fcc9 	bl	800a78e <USBD_LL_Resume>
}
 800bdfc:	bf00      	nop
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be16:	78fa      	ldrb	r2, [r7, #3]
 800be18:	4611      	mov	r1, r2
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe fd21 	bl	800a862 <USBD_LL_IsoOUTIncomplete>
}
 800be20:	bf00      	nop
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be3a:	78fa      	ldrb	r2, [r7, #3]
 800be3c:	4611      	mov	r1, r2
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fe fcdd 	bl	800a7fe <USBD_LL_IsoINIncomplete>
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fe fd33 	bl	800a8c6 <USBD_LL_DevConnected>
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe fd30 	bl	800a8dc <USBD_LL_DevDisconnected>
}
 800be7c:	bf00      	nop
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d13e      	bne.n	800bf12 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be94:	4a21      	ldr	r2, [pc, #132]	; (800bf1c <USBD_LL_Init+0x98>)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a1f      	ldr	r2, [pc, #124]	; (800bf1c <USBD_LL_Init+0x98>)
 800bea0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bea4:	4b1d      	ldr	r3, [pc, #116]	; (800bf1c <USBD_LL_Init+0x98>)
 800bea6:	4a1e      	ldr	r2, [pc, #120]	; (800bf20 <USBD_LL_Init+0x9c>)
 800bea8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800beaa:	4b1c      	ldr	r3, [pc, #112]	; (800bf1c <USBD_LL_Init+0x98>)
 800beac:	2209      	movs	r2, #9
 800beae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800beb0:	4b1a      	ldr	r3, [pc, #104]	; (800bf1c <USBD_LL_Init+0x98>)
 800beb2:	2202      	movs	r2, #2
 800beb4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800beb6:	4b19      	ldr	r3, [pc, #100]	; (800bf1c <USBD_LL_Init+0x98>)
 800beb8:	2200      	movs	r2, #0
 800beba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bebc:	4b17      	ldr	r3, [pc, #92]	; (800bf1c <USBD_LL_Init+0x98>)
 800bebe:	2202      	movs	r2, #2
 800bec0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bec2:	4b16      	ldr	r3, [pc, #88]	; (800bf1c <USBD_LL_Init+0x98>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bec8:	4b14      	ldr	r3, [pc, #80]	; (800bf1c <USBD_LL_Init+0x98>)
 800beca:	2200      	movs	r2, #0
 800becc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bece:	4b13      	ldr	r3, [pc, #76]	; (800bf1c <USBD_LL_Init+0x98>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bed4:	4b11      	ldr	r3, [pc, #68]	; (800bf1c <USBD_LL_Init+0x98>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800beda:	4b10      	ldr	r3, [pc, #64]	; (800bf1c <USBD_LL_Init+0x98>)
 800bedc:	2200      	movs	r2, #0
 800bede:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bee0:	4b0e      	ldr	r3, [pc, #56]	; (800bf1c <USBD_LL_Init+0x98>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bee6:	480d      	ldr	r0, [pc, #52]	; (800bf1c <USBD_LL_Init+0x98>)
 800bee8:	f7f7 f80d 	bl	8002f06 <HAL_PCD_Init>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800bef2:	f7f5 facf 	bl	8001494 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bef6:	2180      	movs	r1, #128	; 0x80
 800bef8:	4808      	ldr	r0, [pc, #32]	; (800bf1c <USBD_LL_Init+0x98>)
 800befa:	f7f8 fa7c 	bl	80043f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800befe:	2240      	movs	r2, #64	; 0x40
 800bf00:	2100      	movs	r1, #0
 800bf02:	4806      	ldr	r0, [pc, #24]	; (800bf1c <USBD_LL_Init+0x98>)
 800bf04:	f7f8 fa30 	bl	8004368 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bf08:	2280      	movs	r2, #128	; 0x80
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	4803      	ldr	r0, [pc, #12]	; (800bf1c <USBD_LL_Init+0x98>)
 800bf0e:	f7f8 fa2b 	bl	8004368 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	24004a84 	.word	0x24004a84
 800bf20:	40080000 	.word	0x40080000

0800bf24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7f7 f907 	bl	800314e <HAL_PCD_Start>
 800bf40:	4603      	mov	r3, r0
 800bf42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 f942 	bl	800c1d0 <USBD_Get_USB_Status>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	4608      	mov	r0, r1
 800bf64:	4611      	mov	r1, r2
 800bf66:	461a      	mov	r2, r3
 800bf68:	4603      	mov	r3, r0
 800bf6a:	70fb      	strb	r3, [r7, #3]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	70bb      	strb	r3, [r7, #2]
 800bf70:	4613      	mov	r3, r2
 800bf72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf82:	78bb      	ldrb	r3, [r7, #2]
 800bf84:	883a      	ldrh	r2, [r7, #0]
 800bf86:	78f9      	ldrb	r1, [r7, #3]
 800bf88:	f7f7 fe07 	bl	8003b9a <HAL_PCD_EP_Open>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 f91c 	bl	800c1d0 <USBD_Get_USB_Status>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfc0:	78fa      	ldrb	r2, [r7, #3]
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7f7 fe50 	bl	8003c6a <HAL_PCD_EP_Close>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f000 f8fd 	bl	800c1d0 <USBD_Get_USB_Status>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bffe:	78fa      	ldrb	r2, [r7, #3]
 800c000:	4611      	mov	r1, r2
 800c002:	4618      	mov	r0, r3
 800c004:	f7f7 ff0a 	bl	8003e1c <HAL_PCD_EP_SetStall>
 800c008:	4603      	mov	r3, r0
 800c00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c00c:	7bfb      	ldrb	r3, [r7, #15]
 800c00e:	4618      	mov	r0, r3
 800c010:	f000 f8de 	bl	800c1d0 <USBD_Get_USB_Status>
 800c014:	4603      	mov	r3, r0
 800c016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c018:	7bbb      	ldrb	r3, [r7, #14]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b084      	sub	sp, #16
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	460b      	mov	r3, r1
 800c02c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c03c:	78fa      	ldrb	r2, [r7, #3]
 800c03e:	4611      	mov	r1, r2
 800c040:	4618      	mov	r0, r3
 800c042:	f7f7 ff4f 	bl	8003ee4 <HAL_PCD_EP_ClrStall>
 800c046:	4603      	mov	r3, r0
 800c048:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f000 f8bf 	bl	800c1d0 <USBD_Get_USB_Status>
 800c052:	4603      	mov	r3, r0
 800c054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c056:	7bbb      	ldrb	r3, [r7, #14]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c072:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	da0b      	bge.n	800c094 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c07c:	78fb      	ldrb	r3, [r7, #3]
 800c07e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c082:	68f9      	ldr	r1, [r7, #12]
 800c084:	4613      	mov	r3, r2
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	4413      	add	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	440b      	add	r3, r1
 800c08e:	333e      	adds	r3, #62	; 0x3e
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	e00b      	b.n	800c0ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c094:	78fb      	ldrb	r3, [r7, #3]
 800c096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c09a:	68f9      	ldr	r1, [r7, #12]
 800c09c:	4613      	mov	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	440b      	add	r3, r1
 800c0a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c0aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0d2:	78fa      	ldrb	r2, [r7, #3]
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7f7 fd3a 	bl	8003b50 <HAL_PCD_SetAddress>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 f874 	bl	800c1d0 <USBD_Get_USB_Status>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b086      	sub	sp, #24
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	607a      	str	r2, [r7, #4]
 800c100:	603b      	str	r3, [r7, #0]
 800c102:	460b      	mov	r3, r1
 800c104:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c114:	7af9      	ldrb	r1, [r7, #11]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	f7f7 fe44 	bl	8003da6 <HAL_PCD_EP_Transmit>
 800c11e:	4603      	mov	r3, r0
 800c120:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c122:	7dfb      	ldrb	r3, [r7, #23]
 800c124:	4618      	mov	r0, r3
 800c126:	f000 f853 	bl	800c1d0 <USBD_Get_USB_Status>
 800c12a:	4603      	mov	r3, r0
 800c12c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c12e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3718      	adds	r7, #24
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	607a      	str	r2, [r7, #4]
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	460b      	mov	r3, r1
 800c146:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c148:	2300      	movs	r3, #0
 800c14a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c156:	7af9      	ldrb	r1, [r7, #11]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	f7f7 fdcf 	bl	8003cfe <HAL_PCD_EP_Receive>
 800c160:	4603      	mov	r3, r0
 800c162:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c164:	7dfb      	ldrb	r3, [r7, #23]
 800c166:	4618      	mov	r0, r3
 800c168:	f000 f832 	bl	800c1d0 <USBD_Get_USB_Status>
 800c16c:	4603      	mov	r3, r0
 800c16e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c170:	7dbb      	ldrb	r3, [r7, #22]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3718      	adds	r7, #24
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b082      	sub	sp, #8
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	460b      	mov	r3, r1
 800c184:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c18c:	78fa      	ldrb	r2, [r7, #3]
 800c18e:	4611      	mov	r1, r2
 800c190:	4618      	mov	r0, r3
 800c192:	f7f7 fdf0 	bl	8003d76 <HAL_PCD_EP_GetRxCount>
 800c196:	4603      	mov	r3, r0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1a8:	4b03      	ldr	r3, [pc, #12]	; (800c1b8 <USBD_static_malloc+0x18>)
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	24004f90 	.word	0x24004f90

0800c1bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	2b03      	cmp	r3, #3
 800c1e2:	d817      	bhi.n	800c214 <USBD_Get_USB_Status+0x44>
 800c1e4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <USBD_Get_USB_Status+0x1c>)
 800c1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ea:	bf00      	nop
 800c1ec:	0800c1fd 	.word	0x0800c1fd
 800c1f0:	0800c203 	.word	0x0800c203
 800c1f4:	0800c209 	.word	0x0800c209
 800c1f8:	0800c20f 	.word	0x0800c20f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c200:	e00b      	b.n	800c21a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c202:	2303      	movs	r3, #3
 800c204:	73fb      	strb	r3, [r7, #15]
    break;
 800c206:	e008      	b.n	800c21a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c208:	2301      	movs	r3, #1
 800c20a:	73fb      	strb	r3, [r7, #15]
    break;
 800c20c:	e005      	b.n	800c21a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c20e:	2303      	movs	r3, #3
 800c210:	73fb      	strb	r3, [r7, #15]
    break;
 800c212:	e002      	b.n	800c21a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c214:	2303      	movs	r3, #3
 800c216:	73fb      	strb	r3, [r7, #15]
    break;
 800c218:	bf00      	nop
  }
  return usb_status;
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <neai_classification_init>:
 800c228:	4b75      	ldr	r3, [pc, #468]	; (800c400 <neai_classification_init+0x1d8>)
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	2ba5      	cmp	r3, #165	; 0xa5
 800c22e:	f040 80e2 	bne.w	800c3f6 <neai_classification_init+0x1ce>
 800c232:	4603      	mov	r3, r0
 800c234:	4a73      	ldr	r2, [pc, #460]	; (800c404 <neai_classification_init+0x1dc>)
 800c236:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 800c430 <neai_classification_init+0x208>
 800c23a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c23e:	ecf3 7a01 	vldmia	r3!, {s15}
 800c242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c246:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c248:	ee17 1a90 	vmov	r1, s15
 800c24c:	6013      	str	r3, [r2, #0]
 800c24e:	4f6e      	ldr	r7, [pc, #440]	; (800c408 <neai_classification_init+0x1e0>)
 800c250:	f100 0608 	add.w	r6, r0, #8
 800c254:	1c8a      	adds	r2, r1, #2
 800c256:	1c4d      	adds	r5, r1, #1
 800c258:	edc7 7a00 	vstr	s15, [r7]
 800c25c:	1ccb      	adds	r3, r1, #3
 800c25e:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 800c262:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 800c434 <neai_classification_init+0x20c>
 800c266:	2400      	movs	r4, #0
 800c268:	edd7 7a00 	vldr	s15, [r7]
 800c26c:	1d39      	adds	r1, r7, #4
 800c26e:	f8cc 7000 	str.w	r7, [ip]
 800c272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c276:	f8ce 1000 	str.w	r1, [lr]
 800c27a:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 800c438 <neai_classification_init+0x210>
 800c27e:	ee17 2a90 	vmov	r2, s15
 800c282:	edcc 7a00 	vstr	s15, [ip]
 800c286:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 800c43c <neai_classification_init+0x214>
 800c28a:	fb02 f705 	mul.w	r7, r2, r5
 800c28e:	1c51      	adds	r1, r2, #1
 800c290:	edcc 7a00 	vstr	s15, [ip]
 800c294:	443b      	add	r3, r7
 800c296:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c29a:	4a5c      	ldr	r2, [pc, #368]	; (800c40c <neai_classification_init+0x1e4>)
 800c29c:	4419      	add	r1, r3
 800c29e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c2a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c2a6:	495a      	ldr	r1, [pc, #360]	; (800c410 <neai_classification_init+0x1e8>)
 800c2a8:	edd0 7a00 	vldr	s15, [r0]
 800c2ac:	600b      	str	r3, [r1, #0]
 800c2ae:	eef4 7a47 	vcmp.f32	s15, s14
 800c2b2:	4b58      	ldr	r3, [pc, #352]	; (800c414 <neai_classification_init+0x1ec>)
 800c2b4:	6010      	str	r0, [r2, #0]
 800c2b6:	601d      	str	r5, [r3, #0]
 800c2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2bc:	4a56      	ldr	r2, [pc, #344]	; (800c418 <neai_classification_init+0x1f0>)
 800c2be:	4957      	ldr	r1, [pc, #348]	; (800c41c <neai_classification_init+0x1f4>)
 800c2c0:	4b57      	ldr	r3, [pc, #348]	; (800c420 <neai_classification_init+0x1f8>)
 800c2c2:	6057      	str	r7, [r2, #4]
 800c2c4:	600e      	str	r6, [r1, #0]
 800c2c6:	6014      	str	r4, [r2, #0]
 800c2c8:	601c      	str	r4, [r3, #0]
 800c2ca:	f040 8090 	bne.w	800c3ee <neai_classification_init+0x1c6>
 800c2ce:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 800c2d2:	ed90 7a01 	vldr	s14, [r0, #4]
 800c2d6:	eeb4 7a67 	vcmp.f32	s14, s15
 800c2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2de:	f040 8086 	bne.w	800c3ee <neai_classification_init+0x1c6>
 800c2e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c2e6:	ed90 7a02 	vldr	s14, [r0, #8]
 800c2ea:	eeb4 7a67 	vcmp.f32	s14, s15
 800c2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f2:	d17c      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c2f4:	ed90 7a03 	vldr	s14, [r0, #12]
 800c2f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c300:	d175      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c302:	ed90 7a04 	vldr	s14, [r0, #16]
 800c306:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30e:	d16e      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c310:	ed90 7a05 	vldr	s14, [r0, #20]
 800c314:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31c:	d167      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c31e:	ed90 7a06 	vldr	s14, [r0, #24]
 800c322:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c32a:	d160      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c32c:	ed90 7a07 	vldr	s14, [r0, #28]
 800c330:	eeb4 7a67 	vcmp.f32	s14, s15
 800c334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c338:	d159      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c33a:	ed90 7a08 	vldr	s14, [r0, #32]
 800c33e:	eeb4 7a67 	vcmp.f32	s14, s15
 800c342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c346:	d152      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c348:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c34c:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800c350:	eeb4 7a67 	vcmp.f32	s14, s15
 800c354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c358:	d149      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c35a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c424 <neai_classification_init+0x1fc>
 800c35e:	edd0 6a0a 	vldr	s13, [r0, #40]	; 0x28
 800c362:	eef4 6a47 	vcmp.f32	s13, s14
 800c366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c36a:	d140      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c36c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800c370:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 800c374:	eef4 6a47 	vcmp.f32	s13, s14
 800c378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37c:	d137      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c37e:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800c382:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c38a:	d130      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c38c:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800c390:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c398:	d129      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c39a:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800c39e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3a6:	d122      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c3a8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c428 <neai_classification_init+0x200>
 800c3ac:	edd0 6a0f 	vldr	s13, [r0, #60]	; 0x3c
 800c3b0:	eef4 6a47 	vcmp.f32	s13, s14
 800c3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b8:	d119      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c3ba:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 800c3be:	eeb4 7a67 	vcmp.f32	s14, s15
 800c3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c6:	d112      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c3c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c3cc:	ed90 7a11 	vldr	s14, [r0, #68]	; 0x44
 800c3d0:	eeb4 7a67 	vcmp.f32	s14, s15
 800c3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d8:	d109      	bne.n	800c3ee <neai_classification_init+0x1c6>
 800c3da:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
 800c3de:	eeb4 7a67 	vcmp.f32	s14, s15
 800c3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e6:	bf0c      	ite	eq
 800c3e8:	2000      	moveq	r0, #0
 800c3ea:	207d      	movne	r0, #125	; 0x7d
 800c3ec:	e000      	b.n	800c3f0 <neai_classification_init+0x1c8>
 800c3ee:	207d      	movs	r0, #125	; 0x7d
 800c3f0:	4b0e      	ldr	r3, [pc, #56]	; (800c42c <neai_classification_init+0x204>)
 800c3f2:	7018      	strb	r0, [r3, #0]
 800c3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f6:	4b0d      	ldr	r3, [pc, #52]	; (800c42c <neai_classification_init+0x204>)
 800c3f8:	207c      	movs	r0, #124	; 0x7c
 800c3fa:	7018      	strb	r0, [r3, #0]
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	1ff1e8a0 	.word	0x1ff1e8a0
 800c404:	2400520c 	.word	0x2400520c
 800c408:	240051dc 	.word	0x240051dc
 800c40c:	24005204 	.word	0x24005204
 800c410:	240051f8 	.word	0x240051f8
 800c414:	240051c8 	.word	0x240051c8
 800c418:	240051d0 	.word	0x240051d0
 800c41c:	240051fc 	.word	0x240051fc
 800c420:	240051c4 	.word	0x240051c4
 800c424:	42aa0000 	.word	0x42aa0000
 800c428:	49742400 	.word	0x49742400
 800c42c:	24003306 	.word	0x24003306
 800c430:	240051f4 	.word	0x240051f4
 800c434:	24005200 	.word	0x24005200
 800c438:	240051c0 	.word	0x240051c0
 800c43c:	240051cc 	.word	0x240051cc

0800c440 <neai_classification>:
 800c440:	4b07      	ldr	r3, [pc, #28]	; (800c460 <neai_classification+0x20>)
 800c442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c446:	ed2d 8b04 	vpush	{d8-d9}
 800c44a:	b087      	sub	sp, #28
 800c44c:	781f      	ldrb	r7, [r3, #0]
 800c44e:	9200      	str	r2, [sp, #0]
 800c450:	b157      	cbz	r7, 800c468 <neai_classification+0x28>
 800c452:	4638      	mov	r0, r7
 800c454:	b007      	add	sp, #28
 800c456:	ecbd 8b04 	vpop	{d8-d9}
 800c45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45e:	bf00      	nop
 800c460:	24003306 	.word	0x24003306
 800c464:	00000000 	.word	0x00000000
 800c468:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 800c464 <neai_classification+0x24>
 800c46c:	460c      	mov	r4, r1
 800c46e:	4de2      	ldr	r5, [pc, #904]	; (800c7f8 <neai_classification+0x3b8>)
 800c470:	eeb0 0a67 	vmov.f32	s0, s15
 800c474:	edd0 6a01 	vldr	s13, [r0, #4]
 800c478:	edc5 7a00 	vstr	s15, [r5]
 800c47c:	ed90 6a00 	vldr	s12, [r0]
 800c480:	ed90 7a02 	vldr	s14, [r0, #8]
 800c484:	eea6 0a06 	vfma.f32	s0, s12, s12
 800c488:	ed90 1a03 	vldr	s2, [r0, #12]
 800c48c:	edd0 1a04 	vldr	s3, [r0, #16]
 800c490:	ed90 2a05 	vldr	s4, [r0, #20]
 800c494:	edd0 2a06 	vldr	s5, [r0, #24]
 800c498:	ed90 3a07 	vldr	s6, [r0, #28]
 800c49c:	edd0 3a08 	vldr	s7, [r0, #32]
 800c4a0:	eea6 0aa6 	vfma.f32	s0, s13, s13
 800c4a4:	ed90 4a09 	vldr	s8, [r0, #36]	; 0x24
 800c4a8:	edd0 4a0a 	vldr	s9, [r0, #40]	; 0x28
 800c4ac:	ed90 5a0b 	vldr	s10, [r0, #44]	; 0x2c
 800c4b0:	edd0 5a0c 	vldr	s11, [r0, #48]	; 0x30
 800c4b4:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 800c4b8:	edd0 6a0e 	vldr	s13, [r0, #56]	; 0x38
 800c4bc:	eea7 0a07 	vfma.f32	s0, s14, s14
 800c4c0:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 800c4c4:	eea1 0a01 	vfma.f32	s0, s2, s2
 800c4c8:	eea1 0aa1 	vfma.f32	s0, s3, s3
 800c4cc:	eea2 0a02 	vfma.f32	s0, s4, s4
 800c4d0:	eea2 0aa2 	vfma.f32	s0, s5, s5
 800c4d4:	eea3 0a03 	vfma.f32	s0, s6, s6
 800c4d8:	eea3 0aa3 	vfma.f32	s0, s7, s7
 800c4dc:	eea4 0a04 	vfma.f32	s0, s8, s8
 800c4e0:	eea4 0aa4 	vfma.f32	s0, s9, s9
 800c4e4:	eea5 0a05 	vfma.f32	s0, s10, s10
 800c4e8:	eea5 0aa5 	vfma.f32	s0, s11, s11
 800c4ec:	eea6 0a06 	vfma.f32	s0, s12, s12
 800c4f0:	eea6 0aa6 	vfma.f32	s0, s13, s13
 800c4f4:	eea7 0a07 	vfma.f32	s0, s14, s14
 800c4f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c4fc:	ed85 0a00 	vstr	s0, [r5]
 800c500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c504:	f280 820d 	bge.w	800c922 <neai_classification+0x4e2>
 800c508:	edc5 7a00 	vstr	s15, [r5]
 800c50c:	ed9f 8abb 	vldr	s16, [pc, #748]	; 800c7fc <neai_classification+0x3bc>
 800c510:	4bbb      	ldr	r3, [pc, #748]	; (800c800 <neai_classification+0x3c0>)
 800c512:	4abc      	ldr	r2, [pc, #752]	; (800c804 <neai_classification+0x3c4>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	ed82 8a00 	vstr	s16, [r2]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	f040 81e4 	bne.w	800c8e8 <neai_classification+0x4a8>
 800c520:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 800c820 <neai_classification+0x3e0>
 800c524:	4bb8      	ldr	r3, [pc, #736]	; (800c808 <neai_classification+0x3c8>)
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	2a00      	cmp	r2, #0
 800c52a:	dd6b      	ble.n	800c604 <neai_classification+0x1c4>
 800c52c:	49b7      	ldr	r1, [pc, #732]	; (800c80c <neai_classification+0x3cc>)
 800c52e:	4db8      	ldr	r5, [pc, #736]	; (800c810 <neai_classification+0x3d0>)
 800c530:	f8d1 9000 	ldr.w	r9, [r1]
 800c534:	686b      	ldr	r3, [r5, #4]
 800c536:	49b7      	ldr	r1, [pc, #732]	; (800c814 <neai_classification+0x3d4>)
 800c538:	1a9b      	subs	r3, r3, r2
 800c53a:	48b7      	ldr	r0, [pc, #732]	; (800c818 <neai_classification+0x3d8>)
 800c53c:	6809      	ldr	r1, [r1, #0]
 800c53e:	eb09 0683 	add.w	r6, r9, r3, lsl #2
 800c542:	6803      	ldr	r3, [r0, #0]
 800c544:	f101 3eff 	add.w	lr, r1, #4294967295
 800c548:	48b4      	ldr	r0, [pc, #720]	; (800c81c <neai_classification+0x3dc>)
 800c54a:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800c54e:	edd6 7a00 	vldr	s15, [r6]
 800c552:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c556:	f1be 0f00 	cmp.w	lr, #0
 800c55a:	edc3 7a00 	vstr	s15, [r3]
 800c55e:	dd48      	ble.n	800c5f2 <neai_classification+0x1b2>
 800c560:	682d      	ldr	r5, [r5, #0]
 800c562:	f1be 0f02 	cmp.w	lr, #2
 800c566:	9505      	str	r5, [sp, #20]
 800c568:	f340 81f5 	ble.w	800c956 <neai_classification+0x516>
 800c56c:	3904      	subs	r1, #4
 800c56e:	4eac      	ldr	r6, [pc, #688]	; (800c820 <neai_classification+0x3e0>)
 800c570:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800c574:	f021 0101 	bic.w	r1, r1, #1
 800c578:	9101      	str	r1, [sp, #4]
 800c57a:	00d1      	lsls	r1, r2, #3
 800c57c:	9102      	str	r1, [sp, #8]
 800c57e:	9905      	ldr	r1, [sp, #20]
 800c580:	eb09 0581 	add.w	r5, r9, r1, lsl #2
 800c584:	2100      	movs	r1, #0
 800c586:	e9cd 2403 	strd	r2, r4, [sp, #12]
 800c58a:	edd5 6a00 	vldr	s13, [r5]
 800c58e:	eb05 0c0a 	add.w	ip, r5, sl
 800c592:	ed96 6a00 	vldr	s12, [r6]
 800c596:	3608      	adds	r6, #8
 800c598:	ed16 7a01 	vldr	s14, [r6, #-4]
 800c59c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c5a0:	9c01      	ldr	r4, [sp, #4]
 800c5a2:	9a02      	ldr	r2, [sp, #8]
 800c5a4:	428c      	cmp	r4, r1
 800c5a6:	f101 0102 	add.w	r1, r1, #2
 800c5aa:	4415      	add	r5, r2
 800c5ac:	edc3 7a00 	vstr	s15, [r3]
 800c5b0:	eddc 6a00 	vldr	s13, [ip]
 800c5b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c5b8:	edc3 7a00 	vstr	s15, [r3]
 800c5bc:	d1e5      	bne.n	800c58a <neai_classification+0x14a>
 800c5be:	e9dd 2403 	ldrd	r2, r4, [sp, #12]
 800c5c2:	9b05      	ldr	r3, [sp, #20]
 800c5c4:	eb00 050b 	add.w	r5, r0, fp
 800c5c8:	fb01 3202 	mla	r2, r1, r2, r3
 800c5cc:	edd5 7a00 	vldr	s15, [r5]
 800c5d0:	eb08 0381 	add.w	r3, r8, r1, lsl #2
 800c5d4:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800c5d8:	462a      	mov	r2, r5
 800c5da:	edd9 6a00 	vldr	s13, [r9]
 800c5de:	3101      	adds	r1, #1
 800c5e0:	ecb3 7a01 	vldmia	r3!, {s14}
 800c5e4:	44d1      	add	r9, sl
 800c5e6:	458e      	cmp	lr, r1
 800c5e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c5ec:	edc2 7a00 	vstr	s15, [r2]
 800c5f0:	dcf3      	bgt.n	800c5da <neai_classification+0x19a>
 800c5f2:	4483      	add	fp, r0
 800c5f4:	eddf 0a81 	vldr	s1, [pc, #516]	; 800c7fc <neai_classification+0x3bc>
 800c5f8:	ed9b 0a00 	vldr	s0, [fp]
 800c5fc:	f000 ff90 	bl	800d520 <fmaxf>
 800c600:	ed8b 0a00 	vstr	s0, [fp]
 800c604:	4d86      	ldr	r5, [pc, #536]	; (800c820 <neai_classification+0x3e0>)
 800c606:	4642      	mov	r2, r8
 800c608:	ba13      	rev	r3, r2
 800c60a:	2200      	movs	r2, #0
 800c60c:	1e69      	subs	r1, r5, #1
 800c60e:	3201      	adds	r2, #1
 800c610:	400d      	ands	r5, r1
 800c612:	d1fb      	bne.n	800c60c <neai_classification+0x1cc>
 800c614:	4628      	mov	r0, r5
 800c616:	b11b      	cbz	r3, 800c620 <neai_classification+0x1e0>
 800c618:	1e59      	subs	r1, r3, #1
 800c61a:	3001      	adds	r0, #1
 800c61c:	400b      	ands	r3, r1
 800c61e:	d1fb      	bne.n	800c618 <neai_classification+0x1d8>
 800c620:	1a12      	subs	r2, r2, r0
 800c622:	fab2 f282 	clz	r2, r2
 800c626:	0952      	lsrs	r2, r2, #5
 800c628:	ea4f 1342 	mov.w	r3, r2, lsl #5
 800c62c:	eba3 0302 	sub.w	r3, r3, r2
 800c630:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c634:	4413      	add	r3, r2
 800c636:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c63a:	4413      	add	r3, r2
 800c63c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c640:	eba3 0302 	sub.w	r3, r3, r2
 800c644:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c648:	eba3 0302 	sub.w	r3, r3, r2
 800c64c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c650:	4413      	add	r3, r2
 800c652:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c656:	eba3 0302 	sub.w	r3, r3, r2
 800c65a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c65e:	eba3 0302 	sub.w	r3, r3, r2
 800c662:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800c666:	ea6f 0303 	mvn.w	r3, r3
 800c66a:	ba1b      	rev	r3, r3
 800c66c:	4a6d      	ldr	r2, [pc, #436]	; (800c824 <neai_classification+0x3e4>)
 800c66e:	4b6e      	ldr	r3, [pc, #440]	; (800c828 <neai_classification+0x3e8>)
 800c670:	6811      	ldr	r1, [r2, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800c678:	2900      	cmp	r1, #0
 800c67a:	eb03 0682 	add.w	r6, r3, r2, lsl #2
 800c67e:	ed96 8a00 	vldr	s16, [r6]
 800c682:	ed84 8a00 	vstr	s16, [r4]
 800c686:	edd6 5a01 	vldr	s11, [r6, #4]
 800c68a:	edc4 5a01 	vstr	s11, [r4, #4]
 800c68e:	ed96 6a02 	vldr	s12, [r6, #8]
 800c692:	ed84 6a02 	vstr	s12, [r4, #8]
 800c696:	edd6 6a03 	vldr	s13, [r6, #12]
 800c69a:	edc4 6a03 	vstr	s13, [r4, #12]
 800c69e:	ed96 7a04 	vldr	s14, [r6, #16]
 800c6a2:	ed84 7a04 	vstr	s14, [r4, #16]
 800c6a6:	dd24      	ble.n	800c6f2 <neai_classification+0x2b2>
 800c6a8:	495b      	ldr	r1, [pc, #364]	; (800c818 <neai_classification+0x3d8>)
 800c6aa:	4a5c      	ldr	r2, [pc, #368]	; (800c81c <neai_classification+0x3dc>)
 800c6ac:	6809      	ldr	r1, [r1, #0]
 800c6ae:	ed93 5a00 	vldr	s10, [r3]
 800c6b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c6b6:	edd2 7a00 	vldr	s15, [r2]
 800c6ba:	eea7 8a85 	vfma.f32	s16, s15, s10
 800c6be:	ed84 8a00 	vstr	s16, [r4]
 800c6c2:	ed93 5a01 	vldr	s10, [r3, #4]
 800c6c6:	eee7 5a85 	vfma.f32	s11, s15, s10
 800c6ca:	edc4 5a01 	vstr	s11, [r4, #4]
 800c6ce:	edd3 5a02 	vldr	s11, [r3, #8]
 800c6d2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800c6d6:	ed84 6a02 	vstr	s12, [r4, #8]
 800c6da:	ed93 6a03 	vldr	s12, [r3, #12]
 800c6de:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c6e2:	edc4 6a03 	vstr	s13, [r4, #12]
 800c6e6:	edd3 6a04 	vldr	s13, [r3, #16]
 800c6ea:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c6ee:	ed84 7a04 	vstr	s14, [r4, #16]
 800c6f2:	ed94 6a01 	vldr	s12, [r4, #4]
 800c6f6:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
 800c6fa:	edd4 6a02 	vldr	s13, [r4, #8]
 800c6fe:	4626      	mov	r6, r4
 800c700:	eeb4 8a46 	vcmp.f32	s16, s12
 800c704:	ed94 7a03 	vldr	s14, [r4, #12]
 800c708:	edd4 7a04 	vldr	s15, [r4, #16]
 800c70c:	f104 0814 	add.w	r8, r4, #20
 800c710:	eddf 8a3a 	vldr	s17, [pc, #232]	; 800c7fc <neai_classification+0x3bc>
 800c714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c718:	bf48      	it	mi
 800c71a:	eeb0 8a46 	vmovmi.f32	s16, s12
 800c71e:	eef4 6a48 	vcmp.f32	s13, s16
 800c722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c726:	bfc8      	it	gt
 800c728:	eeb0 8a66 	vmovgt.f32	s16, s13
 800c72c:	eeb4 7a48 	vcmp.f32	s14, s16
 800c730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c734:	bfc8      	it	gt
 800c736:	eeb0 8a47 	vmovgt.f32	s16, s14
 800c73a:	eeb4 8a67 	vcmp.f32	s16, s15
 800c73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c742:	bf48      	it	mi
 800c744:	eeb0 8a67 	vmovmi.f32	s16, s15
 800c748:	edd6 7a00 	vldr	s15, [r6]
 800c74c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800c750:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c754:	ee17 0a90 	vmov	r0, s15
 800c758:	f7f3 ff7e 	bl	8000658 <__aeabi_f2d>
 800c75c:	ec41 0b10 	vmov	d0, r0, r1
 800c760:	f000 fdbe 	bl	800d2e0 <exp>
 800c764:	ec51 0b10 	vmov	r0, r1, d0
 800c768:	f7f3 ffce 	bl	8000708 <__aeabi_d2f>
 800c76c:	ee07 0a90 	vmov	s15, r0
 800c770:	f846 0b04 	str.w	r0, [r6], #4
 800c774:	45b0      	cmp	r8, r6
 800c776:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800c77a:	d1e5      	bne.n	800c748 <neai_classification+0x308>
 800c77c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c780:	ed94 5a00 	vldr	s10, [r4]
 800c784:	edd4 5a01 	vldr	s11, [r4, #4]
 800c788:	ed94 6a02 	vldr	s12, [r4, #8]
 800c78c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800c790:	edd4 6a03 	vldr	s13, [r4, #12]
 800c794:	edd4 4a04 	vldr	s9, [r4, #16]
 800c798:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c79c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c7a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800c7a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c7a8:	ed84 5a00 	vstr	s10, [r4]
 800c7ac:	eef4 5ac5 	vcmpe.f32	s11, s10
 800c7b0:	edc4 5a01 	vstr	s11, [r4, #4]
 800c7b4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800c7b8:	ed84 6a02 	vstr	s12, [r4, #8]
 800c7bc:	eeb0 7a45 	vmov.f32	s14, s10
 800c7c0:	edc4 6a03 	vstr	s13, [r4, #12]
 800c7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c8:	edc4 7a04 	vstr	s15, [r4, #16]
 800c7cc:	f340 80b8 	ble.w	800c940 <neai_classification+0x500>
 800c7d0:	eeb0 7a65 	vmov.f32	s14, s11
 800c7d4:	2001      	movs	r0, #1
 800c7d6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800c7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7de:	dd02      	ble.n	800c7e6 <neai_classification+0x3a6>
 800c7e0:	eeb0 7a46 	vmov.f32	s14, s12
 800c7e4:	2002      	movs	r0, #2
 800c7e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ee:	d51d      	bpl.n	800c82c <neai_classification+0x3ec>
 800c7f0:	eeb0 7a66 	vmov.f32	s14, s13
 800c7f4:	2003      	movs	r0, #3
 800c7f6:	e019      	b.n	800c82c <neai_classification+0x3ec>
 800c7f8:	240051b4 	.word	0x240051b4
 800c7fc:	00000000 	.word	0x00000000
 800c800:	240051dc 	.word	0x240051dc
 800c804:	240051b0 	.word	0x240051b0
 800c808:	240051cc 	.word	0x240051cc
 800c80c:	24005200 	.word	0x24005200
 800c810:	240051d0 	.word	0x240051d0
 800c814:	240051c8 	.word	0x240051c8
 800c818:	240051c4 	.word	0x240051c4
 800c81c:	240051d8 	.word	0x240051d8
 800c820:	240051b8 	.word	0x240051b8
 800c824:	240051c0 	.word	0x240051c0
 800c828:	240051f8 	.word	0x240051f8
 800c82c:	eef4 7a47 	vcmp.f32	s15, s14
 800c830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c834:	bfc8      	it	gt
 800c836:	2004      	movgt	r0, #4
 800c838:	4602      	mov	r2, r0
 800c83a:	f04f 0300 	mov.w	r3, #0
 800c83e:	2a00      	cmp	r2, #0
 800c840:	d007      	beq.n	800c852 <neai_classification+0x412>
 800c842:	f1a2 0101 	sub.w	r1, r2, #1
 800c846:	ea02 0201 	and.w	r2, r2, r1
 800c84a:	f103 0301 	add.w	r3, r3, #1
 800c84e:	2a00      	cmp	r2, #0
 800c850:	d1f7      	bne.n	800c842 <neai_classification+0x402>
 800c852:	2b20      	cmp	r3, #32
 800c854:	bfcc      	ite	gt
 800c856:	2300      	movgt	r3, #0
 800c858:	2301      	movle	r3, #1
 800c85a:	ea4f 1243 	mov.w	r2, r3, lsl #5
 800c85e:	eba2 0203 	sub.w	r2, r2, r3
 800c862:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c866:	441a      	add	r2, r3
 800c868:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c86c:	eba2 0203 	sub.w	r2, r2, r3
 800c870:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c874:	441a      	add	r2, r3
 800c876:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c87a:	441a      	add	r2, r3
 800c87c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800c880:	eba2 0203 	sub.w	r2, r2, r3
 800c884:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800c888:	441a      	add	r2, r3
 800c88a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c88e:	441a      	add	r2, r3
 800c890:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800c894:	eba2 0203 	sub.w	r2, r2, r3
 800c898:	ba12      	rev	r2, r2
 800c89a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800c89c:	111c      	asrs	r4, r3, #4
 800c89e:	f003 010f 	and.w	r1, r3, #15
 800c8a2:	d056      	beq.n	800c952 <neai_classification+0x512>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4622      	mov	r2, r4
 800c8a8:	1e56      	subs	r6, r2, #1
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	4032      	ands	r2, r6
 800c8ae:	d1fb      	bne.n	800c8a8 <neai_classification+0x468>
 800c8b0:	b169      	cbz	r1, 800c8ce <neai_classification+0x48e>
 800c8b2:	460a      	mov	r2, r1
 800c8b4:	1e56      	subs	r6, r2, #1
 800c8b6:	3501      	adds	r5, #1
 800c8b8:	4032      	ands	r2, r6
 800c8ba:	d1fb      	bne.n	800c8b4 <neai_classification+0x474>
 800c8bc:	fb01 f104 	mul.w	r1, r1, r4
 800c8c0:	442b      	add	r3, r5
 800c8c2:	b121      	cbz	r1, 800c8ce <neai_classification+0x48e>
 800c8c4:	1e4c      	subs	r4, r1, #1
 800c8c6:	3201      	adds	r2, #1
 800c8c8:	4021      	ands	r1, r4
 800c8ca:	d1fb      	bne.n	800c8c4 <neai_classification+0x484>
 800c8cc:	4413      	add	r3, r2
 800c8ce:	3b07      	subs	r3, #7
 800c8d0:	4924      	ldr	r1, [pc, #144]	; (800c964 <neai_classification+0x524>)
 800c8d2:	4403      	add	r3, r0
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	600b      	str	r3, [r1, #0]
 800c8da:	9b00      	ldr	r3, [sp, #0]
 800c8dc:	801a      	strh	r2, [r3, #0]
 800c8de:	b007      	add	sp, #28
 800c8e0:	ecbd 8b04 	vpop	{d8-d9}
 800c8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e8:	4a1f      	ldr	r2, [pc, #124]	; (800c968 <neai_classification+0x528>)
 800c8ea:	4920      	ldr	r1, [pc, #128]	; (800c96c <neai_classification+0x52c>)
 800c8ec:	6812      	ldr	r2, [r2, #0]
 800c8ee:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800c974 <neai_classification+0x534>
 800c8f2:	6808      	ldr	r0, [r1, #0]
 800c8f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8f8:	4641      	mov	r1, r8
 800c8fa:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800c970 <neai_classification+0x530>
 800c8fe:	edc1 7a00 	vstr	s15, [r1]
 800c902:	eeb0 6a67 	vmov.f32	s12, s15
 800c906:	ed90 7a00 	vldr	s14, [r0]
 800c90a:	ecf2 6a01 	vldmia	r2!, {s13}
 800c90e:	ee38 7a47 	vsub.f32	s14, s16, s14
 800c912:	4293      	cmp	r3, r2
 800c914:	eea7 6a26 	vfma.f32	s12, s14, s13
 800c918:	eca1 6a01 	vstmia	r1!, {s12}
 800c91c:	f43f ae02 	beq.w	800c524 <neai_classification+0xe4>
 800c920:	e7ed      	b.n	800c8fe <neai_classification+0x4be>
 800c922:	eeb4 0a67 	vcmp.f32	s0, s15
 800c926:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c92e:	d416      	bmi.n	800c95e <neai_classification+0x51e>
 800c930:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c934:	2300      	movs	r3, #0
 800c936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c93a:	da03      	bge.n	800c944 <neai_classification+0x504>
 800c93c:	602b      	str	r3, [r5, #0]
 800c93e:	e5e5      	b.n	800c50c <neai_classification+0xcc>
 800c940:	2000      	movs	r0, #0
 800c942:	e748      	b.n	800c7d6 <neai_classification+0x396>
 800c944:	ed85 8a00 	vstr	s16, [r5]
 800c948:	f57f ade2 	bpl.w	800c510 <neai_classification+0xd0>
 800c94c:	eeb1 8a48 	vneg.f32	s16, s16
 800c950:	e5de      	b.n	800c510 <neai_classification+0xd0>
 800c952:	4623      	mov	r3, r4
 800c954:	e7ac      	b.n	800c8b0 <neai_classification+0x470>
 800c956:	2100      	movs	r1, #0
 800c958:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800c95c:	e631      	b.n	800c5c2 <neai_classification+0x182>
 800c95e:	f000 fe17 	bl	800d590 <sqrtf>
 800c962:	e7e5      	b.n	800c930 <neai_classification+0x4f0>
 800c964:	240051bc 	.word	0x240051bc
 800c968:	240051fc 	.word	0x240051fc
 800c96c:	2400520c 	.word	0x2400520c
 800c970:	00000000 	.word	0x00000000
 800c974:	240051b8 	.word	0x240051b8

0800c978 <__errno>:
 800c978:	4b01      	ldr	r3, [pc, #4]	; (800c980 <__errno+0x8>)
 800c97a:	6818      	ldr	r0, [r3, #0]
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	24003308 	.word	0x24003308

0800c984 <__libc_init_array>:
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	4d0d      	ldr	r5, [pc, #52]	; (800c9bc <__libc_init_array+0x38>)
 800c988:	4c0d      	ldr	r4, [pc, #52]	; (800c9c0 <__libc_init_array+0x3c>)
 800c98a:	1b64      	subs	r4, r4, r5
 800c98c:	10a4      	asrs	r4, r4, #2
 800c98e:	2600      	movs	r6, #0
 800c990:	42a6      	cmp	r6, r4
 800c992:	d109      	bne.n	800c9a8 <__libc_init_array+0x24>
 800c994:	4d0b      	ldr	r5, [pc, #44]	; (800c9c4 <__libc_init_array+0x40>)
 800c996:	4c0c      	ldr	r4, [pc, #48]	; (800c9c8 <__libc_init_array+0x44>)
 800c998:	f000 fe1c 	bl	800d5d4 <_init>
 800c99c:	1b64      	subs	r4, r4, r5
 800c99e:	10a4      	asrs	r4, r4, #2
 800c9a0:	2600      	movs	r6, #0
 800c9a2:	42a6      	cmp	r6, r4
 800c9a4:	d105      	bne.n	800c9b2 <__libc_init_array+0x2e>
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ac:	4798      	blx	r3
 800c9ae:	3601      	adds	r6, #1
 800c9b0:	e7ee      	b.n	800c990 <__libc_init_array+0xc>
 800c9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9b6:	4798      	blx	r3
 800c9b8:	3601      	adds	r6, #1
 800c9ba:	e7f2      	b.n	800c9a2 <__libc_init_array+0x1e>
 800c9bc:	0800e028 	.word	0x0800e028
 800c9c0:	0800e028 	.word	0x0800e028
 800c9c4:	0800e028 	.word	0x0800e028
 800c9c8:	0800e02c 	.word	0x0800e02c

0800c9cc <memset>:
 800c9cc:	4402      	add	r2, r0
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d100      	bne.n	800c9d6 <memset+0xa>
 800c9d4:	4770      	bx	lr
 800c9d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9da:	e7f9      	b.n	800c9d0 <memset+0x4>

0800c9dc <sniprintf>:
 800c9dc:	b40c      	push	{r2, r3}
 800c9de:	b530      	push	{r4, r5, lr}
 800c9e0:	4b17      	ldr	r3, [pc, #92]	; (800ca40 <sniprintf+0x64>)
 800c9e2:	1e0c      	subs	r4, r1, #0
 800c9e4:	681d      	ldr	r5, [r3, #0]
 800c9e6:	b09d      	sub	sp, #116	; 0x74
 800c9e8:	da08      	bge.n	800c9fc <sniprintf+0x20>
 800c9ea:	238b      	movs	r3, #139	; 0x8b
 800c9ec:	602b      	str	r3, [r5, #0]
 800c9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f2:	b01d      	add	sp, #116	; 0x74
 800c9f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9f8:	b002      	add	sp, #8
 800c9fa:	4770      	bx	lr
 800c9fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ca00:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca04:	bf14      	ite	ne
 800ca06:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ca0a:	4623      	moveq	r3, r4
 800ca0c:	9304      	str	r3, [sp, #16]
 800ca0e:	9307      	str	r3, [sp, #28]
 800ca10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca14:	9002      	str	r0, [sp, #8]
 800ca16:	9006      	str	r0, [sp, #24]
 800ca18:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ca1e:	ab21      	add	r3, sp, #132	; 0x84
 800ca20:	a902      	add	r1, sp, #8
 800ca22:	4628      	mov	r0, r5
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	f000 f869 	bl	800cafc <_svfiprintf_r>
 800ca2a:	1c43      	adds	r3, r0, #1
 800ca2c:	bfbc      	itt	lt
 800ca2e:	238b      	movlt	r3, #139	; 0x8b
 800ca30:	602b      	strlt	r3, [r5, #0]
 800ca32:	2c00      	cmp	r4, #0
 800ca34:	d0dd      	beq.n	800c9f2 <sniprintf+0x16>
 800ca36:	9b02      	ldr	r3, [sp, #8]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	701a      	strb	r2, [r3, #0]
 800ca3c:	e7d9      	b.n	800c9f2 <sniprintf+0x16>
 800ca3e:	bf00      	nop
 800ca40:	24003308 	.word	0x24003308

0800ca44 <__ssputs_r>:
 800ca44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca48:	688e      	ldr	r6, [r1, #8]
 800ca4a:	429e      	cmp	r6, r3
 800ca4c:	4682      	mov	sl, r0
 800ca4e:	460c      	mov	r4, r1
 800ca50:	4690      	mov	r8, r2
 800ca52:	461f      	mov	r7, r3
 800ca54:	d838      	bhi.n	800cac8 <__ssputs_r+0x84>
 800ca56:	898a      	ldrh	r2, [r1, #12]
 800ca58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca5c:	d032      	beq.n	800cac4 <__ssputs_r+0x80>
 800ca5e:	6825      	ldr	r5, [r4, #0]
 800ca60:	6909      	ldr	r1, [r1, #16]
 800ca62:	eba5 0901 	sub.w	r9, r5, r1
 800ca66:	6965      	ldr	r5, [r4, #20]
 800ca68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca70:	3301      	adds	r3, #1
 800ca72:	444b      	add	r3, r9
 800ca74:	106d      	asrs	r5, r5, #1
 800ca76:	429d      	cmp	r5, r3
 800ca78:	bf38      	it	cc
 800ca7a:	461d      	movcc	r5, r3
 800ca7c:	0553      	lsls	r3, r2, #21
 800ca7e:	d531      	bpl.n	800cae4 <__ssputs_r+0xa0>
 800ca80:	4629      	mov	r1, r5
 800ca82:	f000 fb63 	bl	800d14c <_malloc_r>
 800ca86:	4606      	mov	r6, r0
 800ca88:	b950      	cbnz	r0, 800caa0 <__ssputs_r+0x5c>
 800ca8a:	230c      	movs	r3, #12
 800ca8c:	f8ca 3000 	str.w	r3, [sl]
 800ca90:	89a3      	ldrh	r3, [r4, #12]
 800ca92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca96:	81a3      	strh	r3, [r4, #12]
 800ca98:	f04f 30ff 	mov.w	r0, #4294967295
 800ca9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa0:	6921      	ldr	r1, [r4, #16]
 800caa2:	464a      	mov	r2, r9
 800caa4:	f000 fabe 	bl	800d024 <memcpy>
 800caa8:	89a3      	ldrh	r3, [r4, #12]
 800caaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800caae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cab2:	81a3      	strh	r3, [r4, #12]
 800cab4:	6126      	str	r6, [r4, #16]
 800cab6:	6165      	str	r5, [r4, #20]
 800cab8:	444e      	add	r6, r9
 800caba:	eba5 0509 	sub.w	r5, r5, r9
 800cabe:	6026      	str	r6, [r4, #0]
 800cac0:	60a5      	str	r5, [r4, #8]
 800cac2:	463e      	mov	r6, r7
 800cac4:	42be      	cmp	r6, r7
 800cac6:	d900      	bls.n	800caca <__ssputs_r+0x86>
 800cac8:	463e      	mov	r6, r7
 800caca:	6820      	ldr	r0, [r4, #0]
 800cacc:	4632      	mov	r2, r6
 800cace:	4641      	mov	r1, r8
 800cad0:	f000 fab6 	bl	800d040 <memmove>
 800cad4:	68a3      	ldr	r3, [r4, #8]
 800cad6:	1b9b      	subs	r3, r3, r6
 800cad8:	60a3      	str	r3, [r4, #8]
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	4433      	add	r3, r6
 800cade:	6023      	str	r3, [r4, #0]
 800cae0:	2000      	movs	r0, #0
 800cae2:	e7db      	b.n	800ca9c <__ssputs_r+0x58>
 800cae4:	462a      	mov	r2, r5
 800cae6:	f000 fba5 	bl	800d234 <_realloc_r>
 800caea:	4606      	mov	r6, r0
 800caec:	2800      	cmp	r0, #0
 800caee:	d1e1      	bne.n	800cab4 <__ssputs_r+0x70>
 800caf0:	6921      	ldr	r1, [r4, #16]
 800caf2:	4650      	mov	r0, sl
 800caf4:	f000 fabe 	bl	800d074 <_free_r>
 800caf8:	e7c7      	b.n	800ca8a <__ssputs_r+0x46>
	...

0800cafc <_svfiprintf_r>:
 800cafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb00:	4698      	mov	r8, r3
 800cb02:	898b      	ldrh	r3, [r1, #12]
 800cb04:	061b      	lsls	r3, r3, #24
 800cb06:	b09d      	sub	sp, #116	; 0x74
 800cb08:	4607      	mov	r7, r0
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	4614      	mov	r4, r2
 800cb0e:	d50e      	bpl.n	800cb2e <_svfiprintf_r+0x32>
 800cb10:	690b      	ldr	r3, [r1, #16]
 800cb12:	b963      	cbnz	r3, 800cb2e <_svfiprintf_r+0x32>
 800cb14:	2140      	movs	r1, #64	; 0x40
 800cb16:	f000 fb19 	bl	800d14c <_malloc_r>
 800cb1a:	6028      	str	r0, [r5, #0]
 800cb1c:	6128      	str	r0, [r5, #16]
 800cb1e:	b920      	cbnz	r0, 800cb2a <_svfiprintf_r+0x2e>
 800cb20:	230c      	movs	r3, #12
 800cb22:	603b      	str	r3, [r7, #0]
 800cb24:	f04f 30ff 	mov.w	r0, #4294967295
 800cb28:	e0d1      	b.n	800ccce <_svfiprintf_r+0x1d2>
 800cb2a:	2340      	movs	r3, #64	; 0x40
 800cb2c:	616b      	str	r3, [r5, #20]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	9309      	str	r3, [sp, #36]	; 0x24
 800cb32:	2320      	movs	r3, #32
 800cb34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb38:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb3c:	2330      	movs	r3, #48	; 0x30
 800cb3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cce8 <_svfiprintf_r+0x1ec>
 800cb42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb46:	f04f 0901 	mov.w	r9, #1
 800cb4a:	4623      	mov	r3, r4
 800cb4c:	469a      	mov	sl, r3
 800cb4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb52:	b10a      	cbz	r2, 800cb58 <_svfiprintf_r+0x5c>
 800cb54:	2a25      	cmp	r2, #37	; 0x25
 800cb56:	d1f9      	bne.n	800cb4c <_svfiprintf_r+0x50>
 800cb58:	ebba 0b04 	subs.w	fp, sl, r4
 800cb5c:	d00b      	beq.n	800cb76 <_svfiprintf_r+0x7a>
 800cb5e:	465b      	mov	r3, fp
 800cb60:	4622      	mov	r2, r4
 800cb62:	4629      	mov	r1, r5
 800cb64:	4638      	mov	r0, r7
 800cb66:	f7ff ff6d 	bl	800ca44 <__ssputs_r>
 800cb6a:	3001      	adds	r0, #1
 800cb6c:	f000 80aa 	beq.w	800ccc4 <_svfiprintf_r+0x1c8>
 800cb70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb72:	445a      	add	r2, fp
 800cb74:	9209      	str	r2, [sp, #36]	; 0x24
 800cb76:	f89a 3000 	ldrb.w	r3, [sl]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f000 80a2 	beq.w	800ccc4 <_svfiprintf_r+0x1c8>
 800cb80:	2300      	movs	r3, #0
 800cb82:	f04f 32ff 	mov.w	r2, #4294967295
 800cb86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb8a:	f10a 0a01 	add.w	sl, sl, #1
 800cb8e:	9304      	str	r3, [sp, #16]
 800cb90:	9307      	str	r3, [sp, #28]
 800cb92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb96:	931a      	str	r3, [sp, #104]	; 0x68
 800cb98:	4654      	mov	r4, sl
 800cb9a:	2205      	movs	r2, #5
 800cb9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba0:	4851      	ldr	r0, [pc, #324]	; (800cce8 <_svfiprintf_r+0x1ec>)
 800cba2:	f7f3 fba5 	bl	80002f0 <memchr>
 800cba6:	9a04      	ldr	r2, [sp, #16]
 800cba8:	b9d8      	cbnz	r0, 800cbe2 <_svfiprintf_r+0xe6>
 800cbaa:	06d0      	lsls	r0, r2, #27
 800cbac:	bf44      	itt	mi
 800cbae:	2320      	movmi	r3, #32
 800cbb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbb4:	0711      	lsls	r1, r2, #28
 800cbb6:	bf44      	itt	mi
 800cbb8:	232b      	movmi	r3, #43	; 0x2b
 800cbba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbbe:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc2:	2b2a      	cmp	r3, #42	; 0x2a
 800cbc4:	d015      	beq.n	800cbf2 <_svfiprintf_r+0xf6>
 800cbc6:	9a07      	ldr	r2, [sp, #28]
 800cbc8:	4654      	mov	r4, sl
 800cbca:	2000      	movs	r0, #0
 800cbcc:	f04f 0c0a 	mov.w	ip, #10
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbd6:	3b30      	subs	r3, #48	; 0x30
 800cbd8:	2b09      	cmp	r3, #9
 800cbda:	d94e      	bls.n	800cc7a <_svfiprintf_r+0x17e>
 800cbdc:	b1b0      	cbz	r0, 800cc0c <_svfiprintf_r+0x110>
 800cbde:	9207      	str	r2, [sp, #28]
 800cbe0:	e014      	b.n	800cc0c <_svfiprintf_r+0x110>
 800cbe2:	eba0 0308 	sub.w	r3, r0, r8
 800cbe6:	fa09 f303 	lsl.w	r3, r9, r3
 800cbea:	4313      	orrs	r3, r2
 800cbec:	9304      	str	r3, [sp, #16]
 800cbee:	46a2      	mov	sl, r4
 800cbf0:	e7d2      	b.n	800cb98 <_svfiprintf_r+0x9c>
 800cbf2:	9b03      	ldr	r3, [sp, #12]
 800cbf4:	1d19      	adds	r1, r3, #4
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	9103      	str	r1, [sp, #12]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	bfbb      	ittet	lt
 800cbfe:	425b      	neglt	r3, r3
 800cc00:	f042 0202 	orrlt.w	r2, r2, #2
 800cc04:	9307      	strge	r3, [sp, #28]
 800cc06:	9307      	strlt	r3, [sp, #28]
 800cc08:	bfb8      	it	lt
 800cc0a:	9204      	strlt	r2, [sp, #16]
 800cc0c:	7823      	ldrb	r3, [r4, #0]
 800cc0e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc10:	d10c      	bne.n	800cc2c <_svfiprintf_r+0x130>
 800cc12:	7863      	ldrb	r3, [r4, #1]
 800cc14:	2b2a      	cmp	r3, #42	; 0x2a
 800cc16:	d135      	bne.n	800cc84 <_svfiprintf_r+0x188>
 800cc18:	9b03      	ldr	r3, [sp, #12]
 800cc1a:	1d1a      	adds	r2, r3, #4
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	9203      	str	r2, [sp, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	bfb8      	it	lt
 800cc24:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc28:	3402      	adds	r4, #2
 800cc2a:	9305      	str	r3, [sp, #20]
 800cc2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ccf8 <_svfiprintf_r+0x1fc>
 800cc30:	7821      	ldrb	r1, [r4, #0]
 800cc32:	2203      	movs	r2, #3
 800cc34:	4650      	mov	r0, sl
 800cc36:	f7f3 fb5b 	bl	80002f0 <memchr>
 800cc3a:	b140      	cbz	r0, 800cc4e <_svfiprintf_r+0x152>
 800cc3c:	2340      	movs	r3, #64	; 0x40
 800cc3e:	eba0 000a 	sub.w	r0, r0, sl
 800cc42:	fa03 f000 	lsl.w	r0, r3, r0
 800cc46:	9b04      	ldr	r3, [sp, #16]
 800cc48:	4303      	orrs	r3, r0
 800cc4a:	3401      	adds	r4, #1
 800cc4c:	9304      	str	r3, [sp, #16]
 800cc4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc52:	4826      	ldr	r0, [pc, #152]	; (800ccec <_svfiprintf_r+0x1f0>)
 800cc54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc58:	2206      	movs	r2, #6
 800cc5a:	f7f3 fb49 	bl	80002f0 <memchr>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d038      	beq.n	800ccd4 <_svfiprintf_r+0x1d8>
 800cc62:	4b23      	ldr	r3, [pc, #140]	; (800ccf0 <_svfiprintf_r+0x1f4>)
 800cc64:	bb1b      	cbnz	r3, 800ccae <_svfiprintf_r+0x1b2>
 800cc66:	9b03      	ldr	r3, [sp, #12]
 800cc68:	3307      	adds	r3, #7
 800cc6a:	f023 0307 	bic.w	r3, r3, #7
 800cc6e:	3308      	adds	r3, #8
 800cc70:	9303      	str	r3, [sp, #12]
 800cc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc74:	4433      	add	r3, r6
 800cc76:	9309      	str	r3, [sp, #36]	; 0x24
 800cc78:	e767      	b.n	800cb4a <_svfiprintf_r+0x4e>
 800cc7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc7e:	460c      	mov	r4, r1
 800cc80:	2001      	movs	r0, #1
 800cc82:	e7a5      	b.n	800cbd0 <_svfiprintf_r+0xd4>
 800cc84:	2300      	movs	r3, #0
 800cc86:	3401      	adds	r4, #1
 800cc88:	9305      	str	r3, [sp, #20]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	f04f 0c0a 	mov.w	ip, #10
 800cc90:	4620      	mov	r0, r4
 800cc92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc96:	3a30      	subs	r2, #48	; 0x30
 800cc98:	2a09      	cmp	r2, #9
 800cc9a:	d903      	bls.n	800cca4 <_svfiprintf_r+0x1a8>
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d0c5      	beq.n	800cc2c <_svfiprintf_r+0x130>
 800cca0:	9105      	str	r1, [sp, #20]
 800cca2:	e7c3      	b.n	800cc2c <_svfiprintf_r+0x130>
 800cca4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cca8:	4604      	mov	r4, r0
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e7f0      	b.n	800cc90 <_svfiprintf_r+0x194>
 800ccae:	ab03      	add	r3, sp, #12
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	462a      	mov	r2, r5
 800ccb4:	4b0f      	ldr	r3, [pc, #60]	; (800ccf4 <_svfiprintf_r+0x1f8>)
 800ccb6:	a904      	add	r1, sp, #16
 800ccb8:	4638      	mov	r0, r7
 800ccba:	f3af 8000 	nop.w
 800ccbe:	1c42      	adds	r2, r0, #1
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	d1d6      	bne.n	800cc72 <_svfiprintf_r+0x176>
 800ccc4:	89ab      	ldrh	r3, [r5, #12]
 800ccc6:	065b      	lsls	r3, r3, #25
 800ccc8:	f53f af2c 	bmi.w	800cb24 <_svfiprintf_r+0x28>
 800cccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccce:	b01d      	add	sp, #116	; 0x74
 800ccd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd4:	ab03      	add	r3, sp, #12
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	462a      	mov	r2, r5
 800ccda:	4b06      	ldr	r3, [pc, #24]	; (800ccf4 <_svfiprintf_r+0x1f8>)
 800ccdc:	a904      	add	r1, sp, #16
 800ccde:	4638      	mov	r0, r7
 800cce0:	f000 f87a 	bl	800cdd8 <_printf_i>
 800cce4:	e7eb      	b.n	800ccbe <_svfiprintf_r+0x1c2>
 800cce6:	bf00      	nop
 800cce8:	0800d784 	.word	0x0800d784
 800ccec:	0800d78e 	.word	0x0800d78e
 800ccf0:	00000000 	.word	0x00000000
 800ccf4:	0800ca45 	.word	0x0800ca45
 800ccf8:	0800d78a 	.word	0x0800d78a

0800ccfc <_printf_common>:
 800ccfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd00:	4616      	mov	r6, r2
 800cd02:	4699      	mov	r9, r3
 800cd04:	688a      	ldr	r2, [r1, #8]
 800cd06:	690b      	ldr	r3, [r1, #16]
 800cd08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	bfb8      	it	lt
 800cd10:	4613      	movlt	r3, r2
 800cd12:	6033      	str	r3, [r6, #0]
 800cd14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd18:	4607      	mov	r7, r0
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	b10a      	cbz	r2, 800cd22 <_printf_common+0x26>
 800cd1e:	3301      	adds	r3, #1
 800cd20:	6033      	str	r3, [r6, #0]
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	0699      	lsls	r1, r3, #26
 800cd26:	bf42      	ittt	mi
 800cd28:	6833      	ldrmi	r3, [r6, #0]
 800cd2a:	3302      	addmi	r3, #2
 800cd2c:	6033      	strmi	r3, [r6, #0]
 800cd2e:	6825      	ldr	r5, [r4, #0]
 800cd30:	f015 0506 	ands.w	r5, r5, #6
 800cd34:	d106      	bne.n	800cd44 <_printf_common+0x48>
 800cd36:	f104 0a19 	add.w	sl, r4, #25
 800cd3a:	68e3      	ldr	r3, [r4, #12]
 800cd3c:	6832      	ldr	r2, [r6, #0]
 800cd3e:	1a9b      	subs	r3, r3, r2
 800cd40:	42ab      	cmp	r3, r5
 800cd42:	dc26      	bgt.n	800cd92 <_printf_common+0x96>
 800cd44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd48:	1e13      	subs	r3, r2, #0
 800cd4a:	6822      	ldr	r2, [r4, #0]
 800cd4c:	bf18      	it	ne
 800cd4e:	2301      	movne	r3, #1
 800cd50:	0692      	lsls	r2, r2, #26
 800cd52:	d42b      	bmi.n	800cdac <_printf_common+0xb0>
 800cd54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd58:	4649      	mov	r1, r9
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	47c0      	blx	r8
 800cd5e:	3001      	adds	r0, #1
 800cd60:	d01e      	beq.n	800cda0 <_printf_common+0xa4>
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	68e5      	ldr	r5, [r4, #12]
 800cd66:	6832      	ldr	r2, [r6, #0]
 800cd68:	f003 0306 	and.w	r3, r3, #6
 800cd6c:	2b04      	cmp	r3, #4
 800cd6e:	bf08      	it	eq
 800cd70:	1aad      	subeq	r5, r5, r2
 800cd72:	68a3      	ldr	r3, [r4, #8]
 800cd74:	6922      	ldr	r2, [r4, #16]
 800cd76:	bf0c      	ite	eq
 800cd78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd7c:	2500      	movne	r5, #0
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	bfc4      	itt	gt
 800cd82:	1a9b      	subgt	r3, r3, r2
 800cd84:	18ed      	addgt	r5, r5, r3
 800cd86:	2600      	movs	r6, #0
 800cd88:	341a      	adds	r4, #26
 800cd8a:	42b5      	cmp	r5, r6
 800cd8c:	d11a      	bne.n	800cdc4 <_printf_common+0xc8>
 800cd8e:	2000      	movs	r0, #0
 800cd90:	e008      	b.n	800cda4 <_printf_common+0xa8>
 800cd92:	2301      	movs	r3, #1
 800cd94:	4652      	mov	r2, sl
 800cd96:	4649      	mov	r1, r9
 800cd98:	4638      	mov	r0, r7
 800cd9a:	47c0      	blx	r8
 800cd9c:	3001      	adds	r0, #1
 800cd9e:	d103      	bne.n	800cda8 <_printf_common+0xac>
 800cda0:	f04f 30ff 	mov.w	r0, #4294967295
 800cda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda8:	3501      	adds	r5, #1
 800cdaa:	e7c6      	b.n	800cd3a <_printf_common+0x3e>
 800cdac:	18e1      	adds	r1, r4, r3
 800cdae:	1c5a      	adds	r2, r3, #1
 800cdb0:	2030      	movs	r0, #48	; 0x30
 800cdb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdb6:	4422      	add	r2, r4
 800cdb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdc0:	3302      	adds	r3, #2
 800cdc2:	e7c7      	b.n	800cd54 <_printf_common+0x58>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	4622      	mov	r2, r4
 800cdc8:	4649      	mov	r1, r9
 800cdca:	4638      	mov	r0, r7
 800cdcc:	47c0      	blx	r8
 800cdce:	3001      	adds	r0, #1
 800cdd0:	d0e6      	beq.n	800cda0 <_printf_common+0xa4>
 800cdd2:	3601      	adds	r6, #1
 800cdd4:	e7d9      	b.n	800cd8a <_printf_common+0x8e>
	...

0800cdd8 <_printf_i>:
 800cdd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cddc:	7e0f      	ldrb	r7, [r1, #24]
 800cdde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cde0:	2f78      	cmp	r7, #120	; 0x78
 800cde2:	4691      	mov	r9, r2
 800cde4:	4680      	mov	r8, r0
 800cde6:	460c      	mov	r4, r1
 800cde8:	469a      	mov	sl, r3
 800cdea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cdee:	d807      	bhi.n	800ce00 <_printf_i+0x28>
 800cdf0:	2f62      	cmp	r7, #98	; 0x62
 800cdf2:	d80a      	bhi.n	800ce0a <_printf_i+0x32>
 800cdf4:	2f00      	cmp	r7, #0
 800cdf6:	f000 80d8 	beq.w	800cfaa <_printf_i+0x1d2>
 800cdfa:	2f58      	cmp	r7, #88	; 0x58
 800cdfc:	f000 80a3 	beq.w	800cf46 <_printf_i+0x16e>
 800ce00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce08:	e03a      	b.n	800ce80 <_printf_i+0xa8>
 800ce0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce0e:	2b15      	cmp	r3, #21
 800ce10:	d8f6      	bhi.n	800ce00 <_printf_i+0x28>
 800ce12:	a101      	add	r1, pc, #4	; (adr r1, 800ce18 <_printf_i+0x40>)
 800ce14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce18:	0800ce71 	.word	0x0800ce71
 800ce1c:	0800ce85 	.word	0x0800ce85
 800ce20:	0800ce01 	.word	0x0800ce01
 800ce24:	0800ce01 	.word	0x0800ce01
 800ce28:	0800ce01 	.word	0x0800ce01
 800ce2c:	0800ce01 	.word	0x0800ce01
 800ce30:	0800ce85 	.word	0x0800ce85
 800ce34:	0800ce01 	.word	0x0800ce01
 800ce38:	0800ce01 	.word	0x0800ce01
 800ce3c:	0800ce01 	.word	0x0800ce01
 800ce40:	0800ce01 	.word	0x0800ce01
 800ce44:	0800cf91 	.word	0x0800cf91
 800ce48:	0800ceb5 	.word	0x0800ceb5
 800ce4c:	0800cf73 	.word	0x0800cf73
 800ce50:	0800ce01 	.word	0x0800ce01
 800ce54:	0800ce01 	.word	0x0800ce01
 800ce58:	0800cfb3 	.word	0x0800cfb3
 800ce5c:	0800ce01 	.word	0x0800ce01
 800ce60:	0800ceb5 	.word	0x0800ceb5
 800ce64:	0800ce01 	.word	0x0800ce01
 800ce68:	0800ce01 	.word	0x0800ce01
 800ce6c:	0800cf7b 	.word	0x0800cf7b
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	1d1a      	adds	r2, r3, #4
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	602a      	str	r2, [r5, #0]
 800ce78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce80:	2301      	movs	r3, #1
 800ce82:	e0a3      	b.n	800cfcc <_printf_i+0x1f4>
 800ce84:	6820      	ldr	r0, [r4, #0]
 800ce86:	6829      	ldr	r1, [r5, #0]
 800ce88:	0606      	lsls	r6, r0, #24
 800ce8a:	f101 0304 	add.w	r3, r1, #4
 800ce8e:	d50a      	bpl.n	800cea6 <_printf_i+0xce>
 800ce90:	680e      	ldr	r6, [r1, #0]
 800ce92:	602b      	str	r3, [r5, #0]
 800ce94:	2e00      	cmp	r6, #0
 800ce96:	da03      	bge.n	800cea0 <_printf_i+0xc8>
 800ce98:	232d      	movs	r3, #45	; 0x2d
 800ce9a:	4276      	negs	r6, r6
 800ce9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cea0:	485e      	ldr	r0, [pc, #376]	; (800d01c <_printf_i+0x244>)
 800cea2:	230a      	movs	r3, #10
 800cea4:	e019      	b.n	800ceda <_printf_i+0x102>
 800cea6:	680e      	ldr	r6, [r1, #0]
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ceae:	bf18      	it	ne
 800ceb0:	b236      	sxthne	r6, r6
 800ceb2:	e7ef      	b.n	800ce94 <_printf_i+0xbc>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	6820      	ldr	r0, [r4, #0]
 800ceb8:	1d19      	adds	r1, r3, #4
 800ceba:	6029      	str	r1, [r5, #0]
 800cebc:	0601      	lsls	r1, r0, #24
 800cebe:	d501      	bpl.n	800cec4 <_printf_i+0xec>
 800cec0:	681e      	ldr	r6, [r3, #0]
 800cec2:	e002      	b.n	800ceca <_printf_i+0xf2>
 800cec4:	0646      	lsls	r6, r0, #25
 800cec6:	d5fb      	bpl.n	800cec0 <_printf_i+0xe8>
 800cec8:	881e      	ldrh	r6, [r3, #0]
 800ceca:	4854      	ldr	r0, [pc, #336]	; (800d01c <_printf_i+0x244>)
 800cecc:	2f6f      	cmp	r7, #111	; 0x6f
 800cece:	bf0c      	ite	eq
 800ced0:	2308      	moveq	r3, #8
 800ced2:	230a      	movne	r3, #10
 800ced4:	2100      	movs	r1, #0
 800ced6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ceda:	6865      	ldr	r5, [r4, #4]
 800cedc:	60a5      	str	r5, [r4, #8]
 800cede:	2d00      	cmp	r5, #0
 800cee0:	bfa2      	ittt	ge
 800cee2:	6821      	ldrge	r1, [r4, #0]
 800cee4:	f021 0104 	bicge.w	r1, r1, #4
 800cee8:	6021      	strge	r1, [r4, #0]
 800ceea:	b90e      	cbnz	r6, 800cef0 <_printf_i+0x118>
 800ceec:	2d00      	cmp	r5, #0
 800ceee:	d04d      	beq.n	800cf8c <_printf_i+0x1b4>
 800cef0:	4615      	mov	r5, r2
 800cef2:	fbb6 f1f3 	udiv	r1, r6, r3
 800cef6:	fb03 6711 	mls	r7, r3, r1, r6
 800cefa:	5dc7      	ldrb	r7, [r0, r7]
 800cefc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf00:	4637      	mov	r7, r6
 800cf02:	42bb      	cmp	r3, r7
 800cf04:	460e      	mov	r6, r1
 800cf06:	d9f4      	bls.n	800cef2 <_printf_i+0x11a>
 800cf08:	2b08      	cmp	r3, #8
 800cf0a:	d10b      	bne.n	800cf24 <_printf_i+0x14c>
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	07de      	lsls	r6, r3, #31
 800cf10:	d508      	bpl.n	800cf24 <_printf_i+0x14c>
 800cf12:	6923      	ldr	r3, [r4, #16]
 800cf14:	6861      	ldr	r1, [r4, #4]
 800cf16:	4299      	cmp	r1, r3
 800cf18:	bfde      	ittt	le
 800cf1a:	2330      	movle	r3, #48	; 0x30
 800cf1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf24:	1b52      	subs	r2, r2, r5
 800cf26:	6122      	str	r2, [r4, #16]
 800cf28:	f8cd a000 	str.w	sl, [sp]
 800cf2c:	464b      	mov	r3, r9
 800cf2e:	aa03      	add	r2, sp, #12
 800cf30:	4621      	mov	r1, r4
 800cf32:	4640      	mov	r0, r8
 800cf34:	f7ff fee2 	bl	800ccfc <_printf_common>
 800cf38:	3001      	adds	r0, #1
 800cf3a:	d14c      	bne.n	800cfd6 <_printf_i+0x1fe>
 800cf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf40:	b004      	add	sp, #16
 800cf42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf46:	4835      	ldr	r0, [pc, #212]	; (800d01c <_printf_i+0x244>)
 800cf48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf4c:	6829      	ldr	r1, [r5, #0]
 800cf4e:	6823      	ldr	r3, [r4, #0]
 800cf50:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf54:	6029      	str	r1, [r5, #0]
 800cf56:	061d      	lsls	r5, r3, #24
 800cf58:	d514      	bpl.n	800cf84 <_printf_i+0x1ac>
 800cf5a:	07df      	lsls	r7, r3, #31
 800cf5c:	bf44      	itt	mi
 800cf5e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf62:	6023      	strmi	r3, [r4, #0]
 800cf64:	b91e      	cbnz	r6, 800cf6e <_printf_i+0x196>
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	f023 0320 	bic.w	r3, r3, #32
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	2310      	movs	r3, #16
 800cf70:	e7b0      	b.n	800ced4 <_printf_i+0xfc>
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	f043 0320 	orr.w	r3, r3, #32
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	2378      	movs	r3, #120	; 0x78
 800cf7c:	4828      	ldr	r0, [pc, #160]	; (800d020 <_printf_i+0x248>)
 800cf7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf82:	e7e3      	b.n	800cf4c <_printf_i+0x174>
 800cf84:	0659      	lsls	r1, r3, #25
 800cf86:	bf48      	it	mi
 800cf88:	b2b6      	uxthmi	r6, r6
 800cf8a:	e7e6      	b.n	800cf5a <_printf_i+0x182>
 800cf8c:	4615      	mov	r5, r2
 800cf8e:	e7bb      	b.n	800cf08 <_printf_i+0x130>
 800cf90:	682b      	ldr	r3, [r5, #0]
 800cf92:	6826      	ldr	r6, [r4, #0]
 800cf94:	6961      	ldr	r1, [r4, #20]
 800cf96:	1d18      	adds	r0, r3, #4
 800cf98:	6028      	str	r0, [r5, #0]
 800cf9a:	0635      	lsls	r5, r6, #24
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	d501      	bpl.n	800cfa4 <_printf_i+0x1cc>
 800cfa0:	6019      	str	r1, [r3, #0]
 800cfa2:	e002      	b.n	800cfaa <_printf_i+0x1d2>
 800cfa4:	0670      	lsls	r0, r6, #25
 800cfa6:	d5fb      	bpl.n	800cfa0 <_printf_i+0x1c8>
 800cfa8:	8019      	strh	r1, [r3, #0]
 800cfaa:	2300      	movs	r3, #0
 800cfac:	6123      	str	r3, [r4, #16]
 800cfae:	4615      	mov	r5, r2
 800cfb0:	e7ba      	b.n	800cf28 <_printf_i+0x150>
 800cfb2:	682b      	ldr	r3, [r5, #0]
 800cfb4:	1d1a      	adds	r2, r3, #4
 800cfb6:	602a      	str	r2, [r5, #0]
 800cfb8:	681d      	ldr	r5, [r3, #0]
 800cfba:	6862      	ldr	r2, [r4, #4]
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f7f3 f996 	bl	80002f0 <memchr>
 800cfc4:	b108      	cbz	r0, 800cfca <_printf_i+0x1f2>
 800cfc6:	1b40      	subs	r0, r0, r5
 800cfc8:	6060      	str	r0, [r4, #4]
 800cfca:	6863      	ldr	r3, [r4, #4]
 800cfcc:	6123      	str	r3, [r4, #16]
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfd4:	e7a8      	b.n	800cf28 <_printf_i+0x150>
 800cfd6:	6923      	ldr	r3, [r4, #16]
 800cfd8:	462a      	mov	r2, r5
 800cfda:	4649      	mov	r1, r9
 800cfdc:	4640      	mov	r0, r8
 800cfde:	47d0      	blx	sl
 800cfe0:	3001      	adds	r0, #1
 800cfe2:	d0ab      	beq.n	800cf3c <_printf_i+0x164>
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	079b      	lsls	r3, r3, #30
 800cfe8:	d413      	bmi.n	800d012 <_printf_i+0x23a>
 800cfea:	68e0      	ldr	r0, [r4, #12]
 800cfec:	9b03      	ldr	r3, [sp, #12]
 800cfee:	4298      	cmp	r0, r3
 800cff0:	bfb8      	it	lt
 800cff2:	4618      	movlt	r0, r3
 800cff4:	e7a4      	b.n	800cf40 <_printf_i+0x168>
 800cff6:	2301      	movs	r3, #1
 800cff8:	4632      	mov	r2, r6
 800cffa:	4649      	mov	r1, r9
 800cffc:	4640      	mov	r0, r8
 800cffe:	47d0      	blx	sl
 800d000:	3001      	adds	r0, #1
 800d002:	d09b      	beq.n	800cf3c <_printf_i+0x164>
 800d004:	3501      	adds	r5, #1
 800d006:	68e3      	ldr	r3, [r4, #12]
 800d008:	9903      	ldr	r1, [sp, #12]
 800d00a:	1a5b      	subs	r3, r3, r1
 800d00c:	42ab      	cmp	r3, r5
 800d00e:	dcf2      	bgt.n	800cff6 <_printf_i+0x21e>
 800d010:	e7eb      	b.n	800cfea <_printf_i+0x212>
 800d012:	2500      	movs	r5, #0
 800d014:	f104 0619 	add.w	r6, r4, #25
 800d018:	e7f5      	b.n	800d006 <_printf_i+0x22e>
 800d01a:	bf00      	nop
 800d01c:	0800d795 	.word	0x0800d795
 800d020:	0800d7a6 	.word	0x0800d7a6

0800d024 <memcpy>:
 800d024:	440a      	add	r2, r1
 800d026:	4291      	cmp	r1, r2
 800d028:	f100 33ff 	add.w	r3, r0, #4294967295
 800d02c:	d100      	bne.n	800d030 <memcpy+0xc>
 800d02e:	4770      	bx	lr
 800d030:	b510      	push	{r4, lr}
 800d032:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d03a:	4291      	cmp	r1, r2
 800d03c:	d1f9      	bne.n	800d032 <memcpy+0xe>
 800d03e:	bd10      	pop	{r4, pc}

0800d040 <memmove>:
 800d040:	4288      	cmp	r0, r1
 800d042:	b510      	push	{r4, lr}
 800d044:	eb01 0402 	add.w	r4, r1, r2
 800d048:	d902      	bls.n	800d050 <memmove+0x10>
 800d04a:	4284      	cmp	r4, r0
 800d04c:	4623      	mov	r3, r4
 800d04e:	d807      	bhi.n	800d060 <memmove+0x20>
 800d050:	1e43      	subs	r3, r0, #1
 800d052:	42a1      	cmp	r1, r4
 800d054:	d008      	beq.n	800d068 <memmove+0x28>
 800d056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d05a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d05e:	e7f8      	b.n	800d052 <memmove+0x12>
 800d060:	4402      	add	r2, r0
 800d062:	4601      	mov	r1, r0
 800d064:	428a      	cmp	r2, r1
 800d066:	d100      	bne.n	800d06a <memmove+0x2a>
 800d068:	bd10      	pop	{r4, pc}
 800d06a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d06e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d072:	e7f7      	b.n	800d064 <memmove+0x24>

0800d074 <_free_r>:
 800d074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d076:	2900      	cmp	r1, #0
 800d078:	d044      	beq.n	800d104 <_free_r+0x90>
 800d07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d07e:	9001      	str	r0, [sp, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	f1a1 0404 	sub.w	r4, r1, #4
 800d086:	bfb8      	it	lt
 800d088:	18e4      	addlt	r4, r4, r3
 800d08a:	f000 f913 	bl	800d2b4 <__malloc_lock>
 800d08e:	4a1e      	ldr	r2, [pc, #120]	; (800d108 <_free_r+0x94>)
 800d090:	9801      	ldr	r0, [sp, #4]
 800d092:	6813      	ldr	r3, [r2, #0]
 800d094:	b933      	cbnz	r3, 800d0a4 <_free_r+0x30>
 800d096:	6063      	str	r3, [r4, #4]
 800d098:	6014      	str	r4, [r2, #0]
 800d09a:	b003      	add	sp, #12
 800d09c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0a0:	f000 b90e 	b.w	800d2c0 <__malloc_unlock>
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	d908      	bls.n	800d0ba <_free_r+0x46>
 800d0a8:	6825      	ldr	r5, [r4, #0]
 800d0aa:	1961      	adds	r1, r4, r5
 800d0ac:	428b      	cmp	r3, r1
 800d0ae:	bf01      	itttt	eq
 800d0b0:	6819      	ldreq	r1, [r3, #0]
 800d0b2:	685b      	ldreq	r3, [r3, #4]
 800d0b4:	1949      	addeq	r1, r1, r5
 800d0b6:	6021      	streq	r1, [r4, #0]
 800d0b8:	e7ed      	b.n	800d096 <_free_r+0x22>
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	b10b      	cbz	r3, 800d0c4 <_free_r+0x50>
 800d0c0:	42a3      	cmp	r3, r4
 800d0c2:	d9fa      	bls.n	800d0ba <_free_r+0x46>
 800d0c4:	6811      	ldr	r1, [r2, #0]
 800d0c6:	1855      	adds	r5, r2, r1
 800d0c8:	42a5      	cmp	r5, r4
 800d0ca:	d10b      	bne.n	800d0e4 <_free_r+0x70>
 800d0cc:	6824      	ldr	r4, [r4, #0]
 800d0ce:	4421      	add	r1, r4
 800d0d0:	1854      	adds	r4, r2, r1
 800d0d2:	42a3      	cmp	r3, r4
 800d0d4:	6011      	str	r1, [r2, #0]
 800d0d6:	d1e0      	bne.n	800d09a <_free_r+0x26>
 800d0d8:	681c      	ldr	r4, [r3, #0]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	6053      	str	r3, [r2, #4]
 800d0de:	4421      	add	r1, r4
 800d0e0:	6011      	str	r1, [r2, #0]
 800d0e2:	e7da      	b.n	800d09a <_free_r+0x26>
 800d0e4:	d902      	bls.n	800d0ec <_free_r+0x78>
 800d0e6:	230c      	movs	r3, #12
 800d0e8:	6003      	str	r3, [r0, #0]
 800d0ea:	e7d6      	b.n	800d09a <_free_r+0x26>
 800d0ec:	6825      	ldr	r5, [r4, #0]
 800d0ee:	1961      	adds	r1, r4, r5
 800d0f0:	428b      	cmp	r3, r1
 800d0f2:	bf04      	itt	eq
 800d0f4:	6819      	ldreq	r1, [r3, #0]
 800d0f6:	685b      	ldreq	r3, [r3, #4]
 800d0f8:	6063      	str	r3, [r4, #4]
 800d0fa:	bf04      	itt	eq
 800d0fc:	1949      	addeq	r1, r1, r5
 800d0fe:	6021      	streq	r1, [r4, #0]
 800d100:	6054      	str	r4, [r2, #4]
 800d102:	e7ca      	b.n	800d09a <_free_r+0x26>
 800d104:	b003      	add	sp, #12
 800d106:	bd30      	pop	{r4, r5, pc}
 800d108:	240051e0 	.word	0x240051e0

0800d10c <sbrk_aligned>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	4e0e      	ldr	r6, [pc, #56]	; (800d148 <sbrk_aligned+0x3c>)
 800d110:	460c      	mov	r4, r1
 800d112:	6831      	ldr	r1, [r6, #0]
 800d114:	4605      	mov	r5, r0
 800d116:	b911      	cbnz	r1, 800d11e <sbrk_aligned+0x12>
 800d118:	f000 f8bc 	bl	800d294 <_sbrk_r>
 800d11c:	6030      	str	r0, [r6, #0]
 800d11e:	4621      	mov	r1, r4
 800d120:	4628      	mov	r0, r5
 800d122:	f000 f8b7 	bl	800d294 <_sbrk_r>
 800d126:	1c43      	adds	r3, r0, #1
 800d128:	d00a      	beq.n	800d140 <sbrk_aligned+0x34>
 800d12a:	1cc4      	adds	r4, r0, #3
 800d12c:	f024 0403 	bic.w	r4, r4, #3
 800d130:	42a0      	cmp	r0, r4
 800d132:	d007      	beq.n	800d144 <sbrk_aligned+0x38>
 800d134:	1a21      	subs	r1, r4, r0
 800d136:	4628      	mov	r0, r5
 800d138:	f000 f8ac 	bl	800d294 <_sbrk_r>
 800d13c:	3001      	adds	r0, #1
 800d13e:	d101      	bne.n	800d144 <sbrk_aligned+0x38>
 800d140:	f04f 34ff 	mov.w	r4, #4294967295
 800d144:	4620      	mov	r0, r4
 800d146:	bd70      	pop	{r4, r5, r6, pc}
 800d148:	240051e4 	.word	0x240051e4

0800d14c <_malloc_r>:
 800d14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d150:	1ccd      	adds	r5, r1, #3
 800d152:	f025 0503 	bic.w	r5, r5, #3
 800d156:	3508      	adds	r5, #8
 800d158:	2d0c      	cmp	r5, #12
 800d15a:	bf38      	it	cc
 800d15c:	250c      	movcc	r5, #12
 800d15e:	2d00      	cmp	r5, #0
 800d160:	4607      	mov	r7, r0
 800d162:	db01      	blt.n	800d168 <_malloc_r+0x1c>
 800d164:	42a9      	cmp	r1, r5
 800d166:	d905      	bls.n	800d174 <_malloc_r+0x28>
 800d168:	230c      	movs	r3, #12
 800d16a:	603b      	str	r3, [r7, #0]
 800d16c:	2600      	movs	r6, #0
 800d16e:	4630      	mov	r0, r6
 800d170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d174:	4e2e      	ldr	r6, [pc, #184]	; (800d230 <_malloc_r+0xe4>)
 800d176:	f000 f89d 	bl	800d2b4 <__malloc_lock>
 800d17a:	6833      	ldr	r3, [r6, #0]
 800d17c:	461c      	mov	r4, r3
 800d17e:	bb34      	cbnz	r4, 800d1ce <_malloc_r+0x82>
 800d180:	4629      	mov	r1, r5
 800d182:	4638      	mov	r0, r7
 800d184:	f7ff ffc2 	bl	800d10c <sbrk_aligned>
 800d188:	1c43      	adds	r3, r0, #1
 800d18a:	4604      	mov	r4, r0
 800d18c:	d14d      	bne.n	800d22a <_malloc_r+0xde>
 800d18e:	6834      	ldr	r4, [r6, #0]
 800d190:	4626      	mov	r6, r4
 800d192:	2e00      	cmp	r6, #0
 800d194:	d140      	bne.n	800d218 <_malloc_r+0xcc>
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	4631      	mov	r1, r6
 800d19a:	4638      	mov	r0, r7
 800d19c:	eb04 0803 	add.w	r8, r4, r3
 800d1a0:	f000 f878 	bl	800d294 <_sbrk_r>
 800d1a4:	4580      	cmp	r8, r0
 800d1a6:	d13a      	bne.n	800d21e <_malloc_r+0xd2>
 800d1a8:	6821      	ldr	r1, [r4, #0]
 800d1aa:	3503      	adds	r5, #3
 800d1ac:	1a6d      	subs	r5, r5, r1
 800d1ae:	f025 0503 	bic.w	r5, r5, #3
 800d1b2:	3508      	adds	r5, #8
 800d1b4:	2d0c      	cmp	r5, #12
 800d1b6:	bf38      	it	cc
 800d1b8:	250c      	movcc	r5, #12
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	4638      	mov	r0, r7
 800d1be:	f7ff ffa5 	bl	800d10c <sbrk_aligned>
 800d1c2:	3001      	adds	r0, #1
 800d1c4:	d02b      	beq.n	800d21e <_malloc_r+0xd2>
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	442b      	add	r3, r5
 800d1ca:	6023      	str	r3, [r4, #0]
 800d1cc:	e00e      	b.n	800d1ec <_malloc_r+0xa0>
 800d1ce:	6822      	ldr	r2, [r4, #0]
 800d1d0:	1b52      	subs	r2, r2, r5
 800d1d2:	d41e      	bmi.n	800d212 <_malloc_r+0xc6>
 800d1d4:	2a0b      	cmp	r2, #11
 800d1d6:	d916      	bls.n	800d206 <_malloc_r+0xba>
 800d1d8:	1961      	adds	r1, r4, r5
 800d1da:	42a3      	cmp	r3, r4
 800d1dc:	6025      	str	r5, [r4, #0]
 800d1de:	bf18      	it	ne
 800d1e0:	6059      	strne	r1, [r3, #4]
 800d1e2:	6863      	ldr	r3, [r4, #4]
 800d1e4:	bf08      	it	eq
 800d1e6:	6031      	streq	r1, [r6, #0]
 800d1e8:	5162      	str	r2, [r4, r5]
 800d1ea:	604b      	str	r3, [r1, #4]
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	f104 060b 	add.w	r6, r4, #11
 800d1f2:	f000 f865 	bl	800d2c0 <__malloc_unlock>
 800d1f6:	f026 0607 	bic.w	r6, r6, #7
 800d1fa:	1d23      	adds	r3, r4, #4
 800d1fc:	1af2      	subs	r2, r6, r3
 800d1fe:	d0b6      	beq.n	800d16e <_malloc_r+0x22>
 800d200:	1b9b      	subs	r3, r3, r6
 800d202:	50a3      	str	r3, [r4, r2]
 800d204:	e7b3      	b.n	800d16e <_malloc_r+0x22>
 800d206:	6862      	ldr	r2, [r4, #4]
 800d208:	42a3      	cmp	r3, r4
 800d20a:	bf0c      	ite	eq
 800d20c:	6032      	streq	r2, [r6, #0]
 800d20e:	605a      	strne	r2, [r3, #4]
 800d210:	e7ec      	b.n	800d1ec <_malloc_r+0xa0>
 800d212:	4623      	mov	r3, r4
 800d214:	6864      	ldr	r4, [r4, #4]
 800d216:	e7b2      	b.n	800d17e <_malloc_r+0x32>
 800d218:	4634      	mov	r4, r6
 800d21a:	6876      	ldr	r6, [r6, #4]
 800d21c:	e7b9      	b.n	800d192 <_malloc_r+0x46>
 800d21e:	230c      	movs	r3, #12
 800d220:	603b      	str	r3, [r7, #0]
 800d222:	4638      	mov	r0, r7
 800d224:	f000 f84c 	bl	800d2c0 <__malloc_unlock>
 800d228:	e7a1      	b.n	800d16e <_malloc_r+0x22>
 800d22a:	6025      	str	r5, [r4, #0]
 800d22c:	e7de      	b.n	800d1ec <_malloc_r+0xa0>
 800d22e:	bf00      	nop
 800d230:	240051e0 	.word	0x240051e0

0800d234 <_realloc_r>:
 800d234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d238:	4680      	mov	r8, r0
 800d23a:	4614      	mov	r4, r2
 800d23c:	460e      	mov	r6, r1
 800d23e:	b921      	cbnz	r1, 800d24a <_realloc_r+0x16>
 800d240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d244:	4611      	mov	r1, r2
 800d246:	f7ff bf81 	b.w	800d14c <_malloc_r>
 800d24a:	b92a      	cbnz	r2, 800d258 <_realloc_r+0x24>
 800d24c:	f7ff ff12 	bl	800d074 <_free_r>
 800d250:	4625      	mov	r5, r4
 800d252:	4628      	mov	r0, r5
 800d254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d258:	f000 f838 	bl	800d2cc <_malloc_usable_size_r>
 800d25c:	4284      	cmp	r4, r0
 800d25e:	4607      	mov	r7, r0
 800d260:	d802      	bhi.n	800d268 <_realloc_r+0x34>
 800d262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d266:	d812      	bhi.n	800d28e <_realloc_r+0x5a>
 800d268:	4621      	mov	r1, r4
 800d26a:	4640      	mov	r0, r8
 800d26c:	f7ff ff6e 	bl	800d14c <_malloc_r>
 800d270:	4605      	mov	r5, r0
 800d272:	2800      	cmp	r0, #0
 800d274:	d0ed      	beq.n	800d252 <_realloc_r+0x1e>
 800d276:	42bc      	cmp	r4, r7
 800d278:	4622      	mov	r2, r4
 800d27a:	4631      	mov	r1, r6
 800d27c:	bf28      	it	cs
 800d27e:	463a      	movcs	r2, r7
 800d280:	f7ff fed0 	bl	800d024 <memcpy>
 800d284:	4631      	mov	r1, r6
 800d286:	4640      	mov	r0, r8
 800d288:	f7ff fef4 	bl	800d074 <_free_r>
 800d28c:	e7e1      	b.n	800d252 <_realloc_r+0x1e>
 800d28e:	4635      	mov	r5, r6
 800d290:	e7df      	b.n	800d252 <_realloc_r+0x1e>
	...

0800d294 <_sbrk_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4d06      	ldr	r5, [pc, #24]	; (800d2b0 <_sbrk_r+0x1c>)
 800d298:	2300      	movs	r3, #0
 800d29a:	4604      	mov	r4, r0
 800d29c:	4608      	mov	r0, r1
 800d29e:	602b      	str	r3, [r5, #0]
 800d2a0:	f7f4 fa0e 	bl	80016c0 <_sbrk>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_sbrk_r+0x1a>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_sbrk_r+0x1a>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	240051e8 	.word	0x240051e8

0800d2b4 <__malloc_lock>:
 800d2b4:	4801      	ldr	r0, [pc, #4]	; (800d2bc <__malloc_lock+0x8>)
 800d2b6:	f000 b811 	b.w	800d2dc <__retarget_lock_acquire_recursive>
 800d2ba:	bf00      	nop
 800d2bc:	240051ec 	.word	0x240051ec

0800d2c0 <__malloc_unlock>:
 800d2c0:	4801      	ldr	r0, [pc, #4]	; (800d2c8 <__malloc_unlock+0x8>)
 800d2c2:	f000 b80c 	b.w	800d2de <__retarget_lock_release_recursive>
 800d2c6:	bf00      	nop
 800d2c8:	240051ec 	.word	0x240051ec

0800d2cc <_malloc_usable_size_r>:
 800d2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2d0:	1f18      	subs	r0, r3, #4
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bfbc      	itt	lt
 800d2d6:	580b      	ldrlt	r3, [r1, r0]
 800d2d8:	18c0      	addlt	r0, r0, r3
 800d2da:	4770      	bx	lr

0800d2dc <__retarget_lock_acquire_recursive>:
 800d2dc:	4770      	bx	lr

0800d2de <__retarget_lock_release_recursive>:
 800d2de:	4770      	bx	lr

0800d2e0 <exp>:
 800d2e0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800d2e2:	ee10 3a90 	vmov	r3, s1
 800d2e6:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800d2ea:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800d2ee:	18a2      	adds	r2, r4, r2
 800d2f0:	2a3e      	cmp	r2, #62	; 0x3e
 800d2f2:	ee10 1a10 	vmov	r1, s0
 800d2f6:	d922      	bls.n	800d33e <exp+0x5e>
 800d2f8:	2a00      	cmp	r2, #0
 800d2fa:	da06      	bge.n	800d30a <exp+0x2a>
 800d2fc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d300:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d304:	b004      	add	sp, #16
 800d306:	bcf0      	pop	{r4, r5, r6, r7}
 800d308:	4770      	bx	lr
 800d30a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800d30e:	f04f 0000 	mov.w	r0, #0
 800d312:	d913      	bls.n	800d33c <exp+0x5c>
 800d314:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800d318:	bf08      	it	eq
 800d31a:	4281      	cmpeq	r1, r0
 800d31c:	f000 80a0 	beq.w	800d460 <exp+0x180>
 800d320:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d324:	4294      	cmp	r4, r2
 800d326:	d0e9      	beq.n	800d2fc <exp+0x1c>
 800d328:	4283      	cmp	r3, r0
 800d32a:	da03      	bge.n	800d334 <exp+0x54>
 800d32c:	b004      	add	sp, #16
 800d32e:	bcf0      	pop	{r4, r5, r6, r7}
 800d330:	f000 b8c6 	b.w	800d4c0 <__math_uflow>
 800d334:	b004      	add	sp, #16
 800d336:	bcf0      	pop	{r4, r5, r6, r7}
 800d338:	f000 b8ca 	b.w	800d4d0 <__math_oflow>
 800d33c:	4604      	mov	r4, r0
 800d33e:	4950      	ldr	r1, [pc, #320]	; (800d480 <exp+0x1a0>)
 800d340:	ed91 6b02 	vldr	d6, [r1, #8]
 800d344:	ed91 5b00 	vldr	d5, [r1]
 800d348:	eeb0 7b46 	vmov.f64	d7, d6
 800d34c:	eea5 7b00 	vfma.f64	d7, d5, d0
 800d350:	ee17 5a10 	vmov	r5, s14
 800d354:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d358:	ed91 6b04 	vldr	d6, [r1, #16]
 800d35c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800d360:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d364:	ed91 6b06 	vldr	d6, [r1, #24]
 800d368:	18d8      	adds	r0, r3, r3
 800d36a:	f100 030f 	add.w	r3, r0, #15
 800d36e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800d372:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d376:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800d37a:	ee20 7b00 	vmul.f64	d7, d0, d0
 800d37e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800d382:	ed91 5b08 	vldr	d5, [r1, #32]
 800d386:	ee30 6b06 	vadd.f64	d6, d0, d6
 800d38a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d38e:	eea4 5b00 	vfma.f64	d5, d4, d0
 800d392:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800d396:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d39a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800d39e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800d3a2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800d3a6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800d3aa:	eea4 5b00 	vfma.f64	d5, d4, d0
 800d3ae:	2600      	movs	r6, #0
 800d3b0:	19f2      	adds	r2, r6, r7
 800d3b2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800d3b6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d3ba:	2c00      	cmp	r4, #0
 800d3bc:	d14b      	bne.n	800d456 <exp+0x176>
 800d3be:	42b5      	cmp	r5, r6
 800d3c0:	db10      	blt.n	800d3e4 <exp+0x104>
 800d3c2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800d3c6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800d468 <exp+0x188>
 800d3ca:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	ec41 0b10 	vmov	d0, r0, r1
 800d3d4:	eea6 0b00 	vfma.f64	d0, d6, d0
 800d3d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d3dc:	b004      	add	sp, #16
 800d3de:	bcf0      	pop	{r4, r5, r6, r7}
 800d3e0:	f000 b88a 	b.w	800d4f8 <__math_check_oflow>
 800d3e4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d3e8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	ec41 0b17 	vmov	d7, r0, r1
 800d3f2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d3f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d3fa:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d3fe:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800d402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d406:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d470 <exp+0x190>
 800d40a:	d51e      	bpl.n	800d44a <exp+0x16a>
 800d40c:	ee35 3b04 	vadd.f64	d3, d5, d4
 800d410:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d414:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d418:	ee34 6b43 	vsub.f64	d6, d4, d3
 800d41c:	ee36 5b05 	vadd.f64	d5, d6, d5
 800d420:	ee35 5b07 	vadd.f64	d5, d5, d7
 800d424:	ee35 5b03 	vadd.f64	d5, d5, d3
 800d428:	ee35 5b44 	vsub.f64	d5, d5, d4
 800d42c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 800d430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d434:	d101      	bne.n	800d43a <exp+0x15a>
 800d436:	ed9f 5b10 	vldr	d5, [pc, #64]	; 800d478 <exp+0x198>
 800d43a:	ed8d 0b00 	vstr	d0, [sp]
 800d43e:	ed9d 7b00 	vldr	d7, [sp]
 800d442:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d446:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d44a:	ee25 0b00 	vmul.f64	d0, d5, d0
 800d44e:	b004      	add	sp, #16
 800d450:	bcf0      	pop	{r4, r5, r6, r7}
 800d452:	f000 b845 	b.w	800d4e0 <__math_check_uflow>
 800d456:	ec43 2b10 	vmov	d0, r2, r3
 800d45a:	eea6 0b00 	vfma.f64	d0, d6, d0
 800d45e:	e751      	b.n	800d304 <exp+0x24>
 800d460:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d478 <exp+0x198>
 800d464:	e74e      	b.n	800d304 <exp+0x24>
 800d466:	bf00      	nop
 800d468:	00000000 	.word	0x00000000
 800d46c:	7f000000 	.word	0x7f000000
 800d470:	00000000 	.word	0x00000000
 800d474:	00100000 	.word	0x00100000
	...
 800d480:	0800d7b8 	.word	0x0800d7b8

0800d484 <with_errno>:
 800d484:	b513      	push	{r0, r1, r4, lr}
 800d486:	4604      	mov	r4, r0
 800d488:	ed8d 0b00 	vstr	d0, [sp]
 800d48c:	f7ff fa74 	bl	800c978 <__errno>
 800d490:	ed9d 0b00 	vldr	d0, [sp]
 800d494:	6004      	str	r4, [r0, #0]
 800d496:	b002      	add	sp, #8
 800d498:	bd10      	pop	{r4, pc}

0800d49a <xflow>:
 800d49a:	b082      	sub	sp, #8
 800d49c:	b158      	cbz	r0, 800d4b6 <xflow+0x1c>
 800d49e:	eeb1 7b40 	vneg.f64	d7, d0
 800d4a2:	ed8d 7b00 	vstr	d7, [sp]
 800d4a6:	ed9d 7b00 	vldr	d7, [sp]
 800d4aa:	2022      	movs	r0, #34	; 0x22
 800d4ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d4b0:	b002      	add	sp, #8
 800d4b2:	f7ff bfe7 	b.w	800d484 <with_errno>
 800d4b6:	eeb0 7b40 	vmov.f64	d7, d0
 800d4ba:	e7f2      	b.n	800d4a2 <xflow+0x8>
 800d4bc:	0000      	movs	r0, r0
	...

0800d4c0 <__math_uflow>:
 800d4c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d4c8 <__math_uflow+0x8>
 800d4c4:	f7ff bfe9 	b.w	800d49a <xflow>
 800d4c8:	00000000 	.word	0x00000000
 800d4cc:	10000000 	.word	0x10000000

0800d4d0 <__math_oflow>:
 800d4d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d4d8 <__math_oflow+0x8>
 800d4d4:	f7ff bfe1 	b.w	800d49a <xflow>
 800d4d8:	00000000 	.word	0x00000000
 800d4dc:	70000000 	.word	0x70000000

0800d4e0 <__math_check_uflow>:
 800d4e0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e8:	d102      	bne.n	800d4f0 <__math_check_uflow+0x10>
 800d4ea:	2022      	movs	r0, #34	; 0x22
 800d4ec:	f7ff bfca 	b.w	800d484 <with_errno>
 800d4f0:	4770      	bx	lr
 800d4f2:	0000      	movs	r0, r0
 800d4f4:	0000      	movs	r0, r0
	...

0800d4f8 <__math_check_oflow>:
 800d4f8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800d518 <__math_check_oflow+0x20>
 800d4fc:	eeb0 7bc0 	vabs.f64	d7, d0
 800d500:	eeb4 7b46 	vcmp.f64	d7, d6
 800d504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d508:	dd02      	ble.n	800d510 <__math_check_oflow+0x18>
 800d50a:	2022      	movs	r0, #34	; 0x22
 800d50c:	f7ff bfba 	b.w	800d484 <with_errno>
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	f3af 8000 	nop.w
 800d518:	ffffffff 	.word	0xffffffff
 800d51c:	7fefffff 	.word	0x7fefffff

0800d520 <fmaxf>:
 800d520:	b508      	push	{r3, lr}
 800d522:	ed2d 8b02 	vpush	{d8}
 800d526:	eeb0 8a40 	vmov.f32	s16, s0
 800d52a:	eef0 8a60 	vmov.f32	s17, s1
 800d52e:	f000 f813 	bl	800d558 <__fpclassifyf>
 800d532:	b148      	cbz	r0, 800d548 <fmaxf+0x28>
 800d534:	eeb0 0a68 	vmov.f32	s0, s17
 800d538:	f000 f80e 	bl	800d558 <__fpclassifyf>
 800d53c:	b130      	cbz	r0, 800d54c <fmaxf+0x2c>
 800d53e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d546:	dc01      	bgt.n	800d54c <fmaxf+0x2c>
 800d548:	eeb0 8a68 	vmov.f32	s16, s17
 800d54c:	eeb0 0a48 	vmov.f32	s0, s16
 800d550:	ecbd 8b02 	vpop	{d8}
 800d554:	bd08      	pop	{r3, pc}
	...

0800d558 <__fpclassifyf>:
 800d558:	ee10 3a10 	vmov	r3, s0
 800d55c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800d560:	d00d      	beq.n	800d57e <__fpclassifyf+0x26>
 800d562:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800d566:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d56a:	d30a      	bcc.n	800d582 <__fpclassifyf+0x2a>
 800d56c:	4b07      	ldr	r3, [pc, #28]	; (800d58c <__fpclassifyf+0x34>)
 800d56e:	1e42      	subs	r2, r0, #1
 800d570:	429a      	cmp	r2, r3
 800d572:	d908      	bls.n	800d586 <__fpclassifyf+0x2e>
 800d574:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800d578:	4258      	negs	r0, r3
 800d57a:	4158      	adcs	r0, r3
 800d57c:	4770      	bx	lr
 800d57e:	2002      	movs	r0, #2
 800d580:	4770      	bx	lr
 800d582:	2004      	movs	r0, #4
 800d584:	4770      	bx	lr
 800d586:	2003      	movs	r0, #3
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	007ffffe 	.word	0x007ffffe

0800d590 <sqrtf>:
 800d590:	b508      	push	{r3, lr}
 800d592:	ed2d 8b02 	vpush	{d8}
 800d596:	eeb0 8a40 	vmov.f32	s16, s0
 800d59a:	f000 f817 	bl	800d5cc <__ieee754_sqrtf>
 800d59e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a6:	d60c      	bvs.n	800d5c2 <sqrtf+0x32>
 800d5a8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d5c8 <sqrtf+0x38>
 800d5ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b4:	d505      	bpl.n	800d5c2 <sqrtf+0x32>
 800d5b6:	f7ff f9df 	bl	800c978 <__errno>
 800d5ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d5be:	2321      	movs	r3, #33	; 0x21
 800d5c0:	6003      	str	r3, [r0, #0]
 800d5c2:	ecbd 8b02 	vpop	{d8}
 800d5c6:	bd08      	pop	{r3, pc}
 800d5c8:	00000000 	.word	0x00000000

0800d5cc <__ieee754_sqrtf>:
 800d5cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d5d0:	4770      	bx	lr
	...

0800d5d4 <_init>:
 800d5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d6:	bf00      	nop
 800d5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5da:	bc08      	pop	{r3}
 800d5dc:	469e      	mov	lr, r3
 800d5de:	4770      	bx	lr

0800d5e0 <_fini>:
 800d5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e2:	bf00      	nop
 800d5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e6:	bc08      	pop	{r3}
 800d5e8:	469e      	mov	lr, r3
 800d5ea:	4770      	bx	lr
