
STM32H750B-DK-Emlearn-HojaOseb-Cas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800d878  0800d878  0001d878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800dfe8  0800dfe8  0001dfe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800dfec  0800dfec  0001dfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00003380  24000000  0800dff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f0c  24003380  08011370  00023380  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400528c  08011370  0002528c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00023380  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d47a  00000000  00000000  000233ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003ad6  00000000  00000000  00040828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001698  00000000  00000000  00044300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001500  00000000  00000000  00045998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c807  00000000  00000000  00046e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00020b45  00000000  00000000  0008369f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001785cd  00000000  00000000  000a41e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0021c7b1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006564  00000000  00000000  0021c804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003380 	.word	0x24003380
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d85c 	.word	0x0800d85c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003384 	.word	0x24003384
 80002dc:	0800d85c 	.word	0x0800d85c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <eml_net_relu>:
    int32_t activations_length;
} EmlNet;


static float
eml_net_relu(float in) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	ed87 0a01 	vstr	s0, [r7, #4]
    return (in <= 0.0f) ? 0.0f : in; 
 800039a:	edd7 7a01 	vldr	s15, [r7, #4]
 800039e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a6:	d802      	bhi.n	80003ae <eml_net_relu+0x1e>
 80003a8:	f04f 0300 	mov.w	r3, #0
 80003ac:	e000      	b.n	80003b0 <eml_net_relu+0x20>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	ee07 3a90 	vmov	s15, r3
}
 80003b4:	eeb0 0a67 	vmov.f32	s0, s15
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <eml_net_expit>:

static float
eml_net_expit(float in) {
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / (1.0f + expf(-in));
 80003cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80003d0:	eef1 7a67 	vneg.f32	s15, s15
 80003d4:	eeb0 0a67 	vmov.f32	s0, s15
 80003d8:	f00c ffaa 	bl	800d330 <expf>
 80003dc:	eef0 7a40 	vmov.f32	s15, s0
 80003e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80003e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80003ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80003f0:	eef0 7a66 	vmov.f32	s15, s13
}
 80003f4:	eeb0 0a67 	vmov.f32	s0, s15
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <eml_net_tanh>:

static float
eml_net_tanh(float in) {
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	ed87 0a01 	vstr	s0, [r7, #4]
    return tanhf(in); 
 8000408:	ed97 0a01 	vldr	s0, [r7, #4]
 800040c:	f00d f86a 	bl	800d4e4 <tanhf>
 8000410:	eef0 7a40 	vmov.f32	s15, s0
}
 8000414:	eeb0 0a67 	vmov.f32	s0, s15
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <eml_net_softmax>:

static EmlError
eml_net_softmax(float *input, size_t input_length)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
    EML_PRECONDITION(input, EmlUninitialized);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d101      	bne.n	8000434 <eml_net_softmax+0x14>
 8000430:	2303      	movs	r3, #3
 8000432:	e06e      	b.n	8000512 <eml_net_softmax+0xf2>

    float input_max = -INFINITY;
 8000434:	4b39      	ldr	r3, [pc, #228]	; (800051c <eml_net_softmax+0xfc>)
 8000436:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
 800043c:	e015      	b.n	800046a <eml_net_softmax+0x4a>
        if (input[i] > input_max) {
 800043e:	69bb      	ldr	r3, [r7, #24]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	edd3 7a00 	vldr	s15, [r3]
 800044a:	ed97 7a07 	vldr	s14, [r7, #28]
 800044e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000456:	d505      	bpl.n	8000464 <eml_net_softmax+0x44>
            input_max = input[i];
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	4413      	add	r3, r2
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 8000464:	69bb      	ldr	r3, [r7, #24]
 8000466:	3301      	adds	r3, #1
 8000468:	61bb      	str	r3, [r7, #24]
 800046a:	69ba      	ldr	r2, [r7, #24]
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	429a      	cmp	r2, r3
 8000470:	d3e5      	bcc.n	800043e <eml_net_softmax+0x1e>
        }
    }

    float sum = 0.0f;
 8000472:	f04f 0300 	mov.w	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 8000478:	2300      	movs	r3, #0
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	e018      	b.n	80004b0 <eml_net_softmax+0x90>
        sum += expf(input[i] - input_max);
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	ed93 7a00 	vldr	s14, [r3]
 800048a:	edd7 7a07 	vldr	s15, [r7, #28]
 800048e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000492:	eeb0 0a67 	vmov.f32	s0, s15
 8000496:	f00c ff4b 	bl	800d330 <expf>
 800049a:	eeb0 7a40 	vmov.f32	s14, s0
 800049e:	edd7 7a05 	vldr	s15, [r7, #20]
 80004a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80004a6:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	3301      	adds	r3, #1
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693a      	ldr	r2, [r7, #16]
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d3e2      	bcc.n	800047e <eml_net_softmax+0x5e>
    }

    const float offset = input_max + logf(sum);
 80004b8:	ed97 0a05 	vldr	s0, [r7, #20]
 80004bc:	f00c ffac 	bl	800d418 <logf>
 80004c0:	eeb0 7a40 	vmov.f32	s14, s0
 80004c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80004c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80004cc:	edc7 7a02 	vstr	s15, [r7, #8]
    for (size_t i = 0; i < input_length; i++) {
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e018      	b.n	8000508 <eml_net_softmax+0xe8>
        input[i] = expf(input[i] - offset);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	ed93 7a00 	vldr	s14, [r3]
 80004e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80004e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	18d4      	adds	r4, r2, r3
 80004f2:	eeb0 0a67 	vmov.f32	s0, s15
 80004f6:	f00c ff1b 	bl	800d330 <expf>
 80004fa:	eef0 7a40 	vmov.f32	s15, s0
 80004fe:	edc4 7a00 	vstr	s15, [r4]
    for (size_t i = 0; i < input_length; i++) {
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3301      	adds	r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	d3e2      	bcc.n	80004d6 <eml_net_softmax+0xb6>
    }

    return EmlOk;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3724      	adds	r7, #36	; 0x24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	bf00      	nop
 800051c:	ff800000 	.word	0xff800000

08000520 <eml_net_argmax>:

int32_t
eml_net_argmax(const float *values, int32_t values_length) {
 8000520:	b480      	push	{r7}
 8000522:	b087      	sub	sp, #28
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]

    float vmax = -INFINITY;
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <eml_net_argmax+0x60>)
 800052c:	617b      	str	r3, [r7, #20]
    int32_t argmax = -1;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e017      	b.n	800056a <eml_net_argmax+0x4a>
        if (values[i] > vmax) {
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	edd3 7a00 	vldr	s15, [r3]
 8000546:	ed97 7a05 	vldr	s14, [r7, #20]
 800054a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000552:	d507      	bpl.n	8000564 <eml_net_argmax+0x44>
            vmax = values[i];
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	617b      	str	r3, [r7, #20]
            argmax = i;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	dbe3      	blt.n	800053a <eml_net_argmax+0x1a>
        }
    }
    return argmax;
 8000572:	693b      	ldr	r3, [r7, #16]
}
 8000574:	4618      	mov	r0, r3
 8000576:	371c      	adds	r7, #28
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	ff800000 	.word	0xff800000

08000584 <eml_net_valid>:


static bool
eml_net_valid(EmlNet *model) {
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    bool not_null = model->layers && model->activations1 && model->activations2;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d009      	beq.n	80005a8 <eml_net_valid+0x24>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d005      	beq.n	80005a8 <eml_net_valid+0x24>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <eml_net_valid+0x24>
 80005a4:	2301      	movs	r3, #1
 80005a6:	e000      	b.n	80005aa <eml_net_valid+0x26>
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	73fb      	strb	r3, [r7, #15]
    return not_null;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <eml_net_outputs>:

static inline int32_t
eml_net_outputs(EmlNet *model) {
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
    return model->layers[model->n_layers-1].n_outputs;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	460b      	mov	r3, r1
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	3b14      	subs	r3, #20
 80005de:	4413      	add	r3, r2
 80005e0:	681b      	ldr	r3, [r3, #0]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <eml_net_find_largest_layer>:
    return n_outputs;
}

// Calculate size of activation value arrays
static int32_t
eml_net_find_largest_layer(EmlNet *model) {
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
    int32_t largest = -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	e02e      	b.n	8000660 <eml_net_find_largest_layer+0x72>
        if (model->layers[i].n_inputs > largest) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6859      	ldr	r1, [r3, #4]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	4613      	mov	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	da09      	bge.n	800062e <eml_net_find_largest_layer+0x40>
            largest = model->layers[i].n_inputs;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6859      	ldr	r1, [r3, #4]
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	4613      	mov	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4413      	add	r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	440b      	add	r3, r1
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	60fb      	str	r3, [r7, #12]
        }
        if (model->layers[i].n_outputs > largest) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6859      	ldr	r1, [r3, #4]
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	440b      	add	r3, r1
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	429a      	cmp	r2, r3
 8000644:	da09      	bge.n	800065a <eml_net_find_largest_layer+0x6c>
            largest = model->layers[i].n_outputs;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	4613      	mov	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	3301      	adds	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	429a      	cmp	r2, r3
 8000668:	dbcb      	blt.n	8000602 <eml_net_find_largest_layer+0x14>
        }
    }
    return largest;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <eml_net_layer_forward>:

EmlError
eml_net_layer_forward(const EmlNetLayer *layer,
                    const float *in, int32_t in_length,
                    float *out, int32_t out_length)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b08d      	sub	sp, #52	; 0x34
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	603b      	str	r3, [r7, #0]
    EML_PRECONDITION(in_length >= layer->n_inputs, EmlSizeMismatch);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	429a      	cmp	r2, r3
 800068e:	da01      	bge.n	8000694 <eml_net_layer_forward+0x1c>
 8000690:	2301      	movs	r3, #1
 8000692:	e0d3      	b.n	800083c <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(out_length >= layer->n_outputs, EmlSizeMismatch);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800069a:	429a      	cmp	r2, r3
 800069c:	da01      	bge.n	80006a2 <eml_net_layer_forward+0x2a>
 800069e:	2301      	movs	r3, #1
 80006a0:	e0cc      	b.n	800083c <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(layer->weights, EmlUninitialized);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <eml_net_layer_forward+0x36>
 80006aa:	2303      	movs	r3, #3
 80006ac:	e0c6      	b.n	800083c <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(layer->biases, EmlUninitialized);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d101      	bne.n	80006ba <eml_net_layer_forward+0x42>
 80006b6:	2303      	movs	r3, #3
 80006b8:	e0c0      	b.n	800083c <eml_net_layer_forward+0x1c4>
    //printf("weights "); print_array(layer->weights, layer->n_inputs*layer->n_outputs);
    //printf("biases "); print_array(layer->biases, layer->n_outputs);

    // TODO: matrix multiplication should be done in blocks. Ex 2x4*4x2 = 2x2
    // multiply inputs by weights
    for (int o=0; o<layer->n_outputs; o++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006be:	e040      	b.n	8000742 <eml_net_layer_forward+0xca>
        float sum = 0.0f;
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	e021      	b.n	8000710 <eml_net_layer_forward+0x98>
            const int w_idx = o+(i*layer->n_outputs); // not stored continious
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006d2:	fb02 f303 	mul.w	r3, r2, r3
 80006d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006d8:	4413      	add	r3, r2
 80006da:	617b      	str	r3, [r7, #20]
            const float w = layer->weights[w_idx];
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	613b      	str	r3, [r7, #16]
            sum += w * in[i];
 80006ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	4413      	add	r3, r2
 80006f2:	ed93 7a00 	vldr	s14, [r3]
 80006f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80006fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000706:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	3301      	adds	r3, #1
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000716:	429a      	cmp	r2, r3
 8000718:	dbd8      	blt.n	80006cc <eml_net_layer_forward+0x54>
        }

        out[o] = sum + layer->biases[o];
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	ed93 7a00 	vldr	s14, [r3]
 8000728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	4413      	add	r3, r2
 8000730:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000738:	edc3 7a00 	vstr	s15, [r3]
    for (int o=0; o<layer->n_outputs; o++) {
 800073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073e:	3301      	adds	r3, #1
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000748:	429a      	cmp	r2, r3
 800074a:	dbb9      	blt.n	80006c0 <eml_net_layer_forward+0x48>

    }

    // apply activation function
    if (layer->activation == EmlNetActivationIdentity) {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	7c1b      	ldrb	r3, [r3, #16]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d072      	beq.n	800083a <eml_net_layer_forward+0x1c2>
        // no-op
    } else if (layer->activation == EmlNetActivationRelu) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	7c1b      	ldrb	r3, [r3, #16]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d11d      	bne.n	8000798 <eml_net_layer_forward+0x120>
        for (int i=0; i<layer->n_outputs; i++) {
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
 8000760:	e014      	b.n	800078c <eml_net_layer_forward+0x114>
            out[i] = eml_net_relu(out[i]);
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	4413      	add	r3, r2
 800076a:	edd3 7a00 	vldr	s15, [r3]
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	18d4      	adds	r4, r2, r3
 8000776:	eeb0 0a67 	vmov.f32	s0, s15
 800077a:	f7ff fe09 	bl	8000390 <eml_net_relu>
 800077e:	eef0 7a40 	vmov.f32	s15, s0
 8000782:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	3301      	adds	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6a3a      	ldr	r2, [r7, #32]
 8000792:	429a      	cmp	r2, r3
 8000794:	dbe5      	blt.n	8000762 <eml_net_layer_forward+0xea>
 8000796:	e050      	b.n	800083a <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationLogistic) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	7c1b      	ldrb	r3, [r3, #16]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d11d      	bne.n	80007dc <eml_net_layer_forward+0x164>
        for (int i=0; i<layer->n_outputs; i++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	e014      	b.n	80007d0 <eml_net_layer_forward+0x158>
            out[i] = eml_net_expit(out[i]);
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	edd3 7a00 	vldr	s15, [r3]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	18d4      	adds	r4, r2, r3
 80007ba:	eeb0 0a67 	vmov.f32	s0, s15
 80007be:	f7ff fe00 	bl	80003c2 <eml_net_expit>
 80007c2:	eef0 7a40 	vmov.f32	s15, s0
 80007c6:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3301      	adds	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	69fa      	ldr	r2, [r7, #28]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dbe5      	blt.n	80007a6 <eml_net_layer_forward+0x12e>
 80007da:	e02e      	b.n	800083a <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationTanh) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	7c1b      	ldrb	r3, [r3, #16]
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d11d      	bne.n	8000820 <eml_net_layer_forward+0x1a8>
        for (int i=0; i<layer->n_outputs; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	e014      	b.n	8000814 <eml_net_layer_forward+0x19c>
            out[i] = eml_net_tanh(out[i]);
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	4413      	add	r3, r2
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	18d4      	adds	r4, r2, r3
 80007fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000802:	f7ff fdfc 	bl	80003fe <eml_net_tanh>
 8000806:	eef0 7a40 	vmov.f32	s15, s0
 800080a:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	3301      	adds	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbe5      	blt.n	80007ea <eml_net_layer_forward+0x172>
 800081e:	e00c      	b.n	800083a <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationSoftmax) {
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	7c1b      	ldrb	r3, [r3, #16]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d106      	bne.n	8000836 <eml_net_layer_forward+0x1be>
        eml_net_softmax(out, layer->n_outputs);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	6838      	ldr	r0, [r7, #0]
 8000830:	f7ff fdf6 	bl	8000420 <eml_net_softmax>
 8000834:	e001      	b.n	800083a <eml_net_layer_forward+0x1c2>
    } else {
        return EmlUnsupported;
 8000836:	2302      	movs	r3, #2
 8000838:	e000      	b.n	800083c <eml_net_layer_forward+0x1c4>
    }

    //printf("activations "); print_array(out, layer->n_outputs);

    return EmlOk;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3734      	adds	r7, #52	; 0x34
 8000840:	46bd      	mov	sp, r7
 8000842:	bd90      	pop	{r4, r7, pc}

08000844 <eml_net_infer>:


// Run inferences. Leaves results in activations2
EmlError
eml_net_infer(EmlNet *model, const float *features, int32_t features_length)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b08f      	sub	sp, #60	; 0x3c
 8000848:	af02      	add	r7, sp, #8
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
    EML_PRECONDITION(eml_net_valid(model), EmlUninitialized);
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff fe97 	bl	8000584 <eml_net_valid>
 8000856:	4603      	mov	r3, r0
 8000858:	f083 0301 	eor.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <eml_net_infer+0x22>
 8000862:	2303      	movs	r3, #3
 8000864:	e082      	b.n	800096c <eml_net_infer+0x128>
    EML_PRECONDITION(model->n_layers >= 2, EmlUnsupported);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	dc01      	bgt.n	8000872 <eml_net_infer+0x2e>
 800086e:	2302      	movs	r3, #2
 8000870:	e07c      	b.n	800096c <eml_net_infer+0x128>
    EML_PRECONDITION(features_length == model->layers[0].n_inputs, EmlSizeMismatch);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	429a      	cmp	r2, r3
 800087c:	d001      	beq.n	8000882 <eml_net_infer+0x3e>
 800087e:	2301      	movs	r3, #1
 8000880:	e074      	b.n	800096c <eml_net_infer+0x128>
    EML_PRECONDITION(model->activations_length >= eml_net_find_largest_layer(model), EmlSizeMismatch);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	691c      	ldr	r4, [r3, #16]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff feb1 	bl	80005ee <eml_net_find_largest_layer>
 800088c:	4603      	mov	r3, r0
 800088e:	429c      	cmp	r4, r3
 8000890:	da01      	bge.n	8000896 <eml_net_infer+0x52>
 8000892:	2301      	movs	r3, #1
 8000894:	e06a      	b.n	800096c <eml_net_infer+0x128>

    const int32_t buffer_length = model->activations_length; 
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    float *buffer1 = model->activations1;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	623b      	str	r3, [r7, #32]
    float *buffer2 = model->activations2;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	61fb      	str	r3, [r7, #28]

    // Input layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[0], features,
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	6858      	ldr	r0, [r3, #4]
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	f7ff fedf 	bl	8000678 <eml_net_layer_forward>
 80008ba:	4603      	mov	r3, r0
 80008bc:	76fb      	strb	r3, [r7, #27]
 80008be:	7efb      	ldrb	r3, [r7, #27]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <eml_net_infer+0x84>
 80008c4:	7efb      	ldrb	r3, [r7, #27]
 80008c6:	e051      	b.n	800096c <eml_net_infer+0x128>
                        features_length, buffer1, buffer_length));

    // Hidden layers
    for (int l=1; l<model->n_layers-1; l++) {
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008cc:	e02e      	b.n	800092c <eml_net_infer+0xe8>
        const EmlNetLayer *layer = &model->layers[l];
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6859      	ldr	r1, [r3, #4]
 80008d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	617b      	str	r3, [r7, #20]
        // PERF: avoid copying, swap buffers instead
        EML_CHECK_ERROR(eml_net_layer_forward(layer, buffer1, buffer_length, buffer2, buffer_length));
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e8:	6a39      	ldr	r1, [r7, #32]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff fec4 	bl	8000678 <eml_net_layer_forward>
 80008f0:	4603      	mov	r3, r0
 80008f2:	74fb      	strb	r3, [r7, #19]
 80008f4:	7cfb      	ldrb	r3, [r7, #19]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <eml_net_infer+0xba>
 80008fa:	7cfb      	ldrb	r3, [r7, #19]
 80008fc:	e036      	b.n	800096c <eml_net_infer+0x128>
        for (int i=0; i<buffer_length; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
 8000902:	e00c      	b.n	800091e <eml_net_infer+0xda>
            buffer1[i] = buffer2[i];
 8000904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	441a      	add	r2, r3
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	6a39      	ldr	r1, [r7, #32]
 8000912:	440b      	add	r3, r1
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	601a      	str	r2, [r3, #0]
        for (int i=0; i<buffer_length; i++) {
 8000918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091a:	3301      	adds	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
 800091e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	429a      	cmp	r2, r3
 8000924:	dbee      	blt.n	8000904 <eml_net_infer+0xc0>
    for (int l=1; l<model->n_layers-1; l++) {
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	3301      	adds	r3, #1
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3b01      	subs	r3, #1
 8000932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000934:	429a      	cmp	r2, r3
 8000936:	dbca      	blt.n	80008ce <eml_net_infer+0x8a>
        }
    }

    // Output layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[model->n_layers-1],
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	460b      	mov	r3, r1
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	440b      	add	r3, r1
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	3b14      	subs	r3, #20
 800094c:	18d0      	adds	r0, r2, r3
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000956:	6a39      	ldr	r1, [r7, #32]
 8000958:	f7ff fe8e 	bl	8000678 <eml_net_layer_forward>
 800095c:	4603      	mov	r3, r0
 800095e:	76bb      	strb	r3, [r7, #26]
 8000960:	7ebb      	ldrb	r3, [r7, #26]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <eml_net_infer+0x126>
 8000966:	7ebb      	ldrb	r3, [r7, #26]
 8000968:	e000      	b.n	800096c <eml_net_infer+0x128>
                        buffer1, buffer_length, buffer2, buffer_length));

    return EmlOk;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3734      	adds	r7, #52	; 0x34
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}

08000974 <eml_net_predict>:
}


// Return the class, or -EmlError on failure
int32_t
eml_net_predict(EmlNet *model, const float *features, int32_t features_length) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]

    const EmlError error = eml_net_infer(model, features, features_length);
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	68b9      	ldr	r1, [r7, #8]
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff ff5d 	bl	8000844 <eml_net_infer>
 800098a:	4603      	mov	r3, r0
 800098c:	76fb      	strb	r3, [r7, #27]
    if (error != EmlOk) {
 800098e:	7efb      	ldrb	r3, [r7, #27]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <eml_net_predict+0x26>
        return -error;
 8000994:	7efb      	ldrb	r3, [r7, #27]
 8000996:	425b      	negs	r3, r3
 8000998:	e024      	b.n	80009e4 <eml_net_predict+0x70>
    }

    const int32_t n_outputs = eml_net_outputs(model);
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f7ff fe11 	bl	80005c2 <eml_net_outputs>
 80009a0:	6178      	str	r0, [r7, #20]

    int32_t _class = -EmlUnknownError;
 80009a2:	f06f 0304 	mvn.w	r3, #4
 80009a6:	61fb      	str	r3, [r7, #28]
    if (n_outputs == 1) {
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d10f      	bne.n	80009ce <eml_net_predict+0x5a>
        _class = (model->activations2[0] > 0.5f) ? 1 : 0;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	edd3 7a00 	vldr	s15, [r3]
 80009b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80009ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c2:	bfcc      	ite	gt
 80009c4:	2301      	movgt	r3, #1
 80009c6:	2300      	movle	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	e009      	b.n	80009e2 <eml_net_predict+0x6e>
    } else if (n_outputs > 1) {
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	dd06      	ble.n	80009e2 <eml_net_predict+0x6e>
        _class = eml_net_argmax(model->activations2, n_outputs);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	6979      	ldr	r1, [r7, #20]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fda0 	bl	8000520 <eml_net_argmax>
 80009e0:	61f8      	str	r0, [r7, #28]
    }

    return _class;
 80009e2:	69fb      	ldr	r3, [r7, #28]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <nevronskaMreza_HojaOseb_predict>:
{ 5, 10, nevronskaMreza_HojaOseb_layer1_weights, nevronskaMreza_HojaOseb_layer1_biases, EmlNetActivationSoftmax } };
static EmlNet nevronskaMreza_HojaOseb = { 2, nevronskaMreza_HojaOseb_layers, nevronskaMreza_HojaOseb_buf1, nevronskaMreza_HojaOseb_buf2, 16 };

    int32_t
    nevronskaMreza_HojaOseb_predict(const float *features, int32_t n_features)
    {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
        return eml_net_predict(&nevronskaMreza_HojaOseb, features, n_features);
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <nevronskaMreza_HojaOseb_predict+0x20>)
 80009fc:	f7ff ffba 	bl	8000974 <eml_net_predict>
 8000a00:	4603      	mov	r3, r0

    }
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	24000000 	.word	0x24000000

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	; 0x50
 8000a14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f001 fa51 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 faf7 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f000 fc2d 	bl	800127c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000a22:	f000 fb73 	bl	800110c <MX_ADC3_Init>
  MX_QUADSPI_Init();
 8000a26:	f000 fbd5 	bl	80011d4 <MX_QUADSPI_Init>
  MX_TIM16_Init();
 8000a2a:	f000 fbff 	bl	800122c <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 8000a2e:	f00b fa8b 	bl	800bf48 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim16);
 8000a32:	48dd      	ldr	r0, [pc, #884]	; (8000da8 <main+0x398>)
 8000a34:	f007 fe60 	bl	80086f8 <HAL_TIM_Base_Start>

  while (1)
  {

	  if(counterOfTestData == 0) {
 8000a38:	4bdc      	ldr	r3, [pc, #880]	; (8000dac <main+0x39c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d104      	bne.n	8000a4a <main+0x3a>
	  		  timestamp = htim16.Instance->CNT;
 8000a40:	4bd9      	ldr	r3, [pc, #868]	; (8000da8 <main+0x398>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	4ada      	ldr	r2, [pc, #872]	; (8000db0 <main+0x3a0>)
 8000a48:	6013      	str	r3, [r2, #0]
	  }

	  accX_Mean = (inputList[counterOfTestData][0] - (-0.7925340396583439)) * 2.0949933205020708;
 8000a4a:	4bd8      	ldr	r3, [pc, #864]	; (8000dac <main+0x39c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4ad9      	ldr	r2, [pc, #868]	; (8000db4 <main+0x3a4>)
 8000a50:	019b      	lsls	r3, r3, #6
 8000a52:	4413      	add	r3, r2
 8000a54:	edd3 7a00 	vldr	s15, [r3]
 8000a58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a5c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8000cc8 <main+0x2b8>
 8000a60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a64:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8000cd0 <main+0x2c0>
 8000a68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a70:	4bd1      	ldr	r3, [pc, #836]	; (8000db8 <main+0x3a8>)
 8000a72:	edc3 7a00 	vstr	s15, [r3]
	  	  		accX_STD = (inputList[counterOfTestData][1] - 0.25463438722461235) * 5.929210562633304;
 8000a76:	4bcd      	ldr	r3, [pc, #820]	; (8000dac <main+0x39c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4ace      	ldr	r2, [pc, #824]	; (8000db4 <main+0x3a4>)
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4413      	add	r3, r2
 8000a80:	3304      	adds	r3, #4
 8000a82:	edd3 7a00 	vldr	s15, [r3]
 8000a86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a8a:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8000cd8 <main+0x2c8>
 8000a8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a92:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8000ce0 <main+0x2d0>
 8000a96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a9e:	4bc7      	ldr	r3, [pc, #796]	; (8000dbc <main+0x3ac>)
 8000aa0:	edc3 7a00 	vstr	s15, [r3]
	  	  		accX_MinMax = (inputList[counterOfTestData][2] - 1.2237432034064877) * 1.1805004714159546;
 8000aa4:	4bc1      	ldr	r3, [pc, #772]	; (8000dac <main+0x39c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4ac2      	ldr	r2, [pc, #776]	; (8000db4 <main+0x3a4>)
 8000aaa:	019b      	lsls	r3, r3, #6
 8000aac:	4413      	add	r3, r2
 8000aae:	3308      	adds	r3, #8
 8000ab0:	edd3 7a00 	vldr	s15, [r3]
 8000ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ab8:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8000ce8 <main+0x2d8>
 8000abc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ac0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8000cf0 <main+0x2e0>
 8000ac4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ac8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000acc:	4bbc      	ldr	r3, [pc, #752]	; (8000dc0 <main+0x3b0>)
 8000ace:	edc3 7a00 	vstr	s15, [r3]
	  	  		accX_RMS = (inputList[counterOfTestData][3] - 0.9080303069938368) * 2.8316304285664726;
 8000ad2:	4bb6      	ldr	r3, [pc, #728]	; (8000dac <main+0x39c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4ab7      	ldr	r2, [pc, #732]	; (8000db4 <main+0x3a4>)
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	4413      	add	r3, r2
 8000adc:	330c      	adds	r3, #12
 8000ade:	edd3 7a00 	vldr	s15, [r3]
 8000ae2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae6:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8000cf8 <main+0x2e8>
 8000aea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000aee:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8000d00 <main+0x2f0>
 8000af2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000af6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000afa:	4bb2      	ldr	r3, [pc, #712]	; (8000dc4 <main+0x3b4>)
 8000afc:	edc3 7a00 	vstr	s15, [r3]

	  	  		accY_Mean = (inputList[counterOfTestData][4] - (-0.043692102975635576)) * 3.7465012332289103;
 8000b00:	4baa      	ldr	r3, [pc, #680]	; (8000dac <main+0x39c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4aab      	ldr	r2, [pc, #684]	; (8000db4 <main+0x3a4>)
 8000b06:	019b      	lsls	r3, r3, #6
 8000b08:	4413      	add	r3, r2
 8000b0a:	3310      	adds	r3, #16
 8000b0c:	edd3 7a00 	vldr	s15, [r3]
 8000b10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b14:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8000d08 <main+0x2f8>
 8000b18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b1c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8000d10 <main+0x300>
 8000b20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b28:	4ba7      	ldr	r3, [pc, #668]	; (8000dc8 <main+0x3b8>)
 8000b2a:	edc3 7a00 	vstr	s15, [r3]
	  	  		accY_STD = (inputList[counterOfTestData][5] - 0.2380924561831248) * 6.581672613424032;
 8000b2e:	4b9f      	ldr	r3, [pc, #636]	; (8000dac <main+0x39c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4aa0      	ldr	r2, [pc, #640]	; (8000db4 <main+0x3a4>)
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	4413      	add	r3, r2
 8000b38:	3314      	adds	r3, #20
 8000b3a:	edd3 7a00 	vldr	s15, [r3]
 8000b3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b42:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8000d18 <main+0x308>
 8000b46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b4a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8000d20 <main+0x310>
 8000b4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b56:	4b9d      	ldr	r3, [pc, #628]	; (8000dcc <main+0x3bc>)
 8000b58:	edc3 7a00 	vstr	s15, [r3]
	  	  		accY_MinMax = (inputList[counterOfTestData][6] - 1.2170445463478536) * 1.2546657227425297;
 8000b5c:	4b93      	ldr	r3, [pc, #588]	; (8000dac <main+0x39c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a94      	ldr	r2, [pc, #592]	; (8000db4 <main+0x3a4>)
 8000b62:	019b      	lsls	r3, r3, #6
 8000b64:	4413      	add	r3, r2
 8000b66:	3318      	adds	r3, #24
 8000b68:	edd3 7a00 	vldr	s15, [r3]
 8000b6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b70:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8000d28 <main+0x318>
 8000b74:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b78:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8000d30 <main+0x320>
 8000b7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b84:	4b92      	ldr	r3, [pc, #584]	; (8000dd0 <main+0x3c0>)
 8000b86:	edc3 7a00 	vstr	s15, [r3]
	  	  		accY_RMS = (inputList[counterOfTestData][7] - 0.3188075751411812) * 4.415641148049384;
 8000b8a:	4b88      	ldr	r3, [pc, #544]	; (8000dac <main+0x39c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a89      	ldr	r2, [pc, #548]	; (8000db4 <main+0x3a4>)
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	4413      	add	r3, r2
 8000b94:	331c      	adds	r3, #28
 8000b96:	edd3 7a00 	vldr	s15, [r3]
 8000b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b9e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8000d38 <main+0x328>
 8000ba2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ba6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8000d40 <main+0x330>
 8000baa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bb2:	4b88      	ldr	r3, [pc, #544]	; (8000dd4 <main+0x3c4>)
 8000bb4:	edc3 7a00 	vstr	s15, [r3]

	  	  		accZ_Mean = (inputList[counterOfTestData][8] - 0.0036754295900627365) * 3.7391857781655413;
 8000bb8:	4b7c      	ldr	r3, [pc, #496]	; (8000dac <main+0x39c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a7d      	ldr	r2, [pc, #500]	; (8000db4 <main+0x3a4>)
 8000bbe:	019b      	lsls	r3, r3, #6
 8000bc0:	4413      	add	r3, r2
 8000bc2:	3320      	adds	r3, #32
 8000bc4:	edd3 7a00 	vldr	s15, [r3]
 8000bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bcc:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8000d48 <main+0x338>
 8000bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bd4:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8000d50 <main+0x340>
 8000bd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000be0:	4b7d      	ldr	r3, [pc, #500]	; (8000dd8 <main+0x3c8>)
 8000be2:	edc3 7a00 	vstr	s15, [r3]
	  	  		accZ_STD = (inputList[counterOfTestData][9] - 0.23952607306415402) * 7.479754757980447;
 8000be6:	4b71      	ldr	r3, [pc, #452]	; (8000dac <main+0x39c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a72      	ldr	r2, [pc, #456]	; (8000db4 <main+0x3a4>)
 8000bec:	019b      	lsls	r3, r3, #6
 8000bee:	4413      	add	r3, r2
 8000bf0:	3324      	adds	r3, #36	; 0x24
 8000bf2:	edd3 7a00 	vldr	s15, [r3]
 8000bf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bfa:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000d58 <main+0x348>
 8000bfe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c02:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000d60 <main+0x350>
 8000c06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c0e:	4b73      	ldr	r3, [pc, #460]	; (8000ddc <main+0x3cc>)
 8000c10:	edc3 7a00 	vstr	s15, [r3]
	  	  		accZ_MinMax = (inputList[counterOfTestData][10] - 1.2980415984277747) * 1.313726772069218;
 8000c14:	4b65      	ldr	r3, [pc, #404]	; (8000dac <main+0x39c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a66      	ldr	r2, [pc, #408]	; (8000db4 <main+0x3a4>)
 8000c1a:	019b      	lsls	r3, r3, #6
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3328      	adds	r3, #40	; 0x28
 8000c20:	edd3 7a00 	vldr	s15, [r3]
 8000c24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c28:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000d68 <main+0x358>
 8000c2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c30:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000d70 <main+0x360>
 8000c34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c3c:	4b68      	ldr	r3, [pc, #416]	; (8000de0 <main+0x3d0>)
 8000c3e:	edc3 7a00 	vstr	s15, [r3]
	  	  		accZ_RMS = (inputList[counterOfTestData][11] - 0.3156636494289826) * 4.60580702527008;
 8000c42:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <main+0x39c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a5b      	ldr	r2, [pc, #364]	; (8000db4 <main+0x3a4>)
 8000c48:	019b      	lsls	r3, r3, #6
 8000c4a:	4413      	add	r3, r2
 8000c4c:	332c      	adds	r3, #44	; 0x2c
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c56:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8000d78 <main+0x368>
 8000c5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c5e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8000d80 <main+0x370>
 8000c62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c6a:	4b5e      	ldr	r3, [pc, #376]	; (8000de4 <main+0x3d4>)
 8000c6c:	edc3 7a00 	vstr	s15, [r3]

	  	  		accMagnitude_Mean = (inputList[counterOfTestData][12] - 1.0669456527929735) * 15.930676904057798;
 8000c70:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <main+0x39c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a4f      	ldr	r2, [pc, #316]	; (8000db4 <main+0x3a4>)
 8000c76:	019b      	lsls	r3, r3, #6
 8000c78:	4413      	add	r3, r2
 8000c7a:	3330      	adds	r3, #48	; 0x30
 8000c7c:	edd3 7a00 	vldr	s15, [r3]
 8000c80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c84:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8000d88 <main+0x378>
 8000c88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c8c:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8000d90 <main+0x380>
 8000c90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c98:	4b53      	ldr	r3, [pc, #332]	; (8000de8 <main+0x3d8>)
 8000c9a:	edc3 7a00 	vstr	s15, [r3]
	  	  		accMagnitude_STD = (inputList[counterOfTestData][13] - 0.2766352751305663) * 5.763399986208959;
 8000c9e:	4b43      	ldr	r3, [pc, #268]	; (8000dac <main+0x39c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a44      	ldr	r2, [pc, #272]	; (8000db4 <main+0x3a4>)
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	4413      	add	r3, r2
 8000ca8:	3334      	adds	r3, #52	; 0x34
 8000caa:	edd3 7a00 	vldr	s15, [r3]
 8000cae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cb2:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8000d98 <main+0x388>
 8000cb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000cba:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8000da0 <main+0x390>
 8000cbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cc2:	e093      	b.n	8000dec <main+0x3dc>
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	58a9944f 	.word	0x58a9944f
 8000ccc:	3fe95c70 	.word	0x3fe95c70
 8000cd0:	dba728a2 	.word	0xdba728a2
 8000cd4:	4000c28b 	.word	0x4000c28b
 8000cd8:	076444fb 	.word	0x076444fb
 8000cdc:	3fd04bee 	.word	0x3fd04bee
 8000ce0:	f9466e63 	.word	0xf9466e63
 8000ce4:	4017b782 	.word	0x4017b782
 8000ce8:	c0d5548b 	.word	0xc0d5548b
 8000cec:	3ff39473 	.word	0x3ff39473
 8000cf0:	765a4e44 	.word	0x765a4e44
 8000cf4:	3ff2e354 	.word	0x3ff2e354
 8000cf8:	930a1781 	.word	0x930a1781
 8000cfc:	3fed0e95 	.word	0x3fed0e95
 8000d00:	daa86966 	.word	0xdaa86966
 8000d04:	4006a72d 	.word	0x4006a72d
 8000d08:	b2bf6537 	.word	0xb2bf6537
 8000d0c:	3fa65ecf 	.word	0x3fa65ecf
 8000d10:	a379227c 	.word	0xa379227c
 8000d14:	400df8d5 	.word	0x400df8d5
 8000d18:	485d8bf8 	.word	0x485d8bf8
 8000d1c:	3fce79d0 	.word	0x3fce79d0
 8000d20:	fc4e8a4f 	.word	0xfc4e8a4f
 8000d24:	401a53a1 	.word	0x401a53a1
 8000d28:	b3c56d50 	.word	0xb3c56d50
 8000d2c:	3ff37903 	.word	0x3ff37903
 8000d30:	5d69763f 	.word	0x5d69763f
 8000d34:	3ff4131c 	.word	0x3ff4131c
 8000d38:	e33cb32c 	.word	0xe33cb32c
 8000d3c:	3fd46757 	.word	0x3fd46757
 8000d40:	d546f9db 	.word	0xd546f9db
 8000d44:	4011a99d 	.word	0x4011a99d
 8000d48:	3c6b1212 	.word	0x3c6b1212
 8000d4c:	3f6e1bef 	.word	0x3f6e1bef
 8000d50:	3bb71d4f 	.word	0x3bb71d4f
 8000d54:	400de9da 	.word	0x400de9da
 8000d58:	552cc7d2 	.word	0x552cc7d2
 8000d5c:	3fcea8ca 	.word	0x3fcea8ca
 8000d60:	d4ce8173 	.word	0xd4ce8173
 8000d64:	401deb44 	.word	0x401deb44
 8000d68:	44618489 	.word	0x44618489
 8000d6c:	3ff4c4c7 	.word	0x3ff4c4c7
 8000d70:	5d1eabc7 	.word	0x5d1eabc7
 8000d74:	3ff50506 	.word	0x3ff50506
 8000d78:	4eb557e4 	.word	0x4eb557e4
 8000d7c:	3fd433d5 	.word	0x3fd433d5
 8000d80:	ad44e35e 	.word	0xad44e35e
 8000d84:	40126c58 	.word	0x40126c58
 8000d88:	9ad5aede 	.word	0x9ad5aede
 8000d8c:	3ff11235 	.word	0x3ff11235
 8000d90:	aee4243c 	.word	0xaee4243c
 8000d94:	402fdc81 	.word	0x402fdc81
 8000d98:	70e6c484 	.word	0x70e6c484
 8000d9c:	3fd1b464 	.word	0x3fd1b464
 8000da0:	b9da2327 	.word	0xb9da2327
 8000da4:	40170db8 	.word	0x40170db8
 8000da8:	2400361c 	.word	0x2400361c
 8000dac:	2400351c 	.word	0x2400351c
 8000db0:	24003528 	.word	0x24003528
 8000db4:	24000018 	.word	0x24000018
 8000db8:	2400352c 	.word	0x2400352c
 8000dbc:	24003530 	.word	0x24003530
 8000dc0:	24003534 	.word	0x24003534
 8000dc4:	24003538 	.word	0x24003538
 8000dc8:	2400353c 	.word	0x2400353c
 8000dcc:	24003540 	.word	0x24003540
 8000dd0:	24003544 	.word	0x24003544
 8000dd4:	24003548 	.word	0x24003548
 8000dd8:	2400354c 	.word	0x2400354c
 8000ddc:	24003550 	.word	0x24003550
 8000de0:	24003554 	.word	0x24003554
 8000de4:	24003558 	.word	0x24003558
 8000de8:	2400355c 	.word	0x2400355c
 8000dec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000df0:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <main+0x590>)
 8000df2:	edc3 7a00 	vstr	s15, [r3]
	  	  		accMagnitude_MinMax = (inputList[counterOfTestData][14] - 1.3165988949163936) * 1.1621726084324315;
 8000df6:	4b6b      	ldr	r3, [pc, #428]	; (8000fa4 <main+0x594>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a6b      	ldr	r2, [pc, #428]	; (8000fa8 <main+0x598>)
 8000dfc:	019b      	lsls	r3, r3, #6
 8000dfe:	4413      	add	r3, r2
 8000e00:	3338      	adds	r3, #56	; 0x38
 8000e02:	edd3 7a00 	vldr	s15, [r3]
 8000e06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e0a:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8000f80 <main+0x570>
 8000e0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e12:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8000f88 <main+0x578>
 8000e16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e1e:	4b63      	ldr	r3, [pc, #396]	; (8000fac <main+0x59c>)
 8000e20:	edc3 7a00 	vstr	s15, [r3]
	  	  		accMagnitude_RMS = (inputList[counterOfTestData][15] - 1.1134635041015108) * 10.457188751844905;
 8000e24:	4b5f      	ldr	r3, [pc, #380]	; (8000fa4 <main+0x594>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a5f      	ldr	r2, [pc, #380]	; (8000fa8 <main+0x598>)
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	4413      	add	r3, r2
 8000e2e:	333c      	adds	r3, #60	; 0x3c
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e38:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8000f90 <main+0x580>
 8000e3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e40:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8000f98 <main+0x588>
 8000e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e4c:	4b58      	ldr	r3, [pc, #352]	; (8000fb0 <main+0x5a0>)
 8000e4e:	edc3 7a00 	vstr	s15, [r3]

	  	  		const float features[] = { accX_Mean, accX_STD, accX_MinMax, accX_RMS, accY_Mean, accY_STD, accY_MinMax, accY_RMS,
 8000e52:	4b58      	ldr	r3, [pc, #352]	; (8000fb4 <main+0x5a4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <main+0x5a8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <main+0x5ac>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <main+0x5b0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b56      	ldr	r3, [pc, #344]	; (8000fc4 <main+0x5b4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	4b55      	ldr	r3, [pc, #340]	; (8000fc8 <main+0x5b8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <main+0x5bc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	4b54      	ldr	r3, [pc, #336]	; (8000fd0 <main+0x5c0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <main+0x5c4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <main+0x5c8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8e:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <main+0x5cc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e94:	4b52      	ldr	r3, [pc, #328]	; (8000fe0 <main+0x5d0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e9a:	4b52      	ldr	r3, [pc, #328]	; (8000fe4 <main+0x5d4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <main+0x590>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ea6:	4b41      	ldr	r3, [pc, #260]	; (8000fac <main+0x59c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8000eac:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <main+0x5a0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	  	  								 accZ_Mean, accZ_STD, accZ_MinMax, accZ_RMS, accMagnitude_Mean, accMagnitude_STD, accMagnitude_MinMax, accMagnitude_RMS };

	  	  int out = nevronskaMreza_HojaOseb_predict(features, 16); // Alternative A: "inline"
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fd98 	bl	80009ec <nevronskaMreza_HojaOseb_predict>
 8000ebc:	6438      	str	r0, [r7, #64]	; 0x40
	  	  if (out < 0) {
 8000ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da01      	bge.n	8000ec8 <main+0x4b8>
	  	      return out; // error
 8000ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ec6:	e055      	b.n	8000f74 <main+0x564>
	  	  } else {
	  		  counterOfTestData++;
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <main+0x594>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4a35      	ldr	r2, [pc, #212]	; (8000fa4 <main+0x594>)
 8000ed0:	6013      	str	r3, [r2, #0]
	  	  }

	  	  if(counterOfTestData == length) {
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <main+0x594>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <main+0x5d8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	f47f adac 	bne.w	8000a38 <main+0x28>

	  		  counterOfTestData=0;
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <main+0x594>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]

	  		  countDurations++;
 8000ee6:	4b41      	ldr	r3, [pc, #260]	; (8000fec <main+0x5dc>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a3f      	ldr	r2, [pc, #252]	; (8000fec <main+0x5dc>)
 8000eee:	6013      	str	r3, [r2, #0]

	  		  		uint32_t duration = htim16.Instance->CNT;
 8000ef0:	4b3f      	ldr	r3, [pc, #252]	; (8000ff0 <main+0x5e0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44

	  		  		if(duration >= timestamp)
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <main+0x5e4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d305      	bcc.n	8000f0e <main+0x4fe>
	  		  			duration -= timestamp;
 8000f02:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <main+0x5e4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8000f0c:	e006      	b.n	8000f1c <main+0x50c>
	  		  		else
	  		  			duration += (65535 - timestamp) + 1; //+1 because of counting from 0 onwards
 8000f0e:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <main+0x5e4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f1a:	647b      	str	r3, [r7, #68]	; 0x44

	  		  		//snprintf(SendBuffer,BUFSIZE,"1 Trajanje izvajanja: %lu milisekund. \r\n", duration);
	  		  		//CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
	  		  		averageDurationValue += duration;
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <main+0x5e8>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f22:	4413      	add	r3, r2
 8000f24:	4a34      	ldr	r2, [pc, #208]	; (8000ff8 <main+0x5e8>)
 8000f26:	6013      	str	r3, [r2, #0]

	  		  		if(countDurations == numberOfDurations) {
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <main+0x5dc>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <main+0x5ec>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f47f ad81 	bne.w	8000a38 <main+0x28>
	  		  			snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: [%lu] %lu milisekund. \r\n", averageDurationValue, averageDurationValue / 100);
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <main+0x5e8>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <main+0x5e8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4930      	ldr	r1, [pc, #192]	; (8001000 <main+0x5f0>)
 8000f40:	fba1 1303 	umull	r1, r3, r1, r3
 8000f44:	095b      	lsrs	r3, r3, #5
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	4a2e      	ldr	r2, [pc, #184]	; (8001004 <main+0x5f4>)
 8000f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f50:	482d      	ldr	r0, [pc, #180]	; (8001008 <main+0x5f8>)
 8000f52:	f00b fd6b 	bl	800ca2c <sniprintf>
	  		  			CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000f56:	482c      	ldr	r0, [pc, #176]	; (8001008 <main+0x5f8>)
 8000f58:	f7ff f9c2 	bl	80002e0 <strlen>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4829      	ldr	r0, [pc, #164]	; (8001008 <main+0x5f8>)
 8000f62:	f00b f8b1 	bl	800c0c8 <CDC_Transmit_FS>

	  		  			countDurations = 0;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <main+0x5dc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
	  		  			averageDurationValue = 0;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <main+0x5e8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
  {
 8000f72:	e561      	b.n	8000a38 <main+0x28>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3748      	adds	r7, #72	; 0x48
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	f3af 8000 	nop.w
 8000f80:	00b9d9b5 	.word	0x00b9d9b5
 8000f84:	3ff510ca 	.word	0x3ff510ca
 8000f88:	4e186390 	.word	0x4e186390
 8000f8c:	3ff29842 	.word	0x3ff29842
 8000f90:	1b767d23 	.word	0x1b767d23
 8000f94:	3ff1d0bf 	.word	0x3ff1d0bf
 8000f98:	a4e28bbd 	.word	0xa4e28bbd
 8000f9c:	4024ea14 	.word	0x4024ea14
 8000fa0:	24003560 	.word	0x24003560
 8000fa4:	2400351c 	.word	0x2400351c
 8000fa8:	24000018 	.word	0x24000018
 8000fac:	24003564 	.word	0x24003564
 8000fb0:	24003568 	.word	0x24003568
 8000fb4:	2400352c 	.word	0x2400352c
 8000fb8:	24003530 	.word	0x24003530
 8000fbc:	24003534 	.word	0x24003534
 8000fc0:	24003538 	.word	0x24003538
 8000fc4:	2400353c 	.word	0x2400353c
 8000fc8:	24003540 	.word	0x24003540
 8000fcc:	24003544 	.word	0x24003544
 8000fd0:	24003548 	.word	0x24003548
 8000fd4:	2400354c 	.word	0x2400354c
 8000fd8:	24003550 	.word	0x24003550
 8000fdc:	24003554 	.word	0x24003554
 8000fe0:	24003558 	.word	0x24003558
 8000fe4:	2400355c 	.word	0x2400355c
 8000fe8:	24003218 	.word	0x24003218
 8000fec:	24003524 	.word	0x24003524
 8000ff0:	2400361c 	.word	0x2400361c
 8000ff4:	24003528 	.word	0x24003528
 8000ff8:	24003520 	.word	0x24003520
 8000ffc:	24000014 	.word	0x24000014
 8001000:	51eb851f 	.word	0x51eb851f
 8001004:	0800d914 	.word	0x0800d914
 8001008:	2400341c 	.word	0x2400341c

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b09c      	sub	sp, #112	; 0x70
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	224c      	movs	r2, #76	; 0x4c
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00b fcfe 	bl	800ca1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2220      	movs	r2, #32
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f00b fcf8 	bl	800ca1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800102c:	2002      	movs	r0, #2
 800102e:	f003 fd39 	bl	8004aa4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b33      	ldr	r3, [pc, #204]	; (8001104 <SystemClock_Config+0xf8>)
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	4a32      	ldr	r2, [pc, #200]	; (8001104 <SystemClock_Config+0xf8>)
 800103c:	f023 0301 	bic.w	r3, r3, #1
 8001040:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001042:	4b30      	ldr	r3, [pc, #192]	; (8001104 <SystemClock_Config+0xf8>)
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <SystemClock_Config+0xfc>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001054:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <SystemClock_Config+0xfc>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <SystemClock_Config+0xfc>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001068:	bf00      	nop
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <SystemClock_Config+0xfc>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001076:	d1f8      	bne.n	800106a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001078:	2303      	movs	r3, #3
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800107c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001082:	2301      	movs	r3, #1
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001086:	2340      	movs	r3, #64	; 0x40
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108e:	2302      	movs	r3, #2
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8001092:	2316      	movs	r3, #22
 8001094:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8001096:	23a9      	movs	r3, #169	; 0xa9
 8001098:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800109e:	2304      	movs	r3, #4
 80010a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fdf8 	bl	8004cac <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80010c2:	f000 fc53 	bl	800196c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	233f      	movs	r3, #63	; 0x3f
 80010c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fa38 	bl	8005560 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xee>
  {
    Error_Handler();
 80010f6:	f000 fc39 	bl	800196c <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3770      	adds	r7, #112	; 0x70
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	58000400 	.word	0x58000400
 8001108:	58024800 	.word	0x58024800

0800110c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <MX_ADC3_Init+0xb8>)
 8001126:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <MX_ADC3_Init+0xbc>)
 8001128:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <MX_ADC3_Init+0xb8>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <MX_ADC3_Init+0xb8>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <MX_ADC3_Init+0xb8>)
 8001138:	2204      	movs	r2, #4
 800113a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_ADC3_Init+0xb8>)
 800113e:	2200      	movs	r2, #0
 8001140:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <MX_ADC3_Init+0xb8>)
 8001144:	2200      	movs	r2, #0
 8001146:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <MX_ADC3_Init+0xb8>)
 800114a:	2201      	movs	r2, #1
 800114c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_ADC3_Init+0xb8>)
 8001150:	2200      	movs	r2, #0
 8001152:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_ADC3_Init+0xb8>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_ADC3_Init+0xb8>)
 800115c:	2200      	movs	r2, #0
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_ADC3_Init+0xb8>)
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_ADC3_Init+0xb8>)
 8001168:	2200      	movs	r2, #0
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_ADC3_Init+0xb8>)
 800116e:	2200      	movs	r2, #0
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_ADC3_Init+0xb8>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_ADC3_Init+0xb8>)
 800117c:	f001 f902 	bl	8002384 <HAL_ADC_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8001186:	f000 fbf1 	bl	800196c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_ADC3_Init+0xc0>)
 800118c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800118e:	2306      	movs	r3, #6
 8001190:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_ADC3_Init+0xc4>)
 8001198:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800119a:	2304      	movs	r3, #4
 800119c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_ADC3_Init+0xb8>)
 80011ac:	f001 fa8c 	bl	80026c8 <HAL_ADC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 80011b6:	f000 fbd9 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2400356c 	.word	0x2400356c
 80011c8:	58026000 	.word	0x58026000
 80011cc:	04300002 	.word	0x04300002
 80011d0:	47ff0000 	.word	0x47ff0000

080011d4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_QUADSPI_Init+0x50>)
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <MX_QUADSPI_Init+0x54>)
 80011dc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_QUADSPI_Init+0x50>)
 80011e0:	22ff      	movs	r2, #255	; 0xff
 80011e2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_QUADSPI_Init+0x50>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_QUADSPI_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_QUADSPI_Init+0x50>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_QUADSPI_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_QUADSPI_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_QUADSPI_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_QUADSPI_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_QUADSPI_Init+0x50>)
 8001210:	f003 fc92 	bl	8004b38 <HAL_QSPI_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800121a:	f000 fba7 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	240035d0 	.word	0x240035d0
 8001228:	52005000 	.word	0x52005000

0800122c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_TIM16_Init+0x48>)
 8001232:	4a11      	ldr	r2, [pc, #68]	; (8001278 <MX_TIM16_Init+0x4c>)
 8001234:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000 - 1;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_TIM16_Init+0x48>)
 8001238:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800123c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_TIM16_Init+0x48>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_TIM16_Init+0x48>)
 8001246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_TIM16_Init+0x48>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_TIM16_Init+0x48>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_TIM16_Init+0x48>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_TIM16_Init+0x48>)
 8001260:	f007 f9f2 	bl	8008648 <HAL_TIM_Base_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800126a:	f000 fb7f 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2400361c 	.word	0x2400361c
 8001278:	40014400 	.word	0x40014400

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b090      	sub	sp, #64	; 0x40
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001292:	4bbd      	ldr	r3, [pc, #756]	; (8001588 <MX_GPIO_Init+0x30c>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	4abb      	ldr	r2, [pc, #748]	; (8001588 <MX_GPIO_Init+0x30c>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a2:	4bb9      	ldr	r3, [pc, #740]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4bb5      	ldr	r3, [pc, #724]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b6:	4ab4      	ldr	r2, [pc, #720]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c0:	4bb1      	ldr	r3, [pc, #708]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80012ce:	4bae      	ldr	r3, [pc, #696]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	4aac      	ldr	r2, [pc, #688]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012de:	4baa      	ldr	r3, [pc, #680]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	623b      	str	r3, [r7, #32]
 80012ea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ec:	4ba6      	ldr	r3, [pc, #664]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	4aa5      	ldr	r2, [pc, #660]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fc:	4ba2      	ldr	r3, [pc, #648]	; (8001588 <MX_GPIO_Init+0x30c>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	4b9f      	ldr	r3, [pc, #636]	; (8001588 <MX_GPIO_Init+0x30c>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a9d      	ldr	r2, [pc, #628]	; (8001588 <MX_GPIO_Init+0x30c>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b9b      	ldr	r3, [pc, #620]	; (8001588 <MX_GPIO_Init+0x30c>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001328:	4b97      	ldr	r3, [pc, #604]	; (8001588 <MX_GPIO_Init+0x30c>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a96      	ldr	r2, [pc, #600]	; (8001588 <MX_GPIO_Init+0x30c>)
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b93      	ldr	r3, [pc, #588]	; (8001588 <MX_GPIO_Init+0x30c>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001346:	4b90      	ldr	r3, [pc, #576]	; (8001588 <MX_GPIO_Init+0x30c>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a8e      	ldr	r2, [pc, #568]	; (8001588 <MX_GPIO_Init+0x30c>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b8c      	ldr	r3, [pc, #560]	; (8001588 <MX_GPIO_Init+0x30c>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	4b88      	ldr	r3, [pc, #544]	; (8001588 <MX_GPIO_Init+0x30c>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a87      	ldr	r2, [pc, #540]	; (8001588 <MX_GPIO_Init+0x30c>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b84      	ldr	r3, [pc, #528]	; (8001588 <MX_GPIO_Init+0x30c>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001382:	4b81      	ldr	r3, [pc, #516]	; (8001588 <MX_GPIO_Init+0x30c>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	4a7f      	ldr	r2, [pc, #508]	; (8001588 <MX_GPIO_Init+0x30c>)
 800138a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001392:	4b7d      	ldr	r3, [pc, #500]	; (8001588 <MX_GPIO_Init+0x30c>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b79      	ldr	r3, [pc, #484]	; (8001588 <MX_GPIO_Init+0x30c>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	4a78      	ldr	r2, [pc, #480]	; (8001588 <MX_GPIO_Init+0x30c>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b0:	4b75      	ldr	r3, [pc, #468]	; (8001588 <MX_GPIO_Init+0x30c>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013be:	4b72      	ldr	r3, [pc, #456]	; (8001588 <MX_GPIO_Init+0x30c>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a70      	ldr	r2, [pc, #448]	; (8001588 <MX_GPIO_Init+0x30c>)
 80013c6:	f043 0320 	orr.w	r3, r3, #32
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b6e      	ldr	r3, [pc, #440]	; (8001588 <MX_GPIO_Init+0x30c>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e2:	486a      	ldr	r0, [pc, #424]	; (800158c <MX_GPIO_Init+0x310>)
 80013e4:	f002 f88c 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2104      	movs	r1, #4
 80013ec:	4868      	ldr	r0, [pc, #416]	; (8001590 <MX_GPIO_Init+0x314>)
 80013ee:	f002 f887 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f8:	4866      	ldr	r0, [pc, #408]	; (8001594 <MX_GPIO_Init+0x318>)
 80013fa:	f002 f881 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80013fe:	23f0      	movs	r3, #240	; 0xf0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800140e:	230a      	movs	r3, #10
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001416:	4619      	mov	r1, r3
 8001418:	485c      	ldr	r0, [pc, #368]	; (800158c <MX_GPIO_Init+0x310>)
 800141a:	f001 fec1 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 800141e:	f242 0320 	movw	r3, #8224	; 0x2020
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001430:	2309      	movs	r3, #9
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001438:	4619      	mov	r1, r3
 800143a:	4856      	ldr	r0, [pc, #344]	; (8001594 <MX_GPIO_Init+0x318>)
 800143c:	f001 feb0 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8001440:	23fc      	movs	r3, #252	; 0xfc
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001450:	230e      	movs	r3, #14
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001458:	4619      	mov	r1, r3
 800145a:	484f      	ldr	r0, [pc, #316]	; (8001598 <MX_GPIO_Init+0x31c>)
 800145c:	f001 fea0 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001472:	230a      	movs	r3, #10
 8001474:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147a:	4619      	mov	r1, r3
 800147c:	4847      	ldr	r0, [pc, #284]	; (800159c <MX_GPIO_Init+0x320>)
 800147e:	f001 fe8f 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001482:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001494:	230c      	movs	r3, #12
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149c:	4619      	mov	r1, r3
 800149e:	4840      	ldr	r0, [pc, #256]	; (80015a0 <MX_GPIO_Init+0x324>)
 80014a0:	f001 fe7e 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80014a4:	f24d 2303 	movw	r3, #53763	; 0xd203
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014b6:	230e      	movs	r3, #14
 80014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014be:	4619      	mov	r1, r3
 80014c0:	4832      	ldr	r0, [pc, #200]	; (800158c <MX_GPIO_Init+0x310>)
 80014c2:	f001 fe6d 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80014c6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d8:	230c      	movs	r3, #12
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e0:	4619      	mov	r1, r3
 80014e2:	4830      	ldr	r0, [pc, #192]	; (80015a4 <MX_GPIO_Init+0x328>)
 80014e4:	f001 fe5c 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014e8:	2310      	movs	r3, #16
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80014f8:	2307      	movs	r3, #7
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001500:	4619      	mov	r1, r3
 8001502:	4824      	ldr	r0, [pc, #144]	; (8001594 <MX_GPIO_Init+0x318>)
 8001504:	f001 fe4c 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001508:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800151a:	230b      	movs	r3, #11
 800151c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800151e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001522:	4619      	mov	r1, r3
 8001524:	481d      	ldr	r0, [pc, #116]	; (800159c <MX_GPIO_Init+0x320>)
 8001526:	f001 fe3b 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800152a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800153c:	230e      	movs	r3, #14
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001544:	4619      	mov	r1, r3
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <MX_GPIO_Init+0x314>)
 8001548:	f001 fe2a 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800154c:	2308      	movs	r3, #8
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800155c:	2305      	movs	r3, #5
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001564:	4619      	mov	r1, r3
 8001566:	4810      	ldr	r0, [pc, #64]	; (80015a8 <MX_GPIO_Init+0x32c>)
 8001568:	f001 fe1a 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800156c:	2304      	movs	r3, #4
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800157c:	2305      	movs	r3, #5
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001584:	4619      	mov	r1, r3
 8001586:	e011      	b.n	80015ac <MX_GPIO_Init+0x330>
 8001588:	58024400 	.word	0x58024400
 800158c:	58022000 	.word	0x58022000
 8001590:	58022400 	.word	0x58022400
 8001594:	58020400 	.word	0x58020400
 8001598:	58022800 	.word	0x58022800
 800159c:	58021800 	.word	0x58021800
 80015a0:	58020800 	.word	0x58020800
 80015a4:	58021000 	.word	0x58021000
 80015a8:	58020c00 	.word	0x58020c00
 80015ac:	48bc      	ldr	r0, [pc, #752]	; (80018a0 <MX_GPIO_Init+0x624>)
 80015ae:	f001 fdf7 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015c4:	2303      	movs	r3, #3
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015cc:	4619      	mov	r1, r3
 80015ce:	48b5      	ldr	r0, [pc, #724]	; (80018a4 <MX_GPIO_Init+0x628>)
 80015d0:	f001 fde6 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80015d4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015e6:	2309      	movs	r3, #9
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ee:	4619      	mov	r1, r3
 80015f0:	48ac      	ldr	r0, [pc, #688]	; (80018a4 <MX_GPIO_Init+0x628>)
 80015f2:	f001 fdd5 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80015f6:	2304      	movs	r3, #4
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001606:	230b      	movs	r3, #11
 8001608:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160e:	4619      	mov	r1, r3
 8001610:	48a5      	ldr	r0, [pc, #660]	; (80018a8 <MX_GPIO_Init+0x62c>)
 8001612:	f001 fdc5 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001626:	4619      	mov	r1, r3
 8001628:	48a0      	ldr	r0, [pc, #640]	; (80018ac <MX_GPIO_Init+0x630>)
 800162a:	f001 fdb9 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800162e:	2330      	movs	r3, #48	; 0x30
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800163e:	230a      	movs	r3, #10
 8001640:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001646:	4619      	mov	r1, r3
 8001648:	4897      	ldr	r0, [pc, #604]	; (80018a8 <MX_GPIO_Init+0x62c>)
 800164a:	f001 fda9 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_D5_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin;
 800164e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001660:	230c      	movs	r3, #12
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_D5_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001668:	4619      	mov	r1, r3
 800166a:	4891      	ldr	r0, [pc, #580]	; (80018b0 <MX_GPIO_Init+0x634>)
 800166c:	f001 fd98 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001670:	f248 1333 	movw	r3, #33075	; 0x8133
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001682:	230c      	movs	r3, #12
 8001684:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168a:	4619      	mov	r1, r3
 800168c:	4889      	ldr	r0, [pc, #548]	; (80018b4 <MX_GPIO_Init+0x638>)
 800168e:	f001 fd87 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001692:	2304      	movs	r3, #4
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016a2:	230c      	movs	r3, #12
 80016a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016aa:	4619      	mov	r1, r3
 80016ac:	487f      	ldr	r0, [pc, #508]	; (80018ac <MX_GPIO_Init+0x630>)
 80016ae:	f001 fd77 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80016b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c4:	230c      	movs	r3, #12
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016cc:	4619      	mov	r1, r3
 80016ce:	4877      	ldr	r0, [pc, #476]	; (80018ac <MX_GPIO_Init+0x630>)
 80016d0:	f001 fd66 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e6:	4619      	mov	r1, r3
 80016e8:	4873      	ldr	r0, [pc, #460]	; (80018b8 <MX_GPIO_Init+0x63c>)
 80016ea:	f001 fd59 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 80016ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001700:	230b      	movs	r3, #11
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001708:	4619      	mov	r1, r3
 800170a:	4865      	ldr	r0, [pc, #404]	; (80018a0 <MX_GPIO_Init+0x624>)
 800170c:	f001 fd48 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001710:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001722:	230c      	movs	r3, #12
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172a:	4619      	mov	r1, r3
 800172c:	4863      	ldr	r0, [pc, #396]	; (80018bc <MX_GPIO_Init+0x640>)
 800172e:	f001 fd37 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001748:	4619      	mov	r1, r3
 800174a:	4855      	ldr	r0, [pc, #340]	; (80018a0 <MX_GPIO_Init+0x624>)
 800174c:	f001 fd28 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001750:	2304      	movs	r3, #4
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001754:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001762:	4619      	mov	r1, r3
 8001764:	4853      	ldr	r0, [pc, #332]	; (80018b4 <MX_GPIO_Init+0x638>)
 8001766:	f001 fd1b 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800176a:	2301      	movs	r3, #1
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177a:	4619      	mov	r1, r3
 800177c:	4850      	ldr	r0, [pc, #320]	; (80018c0 <MX_GPIO_Init+0x644>)
 800177e:	f001 fd0f 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001782:	2301      	movs	r3, #1
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001786:	2303      	movs	r3, #3
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001792:	4619      	mov	r1, r3
 8001794:	4848      	ldr	r0, [pc, #288]	; (80018b8 <MX_GPIO_Init+0x63c>)
 8001796:	f001 fd03 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 800179a:	233e      	movs	r3, #62	; 0x3e
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017aa:	230b      	movs	r3, #11
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b2:	4619      	mov	r1, r3
 80017b4:	4840      	ldr	r0, [pc, #256]	; (80018b8 <MX_GPIO_Init+0x63c>)
 80017b6:	f001 fcf3 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 80017ba:	230c      	movs	r3, #12
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ca:	230b      	movs	r3, #11
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d2:	4619      	mov	r1, r3
 80017d4:	4833      	ldr	r0, [pc, #204]	; (80018a4 <MX_GPIO_Init+0x628>)
 80017d6:	f001 fce3 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80017da:	2386      	movs	r3, #134	; 0x86
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ea:	230b      	movs	r3, #11
 80017ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	4833      	ldr	r0, [pc, #204]	; (80018c4 <MX_GPIO_Init+0x648>)
 80017f6:	f001 fcd3 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017fa:	23e0      	movs	r3, #224	; 0xe0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800180a:	230c      	movs	r3, #12
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800180e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001812:	4619      	mov	r1, r3
 8001814:	4823      	ldr	r0, [pc, #140]	; (80018a4 <MX_GPIO_Init+0x628>)
 8001816:	f001 fcc3 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800181a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800182c:	2307      	movs	r3, #7
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001834:	4619      	mov	r1, r3
 8001836:	481e      	ldr	r0, [pc, #120]	; (80018b0 <MX_GPIO_Init+0x634>)
 8001838:	f001 fcb2 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 800183c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001850:	4619      	mov	r1, r3
 8001852:	4814      	ldr	r0, [pc, #80]	; (80018a4 <MX_GPIO_Init+0x628>)
 8001854:	f001 fca4 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001858:	2340      	movs	r3, #64	; 0x40
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001868:	2309      	movs	r3, #9
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001870:	4619      	mov	r1, r3
 8001872:	4814      	ldr	r0, [pc, #80]	; (80018c4 <MX_GPIO_Init+0x648>)
 8001874:	f001 fc94 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800188a:	230e      	movs	r3, #14
 800188c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800188e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001892:	4619      	mov	r1, r3
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <MX_GPIO_Init+0x628>)
 8001896:	f001 fc83 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 800189a:	2303      	movs	r3, #3
 800189c:	e014      	b.n	80018c8 <MX_GPIO_Init+0x64c>
 800189e:	bf00      	nop
 80018a0:	58022000 	.word	0x58022000
 80018a4:	58021c00 	.word	0x58021c00
 80018a8:	58021000 	.word	0x58021000
 80018ac:	58020c00 	.word	0x58020c00
 80018b0:	58020400 	.word	0x58020400
 80018b4:	58021800 	.word	0x58021800
 80018b8:	58020800 	.word	0x58020800
 80018bc:	58021400 	.word	0x58021400
 80018c0:	58022800 	.word	0x58022800
 80018c4:	58020000 	.word	0x58020000
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018d6:	230b      	movs	r3, #11
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	4820      	ldr	r0, [pc, #128]	; (8001964 <MX_GPIO_Init+0x6e8>)
 80018e2:	f001 fc5d 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80018e6:	2304      	movs	r3, #4
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fa:	4619      	mov	r1, r3
 80018fc:	481a      	ldr	r0, [pc, #104]	; (8001968 <MX_GPIO_Init+0x6ec>)
 80018fe:	f001 fc4f 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001908:	2301      	movs	r3, #1
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	4812      	ldr	r0, [pc, #72]	; (8001964 <MX_GPIO_Init+0x6e8>)
 800191c:	f001 fc40 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001932:	2305      	movs	r3, #5
 8001934:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193a:	4619      	mov	r1, r3
 800193c:	4809      	ldr	r0, [pc, #36]	; (8001964 <MX_GPIO_Init+0x6e8>)
 800193e:	f001 fc2f 	bl	80031a0 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001942:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001946:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800194a:	f000 fb79 	bl	8002040 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800194e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001952:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001956:	f000 fb73 	bl	8002040 <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195a:	bf00      	nop
 800195c:	3740      	adds	r7, #64	; 0x40
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	58020400 	.word	0x58020400
 8001968:	58022400 	.word	0x58022400

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	e7fe      	b.n	8001974 <Error_Handler+0x8>
	...

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_MspInit+0x30>)
 8001980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001984:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_MspInit+0x30>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_MspInit+0x30>)
 8001990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	58024400 	.word	0x58024400

080019ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b0ba      	sub	sp, #232	; 0xe8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	22c0      	movs	r2, #192	; 0xc0
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00b f825 	bl	800ca1c <memset>
  if(hadc->Instance==ADC3)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a31      	ldr	r2, [pc, #196]	; (8001a9c <HAL_ADC_MspInit+0xf0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d15b      	bne.n	8001a94 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80019ec:	230c      	movs	r3, #12
 80019ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80019f0:	2304      	movs	r3, #4
 80019f2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019fc:	23c0      	movs	r3, #192	; 0xc0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001a00:	2320      	movs	r3, #32
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 f91a 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001a1e:	f7ff ffa5 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <HAL_ADC_MspInit+0xf4>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_ADC_MspInit+0xf4>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_ADC_MspInit+0xf4>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_ADC_MspInit+0xf4>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_ADC_MspInit+0xf4>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_ADC_MspInit+0xf4>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a64:	2303      	movs	r3, #3
 8001a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a74:	4619      	mov	r1, r3
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <HAL_ADC_MspInit+0xf8>)
 8001a78:	f001 fb92 	bl	80031a0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001a7c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001a80:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001a84:	f000 fadc 	bl	8002040 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001a8c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001a90:	f000 fad6 	bl	8002040 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a94:	bf00      	nop
 8001a96:	37e8      	adds	r7, #232	; 0xe8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58026000 	.word	0x58026000
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58020800 	.word	0x58020800

08001aa8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0bc      	sub	sp, #240	; 0xf0
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac0:	f107 0318 	add.w	r3, r7, #24
 8001ac4:	22c0      	movs	r2, #192	; 0xc0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00a ffa7 	bl	800ca1c <memset>
  if(hqspi->Instance==QUADSPI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a56      	ldr	r2, [pc, #344]	; (8001c2c <HAL_QSPI_MspInit+0x184>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f040 80a5 	bne.w	8001c24 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aea:	f107 0318 	add.w	r3, r7, #24
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 f8ac 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001afa:	f7ff ff37 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001afe:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b04:	4a4a      	ldr	r2, [pc, #296]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001b0e:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b10:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	4a43      	ldr	r2, [pc, #268]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b42:	f043 0320 	orr.w	r3, r3, #32
 8001b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4a:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b58:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b68:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b8e:	230a      	movs	r3, #10
 8001b90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4826      	ldr	r0, [pc, #152]	; (8001c34 <HAL_QSPI_MspInit+0x18c>)
 8001b9c:	f001 fb00 	bl	80031a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001ba0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001ba4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bba:	2309      	movs	r3, #9
 8001bbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	481c      	ldr	r0, [pc, #112]	; (8001c38 <HAL_QSPI_MspInit+0x190>)
 8001bc8:	f001 faea 	bl	80031a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001be6:	230a      	movs	r3, #10
 8001be8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4811      	ldr	r0, [pc, #68]	; (8001c38 <HAL_QSPI_MspInit+0x190>)
 8001bf4:	f001 fad4 	bl	80031a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c12:	2309      	movs	r3, #9
 8001c14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	; (8001c3c <HAL_QSPI_MspInit+0x194>)
 8001c20:	f001 fabe 	bl	80031a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	37f0      	adds	r7, #240	; 0xf0
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	52005000 	.word	0x52005000
 8001c30:	58024400 	.word	0x58024400
 8001c34:	58020400 	.word	0x58020400
 8001c38:	58021400 	.word	0x58021400
 8001c3c:	58020c00 	.word	0x58020c00

08001c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_TIM_Base_MspInit+0x3c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_TIM_Base_MspInit+0x40>)
 8001c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c58:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_TIM_Base_MspInit+0x40>)
 8001c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <HAL_TIM_Base_MspInit+0x40>)
 8001c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40014400 	.word	0x40014400
 8001c80:	58024400 	.word	0x58024400

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd0:	f000 f966 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <OTG_FS_IRQHandler+0x10>)
 8001cde:	f001 fd81 	bl	80037e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	24004b50 	.word	0x24004b50

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f00a fe54 	bl	800c9c8 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	24080000 	.word	0x24080000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	24003668 	.word	0x24003668
 8001d54:	24005290 	.word	0x24005290

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <SystemInit+0xe4>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <SystemInit+0xe4>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <SystemInit+0xe8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	2b06      	cmp	r3, #6
 8001d76:	d807      	bhi.n	8001d88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <SystemInit+0xe8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 030f 	bic.w	r3, r3, #15
 8001d80:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <SystemInit+0xe8>)
 8001d82:	f043 0307 	orr.w	r3, r3, #7
 8001d86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <SystemInit+0xec>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2d      	ldr	r2, [pc, #180]	; (8001e44 <SystemInit+0xec>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <SystemInit+0xec>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <SystemInit+0xec>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4929      	ldr	r1, [pc, #164]	; (8001e44 <SystemInit+0xec>)
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <SystemInit+0xf0>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <SystemInit+0xe8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <SystemInit+0xe8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 030f 	bic.w	r3, r3, #15
 8001dba:	4a21      	ldr	r2, [pc, #132]	; (8001e40 <SystemInit+0xe8>)
 8001dbc:	f043 0307 	orr.w	r3, r3, #7
 8001dc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <SystemInit+0xec>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <SystemInit+0xec>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <SystemInit+0xec>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <SystemInit+0xec>)
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <SystemInit+0xf4>)
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <SystemInit+0xec>)
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <SystemInit+0xf8>)
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <SystemInit+0xec>)
 8001de2:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <SystemInit+0xfc>)
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <SystemInit+0xec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <SystemInit+0xec>)
 8001dee:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <SystemInit+0xfc>)
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <SystemInit+0xec>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <SystemInit+0xec>)
 8001dfa:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <SystemInit+0xfc>)
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <SystemInit+0xec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <SystemInit+0xec>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <SystemInit+0xec>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <SystemInit+0xec>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <SystemInit+0x100>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <SystemInit+0x104>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e22:	d202      	bcs.n	8001e2a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <SystemInit+0x108>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <SystemInit+0x10c>)
 8001e2c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00
 8001e40:	52002000 	.word	0x52002000
 8001e44:	58024400 	.word	0x58024400
 8001e48:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e4c:	02020200 	.word	0x02020200
 8001e50:	01ff0000 	.word	0x01ff0000
 8001e54:	01010280 	.word	0x01010280
 8001e58:	5c001000 	.word	0x5c001000
 8001e5c:	ffff0000 	.word	0xffff0000
 8001e60:	51008108 	.word	0x51008108
 8001e64:	52004000 	.word	0x52004000

08001e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e6c:	f7ff ff74 	bl	8001d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	; (8001eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e96:	f00a fd9d 	bl	800c9d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9a:	f7fe fdb9 	bl	8000a10 <main>
  bx  lr
 8001e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ea4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ea8:	24003380 	.word	0x24003380
  ldr r2, =_sidata
 8001eac:	0800dff0 	.word	0x0800dff0
  ldr r2, =_sbss
 8001eb0:	24003380 	.word	0x24003380
  ldr r4, =_ebss
 8001eb4:	2400528c 	.word	0x2400528c

08001eb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC3_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec2:	2003      	movs	r0, #3
 8001ec4:	f001 f92c 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ec8:	f003 fd00 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_Init+0x68>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	4913      	ldr	r1, [pc, #76]	; (8001f28 <HAL_Init+0x6c>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_Init+0x68>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_Init+0x6c>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_Init+0x70>)
 8001efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f00:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_Init+0x74>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 f814 	bl	8001f34 <HAL_InitTick>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e002      	b.n	8001f1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f16:	f7ff fd2f 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	58024400 	.word	0x58024400
 8001f28:	0800dd38 	.word	0x0800dd38
 8001f2c:	24003220 	.word	0x24003220
 8001f30:	2400321c 	.word	0x2400321c

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_InitTick+0x60>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e021      	b.n	8001f8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_InitTick+0x64>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_InitTick+0x60>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 f911 	bl	8003186 <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d80a      	bhi.n	8001f8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f001 f8db 	bl	8003136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_InitTick+0x68>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	24003228 	.word	0x24003228
 8001f98:	2400321c 	.word	0x2400321c
 8001f9c:	24003224 	.word	0x24003224

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	24003228 	.word	0x24003228
 8001fc4:	2400366c 	.word	0x2400366c

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2400366c 	.word	0x2400366c

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	24003228 	.word	0x24003228

08002028 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetREVID+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0c1b      	lsrs	r3, r3, #16
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	5c001000 	.word	0x5c001000

08002040 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	43db      	mvns	r3, r3
 8002052:	401a      	ands	r2, r3
 8002054:	4904      	ldr	r1, [pc, #16]	; (8002068 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	58000400 	.word	0x58000400

0800206c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	609a      	str	r2, [r3, #8]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	609a      	str	r2, [r3, #8]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3360      	adds	r3, #96	; 0x60
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	430b      	orrs	r3, r1
 8002102:	431a      	orrs	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002108:	bf00      	nop
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	611a      	str	r2, [r3, #16]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002146:	b480      	push	{r7}
 8002148:	b087      	sub	sp, #28
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3360      	adds	r3, #96	; 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	431a      	orrs	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]
  }
}
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3330      	adds	r3, #48	; 0x30
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	4413      	add	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	211f      	movs	r1, #31
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0e9b      	lsrs	r3, r3, #26
 80021b4:	f003 011f 	and.w	r1, r3, #31
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	431a      	orrs	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021c8:	bf00      	nop
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3314      	adds	r3, #20
 80021e4:	461a      	mov	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	0e5b      	lsrs	r3, r3, #25
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	0d1b      	lsrs	r3, r3, #20
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2107      	movs	r1, #7
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	401a      	ands	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	0d1b      	lsrs	r3, r3, #20
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	431a      	orrs	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0318 	and.w	r3, r3, #24
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002250:	40d9      	lsrs	r1, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	400b      	ands	r3, r1
 8002256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800225a:	431a      	orrs	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	000fffff 	.word	0x000fffff

08002274 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002282:	4013      	ands	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6093      	str	r3, [r2, #8]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	5fffffc0 	.word	0x5fffffc0

08002298 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ac:	d101      	bne.n	80022b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	6fffffc0 	.word	0x6fffffc0

080022e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022fc:	d101      	bne.n	8002302 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <LL_ADC_IsEnabled+0x18>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <LL_ADC_IsEnabled+0x1a>
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b04      	cmp	r3, #4
 8002348:	d101      	bne.n	800234e <LL_ADC_REG_IsConversionOngoing+0x18>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b08      	cmp	r3, #8
 800236e:	d101      	bne.n	8002374 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e18f      	b.n	80026be <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff fafd 	bl	80019ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff67 	bl	8002298 <LL_ADC_IsDeepPowerDownEnabled>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff4d 	bl	8002274 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff82 	bl	80022e8 <LL_ADC_IsInternalRegulatorEnabled>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d114      	bne.n	8002414 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff66 	bl	80022c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023f4:	4b87      	ldr	r3, [pc, #540]	; (8002614 <HAL_ADC_Init+0x290>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	4a87      	ldr	r2, [pc, #540]	; (8002618 <HAL_ADC_Init+0x294>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	3301      	adds	r3, #1
 8002404:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002406:	e002      	b.n	800240e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	3b01      	subs	r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f9      	bne.n	8002408 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff65 	bl	80022e8 <LL_ADC_IsInternalRegulatorEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff76 	bl	8002336 <LL_ADC_REG_IsConversionOngoing>
 800244a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8129 	bne.w	80026ac <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 8125 	bne.w	80026ac <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800246a:	f043 0202 	orr.w	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff4a 	bl	8002310 <LL_ADC_IsEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d136      	bne.n	80024f0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a65      	ldr	r2, [pc, #404]	; (800261c <HAL_ADC_Init+0x298>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d004      	beq.n	8002496 <HAL_ADC_Init+0x112>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a63      	ldr	r2, [pc, #396]	; (8002620 <HAL_ADC_Init+0x29c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d10e      	bne.n	80024b4 <HAL_ADC_Init+0x130>
 8002496:	4861      	ldr	r0, [pc, #388]	; (800261c <HAL_ADC_Init+0x298>)
 8002498:	f7ff ff3a 	bl	8002310 <LL_ADC_IsEnabled>
 800249c:	4604      	mov	r4, r0
 800249e:	4860      	ldr	r0, [pc, #384]	; (8002620 <HAL_ADC_Init+0x29c>)
 80024a0:	f7ff ff36 	bl	8002310 <LL_ADC_IsEnabled>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4323      	orrs	r3, r4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e008      	b.n	80024c6 <HAL_ADC_Init+0x142>
 80024b4:	485b      	ldr	r0, [pc, #364]	; (8002624 <HAL_ADC_Init+0x2a0>)
 80024b6:	f7ff ff2b 	bl	8002310 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d012      	beq.n	80024f0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a53      	ldr	r2, [pc, #332]	; (800261c <HAL_ADC_Init+0x298>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_ADC_Init+0x15a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a51      	ldr	r2, [pc, #324]	; (8002620 <HAL_ADC_Init+0x29c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Init+0x15e>
 80024de:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_ADC_Init+0x2a4>)
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_Init+0x160>
 80024e2:	4a52      	ldr	r2, [pc, #328]	; (800262c <HAL_ADC_Init+0x2a8>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f7ff fdbe 	bl	800206c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80024f0:	f7ff fd9a 	bl	8002028 <HAL_GetREVID>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d914      	bls.n	8002528 <HAL_ADC_Init+0x1a4>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d110      	bne.n	8002528 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7d5b      	ldrb	r3, [r3, #21]
 800250a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002510:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002516:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7f1b      	ldrb	r3, [r3, #28]
 800251c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800251e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002520:	f043 030c 	orr.w	r3, r3, #12
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	e00d      	b.n	8002544 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7d5b      	ldrb	r3, [r3, #21]
 800252c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002532:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002538:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7f1b      	ldrb	r3, [r3, #28]
 800253e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7f1b      	ldrb	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d106      	bne.n	800255a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	3b01      	subs	r3, #1
 8002552:	045b      	lsls	r3, r3, #17
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <HAL_ADC_Init+0x2ac>)
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	69b9      	ldr	r1, [r7, #24]
 8002586:	430b      	orrs	r3, r1
 8002588:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fed1 	bl	8002336 <LL_ADC_REG_IsConversionOngoing>
 8002594:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fede 	bl	800235c <LL_ADC_INJ_IsConversionOngoing>
 80025a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d15f      	bne.n	8002668 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d15c      	bne.n	8002668 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7d1b      	ldrb	r3, [r3, #20]
 80025b2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <HAL_ADC_Init+0x2b0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d130      	bne.n	800263c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_ADC_Init+0x2b4>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ee:	3a01      	subs	r2, #1
 80025f0:	0411      	lsls	r1, r2, #16
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025f6:	4311      	orrs	r1, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002602:	430a      	orrs	r2, r1
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	e01c      	b.n	800264c <HAL_ADC_Init+0x2c8>
 8002612:	bf00      	nop
 8002614:	2400321c 	.word	0x2400321c
 8002618:	053e2d63 	.word	0x053e2d63
 800261c:	40022000 	.word	0x40022000
 8002620:	40022100 	.word	0x40022100
 8002624:	58026000 	.word	0x58026000
 8002628:	40022300 	.word	0x40022300
 800262c:	58026300 	.word	0x58026300
 8002630:	fff0c003 	.word	0xfff0c003
 8002634:	ffffbffc 	.word	0xffffbffc
 8002638:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fb80 	bl	8002d68 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d10c      	bne.n	800268a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f023 010f 	bic.w	r1, r3, #15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	1e5a      	subs	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
 8002688:	e007      	b.n	800269a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 020f 	bic.w	r2, r2, #15
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f023 0303 	bic.w	r3, r3, #3
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
 80026aa:	e007      	b.n	80026bc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f043 0210 	orr.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd90      	pop	{r4, r7, pc}
 80026c6:	bf00      	nop

080026c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b0a1      	sub	sp, #132	; 0x84
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a9d      	ldr	r2, [pc, #628]	; (8002958 <HAL_ADC_ConfigChannel+0x290>)
 80026e2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x2a>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e321      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x66e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fe19 	bl	8002336 <LL_ADC_REG_IsConversionOngoing>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 8306 	bne.w	8002d18 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002714:	2b00      	cmp	r3, #0
 8002716:	d108      	bne.n	800272a <HAL_ADC_ConfigChannel+0x62>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2201      	movs	r2, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	e016      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800273a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800273c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2201      	movs	r2, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	69d1      	ldr	r1, [r2, #28]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	430b      	orrs	r3, r1
 8002764:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	f7ff fd02 	bl	800217c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fdda 	bl	8002336 <LL_ADC_REG_IsConversionOngoing>
 8002782:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fde7 	bl	800235c <LL_ADC_INJ_IsConversionOngoing>
 800278e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 80b3 	bne.w	80028fe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 80af 	bne.w	80028fe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	461a      	mov	r2, r3
 80027ae:	f7ff fd11 	bl	80021d4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027b2:	4b6a      	ldr	r3, [pc, #424]	; (800295c <HAL_ADC_ConfigChannel+0x294>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80027ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027be:	d10b      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x110>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	e01d      	b.n	8002814 <HAL_ADC_ConfigChannel+0x14c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10b      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x136>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	e00a      	b.n	8002814 <HAL_ADC_ConfigChannel+0x14c>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b04      	cmp	r3, #4
 800281c:	d027      	beq.n	800286e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6919      	ldr	r1, [r3, #16]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800282c:	f7ff fc52 	bl	80020d4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6919      	ldr	r1, [r3, #16]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	7e5b      	ldrb	r3, [r3, #25]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d102      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x17e>
 8002840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002844:	e000      	b.n	8002848 <HAL_ADC_ConfigChannel+0x180>
 8002846:	2300      	movs	r3, #0
 8002848:	461a      	mov	r2, r3
 800284a:	f7ff fc7c 	bl	8002146 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6919      	ldr	r1, [r3, #16]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	7e1b      	ldrb	r3, [r3, #24]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x19c>
 800285e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002862:	e000      	b.n	8002866 <HAL_ADC_ConfigChannel+0x19e>
 8002864:	2300      	movs	r3, #0
 8002866:	461a      	mov	r2, r3
 8002868:	f7ff fc54 	bl	8002114 <LL_ADC_SetDataRightShift>
 800286c:	e047      	b.n	80028fe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	069b      	lsls	r3, r3, #26
 800287e:	429a      	cmp	r2, r3
 8002880:	d107      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002890:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	069b      	lsls	r3, r3, #26
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d107      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028b4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	069b      	lsls	r3, r3, #26
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d107      	bne.n	80028da <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028d8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	069b      	lsls	r3, r3, #26
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d107      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028fc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fd04 	bl	8002310 <LL_ADC_IsEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 820d 	bne.w	8002d2a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	461a      	mov	r2, r3
 800291e:	f7ff fc85 	bl	800222c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	4a0c      	ldr	r2, [pc, #48]	; (8002958 <HAL_ADC_ConfigChannel+0x290>)
 8002928:	4293      	cmp	r3, r2
 800292a:	f040 8133 	bne.w	8002b94 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800293a:	2b00      	cmp	r3, #0
 800293c:	d110      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x298>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0e9b      	lsrs	r3, r3, #26
 8002944:	3301      	adds	r3, #1
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2b09      	cmp	r3, #9
 800294c:	bf94      	ite	ls
 800294e:	2301      	movls	r3, #1
 8002950:	2300      	movhi	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	e01e      	b.n	8002994 <HAL_ADC_ConfigChannel+0x2cc>
 8002956:	bf00      	nop
 8002958:	47ff0000 	.word	0x47ff0000
 800295c:	5c001000 	.word	0x5c001000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800296e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002970:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002978:	2320      	movs	r3, #32
 800297a:	e003      	b.n	8002984 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800297c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2b09      	cmp	r3, #9
 800298c:	bf94      	ite	ls
 800298e:	2301      	movls	r3, #1
 8002990:	2300      	movhi	r3, #0
 8002992:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002994:	2b00      	cmp	r3, #0
 8002996:	d079      	beq.n	8002a8c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x2ec>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0e9b      	lsrs	r3, r3, #26
 80029aa:	3301      	adds	r3, #1
 80029ac:	069b      	lsls	r3, r3, #26
 80029ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b2:	e015      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x318>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80029c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80029c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80029cc:	2320      	movs	r3, #32
 80029ce:	e003      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80029d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x338>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	3301      	adds	r3, #1
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	e017      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x368>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e003      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	3301      	adds	r3, #1
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	ea42 0103 	orr.w	r1, r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x38e>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	3301      	adds	r3, #1
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	051b      	lsls	r3, r3, #20
 8002a54:	e018      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x3c0>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e003      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	e07e      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x3e0>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	069b      	lsls	r3, r3, #26
 8002aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aa6:	e015      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x40c>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e003      	b.n	8002acc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	069b      	lsls	r3, r3, #26
 8002ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x42c>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	e017      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x45c>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	61bb      	str	r3, [r7, #24]
  return result;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	ea42 0103 	orr.w	r1, r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x488>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	3b1e      	subs	r3, #30
 8002b48:	051b      	lsls	r3, r3, #20
 8002b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	e01b      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x4c0>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	60fb      	str	r3, [r7, #12]
  return result;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e003      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	f003 021f 	and.w	r2, r3, #31
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b1e      	subs	r3, #30
 8002b82:	051b      	lsls	r3, r3, #20
 8002b84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7ff fb20 	bl	80021d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f280 80c6 	bge.w	8002d2a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a67      	ldr	r2, [pc, #412]	; (8002d40 <HAL_ADC_ConfigChannel+0x678>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x4ea>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a65      	ldr	r2, [pc, #404]	; (8002d44 <HAL_ADC_ConfigChannel+0x67c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x4ee>
 8002bb2:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <HAL_ADC_ConfigChannel+0x680>)
 8002bb4:	e000      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x4f0>
 8002bb6:	4b65      	ldr	r3, [pc, #404]	; (8002d4c <HAL_ADC_ConfigChannel+0x684>)
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fa7d 	bl	80020b8 <LL_ADC_GetCommonPathInternalCh>
 8002bbe:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a5e      	ldr	r2, [pc, #376]	; (8002d40 <HAL_ADC_ConfigChannel+0x678>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x50c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5d      	ldr	r2, [pc, #372]	; (8002d44 <HAL_ADC_ConfigChannel+0x67c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x52a>
 8002bd4:	485a      	ldr	r0, [pc, #360]	; (8002d40 <HAL_ADC_ConfigChannel+0x678>)
 8002bd6:	f7ff fb9b 	bl	8002310 <LL_ADC_IsEnabled>
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4859      	ldr	r0, [pc, #356]	; (8002d44 <HAL_ADC_ConfigChannel+0x67c>)
 8002bde:	f7ff fb97 	bl	8002310 <LL_ADC_IsEnabled>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4323      	orrs	r3, r4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	e008      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x53c>
 8002bf2:	4857      	ldr	r0, [pc, #348]	; (8002d50 <HAL_ADC_ConfigChannel+0x688>)
 8002bf4:	f7ff fb8c 	bl	8002310 <LL_ADC_IsEnabled>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf0c      	ite	eq
 8002bfe:	2301      	moveq	r3, #1
 8002c00:	2300      	movne	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d07d      	beq.n	8002d04 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a51      	ldr	r2, [pc, #324]	; (8002d54 <HAL_ADC_ConfigChannel+0x68c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d130      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x5ac>
 8002c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d12b      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a4b      	ldr	r2, [pc, #300]	; (8002d50 <HAL_ADC_ConfigChannel+0x688>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	f040 8081 	bne.w	8002d2a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a44      	ldr	r2, [pc, #272]	; (8002d40 <HAL_ADC_ConfigChannel+0x678>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0x574>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a43      	ldr	r2, [pc, #268]	; (8002d44 <HAL_ADC_ConfigChannel+0x67c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x578>
 8002c3c:	4a42      	ldr	r2, [pc, #264]	; (8002d48 <HAL_ADC_ConfigChannel+0x680>)
 8002c3e:	e000      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x57a>
 8002c40:	4a42      	ldr	r2, [pc, #264]	; (8002d4c <HAL_ADC_ConfigChannel+0x684>)
 8002c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f7ff fa21 	bl	8002092 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c50:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_ADC_ConfigChannel+0x690>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	4a41      	ldr	r2, [pc, #260]	; (8002d5c <HAL_ADC_ConfigChannel+0x694>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	3301      	adds	r3, #1
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c64:	e002      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f9      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c72:	e05a      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a39      	ldr	r2, [pc, #228]	; (8002d60 <HAL_ADC_ConfigChannel+0x698>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d11e      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x5f4>
 8002c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d119      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <HAL_ADC_ConfigChannel+0x688>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d14b      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <HAL_ADC_ConfigChannel+0x678>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_ADC_ConfigChannel+0x5de>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <HAL_ADC_ConfigChannel+0x67c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x5e2>
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_ADC_ConfigChannel+0x680>)
 8002ca8:	e000      	b.n	8002cac <HAL_ADC_ConfigChannel+0x5e4>
 8002caa:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <HAL_ADC_ConfigChannel+0x684>)
 8002cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f7ff f9ec 	bl	8002092 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cba:	e036      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a28      	ldr	r2, [pc, #160]	; (8002d64 <HAL_ADC_ConfigChannel+0x69c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d131      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x662>
 8002cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d12c      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_ADC_ConfigChannel+0x688>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d127      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <HAL_ADC_ConfigChannel+0x678>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_ConfigChannel+0x626>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <HAL_ADC_ConfigChannel+0x67c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x62a>
 8002cee:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <HAL_ADC_ConfigChannel+0x680>)
 8002cf0:	e000      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x62c>
 8002cf2:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <HAL_ADC_ConfigChannel+0x684>)
 8002cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f7ff f9c8 	bl	8002092 <LL_ADC_SetCommonPathInternalCh>
 8002d02:	e012      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d16:	e008      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	f043 0220 	orr.w	r2, r3, #32
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3784      	adds	r7, #132	; 0x84
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40022100 	.word	0x40022100
 8002d48:	40022300 	.word	0x40022300
 8002d4c:	58026300 	.word	0x58026300
 8002d50:	58026000 	.word	0x58026000
 8002d54:	cb840000 	.word	0xcb840000
 8002d58:	2400321c 	.word	0x2400321c
 8002d5c:	053e2d63 	.word	0x053e2d63
 8002d60:	c7520000 	.word	0xc7520000
 8002d64:	cfb80000 	.word	0xcfb80000

08002d68 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a7a      	ldr	r2, [pc, #488]	; (8002f60 <ADC_ConfigureBoostMode+0x1f8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <ADC_ConfigureBoostMode+0x1c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a79      	ldr	r2, [pc, #484]	; (8002f64 <ADC_ConfigureBoostMode+0x1fc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d109      	bne.n	8002d98 <ADC_ConfigureBoostMode+0x30>
 8002d84:	4b78      	ldr	r3, [pc, #480]	; (8002f68 <ADC_ConfigureBoostMode+0x200>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e008      	b.n	8002daa <ADC_ConfigureBoostMode+0x42>
 8002d98:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <ADC_ConfigureBoostMode+0x204>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01c      	beq.n	8002de8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002dae:	f002 ff07 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8002db2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dbc:	d010      	beq.n	8002de0 <ADC_ConfigureBoostMode+0x78>
 8002dbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dc2:	d873      	bhi.n	8002eac <ADC_ConfigureBoostMode+0x144>
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d002      	beq.n	8002dd0 <ADC_ConfigureBoostMode+0x68>
 8002dca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dce:	d16d      	bne.n	8002eac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	60fb      	str	r3, [r7, #12]
        break;
 8002dde:	e068      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	60fb      	str	r3, [r7, #12]
        break;
 8002de6:	e064      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002de8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	f004 f936 	bl	8007060 <HAL_RCCEx_GetPeriphCLKFreq>
 8002df4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002dfe:	d051      	beq.n	8002ea4 <ADC_ConfigureBoostMode+0x13c>
 8002e00:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e04:	d854      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
 8002e06:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e0a:	d047      	beq.n	8002e9c <ADC_ConfigureBoostMode+0x134>
 8002e0c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e10:	d84e      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
 8002e12:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e16:	d03d      	beq.n	8002e94 <ADC_ConfigureBoostMode+0x12c>
 8002e18:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e1c:	d848      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
 8002e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e22:	d033      	beq.n	8002e8c <ADC_ConfigureBoostMode+0x124>
 8002e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e28:	d842      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
 8002e2a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e2e:	d029      	beq.n	8002e84 <ADC_ConfigureBoostMode+0x11c>
 8002e30:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e34:	d83c      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
 8002e36:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e3a:	d01a      	beq.n	8002e72 <ADC_ConfigureBoostMode+0x10a>
 8002e3c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e40:	d836      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
 8002e42:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e46:	d014      	beq.n	8002e72 <ADC_ConfigureBoostMode+0x10a>
 8002e48:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e4c:	d830      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
 8002e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e52:	d00e      	beq.n	8002e72 <ADC_ConfigureBoostMode+0x10a>
 8002e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e58:	d82a      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
 8002e5a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e5e:	d008      	beq.n	8002e72 <ADC_ConfigureBoostMode+0x10a>
 8002e60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e64:	d824      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
 8002e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e6a:	d002      	beq.n	8002e72 <ADC_ConfigureBoostMode+0x10a>
 8002e6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e70:	d11e      	bne.n	8002eb0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	0c9b      	lsrs	r3, r3, #18
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	60fb      	str	r3, [r7, #12]
        break;
 8002e82:	e016      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
        break;
 8002e8a:	e012      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	60fb      	str	r3, [r7, #12]
        break;
 8002e92:	e00e      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	60fb      	str	r3, [r7, #12]
        break;
 8002e9a:	e00a      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	09db      	lsrs	r3, r3, #7
 8002ea0:	60fb      	str	r3, [r7, #12]
        break;
 8002ea2:	e006      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	60fb      	str	r3, [r7, #12]
        break;
 8002eaa:	e002      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002eb0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002eb2:	f7ff f8b9 	bl	8002028 <HAL_GetREVID>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d815      	bhi.n	8002eec <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <ADC_ConfigureBoostMode+0x208>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d908      	bls.n	8002eda <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ed8:	e03e      	b.n	8002f58 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	e035      	b.n	8002f58 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <ADC_ConfigureBoostMode+0x20c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d808      	bhi.n	8002f0c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f08:	609a      	str	r2, [r3, #8]
}
 8002f0a:	e025      	b.n	8002f58 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <ADC_ConfigureBoostMode+0x210>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d80a      	bhi.n	8002f2a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	e016      	b.n	8002f58 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <ADC_ConfigureBoostMode+0x214>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d80a      	bhi.n	8002f48 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f44:	609a      	str	r2, [r3, #8]
}
 8002f46:	e007      	b.n	8002f58 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40022100 	.word	0x40022100
 8002f68:	40022300 	.word	0x40022300
 8002f6c:	58026300 	.word	0x58026300
 8002f70:	01312d00 	.word	0x01312d00
 8002f74:	005f5e10 	.word	0x005f5e10
 8002f78:	00bebc20 	.word	0x00bebc20
 8002f7c:	017d7840 	.word	0x017d7840

08002f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fae:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	60d3      	str	r3, [r2, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00
 8002fc4:	05fa0000 	.word	0x05fa0000

08002fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 0307 	and.w	r3, r3, #7
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db0b      	blt.n	800300e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4907      	ldr	r1, [pc, #28]	; (800301c <__NVIC_EnableIRQ+0x38>)
 8002ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2001      	movs	r0, #1
 8003006:	fa00 f202 	lsl.w	r2, r0, r2
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000e100 	.word	0xe000e100

08003020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800302c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db0a      	blt.n	800304a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	490c      	ldr	r1, [pc, #48]	; (800306c <__NVIC_SetPriority+0x4c>)
 800303a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	440b      	add	r3, r1
 8003044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003048:	e00a      	b.n	8003060 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4908      	ldr	r1, [pc, #32]	; (8003070 <__NVIC_SetPriority+0x50>)
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3b04      	subs	r3, #4
 8003058:	0112      	lsls	r2, r2, #4
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	440b      	add	r3, r1
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f1c3 0307 	rsb	r3, r3, #7
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf28      	it	cs
 8003092:	2304      	movcs	r3, #4
 8003094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3304      	adds	r3, #4
 800309a:	2b06      	cmp	r3, #6
 800309c:	d902      	bls.n	80030a4 <NVIC_EncodePriority+0x30>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3b03      	subs	r3, #3
 80030a2:	e000      	b.n	80030a6 <NVIC_EncodePriority+0x32>
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	401a      	ands	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030bc:	f04f 31ff 	mov.w	r1, #4294967295
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43d9      	mvns	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	4313      	orrs	r3, r2
         );
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ec:	d301      	bcc.n	80030f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00f      	b.n	8003112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <SysTick_Config+0x40>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fa:	210f      	movs	r1, #15
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f7ff ff8e 	bl	8003020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <SysTick_Config+0x40>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <SysTick_Config+0x40>)
 800310c:	2207      	movs	r2, #7
 800310e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000e010 	.word	0xe000e010

08003120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff29 	bl	8002f80 <__NVIC_SetPriorityGrouping>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003144:	f7ff ff40 	bl	8002fc8 <__NVIC_GetPriorityGrouping>
 8003148:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f7ff ff90 	bl	8003074 <NVIC_EncodePriority>
 8003154:	4602      	mov	r2, r0
 8003156:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff5f 	bl	8003020 <__NVIC_SetPriority>
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff33 	bl	8002fe4 <__NVIC_EnableIRQ>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffa4 	bl	80030dc <SysTick_Config>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031ae:	4b89      	ldr	r3, [pc, #548]	; (80033d4 <HAL_GPIO_Init+0x234>)
 80031b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031b2:	e194      	b.n	80034de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8186 	beq.w	80034d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d005      	beq.n	80031e4 <HAL_GPIO_Init+0x44>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d130      	bne.n	8003246 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800321a:	2201      	movs	r2, #1
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 0201 	and.w	r2, r3, #1
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b03      	cmp	r3, #3
 8003250:	d017      	beq.n	8003282 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d123      	bne.n	80032d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	08da      	lsrs	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3208      	adds	r2, #8
 80032d0:	69b9      	ldr	r1, [r7, #24]
 80032d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2203      	movs	r2, #3
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0203 	and.w	r2, r3, #3
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80e0 	beq.w	80034d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003318:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_GPIO_Init+0x238>)
 800331a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800331e:	4a2e      	ldr	r2, [pc, #184]	; (80033d8 <HAL_GPIO_Init+0x238>)
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_GPIO_Init+0x238>)
 800332a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_GPIO_Init+0x23c>)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <HAL_GPIO_Init+0x240>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d052      	beq.n	8003408 <HAL_GPIO_Init+0x268>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <HAL_GPIO_Init+0x244>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_GPIO_Init+0x22e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_GPIO_Init+0x248>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d02b      	beq.n	80033ca <HAL_GPIO_Init+0x22a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_GPIO_Init+0x24c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d025      	beq.n	80033c6 <HAL_GPIO_Init+0x226>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_GPIO_Init+0x250>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01f      	beq.n	80033c2 <HAL_GPIO_Init+0x222>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <HAL_GPIO_Init+0x254>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d019      	beq.n	80033be <HAL_GPIO_Init+0x21e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <HAL_GPIO_Init+0x258>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0x21a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a19      	ldr	r2, [pc, #100]	; (80033fc <HAL_GPIO_Init+0x25c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00d      	beq.n	80033b6 <HAL_GPIO_Init+0x216>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a18      	ldr	r2, [pc, #96]	; (8003400 <HAL_GPIO_Init+0x260>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <HAL_GPIO_Init+0x212>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_GPIO_Init+0x264>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_GPIO_Init+0x20e>
 80033aa:	2309      	movs	r3, #9
 80033ac:	e02d      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033ae:	230a      	movs	r3, #10
 80033b0:	e02b      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033b2:	2308      	movs	r3, #8
 80033b4:	e029      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033b6:	2307      	movs	r3, #7
 80033b8:	e027      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033ba:	2306      	movs	r3, #6
 80033bc:	e025      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033be:	2305      	movs	r3, #5
 80033c0:	e023      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033c2:	2304      	movs	r3, #4
 80033c4:	e021      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033c6:	2303      	movs	r3, #3
 80033c8:	e01f      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e01d      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e01b      	b.n	800340a <HAL_GPIO_Init+0x26a>
 80033d2:	bf00      	nop
 80033d4:	58000080 	.word	0x58000080
 80033d8:	58024400 	.word	0x58024400
 80033dc:	58000400 	.word	0x58000400
 80033e0:	58020000 	.word	0x58020000
 80033e4:	58020400 	.word	0x58020400
 80033e8:	58020800 	.word	0x58020800
 80033ec:	58020c00 	.word	0x58020c00
 80033f0:	58021000 	.word	0x58021000
 80033f4:	58021400 	.word	0x58021400
 80033f8:	58021800 	.word	0x58021800
 80033fc:	58021c00 	.word	0x58021c00
 8003400:	58022000 	.word	0x58022000
 8003404:	58022400 	.word	0x58022400
 8003408:	2300      	movs	r3, #0
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	f002 0203 	and.w	r2, r2, #3
 8003410:	0092      	lsls	r2, r2, #2
 8003412:	4093      	lsls	r3, r2
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800341a:	4938      	ldr	r1, [pc, #224]	; (80034fc <HAL_GPIO_Init+0x35c>)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	3302      	adds	r3, #2
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800344e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800347c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f47f ae63 	bne.w	80031b4 <HAL_GPIO_Init+0x14>
  }
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	3724      	adds	r7, #36	; 0x24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	58000400 	.word	0x58000400

08003500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
 800350c:	4613      	mov	r3, r2
 800350e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003510:	787b      	ldrb	r3, [r7, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800351c:	e003      	b.n	8003526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800351e:	887b      	ldrh	r3, [r7, #2]
 8003520:	041a      	lsls	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	619a      	str	r2, [r3, #24]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003534:	b08f      	sub	sp, #60	; 0x3c
 8003536:	af0a      	add	r7, sp, #40	; 0x28
 8003538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e116      	b.n	8003772 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f008 fefa 	bl	800c358 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2203      	movs	r2, #3
 8003568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f005 fae3 	bl	8008b4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	687e      	ldr	r6, [r7, #4]
 8003590:	466d      	mov	r5, sp
 8003592:	f106 0410 	add.w	r4, r6, #16
 8003596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80035a6:	1d33      	adds	r3, r6, #4
 80035a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035aa:	6838      	ldr	r0, [r7, #0]
 80035ac:	f005 f9ae 	bl	800890c <USB_CoreInit>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0d7      	b.n	8003772 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f005 fad1 	bl	8008b70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e04a      	b.n	800366a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	333d      	adds	r3, #61	; 0x3d
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	333c      	adds	r3, #60	; 0x3c
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	b298      	uxth	r0, r3
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3356      	adds	r3, #86	; 0x56
 8003610:	4602      	mov	r2, r0
 8003612:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3340      	adds	r3, #64	; 0x40
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3344      	adds	r3, #68	; 0x44
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3348      	adds	r3, #72	; 0x48
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	334c      	adds	r3, #76	; 0x4c
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	3301      	adds	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d3af      	bcc.n	80035d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e044      	b.n	8003704 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	3301      	adds	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	d3b5      	bcc.n	800367a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	687e      	ldr	r6, [r7, #4]
 8003716:	466d      	mov	r5, sp
 8003718:	f106 0410 	add.w	r4, r6, #16
 800371c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800371e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003728:	e885 0003 	stmia.w	r5, {r0, r1}
 800372c:	1d33      	adds	r3, r6, #4
 800372e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003730:	6838      	ldr	r0, [r7, #0]
 8003732:	f005 fa69 	bl	8008c08 <USB_DevInit>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e014      	b.n	8003772 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2b01      	cmp	r3, #1
 800375e:	d102      	bne.n	8003766 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 f96f 	bl	8004a44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f006 faab 	bl	8009cc6 <USB_DevDisconnect>

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800377a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_PCD_Start+0x1c>
 8003792:	2302      	movs	r3, #2
 8003794:	e022      	b.n	80037dc <HAL_PCD_Start+0x62>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f005 f9b2 	bl	8008b2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f006 fa59 	bl	8009c84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b08d      	sub	sp, #52	; 0x34
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f006 fb17 	bl	8009e2e <USB_GetMode>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 84b7 	bne.w	8004176 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f006 fa7b 	bl	8009d08 <USB_ReadInterrupts>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 84ad 	beq.w	8004174 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f006 fa68 	bl	8009d08 <USB_ReadInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b02      	cmp	r3, #2
 8003840:	d107      	bne.n	8003852 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f002 0202 	and.w	r2, r2, #2
 8003850:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f006 fa56 	bl	8009d08 <USB_ReadInterrupts>
 800385c:	4603      	mov	r3, r0
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b10      	cmp	r3, #16
 8003864:	d161      	bne.n	800392a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0210 	bic.w	r2, r2, #16
 8003874:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f003 020f 	and.w	r2, r3, #15
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	3304      	adds	r3, #4
 8003894:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	0c5b      	lsrs	r3, r3, #17
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d124      	bne.n	80038ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d035      	beq.n	800391a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	6a38      	ldr	r0, [r7, #32]
 80038c2:	f006 f88d 	bl	80099e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d2:	441a      	add	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038e4:	441a      	add	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	615a      	str	r2, [r3, #20]
 80038ea:	e016      	b.n	800391a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	0c5b      	lsrs	r3, r3, #17
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	2b06      	cmp	r3, #6
 80038f6:	d110      	bne.n	800391a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038fe:	2208      	movs	r2, #8
 8003900:	4619      	mov	r1, r3
 8003902:	6a38      	ldr	r0, [r7, #32]
 8003904:	f006 f86c 	bl	80099e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003914:	441a      	add	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0210 	orr.w	r2, r2, #16
 8003928:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f006 f9ea 	bl	8009d08 <USB_ReadInterrupts>
 8003934:	4603      	mov	r3, r0
 8003936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800393e:	f040 80a7 	bne.w	8003a90 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f006 f9ef 	bl	8009d2e <USB_ReadDevAllOutEpInterrupt>
 8003950:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003952:	e099      	b.n	8003a88 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 808e 	beq.w	8003a7c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f006 fa13 	bl	8009d96 <USB_ReadDevOutEPInterrupt>
 8003970:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00c      	beq.n	8003996 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	461a      	mov	r2, r3
 800398a:	2301      	movs	r3, #1
 800398c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800398e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fed1 	bl	8004738 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00c      	beq.n	80039ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	2308      	movs	r3, #8
 80039b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 ffa7 	bl	8004908 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	461a      	mov	r2, r3
 80039d2:	2310      	movs	r3, #16
 80039d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d030      	beq.n	8003a42 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b80      	cmp	r3, #128	; 0x80
 80039ea:	d109      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	3304      	adds	r3, #4
 8003a14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	78db      	ldrb	r3, [r3, #3]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d108      	bne.n	8003a30 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f008 fdba 	bl	800c5a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2302      	movs	r3, #2
 8003a40:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	461a      	mov	r2, r3
 8003a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a7a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	3301      	adds	r3, #1
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f47f af62 	bne.w	8003954 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f006 f937 	bl	8009d08 <USB_ReadInterrupts>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa4:	f040 80db 	bne.w	8003c5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f006 f958 	bl	8009d62 <USB_ReadDevAllInEpInterrupt>
 8003ab2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ab8:	e0cd      	b.n	8003c56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80c2 	beq.w	8003c4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f006 f97e 	bl	8009dd2 <USB_ReadDevInEPInterrupt>
 8003ad6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d057      	beq.n	8003b92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2201      	movs	r2, #1
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69f9      	ldr	r1, [r7, #28]
 8003afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b02:	4013      	ands	r3, r2
 8003b04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	461a      	mov	r2, r3
 8003b14:	2301      	movs	r3, #1
 8003b16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d132      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3348      	adds	r3, #72	; 0x48
 8003b30:	6819      	ldr	r1, [r3, #0]
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4403      	add	r3, r0
 8003b40:	3344      	adds	r3, #68	; 0x44
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4419      	add	r1, r3
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4403      	add	r3, r0
 8003b54:	3348      	adds	r3, #72	; 0x48
 8003b56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d113      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x3a2>
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	334c      	adds	r3, #76	; 0x4c
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d108      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2101      	movs	r1, #1
 8003b82:	f006 f987 	bl	8009e94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f008 fc84 	bl	800c49a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2308      	movs	r3, #8
 8003bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	461a      	mov	r2, r3
 8003be2:	2340      	movs	r3, #64	; 0x40
 8003be4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d023      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bf2:	6a38      	ldr	r0, [r7, #32]
 8003bf4:	f005 f966 	bl	8008ec4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	3338      	adds	r3, #56	; 0x38
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	3304      	adds	r3, #4
 8003c0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	78db      	ldrb	r3, [r3, #3]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d108      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2200      	movs	r2, #0
 8003c18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f008 fcd1 	bl	800c5c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c32:	461a      	mov	r2, r3
 8003c34:	2302      	movs	r3, #2
 8003c36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fcea 	bl	800461e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f47f af2e 	bne.w	8003aba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f006 f850 	bl	8009d08 <USB_ReadInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c72:	d122      	bne.n	8003cba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d108      	bne.n	8003ca4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fef5 	bl	8004a8c <HAL_PCDEx_LPM_Callback>
 8003ca2:	e002      	b.n	8003caa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f008 fc6f 	bl	800c588 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f006 f822 	bl	8009d08 <USB_ReadInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cce:	d112      	bne.n	8003cf6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d102      	bne.n	8003ce6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f008 fc2b 	bl	800c53c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f006 f804 	bl	8009d08 <USB_ReadInterrupts>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d0a:	d121      	bne.n	8003d50 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003d1a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d111      	bne.n	8003d4a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	089b      	lsrs	r3, r3, #2
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d40:	2101      	movs	r1, #1
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fea2 	bl	8004a8c <HAL_PCDEx_LPM_Callback>
 8003d48:	e002      	b.n	8003d50 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f008 fbf6 	bl	800c53c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f005 ffd7 	bl	8009d08 <USB_ReadInterrupts>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d64:	f040 80b7 	bne.w	8003ed6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2110      	movs	r1, #16
 8003d82:	4618      	mov	r0, r3
 8003d84:	f005 f89e 	bl	8008ec4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8c:	e046      	b.n	8003e1c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003da0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de6:	0151      	lsls	r1, r2, #5
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	440a      	add	r2, r1
 8003dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003df4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	3301      	adds	r3, #1
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3b3      	bcc.n	8003d8e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e52:	f043 030b 	orr.w	r3, r3, #11
 8003e56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e68:	f043 030b 	orr.w	r3, r3, #11
 8003e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6e:	e015      	b.n	8003e9c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f242 032b 	movw	r3, #8235	; 0x202b
 8003e84:	4313      	orrs	r3, r2
 8003e86:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e96:	f043 030b 	orr.w	r3, r3, #11
 8003e9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003eae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f005 ffe7 	bl	8009e94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f005 ff14 	bl	8009d08 <USB_ReadInterrupts>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eea:	d124      	bne.n	8003f36 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f005 ffab 	bl	8009e4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f005 f85f 	bl	8008fbe <USB_GetDevSpeed>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681c      	ldr	r4, [r3, #0]
 8003f0c:	f001 fe58 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8003f10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f004 fd64 	bl	80089e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f008 fae2 	bl	800c4ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f005 fee4 	bl	8009d08 <USB_ReadInterrupts>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d10a      	bne.n	8003f60 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f008 fabf 	bl	800c4ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f002 0208 	and.w	r2, r2, #8
 8003f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f005 fecf 	bl	8009d08 <USB_ReadInterrupts>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f70:	2b80      	cmp	r3, #128	; 0x80
 8003f72:	d122      	bne.n	8003fba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f80:	2301      	movs	r3, #1
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	e014      	b.n	8003fb0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fb09 	bl	80045bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	3301      	adds	r3, #1
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d3e5      	bcc.n	8003f86 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f005 fea2 	bl	8009d08 <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fce:	d13b      	bne.n	8004048 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd4:	e02b      	b.n	800402e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3340      	adds	r3, #64	; 0x40
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d115      	bne.n	8004028 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ffc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da12      	bge.n	8004028 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	333f      	adds	r3, #63	; 0x3f
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800401e:	b2db      	uxtb	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 faca 	bl	80045bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	3301      	adds	r3, #1
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004034:	429a      	cmp	r2, r3
 8004036:	d3ce      	bcc.n	8003fd6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f005 fe5b 	bl	8009d08 <USB_ReadInterrupts>
 8004052:	4603      	mov	r3, r0
 8004054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800405c:	d155      	bne.n	800410a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800405e:	2301      	movs	r3, #1
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
 8004062:	e045      	b.n	80040f0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d12e      	bne.n	80040ea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800408c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800408e:	2b00      	cmp	r3, #0
 8004090:	da2b      	bge.n	80040ea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800409e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d121      	bne.n	80040ea <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80040b8:	2201      	movs	r2, #1
 80040ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e6:	6053      	str	r3, [r2, #4]
            break;
 80040e8:	e007      	b.n	80040fa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	3301      	adds	r3, #1
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d3b4      	bcc.n	8004064 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f005 fdfa 	bl	8009d08 <USB_ReadInterrupts>
 8004114:	4603      	mov	r3, r0
 8004116:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d10a      	bne.n	8004136 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f008 fa63 	bl	800c5ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f005 fde4 	bl	8009d08 <USB_ReadInterrupts>
 8004140:	4603      	mov	r3, r0
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b04      	cmp	r3, #4
 8004148:	d115      	bne.n	8004176 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f008 fa53 	bl	800c608 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	e000      	b.n	8004176 <HAL_PCD_IRQHandler+0x992>
      return;
 8004174:	bf00      	nop
    }
  }
}
 8004176:	3734      	adds	r7, #52	; 0x34
 8004178:	46bd      	mov	sp, r7
 800417a:	bd90      	pop	{r4, r7, pc}

0800417c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_PCD_SetAddress+0x1a>
 8004192:	2302      	movs	r3, #2
 8004194:	e013      	b.n	80041be <HAL_PCD_SetAddress+0x42>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f005 fd42 	bl	8009c38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	461a      	mov	r2, r3
 80041d4:	4603      	mov	r3, r0
 80041d6:	70fb      	strb	r3, [r7, #3]
 80041d8:	460b      	mov	r3, r1
 80041da:	803b      	strh	r3, [r7, #0]
 80041dc:	4613      	mov	r3, r2
 80041de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	da0f      	bge.n	800420c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	f003 020f 	and.w	r2, r3, #15
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	3338      	adds	r3, #56	; 0x38
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	4413      	add	r3, r2
 8004200:	3304      	adds	r3, #4
 8004202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	705a      	strb	r2, [r3, #1]
 800420a:	e00f      	b.n	800422c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	f003 020f 	and.w	r2, r3, #15
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4413      	add	r3, r2
 8004222:	3304      	adds	r3, #4
 8004224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004238:	883a      	ldrh	r2, [r7, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	78ba      	ldrb	r2, [r7, #2]
 8004242:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	785b      	ldrb	r3, [r3, #1]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004256:	78bb      	ldrb	r3, [r7, #2]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d102      	bne.n	8004262 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_PCD_EP_Open+0xaa>
 800426c:	2302      	movs	r3, #2
 800426e:	e00e      	b.n	800428e <HAL_PCD_EP_Open+0xc8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	4618      	mov	r0, r3
 8004280:	f004 fec2 	bl	8009008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800428c:	7afb      	ldrb	r3, [r7, #11]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	da0f      	bge.n	80042ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	f003 020f 	and.w	r2, r3, #15
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	3338      	adds	r3, #56	; 0x38
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	3304      	adds	r3, #4
 80042c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	705a      	strb	r2, [r3, #1]
 80042c8:	e00f      	b.n	80042ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	f003 020f 	and.w	r2, r3, #15
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	3304      	adds	r3, #4
 80042e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_PCD_EP_Close+0x6e>
 8004300:	2302      	movs	r3, #2
 8004302:	e00e      	b.n	8004322 <HAL_PCD_EP_Close+0x8c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68f9      	ldr	r1, [r7, #12]
 8004312:	4618      	mov	r0, r3
 8004314:	f004 ff00 	bl	8009118 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b086      	sub	sp, #24
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	460b      	mov	r3, r1
 8004338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800433a:	7afb      	ldrb	r3, [r7, #11]
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2200      	movs	r2, #0
 8004364:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	b2da      	uxtb	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d102      	bne.n	8004386 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	6979      	ldr	r1, [r7, #20]
 8004394:	f004 ff9c 	bl	80092d0 <USB_EPStartXfer>

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80043c4:	681b      	ldr	r3, [r3, #0]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	460b      	mov	r3, r1
 80043e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	f003 020f 	and.w	r2, r3, #15
 80043e8:	4613      	mov	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	3338      	adds	r3, #56	; 0x38
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	3304      	adds	r3, #4
 80043f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2201      	movs	r2, #1
 8004410:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	b2da      	uxtb	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d102      	bne.n	800442c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	6979      	ldr	r1, [r7, #20]
 800443a:	f004 ff49 	bl	80092d0 <USB_EPStartXfer>

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	f003 020f 	and.w	r2, r3, #15
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	429a      	cmp	r2, r3
 8004460:	d901      	bls.n	8004466 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e050      	b.n	8004508 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800446a:	2b00      	cmp	r3, #0
 800446c:	da0f      	bge.n	800448e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 020f 	and.w	r2, r3, #15
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	3338      	adds	r3, #56	; 0x38
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	705a      	strb	r2, [r3, #1]
 800448c:	e00d      	b.n	80044aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	3304      	adds	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_PCD_EP_SetStall+0x82>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e01e      	b.n	8004508 <HAL_PCD_EP_SetStall+0xc0>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	4618      	mov	r0, r3
 80044da:	f005 fad9 	bl	8009a90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	b2d9      	uxtb	r1, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044f8:	461a      	mov	r2, r3
 80044fa:	f005 fccb 	bl	8009e94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d901      	bls.n	800452e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e042      	b.n	80045b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800452e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004532:	2b00      	cmp	r3, #0
 8004534:	da0f      	bge.n	8004556 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 020f 	and.w	r2, r3, #15
 800453c:	4613      	mov	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	3338      	adds	r3, #56	; 0x38
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	3304      	adds	r3, #4
 800454c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	705a      	strb	r2, [r3, #1]
 8004554:	e00f      	b.n	8004576 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	f003 020f 	and.w	r2, r3, #15
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	b2da      	uxtb	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_PCD_EP_ClrStall+0x86>
 8004592:	2302      	movs	r3, #2
 8004594:	e00e      	b.n	80045b4 <HAL_PCD_EP_ClrStall+0xa4>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f005 fae1 	bl	8009b6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80045c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	da0c      	bge.n	80045ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	3338      	adds	r3, #56	; 0x38
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	3304      	adds	r3, #4
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e00c      	b.n	8004604 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	f003 020f 	and.w	r2, r3, #15
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	3304      	adds	r3, #4
 8004602:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68f9      	ldr	r1, [r7, #12]
 800460a:	4618      	mov	r0, r3
 800460c:	f005 f900 	bl	8009810 <USB_EPStopXfer>
 8004610:	4603      	mov	r3, r0
 8004612:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004614:	7afb      	ldrb	r3, [r7, #11]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b08a      	sub	sp, #40	; 0x28
 8004622:	af02      	add	r7, sp, #8
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	3338      	adds	r3, #56	; 0x38
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4413      	add	r3, r2
 8004642:	3304      	adds	r3, #4
 8004644:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	429a      	cmp	r2, r3
 8004650:	d901      	bls.n	8004656 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06c      	b.n	8004730 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	429a      	cmp	r2, r3
 800466a:	d902      	bls.n	8004672 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3303      	adds	r3, #3
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800467a:	e02b      	b.n	80046d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	429a      	cmp	r2, r3
 8004690:	d902      	bls.n	8004698 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3303      	adds	r3, #3
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68d9      	ldr	r1, [r3, #12]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	4603      	mov	r3, r0
 80046b6:	6978      	ldr	r0, [r7, #20]
 80046b8:	f005 f954 	bl	8009964 <USB_WritePacket>

    ep->xfer_buff  += len;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	441a      	add	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	441a      	add	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d809      	bhi.n	80046fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d203      	bcs.n	80046fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1be      	bne.n	800467c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	429a      	cmp	r2, r3
 8004708:	d811      	bhi.n	800472e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	2201      	movs	r2, #1
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	43db      	mvns	r3, r3
 8004724:	6939      	ldr	r1, [r7, #16]
 8004726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800472a:	4013      	ands	r3, r2
 800472c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	333c      	adds	r3, #60	; 0x3c
 8004750:	3304      	adds	r3, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d17b      	bne.n	8004866 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d015      	beq.n	80047a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4a61      	ldr	r2, [pc, #388]	; (8004900 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	f240 80b9 	bls.w	80048f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80b3 	beq.w	80048f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a0:	6093      	str	r3, [r2, #8]
 80047a2:	e0a7      	b.n	80048f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	461a      	mov	r2, r3
 80047bc:	2320      	movs	r3, #32
 80047be:	6093      	str	r3, [r2, #8]
 80047c0:	e098      	b.n	80048f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f040 8093 	bne.w	80048f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4a4b      	ldr	r2, [pc, #300]	; (8004900 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d90f      	bls.n	80047f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	461a      	mov	r2, r3
 80047ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f2:	6093      	str	r3, [r2, #8]
 80047f4:	e07e      	b.n	80048f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4413      	add	r3, r2
 8004808:	3304      	adds	r3, #4
 800480a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	0159      	lsls	r1, r3, #5
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	440b      	add	r3, r1
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d114      	bne.n	8004858 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004840:	461a      	mov	r2, r3
 8004842:	2101      	movs	r1, #1
 8004844:	f005 fb26 	bl	8009e94 <USB_EP0_OutStart>
 8004848:	e006      	b.n	8004858 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	441a      	add	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f007 fe00 	bl	800c464 <HAL_PCD_DataOutStageCallback>
 8004864:	e046      	b.n	80048f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	4a26      	ldr	r2, [pc, #152]	; (8004904 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d124      	bne.n	80048b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	461a      	mov	r2, r3
 8004886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488a:	6093      	str	r3, [r2, #8]
 800488c:	e032      	b.n	80048f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	461a      	mov	r2, r3
 80048a6:	2320      	movs	r3, #32
 80048a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f007 fdd7 	bl	800c464 <HAL_PCD_DataOutStageCallback>
 80048b6:	e01d      	b.n	80048f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d114      	bne.n	80048e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d108      	bne.n	80048e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048e0:	461a      	mov	r2, r3
 80048e2:	2100      	movs	r1, #0
 80048e4:	f005 fad6 	bl	8009e94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f007 fdb8 	bl	800c464 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	4f54300a 	.word	0x4f54300a
 8004904:	4f54310a 	.word	0x4f54310a

08004908 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	333c      	adds	r3, #60	; 0x3c
 8004920:	3304      	adds	r3, #4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a15      	ldr	r2, [pc, #84]	; (8004990 <PCD_EP_OutSetupPacket_int+0x88>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d90e      	bls.n	800495c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	461a      	mov	r2, r3
 8004956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f007 fd6f 	bl	800c440 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <PCD_EP_OutSetupPacket_int+0x88>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d90c      	bls.n	8004984 <PCD_EP_OutSetupPacket_int+0x7c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d108      	bne.n	8004984 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800497c:	461a      	mov	r2, r3
 800497e:	2101      	movs	r1, #1
 8004980:	f005 fa88 	bl	8009e94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	4f54300a 	.word	0x4f54300a

08004994 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
 80049a0:	4613      	mov	r3, r2
 80049a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049b2:	883b      	ldrh	r3, [r7, #0]
 80049b4:	0419      	lsls	r1, r3, #16
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	430a      	orrs	r2, r1
 80049be:	629a      	str	r2, [r3, #40]	; 0x28
 80049c0:	e028      	b.n	8004a14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4413      	add	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e00d      	b.n	80049f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	3340      	adds	r3, #64	; 0x40
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4413      	add	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	3301      	adds	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
 80049f2:	7bfa      	ldrb	r2, [r7, #15]
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d3ec      	bcc.n	80049d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049fc:	883b      	ldrh	r3, [r7, #0]
 80049fe:	0418      	lsls	r0, r3, #16
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	4302      	orrs	r2, r0
 8004a0c:	3340      	adds	r3, #64	; 0x40
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	10000003 	.word	0x10000003

08004a8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_PWREx_ConfigSupply+0x70>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d00a      	beq.n	8004ace <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ab8:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_PWREx_ConfigSupply+0x70>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e01f      	b.n	8004b0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e01d      	b.n	8004b0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <HAL_PWREx_ConfigSupply+0x70>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f023 0207 	bic.w	r2, r3, #7
 8004ad6:	490f      	ldr	r1, [pc, #60]	; (8004b14 <HAL_PWREx_ConfigSupply+0x70>)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ade:	f7fd fa73 	bl	8001fc8 <HAL_GetTick>
 8004ae2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ae4:	e009      	b.n	8004afa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ae6:	f7fd fa6f 	bl	8001fc8 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004af4:	d901      	bls.n	8004afa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e007      	b.n	8004b0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_PWREx_ConfigSupply+0x70>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b06:	d1ee      	bne.n	8004ae6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	58024800 	.word	0x58024800

08004b18 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b26:	60d3      	str	r3, [r2, #12]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	58024800 	.word	0x58024800

08004b38 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004b40:	f7fd fa42 	bl	8001fc8 <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e05f      	b.n	8004c10 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d107      	bne.n	8004b6c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fc ffa3 	bl	8001aa8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004b62:	f241 3188 	movw	r1, #5000	; 0x1388
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f85a 	bl	8004c20 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	021a      	lsls	r2, r3, #8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2120      	movs	r1, #32
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f852 	bl	8004c3c <QSPI_WaitFlagStateUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004b9c:	7afb      	ldrb	r3, [r7, #11]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d135      	bne.n	8004c0e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <HAL_QSPI_Init+0xe0>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6852      	ldr	r2, [r2, #4]
 8004bb0:	0611      	lsls	r1, r2, #24
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68d2      	ldr	r2, [r2, #12]
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	69d2      	ldr	r2, [r2, #28]
 8004bbc:	4311      	orrs	r1, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6a12      	ldr	r2, [r2, #32]
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <HAL_QSPI_Init+0xe4>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6912      	ldr	r2, [r2, #16]
 8004bda:	0411      	lsls	r1, r2, #16
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6952      	ldr	r2, [r2, #20]
 8004be0:	4311      	orrs	r1, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6992      	ldr	r2, [r2, #24]
 8004be6:	4311      	orrs	r1, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	00ffff2f 	.word	0x00ffff2f
 8004c1c:	ffe0f8fe 	.word	0xffe0f8fe

08004c20 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c4c:	e01a      	b.n	8004c84 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d016      	beq.n	8004c84 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c56:	f7fd f9b7 	bl	8001fc8 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2204      	movs	r2, #4
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f043 0201 	orr.w	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e00e      	b.n	8004ca2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf14      	ite	ne
 8004c92:	2301      	movne	r3, #1
 8004c94:	2300      	moveq	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d1d6      	bne.n	8004c4e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08c      	sub	sp, #48	; 0x30
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f000 bc48 	b.w	8005550 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8088 	beq.w	8004dde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cce:	4b99      	ldr	r3, [pc, #612]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cd8:	4b96      	ldr	r3, [pc, #600]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d007      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x48>
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	2b18      	cmp	r3, #24
 8004ce8:	d111      	bne.n	8004d0e <HAL_RCC_OscConfig+0x62>
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d10c      	bne.n	8004d0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf4:	4b8f      	ldr	r3, [pc, #572]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d06d      	beq.n	8004ddc <HAL_RCC_OscConfig+0x130>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d169      	bne.n	8004ddc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f000 bc21 	b.w	8005550 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x7a>
 8004d18:	4b86      	ldr	r3, [pc, #536]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a85      	ldr	r2, [pc, #532]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e02e      	b.n	8004d84 <HAL_RCC_OscConfig+0xd8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x9c>
 8004d2e:	4b81      	ldr	r3, [pc, #516]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a80      	ldr	r2, [pc, #512]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	4b7e      	ldr	r3, [pc, #504]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a7d      	ldr	r2, [pc, #500]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e01d      	b.n	8004d84 <HAL_RCC_OscConfig+0xd8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCC_OscConfig+0xc0>
 8004d52:	4b78      	ldr	r3, [pc, #480]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a77      	ldr	r2, [pc, #476]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b75      	ldr	r3, [pc, #468]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a74      	ldr	r2, [pc, #464]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0xd8>
 8004d6c:	4b71      	ldr	r3, [pc, #452]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a70      	ldr	r2, [pc, #448]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	4b6e      	ldr	r3, [pc, #440]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6d      	ldr	r2, [pc, #436]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd f91c 	bl	8001fc8 <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fd f918 	bl	8001fc8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e3d4      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004da6:	4b63      	ldr	r3, [pc, #396]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0xe8>
 8004db2:	e014      	b.n	8004dde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fd f908 	bl	8001fc8 <HAL_GetTick>
 8004db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dbc:	f7fd f904 	bl	8001fc8 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e3c0      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dce:	4b59      	ldr	r3, [pc, #356]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x110>
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80ca 	beq.w	8004f80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dec:	4b51      	ldr	r3, [pc, #324]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004df6:	4b4f      	ldr	r3, [pc, #316]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <HAL_RCC_OscConfig+0x166>
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	2b18      	cmp	r3, #24
 8004e06:	d156      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x20a>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d151      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e12:	4b48      	ldr	r3, [pc, #288]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_RCC_OscConfig+0x17e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e392      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e2a:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 0219 	bic.w	r2, r3, #25
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	493f      	ldr	r1, [pc, #252]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fd f8c4 	bl	8001fc8 <HAL_GetTick>
 8004e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e44:	f7fd f8c0 	bl	8001fc8 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e37c      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e56:	4b37      	ldr	r3, [pc, #220]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	f7fd f8e1 	bl	8002028 <HAL_GetREVID>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d817      	bhi.n	8004ea0 <HAL_RCC_OscConfig+0x1f4>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d108      	bne.n	8004e8a <HAL_RCC_OscConfig+0x1de>
 8004e78:	4b2e      	ldr	r3, [pc, #184]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e80:	4a2c      	ldr	r2, [pc, #176]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e86:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e88:	e07a      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8a:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	031b      	lsls	r3, r3, #12
 8004e98:	4926      	ldr	r1, [pc, #152]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9e:	e06f      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea0:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	061b      	lsls	r3, r3, #24
 8004eae:	4921      	ldr	r1, [pc, #132]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb4:	e064      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d047      	beq.n	8004f4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 0219 	bic.w	r2, r3, #25
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	491a      	ldr	r1, [pc, #104]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fd f87a 	bl	8001fc8 <HAL_GetTick>
 8004ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed8:	f7fd f876 	bl	8001fc8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e332      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef6:	f7fd f897 	bl	8002028 <HAL_GetREVID>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d819      	bhi.n	8004f38 <HAL_RCC_OscConfig+0x28c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d108      	bne.n	8004f1e <HAL_RCC_OscConfig+0x272>
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004f14:	4a07      	ldr	r2, [pc, #28]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f1a:	6053      	str	r3, [r2, #4]
 8004f1c:	e030      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	031b      	lsls	r3, r3, #12
 8004f2c:	4901      	ldr	r1, [pc, #4]	; (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
 8004f32:	e025      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
 8004f34:	58024400 	.word	0x58024400
 8004f38:	4b9a      	ldr	r3, [pc, #616]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	4997      	ldr	r1, [pc, #604]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
 8004f4c:	e018      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4e:	4b95      	ldr	r3, [pc, #596]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a94      	ldr	r2, [pc, #592]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fd f835 	bl	8001fc8 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fd f831 	bl	8001fc8 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e2ed      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f74:	4b8b      	ldr	r3, [pc, #556]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f0      	bne.n	8004f62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80a9 	beq.w	80050e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8e:	4b85      	ldr	r3, [pc, #532]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f98:	4b82      	ldr	r3, [pc, #520]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d007      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x308>
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b18      	cmp	r3, #24
 8004fa8:	d13a      	bne.n	8005020 <HAL_RCC_OscConfig+0x374>
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d135      	bne.n	8005020 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fb4:	4b7b      	ldr	r3, [pc, #492]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_OscConfig+0x320>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	2b80      	cmp	r3, #128	; 0x80
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e2c1      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fcc:	f7fd f82c 	bl	8002028 <HAL_GetREVID>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d817      	bhi.n	800500a <HAL_RCC_OscConfig+0x35e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d108      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x348>
 8004fe2:	4b70      	ldr	r3, [pc, #448]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004fea:	4a6e      	ldr	r2, [pc, #440]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ff0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ff2:	e075      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ff4:	4b6b      	ldr	r3, [pc, #428]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	069b      	lsls	r3, r3, #26
 8005002:	4968      	ldr	r1, [pc, #416]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005004:	4313      	orrs	r3, r2
 8005006:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005008:	e06a      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800500a:	4b66      	ldr	r3, [pc, #408]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	4962      	ldr	r1, [pc, #392]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800501a:	4313      	orrs	r3, r2
 800501c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800501e:	e05f      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d042      	beq.n	80050ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005028:	4b5e      	ldr	r3, [pc, #376]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a5d      	ldr	r2, [pc, #372]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800502e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fc ffc8 	bl	8001fc8 <HAL_GetTick>
 8005038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800503c:	f7fc ffc4 	bl	8001fc8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e280      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800504e:	4b55      	ldr	r3, [pc, #340]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800505a:	f7fc ffe5 	bl	8002028 <HAL_GetREVID>
 800505e:	4603      	mov	r3, r0
 8005060:	f241 0203 	movw	r2, #4099	; 0x1003
 8005064:	4293      	cmp	r3, r2
 8005066:	d817      	bhi.n	8005098 <HAL_RCC_OscConfig+0x3ec>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	2b20      	cmp	r3, #32
 800506e:	d108      	bne.n	8005082 <HAL_RCC_OscConfig+0x3d6>
 8005070:	4b4c      	ldr	r3, [pc, #304]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005078:	4a4a      	ldr	r2, [pc, #296]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800507a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800507e:	6053      	str	r3, [r2, #4]
 8005080:	e02e      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
 8005082:	4b48      	ldr	r3, [pc, #288]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	069b      	lsls	r3, r3, #26
 8005090:	4944      	ldr	r1, [pc, #272]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
 8005096:	e023      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
 8005098:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	493f      	ldr	r1, [pc, #252]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60cb      	str	r3, [r1, #12]
 80050ac:	e018      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80050ae:	4b3d      	ldr	r3, [pc, #244]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3c      	ldr	r2, [pc, #240]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fc ff85 	bl	8001fc8 <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050c2:	f7fc ff81 	bl	8001fc8 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e23d      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050d4:	4b33      	ldr	r3, [pc, #204]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f0      	bne.n	80050c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d036      	beq.n	800515a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d019      	beq.n	8005128 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050f4:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f8:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fc ff62 	bl	8001fc8 <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005108:	f7fc ff5e 	bl	8001fc8 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e21a      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800511a:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800511c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0x45c>
 8005126:	e018      	b.n	800515a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005128:	4b1e      	ldr	r3, [pc, #120]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800512a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fc ff48 	bl	8001fc8 <HAL_GetTick>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513c:	f7fc ff44 	bl	8001fc8 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e200      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d039      	beq.n	80051da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01c      	beq.n	80051a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a0c      	ldr	r2, [pc, #48]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005178:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800517a:	f7fc ff25 	bl	8001fc8 <HAL_GetTick>
 800517e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005182:	f7fc ff21 	bl	8001fc8 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e1dd      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005194:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCC_OscConfig+0x4d6>
 80051a0:	e01b      	b.n	80051da <HAL_RCC_OscConfig+0x52e>
 80051a2:	bf00      	nop
 80051a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051a8:	4b9b      	ldr	r3, [pc, #620]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a9a      	ldr	r2, [pc, #616]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80051ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051b4:	f7fc ff08 	bl	8001fc8 <HAL_GetTick>
 80051b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051bc:	f7fc ff04 	bl	8001fc8 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e1c0      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051ce:	4b92      	ldr	r3, [pc, #584]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8081 	beq.w	80052ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051e8:	4b8c      	ldr	r3, [pc, #560]	; (800541c <HAL_RCC_OscConfig+0x770>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a8b      	ldr	r2, [pc, #556]	; (800541c <HAL_RCC_OscConfig+0x770>)
 80051ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f4:	f7fc fee8 	bl	8001fc8 <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fc:	f7fc fee4 	bl	8001fc8 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e1a0      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800520e:	4b83      	ldr	r3, [pc, #524]	; (800541c <HAL_RCC_OscConfig+0x770>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d106      	bne.n	8005230 <HAL_RCC_OscConfig+0x584>
 8005222:	4b7d      	ldr	r3, [pc, #500]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005226:	4a7c      	ldr	r2, [pc, #496]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	6713      	str	r3, [r2, #112]	; 0x70
 800522e:	e02d      	b.n	800528c <HAL_RCC_OscConfig+0x5e0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10c      	bne.n	8005252 <HAL_RCC_OscConfig+0x5a6>
 8005238:	4b77      	ldr	r3, [pc, #476]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a76      	ldr	r2, [pc, #472]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
 8005244:	4b74      	ldr	r3, [pc, #464]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	4a73      	ldr	r2, [pc, #460]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 800524a:	f023 0304 	bic.w	r3, r3, #4
 800524e:	6713      	str	r3, [r2, #112]	; 0x70
 8005250:	e01c      	b.n	800528c <HAL_RCC_OscConfig+0x5e0>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b05      	cmp	r3, #5
 8005258:	d10c      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c8>
 800525a:	4b6f      	ldr	r3, [pc, #444]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525e:	4a6e      	ldr	r2, [pc, #440]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005260:	f043 0304 	orr.w	r3, r3, #4
 8005264:	6713      	str	r3, [r2, #112]	; 0x70
 8005266:	4b6c      	ldr	r3, [pc, #432]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	4a6b      	ldr	r2, [pc, #428]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6713      	str	r3, [r2, #112]	; 0x70
 8005272:	e00b      	b.n	800528c <HAL_RCC_OscConfig+0x5e0>
 8005274:	4b68      	ldr	r3, [pc, #416]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	4a67      	ldr	r2, [pc, #412]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	6713      	str	r3, [r2, #112]	; 0x70
 8005280:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	4a64      	ldr	r2, [pc, #400]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005286:	f023 0304 	bic.w	r3, r3, #4
 800528a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d015      	beq.n	80052c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fc fe98 	bl	8001fc8 <HAL_GetTick>
 8005298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529c:	f7fc fe94 	bl	8001fc8 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e14e      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052b2:	4b59      	ldr	r3, [pc, #356]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ee      	beq.n	800529c <HAL_RCC_OscConfig+0x5f0>
 80052be:	e014      	b.n	80052ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fc fe82 	bl	8001fc8 <HAL_GetTick>
 80052c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052c6:	e00a      	b.n	80052de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fc fe7e 	bl	8001fc8 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e138      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052de:	4b4e      	ldr	r3, [pc, #312]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1ee      	bne.n	80052c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 812d 	beq.w	800554e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052f4:	4b48      	ldr	r3, [pc, #288]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052fc:	2b18      	cmp	r3, #24
 80052fe:	f000 80bd 	beq.w	800547c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	2b02      	cmp	r3, #2
 8005308:	f040 809e 	bne.w	8005448 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530c:	4b42      	ldr	r3, [pc, #264]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a41      	ldr	r2, [pc, #260]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fc fe56 	bl	8001fc8 <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005320:	f7fc fe52 	bl	8001fc8 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e10e      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005332:	4b39      	ldr	r3, [pc, #228]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800533e:	4b36      	ldr	r3, [pc, #216]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005342:	4b37      	ldr	r3, [pc, #220]	; (8005420 <HAL_RCC_OscConfig+0x774>)
 8005344:	4013      	ands	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800534e:	0112      	lsls	r2, r2, #4
 8005350:	430a      	orrs	r2, r1
 8005352:	4931      	ldr	r1, [pc, #196]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	628b      	str	r3, [r1, #40]	; 0x28
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	3b01      	subs	r3, #1
 800535e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005366:	3b01      	subs	r3, #1
 8005368:	025b      	lsls	r3, r3, #9
 800536a:	b29b      	uxth	r3, r3
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	3b01      	subs	r3, #1
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005380:	3b01      	subs	r3, #1
 8005382:	061b      	lsls	r3, r3, #24
 8005384:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005388:	4923      	ldr	r1, [pc, #140]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 800538a:	4313      	orrs	r3, r2
 800538c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800538e:	4b22      	ldr	r3, [pc, #136]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	4a21      	ldr	r2, [pc, #132]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800539a:	4b1f      	ldr	r3, [pc, #124]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 800539c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800539e:	4b21      	ldr	r3, [pc, #132]	; (8005424 <HAL_RCC_OscConfig+0x778>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053a6:	00d2      	lsls	r2, r2, #3
 80053a8:	491b      	ldr	r1, [pc, #108]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80053ae:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	f023 020c 	bic.w	r2, r3, #12
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	4917      	ldr	r1, [pc, #92]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053c0:	4b15      	ldr	r3, [pc, #84]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	f023 0202 	bic.w	r2, r3, #2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053cc:	4912      	ldr	r1, [pc, #72]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053de:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	4a0d      	ldr	r2, [pc, #52]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	4a0a      	ldr	r2, [pc, #40]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	4a07      	ldr	r2, [pc, #28]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a04      	ldr	r2, [pc, #16]	; (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800540c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fc fddb 	bl	8001fc8 <HAL_GetTick>
 8005412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005414:	e011      	b.n	800543a <HAL_RCC_OscConfig+0x78e>
 8005416:	bf00      	nop
 8005418:	58024400 	.word	0x58024400
 800541c:	58024800 	.word	0x58024800
 8005420:	fffffc0c 	.word	0xfffffc0c
 8005424:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005428:	f7fc fdce 	bl	8001fc8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e08a      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800543a:	4b47      	ldr	r3, [pc, #284]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x77c>
 8005446:	e082      	b.n	800554e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005448:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a42      	ldr	r2, [pc, #264]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fc fdb8 	bl	8001fc8 <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fc fdb4 	bl	8001fc8 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e070      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800546e:	4b3a      	ldr	r3, [pc, #232]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x7b0>
 800547a:	e068      	b.n	800554e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800547c:	4b36      	ldr	r3, [pc, #216]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005482:	4b35      	ldr	r3, [pc, #212]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	2b01      	cmp	r3, #1
 800548e:	d031      	beq.n	80054f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f003 0203 	and.w	r2, r3, #3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d12a      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d122      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d11a      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	0a5b      	lsrs	r3, r3, #9
 80054c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d111      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d108      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	0e1b      	lsrs	r3, r3, #24
 80054e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e02b      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054f8:	4b17      	ldr	r3, [pc, #92]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	08db      	lsrs	r3, r3, #3
 80054fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005502:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	429a      	cmp	r2, r3
 800550c:	d01f      	beq.n	800554e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800550e:	4b12      	ldr	r3, [pc, #72]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	4a11      	ldr	r2, [pc, #68]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800551a:	f7fc fd55 	bl	8001fc8 <HAL_GetTick>
 800551e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005520:	bf00      	nop
 8005522:	f7fc fd51 	bl	8001fc8 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	4293      	cmp	r3, r2
 800552c:	d0f9      	beq.n	8005522 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800552e:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <HAL_RCC_OscConfig+0x8b0>)
 8005534:	4013      	ands	r3, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800553a:	00d2      	lsls	r2, r2, #3
 800553c:	4906      	ldr	r1, [pc, #24]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800553e:	4313      	orrs	r3, r2
 8005540:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	4a04      	ldr	r2, [pc, #16]	; (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3730      	adds	r7, #48	; 0x30
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	58024400 	.word	0x58024400
 800555c:	ffff0007 	.word	0xffff0007

08005560 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e19c      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005574:	4b8a      	ldr	r3, [pc, #552]	; (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d910      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005582:	4b87      	ldr	r3, [pc, #540]	; (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 020f 	bic.w	r2, r3, #15
 800558a:	4985      	ldr	r1, [pc, #532]	; (80057a0 <HAL_RCC_ClockConfig+0x240>)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	4313      	orrs	r3, r2
 8005590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b83      	ldr	r3, [pc, #524]	; (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e184      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	4b7b      	ldr	r3, [pc, #492]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055bc:	429a      	cmp	r2, r3
 80055be:	d908      	bls.n	80055d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055c0:	4b78      	ldr	r3, [pc, #480]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	4975      	ldr	r1, [pc, #468]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	4b70      	ldr	r3, [pc, #448]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d908      	bls.n	8005600 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055ee:	4b6d      	ldr	r3, [pc, #436]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	496a      	ldr	r1, [pc, #424]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005618:	429a      	cmp	r2, r3
 800561a:	d908      	bls.n	800562e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800561c:	4b61      	ldr	r3, [pc, #388]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	495e      	ldr	r1, [pc, #376]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800562a:	4313      	orrs	r3, r2
 800562c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	4b59      	ldr	r3, [pc, #356]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005646:	429a      	cmp	r2, r3
 8005648:	d908      	bls.n	800565c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800564a:	4b56      	ldr	r3, [pc, #344]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	4953      	ldr	r1, [pc, #332]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005658:	4313      	orrs	r3, r2
 800565a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d010      	beq.n	800568a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	429a      	cmp	r2, r3
 8005676:	d908      	bls.n	800568a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005678:	4b4a      	ldr	r3, [pc, #296]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f023 020f 	bic.w	r2, r3, #15
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4947      	ldr	r1, [pc, #284]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005686:	4313      	orrs	r3, r2
 8005688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d055      	beq.n	8005742 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005696:	4b43      	ldr	r3, [pc, #268]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	4940      	ldr	r1, [pc, #256]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056b0:	4b3c      	ldr	r3, [pc, #240]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d121      	bne.n	8005700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0f6      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056c8:	4b36      	ldr	r3, [pc, #216]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d115      	bne.n	8005700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e0ea      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d107      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056e0:	4b30      	ldr	r3, [pc, #192]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0de      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056f0:	4b2c      	ldr	r3, [pc, #176]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0d6      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005700:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f023 0207 	bic.w	r2, r3, #7
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4925      	ldr	r1, [pc, #148]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005712:	f7fc fc59 	bl	8001fc8 <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005718:	e00a      	b.n	8005730 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800571a:	f7fc fc55 	bl	8001fc8 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e0be      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005730:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	429a      	cmp	r2, r3
 8005740:	d1eb      	bne.n	800571a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d010      	beq.n	8005770 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	429a      	cmp	r2, r3
 800575c:	d208      	bcs.n	8005770 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f023 020f 	bic.w	r2, r3, #15
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	490e      	ldr	r1, [pc, #56]	; (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800576c:	4313      	orrs	r3, r2
 800576e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d214      	bcs.n	80057a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 020f 	bic.w	r2, r3, #15
 8005786:	4906      	ldr	r1, [pc, #24]	; (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d005      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e086      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
 80057a0:	52002000 	.word	0x52002000
 80057a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d010      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	4b3f      	ldr	r3, [pc, #252]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d208      	bcs.n	80057d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057c4:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	4939      	ldr	r1, [pc, #228]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d010      	beq.n	8005804 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	4b34      	ldr	r3, [pc, #208]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d208      	bcs.n	8005804 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057f2:	4b31      	ldr	r3, [pc, #196]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	492e      	ldr	r1, [pc, #184]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005800:	4313      	orrs	r3, r2
 8005802:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	d010      	beq.n	8005832 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	4b28      	ldr	r3, [pc, #160]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800581c:	429a      	cmp	r2, r3
 800581e:	d208      	bcs.n	8005832 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005820:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	4922      	ldr	r1, [pc, #136]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 800582e:	4313      	orrs	r3, r2
 8005830:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69da      	ldr	r2, [r3, #28]
 8005842:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800584a:	429a      	cmp	r2, r3
 800584c:	d208      	bcs.n	8005860 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800584e:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	4917      	ldr	r1, [pc, #92]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 800585c:	4313      	orrs	r3, r2
 800585e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005860:	f000 f834 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8005864:	4602      	mov	r2, r0
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	4912      	ldr	r1, [pc, #72]	; (80058bc <HAL_RCC_ClockConfig+0x35c>)
 8005872:	5ccb      	ldrb	r3, [r1, r3]
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
 800587c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800587e:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <HAL_RCC_ClockConfig+0x35c>)
 8005888:	5cd3      	ldrb	r3, [r2, r3]
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
 8005894:	4a0a      	ldr	r2, [pc, #40]	; (80058c0 <HAL_RCC_ClockConfig+0x360>)
 8005896:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005898:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <HAL_RCC_ClockConfig+0x364>)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800589e:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <HAL_RCC_ClockConfig+0x368>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fc fb46 	bl	8001f34 <HAL_InitTick>
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	58024400 	.word	0x58024400
 80058bc:	0800dd38 	.word	0x0800dd38
 80058c0:	24003220 	.word	0x24003220
 80058c4:	2400321c 	.word	0x2400321c
 80058c8:	24003224 	.word	0x24003224

080058cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b089      	sub	sp, #36	; 0x24
 80058d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d2:	4bb3      	ldr	r3, [pc, #716]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058da:	2b18      	cmp	r3, #24
 80058dc:	f200 8155 	bhi.w	8005b8a <HAL_RCC_GetSysClockFreq+0x2be>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	0800594d 	.word	0x0800594d
 80058ec:	08005b8b 	.word	0x08005b8b
 80058f0:	08005b8b 	.word	0x08005b8b
 80058f4:	08005b8b 	.word	0x08005b8b
 80058f8:	08005b8b 	.word	0x08005b8b
 80058fc:	08005b8b 	.word	0x08005b8b
 8005900:	08005b8b 	.word	0x08005b8b
 8005904:	08005b8b 	.word	0x08005b8b
 8005908:	08005973 	.word	0x08005973
 800590c:	08005b8b 	.word	0x08005b8b
 8005910:	08005b8b 	.word	0x08005b8b
 8005914:	08005b8b 	.word	0x08005b8b
 8005918:	08005b8b 	.word	0x08005b8b
 800591c:	08005b8b 	.word	0x08005b8b
 8005920:	08005b8b 	.word	0x08005b8b
 8005924:	08005b8b 	.word	0x08005b8b
 8005928:	08005979 	.word	0x08005979
 800592c:	08005b8b 	.word	0x08005b8b
 8005930:	08005b8b 	.word	0x08005b8b
 8005934:	08005b8b 	.word	0x08005b8b
 8005938:	08005b8b 	.word	0x08005b8b
 800593c:	08005b8b 	.word	0x08005b8b
 8005940:	08005b8b 	.word	0x08005b8b
 8005944:	08005b8b 	.word	0x08005b8b
 8005948:	0800597f 	.word	0x0800597f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800594c:	4b94      	ldr	r3, [pc, #592]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005958:	4b91      	ldr	r3, [pc, #580]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	08db      	lsrs	r3, r3, #3
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	4a90      	ldr	r2, [pc, #576]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
 8005968:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800596a:	e111      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800596c:	4b8d      	ldr	r3, [pc, #564]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800596e:	61bb      	str	r3, [r7, #24]
      break;
 8005970:	e10e      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005972:	4b8d      	ldr	r3, [pc, #564]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005974:	61bb      	str	r3, [r7, #24]
      break;
 8005976:	e10b      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005978:	4b8c      	ldr	r3, [pc, #560]	; (8005bac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800597a:	61bb      	str	r3, [r7, #24]
      break;
 800597c:	e108      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800597e:	4b88      	ldr	r3, [pc, #544]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005988:	4b85      	ldr	r3, [pc, #532]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005992:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005994:	4b82      	ldr	r3, [pc, #520]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800599e:	4b80      	ldr	r3, [pc, #512]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80e1 	beq.w	8005b84 <HAL_RCC_GetSysClockFreq+0x2b8>
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f000 8083 	beq.w	8005ad0 <HAL_RCC_GetSysClockFreq+0x204>
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	f200 80a1 	bhi.w	8005b14 <HAL_RCC_GetSysClockFreq+0x248>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_RCC_GetSysClockFreq+0x114>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d056      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0x1c0>
 80059de:	e099      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e0:	4b6f      	ldr	r3, [pc, #444]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02d      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059ec:	4b6c      	ldr	r3, [pc, #432]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	08db      	lsrs	r3, r3, #3
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	4a6b      	ldr	r2, [pc, #428]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a16:	4b62      	ldr	r3, [pc, #392]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a46:	e087      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005bb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5a:	4b51      	ldr	r3, [pc, #324]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a8a:	e065      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005bb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a9e:	4b40      	ldr	r3, [pc, #256]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ab2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ace:	e043      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005bbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae2:	4b2f      	ldr	r3, [pc, #188]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005af6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b12:	e021      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005bb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b26:	4b1e      	ldr	r3, [pc, #120]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	0a5b      	lsrs	r3, r3, #9
 8005b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b62:	3301      	adds	r3, #1
 8005b64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b7c:	ee17 3a90 	vmov	r3, s15
 8005b80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b82:	e005      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
      break;
 8005b88:	e002      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b8c:	61bb      	str	r3, [r7, #24]
      break;
 8005b8e:	bf00      	nop
  }

  return sysclockfreq;
 8005b90:	69bb      	ldr	r3, [r7, #24]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	03d09000 	.word	0x03d09000
 8005ba8:	003d0900 	.word	0x003d0900
 8005bac:	017d7840 	.word	0x017d7840
 8005bb0:	46000000 	.word	0x46000000
 8005bb4:	4c742400 	.word	0x4c742400
 8005bb8:	4a742400 	.word	0x4a742400
 8005bbc:	4bbebc20 	.word	0x4bbebc20

08005bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bc6:	f7ff fe81 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	0a1b      	lsrs	r3, r3, #8
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	490f      	ldr	r1, [pc, #60]	; (8005c14 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bd8:	5ccb      	ldrb	r3, [r1, r3]
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	fa22 f303 	lsr.w	r3, r2, r3
 8005be2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005be4:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <HAL_RCC_GetHCLKFreq+0x50>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bee:	5cd3      	ldrb	r3, [r2, r3]
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	4a07      	ldr	r2, [pc, #28]	; (8005c18 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bfe:	4a07      	ldr	r2, [pc, #28]	; (8005c1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c04:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c06:	681b      	ldr	r3, [r3, #0]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	58024400 	.word	0x58024400
 8005c14:	0800dd38 	.word	0x0800dd38
 8005c18:	24003220 	.word	0x24003220
 8005c1c:	2400321c 	.word	0x2400321c

08005c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c24:	f7ff ffcc 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	091b      	lsrs	r3, r3, #4
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4904      	ldr	r1, [pc, #16]	; (8005c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	58024400 	.word	0x58024400
 8005c48:	0800dd38 	.word	0x0800dd38

08005c4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c50:	b0ca      	sub	sp, #296	; 0x128
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005c70:	2500      	movs	r5, #0
 8005c72:	ea54 0305 	orrs.w	r3, r4, r5
 8005c76:	d049      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c82:	d02f      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c88:	d828      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c8e:	d01a      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c94:	d822      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d007      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ca0:	e01c      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca2:	4bb8      	ldr	r3, [pc, #736]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	4ab7      	ldr	r2, [pc, #732]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cae:	e01a      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f002 fb61 	bl	8008380 <RCCEx_PLL2_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cc4:	e00f      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cca:	3328      	adds	r3, #40	; 0x28
 8005ccc:	2102      	movs	r1, #2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f002 fc08 	bl	80084e4 <RCCEx_PLL3_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cda:	e004      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005cee:	4ba5      	ldr	r3, [pc, #660]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cfc:	4aa1      	ldr	r2, [pc, #644]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	6513      	str	r3, [r2, #80]	; 0x50
 8005d02:	e003      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005d18:	f04f 0900 	mov.w	r9, #0
 8005d1c:	ea58 0309 	orrs.w	r3, r8, r9
 8005d20:	d047      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d82a      	bhi.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d49 	.word	0x08005d49
 8005d38:	08005d57 	.word	0x08005d57
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005d8b 	.word	0x08005d8b
 8005d44:	08005d8b 	.word	0x08005d8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d48:	4b8e      	ldr	r3, [pc, #568]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a8d      	ldr	r2, [pc, #564]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d54:	e01a      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f002 fb0e 	bl	8008380 <RCCEx_PLL2_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d6a:	e00f      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d70:	3328      	adds	r3, #40	; 0x28
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f002 fbb5 	bl	80084e4 <RCCEx_PLL3_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d80:	e004      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d94:	4b7b      	ldr	r3, [pc, #492]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	f023 0107 	bic.w	r1, r3, #7
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da2:	4a78      	ldr	r2, [pc, #480]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6513      	str	r3, [r2, #80]	; 0x50
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005dbe:	f04f 0b00 	mov.w	fp, #0
 8005dc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dc6:	d04c      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd2:	d030      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd8:	d829      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dda:	2bc0      	cmp	r3, #192	; 0xc0
 8005ddc:	d02d      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005dde:	2bc0      	cmp	r3, #192	; 0xc0
 8005de0:	d825      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d018      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005de6:	2b80      	cmp	r3, #128	; 0x80
 8005de8:	d821      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d007      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005df2:	e01c      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df4:	4b63      	ldr	r3, [pc, #396]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	4a62      	ldr	r2, [pc, #392]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e00:	e01c      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e06:	3308      	adds	r3, #8
 8005e08:	2100      	movs	r1, #0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f002 fab8 	bl	8008380 <RCCEx_PLL2_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e16:	e011      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1c:	3328      	adds	r3, #40	; 0x28
 8005e1e:	2100      	movs	r1, #0
 8005e20:	4618      	mov	r0, r3
 8005e22:	f002 fb5f 	bl	80084e4 <RCCEx_PLL3_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e2c:	e006      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e34:	e002      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005e44:	4b4f      	ldr	r3, [pc, #316]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e52:	4a4c      	ldr	r2, [pc, #304]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e54:	430b      	orrs	r3, r1
 8005e56:	6513      	str	r3, [r2, #80]	; 0x50
 8005e58:	e003      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005e6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e72:	2300      	movs	r3, #0
 8005e74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	d053      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e8e:	d035      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005e90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e94:	d82e      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e9a:	d031      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005e9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ea0:	d828      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ea6:	d01a      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eac:	d822      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb6:	d007      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005eb8:	e01c      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eba:	4b32      	ldr	r3, [pc, #200]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	4a31      	ldr	r2, [pc, #196]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ec6:	e01c      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ecc:	3308      	adds	r3, #8
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f002 fa55 	bl	8008380 <RCCEx_PLL2_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005edc:	e011      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee2:	3328      	adds	r3, #40	; 0x28
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f002 fafc 	bl	80084e4 <RCCEx_PLL3_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ef2:	e006      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005efa:	e002      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005efc:	bf00      	nop
 8005efe:	e000      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f0a:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f1a:	4a1a      	ldr	r2, [pc, #104]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f20:	e003      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005f36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005f44:	460b      	mov	r3, r1
 8005f46:	4313      	orrs	r3, r2
 8005f48:	d056      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f56:	d038      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f5c:	d831      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f62:	d034      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f68:	d82b      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f6e:	d01d      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f74:	d825      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d006      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f7e:	d00a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f80:	e01f      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f82:	bf00      	nop
 8005f84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f88:	4ba2      	ldr	r3, [pc, #648]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	4aa1      	ldr	r2, [pc, #644]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f94:	e01c      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f002 f9ee 	bl	8008380 <RCCEx_PLL2_Config>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005faa:	e011      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb0:	3328      	adds	r3, #40	; 0x28
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f002 fa95 	bl	80084e4 <RCCEx_PLL3_Config>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fc0:	e006      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fc8:	e002      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fca:	bf00      	nop
 8005fcc:	e000      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10b      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005fd8:	4b8e      	ldr	r3, [pc, #568]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fdc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fe8:	4a8a      	ldr	r2, [pc, #552]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fea:	430b      	orrs	r3, r1
 8005fec:	6593      	str	r3, [r2, #88]	; 0x58
 8005fee:	e003      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ff4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006008:	2300      	movs	r3, #0
 800600a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800600e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006012:	460b      	mov	r3, r1
 8006014:	4313      	orrs	r3, r2
 8006016:	d03a      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601e:	2b30      	cmp	r3, #48	; 0x30
 8006020:	d01f      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006022:	2b30      	cmp	r3, #48	; 0x30
 8006024:	d819      	bhi.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006026:	2b20      	cmp	r3, #32
 8006028:	d00c      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800602a:	2b20      	cmp	r3, #32
 800602c:	d815      	bhi.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d019      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006032:	2b10      	cmp	r3, #16
 8006034:	d111      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006036:	4b77      	ldr	r3, [pc, #476]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	4a76      	ldr	r2, [pc, #472]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800603c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006042:	e011      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006048:	3308      	adds	r3, #8
 800604a:	2102      	movs	r1, #2
 800604c:	4618      	mov	r0, r3
 800604e:	f002 f997 	bl	8008380 <RCCEx_PLL2_Config>
 8006052:	4603      	mov	r3, r0
 8006054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006058:	e006      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006060:	e002      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006070:	4b68      	ldr	r3, [pc, #416]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006074:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	4a65      	ldr	r2, [pc, #404]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006080:	430b      	orrs	r3, r1
 8006082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006084:	e003      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800608a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800609a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800609e:	2300      	movs	r3, #0
 80060a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4313      	orrs	r3, r2
 80060ac:	d051      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80060ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060b8:	d035      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80060ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060be:	d82e      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060c4:	d031      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80060c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060ca:	d828      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d0:	d01a      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80060d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d6:	d822      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80060dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e0:	d007      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80060e2:	e01c      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e4:	4b4b      	ldr	r3, [pc, #300]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a4a      	ldr	r2, [pc, #296]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060f0:	e01c      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f6:	3308      	adds	r3, #8
 80060f8:	2100      	movs	r1, #0
 80060fa:	4618      	mov	r0, r3
 80060fc:	f002 f940 	bl	8008380 <RCCEx_PLL2_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006106:	e011      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610c:	3328      	adds	r3, #40	; 0x28
 800610e:	2100      	movs	r1, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f002 f9e7 	bl	80084e4 <RCCEx_PLL3_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800611c:	e006      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006124:	e002      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800612a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006134:	4b37      	ldr	r3, [pc, #220]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006138:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006142:	4a34      	ldr	r2, [pc, #208]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006144:	430b      	orrs	r3, r1
 8006146:	6513      	str	r3, [r2, #80]	; 0x50
 8006148:	e003      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800614e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800615e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006162:	2300      	movs	r3, #0
 8006164:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006168:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800616c:	460b      	mov	r3, r1
 800616e:	4313      	orrs	r3, r2
 8006170:	d056      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800617c:	d033      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800617e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006182:	d82c      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006184:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006188:	d02f      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800618a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800618e:	d826      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006190:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006194:	d02b      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006196:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800619a:	d820      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800619c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061a0:	d012      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80061a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061a6:	d81a      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d022      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80061ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b0:	d115      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b6:	3308      	adds	r3, #8
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f002 f8e0 	bl	8008380 <RCCEx_PLL2_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061c6:	e015      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061cc:	3328      	adds	r3, #40	; 0x28
 80061ce:	2101      	movs	r1, #1
 80061d0:	4618      	mov	r0, r3
 80061d2:	f002 f987 	bl	80084e4 <RCCEx_PLL3_Config>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061dc:	e00a      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061e4:	e006      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061e6:	bf00      	nop
 80061e8:	e004      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061ea:	bf00      	nop
 80061ec:	e002      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10d      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620a:	4a02      	ldr	r2, [pc, #8]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800620c:	430b      	orrs	r3, r1
 800620e:	6513      	str	r3, [r2, #80]	; 0x50
 8006210:	e006      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006212:	bf00      	nop
 8006214:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800621c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800622c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006230:	2300      	movs	r3, #0
 8006232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006236:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800623a:	460b      	mov	r3, r1
 800623c:	4313      	orrs	r3, r2
 800623e:	d055      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006244:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800624c:	d033      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800624e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006252:	d82c      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006258:	d02f      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800625a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625e:	d826      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006260:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006264:	d02b      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800626a:	d820      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800626c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006270:	d012      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006276:	d81a      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d022      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800627c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006280:	d115      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006286:	3308      	adds	r3, #8
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f002 f878 	bl	8008380 <RCCEx_PLL2_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006296:	e015      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629c:	3328      	adds	r3, #40	; 0x28
 800629e:	2101      	movs	r1, #1
 80062a0:	4618      	mov	r0, r3
 80062a2:	f002 f91f 	bl	80084e4 <RCCEx_PLL3_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062ac:	e00a      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062b4:	e006      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062b6:	bf00      	nop
 80062b8:	e004      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062ba:	bf00      	nop
 80062bc:	e002      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062be:	bf00      	nop
 80062c0:	e000      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062cc:	4ba3      	ldr	r3, [pc, #652]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062dc:	4a9f      	ldr	r2, [pc, #636]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	6593      	str	r3, [r2, #88]	; 0x58
 80062e2:	e003      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80062f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006306:	460b      	mov	r3, r1
 8006308:	4313      	orrs	r3, r2
 800630a:	d037      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006316:	d00e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631c:	d816      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d018      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006326:	d111      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006328:	4b8c      	ldr	r3, [pc, #560]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	4a8b      	ldr	r2, [pc, #556]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800632e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006334:	e00f      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	3308      	adds	r3, #8
 800633c:	2101      	movs	r1, #1
 800633e:	4618      	mov	r0, r3
 8006340:	f002 f81e 	bl	8008380 <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800634a:	e004      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006352:	e000      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800635e:	4b7f      	ldr	r3, [pc, #508]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636c:	4a7b      	ldr	r2, [pc, #492]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800636e:	430b      	orrs	r3, r1
 8006370:	6513      	str	r3, [r2, #80]	; 0x50
 8006372:	e003      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800638c:	2300      	movs	r3, #0
 800638e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006392:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006396:	460b      	mov	r3, r1
 8006398:	4313      	orrs	r3, r2
 800639a:	d039      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d81c      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063e9 	.word	0x080063e9
 80063b0:	080063bd 	.word	0x080063bd
 80063b4:	080063cb 	.word	0x080063cb
 80063b8:	080063e9 	.word	0x080063e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063bc:	4b67      	ldr	r3, [pc, #412]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	4a66      	ldr	r2, [pc, #408]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063c8:	e00f      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ce:	3308      	adds	r3, #8
 80063d0:	2102      	movs	r1, #2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 ffd4 	bl	8008380 <RCCEx_PLL2_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063de:	e004      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063e6:	e000      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80063e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063f2:	4b5a      	ldr	r3, [pc, #360]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f6:	f023 0103 	bic.w	r1, r3, #3
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006400:	4a56      	ldr	r2, [pc, #344]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006402:	430b      	orrs	r3, r1
 8006404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006406:	e003      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800640c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800641c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006420:	2300      	movs	r3, #0
 8006422:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006426:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800642a:	460b      	mov	r3, r1
 800642c:	4313      	orrs	r3, r2
 800642e:	f000 809f 	beq.w	8006570 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006432:	4b4b      	ldr	r3, [pc, #300]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a4a      	ldr	r2, [pc, #296]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800643c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800643e:	f7fb fdc3 	bl	8001fc8 <HAL_GetTick>
 8006442:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006446:	e00b      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006448:	f7fb fdbe 	bl	8001fc8 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b64      	cmp	r3, #100	; 0x64
 8006456:	d903      	bls.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800645e:	e005      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006460:	4b3f      	ldr	r3, [pc, #252]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0ed      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800646c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006470:	2b00      	cmp	r3, #0
 8006472:	d179      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006474:	4b39      	ldr	r3, [pc, #228]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006480:	4053      	eors	r3, r2
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	2b00      	cmp	r3, #0
 8006488:	d015      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800648a:	4b34      	ldr	r3, [pc, #208]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006492:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006496:	4b31      	ldr	r3, [pc, #196]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649a:	4a30      	ldr	r2, [pc, #192]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800649c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064a2:	4b2e      	ldr	r3, [pc, #184]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	4a2d      	ldr	r2, [pc, #180]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80064ae:	4a2b      	ldr	r2, [pc, #172]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c2:	d118      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fb fd80 	bl	8001fc8 <HAL_GetTick>
 80064c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064cc:	e00d      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ce:	f7fb fd7b 	bl	8001fc8 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80064d8:	1ad2      	subs	r2, r2, r3
 80064da:	f241 3388 	movw	r3, #5000	; 0x1388
 80064de:	429a      	cmp	r2, r3
 80064e0:	d903      	bls.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80064e8:	e005      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064ea:	4b1c      	ldr	r3, [pc, #112]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0eb      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80064f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d129      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800650e:	d10e      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006510:	4b12      	ldr	r3, [pc, #72]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006520:	091a      	lsrs	r2, r3, #4
 8006522:	4b10      	ldr	r3, [pc, #64]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006524:	4013      	ands	r3, r2
 8006526:	4a0d      	ldr	r2, [pc, #52]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006528:	430b      	orrs	r3, r1
 800652a:	6113      	str	r3, [r2, #16]
 800652c:	e005      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	4a0a      	ldr	r2, [pc, #40]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006534:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006538:	6113      	str	r3, [r2, #16]
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800653c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006542:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800654a:	4a04      	ldr	r2, [pc, #16]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800654c:	430b      	orrs	r3, r1
 800654e:	6713      	str	r3, [r2, #112]	; 0x70
 8006550:	e00e      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006556:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800655a:	e009      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800655c:	58024400 	.word	0x58024400
 8006560:	58024800 	.word	0x58024800
 8006564:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800656c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f002 0301 	and.w	r3, r2, #1
 800657c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006586:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800658a:	460b      	mov	r3, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	f000 8089 	beq.w	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006598:	2b28      	cmp	r3, #40	; 0x28
 800659a:	d86b      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	0800667d 	.word	0x0800667d
 80065a8:	08006675 	.word	0x08006675
 80065ac:	08006675 	.word	0x08006675
 80065b0:	08006675 	.word	0x08006675
 80065b4:	08006675 	.word	0x08006675
 80065b8:	08006675 	.word	0x08006675
 80065bc:	08006675 	.word	0x08006675
 80065c0:	08006675 	.word	0x08006675
 80065c4:	08006649 	.word	0x08006649
 80065c8:	08006675 	.word	0x08006675
 80065cc:	08006675 	.word	0x08006675
 80065d0:	08006675 	.word	0x08006675
 80065d4:	08006675 	.word	0x08006675
 80065d8:	08006675 	.word	0x08006675
 80065dc:	08006675 	.word	0x08006675
 80065e0:	08006675 	.word	0x08006675
 80065e4:	0800665f 	.word	0x0800665f
 80065e8:	08006675 	.word	0x08006675
 80065ec:	08006675 	.word	0x08006675
 80065f0:	08006675 	.word	0x08006675
 80065f4:	08006675 	.word	0x08006675
 80065f8:	08006675 	.word	0x08006675
 80065fc:	08006675 	.word	0x08006675
 8006600:	08006675 	.word	0x08006675
 8006604:	0800667d 	.word	0x0800667d
 8006608:	08006675 	.word	0x08006675
 800660c:	08006675 	.word	0x08006675
 8006610:	08006675 	.word	0x08006675
 8006614:	08006675 	.word	0x08006675
 8006618:	08006675 	.word	0x08006675
 800661c:	08006675 	.word	0x08006675
 8006620:	08006675 	.word	0x08006675
 8006624:	0800667d 	.word	0x0800667d
 8006628:	08006675 	.word	0x08006675
 800662c:	08006675 	.word	0x08006675
 8006630:	08006675 	.word	0x08006675
 8006634:	08006675 	.word	0x08006675
 8006638:	08006675 	.word	0x08006675
 800663c:	08006675 	.word	0x08006675
 8006640:	08006675 	.word	0x08006675
 8006644:	0800667d 	.word	0x0800667d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664c:	3308      	adds	r3, #8
 800664e:	2101      	movs	r1, #1
 8006650:	4618      	mov	r0, r3
 8006652:	f001 fe95 	bl	8008380 <RCCEx_PLL2_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800665c:	e00f      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006662:	3328      	adds	r3, #40	; 0x28
 8006664:	2101      	movs	r1, #1
 8006666:	4618      	mov	r0, r3
 8006668:	f001 ff3c 	bl	80084e4 <RCCEx_PLL3_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006672:	e004      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800667a:	e000      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800667c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800667e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006686:	4bbf      	ldr	r3, [pc, #764]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006694:	4abb      	ldr	r2, [pc, #748]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006696:	430b      	orrs	r3, r1
 8006698:	6553      	str	r3, [r2, #84]	; 0x54
 800669a:	e003      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80066a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f002 0302 	and.w	r3, r2, #2
 80066b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066b4:	2300      	movs	r3, #0
 80066b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d041      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80066c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d824      	bhi.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	08006721 	.word	0x08006721
 80066d8:	080066ed 	.word	0x080066ed
 80066dc:	08006703 	.word	0x08006703
 80066e0:	08006721 	.word	0x08006721
 80066e4:	08006721 	.word	0x08006721
 80066e8:	08006721 	.word	0x08006721
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f0:	3308      	adds	r3, #8
 80066f2:	2101      	movs	r1, #1
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 fe43 	bl	8008380 <RCCEx_PLL2_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006700:	e00f      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006706:	3328      	adds	r3, #40	; 0x28
 8006708:	2101      	movs	r1, #1
 800670a:	4618      	mov	r0, r3
 800670c:	f001 feea 	bl	80084e4 <RCCEx_PLL3_Config>
 8006710:	4603      	mov	r3, r0
 8006712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006716:	e004      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800671e:	e000      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800672a:	4b96      	ldr	r3, [pc, #600]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800672c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672e:	f023 0107 	bic.w	r1, r3, #7
 8006732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006738:	4a92      	ldr	r2, [pc, #584]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800673a:	430b      	orrs	r3, r1
 800673c:	6553      	str	r3, [r2, #84]	; 0x54
 800673e:	e003      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006744:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f002 0304 	and.w	r3, r2, #4
 8006754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006758:	2300      	movs	r3, #0
 800675a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800675e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006762:	460b      	mov	r3, r1
 8006764:	4313      	orrs	r3, r2
 8006766:	d044      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006770:	2b05      	cmp	r3, #5
 8006772:	d825      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006774:	a201      	add	r2, pc, #4	; (adr r2, 800677c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	080067c9 	.word	0x080067c9
 8006780:	08006795 	.word	0x08006795
 8006784:	080067ab 	.word	0x080067ab
 8006788:	080067c9 	.word	0x080067c9
 800678c:	080067c9 	.word	0x080067c9
 8006790:	080067c9 	.word	0x080067c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006798:	3308      	adds	r3, #8
 800679a:	2101      	movs	r1, #1
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fdef 	bl	8008380 <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067a8:	e00f      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ae:	3328      	adds	r3, #40	; 0x28
 80067b0:	2101      	movs	r1, #1
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fe96 	bl	80084e4 <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067be:	e004      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067c6:	e000      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80067c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067d2:	4b6c      	ldr	r3, [pc, #432]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	f023 0107 	bic.w	r1, r3, #7
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067e2:	4a68      	ldr	r2, [pc, #416]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067e4:	430b      	orrs	r3, r1
 80067e6:	6593      	str	r3, [r2, #88]	; 0x58
 80067e8:	e003      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f002 0320 	and.w	r3, r2, #32
 80067fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006802:	2300      	movs	r3, #0
 8006804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d055      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800681e:	d033      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006824:	d82c      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682a:	d02f      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006830:	d826      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006832:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006836:	d02b      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006838:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800683c:	d820      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800683e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006842:	d012      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006848:	d81a      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d022      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800684e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006852:	d115      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006858:	3308      	adds	r3, #8
 800685a:	2100      	movs	r1, #0
 800685c:	4618      	mov	r0, r3
 800685e:	f001 fd8f 	bl	8008380 <RCCEx_PLL2_Config>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006868:	e015      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686e:	3328      	adds	r3, #40	; 0x28
 8006870:	2102      	movs	r1, #2
 8006872:	4618      	mov	r0, r3
 8006874:	f001 fe36 	bl	80084e4 <RCCEx_PLL3_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800687e:	e00a      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006886:	e006      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006888:	bf00      	nop
 800688a:	e004      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800688c:	bf00      	nop
 800688e:	e002      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006890:	bf00      	nop
 8006892:	e000      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800689e:	4b39      	ldr	r3, [pc, #228]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	4a35      	ldr	r2, [pc, #212]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6553      	str	r3, [r2, #84]	; 0x54
 80068b4:	e003      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80068ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068ce:	2300      	movs	r3, #0
 80068d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80068d8:	460b      	mov	r3, r1
 80068da:	4313      	orrs	r3, r2
 80068dc:	d058      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068ea:	d033      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80068ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068f0:	d82c      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f6:	d02f      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80068f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fc:	d826      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006902:	d02b      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006908:	d820      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800690a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690e:	d012      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006914:	d81a      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d022      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691e:	d115      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006924:	3308      	adds	r3, #8
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f001 fd29 	bl	8008380 <RCCEx_PLL2_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006934:	e015      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800693a:	3328      	adds	r3, #40	; 0x28
 800693c:	2102      	movs	r1, #2
 800693e:	4618      	mov	r0, r3
 8006940:	f001 fdd0 	bl	80084e4 <RCCEx_PLL3_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800694a:	e00a      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006952:	e006      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006954:	bf00      	nop
 8006956:	e004      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006958:	bf00      	nop
 800695a:	e002      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800695c:	bf00      	nop
 800695e:	e000      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10e      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800696c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800697a:	4a02      	ldr	r2, [pc, #8]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800697c:	430b      	orrs	r3, r1
 800697e:	6593      	str	r3, [r2, #88]	; 0x58
 8006980:	e006      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006982:	bf00      	nop
 8006984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800698c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800699c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069a0:	2300      	movs	r3, #0
 80069a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80069aa:	460b      	mov	r3, r1
 80069ac:	4313      	orrs	r3, r2
 80069ae:	d055      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80069b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069bc:	d033      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80069be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069c2:	d82c      	bhi.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c8:	d02f      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80069ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ce:	d826      	bhi.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069d4:	d02b      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80069d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069da:	d820      	bhi.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e0:	d012      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80069e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e6:	d81a      	bhi.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d022      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80069ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f0:	d115      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f6:	3308      	adds	r3, #8
 80069f8:	2100      	movs	r1, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 fcc0 	bl	8008380 <RCCEx_PLL2_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a06:	e015      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0c:	3328      	adds	r3, #40	; 0x28
 8006a0e:	2102      	movs	r1, #2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fd67 	bl	80084e4 <RCCEx_PLL3_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a1c:	e00a      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a24:	e006      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a26:	bf00      	nop
 8006a28:	e004      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a2a:	bf00      	nop
 8006a2c:	e002      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a2e:	bf00      	nop
 8006a30:	e000      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a3c:	4ba1      	ldr	r3, [pc, #644]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a4c:	4a9d      	ldr	r2, [pc, #628]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	6593      	str	r3, [r2, #88]	; 0x58
 8006a52:	e003      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f002 0308 	and.w	r3, r2, #8
 8006a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	d01e      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8e:	3328      	adds	r3, #40	; 0x28
 8006a90:	2102      	movs	r1, #2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fd26 	bl	80084e4 <RCCEx_PLL3_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006aa4:	4b87      	ldr	r3, [pc, #540]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab4:	4a83      	ldr	r2, [pc, #524]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f002 0310 	and.w	r3, r2, #16
 8006ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006aca:	2300      	movs	r3, #0
 8006acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006ad0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	d01e      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae6:	d10c      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aec:	3328      	adds	r3, #40	; 0x28
 8006aee:	2102      	movs	r1, #2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 fcf7 	bl	80084e4 <RCCEx_PLL3_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b02:	4b70      	ldr	r3, [pc, #448]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b12:	4a6c      	ldr	r2, [pc, #432]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b14:	430b      	orrs	r3, r1
 8006b16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006b32:	460b      	mov	r3, r1
 8006b34:	4313      	orrs	r3, r2
 8006b36:	d03e      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b44:	d022      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4a:	d81b      	bhi.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b54:	d00b      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006b56:	e015      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 fc0d 	bl	8008380 <RCCEx_PLL2_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b6c:	e00f      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b72:	3328      	adds	r3, #40	; 0x28
 8006b74:	2102      	movs	r1, #2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 fcb4 	bl	80084e4 <RCCEx_PLL3_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b82:	e004      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b8a:	e000      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b96:	4b4b      	ldr	r3, [pc, #300]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ba6:	4a47      	ldr	r2, [pc, #284]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6593      	str	r3, [r2, #88]	; 0x58
 8006bac:	e003      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006bc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	d03b      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bde:	d01f      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006be0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006be4:	d818      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bea:	d003      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bf0:	d007      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006bf2:	e011      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf4:	4b33      	ldr	r3, [pc, #204]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	4a32      	ldr	r2, [pc, #200]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c00:	e00f      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c06:	3328      	adds	r3, #40	; 0x28
 8006c08:	2101      	movs	r1, #1
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fc6a 	bl	80084e4 <RCCEx_PLL3_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c16:	e004      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c1e:	e000      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c2a:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3a:	4a22      	ldr	r2, [pc, #136]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6553      	str	r3, [r2, #84]	; 0x54
 8006c40:	e003      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006c56:	673b      	str	r3, [r7, #112]	; 0x70
 8006c58:	2300      	movs	r3, #0
 8006c5a:	677b      	str	r3, [r7, #116]	; 0x74
 8006c5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006c60:	460b      	mov	r3, r1
 8006c62:	4313      	orrs	r3, r2
 8006c64:	d034      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c74:	d007      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006c76:	e011      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c78:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a11      	ldr	r2, [pc, #68]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c84:	e00e      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	2102      	movs	r1, #2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fb76 	bl	8008380 <RCCEx_PLL2_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c9a:	e003      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10d      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	4a02      	ldr	r2, [pc, #8]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006cc2:	bf00      	nop
 8006cc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ccc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006cdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cde:	2300      	movs	r3, #0
 8006ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ce2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	d00c      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf0:	3328      	adds	r3, #40	; 0x28
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 fbf5 	bl	80084e4 <RCCEx_PLL3_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006d12:	663b      	str	r3, [r7, #96]	; 0x60
 8006d14:	2300      	movs	r3, #0
 8006d16:	667b      	str	r3, [r7, #100]	; 0x64
 8006d18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	d038      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d2e:	d018      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d34:	d811      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d3a:	d014      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d40:	d80b      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d011      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4a:	d106      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d4c:	4bc3      	ldr	r3, [pc, #780]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	4ac2      	ldr	r2, [pc, #776]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d58:	e008      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d60:	e004      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d62:	bf00      	nop
 8006d64:	e002      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d66:	bf00      	nop
 8006d68:	e000      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10b      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d74:	4bb9      	ldr	r3, [pc, #740]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d84:	4ab5      	ldr	r2, [pc, #724]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d86:	430b      	orrs	r3, r1
 8006d88:	6553      	str	r3, [r2, #84]	; 0x54
 8006d8a:	e003      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006da2:	2300      	movs	r3, #0
 8006da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006daa:	460b      	mov	r3, r1
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006db0:	4baa      	ldr	r3, [pc, #680]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dbe:	4aa7      	ldr	r2, [pc, #668]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8006dd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	d00a      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006de0:	4b9e      	ldr	r3, [pc, #632]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006df0:	4a9a      	ldr	r2, [pc, #616]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df2:	430b      	orrs	r3, r1
 8006df4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e04:	2300      	movs	r3, #0
 8006e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d009      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e12:	4b92      	ldr	r3, [pc, #584]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e16:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e20:	4a8e      	ldr	r2, [pc, #568]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e22:	430b      	orrs	r3, r1
 8006e24:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006e32:	643b      	str	r3, [r7, #64]	; 0x40
 8006e34:	2300      	movs	r3, #0
 8006e36:	647b      	str	r3, [r7, #68]	; 0x44
 8006e38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	d00e      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e42:	4b86      	ldr	r3, [pc, #536]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	4a85      	ldr	r2, [pc, #532]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e4c:	6113      	str	r3, [r2, #16]
 8006e4e:	4b83      	ldr	r3, [pc, #524]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e50:	6919      	ldr	r1, [r3, #16]
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e5a:	4a80      	ldr	r2, [pc, #512]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e6e:	2300      	movs	r3, #0
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d009      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e7c:	4b77      	ldr	r3, [pc, #476]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e80:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	4a74      	ldr	r2, [pc, #464]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	d00a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006eac:	4b6b      	ldr	r3, [pc, #428]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ebc:	4a67      	ldr	r2, [pc, #412]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	2100      	movs	r1, #0
 8006ecc:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ed4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4313      	orrs	r3, r2
 8006edc:	d011      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 fa4a 	bl	8008380 <RCCEx_PLL2_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006efe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	6239      	str	r1, [r7, #32]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
 8006f14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	d011      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f22:	3308      	adds	r3, #8
 8006f24:	2101      	movs	r1, #1
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 fa2a 	bl	8008380 <RCCEx_PLL2_Config>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	61b9      	str	r1, [r7, #24]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	d011      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f62:	3308      	adds	r3, #8
 8006f64:	2102      	movs	r1, #2
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fa0a 	bl	8008380 <RCCEx_PLL2_Config>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	6139      	str	r1, [r7, #16]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	d011      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa2:	3328      	adds	r3, #40	; 0x28
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 fa9c 	bl	80084e4 <RCCEx_PLL3_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	2100      	movs	r1, #0
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	d011      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe2:	3328      	adds	r3, #40	; 0x28
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 fa7c 	bl	80084e4 <RCCEx_PLL3_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ffe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	2100      	movs	r1, #0
 800700c:	6039      	str	r1, [r7, #0]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007018:	460b      	mov	r3, r1
 800701a:	4313      	orrs	r3, r2
 800701c:	d011      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007022:	3328      	adds	r3, #40	; 0x28
 8007024:	2102      	movs	r1, #2
 8007026:	4618      	mov	r0, r3
 8007028:	f001 fa5c 	bl	80084e4 <RCCEx_PLL3_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800703e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007042:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	e000      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
}
 8007050:	4618      	mov	r0, r3
 8007052:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007056:	46bd      	mov	sp, r7
 8007058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800705c:	58024400 	.word	0x58024400

08007060 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b090      	sub	sp, #64	; 0x40
 8007064:	af00      	add	r7, sp, #0
 8007066:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800706a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800706e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007072:	430b      	orrs	r3, r1
 8007074:	f040 8094 	bne.w	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007078:	4b9e      	ldr	r3, [pc, #632]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	2b04      	cmp	r3, #4
 8007086:	f200 8087 	bhi.w	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800708a:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	080070a5 	.word	0x080070a5
 8007094:	080070cd 	.word	0x080070cd
 8007098:	080070f5 	.word	0x080070f5
 800709c:	08007191 	.word	0x08007191
 80070a0:	0800711d 	.word	0x0800711d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070a4:	4b93      	ldr	r3, [pc, #588]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070b0:	d108      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f001 f810 	bl	80080dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c0:	f000 bd45 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c8:	f000 bd41 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070cc:	4b89      	ldr	r3, [pc, #548]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070d8:	d108      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070da:	f107 0318 	add.w	r3, r7, #24
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fd54 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070e8:	f000 bd31 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f0:	f000 bd2d 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070f4:	4b7f      	ldr	r3, [pc, #508]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007100:	d108      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007102:	f107 030c 	add.w	r3, r7, #12
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fe94 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007110:	f000 bd1d 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007118:	f000 bd19 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800711c:	4b75      	ldr	r3, [pc, #468]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800711e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007120:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007124:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007126:	4b73      	ldr	r3, [pc, #460]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b04      	cmp	r3, #4
 8007130:	d10c      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007134:	2b00      	cmp	r3, #0
 8007136:	d109      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007138:	4b6e      	ldr	r3, [pc, #440]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	08db      	lsrs	r3, r3, #3
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	4a6d      	ldr	r2, [pc, #436]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800714a:	e01f      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800714c:	4b69      	ldr	r3, [pc, #420]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007158:	d106      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007160:	d102      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007162:	4b66      	ldr	r3, [pc, #408]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007166:	e011      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007168:	4b62      	ldr	r3, [pc, #392]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007174:	d106      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717c:	d102      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800717e:	4b60      	ldr	r3, [pc, #384]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007182:	e003      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007188:	f000 bce1 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800718c:	f000 bcdf 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007190:	4b5c      	ldr	r3, [pc, #368]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007194:	f000 bcdb 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800719c:	f000 bcd7 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80071a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80071a8:	430b      	orrs	r3, r1
 80071aa:	f040 80ad 	bne.w	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80071ae:	4b51      	ldr	r3, [pc, #324]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80071b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071be:	d056      	beq.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c6:	f200 8090 	bhi.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	2bc0      	cmp	r3, #192	; 0xc0
 80071ce:	f000 8088 	beq.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	2bc0      	cmp	r3, #192	; 0xc0
 80071d6:	f200 8088 	bhi.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2b80      	cmp	r3, #128	; 0x80
 80071de:	d032      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	2b80      	cmp	r3, #128	; 0x80
 80071e4:	f200 8081 	bhi.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d014      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80071f4:	e079      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071f6:	4b3f      	ldr	r3, [pc, #252]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007202:	d108      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007208:	4618      	mov	r0, r3
 800720a:	f000 ff67 	bl	80080dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007212:	f000 bc9c 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721a:	f000 bc98 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800721e:	4b35      	ldr	r3, [pc, #212]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800722a:	d108      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800722c:	f107 0318 	add.w	r3, r7, #24
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fcab 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800723a:	f000 bc88 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007242:	f000 bc84 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007246:	4b2b      	ldr	r3, [pc, #172]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800724e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007252:	d108      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007254:	f107 030c 	add.w	r3, r7, #12
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fdeb 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007262:	f000 bc74 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800726a:	f000 bc70 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800726e:	4b21      	ldr	r3, [pc, #132]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007272:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007276:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007278:	4b1e      	ldr	r3, [pc, #120]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b04      	cmp	r3, #4
 8007282:	d10c      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007286:	2b00      	cmp	r3, #0
 8007288:	d109      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800728a:	4b1a      	ldr	r3, [pc, #104]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	08db      	lsrs	r3, r3, #3
 8007290:	f003 0303 	and.w	r3, r3, #3
 8007294:	4a18      	ldr	r2, [pc, #96]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007296:	fa22 f303 	lsr.w	r3, r2, r3
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800729c:	e01f      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800729e:	4b15      	ldr	r3, [pc, #84]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072aa:	d106      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b2:	d102      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072b4:	4b11      	ldr	r3, [pc, #68]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072b8:	e011      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072ba:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072c6:	d106      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80072c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ce:	d102      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072d0:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d4:	e003      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80072da:	f000 bc38 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072de:	f000 bc36 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072e2:	4b08      	ldr	r3, [pc, #32]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80072e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072e6:	f000 bc32 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ee:	f000 bc2e 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072f2:	bf00      	nop
 80072f4:	58024400 	.word	0x58024400
 80072f8:	03d09000 	.word	0x03d09000
 80072fc:	003d0900 	.word	0x003d0900
 8007300:	017d7840 	.word	0x017d7840
 8007304:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800730c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007310:	430b      	orrs	r3, r1
 8007312:	f040 809c 	bne.w	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007316:	4b9e      	ldr	r3, [pc, #632]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800731e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007326:	d054      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800732e:	f200 808b 	bhi.w	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007338:	f000 8083 	beq.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007342:	f200 8081 	bhi.w	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800734c:	d02f      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007354:	d878      	bhi.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007362:	d012      	beq.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007364:	e070      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007366:	4b8a      	ldr	r3, [pc, #552]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007372:	d107      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007378:	4618      	mov	r0, r3
 800737a:	f000 feaf 	bl	80080dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007382:	e3e4      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007388:	e3e1      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800738a:	4b81      	ldr	r3, [pc, #516]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007396:	d107      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007398:	f107 0318 	add.w	r3, r7, #24
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fbf5 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073a6:	e3d2      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ac:	e3cf      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073ae:	4b78      	ldr	r3, [pc, #480]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ba:	d107      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073bc:	f107 030c 	add.w	r3, r7, #12
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 fd37 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ca:	e3c0      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073d0:	e3bd      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073d2:	4b6f      	ldr	r3, [pc, #444]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073dc:	4b6c      	ldr	r3, [pc, #432]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d10c      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80073e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073ee:	4b68      	ldr	r3, [pc, #416]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	08db      	lsrs	r3, r3, #3
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	4a66      	ldr	r2, [pc, #408]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80073fa:	fa22 f303 	lsr.w	r3, r2, r3
 80073fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007400:	e01e      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007402:	4b63      	ldr	r3, [pc, #396]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740e:	d106      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007416:	d102      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007418:	4b5f      	ldr	r3, [pc, #380]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800741c:	e010      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800741e:	4b5c      	ldr	r3, [pc, #368]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800742a:	d106      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800742c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007432:	d102      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007434:	4b59      	ldr	r3, [pc, #356]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007438:	e002      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800743e:	e386      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007440:	e385      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007442:	4b57      	ldr	r3, [pc, #348]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007446:	e382      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800744c:	e37f      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800744e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007452:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007456:	430b      	orrs	r3, r1
 8007458:	f040 80a7 	bne.w	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800745c:	4b4c      	ldr	r3, [pc, #304]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800745e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007460:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007464:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800746c:	d055      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007474:	f200 8096 	bhi.w	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800747e:	f000 8084 	beq.w	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007488:	f200 808c 	bhi.w	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007492:	d030      	beq.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800749a:	f200 8083 	bhi.w	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074aa:	d012      	beq.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80074ac:	e07a      	b.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074ae:	4b38      	ldr	r3, [pc, #224]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074ba:	d107      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fe0b 	bl	80080dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ca:	e340      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074d0:	e33d      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074d2:	4b2f      	ldr	r3, [pc, #188]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074de:	d107      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074e0:	f107 0318 	add.w	r3, r7, #24
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fb51 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ee:	e32e      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074f4:	e32b      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074f6:	4b26      	ldr	r3, [pc, #152]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007502:	d107      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007504:	f107 030c 	add.w	r3, r7, #12
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fc93 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007512:	e31c      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007518:	e319      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800751a:	4b1d      	ldr	r3, [pc, #116]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800751c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007522:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007524:	4b1a      	ldr	r3, [pc, #104]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b04      	cmp	r3, #4
 800752e:	d10c      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007536:	4b16      	ldr	r3, [pc, #88]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	08db      	lsrs	r3, r3, #3
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	4a14      	ldr	r2, [pc, #80]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007542:	fa22 f303 	lsr.w	r3, r2, r3
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007548:	e01e      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007556:	d106      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800755e:	d102      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007560:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007564:	e010      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007572:	d106      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800757a:	d102      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800757c:	4b07      	ldr	r3, [pc, #28]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007580:	e002      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007586:	e2e2      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007588:	e2e1      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800758a:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800758e:	e2de      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007590:	58024400 	.word	0x58024400
 8007594:	03d09000 	.word	0x03d09000
 8007598:	003d0900 	.word	0x003d0900
 800759c:	017d7840 	.word	0x017d7840
 80075a0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a8:	e2d1      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80075aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80075b2:	430b      	orrs	r3, r1
 80075b4:	f040 809c 	bne.w	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80075b8:	4b93      	ldr	r3, [pc, #588]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075c8:	d054      	beq.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075d0:	f200 808b 	bhi.w	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075da:	f000 8083 	beq.w	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075e4:	f200 8081 	bhi.w	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ee:	d02f      	beq.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f6:	d878      	bhi.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d004      	beq.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007604:	d012      	beq.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007606:	e070      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007608:	4b7f      	ldr	r3, [pc, #508]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007614:	d107      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fd5e 	bl	80080dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007624:	e293      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800762a:	e290      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800762c:	4b76      	ldr	r3, [pc, #472]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007638:	d107      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800763a:	f107 0318 	add.w	r3, r7, #24
 800763e:	4618      	mov	r0, r3
 8007640:	f000 faa4 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007648:	e281      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800764e:	e27e      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007650:	4b6d      	ldr	r3, [pc, #436]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800765c:	d107      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800765e:	f107 030c 	add.w	r3, r7, #12
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fbe6 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800766c:	e26f      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007672:	e26c      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007674:	4b64      	ldr	r3, [pc, #400]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800767c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800767e:	4b62      	ldr	r3, [pc, #392]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b04      	cmp	r3, #4
 8007688:	d10c      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	2b00      	cmp	r3, #0
 800768e:	d109      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007690:	4b5d      	ldr	r3, [pc, #372]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	08db      	lsrs	r3, r3, #3
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	4a5c      	ldr	r2, [pc, #368]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
 80076a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a2:	e01e      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076a4:	4b58      	ldr	r3, [pc, #352]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b0:	d106      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80076b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b8:	d102      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076ba:	4b55      	ldr	r3, [pc, #340]	; (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80076bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076be:	e010      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076c0:	4b51      	ldr	r3, [pc, #324]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076cc:	d106      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80076ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076d4:	d102      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076d6:	4b4f      	ldr	r3, [pc, #316]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80076d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076da:	e002      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80076e0:	e235      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076e2:	e234      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076e4:	4b4c      	ldr	r3, [pc, #304]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80076e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076e8:	e231      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ee:	e22e      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80076f8:	430b      	orrs	r3, r1
 80076fa:	f040 808f 	bne.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80076fe:	4b42      	ldr	r3, [pc, #264]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007702:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007706:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800770e:	d06b      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007716:	d874      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800771e:	d056      	beq.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007726:	d86c      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800772e:	d03b      	beq.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007736:	d864      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800773e:	d021      	beq.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007746:	d85c      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007754:	d004      	beq.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007756:	e054      	b.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007758:	f7fe fa62 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 800775c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800775e:	e1f6      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007760:	4b29      	ldr	r3, [pc, #164]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800776c:	d107      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800776e:	f107 0318 	add.w	r3, r7, #24
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fa0a 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800777c:	e1e7      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007782:	e1e4      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007784:	4b20      	ldr	r3, [pc, #128]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800778c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007790:	d107      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007792:	f107 030c 	add.w	r3, r7, #12
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fb4c 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077a0:	e1d5      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077a6:	e1d2      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077a8:	4b17      	ldr	r3, [pc, #92]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d109      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077b4:	4b14      	ldr	r3, [pc, #80]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	08db      	lsrs	r3, r3, #3
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	4a13      	ldr	r2, [pc, #76]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
 80077c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077c6:	e1c2      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077cc:	e1bf      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80077ce:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077da:	d102      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80077dc:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077e0:	e1b5      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077e6:	e1b2      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077e8:	4b07      	ldr	r3, [pc, #28]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f4:	d102      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80077f6:	4b07      	ldr	r3, [pc, #28]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077fa:	e1a8      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007800:	e1a5      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007806:	e1a2      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007808:	58024400 	.word	0x58024400
 800780c:	03d09000 	.word	0x03d09000
 8007810:	003d0900 	.word	0x003d0900
 8007814:	017d7840 	.word	0x017d7840
 8007818:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800781c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007820:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007824:	430b      	orrs	r3, r1
 8007826:	d173      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007828:	4b9c      	ldr	r3, [pc, #624]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007830:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007838:	d02f      	beq.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007840:	d863      	bhi.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800784e:	d012      	beq.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007850:	e05b      	b.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007852:	4b92      	ldr	r3, [pc, #584]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800785a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800785e:	d107      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007860:	f107 0318 	add.w	r3, r7, #24
 8007864:	4618      	mov	r0, r3
 8007866:	f000 f991 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800786e:	e16e      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007874:	e16b      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007876:	4b89      	ldr	r3, [pc, #548]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800787e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007882:	d107      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fad3 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007892:	e15c      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007898:	e159      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800789a:	4b80      	ldr	r3, [pc, #512]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078a4:	4b7d      	ldr	r3, [pc, #500]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d10c      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078b6:	4b79      	ldr	r3, [pc, #484]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	08db      	lsrs	r3, r3, #3
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	4a77      	ldr	r2, [pc, #476]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80078c2:	fa22 f303 	lsr.w	r3, r2, r3
 80078c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078c8:	e01e      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ca:	4b74      	ldr	r3, [pc, #464]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d6:	d106      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80078d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078de:	d102      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078e0:	4b70      	ldr	r3, [pc, #448]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e4:	e010      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078e6:	4b6d      	ldr	r3, [pc, #436]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80078f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078fa:	d102      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078fc:	4b6a      	ldr	r3, [pc, #424]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80078fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007900:	e002      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007906:	e122      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007908:	e121      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800790e:	e11e      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007914:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007918:	430b      	orrs	r3, r1
 800791a:	d133      	bne.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800791c:	4b5f      	ldr	r3, [pc, #380]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800791e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007924:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007932:	d012      	beq.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007934:	e023      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007936:	4b59      	ldr	r3, [pc, #356]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007942:	d107      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fbc7 	bl	80080dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007952:	e0fc      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007958:	e0f9      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800795a:	4b50      	ldr	r3, [pc, #320]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007966:	d107      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007968:	f107 0318 	add.w	r3, r7, #24
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f90d 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007976:	e0ea      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800797c:	e0e7      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007982:	e0e4      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007988:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800798c:	430b      	orrs	r3, r1
 800798e:	f040 808d 	bne.w	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007992:	4b42      	ldr	r3, [pc, #264]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007996:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800799a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079a2:	d06b      	beq.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079aa:	d874      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b2:	d056      	beq.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ba:	d86c      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079c2:	d03b      	beq.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079ca:	d864      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d2:	d021      	beq.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079da:	d85c      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079e8:	d004      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80079ea:	e054      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80079ec:	f000 f8b8 	bl	8007b60 <HAL_RCCEx_GetD3PCLK1Freq>
 80079f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079f2:	e0ac      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079f4:	4b29      	ldr	r3, [pc, #164]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a00:	d107      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a02:	f107 0318 	add.w	r3, r7, #24
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f8c0 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a10:	e09d      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a16:	e09a      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a18:	4b20      	ldr	r3, [pc, #128]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a24:	d107      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a26:	f107 030c 	add.w	r3, r7, #12
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fa02 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a34:	e08b      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a3a:	e088      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a3c:	4b17      	ldr	r3, [pc, #92]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d109      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a48:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	08db      	lsrs	r3, r3, #3
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007a54:	fa22 f303 	lsr.w	r3, r2, r3
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a5a:	e078      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a60:	e075      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007a62:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6e:	d102      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007a70:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a74:	e06b      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a7a:	e068      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a7c:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a88:	d102      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8e:	e05e      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a94:	e05b      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a9a:	e058      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a9c:	58024400 	.word	0x58024400
 8007aa0:	03d09000 	.word	0x03d09000
 8007aa4:	003d0900 	.word	0x003d0900
 8007aa8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	d148      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007ab8:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ac0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac8:	d02a      	beq.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ad0:	d838      	bhi.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ade:	d00d      	beq.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007ae0:	e030      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ae2:	4b1d      	ldr	r3, [pc, #116]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aee:	d102      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007af0:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007af4:	e02b      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007afa:	e028      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007afc:	4b16      	ldr	r3, [pc, #88]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b08:	d107      	bne.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fae4 	bl	80080dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b18:	e019      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b1e:	e016      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b20:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b2c:	d107      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b2e:	f107 0318 	add.w	r3, r7, #24
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f82a 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b3c:	e007      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b42:	e004      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b48:	e001      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3740      	adds	r7, #64	; 0x40
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	58024400 	.word	0x58024400
 8007b5c:	017d7840 	.word	0x017d7840

08007b60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b64:	f7fe f82c 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	091b      	lsrs	r3, r3, #4
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	4904      	ldr	r1, [pc, #16]	; (8007b88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b76:	5ccb      	ldrb	r3, [r1, r3]
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	58024400 	.word	0x58024400
 8007b88:	0800dd38 	.word	0x0800dd38

08007b8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b089      	sub	sp, #36	; 0x24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b94:	4ba1      	ldr	r3, [pc, #644]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007b9e:	4b9f      	ldr	r3, [pc, #636]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba2:	0b1b      	lsrs	r3, r3, #12
 8007ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ba8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007baa:	4b9c      	ldr	r3, [pc, #624]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	091b      	lsrs	r3, r3, #4
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007bb6:	4b99      	ldr	r3, [pc, #612]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bba:	08db      	lsrs	r3, r3, #3
 8007bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	fb02 f303 	mul.w	r3, r2, r3
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8111 	beq.w	8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	f000 8083 	beq.w	8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	f200 80a1 	bhi.w	8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d056      	beq.n	8007ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007bf6:	e099      	b.n	8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf8:	4b88      	ldr	r3, [pc, #544]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d02d      	beq.n	8007c60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c04:	4b85      	ldr	r3, [pc, #532]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	08db      	lsrs	r3, r3, #3
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	4a84      	ldr	r2, [pc, #528]	; (8007e20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c10:	fa22 f303 	lsr.w	r3, r2, r3
 8007c14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	ee07 3a90 	vmov	s15, r3
 8007c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2e:	4b7b      	ldr	r3, [pc, #492]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c5e:	e087      	b.n	8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c72:	4b6a      	ldr	r3, [pc, #424]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ca2:	e065      	b.n	8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb6:	4b59      	ldr	r3, [pc, #356]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ce6:	e043      	b.n	8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfa:	4b48      	ldr	r3, [pc, #288]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d2a:	e021      	b.n	8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3e:	4b37      	ldr	r3, [pc, #220]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d70:	4b2a      	ldr	r3, [pc, #168]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	0a5b      	lsrs	r3, r3, #9
 8007d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d96:	ee17 2a90 	vmov	r2, s15
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d9e:	4b1f      	ldr	r3, [pc, #124]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	0c1b      	lsrs	r3, r3, #16
 8007da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007da8:	ee07 3a90 	vmov	s15, r3
 8007dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007db4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc4:	ee17 2a90 	vmov	r2, s15
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007dcc:	4b13      	ldr	r3, [pc, #76]	; (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd0:	0e1b      	lsrs	r3, r3, #24
 8007dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007df2:	ee17 2a90 	vmov	r2, s15
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007dfa:	e008      	b.n	8007e0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	609a      	str	r2, [r3, #8]
}
 8007e0e:	bf00      	nop
 8007e10:	3724      	adds	r7, #36	; 0x24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	58024400 	.word	0x58024400
 8007e20:	03d09000 	.word	0x03d09000
 8007e24:	46000000 	.word	0x46000000
 8007e28:	4c742400 	.word	0x4c742400
 8007e2c:	4a742400 	.word	0x4a742400
 8007e30:	4bbebc20 	.word	0x4bbebc20

08007e34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b089      	sub	sp, #36	; 0x24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e3c:	4ba1      	ldr	r3, [pc, #644]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	f003 0303 	and.w	r3, r3, #3
 8007e44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007e46:	4b9f      	ldr	r3, [pc, #636]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	0d1b      	lsrs	r3, r3, #20
 8007e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e52:	4b9c      	ldr	r3, [pc, #624]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	0a1b      	lsrs	r3, r3, #8
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007e5e:	4b99      	ldr	r3, [pc, #612]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e62:	08db      	lsrs	r3, r3, #3
 8007e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	fb02 f303 	mul.w	r3, r2, r3
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8111 	beq.w	80080a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	f000 8083 	beq.w	8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	f200 80a1 	bhi.w	8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d056      	beq.n	8007f4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e9e:	e099      	b.n	8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ea0:	4b88      	ldr	r3, [pc, #544]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d02d      	beq.n	8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eac:	4b85      	ldr	r3, [pc, #532]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	08db      	lsrs	r3, r3, #3
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	4a84      	ldr	r2, [pc, #528]	; (80080c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed6:	4b7b      	ldr	r3, [pc, #492]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f06:	e087      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80080d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f1a:	4b6a      	ldr	r3, [pc, #424]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f4a:	e065      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	ee07 3a90 	vmov	s15, r3
 8007f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80080d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5e:	4b59      	ldr	r3, [pc, #356]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f72:	eddf 5a56 	vldr	s11, [pc, #344]	; 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f8e:	e043      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa2:	4b48      	ldr	r3, [pc, #288]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd2:	e021      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80080d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe6:	4b37      	ldr	r3, [pc, #220]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ffa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800800a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008016:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008018:	4b2a      	ldr	r3, [pc, #168]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	0a5b      	lsrs	r3, r3, #9
 800801e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800802e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008032:	edd7 6a07 	vldr	s13, [r7, #28]
 8008036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800803a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800803e:	ee17 2a90 	vmov	r2, s15
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008046:	4b1f      	ldr	r3, [pc, #124]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	0c1b      	lsrs	r3, r3, #16
 800804c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800805c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008060:	edd7 6a07 	vldr	s13, [r7, #28]
 8008064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800806c:	ee17 2a90 	vmov	r2, s15
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008074:	4b13      	ldr	r3, [pc, #76]	; (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008078:	0e1b      	lsrs	r3, r3, #24
 800807a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800808a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800808e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800809a:	ee17 2a90 	vmov	r2, s15
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080a2:	e008      	b.n	80080b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	609a      	str	r2, [r3, #8]
}
 80080b6:	bf00      	nop
 80080b8:	3724      	adds	r7, #36	; 0x24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	58024400 	.word	0x58024400
 80080c8:	03d09000 	.word	0x03d09000
 80080cc:	46000000 	.word	0x46000000
 80080d0:	4c742400 	.word	0x4c742400
 80080d4:	4a742400 	.word	0x4a742400
 80080d8:	4bbebc20 	.word	0x4bbebc20

080080dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80080dc:	b480      	push	{r7}
 80080de:	b089      	sub	sp, #36	; 0x24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080e4:	4ba0      	ldr	r3, [pc, #640]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	f003 0303 	and.w	r3, r3, #3
 80080ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80080ee:	4b9e      	ldr	r3, [pc, #632]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	091b      	lsrs	r3, r3, #4
 80080f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80080fa:	4b9b      	ldr	r3, [pc, #620]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008104:	4b98      	ldr	r3, [pc, #608]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008108:	08db      	lsrs	r3, r3, #3
 800810a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	fb02 f303 	mul.w	r3, r2, r3
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8111 	beq.w	800834a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	2b02      	cmp	r3, #2
 800812c:	f000 8083 	beq.w	8008236 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b02      	cmp	r3, #2
 8008134:	f200 80a1 	bhi.w	800827a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d056      	beq.n	80081f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008144:	e099      	b.n	800827a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008146:	4b88      	ldr	r3, [pc, #544]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d02d      	beq.n	80081ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008152:	4b85      	ldr	r3, [pc, #532]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	08db      	lsrs	r3, r3, #3
 8008158:	f003 0303 	and.w	r3, r3, #3
 800815c:	4a83      	ldr	r2, [pc, #524]	; (800836c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800815e:	fa22 f303 	lsr.w	r3, r2, r3
 8008162:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	ee07 3a90 	vmov	s15, r3
 8008174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800817c:	4b7a      	ldr	r3, [pc, #488]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800817e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008184:	ee07 3a90 	vmov	s15, r3
 8008188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008190:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800819c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081ac:	e087      	b.n	80082be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	ee07 3a90 	vmov	s15, r3
 80081b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008374 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80081bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c0:	4b69      	ldr	r3, [pc, #420]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c8:	ee07 3a90 	vmov	s15, r3
 80081cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80081d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081f0:	e065      	b.n	80082be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	ee07 3a90 	vmov	s15, r3
 80081f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008378 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008204:	4b58      	ldr	r3, [pc, #352]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820c:	ee07 3a90 	vmov	s15, r3
 8008210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008214:	ed97 6a03 	vldr	s12, [r7, #12]
 8008218:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800821c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800822c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008230:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008234:	e043      	b.n	80082be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	ee07 3a90 	vmov	s15, r3
 800823c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008240:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800837c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008248:	4b47      	ldr	r3, [pc, #284]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008250:	ee07 3a90 	vmov	s15, r3
 8008254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008258:	ed97 6a03 	vldr	s12, [r7, #12]
 800825c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800826c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008274:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008278:	e021      	b.n	80082be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008284:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008374 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828c:	4b36      	ldr	r3, [pc, #216]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800828e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008294:	ee07 3a90 	vmov	s15, r3
 8008298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829c:	ed97 6a03 	vldr	s12, [r7, #12]
 80082a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80082be:	4b2a      	ldr	r3, [pc, #168]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c2:	0a5b      	lsrs	r3, r3, #9
 80082c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c8:	ee07 3a90 	vmov	s15, r3
 80082cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80082dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082e4:	ee17 2a90 	vmov	r2, s15
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80082ec:	4b1e      	ldr	r3, [pc, #120]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	0c1b      	lsrs	r3, r3, #16
 80082f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008302:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008306:	edd7 6a07 	vldr	s13, [r7, #28]
 800830a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800830e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008312:	ee17 2a90 	vmov	r2, s15
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800831a:	4b13      	ldr	r3, [pc, #76]	; (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	0e1b      	lsrs	r3, r3, #24
 8008320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008330:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008334:	edd7 6a07 	vldr	s13, [r7, #28]
 8008338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800833c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008340:	ee17 2a90 	vmov	r2, s15
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008348:	e008      	b.n	800835c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	609a      	str	r2, [r3, #8]
}
 800835c:	bf00      	nop
 800835e:	3724      	adds	r7, #36	; 0x24
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	58024400 	.word	0x58024400
 800836c:	03d09000 	.word	0x03d09000
 8008370:	46000000 	.word	0x46000000
 8008374:	4c742400 	.word	0x4c742400
 8008378:	4a742400 	.word	0x4a742400
 800837c:	4bbebc20 	.word	0x4bbebc20

08008380 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800838e:	4b53      	ldr	r3, [pc, #332]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	2b03      	cmp	r3, #3
 8008398:	d101      	bne.n	800839e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e099      	b.n	80084d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800839e:	4b4f      	ldr	r3, [pc, #316]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a4e      	ldr	r2, [pc, #312]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 80083a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083aa:	f7f9 fe0d 	bl	8001fc8 <HAL_GetTick>
 80083ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083b0:	e008      	b.n	80083c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083b2:	f7f9 fe09 	bl	8001fc8 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d901      	bls.n	80083c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e086      	b.n	80084d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083c4:	4b45      	ldr	r3, [pc, #276]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1f0      	bne.n	80083b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80083d0:	4b42      	ldr	r3, [pc, #264]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	031b      	lsls	r3, r3, #12
 80083de:	493f      	ldr	r1, [pc, #252]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	628b      	str	r3, [r1, #40]	; 0x28
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	025b      	lsls	r3, r3, #9
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	3b01      	subs	r3, #1
 8008400:	041b      	lsls	r3, r3, #16
 8008402:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	3b01      	subs	r3, #1
 800840e:	061b      	lsls	r3, r3, #24
 8008410:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008414:	4931      	ldr	r1, [pc, #196]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008416:	4313      	orrs	r3, r2
 8008418:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800841a:	4b30      	ldr	r3, [pc, #192]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	492d      	ldr	r1, [pc, #180]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008428:	4313      	orrs	r3, r2
 800842a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800842c:	4b2b      	ldr	r3, [pc, #172]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	f023 0220 	bic.w	r2, r3, #32
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	4928      	ldr	r1, [pc, #160]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 800843a:	4313      	orrs	r3, r2
 800843c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800843e:	4b27      	ldr	r3, [pc, #156]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	4a26      	ldr	r2, [pc, #152]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008444:	f023 0310 	bic.w	r3, r3, #16
 8008448:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800844a:	4b24      	ldr	r3, [pc, #144]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 800844c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800844e:	4b24      	ldr	r3, [pc, #144]	; (80084e0 <RCCEx_PLL2_Config+0x160>)
 8008450:	4013      	ands	r3, r2
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	69d2      	ldr	r2, [r2, #28]
 8008456:	00d2      	lsls	r2, r2, #3
 8008458:	4920      	ldr	r1, [pc, #128]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 800845a:	4313      	orrs	r3, r2
 800845c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800845e:	4b1f      	ldr	r3, [pc, #124]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008462:	4a1e      	ldr	r2, [pc, #120]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008464:	f043 0310 	orr.w	r3, r3, #16
 8008468:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d106      	bne.n	800847e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008470:	4b1a      	ldr	r3, [pc, #104]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	4a19      	ldr	r2, [pc, #100]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800847a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800847c:	e00f      	b.n	800849e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d106      	bne.n	8008492 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008484:	4b15      	ldr	r3, [pc, #84]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	4a14      	ldr	r2, [pc, #80]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 800848a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800848e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008490:	e005      	b.n	800849e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008492:	4b12      	ldr	r3, [pc, #72]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	4a11      	ldr	r2, [pc, #68]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 8008498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800849c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800849e:	4b0f      	ldr	r3, [pc, #60]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a0e      	ldr	r2, [pc, #56]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 80084a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084aa:	f7f9 fd8d 	bl	8001fc8 <HAL_GetTick>
 80084ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084b0:	e008      	b.n	80084c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80084b2:	f7f9 fd89 	bl	8001fc8 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d901      	bls.n	80084c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e006      	b.n	80084d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084c4:	4b05      	ldr	r3, [pc, #20]	; (80084dc <RCCEx_PLL2_Config+0x15c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0f0      	beq.n	80084b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	58024400 	.word	0x58024400
 80084e0:	ffff0007 	.word	0xffff0007

080084e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084f2:	4b53      	ldr	r3, [pc, #332]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80084f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d101      	bne.n	8008502 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e099      	b.n	8008636 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008502:	4b4f      	ldr	r3, [pc, #316]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a4e      	ldr	r2, [pc, #312]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 8008508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800850c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800850e:	f7f9 fd5b 	bl	8001fc8 <HAL_GetTick>
 8008512:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008514:	e008      	b.n	8008528 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008516:	f7f9 fd57 	bl	8001fc8 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d901      	bls.n	8008528 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e086      	b.n	8008636 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008528:	4b45      	ldr	r3, [pc, #276]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1f0      	bne.n	8008516 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008534:	4b42      	ldr	r3, [pc, #264]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	051b      	lsls	r3, r3, #20
 8008542:	493f      	ldr	r1, [pc, #252]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 8008544:	4313      	orrs	r3, r2
 8008546:	628b      	str	r3, [r1, #40]	; 0x28
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	3b01      	subs	r3, #1
 800854e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	3b01      	subs	r3, #1
 8008558:	025b      	lsls	r3, r3, #9
 800855a:	b29b      	uxth	r3, r3
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	3b01      	subs	r3, #1
 8008564:	041b      	lsls	r3, r3, #16
 8008566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	3b01      	subs	r3, #1
 8008572:	061b      	lsls	r3, r3, #24
 8008574:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008578:	4931      	ldr	r1, [pc, #196]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 800857a:	4313      	orrs	r3, r2
 800857c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800857e:	4b30      	ldr	r3, [pc, #192]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	492d      	ldr	r1, [pc, #180]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 800858c:	4313      	orrs	r3, r2
 800858e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008590:	4b2b      	ldr	r3, [pc, #172]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	4928      	ldr	r1, [pc, #160]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80085a2:	4b27      	ldr	r3, [pc, #156]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a6:	4a26      	ldr	r2, [pc, #152]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80085ae:	4b24      	ldr	r3, [pc, #144]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085b2:	4b24      	ldr	r3, [pc, #144]	; (8008644 <RCCEx_PLL3_Config+0x160>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	69d2      	ldr	r2, [r2, #28]
 80085ba:	00d2      	lsls	r2, r2, #3
 80085bc:	4920      	ldr	r1, [pc, #128]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80085c2:	4b1f      	ldr	r3, [pc, #124]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	4a1e      	ldr	r2, [pc, #120]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80085d4:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	4a19      	ldr	r2, [pc, #100]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085e0:	e00f      	b.n	8008602 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d106      	bne.n	80085f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80085e8:	4b15      	ldr	r3, [pc, #84]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4a14      	ldr	r2, [pc, #80]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085f4:	e005      	b.n	8008602 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80085f6:	4b12      	ldr	r3, [pc, #72]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	4a11      	ldr	r2, [pc, #68]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 80085fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008600:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008602:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a0e      	ldr	r2, [pc, #56]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 8008608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800860c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800860e:	f7f9 fcdb 	bl	8001fc8 <HAL_GetTick>
 8008612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008614:	e008      	b.n	8008628 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008616:	f7f9 fcd7 	bl	8001fc8 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d901      	bls.n	8008628 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e006      	b.n	8008636 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <RCCEx_PLL3_Config+0x15c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f0      	beq.n	8008616 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	58024400 	.word	0x58024400
 8008644:	ffff0007 	.word	0xffff0007

08008648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e049      	b.n	80086ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7f9 fae6 	bl	8001c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3304      	adds	r3, #4
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f000 f8a6 	bl	80087d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b01      	cmp	r3, #1
 800870a:	d001      	beq.n	8008710 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e04c      	b.n	80087aa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a26      	ldr	r2, [pc, #152]	; (80087b8 <HAL_TIM_Base_Start+0xc0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d022      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800872a:	d01d      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a22      	ldr	r2, [pc, #136]	; (80087bc <HAL_TIM_Base_Start+0xc4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d018      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a21      	ldr	r2, [pc, #132]	; (80087c0 <HAL_TIM_Base_Start+0xc8>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d013      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <HAL_TIM_Base_Start+0xcc>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d00e      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1e      	ldr	r2, [pc, #120]	; (80087c8 <HAL_TIM_Base_Start+0xd0>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d009      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a1c      	ldr	r2, [pc, #112]	; (80087cc <HAL_TIM_Base_Start+0xd4>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d004      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1b      	ldr	r2, [pc, #108]	; (80087d0 <HAL_TIM_Base_Start+0xd8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d115      	bne.n	8008794 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	4b19      	ldr	r3, [pc, #100]	; (80087d4 <HAL_TIM_Base_Start+0xdc>)
 8008770:	4013      	ands	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b06      	cmp	r3, #6
 8008778:	d015      	beq.n	80087a6 <HAL_TIM_Base_Start+0xae>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008780:	d011      	beq.n	80087a6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f042 0201 	orr.w	r2, r2, #1
 8008790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008792:	e008      	b.n	80087a6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e000      	b.n	80087a8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40010000 	.word	0x40010000
 80087bc:	40000400 	.word	0x40000400
 80087c0:	40000800 	.word	0x40000800
 80087c4:	40000c00 	.word	0x40000c00
 80087c8:	40010400 	.word	0x40010400
 80087cc:	40001800 	.word	0x40001800
 80087d0:	40014000 	.word	0x40014000
 80087d4:	00010007 	.word	0x00010007

080087d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a40      	ldr	r2, [pc, #256]	; (80088ec <TIM_Base_SetConfig+0x114>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d013      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f6:	d00f      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a3d      	ldr	r2, [pc, #244]	; (80088f0 <TIM_Base_SetConfig+0x118>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00b      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a3c      	ldr	r2, [pc, #240]	; (80088f4 <TIM_Base_SetConfig+0x11c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d007      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a3b      	ldr	r2, [pc, #236]	; (80088f8 <TIM_Base_SetConfig+0x120>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d003      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a3a      	ldr	r2, [pc, #232]	; (80088fc <TIM_Base_SetConfig+0x124>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d108      	bne.n	800882a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a2f      	ldr	r2, [pc, #188]	; (80088ec <TIM_Base_SetConfig+0x114>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d01f      	beq.n	8008872 <TIM_Base_SetConfig+0x9a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008838:	d01b      	beq.n	8008872 <TIM_Base_SetConfig+0x9a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a2c      	ldr	r2, [pc, #176]	; (80088f0 <TIM_Base_SetConfig+0x118>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d017      	beq.n	8008872 <TIM_Base_SetConfig+0x9a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a2b      	ldr	r2, [pc, #172]	; (80088f4 <TIM_Base_SetConfig+0x11c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <TIM_Base_SetConfig+0x9a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a2a      	ldr	r2, [pc, #168]	; (80088f8 <TIM_Base_SetConfig+0x120>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d00f      	beq.n	8008872 <TIM_Base_SetConfig+0x9a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a29      	ldr	r2, [pc, #164]	; (80088fc <TIM_Base_SetConfig+0x124>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d00b      	beq.n	8008872 <TIM_Base_SetConfig+0x9a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a28      	ldr	r2, [pc, #160]	; (8008900 <TIM_Base_SetConfig+0x128>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d007      	beq.n	8008872 <TIM_Base_SetConfig+0x9a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a27      	ldr	r2, [pc, #156]	; (8008904 <TIM_Base_SetConfig+0x12c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d003      	beq.n	8008872 <TIM_Base_SetConfig+0x9a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a26      	ldr	r2, [pc, #152]	; (8008908 <TIM_Base_SetConfig+0x130>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d108      	bne.n	8008884 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	689a      	ldr	r2, [r3, #8]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a10      	ldr	r2, [pc, #64]	; (80088ec <TIM_Base_SetConfig+0x114>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00f      	beq.n	80088d0 <TIM_Base_SetConfig+0xf8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a12      	ldr	r2, [pc, #72]	; (80088fc <TIM_Base_SetConfig+0x124>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d00b      	beq.n	80088d0 <TIM_Base_SetConfig+0xf8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a11      	ldr	r2, [pc, #68]	; (8008900 <TIM_Base_SetConfig+0x128>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d007      	beq.n	80088d0 <TIM_Base_SetConfig+0xf8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a10      	ldr	r2, [pc, #64]	; (8008904 <TIM_Base_SetConfig+0x12c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d003      	beq.n	80088d0 <TIM_Base_SetConfig+0xf8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a0f      	ldr	r2, [pc, #60]	; (8008908 <TIM_Base_SetConfig+0x130>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d103      	bne.n	80088d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	691a      	ldr	r2, [r3, #16]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	615a      	str	r2, [r3, #20]
}
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	40010000 	.word	0x40010000
 80088f0:	40000400 	.word	0x40000400
 80088f4:	40000800 	.word	0x40000800
 80088f8:	40000c00 	.word	0x40000c00
 80088fc:	40010400 	.word	0x40010400
 8008900:	40014000 	.word	0x40014000
 8008904:	40014400 	.word	0x40014400
 8008908:	40014800 	.word	0x40014800

0800890c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800890c:	b084      	sub	sp, #16
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	f107 001c 	add.w	r0, r7, #28
 800891a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	2b01      	cmp	r3, #1
 8008922:	d120      	bne.n	8008966 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	4b2a      	ldr	r3, [pc, #168]	; (80089e0 <USB_CoreInit+0xd4>)
 8008936:	4013      	ands	r3, r2
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800894a:	2b01      	cmp	r3, #1
 800894c:	d105      	bne.n	800895a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 faf8 	bl	8009f50 <USB_CoreReset>
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]
 8008964:	e01a      	b.n	800899c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 faec 	bl	8009f50 <USB_CoreReset>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800897c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	639a      	str	r2, [r3, #56]	; 0x38
 800898e:	e005      	b.n	800899c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d116      	bne.n	80089d0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089b0:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <USB_CoreInit+0xd8>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f043 0206 	orr.w	r2, r3, #6
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f043 0220 	orr.w	r2, r3, #32
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089dc:	b004      	add	sp, #16
 80089de:	4770      	bx	lr
 80089e0:	ffbdffbf 	.word	0xffbdffbf
 80089e4:	03ee0000 	.word	0x03ee0000

080089e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d165      	bne.n	8008ac8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4a41      	ldr	r2, [pc, #260]	; (8008b04 <USB_SetTurnaroundTime+0x11c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d906      	bls.n	8008a12 <USB_SetTurnaroundTime+0x2a>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4a40      	ldr	r2, [pc, #256]	; (8008b08 <USB_SetTurnaroundTime+0x120>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d202      	bcs.n	8008a12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a0c:	230f      	movs	r3, #15
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	e062      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	4a3c      	ldr	r2, [pc, #240]	; (8008b08 <USB_SetTurnaroundTime+0x120>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d306      	bcc.n	8008a28 <USB_SetTurnaroundTime+0x40>
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	4a3b      	ldr	r2, [pc, #236]	; (8008b0c <USB_SetTurnaroundTime+0x124>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d202      	bcs.n	8008a28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008a22:	230e      	movs	r3, #14
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	e057      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4a38      	ldr	r2, [pc, #224]	; (8008b0c <USB_SetTurnaroundTime+0x124>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d306      	bcc.n	8008a3e <USB_SetTurnaroundTime+0x56>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	4a37      	ldr	r2, [pc, #220]	; (8008b10 <USB_SetTurnaroundTime+0x128>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d202      	bcs.n	8008a3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008a38:	230d      	movs	r3, #13
 8008a3a:	617b      	str	r3, [r7, #20]
 8008a3c:	e04c      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	4a33      	ldr	r2, [pc, #204]	; (8008b10 <USB_SetTurnaroundTime+0x128>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d306      	bcc.n	8008a54 <USB_SetTurnaroundTime+0x6c>
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	4a32      	ldr	r2, [pc, #200]	; (8008b14 <USB_SetTurnaroundTime+0x12c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d802      	bhi.n	8008a54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008a4e:	230c      	movs	r3, #12
 8008a50:	617b      	str	r3, [r7, #20]
 8008a52:	e041      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	4a2f      	ldr	r2, [pc, #188]	; (8008b14 <USB_SetTurnaroundTime+0x12c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d906      	bls.n	8008a6a <USB_SetTurnaroundTime+0x82>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4a2e      	ldr	r2, [pc, #184]	; (8008b18 <USB_SetTurnaroundTime+0x130>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d802      	bhi.n	8008a6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008a64:	230b      	movs	r3, #11
 8008a66:	617b      	str	r3, [r7, #20]
 8008a68:	e036      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	4a2a      	ldr	r2, [pc, #168]	; (8008b18 <USB_SetTurnaroundTime+0x130>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d906      	bls.n	8008a80 <USB_SetTurnaroundTime+0x98>
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	4a29      	ldr	r2, [pc, #164]	; (8008b1c <USB_SetTurnaroundTime+0x134>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d802      	bhi.n	8008a80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008a7a:	230a      	movs	r3, #10
 8008a7c:	617b      	str	r3, [r7, #20]
 8008a7e:	e02b      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4a26      	ldr	r2, [pc, #152]	; (8008b1c <USB_SetTurnaroundTime+0x134>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d906      	bls.n	8008a96 <USB_SetTurnaroundTime+0xae>
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4a25      	ldr	r2, [pc, #148]	; (8008b20 <USB_SetTurnaroundTime+0x138>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d202      	bcs.n	8008a96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a90:	2309      	movs	r3, #9
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	e020      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	4a21      	ldr	r2, [pc, #132]	; (8008b20 <USB_SetTurnaroundTime+0x138>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d306      	bcc.n	8008aac <USB_SetTurnaroundTime+0xc4>
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	4a20      	ldr	r2, [pc, #128]	; (8008b24 <USB_SetTurnaroundTime+0x13c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d802      	bhi.n	8008aac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	617b      	str	r3, [r7, #20]
 8008aaa:	e015      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <USB_SetTurnaroundTime+0x13c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d906      	bls.n	8008ac2 <USB_SetTurnaroundTime+0xda>
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4a1c      	ldr	r2, [pc, #112]	; (8008b28 <USB_SetTurnaroundTime+0x140>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d202      	bcs.n	8008ac2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008abc:	2307      	movs	r3, #7
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e00a      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008ac2:	2306      	movs	r3, #6
 8008ac4:	617b      	str	r3, [r7, #20]
 8008ac6:	e007      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d102      	bne.n	8008ad4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ace:	2309      	movs	r3, #9
 8008ad0:	617b      	str	r3, [r7, #20]
 8008ad2:	e001      	b.n	8008ad8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008ad4:	2309      	movs	r3, #9
 8008ad6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	029b      	lsls	r3, r3, #10
 8008aec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008af0:	431a      	orrs	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	371c      	adds	r7, #28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	00d8acbf 	.word	0x00d8acbf
 8008b08:	00e4e1c0 	.word	0x00e4e1c0
 8008b0c:	00f42400 	.word	0x00f42400
 8008b10:	01067380 	.word	0x01067380
 8008b14:	011a499f 	.word	0x011a499f
 8008b18:	01312cff 	.word	0x01312cff
 8008b1c:	014ca43f 	.word	0x014ca43f
 8008b20:	016e3600 	.word	0x016e3600
 8008b24:	01a6ab1f 	.word	0x01a6ab1f
 8008b28:	01e84800 	.word	0x01e84800

08008b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f043 0201 	orr.w	r2, r3, #1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f023 0201 	bic.w	r2, r3, #1
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d115      	bne.n	8008bbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	f7f9 fa1e 	bl	8001fe0 <HAL_Delay>
      ms++;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 f93f 	bl	8009e2e <USB_GetMode>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d01e      	beq.n	8008bf4 <USB_SetCurrentMode+0x84>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b31      	cmp	r3, #49	; 0x31
 8008bba:	d9f0      	bls.n	8008b9e <USB_SetCurrentMode+0x2e>
 8008bbc:	e01a      	b.n	8008bf4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d115      	bne.n	8008bf0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f7f9 fa05 	bl	8001fe0 <HAL_Delay>
      ms++;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f926 	bl	8009e2e <USB_GetMode>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d005      	beq.n	8008bf4 <USB_SetCurrentMode+0x84>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b31      	cmp	r3, #49	; 0x31
 8008bec:	d9f0      	bls.n	8008bd0 <USB_SetCurrentMode+0x60>
 8008bee:	e001      	b.n	8008bf4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e005      	b.n	8008c00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b32      	cmp	r3, #50	; 0x32
 8008bf8:	d101      	bne.n	8008bfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c08:	b084      	sub	sp, #16
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b086      	sub	sp, #24
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c22:	2300      	movs	r3, #0
 8008c24:	613b      	str	r3, [r7, #16]
 8008c26:	e009      	b.n	8008c3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	3340      	adds	r3, #64	; 0x40
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	2200      	movs	r2, #0
 8008c34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	613b      	str	r3, [r7, #16]
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2b0e      	cmp	r3, #14
 8008c40:	d9f2      	bls.n	8008c28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d11c      	bne.n	8008c82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c56:	f043 0302 	orr.w	r3, r3, #2
 8008c5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	e005      	b.n	8008c8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c94:	461a      	mov	r2, r3
 8008c96:	2300      	movs	r3, #0
 8008c98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca8:	461a      	mov	r2, r3
 8008caa:	680b      	ldr	r3, [r1, #0]
 8008cac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d10c      	bne.n	8008cce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f965 	bl	8008f8c <USB_SetDevSpeed>
 8008cc2:	e008      	b.n	8008cd6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f960 	bl	8008f8c <USB_SetDevSpeed>
 8008ccc:	e003      	b.n	8008cd6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008cce:	2103      	movs	r1, #3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f95b 	bl	8008f8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008cd6:	2110      	movs	r1, #16
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f8f3 	bl	8008ec4 <USB_FlushTxFifo>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f91f 	bl	8008f2c <USB_FlushRxFifo>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfe:	461a      	mov	r2, r3
 8008d00:	2300      	movs	r3, #0
 8008d02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d16:	461a      	mov	r2, r3
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	613b      	str	r3, [r7, #16]
 8008d20:	e043      	b.n	8008daa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d38:	d118      	bne.n	8008d6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	e013      	b.n	8008d7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d62:	461a      	mov	r2, r3
 8008d64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	e008      	b.n	8008d7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008da2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	3301      	adds	r3, #1
 8008da8:	613b      	str	r3, [r7, #16]
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d3b7      	bcc.n	8008d22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008db2:	2300      	movs	r3, #0
 8008db4:	613b      	str	r3, [r7, #16]
 8008db6:	e043      	b.n	8008e40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dce:	d118      	bne.n	8008e02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	461a      	mov	r2, r3
 8008de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	e013      	b.n	8008e14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df8:	461a      	mov	r2, r3
 8008dfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	e008      	b.n	8008e14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0e:	461a      	mov	r2, r3
 8008e10:	2300      	movs	r3, #0
 8008e12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e20:	461a      	mov	r2, r3
 8008e22:	2300      	movs	r3, #0
 8008e24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e32:	461a      	mov	r2, r3
 8008e34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	613b      	str	r3, [r7, #16]
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d3b7      	bcc.n	8008db8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d105      	bne.n	8008e7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f043 0210 	orr.w	r2, r3, #16
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	699a      	ldr	r2, [r3, #24]
 8008e80:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <USB_DevInit+0x2b4>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	f043 0208 	orr.w	r2, r3, #8
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d105      	bne.n	8008eac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <USB_DevInit+0x2b8>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008eb8:	b004      	add	sp, #16
 8008eba:	4770      	bx	lr
 8008ebc:	803c3800 	.word	0x803c3800
 8008ec0:	40000004 	.word	0x40000004

08008ec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4a13      	ldr	r2, [pc, #76]	; (8008f28 <USB_FlushTxFifo+0x64>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d901      	bls.n	8008ee4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e01b      	b.n	8008f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	daf2      	bge.n	8008ed2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	019b      	lsls	r3, r3, #6
 8008ef4:	f043 0220 	orr.w	r2, r3, #32
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	3301      	adds	r3, #1
 8008f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4a08      	ldr	r2, [pc, #32]	; (8008f28 <USB_FlushTxFifo+0x64>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d901      	bls.n	8008f0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e006      	b.n	8008f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d0f0      	beq.n	8008efc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	00030d40 	.word	0x00030d40

08008f2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4a11      	ldr	r2, [pc, #68]	; (8008f88 <USB_FlushRxFifo+0x5c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d901      	bls.n	8008f4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e018      	b.n	8008f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	daf2      	bge.n	8008f38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2210      	movs	r2, #16
 8008f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a08      	ldr	r2, [pc, #32]	; (8008f88 <USB_FlushRxFifo+0x5c>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d901      	bls.n	8008f6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e006      	b.n	8008f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0310 	and.w	r3, r3, #16
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	d0f0      	beq.n	8008f5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	00030d40 	.word	0x00030d40

08008f8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fac:	4313      	orrs	r3, r2
 8008fae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b087      	sub	sp, #28
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 0306 	and.w	r3, r3, #6
 8008fd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]
 8008fe2:	e00a      	b.n	8008ffa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d002      	beq.n	8008ff0 <USB_GetDevSpeed+0x32>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b06      	cmp	r3, #6
 8008fee:	d102      	bne.n	8008ff6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	75fb      	strb	r3, [r7, #23]
 8008ff4:	e001      	b.n	8008ffa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ff6:	230f      	movs	r3, #15
 8008ff8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	371c      	adds	r7, #28
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	785b      	ldrb	r3, [r3, #1]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d139      	bne.n	8009098 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902a:	69da      	ldr	r2, [r3, #28]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	f003 030f 	and.w	r3, r3, #15
 8009034:	2101      	movs	r1, #1
 8009036:	fa01 f303 	lsl.w	r3, r1, r3
 800903a:	b29b      	uxth	r3, r3
 800903c:	68f9      	ldr	r1, [r7, #12]
 800903e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009042:	4313      	orrs	r3, r2
 8009044:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d153      	bne.n	8009104 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	791b      	ldrb	r3, [r3, #4]
 8009076:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009078:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	059b      	lsls	r3, r3, #22
 800907e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009080:	431a      	orrs	r2, r3
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	0159      	lsls	r1, r3, #5
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	440b      	add	r3, r1
 800908a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908e:	4619      	mov	r1, r3
 8009090:	4b20      	ldr	r3, [pc, #128]	; (8009114 <USB_ActivateEndpoint+0x10c>)
 8009092:	4313      	orrs	r3, r2
 8009094:	600b      	str	r3, [r1, #0]
 8009096:	e035      	b.n	8009104 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	69da      	ldr	r2, [r3, #28]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	2101      	movs	r1, #1
 80090aa:	fa01 f303 	lsl.w	r3, r1, r3
 80090ae:	041b      	lsls	r3, r3, #16
 80090b0:	68f9      	ldr	r1, [r7, #12]
 80090b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b6:	4313      	orrs	r3, r2
 80090b8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d119      	bne.n	8009104 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	791b      	ldrb	r3, [r3, #4]
 80090ea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090ec:	430b      	orrs	r3, r1
 80090ee:	431a      	orrs	r2, r3
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	0159      	lsls	r1, r3, #5
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	440b      	add	r3, r1
 80090f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fc:	4619      	mov	r1, r3
 80090fe:	4b05      	ldr	r3, [pc, #20]	; (8009114 <USB_ActivateEndpoint+0x10c>)
 8009100:	4313      	orrs	r3, r2
 8009102:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	10008000 	.word	0x10008000

08009118 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d161      	bne.n	80091f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800914a:	d11f      	bne.n	800918c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	0151      	lsls	r1, r2, #5
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	440a      	add	r2, r1
 8009162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800916a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	0151      	lsls	r1, r2, #5
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	440a      	add	r2, r1
 8009182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800918a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	2101      	movs	r1, #1
 800919e:	fa01 f303 	lsl.w	r3, r1, r3
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	43db      	mvns	r3, r3
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091ac:	4013      	ands	r3, r2
 80091ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b6:	69da      	ldr	r2, [r3, #28]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	2101      	movs	r1, #1
 80091c2:	fa01 f303 	lsl.w	r3, r1, r3
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	43db      	mvns	r3, r3
 80091ca:	68f9      	ldr	r1, [r7, #12]
 80091cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091d0:	4013      	ands	r3, r2
 80091d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	0159      	lsls	r1, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	440b      	add	r3, r1
 80091ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ee:	4619      	mov	r1, r3
 80091f0:	4b35      	ldr	r3, [pc, #212]	; (80092c8 <USB_DeactivateEndpoint+0x1b0>)
 80091f2:	4013      	ands	r3, r2
 80091f4:	600b      	str	r3, [r1, #0]
 80091f6:	e060      	b.n	80092ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800920a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800920e:	d11f      	bne.n	8009250 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	0151      	lsls	r1, r2, #5
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	440a      	add	r2, r1
 8009226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800922a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800922e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	440a      	add	r2, r1
 8009246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800924a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800924e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	f003 030f 	and.w	r3, r3, #15
 8009260:	2101      	movs	r1, #1
 8009262:	fa01 f303 	lsl.w	r3, r1, r3
 8009266:	041b      	lsls	r3, r3, #16
 8009268:	43db      	mvns	r3, r3
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009270:	4013      	ands	r3, r2
 8009272:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927a:	69da      	ldr	r2, [r3, #28]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 030f 	and.w	r3, r3, #15
 8009284:	2101      	movs	r1, #1
 8009286:	fa01 f303 	lsl.w	r3, r1, r3
 800928a:	041b      	lsls	r3, r3, #16
 800928c:	43db      	mvns	r3, r3
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009294:	4013      	ands	r3, r2
 8009296:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	0159      	lsls	r1, r3, #5
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	440b      	add	r3, r1
 80092ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b2:	4619      	mov	r1, r3
 80092b4:	4b05      	ldr	r3, [pc, #20]	; (80092cc <USB_DeactivateEndpoint+0x1b4>)
 80092b6:	4013      	ands	r3, r2
 80092b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	ec337800 	.word	0xec337800
 80092cc:	eff37800 	.word	0xeff37800

080092d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08a      	sub	sp, #40	; 0x28
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	4613      	mov	r3, r2
 80092dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	785b      	ldrb	r3, [r3, #1]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	f040 8181 	bne.w	80095f4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d132      	bne.n	8009360 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	4413      	add	r3, r2
 8009302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009306:	691a      	ldr	r2, [r3, #16]
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	0159      	lsls	r1, r3, #5
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	440b      	add	r3, r1
 8009310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009314:	4619      	mov	r1, r3
 8009316:	4ba5      	ldr	r3, [pc, #660]	; (80095ac <USB_EPStartXfer+0x2dc>)
 8009318:	4013      	ands	r3, r2
 800931a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	0151      	lsls	r1, r2, #5
 800932e:	69fa      	ldr	r2, [r7, #28]
 8009330:	440a      	add	r2, r1
 8009332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800933a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	4413      	add	r3, r2
 8009344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009348:	691a      	ldr	r2, [r3, #16]
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	0159      	lsls	r1, r3, #5
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	440b      	add	r3, r1
 8009352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009356:	4619      	mov	r1, r3
 8009358:	4b95      	ldr	r3, [pc, #596]	; (80095b0 <USB_EPStartXfer+0x2e0>)
 800935a:	4013      	ands	r3, r2
 800935c:	610b      	str	r3, [r1, #16]
 800935e:	e092      	b.n	8009486 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936c:	691a      	ldr	r2, [r3, #16]
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	0159      	lsls	r1, r3, #5
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	440b      	add	r3, r1
 8009376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937a:	4619      	mov	r1, r3
 800937c:	4b8c      	ldr	r3, [pc, #560]	; (80095b0 <USB_EPStartXfer+0x2e0>)
 800937e:	4013      	ands	r3, r2
 8009380:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	0159      	lsls	r1, r3, #5
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	440b      	add	r3, r1
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	4619      	mov	r1, r3
 800939e:	4b83      	ldr	r3, [pc, #524]	; (80095ac <USB_EPStartXfer+0x2dc>)
 80093a0:	4013      	ands	r3, r2
 80093a2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d11a      	bne.n	80093e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d903      	bls.n	80093be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093dc:	6113      	str	r3, [r2, #16]
 80093de:	e01b      	b.n	8009418 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ec:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	6919      	ldr	r1, [r3, #16]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	440b      	add	r3, r1
 80093f8:	1e59      	subs	r1, r3, #1
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009402:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009404:	4b6b      	ldr	r3, [pc, #428]	; (80095b4 <USB_EPStartXfer+0x2e4>)
 8009406:	400b      	ands	r3, r1
 8009408:	69b9      	ldr	r1, [r7, #24]
 800940a:	0148      	lsls	r0, r1, #5
 800940c:	69f9      	ldr	r1, [r7, #28]
 800940e:	4401      	add	r1, r0
 8009410:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009414:	4313      	orrs	r3, r2
 8009416:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009424:	691a      	ldr	r2, [r3, #16]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800942e:	69b9      	ldr	r1, [r7, #24]
 8009430:	0148      	lsls	r0, r1, #5
 8009432:	69f9      	ldr	r1, [r7, #28]
 8009434:	4401      	add	r1, r0
 8009436:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800943a:	4313      	orrs	r3, r2
 800943c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	791b      	ldrb	r3, [r3, #4]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d11f      	bne.n	8009486 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	0151      	lsls	r1, r2, #5
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	440a      	add	r2, r1
 800945c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009460:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009464:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	69fa      	ldr	r2, [r7, #28]
 800947a:	440a      	add	r2, r1
 800947c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009484:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d14b      	bne.n	8009524 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d009      	beq.n	80094a8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a0:	461a      	mov	r2, r3
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	791b      	ldrb	r3, [r3, #4]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d128      	bne.n	8009502 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d110      	bne.n	80094e2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	0151      	lsls	r1, r2, #5
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	440a      	add	r2, r1
 80094d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	e00f      	b.n	8009502 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009500:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69ba      	ldr	r2, [r7, #24]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	69fa      	ldr	r2, [r7, #28]
 8009516:	440a      	add	r2, r1
 8009518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	e16a      	b.n	80097fa <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009542:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	791b      	ldrb	r3, [r3, #4]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d015      	beq.n	8009578 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8152 	beq.w	80097fa <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800955c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	f003 030f 	and.w	r3, r3, #15
 8009566:	2101      	movs	r1, #1
 8009568:	fa01 f303 	lsl.w	r3, r1, r3
 800956c:	69f9      	ldr	r1, [r7, #28]
 800956e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009572:	4313      	orrs	r3, r2
 8009574:	634b      	str	r3, [r1, #52]	; 0x34
 8009576:	e140      	b.n	80097fa <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009584:	2b00      	cmp	r3, #0
 8009586:	d117      	bne.n	80095b8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	0151      	lsls	r1, r2, #5
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	440a      	add	r2, r1
 800959e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	e016      	b.n	80095d8 <USB_EPStartXfer+0x308>
 80095aa:	bf00      	nop
 80095ac:	e007ffff 	.word	0xe007ffff
 80095b0:	fff80000 	.word	0xfff80000
 80095b4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	0151      	lsls	r1, r2, #5
 80095ca:	69fa      	ldr	r2, [r7, #28]
 80095cc:	440a      	add	r2, r1
 80095ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095d6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	68d9      	ldr	r1, [r3, #12]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	781a      	ldrb	r2, [r3, #0]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	b298      	uxth	r0, r3
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	4603      	mov	r3, r0
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f9b9 	bl	8009964 <USB_WritePacket>
 80095f2:	e102      	b.n	80097fa <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009600:	691a      	ldr	r2, [r3, #16]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	0159      	lsls	r1, r3, #5
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	440b      	add	r3, r1
 800960a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960e:	4619      	mov	r1, r3
 8009610:	4b7c      	ldr	r3, [pc, #496]	; (8009804 <USB_EPStartXfer+0x534>)
 8009612:	4013      	ands	r3, r2
 8009614:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009622:	691a      	ldr	r2, [r3, #16]
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	0159      	lsls	r1, r3, #5
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	440b      	add	r3, r1
 800962c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009630:	4619      	mov	r1, r3
 8009632:	4b75      	ldr	r3, [pc, #468]	; (8009808 <USB_EPStartXfer+0x538>)
 8009634:	4013      	ands	r3, r2
 8009636:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d12f      	bne.n	800969e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009662:	691a      	ldr	r2, [r3, #16]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800966c:	69b9      	ldr	r1, [r7, #24]
 800966e:	0148      	lsls	r0, r1, #5
 8009670:	69f9      	ldr	r1, [r7, #28]
 8009672:	4401      	add	r1, r0
 8009674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009678:	4313      	orrs	r3, r2
 800967a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	0151      	lsls	r1, r2, #5
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	440a      	add	r2, r1
 8009692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800969a:	6113      	str	r3, [r2, #16]
 800969c:	e05f      	b.n	800975e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d123      	bne.n	80096ee <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096bc:	69b9      	ldr	r1, [r7, #24]
 80096be:	0148      	lsls	r0, r1, #5
 80096c0:	69f9      	ldr	r1, [r7, #28]
 80096c2:	4401      	add	r1, r0
 80096c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096c8:	4313      	orrs	r3, r2
 80096ca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	69ba      	ldr	r2, [r7, #24]
 80096dc:	0151      	lsls	r1, r2, #5
 80096de:	69fa      	ldr	r2, [r7, #28]
 80096e0:	440a      	add	r2, r1
 80096e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096ea:	6113      	str	r3, [r2, #16]
 80096ec:	e037      	b.n	800975e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	691a      	ldr	r2, [r3, #16]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	4413      	add	r3, r2
 80096f8:	1e5a      	subs	r2, r3, #1
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009702:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	8afa      	ldrh	r2, [r7, #22]
 800970a:	fb03 f202 	mul.w	r2, r3, r2
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971e:	691a      	ldr	r2, [r3, #16]
 8009720:	8afb      	ldrh	r3, [r7, #22]
 8009722:	04d9      	lsls	r1, r3, #19
 8009724:	4b39      	ldr	r3, [pc, #228]	; (800980c <USB_EPStartXfer+0x53c>)
 8009726:	400b      	ands	r3, r1
 8009728:	69b9      	ldr	r1, [r7, #24]
 800972a:	0148      	lsls	r0, r1, #5
 800972c:	69f9      	ldr	r1, [r7, #28]
 800972e:	4401      	add	r1, r0
 8009730:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009734:	4313      	orrs	r3, r2
 8009736:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009744:	691a      	ldr	r2, [r3, #16]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800974e:	69b9      	ldr	r1, [r7, #24]
 8009750:	0148      	lsls	r0, r1, #5
 8009752:	69f9      	ldr	r1, [r7, #28]
 8009754:	4401      	add	r1, r0
 8009756:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800975a:	4313      	orrs	r3, r2
 800975c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d10d      	bne.n	8009780 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d009      	beq.n	8009780 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	68d9      	ldr	r1, [r3, #12]
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977c:	460a      	mov	r2, r1
 800977e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	791b      	ldrb	r3, [r3, #4]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d128      	bne.n	80097da <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009794:	2b00      	cmp	r3, #0
 8009796:	d110      	bne.n	80097ba <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	e00f      	b.n	80097da <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	0151      	lsls	r1, r2, #5
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	440a      	add	r2, r1
 80097d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	0151      	lsls	r1, r2, #5
 80097ec:	69fa      	ldr	r2, [r7, #28]
 80097ee:	440a      	add	r2, r1
 80097f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3720      	adds	r7, #32
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	fff80000 	.word	0xfff80000
 8009808:	e007ffff 	.word	0xe007ffff
 800980c:	1ff80000 	.word	0x1ff80000

08009810 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d14a      	bne.n	80098c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009846:	f040 8086 	bne.w	8009956 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	7812      	ldrb	r2, [r2, #0]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009868:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800986c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	7812      	ldrb	r2, [r2, #0]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	440a      	add	r2, r1
 8009888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800988c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009890:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3301      	adds	r3, #1
 8009896:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f242 7210 	movw	r2, #10000	; 0x2710
 800989e:	4293      	cmp	r3, r2
 80098a0:	d902      	bls.n	80098a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	75fb      	strb	r3, [r7, #23]
          break;
 80098a6:	e056      	b.n	8009956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098c0:	d0e7      	beq.n	8009892 <USB_EPStopXfer+0x82>
 80098c2:	e048      	b.n	8009956 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098dc:	d13b      	bne.n	8009956 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	7812      	ldrb	r2, [r2, #0]
 80098f2:	0151      	lsls	r1, r2, #5
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	440a      	add	r2, r1
 80098f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009900:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	7812      	ldrb	r2, [r2, #0]
 8009916:	0151      	lsls	r1, r2, #5
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	440a      	add	r2, r1
 800991c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009924:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3301      	adds	r3, #1
 800992a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009932:	4293      	cmp	r3, r2
 8009934:	d902      	bls.n	800993c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	75fb      	strb	r3, [r7, #23]
          break;
 800993a:	e00c      	b.n	8009956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009954:	d0e7      	beq.n	8009926 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
}
 8009958:	4618      	mov	r0, r3
 800995a:	371c      	adds	r7, #28
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009964:	b480      	push	{r7}
 8009966:	b089      	sub	sp, #36	; 0x24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4611      	mov	r1, r2
 8009970:	461a      	mov	r2, r3
 8009972:	460b      	mov	r3, r1
 8009974:	71fb      	strb	r3, [r7, #7]
 8009976:	4613      	mov	r3, r2
 8009978:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009986:	2b00      	cmp	r3, #0
 8009988:	d123      	bne.n	80099d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800998a:	88bb      	ldrh	r3, [r7, #4]
 800998c:	3303      	adds	r3, #3
 800998e:	089b      	lsrs	r3, r3, #2
 8009990:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009992:	2300      	movs	r3, #0
 8009994:	61bb      	str	r3, [r7, #24]
 8009996:	e018      	b.n	80099ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	031a      	lsls	r2, r3, #12
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a4:	461a      	mov	r2, r3
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	3301      	adds	r3, #1
 80099b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	3301      	adds	r3, #1
 80099b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	3301      	adds	r3, #1
 80099bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	3301      	adds	r3, #1
 80099c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	3301      	adds	r3, #1
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d3e2      	bcc.n	8009998 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3724      	adds	r7, #36	; 0x24
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b08b      	sub	sp, #44	; 0x2c
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	4613      	mov	r3, r2
 80099ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	089b      	lsrs	r3, r3, #2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099fe:	88fb      	ldrh	r3, [r7, #6]
 8009a00:	f003 0303 	and.w	r3, r3, #3
 8009a04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009a06:	2300      	movs	r3, #0
 8009a08:	623b      	str	r3, [r7, #32]
 8009a0a:	e014      	b.n	8009a36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	3301      	adds	r3, #1
 8009a22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	3301      	adds	r3, #1
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	3301      	adds	r3, #1
 8009a34:	623b      	str	r3, [r7, #32]
 8009a36:	6a3a      	ldr	r2, [r7, #32]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d3e6      	bcc.n	8009a0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a3e:	8bfb      	ldrh	r3, [r7, #30]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01e      	beq.n	8009a82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f107 0310 	add.w	r3, r7, #16
 8009a54:	6812      	ldr	r2, [r2, #0]
 8009a56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	fa22 f303 	lsr.w	r3, r2, r3
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	701a      	strb	r2, [r3, #0]
      i++;
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	3301      	adds	r3, #1
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a76:	8bfb      	ldrh	r3, [r7, #30]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a7c:	8bfb      	ldrh	r3, [r7, #30]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1ea      	bne.n	8009a58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	372c      	adds	r7, #44	; 0x2c
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d12c      	bne.n	8009b06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	db12      	blt.n	8009ae4 <USB_EPSetStall+0x54>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00f      	beq.n	8009ae4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	0151      	lsls	r1, r2, #5
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	440a      	add	r2, r1
 8009ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ae2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	0151      	lsls	r1, r2, #5
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	440a      	add	r2, r1
 8009afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b02:	6013      	str	r3, [r2, #0]
 8009b04:	e02b      	b.n	8009b5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	db12      	blt.n	8009b3e <USB_EPSetStall+0xae>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00f      	beq.n	8009b3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	0151      	lsls	r1, r2, #5
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	440a      	add	r2, r1
 8009b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	0151      	lsls	r1, r2, #5
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	440a      	add	r2, r1
 8009b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	785b      	ldrb	r3, [r3, #1]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d128      	bne.n	8009bda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ba6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	791b      	ldrb	r3, [r3, #4]
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d003      	beq.n	8009bb8 <USB_EPClearStall+0x4c>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	791b      	ldrb	r3, [r3, #4]
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d138      	bne.n	8009c2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	e027      	b.n	8009c2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	0151      	lsls	r1, r2, #5
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	440a      	add	r2, r1
 8009bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	791b      	ldrb	r3, [r3, #4]
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d003      	beq.n	8009c0a <USB_EPClearStall+0x9e>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	791b      	ldrb	r3, [r3, #4]
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d10f      	bne.n	8009c2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	0151      	lsls	r1, r2, #5
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	440a      	add	r2, r1
 8009c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c6c:	68f9      	ldr	r1, [r7, #12]
 8009c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c72:	4313      	orrs	r3, r2
 8009c74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c9e:	f023 0303 	bic.w	r3, r3, #3
 8009ca2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb2:	f023 0302 	bic.w	r3, r3, #2
 8009cb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf4:	f043 0302 	orr.w	r3, r3, #2
 8009cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d20:	68fb      	ldr	r3, [r7, #12]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b085      	sub	sp, #20
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	0c1b      	lsrs	r3, r3, #16
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	4013      	ands	r3, r2
 8009d84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	b29b      	uxth	r3, r3
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009da6:	78fb      	ldrb	r3, [r7, #3]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b087      	sub	sp, #28
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	f003 030f 	and.w	r3, r3, #15
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8009e02:	01db      	lsls	r3, r3, #7
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e20:	68bb      	ldr	r3, [r7, #8]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	371c      	adds	r7, #28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	f003 0301 	and.w	r3, r3, #1
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
	...

08009e4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e66:	4619      	mov	r1, r3
 8009e68:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <USB_ActivateSetup+0x44>)
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	fffff800 	.word	0xfffff800

08009e94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	333c      	adds	r3, #60	; 0x3c
 8009eaa:	3304      	adds	r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	4a26      	ldr	r2, [pc, #152]	; (8009f4c <USB_EP0_OutStart+0xb8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d90a      	bls.n	8009ece <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ec8:	d101      	bne.n	8009ece <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e037      	b.n	8009f3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009efc:	f043 0318 	orr.w	r3, r3, #24
 8009f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d10f      	bne.n	8009f3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f22:	461a      	mov	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	371c      	adds	r7, #28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	4f54300a 	.word	0x4f54300a

08009f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4a13      	ldr	r2, [pc, #76]	; (8009fb4 <USB_CoreReset+0x64>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d901      	bls.n	8009f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e01b      	b.n	8009fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	daf2      	bge.n	8009f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	f043 0201 	orr.w	r2, r3, #1
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4a09      	ldr	r2, [pc, #36]	; (8009fb4 <USB_CoreReset+0x64>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d901      	bls.n	8009f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e006      	b.n	8009fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d0f0      	beq.n	8009f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	00030d40 	.word	0x00030d40

08009fb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009fc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009fc8:	f002 fcba 	bl	800c940 <USBD_static_malloc>
 8009fcc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d109      	bne.n	8009fe8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	32b0      	adds	r2, #176	; 0xb0
 8009fde:	2100      	movs	r1, #0
 8009fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	e0d4      	b.n	800a192 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009fe8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009fec:	2100      	movs	r1, #0
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f002 fd14 	bl	800ca1c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	32b0      	adds	r2, #176	; 0xb0
 8009ffe:	68f9      	ldr	r1, [r7, #12]
 800a000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	32b0      	adds	r2, #176	; 0xb0
 800a00e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	7c1b      	ldrb	r3, [r3, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d138      	bne.n	800a092 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a020:	4b5e      	ldr	r3, [pc, #376]	; (800a19c <USBD_CDC_Init+0x1e4>)
 800a022:	7819      	ldrb	r1, [r3, #0]
 800a024:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a028:	2202      	movs	r2, #2
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f002 fb65 	bl	800c6fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a030:	4b5a      	ldr	r3, [pc, #360]	; (800a19c <USBD_CDC_Init+0x1e4>)
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 020f 	and.w	r2, r3, #15
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	4613      	mov	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	3324      	adds	r3, #36	; 0x24
 800a046:	2201      	movs	r2, #1
 800a048:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a04a:	4b55      	ldr	r3, [pc, #340]	; (800a1a0 <USBD_CDC_Init+0x1e8>)
 800a04c:	7819      	ldrb	r1, [r3, #0]
 800a04e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a052:	2202      	movs	r2, #2
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f002 fb50 	bl	800c6fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a05a:	4b51      	ldr	r3, [pc, #324]	; (800a1a0 <USBD_CDC_Init+0x1e8>)
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	f003 020f 	and.w	r2, r3, #15
 800a062:	6879      	ldr	r1, [r7, #4]
 800a064:	4613      	mov	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	440b      	add	r3, r1
 800a06e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a072:	2201      	movs	r2, #1
 800a074:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a076:	4b4b      	ldr	r3, [pc, #300]	; (800a1a4 <USBD_CDC_Init+0x1ec>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	f003 020f 	and.w	r2, r3, #15
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	440b      	add	r3, r1
 800a08a:	3326      	adds	r3, #38	; 0x26
 800a08c:	2210      	movs	r2, #16
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	e035      	b.n	800a0fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a092:	4b42      	ldr	r3, [pc, #264]	; (800a19c <USBD_CDC_Init+0x1e4>)
 800a094:	7819      	ldrb	r1, [r3, #0]
 800a096:	2340      	movs	r3, #64	; 0x40
 800a098:	2202      	movs	r2, #2
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f002 fb2d 	bl	800c6fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a0a0:	4b3e      	ldr	r3, [pc, #248]	; (800a19c <USBD_CDC_Init+0x1e4>)
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	f003 020f 	and.w	r2, r3, #15
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	3324      	adds	r3, #36	; 0x24
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0ba:	4b39      	ldr	r3, [pc, #228]	; (800a1a0 <USBD_CDC_Init+0x1e8>)
 800a0bc:	7819      	ldrb	r1, [r3, #0]
 800a0be:	2340      	movs	r3, #64	; 0x40
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f002 fb19 	bl	800c6fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a0c8:	4b35      	ldr	r3, [pc, #212]	; (800a1a0 <USBD_CDC_Init+0x1e8>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	f003 020f 	and.w	r2, r3, #15
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a0e4:	4b2f      	ldr	r3, [pc, #188]	; (800a1a4 <USBD_CDC_Init+0x1ec>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	f003 020f 	and.w	r2, r3, #15
 800a0ec:	6879      	ldr	r1, [r7, #4]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	440b      	add	r3, r1
 800a0f8:	3326      	adds	r3, #38	; 0x26
 800a0fa:	2210      	movs	r2, #16
 800a0fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a0fe:	4b29      	ldr	r3, [pc, #164]	; (800a1a4 <USBD_CDC_Init+0x1ec>)
 800a100:	7819      	ldrb	r1, [r3, #0]
 800a102:	2308      	movs	r3, #8
 800a104:	2203      	movs	r2, #3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f002 faf7 	bl	800c6fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a10c:	4b25      	ldr	r3, [pc, #148]	; (800a1a4 <USBD_CDC_Init+0x1ec>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	f003 020f 	and.w	r2, r3, #15
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	440b      	add	r3, r1
 800a120:	3324      	adds	r3, #36	; 0x24
 800a122:	2201      	movs	r2, #1
 800a124:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	33b0      	adds	r3, #176	; 0xb0
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a15c:	2302      	movs	r3, #2
 800a15e:	e018      	b.n	800a192 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	7c1b      	ldrb	r3, [r3, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10a      	bne.n	800a17e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a168:	4b0d      	ldr	r3, [pc, #52]	; (800a1a0 <USBD_CDC_Init+0x1e8>)
 800a16a:	7819      	ldrb	r1, [r3, #0]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a172:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f002 fbae 	bl	800c8d8 <USBD_LL_PrepareReceive>
 800a17c:	e008      	b.n	800a190 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a17e:	4b08      	ldr	r3, [pc, #32]	; (800a1a0 <USBD_CDC_Init+0x1e8>)
 800a180:	7819      	ldrb	r1, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a188:	2340      	movs	r3, #64	; 0x40
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f002 fba4 	bl	800c8d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	240032b3 	.word	0x240032b3
 800a1a0:	240032b4 	.word	0x240032b4
 800a1a4:	240032b5 	.word	0x240032b5

0800a1a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a1b4:	4b3a      	ldr	r3, [pc, #232]	; (800a2a0 <USBD_CDC_DeInit+0xf8>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f002 fac3 	bl	800c746 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a1c0:	4b37      	ldr	r3, [pc, #220]	; (800a2a0 <USBD_CDC_DeInit+0xf8>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	f003 020f 	and.w	r2, r3, #15
 800a1c8:	6879      	ldr	r1, [r7, #4]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	440b      	add	r3, r1
 800a1d4:	3324      	adds	r3, #36	; 0x24
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a1da:	4b32      	ldr	r3, [pc, #200]	; (800a2a4 <USBD_CDC_DeInit+0xfc>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f002 fab0 	bl	800c746 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a1e6:	4b2f      	ldr	r3, [pc, #188]	; (800a2a4 <USBD_CDC_DeInit+0xfc>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	f003 020f 	and.w	r2, r3, #15
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1fe:	2200      	movs	r2, #0
 800a200:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a202:	4b29      	ldr	r3, [pc, #164]	; (800a2a8 <USBD_CDC_DeInit+0x100>)
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f002 fa9c 	bl	800c746 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a20e:	4b26      	ldr	r3, [pc, #152]	; (800a2a8 <USBD_CDC_DeInit+0x100>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	f003 020f 	and.w	r2, r3, #15
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	4613      	mov	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	440b      	add	r3, r1
 800a222:	3324      	adds	r3, #36	; 0x24
 800a224:	2200      	movs	r2, #0
 800a226:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a228:	4b1f      	ldr	r3, [pc, #124]	; (800a2a8 <USBD_CDC_DeInit+0x100>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f003 020f 	and.w	r2, r3, #15
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	440b      	add	r3, r1
 800a23c:	3326      	adds	r3, #38	; 0x26
 800a23e:	2200      	movs	r2, #0
 800a240:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	32b0      	adds	r2, #176	; 0xb0
 800a24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01f      	beq.n	800a294 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	33b0      	adds	r3, #176	; 0xb0
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	32b0      	adds	r2, #176	; 0xb0
 800a272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a276:	4618      	mov	r0, r3
 800a278:	f002 fb70 	bl	800c95c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	32b0      	adds	r2, #176	; 0xb0
 800a286:	2100      	movs	r1, #0
 800a288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	240032b3 	.word	0x240032b3
 800a2a4:	240032b4 	.word	0x240032b4
 800a2a8:	240032b5 	.word	0x240032b5

0800a2ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	32b0      	adds	r2, #176	; 0xb0
 800a2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e0bf      	b.n	800a45c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d050      	beq.n	800a38a <USBD_CDC_Setup+0xde>
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	f040 80af 	bne.w	800a44c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	88db      	ldrh	r3, [r3, #6]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d03a      	beq.n	800a36c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b25b      	sxtb	r3, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	da1b      	bge.n	800a338 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	33b0      	adds	r3, #176	; 0xb0
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a316:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	88d2      	ldrh	r2, [r2, #6]
 800a31c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	88db      	ldrh	r3, [r3, #6]
 800a322:	2b07      	cmp	r3, #7
 800a324:	bf28      	it	cs
 800a326:	2307      	movcs	r3, #7
 800a328:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	89fa      	ldrh	r2, [r7, #14]
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 fd89 	bl	800be48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a336:	e090      	b.n	800a45a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	785a      	ldrb	r2, [r3, #1]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	88db      	ldrh	r3, [r3, #6]
 800a346:	2b3f      	cmp	r3, #63	; 0x3f
 800a348:	d803      	bhi.n	800a352 <USBD_CDC_Setup+0xa6>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	88db      	ldrh	r3, [r3, #6]
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	e000      	b.n	800a354 <USBD_CDC_Setup+0xa8>
 800a352:	2240      	movs	r2, #64	; 0x40
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a35a:	6939      	ldr	r1, [r7, #16]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a362:	461a      	mov	r2, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f001 fd9b 	bl	800bea0 <USBD_CtlPrepareRx>
      break;
 800a36a:	e076      	b.n	800a45a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	33b0      	adds	r3, #176	; 0xb0
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	7850      	ldrb	r0, [r2, #1]
 800a382:	2200      	movs	r2, #0
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	4798      	blx	r3
      break;
 800a388:	e067      	b.n	800a45a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	2b0b      	cmp	r3, #11
 800a390:	d851      	bhi.n	800a436 <USBD_CDC_Setup+0x18a>
 800a392:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <USBD_CDC_Setup+0xec>)
 800a394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a398:	0800a3c9 	.word	0x0800a3c9
 800a39c:	0800a445 	.word	0x0800a445
 800a3a0:	0800a437 	.word	0x0800a437
 800a3a4:	0800a437 	.word	0x0800a437
 800a3a8:	0800a437 	.word	0x0800a437
 800a3ac:	0800a437 	.word	0x0800a437
 800a3b0:	0800a437 	.word	0x0800a437
 800a3b4:	0800a437 	.word	0x0800a437
 800a3b8:	0800a437 	.word	0x0800a437
 800a3bc:	0800a437 	.word	0x0800a437
 800a3c0:	0800a3f3 	.word	0x0800a3f3
 800a3c4:	0800a41d 	.word	0x0800a41d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d107      	bne.n	800a3e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a3d4:	f107 030a 	add.w	r3, r7, #10
 800a3d8:	2202      	movs	r2, #2
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 fd33 	bl	800be48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3e2:	e032      	b.n	800a44a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a3e4:	6839      	ldr	r1, [r7, #0]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f001 fcbd 	bl	800bd66 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	75fb      	strb	r3, [r7, #23]
          break;
 800a3f0:	e02b      	b.n	800a44a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d107      	bne.n	800a40e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3fe:	f107 030d 	add.w	r3, r7, #13
 800a402:	2201      	movs	r2, #1
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f001 fd1e 	bl	800be48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a40c:	e01d      	b.n	800a44a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 fca8 	bl	800bd66 <USBD_CtlError>
            ret = USBD_FAIL;
 800a416:	2303      	movs	r3, #3
 800a418:	75fb      	strb	r3, [r7, #23]
          break;
 800a41a:	e016      	b.n	800a44a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b03      	cmp	r3, #3
 800a426:	d00f      	beq.n	800a448 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a428:	6839      	ldr	r1, [r7, #0]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 fc9b 	bl	800bd66 <USBD_CtlError>
            ret = USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a434:	e008      	b.n	800a448 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f001 fc94 	bl	800bd66 <USBD_CtlError>
          ret = USBD_FAIL;
 800a43e:	2303      	movs	r3, #3
 800a440:	75fb      	strb	r3, [r7, #23]
          break;
 800a442:	e002      	b.n	800a44a <USBD_CDC_Setup+0x19e>
          break;
 800a444:	bf00      	nop
 800a446:	e008      	b.n	800a45a <USBD_CDC_Setup+0x1ae>
          break;
 800a448:	bf00      	nop
      }
      break;
 800a44a:	e006      	b.n	800a45a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f001 fc89 	bl	800bd66 <USBD_CtlError>
      ret = USBD_FAIL;
 800a454:	2303      	movs	r3, #3
 800a456:	75fb      	strb	r3, [r7, #23]
      break;
 800a458:	bf00      	nop
  }

  return (uint8_t)ret;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a476:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	32b0      	adds	r2, #176	; 0xb0
 800a482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a48a:	2303      	movs	r3, #3
 800a48c:	e065      	b.n	800a55a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	32b0      	adds	r2, #176	; 0xb0
 800a498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	f003 020f 	and.w	r2, r3, #15
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	3318      	adds	r3, #24
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d02f      	beq.n	800a518 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	f003 020f 	and.w	r2, r3, #15
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	440b      	add	r3, r1
 800a4ca:	3318      	adds	r3, #24
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	f003 010f 	and.w	r1, r3, #15
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	00db      	lsls	r3, r3, #3
 800a4da:	440b      	add	r3, r1
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4403      	add	r3, r0
 800a4e0:	3344      	adds	r3, #68	; 0x44
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4e8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d112      	bne.n	800a518 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a4f2:	78fb      	ldrb	r3, [r7, #3]
 800a4f4:	f003 020f 	and.w	r2, r3, #15
 800a4f8:	6879      	ldr	r1, [r7, #4]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	440b      	add	r3, r1
 800a504:	3318      	adds	r3, #24
 800a506:	2200      	movs	r2, #0
 800a508:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a50a:	78f9      	ldrb	r1, [r7, #3]
 800a50c:	2300      	movs	r3, #0
 800a50e:	2200      	movs	r2, #0
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f002 f9c0 	bl	800c896 <USBD_LL_Transmit>
 800a516:	e01f      	b.n	800a558 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	33b0      	adds	r3, #176	; 0xb0
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d010      	beq.n	800a558 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	33b0      	adds	r3, #176	; 0xb0
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	460b      	mov	r3, r1
 800a56c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	32b0      	adds	r2, #176	; 0xb0
 800a578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	32b0      	adds	r2, #176	; 0xb0
 800a588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a590:	2303      	movs	r3, #3
 800a592:	e01a      	b.n	800a5ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f002 f9be 	bl	800c91a <USBD_LL_GetRxDataSize>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	33b0      	adds	r3, #176	; 0xb0
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	32b0      	adds	r2, #176	; 0xb0
 800a5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	e025      	b.n	800a640 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	33b0      	adds	r3, #176	; 0xb0
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01a      	beq.n	800a63e <USBD_CDC_EP0_RxReady+0x6c>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a60e:	2bff      	cmp	r3, #255	; 0xff
 800a610:	d015      	beq.n	800a63e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	33b0      	adds	r3, #176	; 0xb0
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a62a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a632:	b292      	uxth	r2, r2
 800a634:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	22ff      	movs	r2, #255	; 0xff
 800a63a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a650:	2182      	movs	r1, #130	; 0x82
 800a652:	4818      	ldr	r0, [pc, #96]	; (800a6b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a654:	f000 fd4f 	bl	800b0f6 <USBD_GetEpDesc>
 800a658:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a65a:	2101      	movs	r1, #1
 800a65c:	4815      	ldr	r0, [pc, #84]	; (800a6b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a65e:	f000 fd4a 	bl	800b0f6 <USBD_GetEpDesc>
 800a662:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a664:	2181      	movs	r1, #129	; 0x81
 800a666:	4813      	ldr	r0, [pc, #76]	; (800a6b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a668:	f000 fd45 	bl	800b0f6 <USBD_GetEpDesc>
 800a66c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2210      	movs	r2, #16
 800a678:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d006      	beq.n	800a68e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2200      	movs	r2, #0
 800a684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a688:	711a      	strb	r2, [r3, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d006      	beq.n	800a6a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a69c:	711a      	strb	r2, [r3, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2243      	movs	r2, #67	; 0x43
 800a6a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a6a8:	4b02      	ldr	r3, [pc, #8]	; (800a6b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	24003270 	.word	0x24003270

0800a6b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6c0:	2182      	movs	r1, #130	; 0x82
 800a6c2:	4818      	ldr	r0, [pc, #96]	; (800a724 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6c4:	f000 fd17 	bl	800b0f6 <USBD_GetEpDesc>
 800a6c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	4815      	ldr	r0, [pc, #84]	; (800a724 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6ce:	f000 fd12 	bl	800b0f6 <USBD_GetEpDesc>
 800a6d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a6d4:	2181      	movs	r1, #129	; 0x81
 800a6d6:	4813      	ldr	r0, [pc, #76]	; (800a724 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6d8:	f000 fd0d 	bl	800b0f6 <USBD_GetEpDesc>
 800a6dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	2210      	movs	r2, #16
 800a6e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d006      	beq.n	800a6fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	711a      	strb	r2, [r3, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f042 0202 	orr.w	r2, r2, #2
 800a6fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d006      	beq.n	800a712 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	711a      	strb	r2, [r3, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f042 0202 	orr.w	r2, r2, #2
 800a710:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2243      	movs	r2, #67	; 0x43
 800a716:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a718:	4b02      	ldr	r3, [pc, #8]	; (800a724 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	24003270 	.word	0x24003270

0800a728 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a730:	2182      	movs	r1, #130	; 0x82
 800a732:	4818      	ldr	r0, [pc, #96]	; (800a794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a734:	f000 fcdf 	bl	800b0f6 <USBD_GetEpDesc>
 800a738:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a73a:	2101      	movs	r1, #1
 800a73c:	4815      	ldr	r0, [pc, #84]	; (800a794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a73e:	f000 fcda 	bl	800b0f6 <USBD_GetEpDesc>
 800a742:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a744:	2181      	movs	r1, #129	; 0x81
 800a746:	4813      	ldr	r0, [pc, #76]	; (800a794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a748:	f000 fcd5 	bl	800b0f6 <USBD_GetEpDesc>
 800a74c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	2210      	movs	r2, #16
 800a758:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d006      	beq.n	800a76e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	2200      	movs	r2, #0
 800a764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a768:	711a      	strb	r2, [r3, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d006      	beq.n	800a782 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a77c:	711a      	strb	r2, [r3, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2243      	movs	r2, #67	; 0x43
 800a786:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a788:	4b02      	ldr	r3, [pc, #8]	; (800a794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3718      	adds	r7, #24
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	24003270 	.word	0x24003270

0800a798 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	220a      	movs	r2, #10
 800a7a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a7a6:	4b03      	ldr	r3, [pc, #12]	; (800a7b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	2400322c 	.word	0x2400322c

0800a7b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e009      	b.n	800a7e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	33b0      	adds	r3, #176	; 0xb0
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	32b0      	adds	r2, #176	; 0xb0
 800a802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a806:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a80e:	2303      	movs	r3, #3
 800a810:	e008      	b.n	800a824 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	371c      	adds	r7, #28
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	32b0      	adds	r2, #176	; 0xb0
 800a844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a848:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a850:	2303      	movs	r3, #3
 800a852:	e004      	b.n	800a85e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
	...

0800a86c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	32b0      	adds	r2, #176	; 0xb0
 800a87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a882:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a884:	2301      	movs	r3, #1
 800a886:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a88e:	2303      	movs	r3, #3
 800a890:	e025      	b.n	800a8de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d11f      	bne.n	800a8dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a8a4:	4b10      	ldr	r3, [pc, #64]	; (800a8e8 <USBD_CDC_TransmitPacket+0x7c>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	f003 020f 	and.w	r2, r3, #15
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4403      	add	r3, r0
 800a8be:	3318      	adds	r3, #24
 800a8c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a8c2:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <USBD_CDC_TransmitPacket+0x7c>)
 800a8c4:	7819      	ldrb	r1, [r3, #0]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f001 ffdf 	bl	800c896 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	240032b3 	.word	0x240032b3

0800a8ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	32b0      	adds	r2, #176	; 0xb0
 800a8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a902:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32b0      	adds	r2, #176	; 0xb0
 800a90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a916:	2303      	movs	r3, #3
 800a918:	e018      	b.n	800a94c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	7c1b      	ldrb	r3, [r3, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10a      	bne.n	800a938 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a922:	4b0c      	ldr	r3, [pc, #48]	; (800a954 <USBD_CDC_ReceivePacket+0x68>)
 800a924:	7819      	ldrb	r1, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a92c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f001 ffd1 	bl	800c8d8 <USBD_LL_PrepareReceive>
 800a936:	e008      	b.n	800a94a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a938:	4b06      	ldr	r3, [pc, #24]	; (800a954 <USBD_CDC_ReceivePacket+0x68>)
 800a93a:	7819      	ldrb	r1, [r3, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a942:	2340      	movs	r3, #64	; 0x40
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f001 ffc7 	bl	800c8d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	240032b4 	.word	0x240032b4

0800a958 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	4613      	mov	r3, r2
 800a964:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e01f      	b.n	800a9b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d003      	beq.n	800a996 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	79fa      	ldrb	r2, [r7, #7]
 800a9a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f001 fe3d 	bl	800c624 <USBD_LL_Init>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e025      	b.n	800aa1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	32ae      	adds	r2, #174	; 0xae
 800a9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00f      	beq.n	800aa0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	32ae      	adds	r2, #174	; 0xae
 800a9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	f107 020e 	add.w	r2, r7, #14
 800aa00:	4610      	mov	r0, r2
 800aa02:	4798      	blx	r3
 800aa04:	4602      	mov	r2, r0
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 fe49 	bl	800c6c4 <USBD_LL_Start>
 800aa32:	4603      	mov	r3, r0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d009      	beq.n	800aa80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	78fa      	ldrb	r2, [r7, #3]
 800aa76:	4611      	mov	r1, r2
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	4798      	blx	r3
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	78fa      	ldrb	r2, [r7, #3]
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	4798      	blx	r3
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aab0:	2303      	movs	r3, #3
 800aab2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f001 f90e 	bl	800bcf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aae4:	461a      	mov	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aaf2:	f003 031f 	and.w	r3, r3, #31
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d01a      	beq.n	800ab30 <USBD_LL_SetupStage+0x72>
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d822      	bhi.n	800ab44 <USBD_LL_SetupStage+0x86>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <USBD_LL_SetupStage+0x4a>
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d00a      	beq.n	800ab1c <USBD_LL_SetupStage+0x5e>
 800ab06:	e01d      	b.n	800ab44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fb65 	bl	800b1e0 <USBD_StdDevReq>
 800ab16:	4603      	mov	r3, r0
 800ab18:	73fb      	strb	r3, [r7, #15]
      break;
 800ab1a:	e020      	b.n	800ab5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fbcd 	bl	800b2c4 <USBD_StdItfReq>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab2e:	e016      	b.n	800ab5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fc2f 	bl	800b39c <USBD_StdEPReq>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73fb      	strb	r3, [r7, #15]
      break;
 800ab42:	e00c      	b.n	800ab5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 fe16 	bl	800c784 <USBD_LL_StallEP>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab5c:	bf00      	nop
  }

  return ret;
 800ab5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	460b      	mov	r3, r1
 800ab72:	607a      	str	r2, [r7, #4]
 800ab74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ab7a:	7afb      	ldrb	r3, [r7, #11]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d16e      	bne.n	800ac5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	f040 8098 	bne.w	800acc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d913      	bls.n	800abc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	1ad2      	subs	r2, r2, r3
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	4293      	cmp	r3, r2
 800abb8:	bf28      	it	cs
 800abba:	4613      	movcs	r3, r2
 800abbc:	461a      	mov	r2, r3
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f001 f98a 	bl	800beda <USBD_CtlContinueRx>
 800abc6:	e07d      	b.n	800acc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abce:	f003 031f 	and.w	r3, r3, #31
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d014      	beq.n	800ac00 <USBD_LL_DataOutStage+0x98>
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d81d      	bhi.n	800ac16 <USBD_LL_DataOutStage+0xae>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <USBD_LL_DataOutStage+0x7c>
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d003      	beq.n	800abea <USBD_LL_DataOutStage+0x82>
 800abe2:	e018      	b.n	800ac16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800abe4:	2300      	movs	r3, #0
 800abe6:	75bb      	strb	r3, [r7, #22]
            break;
 800abe8:	e018      	b.n	800ac1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	4619      	mov	r1, r3
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 fa64 	bl	800b0c2 <USBD_CoreFindIF>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75bb      	strb	r3, [r7, #22]
            break;
 800abfe:	e00d      	b.n	800ac1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	4619      	mov	r1, r3
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 fa66 	bl	800b0dc <USBD_CoreFindEP>
 800ac10:	4603      	mov	r3, r0
 800ac12:	75bb      	strb	r3, [r7, #22]
            break;
 800ac14:	e002      	b.n	800ac1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ac16:	2300      	movs	r3, #0
 800ac18:	75bb      	strb	r3, [r7, #22]
            break;
 800ac1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ac1c:	7dbb      	ldrb	r3, [r7, #22]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d119      	bne.n	800ac56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d113      	bne.n	800ac56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ac2e:	7dba      	ldrb	r2, [r7, #22]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	32ae      	adds	r2, #174	; 0xae
 800ac34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00b      	beq.n	800ac56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ac3e:	7dba      	ldrb	r2, [r7, #22]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ac46:	7dba      	ldrb	r2, [r7, #22]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	32ae      	adds	r2, #174	; 0xae
 800ac4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f001 f950 	bl	800befc <USBD_CtlSendStatus>
 800ac5c:	e032      	b.n	800acc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ac5e:	7afb      	ldrb	r3, [r7, #11]
 800ac60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	4619      	mov	r1, r3
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 fa37 	bl	800b0dc <USBD_CoreFindEP>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac72:	7dbb      	ldrb	r3, [r7, #22]
 800ac74:	2bff      	cmp	r3, #255	; 0xff
 800ac76:	d025      	beq.n	800acc4 <USBD_LL_DataOutStage+0x15c>
 800ac78:	7dbb      	ldrb	r3, [r7, #22]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d122      	bne.n	800acc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	d117      	bne.n	800acba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ac8a:	7dba      	ldrb	r2, [r7, #22]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	32ae      	adds	r2, #174	; 0xae
 800ac90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00f      	beq.n	800acba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ac9a:	7dba      	ldrb	r2, [r7, #22]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aca2:	7dba      	ldrb	r2, [r7, #22]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	32ae      	adds	r2, #174	; 0xae
 800aca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	7afa      	ldrb	r2, [r7, #11]
 800acb0:	4611      	mov	r1, r2
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	4798      	blx	r3
 800acb6:	4603      	mov	r3, r0
 800acb8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800acba:	7dfb      	ldrb	r3, [r7, #23]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
 800acc2:	e000      	b.n	800acc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b086      	sub	sp, #24
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	460b      	mov	r3, r1
 800acd8:	607a      	str	r2, [r7, #4]
 800acda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800acdc:	7afb      	ldrb	r3, [r7, #11]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d16f      	bne.n	800adc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3314      	adds	r3, #20
 800ace6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d15a      	bne.n	800ada8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	689a      	ldr	r2, [r3, #8]
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d914      	bls.n	800ad28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	689a      	ldr	r2, [r3, #8]
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	1ad2      	subs	r2, r2, r3
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	461a      	mov	r2, r3
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f001 f8b2 	bl	800be7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2100      	movs	r1, #0
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f001 fdd9 	bl	800c8d8 <USBD_LL_PrepareReceive>
 800ad26:	e03f      	b.n	800ada8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	68da      	ldr	r2, [r3, #12]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d11c      	bne.n	800ad6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d316      	bcc.n	800ad6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d20f      	bcs.n	800ad6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2100      	movs	r1, #0
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f001 f893 	bl	800be7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad60:	2300      	movs	r3, #0
 800ad62:	2200      	movs	r2, #0
 800ad64:	2100      	movs	r1, #0
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f001 fdb6 	bl	800c8d8 <USBD_LL_PrepareReceive>
 800ad6c:	e01c      	b.n	800ada8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d10f      	bne.n	800ad9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d009      	beq.n	800ad9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad9a:	2180      	movs	r1, #128	; 0x80
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f001 fcf1 	bl	800c784 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f001 f8bd 	bl	800bf22 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d03a      	beq.n	800ae28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7ff fe42 	bl	800aa3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800adc0:	e032      	b.n	800ae28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800adc2:	7afb      	ldrb	r3, [r7, #11]
 800adc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	4619      	mov	r1, r3
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f000 f985 	bl	800b0dc <USBD_CoreFindEP>
 800add2:	4603      	mov	r3, r0
 800add4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800add6:	7dfb      	ldrb	r3, [r7, #23]
 800add8:	2bff      	cmp	r3, #255	; 0xff
 800adda:	d025      	beq.n	800ae28 <USBD_LL_DataInStage+0x15a>
 800addc:	7dfb      	ldrb	r3, [r7, #23]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d122      	bne.n	800ae28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2b03      	cmp	r3, #3
 800adec:	d11c      	bne.n	800ae28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800adee:	7dfa      	ldrb	r2, [r7, #23]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	32ae      	adds	r2, #174	; 0xae
 800adf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d014      	beq.n	800ae28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800adfe:	7dfa      	ldrb	r2, [r7, #23]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ae06:	7dfa      	ldrb	r2, [r7, #23]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	32ae      	adds	r2, #174	; 0xae
 800ae0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	7afa      	ldrb	r2, [r7, #11]
 800ae14:	4611      	mov	r1, r2
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	4798      	blx	r3
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ae1e:	7dbb      	ldrb	r3, [r7, #22]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ae24:	7dbb      	ldrb	r3, [r7, #22]
 800ae26:	e000      	b.n	800ae2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d014      	beq.n	800ae98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00e      	beq.n	800ae98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	6852      	ldr	r2, [r2, #4]
 800ae86:	b2d2      	uxtb	r2, r2
 800ae88:	4611      	mov	r1, r2
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ae94:	2303      	movs	r3, #3
 800ae96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae98:	2340      	movs	r3, #64	; 0x40
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f001 fc2b 	bl	800c6fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2240      	movs	r2, #64	; 0x40
 800aeb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aeb4:	2340      	movs	r3, #64	; 0x40
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2180      	movs	r1, #128	; 0x80
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 fc1d 	bl	800c6fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2240      	movs	r2, #64	; 0x40
 800aeca:	621a      	str	r2, [r3, #32]

  return ret;
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	460b      	mov	r3, r1
 800aee0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	78fa      	ldrb	r2, [r7, #3]
 800aee6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aef6:	b480      	push	{r7}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b04      	cmp	r3, #4
 800af08:	d006      	beq.n	800af18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af10:	b2da      	uxtb	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2204      	movs	r2, #4
 800af1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af2e:	b480      	push	{r7}
 800af30:	b083      	sub	sp, #12
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d106      	bne.n	800af50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b082      	sub	sp, #8
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d110      	bne.n	800af94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00b      	beq.n	800af94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af82:	69db      	ldr	r3, [r3, #28]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d005      	beq.n	800af94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af8e:	69db      	ldr	r3, [r3, #28]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	32ae      	adds	r2, #174	; 0xae
 800afb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d101      	bne.n	800afc0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800afbc:	2303      	movs	r3, #3
 800afbe:	e01c      	b.n	800affa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d115      	bne.n	800aff8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	32ae      	adds	r2, #174	; 0xae
 800afd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afda:	6a1b      	ldr	r3, [r3, #32]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00b      	beq.n	800aff8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	32ae      	adds	r2, #174	; 0xae
 800afea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afee:	6a1b      	ldr	r3, [r3, #32]
 800aff0:	78fa      	ldrb	r2, [r7, #3]
 800aff2:	4611      	mov	r1, r2
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	460b      	mov	r3, r1
 800b00c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	32ae      	adds	r2, #174	; 0xae
 800b018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b020:	2303      	movs	r3, #3
 800b022:	e01c      	b.n	800b05e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d115      	bne.n	800b05c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	32ae      	adds	r2, #174	; 0xae
 800b03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00b      	beq.n	800b05c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	32ae      	adds	r2, #174	; 0xae
 800b04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b054:	78fa      	ldrb	r2, [r7, #3]
 800b056:	4611      	mov	r1, r2
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b066:	b480      	push	{r7}
 800b068:	b083      	sub	sp, #12
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00e      	beq.n	800b0b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	6852      	ldr	r2, [r2, #4]
 800b0a6:	b2d2      	uxtb	r2, r2
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	4798      	blx	r3
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b083      	sub	sp, #12
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b086      	sub	sp, #24
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b10a:	2300      	movs	r3, #0
 800b10c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	885b      	ldrh	r3, [r3, #2]
 800b112:	b29a      	uxth	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	b29b      	uxth	r3, r3
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d920      	bls.n	800b160 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	b29b      	uxth	r3, r3
 800b124:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b126:	e013      	b.n	800b150 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b128:	f107 030a 	add.w	r3, r7, #10
 800b12c:	4619      	mov	r1, r3
 800b12e:	6978      	ldr	r0, [r7, #20]
 800b130:	f000 f81b 	bl	800b16a <USBD_GetNextDesc>
 800b134:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	785b      	ldrb	r3, [r3, #1]
 800b13a:	2b05      	cmp	r3, #5
 800b13c:	d108      	bne.n	800b150 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	789b      	ldrb	r3, [r3, #2]
 800b146:	78fa      	ldrb	r2, [r7, #3]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d008      	beq.n	800b15e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	885b      	ldrh	r3, [r3, #2]
 800b154:	b29a      	uxth	r2, r3
 800b156:	897b      	ldrh	r3, [r7, #10]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d8e5      	bhi.n	800b128 <USBD_GetEpDesc+0x32>
 800b15c:	e000      	b.n	800b160 <USBD_GetEpDesc+0x6a>
          break;
 800b15e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b160:	693b      	ldr	r3, [r7, #16]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b085      	sub	sp, #20
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	881a      	ldrh	r2, [r3, #0]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	b29b      	uxth	r3, r3
 800b182:	4413      	add	r3, r2
 800b184:	b29a      	uxth	r2, r3
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4413      	add	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b196:	68fb      	ldr	r3, [r7, #12]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3714      	adds	r7, #20
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b1c2:	8a3b      	ldrh	r3, [r7, #16]
 800b1c4:	021b      	lsls	r3, r3, #8
 800b1c6:	b21a      	sxth	r2, r3
 800b1c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	b21b      	sxth	r3, r3
 800b1d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b1d2:	89fb      	ldrh	r3, [r7, #14]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	371c      	adds	r7, #28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1f6:	2b40      	cmp	r3, #64	; 0x40
 800b1f8:	d005      	beq.n	800b206 <USBD_StdDevReq+0x26>
 800b1fa:	2b40      	cmp	r3, #64	; 0x40
 800b1fc:	d857      	bhi.n	800b2ae <USBD_StdDevReq+0xce>
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00f      	beq.n	800b222 <USBD_StdDevReq+0x42>
 800b202:	2b20      	cmp	r3, #32
 800b204:	d153      	bne.n	800b2ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	32ae      	adds	r2, #174	; 0xae
 800b210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	4798      	blx	r3
 800b21c:	4603      	mov	r3, r0
 800b21e:	73fb      	strb	r3, [r7, #15]
      break;
 800b220:	e04a      	b.n	800b2b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	785b      	ldrb	r3, [r3, #1]
 800b226:	2b09      	cmp	r3, #9
 800b228:	d83b      	bhi.n	800b2a2 <USBD_StdDevReq+0xc2>
 800b22a:	a201      	add	r2, pc, #4	; (adr r2, 800b230 <USBD_StdDevReq+0x50>)
 800b22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b230:	0800b285 	.word	0x0800b285
 800b234:	0800b299 	.word	0x0800b299
 800b238:	0800b2a3 	.word	0x0800b2a3
 800b23c:	0800b28f 	.word	0x0800b28f
 800b240:	0800b2a3 	.word	0x0800b2a3
 800b244:	0800b263 	.word	0x0800b263
 800b248:	0800b259 	.word	0x0800b259
 800b24c:	0800b2a3 	.word	0x0800b2a3
 800b250:	0800b27b 	.word	0x0800b27b
 800b254:	0800b26d 	.word	0x0800b26d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa3c 	bl	800b6d8 <USBD_GetDescriptor>
          break;
 800b260:	e024      	b.n	800b2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fba1 	bl	800b9ac <USBD_SetAddress>
          break;
 800b26a:	e01f      	b.n	800b2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fbe0 	bl	800ba34 <USBD_SetConfig>
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]
          break;
 800b278:	e018      	b.n	800b2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b27a:	6839      	ldr	r1, [r7, #0]
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fc83 	bl	800bb88 <USBD_GetConfig>
          break;
 800b282:	e013      	b.n	800b2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fcb4 	bl	800bbf4 <USBD_GetStatus>
          break;
 800b28c:	e00e      	b.n	800b2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fce3 	bl	800bc5c <USBD_SetFeature>
          break;
 800b296:	e009      	b.n	800b2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fd07 	bl	800bcae <USBD_ClrFeature>
          break;
 800b2a0:	e004      	b.n	800b2ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fd5e 	bl	800bd66 <USBD_CtlError>
          break;
 800b2aa:	bf00      	nop
      }
      break;
 800b2ac:	e004      	b.n	800b2b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fd58 	bl	800bd66 <USBD_CtlError>
      break;
 800b2b6:	bf00      	nop
  }

  return ret;
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop

0800b2c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2da:	2b40      	cmp	r3, #64	; 0x40
 800b2dc:	d005      	beq.n	800b2ea <USBD_StdItfReq+0x26>
 800b2de:	2b40      	cmp	r3, #64	; 0x40
 800b2e0:	d852      	bhi.n	800b388 <USBD_StdItfReq+0xc4>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <USBD_StdItfReq+0x26>
 800b2e6:	2b20      	cmp	r3, #32
 800b2e8:	d14e      	bne.n	800b388 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d840      	bhi.n	800b37a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	889b      	ldrh	r3, [r3, #4]
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d836      	bhi.n	800b370 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	889b      	ldrh	r3, [r3, #4]
 800b306:	b2db      	uxtb	r3, r3
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff fed9 	bl	800b0c2 <USBD_CoreFindIF>
 800b310:	4603      	mov	r3, r0
 800b312:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	2bff      	cmp	r3, #255	; 0xff
 800b318:	d01d      	beq.n	800b356 <USBD_StdItfReq+0x92>
 800b31a:	7bbb      	ldrb	r3, [r7, #14]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d11a      	bne.n	800b356 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b320:	7bba      	ldrb	r2, [r7, #14]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	32ae      	adds	r2, #174	; 0xae
 800b326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00f      	beq.n	800b350 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b330:	7bba      	ldrb	r2, [r7, #14]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b338:	7bba      	ldrb	r2, [r7, #14]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	32ae      	adds	r2, #174	; 0xae
 800b33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	4798      	blx	r3
 800b34a:	4603      	mov	r3, r0
 800b34c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b34e:	e004      	b.n	800b35a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b350:	2303      	movs	r3, #3
 800b352:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b354:	e001      	b.n	800b35a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b356:	2303      	movs	r3, #3
 800b358:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	88db      	ldrh	r3, [r3, #6]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d110      	bne.n	800b384 <USBD_StdItfReq+0xc0>
 800b362:	7bfb      	ldrb	r3, [r7, #15]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10d      	bne.n	800b384 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fdc7 	bl	800befc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b36e:	e009      	b.n	800b384 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fcf7 	bl	800bd66 <USBD_CtlError>
          break;
 800b378:	e004      	b.n	800b384 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fcf2 	bl	800bd66 <USBD_CtlError>
          break;
 800b382:	e000      	b.n	800b386 <USBD_StdItfReq+0xc2>
          break;
 800b384:	bf00      	nop
      }
      break;
 800b386:	e004      	b.n	800b392 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fceb 	bl	800bd66 <USBD_CtlError>
      break;
 800b390:	bf00      	nop
  }

  return ret;
 800b392:	7bfb      	ldrb	r3, [r7, #15]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	889b      	ldrh	r3, [r3, #4]
 800b3ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3b8:	2b40      	cmp	r3, #64	; 0x40
 800b3ba:	d007      	beq.n	800b3cc <USBD_StdEPReq+0x30>
 800b3bc:	2b40      	cmp	r3, #64	; 0x40
 800b3be:	f200 817f 	bhi.w	800b6c0 <USBD_StdEPReq+0x324>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d02a      	beq.n	800b41c <USBD_StdEPReq+0x80>
 800b3c6:	2b20      	cmp	r3, #32
 800b3c8:	f040 817a 	bne.w	800b6c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff fe83 	bl	800b0dc <USBD_CoreFindEP>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3da:	7b7b      	ldrb	r3, [r7, #13]
 800b3dc:	2bff      	cmp	r3, #255	; 0xff
 800b3de:	f000 8174 	beq.w	800b6ca <USBD_StdEPReq+0x32e>
 800b3e2:	7b7b      	ldrb	r3, [r7, #13]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f040 8170 	bne.w	800b6ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b3ea:	7b7a      	ldrb	r2, [r7, #13]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b3f2:	7b7a      	ldrb	r2, [r7, #13]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	32ae      	adds	r2, #174	; 0xae
 800b3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 8163 	beq.w	800b6ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b404:	7b7a      	ldrb	r2, [r7, #13]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	32ae      	adds	r2, #174	; 0xae
 800b40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b41a:	e156      	b.n	800b6ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	785b      	ldrb	r3, [r3, #1]
 800b420:	2b03      	cmp	r3, #3
 800b422:	d008      	beq.n	800b436 <USBD_StdEPReq+0x9a>
 800b424:	2b03      	cmp	r3, #3
 800b426:	f300 8145 	bgt.w	800b6b4 <USBD_StdEPReq+0x318>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 809b 	beq.w	800b566 <USBD_StdEPReq+0x1ca>
 800b430:	2b01      	cmp	r3, #1
 800b432:	d03c      	beq.n	800b4ae <USBD_StdEPReq+0x112>
 800b434:	e13e      	b.n	800b6b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d002      	beq.n	800b448 <USBD_StdEPReq+0xac>
 800b442:	2b03      	cmp	r3, #3
 800b444:	d016      	beq.n	800b474 <USBD_StdEPReq+0xd8>
 800b446:	e02c      	b.n	800b4a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b448:	7bbb      	ldrb	r3, [r7, #14]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00d      	beq.n	800b46a <USBD_StdEPReq+0xce>
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
 800b450:	2b80      	cmp	r3, #128	; 0x80
 800b452:	d00a      	beq.n	800b46a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	4619      	mov	r1, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f001 f993 	bl	800c784 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b45e:	2180      	movs	r1, #128	; 0x80
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f001 f98f 	bl	800c784 <USBD_LL_StallEP>
 800b466:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b468:	e020      	b.n	800b4ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fc7a 	bl	800bd66 <USBD_CtlError>
              break;
 800b472:	e01b      	b.n	800b4ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	885b      	ldrh	r3, [r3, #2]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10e      	bne.n	800b49a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00b      	beq.n	800b49a <USBD_StdEPReq+0xfe>
 800b482:	7bbb      	ldrb	r3, [r7, #14]
 800b484:	2b80      	cmp	r3, #128	; 0x80
 800b486:	d008      	beq.n	800b49a <USBD_StdEPReq+0xfe>
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	88db      	ldrh	r3, [r3, #6]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d104      	bne.n	800b49a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 f975 	bl	800c784 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fd2e 	bl	800befc <USBD_CtlSendStatus>

              break;
 800b4a0:	e004      	b.n	800b4ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fc5e 	bl	800bd66 <USBD_CtlError>
              break;
 800b4aa:	bf00      	nop
          }
          break;
 800b4ac:	e107      	b.n	800b6be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d002      	beq.n	800b4c0 <USBD_StdEPReq+0x124>
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d016      	beq.n	800b4ec <USBD_StdEPReq+0x150>
 800b4be:	e04b      	b.n	800b558 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00d      	beq.n	800b4e2 <USBD_StdEPReq+0x146>
 800b4c6:	7bbb      	ldrb	r3, [r7, #14]
 800b4c8:	2b80      	cmp	r3, #128	; 0x80
 800b4ca:	d00a      	beq.n	800b4e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4cc:	7bbb      	ldrb	r3, [r7, #14]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f001 f957 	bl	800c784 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4d6:	2180      	movs	r1, #128	; 0x80
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f001 f953 	bl	800c784 <USBD_LL_StallEP>
 800b4de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4e0:	e040      	b.n	800b564 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fc3e 	bl	800bd66 <USBD_CtlError>
              break;
 800b4ea:	e03b      	b.n	800b564 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	885b      	ldrh	r3, [r3, #2]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d136      	bne.n	800b562 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
 800b4f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f001 f95d 	bl	800c7c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fcf7 	bl	800befc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7ff fde2 	bl	800b0dc <USBD_CoreFindEP>
 800b518:	4603      	mov	r3, r0
 800b51a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b51c:	7b7b      	ldrb	r3, [r7, #13]
 800b51e:	2bff      	cmp	r3, #255	; 0xff
 800b520:	d01f      	beq.n	800b562 <USBD_StdEPReq+0x1c6>
 800b522:	7b7b      	ldrb	r3, [r7, #13]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d11c      	bne.n	800b562 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b528:	7b7a      	ldrb	r2, [r7, #13]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b530:	7b7a      	ldrb	r2, [r7, #13]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	32ae      	adds	r2, #174	; 0xae
 800b536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d010      	beq.n	800b562 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b540:	7b7a      	ldrb	r2, [r7, #13]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	32ae      	adds	r2, #174	; 0xae
 800b546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	4798      	blx	r3
 800b552:	4603      	mov	r3, r0
 800b554:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b556:	e004      	b.n	800b562 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fc03 	bl	800bd66 <USBD_CtlError>
              break;
 800b560:	e000      	b.n	800b564 <USBD_StdEPReq+0x1c8>
              break;
 800b562:	bf00      	nop
          }
          break;
 800b564:	e0ab      	b.n	800b6be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d002      	beq.n	800b578 <USBD_StdEPReq+0x1dc>
 800b572:	2b03      	cmp	r3, #3
 800b574:	d032      	beq.n	800b5dc <USBD_StdEPReq+0x240>
 800b576:	e097      	b.n	800b6a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b578:	7bbb      	ldrb	r3, [r7, #14]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d007      	beq.n	800b58e <USBD_StdEPReq+0x1f2>
 800b57e:	7bbb      	ldrb	r3, [r7, #14]
 800b580:	2b80      	cmp	r3, #128	; 0x80
 800b582:	d004      	beq.n	800b58e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fbed 	bl	800bd66 <USBD_CtlError>
                break;
 800b58c:	e091      	b.n	800b6b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b592:	2b00      	cmp	r3, #0
 800b594:	da0b      	bge.n	800b5ae <USBD_StdEPReq+0x212>
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b59c:	4613      	mov	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	3310      	adds	r3, #16
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	e00b      	b.n	800b5c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
 800b5b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fc37 	bl	800be48 <USBD_CtlSendData>
              break;
 800b5da:	e06a      	b.n	800b6b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	da11      	bge.n	800b608 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
 800b5e6:	f003 020f 	and.w	r2, r3, #15
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	440b      	add	r3, r1
 800b5f6:	3324      	adds	r3, #36	; 0x24
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d117      	bne.n	800b62e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fbb0 	bl	800bd66 <USBD_CtlError>
                  break;
 800b606:	e054      	b.n	800b6b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	f003 020f 	and.w	r2, r3, #15
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	4613      	mov	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	440b      	add	r3, r1
 800b61a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d104      	bne.n	800b62e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fb9d 	bl	800bd66 <USBD_CtlError>
                  break;
 800b62c:	e041      	b.n	800b6b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b62e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b632:	2b00      	cmp	r3, #0
 800b634:	da0b      	bge.n	800b64e <USBD_StdEPReq+0x2b2>
 800b636:	7bbb      	ldrb	r3, [r7, #14]
 800b638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b63c:	4613      	mov	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	3310      	adds	r3, #16
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	4413      	add	r3, r2
 800b64a:	3304      	adds	r3, #4
 800b64c:	e00b      	b.n	800b666 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b64e:	7bbb      	ldrb	r3, [r7, #14]
 800b650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b654:	4613      	mov	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4413      	add	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	4413      	add	r3, r2
 800b664:	3304      	adds	r3, #4
 800b666:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b668:	7bbb      	ldrb	r3, [r7, #14]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d002      	beq.n	800b674 <USBD_StdEPReq+0x2d8>
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	2b80      	cmp	r3, #128	; 0x80
 800b672:	d103      	bne.n	800b67c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	e00e      	b.n	800b69a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
 800b67e:	4619      	mov	r1, r3
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f001 f8bd 	bl	800c800 <USBD_LL_IsStallEP>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d003      	beq.n	800b694 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2201      	movs	r2, #1
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	e002      	b.n	800b69a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2200      	movs	r2, #0
 800b698:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2202      	movs	r2, #2
 800b69e:	4619      	mov	r1, r3
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fbd1 	bl	800be48 <USBD_CtlSendData>
              break;
 800b6a6:	e004      	b.n	800b6b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fb5b 	bl	800bd66 <USBD_CtlError>
              break;
 800b6b0:	bf00      	nop
          }
          break;
 800b6b2:	e004      	b.n	800b6be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fb55 	bl	800bd66 <USBD_CtlError>
          break;
 800b6bc:	bf00      	nop
      }
      break;
 800b6be:	e005      	b.n	800b6cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fb4f 	bl	800bd66 <USBD_CtlError>
      break;
 800b6c8:	e000      	b.n	800b6cc <USBD_StdEPReq+0x330>
      break;
 800b6ca:	bf00      	nop
  }

  return ret;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
	...

0800b6d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	885b      	ldrh	r3, [r3, #2]
 800b6f2:	0a1b      	lsrs	r3, r3, #8
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	2b06      	cmp	r3, #6
 800b6fa:	f200 8128 	bhi.w	800b94e <USBD_GetDescriptor+0x276>
 800b6fe:	a201      	add	r2, pc, #4	; (adr r2, 800b704 <USBD_GetDescriptor+0x2c>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b721 	.word	0x0800b721
 800b708:	0800b739 	.word	0x0800b739
 800b70c:	0800b779 	.word	0x0800b779
 800b710:	0800b94f 	.word	0x0800b94f
 800b714:	0800b94f 	.word	0x0800b94f
 800b718:	0800b8ef 	.word	0x0800b8ef
 800b71c:	0800b91b 	.word	0x0800b91b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	7c12      	ldrb	r2, [r2, #16]
 800b72c:	f107 0108 	add.w	r1, r7, #8
 800b730:	4610      	mov	r0, r2
 800b732:	4798      	blx	r3
 800b734:	60f8      	str	r0, [r7, #12]
      break;
 800b736:	e112      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7c1b      	ldrb	r3, [r3, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10d      	bne.n	800b75c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b748:	f107 0208 	add.w	r2, r7, #8
 800b74c:	4610      	mov	r0, r2
 800b74e:	4798      	blx	r3
 800b750:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3301      	adds	r3, #1
 800b756:	2202      	movs	r2, #2
 800b758:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b75a:	e100      	b.n	800b95e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	f107 0208 	add.w	r2, r7, #8
 800b768:	4610      	mov	r0, r2
 800b76a:	4798      	blx	r3
 800b76c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3301      	adds	r3, #1
 800b772:	2202      	movs	r2, #2
 800b774:	701a      	strb	r2, [r3, #0]
      break;
 800b776:	e0f2      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	885b      	ldrh	r3, [r3, #2]
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b05      	cmp	r3, #5
 800b780:	f200 80ac 	bhi.w	800b8dc <USBD_GetDescriptor+0x204>
 800b784:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <USBD_GetDescriptor+0xb4>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b7a5 	.word	0x0800b7a5
 800b790:	0800b7d9 	.word	0x0800b7d9
 800b794:	0800b80d 	.word	0x0800b80d
 800b798:	0800b841 	.word	0x0800b841
 800b79c:	0800b875 	.word	0x0800b875
 800b7a0:	0800b8a9 	.word	0x0800b8a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00b      	beq.n	800b7c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	7c12      	ldrb	r2, [r2, #16]
 800b7bc:	f107 0108 	add.w	r1, r7, #8
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7c6:	e091      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 facb 	bl	800bd66 <USBD_CtlError>
            err++;
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7d6:	e089      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	7c12      	ldrb	r2, [r2, #16]
 800b7f0:	f107 0108 	add.w	r1, r7, #8
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4798      	blx	r3
 800b7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7fa:	e077      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fab1 	bl	800bd66 <USBD_CtlError>
            err++;
 800b804:	7afb      	ldrb	r3, [r7, #11]
 800b806:	3301      	adds	r3, #1
 800b808:	72fb      	strb	r3, [r7, #11]
          break;
 800b80a:	e06f      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	7c12      	ldrb	r2, [r2, #16]
 800b824:	f107 0108 	add.w	r1, r7, #8
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
 800b82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b82e:	e05d      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fa97 	bl	800bd66 <USBD_CtlError>
            err++;
 800b838:	7afb      	ldrb	r3, [r7, #11]
 800b83a:	3301      	adds	r3, #1
 800b83c:	72fb      	strb	r3, [r7, #11]
          break;
 800b83e:	e055      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00b      	beq.n	800b864 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	7c12      	ldrb	r2, [r2, #16]
 800b858:	f107 0108 	add.w	r1, r7, #8
 800b85c:	4610      	mov	r0, r2
 800b85e:	4798      	blx	r3
 800b860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b862:	e043      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fa7d 	bl	800bd66 <USBD_CtlError>
            err++;
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	3301      	adds	r3, #1
 800b870:	72fb      	strb	r3, [r7, #11]
          break;
 800b872:	e03b      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	7c12      	ldrb	r2, [r2, #16]
 800b88c:	f107 0108 	add.w	r1, r7, #8
 800b890:	4610      	mov	r0, r2
 800b892:	4798      	blx	r3
 800b894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b896:	e029      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fa63 	bl	800bd66 <USBD_CtlError>
            err++;
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8a6:	e021      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	7c12      	ldrb	r2, [r2, #16]
 800b8c0:	f107 0108 	add.w	r1, r7, #8
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
 800b8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8ca:	e00f      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fa49 	bl	800bd66 <USBD_CtlError>
            err++;
 800b8d4:	7afb      	ldrb	r3, [r7, #11]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8da:	e007      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fa41 	bl	800bd66 <USBD_CtlError>
          err++;
 800b8e4:	7afb      	ldrb	r3, [r7, #11]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b8ea:	bf00      	nop
      }
      break;
 800b8ec:	e037      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7c1b      	ldrb	r3, [r3, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d109      	bne.n	800b90a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8fe:	f107 0208 	add.w	r2, r7, #8
 800b902:	4610      	mov	r0, r2
 800b904:	4798      	blx	r3
 800b906:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b908:	e029      	b.n	800b95e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fa2a 	bl	800bd66 <USBD_CtlError>
        err++;
 800b912:	7afb      	ldrb	r3, [r7, #11]
 800b914:	3301      	adds	r3, #1
 800b916:	72fb      	strb	r3, [r7, #11]
      break;
 800b918:	e021      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	7c1b      	ldrb	r3, [r3, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10d      	bne.n	800b93e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92a:	f107 0208 	add.w	r2, r7, #8
 800b92e:	4610      	mov	r0, r2
 800b930:	4798      	blx	r3
 800b932:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3301      	adds	r3, #1
 800b938:	2207      	movs	r2, #7
 800b93a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b93c:	e00f      	b.n	800b95e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fa10 	bl	800bd66 <USBD_CtlError>
        err++;
 800b946:	7afb      	ldrb	r3, [r7, #11]
 800b948:	3301      	adds	r3, #1
 800b94a:	72fb      	strb	r3, [r7, #11]
      break;
 800b94c:	e007      	b.n	800b95e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fa08 	bl	800bd66 <USBD_CtlError>
      err++;
 800b956:	7afb      	ldrb	r3, [r7, #11]
 800b958:	3301      	adds	r3, #1
 800b95a:	72fb      	strb	r3, [r7, #11]
      break;
 800b95c:	bf00      	nop
  }

  if (err != 0U)
 800b95e:	7afb      	ldrb	r3, [r7, #11]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d11e      	bne.n	800b9a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	88db      	ldrh	r3, [r3, #6]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d016      	beq.n	800b99a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b96c:	893b      	ldrh	r3, [r7, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00e      	beq.n	800b990 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	88da      	ldrh	r2, [r3, #6]
 800b976:	893b      	ldrh	r3, [r7, #8]
 800b978:	4293      	cmp	r3, r2
 800b97a:	bf28      	it	cs
 800b97c:	4613      	movcs	r3, r2
 800b97e:	b29b      	uxth	r3, r3
 800b980:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b982:	893b      	ldrh	r3, [r7, #8]
 800b984:	461a      	mov	r2, r3
 800b986:	68f9      	ldr	r1, [r7, #12]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fa5d 	bl	800be48 <USBD_CtlSendData>
 800b98e:	e009      	b.n	800b9a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f9e7 	bl	800bd66 <USBD_CtlError>
 800b998:	e004      	b.n	800b9a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 faae 	bl	800befc <USBD_CtlSendStatus>
 800b9a0:	e000      	b.n	800b9a4 <USBD_GetDescriptor+0x2cc>
    return;
 800b9a2:	bf00      	nop
  }
}
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop

0800b9ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	889b      	ldrh	r3, [r3, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d131      	bne.n	800ba22 <USBD_SetAddress+0x76>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	88db      	ldrh	r3, [r3, #6]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d12d      	bne.n	800ba22 <USBD_SetAddress+0x76>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	885b      	ldrh	r3, [r3, #2]
 800b9ca:	2b7f      	cmp	r3, #127	; 0x7f
 800b9cc:	d829      	bhi.n	800ba22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	885b      	ldrh	r3, [r3, #2]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d104      	bne.n	800b9f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f9bc 	bl	800bd66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ee:	e01d      	b.n	800ba2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	7bfa      	ldrb	r2, [r7, #15]
 800b9f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 ff2b 	bl	800c858 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fa7a 	bl	800befc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d004      	beq.n	800ba18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2202      	movs	r2, #2
 800ba12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba16:	e009      	b.n	800ba2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba20:	e004      	b.n	800ba2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f99e 	bl	800bd66 <USBD_CtlError>
  }
}
 800ba2a:	bf00      	nop
 800ba2c:	bf00      	nop
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	885b      	ldrh	r3, [r3, #2]
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	4b4e      	ldr	r3, [pc, #312]	; (800bb84 <USBD_SetConfig+0x150>)
 800ba4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba4c:	4b4d      	ldr	r3, [pc, #308]	; (800bb84 <USBD_SetConfig+0x150>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d905      	bls.n	800ba60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f985 	bl	800bd66 <USBD_CtlError>
    return USBD_FAIL;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e08c      	b.n	800bb7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d002      	beq.n	800ba72 <USBD_SetConfig+0x3e>
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d029      	beq.n	800bac4 <USBD_SetConfig+0x90>
 800ba70:	e075      	b.n	800bb5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba72:	4b44      	ldr	r3, [pc, #272]	; (800bb84 <USBD_SetConfig+0x150>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d020      	beq.n	800babc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ba7a:	4b42      	ldr	r3, [pc, #264]	; (800bb84 <USBD_SetConfig+0x150>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba84:	4b3f      	ldr	r3, [pc, #252]	; (800bb84 <USBD_SetConfig+0x150>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7fe ffe1 	bl	800aa52 <USBD_SetClassConfig>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d008      	beq.n	800baac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f962 	bl	800bd66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2202      	movs	r2, #2
 800baa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800baaa:	e065      	b.n	800bb78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fa25 	bl	800befc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2203      	movs	r2, #3
 800bab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800baba:	e05d      	b.n	800bb78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fa1d 	bl	800befc <USBD_CtlSendStatus>
      break;
 800bac2:	e059      	b.n	800bb78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bac4:	4b2f      	ldr	r3, [pc, #188]	; (800bb84 <USBD_SetConfig+0x150>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d112      	bne.n	800baf2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2202      	movs	r2, #2
 800bad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bad4:	4b2b      	ldr	r3, [pc, #172]	; (800bb84 <USBD_SetConfig+0x150>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	461a      	mov	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bade:	4b29      	ldr	r3, [pc, #164]	; (800bb84 <USBD_SetConfig+0x150>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	4619      	mov	r1, r3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7fe ffd0 	bl	800aa8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fa06 	bl	800befc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800baf0:	e042      	b.n	800bb78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800baf2:	4b24      	ldr	r3, [pc, #144]	; (800bb84 <USBD_SetConfig+0x150>)
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d02a      	beq.n	800bb56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7fe ffbe 	bl	800aa8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb0e:	4b1d      	ldr	r3, [pc, #116]	; (800bb84 <USBD_SetConfig+0x150>)
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb18:	4b1a      	ldr	r3, [pc, #104]	; (800bb84 <USBD_SetConfig+0x150>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7fe ff97 	bl	800aa52 <USBD_SetClassConfig>
 800bb24:	4603      	mov	r3, r0
 800bb26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00f      	beq.n	800bb4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bb2e:	6839      	ldr	r1, [r7, #0]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f918 	bl	800bd66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7fe ffa3 	bl	800aa8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb4c:	e014      	b.n	800bb78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f9d4 	bl	800befc <USBD_CtlSendStatus>
      break;
 800bb54:	e010      	b.n	800bb78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f9d0 	bl	800befc <USBD_CtlSendStatus>
      break;
 800bb5c:	e00c      	b.n	800bb78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f900 	bl	800bd66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb66:	4b07      	ldr	r3, [pc, #28]	; (800bb84 <USBD_SetConfig+0x150>)
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7fe ff8c 	bl	800aa8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb72:	2303      	movs	r3, #3
 800bb74:	73fb      	strb	r3, [r7, #15]
      break;
 800bb76:	bf00      	nop
  }

  return ret;
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	24003670 	.word	0x24003670

0800bb88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	88db      	ldrh	r3, [r3, #6]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d004      	beq.n	800bba4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 f8e2 	bl	800bd66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bba2:	e023      	b.n	800bbec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	dc02      	bgt.n	800bbb6 <USBD_GetConfig+0x2e>
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	dc03      	bgt.n	800bbbc <USBD_GetConfig+0x34>
 800bbb4:	e015      	b.n	800bbe2 <USBD_GetConfig+0x5a>
 800bbb6:	2b03      	cmp	r3, #3
 800bbb8:	d00b      	beq.n	800bbd2 <USBD_GetConfig+0x4a>
 800bbba:	e012      	b.n	800bbe2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3308      	adds	r3, #8
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f93c 	bl	800be48 <USBD_CtlSendData>
        break;
 800bbd0:	e00c      	b.n	800bbec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f934 	bl	800be48 <USBD_CtlSendData>
        break;
 800bbe0:	e004      	b.n	800bbec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f8be 	bl	800bd66 <USBD_CtlError>
        break;
 800bbea:	bf00      	nop
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d81e      	bhi.n	800bc4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	88db      	ldrh	r3, [r3, #6]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d004      	beq.n	800bc1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f8a5 	bl	800bd66 <USBD_CtlError>
        break;
 800bc1c:	e01a      	b.n	800bc54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2201      	movs	r2, #1
 800bc22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d005      	beq.n	800bc3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	f043 0202 	orr.w	r2, r3, #2
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	330c      	adds	r3, #12
 800bc3e:	2202      	movs	r2, #2
 800bc40:	4619      	mov	r1, r3
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f900 	bl	800be48 <USBD_CtlSendData>
      break;
 800bc48:	e004      	b.n	800bc54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f88a 	bl	800bd66 <USBD_CtlError>
      break;
 800bc52:	bf00      	nop
  }
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	885b      	ldrh	r3, [r3, #2]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d107      	bne.n	800bc7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f940 	bl	800befc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bc7c:	e013      	b.n	800bca6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	885b      	ldrh	r3, [r3, #2]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d10b      	bne.n	800bc9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	889b      	ldrh	r3, [r3, #4]
 800bc8a:	0a1b      	lsrs	r3, r3, #8
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	b2da      	uxtb	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f930 	bl	800befc <USBD_CtlSendStatus>
}
 800bc9c:	e003      	b.n	800bca6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f860 	bl	800bd66 <USBD_CtlError>
}
 800bca6:	bf00      	nop
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b082      	sub	sp, #8
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d80b      	bhi.n	800bcde <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	885b      	ldrh	r3, [r3, #2]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d10c      	bne.n	800bce8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f910 	bl	800befc <USBD_CtlSendStatus>
      }
      break;
 800bcdc:	e004      	b.n	800bce8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f840 	bl	800bd66 <USBD_CtlError>
      break;
 800bce6:	e000      	b.n	800bcea <USBD_ClrFeature+0x3c>
      break;
 800bce8:	bf00      	nop
  }
}
 800bcea:	bf00      	nop
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	781a      	ldrb	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f7ff fa41 	bl	800b1a4 <SWAPBYTE>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461a      	mov	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3301      	adds	r3, #1
 800bd34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f7ff fa34 	bl	800b1a4 <SWAPBYTE>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	461a      	mov	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3301      	adds	r3, #1
 800bd48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff fa27 	bl	800b1a4 <SWAPBYTE>
 800bd56:	4603      	mov	r3, r0
 800bd58:	461a      	mov	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	80da      	strh	r2, [r3, #6]
}
 800bd5e:	bf00      	nop
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b082      	sub	sp, #8
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd70:	2180      	movs	r1, #128	; 0x80
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fd06 	bl	800c784 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd78:	2100      	movs	r1, #0
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fd02 	bl	800c784 <USBD_LL_StallEP>
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd94:	2300      	movs	r3, #0
 800bd96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d036      	beq.n	800be0c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bda2:	6938      	ldr	r0, [r7, #16]
 800bda4:	f000 f836 	bl	800be14 <USBD_GetLen>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	3301      	adds	r3, #1
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	005b      	lsls	r3, r3, #1
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	4413      	add	r3, r2
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	7812      	ldrb	r2, [r2, #0]
 800bdc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bdc8:	7dfb      	ldrb	r3, [r7, #23]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	4413      	add	r3, r2
 800bdce:	2203      	movs	r2, #3
 800bdd0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdd2:	7dfb      	ldrb	r3, [r7, #23]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bdd8:	e013      	b.n	800be02 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	4413      	add	r3, r2
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	7812      	ldrb	r2, [r2, #0]
 800bde4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	3301      	adds	r3, #1
 800bdea:	613b      	str	r3, [r7, #16]
    idx++;
 800bdec:	7dfb      	ldrb	r3, [r7, #23]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	701a      	strb	r2, [r3, #0]
    idx++;
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	3301      	adds	r3, #1
 800be00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e7      	bne.n	800bdda <USBD_GetString+0x52>
 800be0a:	e000      	b.n	800be0e <USBD_GetString+0x86>
    return;
 800be0c:	bf00      	nop
  }
}
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be24:	e005      	b.n	800be32 <USBD_GetLen+0x1e>
  {
    len++;
 800be26:	7bfb      	ldrb	r3, [r7, #15]
 800be28:	3301      	adds	r3, #1
 800be2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	3301      	adds	r3, #1
 800be30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1f5      	bne.n	800be26 <USBD_GetLen+0x12>
  }

  return len;
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2202      	movs	r2, #2
 800be58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	2100      	movs	r1, #0
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f000 fd11 	bl	800c896 <USBD_LL_Transmit>

  return USBD_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	2100      	movs	r1, #0
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 fd00 	bl	800c896 <USBD_LL_Transmit>

  return USBD_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2203      	movs	r2, #3
 800beb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	2100      	movs	r1, #0
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f000 fd04 	bl	800c8d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b084      	sub	sp, #16
 800bede:	af00      	add	r7, sp, #0
 800bee0:	60f8      	str	r0, [r7, #12]
 800bee2:	60b9      	str	r1, [r7, #8]
 800bee4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	2100      	movs	r1, #0
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f000 fcf3 	bl	800c8d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2204      	movs	r2, #4
 800bf08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2100      	movs	r1, #0
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fcbf 	bl	800c896 <USBD_LL_Transmit>

  return USBD_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b082      	sub	sp, #8
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2205      	movs	r2, #5
 800bf2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf32:	2300      	movs	r3, #0
 800bf34:	2200      	movs	r2, #0
 800bf36:	2100      	movs	r1, #0
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fccd 	bl	800c8d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	4913      	ldr	r1, [pc, #76]	; (800bf9c <MX_USB_DEVICE_Init+0x54>)
 800bf50:	4813      	ldr	r0, [pc, #76]	; (800bfa0 <MX_USB_DEVICE_Init+0x58>)
 800bf52:	f7fe fd01 	bl	800a958 <USBD_Init>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf5c:	f7f5 fd06 	bl	800196c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf60:	4910      	ldr	r1, [pc, #64]	; (800bfa4 <MX_USB_DEVICE_Init+0x5c>)
 800bf62:	480f      	ldr	r0, [pc, #60]	; (800bfa0 <MX_USB_DEVICE_Init+0x58>)
 800bf64:	f7fe fd28 	bl	800a9b8 <USBD_RegisterClass>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bf6e:	f7f5 fcfd 	bl	800196c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bf72:	490d      	ldr	r1, [pc, #52]	; (800bfa8 <MX_USB_DEVICE_Init+0x60>)
 800bf74:	480a      	ldr	r0, [pc, #40]	; (800bfa0 <MX_USB_DEVICE_Init+0x58>)
 800bf76:	f7fe fc1f 	bl	800a7b8 <USBD_CDC_RegisterInterface>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d001      	beq.n	800bf84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bf80:	f7f5 fcf4 	bl	800196c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf84:	4806      	ldr	r0, [pc, #24]	; (800bfa0 <MX_USB_DEVICE_Init+0x58>)
 800bf86:	f7fe fd4d 	bl	800aa24 <USBD_Start>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf90:	f7f5 fcec 	bl	800196c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800bf94:	f7f8 fdc0 	bl	8004b18 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf98:	bf00      	nop
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	240032cc 	.word	0x240032cc
 800bfa0:	24003674 	.word	0x24003674
 800bfa4:	24003238 	.word	0x24003238
 800bfa8:	240032b8 	.word	0x240032b8

0800bfac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	4905      	ldr	r1, [pc, #20]	; (800bfc8 <CDC_Init_FS+0x1c>)
 800bfb4:	4805      	ldr	r0, [pc, #20]	; (800bfcc <CDC_Init_FS+0x20>)
 800bfb6:	f7fe fc19 	bl	800a7ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bfba:	4905      	ldr	r1, [pc, #20]	; (800bfd0 <CDC_Init_FS+0x24>)
 800bfbc:	4803      	ldr	r0, [pc, #12]	; (800bfcc <CDC_Init_FS+0x20>)
 800bfbe:	f7fe fc37 	bl	800a830 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bfc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	24004150 	.word	0x24004150
 800bfcc:	24003674 	.word	0x24003674
 800bfd0:	24003950 	.word	0x24003950

0800bfd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bfd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	4603      	mov	r3, r0
 800bfec:	6039      	str	r1, [r7, #0]
 800bfee:	71fb      	strb	r3, [r7, #7]
 800bff0:	4613      	mov	r3, r2
 800bff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bff4:	79fb      	ldrb	r3, [r7, #7]
 800bff6:	2b23      	cmp	r3, #35	; 0x23
 800bff8:	d84a      	bhi.n	800c090 <CDC_Control_FS+0xac>
 800bffa:	a201      	add	r2, pc, #4	; (adr r2, 800c000 <CDC_Control_FS+0x1c>)
 800bffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c000:	0800c091 	.word	0x0800c091
 800c004:	0800c091 	.word	0x0800c091
 800c008:	0800c091 	.word	0x0800c091
 800c00c:	0800c091 	.word	0x0800c091
 800c010:	0800c091 	.word	0x0800c091
 800c014:	0800c091 	.word	0x0800c091
 800c018:	0800c091 	.word	0x0800c091
 800c01c:	0800c091 	.word	0x0800c091
 800c020:	0800c091 	.word	0x0800c091
 800c024:	0800c091 	.word	0x0800c091
 800c028:	0800c091 	.word	0x0800c091
 800c02c:	0800c091 	.word	0x0800c091
 800c030:	0800c091 	.word	0x0800c091
 800c034:	0800c091 	.word	0x0800c091
 800c038:	0800c091 	.word	0x0800c091
 800c03c:	0800c091 	.word	0x0800c091
 800c040:	0800c091 	.word	0x0800c091
 800c044:	0800c091 	.word	0x0800c091
 800c048:	0800c091 	.word	0x0800c091
 800c04c:	0800c091 	.word	0x0800c091
 800c050:	0800c091 	.word	0x0800c091
 800c054:	0800c091 	.word	0x0800c091
 800c058:	0800c091 	.word	0x0800c091
 800c05c:	0800c091 	.word	0x0800c091
 800c060:	0800c091 	.word	0x0800c091
 800c064:	0800c091 	.word	0x0800c091
 800c068:	0800c091 	.word	0x0800c091
 800c06c:	0800c091 	.word	0x0800c091
 800c070:	0800c091 	.word	0x0800c091
 800c074:	0800c091 	.word	0x0800c091
 800c078:	0800c091 	.word	0x0800c091
 800c07c:	0800c091 	.word	0x0800c091
 800c080:	0800c091 	.word	0x0800c091
 800c084:	0800c091 	.word	0x0800c091
 800c088:	0800c091 	.word	0x0800c091
 800c08c:	0800c091 	.word	0x0800c091
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c090:	bf00      	nop
  }

  return (USBD_OK);
 800c092:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c094:	4618      	mov	r0, r3
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c0aa:	6879      	ldr	r1, [r7, #4]
 800c0ac:	4805      	ldr	r0, [pc, #20]	; (800c0c4 <CDC_Receive_FS+0x24>)
 800c0ae:	f7fe fbbf 	bl	800a830 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c0b2:	4804      	ldr	r0, [pc, #16]	; (800c0c4 <CDC_Receive_FS+0x24>)
 800c0b4:	f7fe fc1a 	bl	800a8ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c0b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	24003674 	.word	0x24003674

0800c0c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c0d8:	4b0d      	ldr	r3, [pc, #52]	; (800c110 <CDC_Transmit_FS+0x48>)
 800c0da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e00b      	b.n	800c106 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c0ee:	887b      	ldrh	r3, [r7, #2]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	4806      	ldr	r0, [pc, #24]	; (800c110 <CDC_Transmit_FS+0x48>)
 800c0f6:	f7fe fb79 	bl	800a7ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c0fa:	4805      	ldr	r0, [pc, #20]	; (800c110 <CDC_Transmit_FS+0x48>)
 800c0fc:	f7fe fbb6 	bl	800a86c <USBD_CDC_TransmitPacket>
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c104:	7bfb      	ldrb	r3, [r7, #15]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	24003674 	.word	0x24003674

0800c114 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	4613      	mov	r3, r2
 800c120:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	371c      	adds	r7, #28
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
	...

0800c138 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	4603      	mov	r3, r0
 800c140:	6039      	str	r1, [r7, #0]
 800c142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	2212      	movs	r2, #18
 800c148:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c14a:	4b03      	ldr	r3, [pc, #12]	; (800c158 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	240032e8 	.word	0x240032e8

0800c15c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	6039      	str	r1, [r7, #0]
 800c166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2204      	movs	r2, #4
 800c16c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c16e:	4b03      	ldr	r3, [pc, #12]	; (800c17c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c170:	4618      	mov	r0, r3
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	240032fc 	.word	0x240032fc

0800c180 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	6039      	str	r1, [r7, #0]
 800c18a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c18c:	79fb      	ldrb	r3, [r7, #7]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d105      	bne.n	800c19e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	4907      	ldr	r1, [pc, #28]	; (800c1b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c196:	4808      	ldr	r0, [pc, #32]	; (800c1b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c198:	f7ff fdf6 	bl	800bd88 <USBD_GetString>
 800c19c:	e004      	b.n	800c1a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	4904      	ldr	r1, [pc, #16]	; (800c1b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1a2:	4805      	ldr	r0, [pc, #20]	; (800c1b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1a4:	f7ff fdf0 	bl	800bd88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1a8:	4b02      	ldr	r3, [pc, #8]	; (800c1b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	24004950 	.word	0x24004950
 800c1b8:	0800d944 	.word	0x0800d944

0800c1bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	6039      	str	r1, [r7, #0]
 800c1c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	4904      	ldr	r1, [pc, #16]	; (800c1dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c1cc:	4804      	ldr	r0, [pc, #16]	; (800c1e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c1ce:	f7ff fddb 	bl	800bd88 <USBD_GetString>
  return USBD_StrDesc;
 800c1d2:	4b02      	ldr	r3, [pc, #8]	; (800c1dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	24004950 	.word	0x24004950
 800c1e0:	0800d95c 	.word	0x0800d95c

0800c1e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	6039      	str	r1, [r7, #0]
 800c1ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	221a      	movs	r2, #26
 800c1f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c1f6:	f000 f843 	bl	800c280 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c1fa:	4b02      	ldr	r3, [pc, #8]	; (800c204 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	24003300 	.word	0x24003300

0800c208 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	6039      	str	r1, [r7, #0]
 800c212:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c214:	79fb      	ldrb	r3, [r7, #7]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d105      	bne.n	800c226 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	4907      	ldr	r1, [pc, #28]	; (800c23c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c21e:	4808      	ldr	r0, [pc, #32]	; (800c240 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c220:	f7ff fdb2 	bl	800bd88 <USBD_GetString>
 800c224:	e004      	b.n	800c230 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	4904      	ldr	r1, [pc, #16]	; (800c23c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c22a:	4805      	ldr	r0, [pc, #20]	; (800c240 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c22c:	f7ff fdac 	bl	800bd88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c230:	4b02      	ldr	r3, [pc, #8]	; (800c23c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	24004950 	.word	0x24004950
 800c240:	0800d970 	.word	0x0800d970

0800c244 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	6039      	str	r1, [r7, #0]
 800c24e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c250:	79fb      	ldrb	r3, [r7, #7]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d105      	bne.n	800c262 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	4907      	ldr	r1, [pc, #28]	; (800c278 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c25a:	4808      	ldr	r0, [pc, #32]	; (800c27c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c25c:	f7ff fd94 	bl	800bd88 <USBD_GetString>
 800c260:	e004      	b.n	800c26c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	4904      	ldr	r1, [pc, #16]	; (800c278 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c266:	4805      	ldr	r0, [pc, #20]	; (800c27c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c268:	f7ff fd8e 	bl	800bd88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c26c:	4b02      	ldr	r3, [pc, #8]	; (800c278 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	24004950 	.word	0x24004950
 800c27c:	0800d97c 	.word	0x0800d97c

0800c280 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c286:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <Get_SerialNum+0x44>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c28c:	4b0e      	ldr	r3, [pc, #56]	; (800c2c8 <Get_SerialNum+0x48>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c292:	4b0e      	ldr	r3, [pc, #56]	; (800c2cc <Get_SerialNum+0x4c>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4413      	add	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d009      	beq.n	800c2ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c2a6:	2208      	movs	r2, #8
 800c2a8:	4909      	ldr	r1, [pc, #36]	; (800c2d0 <Get_SerialNum+0x50>)
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f000 f814 	bl	800c2d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2b0:	2204      	movs	r2, #4
 800c2b2:	4908      	ldr	r1, [pc, #32]	; (800c2d4 <Get_SerialNum+0x54>)
 800c2b4:	68b8      	ldr	r0, [r7, #8]
 800c2b6:	f000 f80f 	bl	800c2d8 <IntToUnicode>
  }
}
 800c2ba:	bf00      	nop
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	1ff1e800 	.word	0x1ff1e800
 800c2c8:	1ff1e804 	.word	0x1ff1e804
 800c2cc:	1ff1e808 	.word	0x1ff1e808
 800c2d0:	24003302 	.word	0x24003302
 800c2d4:	24003312 	.word	0x24003312

0800c2d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b087      	sub	sp, #28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	75fb      	strb	r3, [r7, #23]
 800c2ee:	e027      	b.n	800c340 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	0f1b      	lsrs	r3, r3, #28
 800c2f4:	2b09      	cmp	r3, #9
 800c2f6:	d80b      	bhi.n	800c310 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	0f1b      	lsrs	r3, r3, #28
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	005b      	lsls	r3, r3, #1
 800c302:	4619      	mov	r1, r3
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	440b      	add	r3, r1
 800c308:	3230      	adds	r2, #48	; 0x30
 800c30a:	b2d2      	uxtb	r2, r2
 800c30c:	701a      	strb	r2, [r3, #0]
 800c30e:	e00a      	b.n	800c326 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	0f1b      	lsrs	r3, r3, #28
 800c314:	b2da      	uxtb	r2, r3
 800c316:	7dfb      	ldrb	r3, [r7, #23]
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	4619      	mov	r1, r3
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	440b      	add	r3, r1
 800c320:	3237      	adds	r2, #55	; 0x37
 800c322:	b2d2      	uxtb	r2, r2
 800c324:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	3301      	adds	r3, #1
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	4413      	add	r3, r2
 800c336:	2200      	movs	r2, #0
 800c338:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	3301      	adds	r3, #1
 800c33e:	75fb      	strb	r3, [r7, #23]
 800c340:	7dfa      	ldrb	r2, [r7, #23]
 800c342:	79fb      	ldrb	r3, [r7, #7]
 800c344:	429a      	cmp	r2, r3
 800c346:	d3d3      	bcc.n	800c2f0 <IntToUnicode+0x18>
  }
}
 800c348:	bf00      	nop
 800c34a:	bf00      	nop
 800c34c:	371c      	adds	r7, #28
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
	...

0800c358 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b0ba      	sub	sp, #232	; 0xe8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c360:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	605a      	str	r2, [r3, #4]
 800c36a:	609a      	str	r2, [r3, #8]
 800c36c:	60da      	str	r2, [r3, #12]
 800c36e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c370:	f107 0310 	add.w	r3, r7, #16
 800c374:	22c0      	movs	r2, #192	; 0xc0
 800c376:	2100      	movs	r1, #0
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 fb4f 	bl	800ca1c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a2c      	ldr	r2, [pc, #176]	; (800c434 <HAL_PCD_MspInit+0xdc>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d151      	bne.n	800c42c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c388:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c38c:	f04f 0300 	mov.w	r3, #0
 800c390:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c39c:	f107 0310 	add.w	r3, r7, #16
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7f9 fc53 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d001      	beq.n	800c3b0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800c3ac:	f7f5 fade 	bl	800196c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c3b0:	f7f8 fbb2 	bl	8004b18 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3b4:	4b20      	ldr	r3, [pc, #128]	; (800c438 <HAL_PCD_MspInit+0xe0>)
 800c3b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3ba:	4a1f      	ldr	r2, [pc, #124]	; (800c438 <HAL_PCD_MspInit+0xe0>)
 800c3bc:	f043 0301 	orr.w	r3, r3, #1
 800c3c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c3c4:	4b1c      	ldr	r3, [pc, #112]	; (800c438 <HAL_PCD_MspInit+0xe0>)
 800c3c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	60fb      	str	r3, [r7, #12]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA8     ------> USB_OTG_FS_SOF
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800c3d2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c3d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3da:	2302      	movs	r3, #2
 800c3dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800c3ec:	230a      	movs	r3, #10
 800c3ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	4810      	ldr	r0, [pc, #64]	; (800c43c <HAL_PCD_MspInit+0xe4>)
 800c3fa:	f7f6 fed1 	bl	80031a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c3fe:	4b0e      	ldr	r3, [pc, #56]	; (800c438 <HAL_PCD_MspInit+0xe0>)
 800c400:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c404:	4a0c      	ldr	r2, [pc, #48]	; (800c438 <HAL_PCD_MspInit+0xe0>)
 800c406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c40a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c40e:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <HAL_PCD_MspInit+0xe0>)
 800c410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c418:	60bb      	str	r3, [r7, #8]
 800c41a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c41c:	2200      	movs	r2, #0
 800c41e:	2100      	movs	r1, #0
 800c420:	2065      	movs	r0, #101	; 0x65
 800c422:	f7f6 fe88 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c426:	2065      	movs	r0, #101	; 0x65
 800c428:	f7f6 fe9f 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c42c:	bf00      	nop
 800c42e:	37e8      	adds	r7, #232	; 0xe8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	40080000 	.word	0x40080000
 800c438:	58024400 	.word	0x58024400
 800c43c:	58020000 	.word	0x58020000

0800c440 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c454:	4619      	mov	r1, r3
 800c456:	4610      	mov	r0, r2
 800c458:	f7fe fb31 	bl	800aabe <USBD_LL_SetupStage>
}
 800c45c:	bf00      	nop
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c476:	78fa      	ldrb	r2, [r7, #3]
 800c478:	6879      	ldr	r1, [r7, #4]
 800c47a:	4613      	mov	r3, r2
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	4413      	add	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	440b      	add	r3, r1
 800c484:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	78fb      	ldrb	r3, [r7, #3]
 800c48c:	4619      	mov	r1, r3
 800c48e:	f7fe fb6b 	bl	800ab68 <USBD_LL_DataOutStage>
}
 800c492:	bf00      	nop
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b082      	sub	sp, #8
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4ac:	78fa      	ldrb	r2, [r7, #3]
 800c4ae:	6879      	ldr	r1, [r7, #4]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	4413      	add	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	440b      	add	r3, r1
 800c4ba:	3348      	adds	r3, #72	; 0x48
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	f7fe fc04 	bl	800acce <USBD_LL_DataInStage>
}
 800c4c6:	bf00      	nop
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe fd3e 	bl	800af5e <USBD_LL_SOF>
}
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b084      	sub	sp, #16
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d102      	bne.n	800c504 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c4fe:	2300      	movs	r3, #0
 800c500:	73fb      	strb	r3, [r7, #15]
 800c502:	e008      	b.n	800c516 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d102      	bne.n	800c512 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c50c:	2301      	movs	r3, #1
 800c50e:	73fb      	strb	r3, [r7, #15]
 800c510:	e001      	b.n	800c516 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c512:	f7f5 fa2b 	bl	800196c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c51c:	7bfa      	ldrb	r2, [r7, #15]
 800c51e:	4611      	mov	r1, r2
 800c520:	4618      	mov	r0, r3
 800c522:	f7fe fcd8 	bl	800aed6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fe fc80 	bl	800ae32 <USBD_LL_Reset>
}
 800c532:	bf00      	nop
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
	...

0800c53c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe fcd3 	bl	800aef6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	6812      	ldr	r2, [r2, #0]
 800c55e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c562:	f043 0301 	orr.w	r3, r3, #1
 800c566:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a1b      	ldr	r3, [r3, #32]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d005      	beq.n	800c57c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c570:	4b04      	ldr	r3, [pc, #16]	; (800c584 <HAL_PCD_SuspendCallback+0x48>)
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	4a03      	ldr	r2, [pc, #12]	; (800c584 <HAL_PCD_SuspendCallback+0x48>)
 800c576:	f043 0306 	orr.w	r3, r3, #6
 800c57a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c57c:	bf00      	nop
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	e000ed00 	.word	0xe000ed00

0800c588 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fcc9 	bl	800af2e <USBD_LL_Resume>
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5b6:	78fa      	ldrb	r2, [r7, #3]
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fe fd21 	bl	800b002 <USBD_LL_IsoOUTIncomplete>
}
 800c5c0:	bf00      	nop
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5da:	78fa      	ldrb	r2, [r7, #3]
 800c5dc:	4611      	mov	r1, r2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7fe fcdd 	bl	800af9e <USBD_LL_IsoINIncomplete>
}
 800c5e4:	bf00      	nop
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fe fd33 	bl	800b066 <USBD_LL_DevConnected>
}
 800c600:	bf00      	nop
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe fd30 	bl	800b07c <USBD_LL_DevDisconnected>
}
 800c61c:	bf00      	nop
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d13e      	bne.n	800c6b2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c634:	4a21      	ldr	r2, [pc, #132]	; (800c6bc <USBD_LL_Init+0x98>)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a1f      	ldr	r2, [pc, #124]	; (800c6bc <USBD_LL_Init+0x98>)
 800c640:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c644:	4b1d      	ldr	r3, [pc, #116]	; (800c6bc <USBD_LL_Init+0x98>)
 800c646:	4a1e      	ldr	r2, [pc, #120]	; (800c6c0 <USBD_LL_Init+0x9c>)
 800c648:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c64a:	4b1c      	ldr	r3, [pc, #112]	; (800c6bc <USBD_LL_Init+0x98>)
 800c64c:	2209      	movs	r2, #9
 800c64e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c650:	4b1a      	ldr	r3, [pc, #104]	; (800c6bc <USBD_LL_Init+0x98>)
 800c652:	2202      	movs	r2, #2
 800c654:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c656:	4b19      	ldr	r3, [pc, #100]	; (800c6bc <USBD_LL_Init+0x98>)
 800c658:	2200      	movs	r2, #0
 800c65a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c65c:	4b17      	ldr	r3, [pc, #92]	; (800c6bc <USBD_LL_Init+0x98>)
 800c65e:	2202      	movs	r2, #2
 800c660:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c662:	4b16      	ldr	r3, [pc, #88]	; (800c6bc <USBD_LL_Init+0x98>)
 800c664:	2200      	movs	r2, #0
 800c666:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c668:	4b14      	ldr	r3, [pc, #80]	; (800c6bc <USBD_LL_Init+0x98>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c66e:	4b13      	ldr	r3, [pc, #76]	; (800c6bc <USBD_LL_Init+0x98>)
 800c670:	2200      	movs	r2, #0
 800c672:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c674:	4b11      	ldr	r3, [pc, #68]	; (800c6bc <USBD_LL_Init+0x98>)
 800c676:	2200      	movs	r2, #0
 800c678:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c67a:	4b10      	ldr	r3, [pc, #64]	; (800c6bc <USBD_LL_Init+0x98>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c680:	4b0e      	ldr	r3, [pc, #56]	; (800c6bc <USBD_LL_Init+0x98>)
 800c682:	2200      	movs	r2, #0
 800c684:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c686:	480d      	ldr	r0, [pc, #52]	; (800c6bc <USBD_LL_Init+0x98>)
 800c688:	f7f6 ff53 	bl	8003532 <HAL_PCD_Init>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c692:	f7f5 f96b 	bl	800196c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c696:	2180      	movs	r1, #128	; 0x80
 800c698:	4808      	ldr	r0, [pc, #32]	; (800c6bc <USBD_LL_Init+0x98>)
 800c69a:	f7f8 f9c2 	bl	8004a22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c69e:	2240      	movs	r2, #64	; 0x40
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	4806      	ldr	r0, [pc, #24]	; (800c6bc <USBD_LL_Init+0x98>)
 800c6a4:	f7f8 f976 	bl	8004994 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6a8:	2280      	movs	r2, #128	; 0x80
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	4803      	ldr	r0, [pc, #12]	; (800c6bc <USBD_LL_Init+0x98>)
 800c6ae:	f7f8 f971 	bl	8004994 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	24004b50 	.word	0x24004b50
 800c6c0:	40080000 	.word	0x40080000

0800c6c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7f7 f84d 	bl	800377a <HAL_PCD_Start>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 f942 	bl	800c970 <USBD_Get_USB_Status>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	4608      	mov	r0, r1
 800c704:	4611      	mov	r1, r2
 800c706:	461a      	mov	r2, r3
 800c708:	4603      	mov	r3, r0
 800c70a:	70fb      	strb	r3, [r7, #3]
 800c70c:	460b      	mov	r3, r1
 800c70e:	70bb      	strb	r3, [r7, #2]
 800c710:	4613      	mov	r3, r2
 800c712:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c714:	2300      	movs	r3, #0
 800c716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c718:	2300      	movs	r3, #0
 800c71a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c722:	78bb      	ldrb	r3, [r7, #2]
 800c724:	883a      	ldrh	r2, [r7, #0]
 800c726:	78f9      	ldrb	r1, [r7, #3]
 800c728:	f7f7 fd4d 	bl	80041c6 <HAL_PCD_EP_Open>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	4618      	mov	r0, r3
 800c734:	f000 f91c 	bl	800c970 <USBD_Get_USB_Status>
 800c738:	4603      	mov	r3, r0
 800c73a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c73c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b084      	sub	sp, #16
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	460b      	mov	r3, r1
 800c750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c752:	2300      	movs	r3, #0
 800c754:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c760:	78fa      	ldrb	r2, [r7, #3]
 800c762:	4611      	mov	r1, r2
 800c764:	4618      	mov	r0, r3
 800c766:	f7f7 fd96 	bl	8004296 <HAL_PCD_EP_Close>
 800c76a:	4603      	mov	r3, r0
 800c76c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c76e:	7bfb      	ldrb	r3, [r7, #15]
 800c770:	4618      	mov	r0, r3
 800c772:	f000 f8fd 	bl	800c970 <USBD_Get_USB_Status>
 800c776:	4603      	mov	r3, r0
 800c778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c77a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	460b      	mov	r3, r1
 800c78e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c790:	2300      	movs	r3, #0
 800c792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c79e:	78fa      	ldrb	r2, [r7, #3]
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f7 fe50 	bl	8004448 <HAL_PCD_EP_SetStall>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f000 f8de 	bl	800c970 <USBD_Get_USB_Status>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7dc:	78fa      	ldrb	r2, [r7, #3]
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7f7 fe95 	bl	8004510 <HAL_PCD_EP_ClrStall>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 f8bf 	bl	800c970 <USBD_Get_USB_Status>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c812:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	da0b      	bge.n	800c834 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c81c:	78fb      	ldrb	r3, [r7, #3]
 800c81e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c822:	68f9      	ldr	r1, [r7, #12]
 800c824:	4613      	mov	r3, r2
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	4413      	add	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	440b      	add	r3, r1
 800c82e:	333e      	adds	r3, #62	; 0x3e
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	e00b      	b.n	800c84c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c83a:	68f9      	ldr	r1, [r7, #12]
 800c83c:	4613      	mov	r3, r2
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	4413      	add	r3, r2
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	440b      	add	r3, r1
 800c846:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c84a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	460b      	mov	r3, r1
 800c862:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c864:	2300      	movs	r3, #0
 800c866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c868:	2300      	movs	r3, #0
 800c86a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c872:	78fa      	ldrb	r2, [r7, #3]
 800c874:	4611      	mov	r1, r2
 800c876:	4618      	mov	r0, r3
 800c878:	f7f7 fc80 	bl	800417c <HAL_PCD_SetAddress>
 800c87c:	4603      	mov	r3, r0
 800c87e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c880:	7bfb      	ldrb	r3, [r7, #15]
 800c882:	4618      	mov	r0, r3
 800c884:	f000 f874 	bl	800c970 <USBD_Get_USB_Status>
 800c888:	4603      	mov	r3, r0
 800c88a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c88c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b086      	sub	sp, #24
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	60f8      	str	r0, [r7, #12]
 800c89e:	607a      	str	r2, [r7, #4]
 800c8a0:	603b      	str	r3, [r7, #0]
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8b4:	7af9      	ldrb	r1, [r7, #11]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	f7f7 fd8a 	bl	80043d2 <HAL_PCD_EP_Transmit>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8c2:	7dfb      	ldrb	r3, [r7, #23]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 f853 	bl	800c970 <USBD_Get_USB_Status>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	607a      	str	r2, [r7, #4]
 800c8e2:	603b      	str	r3, [r7, #0]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8f6:	7af9      	ldrb	r1, [r7, #11]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	f7f7 fd15 	bl	800432a <HAL_PCD_EP_Receive>
 800c900:	4603      	mov	r3, r0
 800c902:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c904:	7dfb      	ldrb	r3, [r7, #23]
 800c906:	4618      	mov	r0, r3
 800c908:	f000 f832 	bl	800c970 <USBD_Get_USB_Status>
 800c90c:	4603      	mov	r3, r0
 800c90e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c910:	7dbb      	ldrb	r3, [r7, #22]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3718      	adds	r7, #24
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b082      	sub	sp, #8
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	460b      	mov	r3, r1
 800c924:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c92c:	78fa      	ldrb	r2, [r7, #3]
 800c92e:	4611      	mov	r1, r2
 800c930:	4618      	mov	r0, r3
 800c932:	f7f7 fd36 	bl	80043a2 <HAL_PCD_EP_GetRxCount>
 800c936:	4603      	mov	r3, r0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c948:	4b03      	ldr	r3, [pc, #12]	; (800c958 <USBD_static_malloc+0x18>)
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	2400505c 	.word	0x2400505c

0800c95c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c964:	bf00      	nop
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	4603      	mov	r3, r0
 800c978:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c97e:	79fb      	ldrb	r3, [r7, #7]
 800c980:	2b03      	cmp	r3, #3
 800c982:	d817      	bhi.n	800c9b4 <USBD_Get_USB_Status+0x44>
 800c984:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <USBD_Get_USB_Status+0x1c>)
 800c986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98a:	bf00      	nop
 800c98c:	0800c99d 	.word	0x0800c99d
 800c990:	0800c9a3 	.word	0x0800c9a3
 800c994:	0800c9a9 	.word	0x0800c9a9
 800c998:	0800c9af 	.word	0x0800c9af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	73fb      	strb	r3, [r7, #15]
    break;
 800c9a0:	e00b      	b.n	800c9ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c9a6:	e008      	b.n	800c9ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c9ac:	e005      	b.n	800c9ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b2:	e002      	b.n	800c9ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b8:	bf00      	nop
  }
  return usb_status;
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <__errno>:
 800c9c8:	4b01      	ldr	r3, [pc, #4]	; (800c9d0 <__errno+0x8>)
 800c9ca:	6818      	ldr	r0, [r3, #0]
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	2400331c 	.word	0x2400331c

0800c9d4 <__libc_init_array>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	4d0d      	ldr	r5, [pc, #52]	; (800ca0c <__libc_init_array+0x38>)
 800c9d8:	4c0d      	ldr	r4, [pc, #52]	; (800ca10 <__libc_init_array+0x3c>)
 800c9da:	1b64      	subs	r4, r4, r5
 800c9dc:	10a4      	asrs	r4, r4, #2
 800c9de:	2600      	movs	r6, #0
 800c9e0:	42a6      	cmp	r6, r4
 800c9e2:	d109      	bne.n	800c9f8 <__libc_init_array+0x24>
 800c9e4:	4d0b      	ldr	r5, [pc, #44]	; (800ca14 <__libc_init_array+0x40>)
 800c9e6:	4c0c      	ldr	r4, [pc, #48]	; (800ca18 <__libc_init_array+0x44>)
 800c9e8:	f000 ff38 	bl	800d85c <_init>
 800c9ec:	1b64      	subs	r4, r4, r5
 800c9ee:	10a4      	asrs	r4, r4, #2
 800c9f0:	2600      	movs	r6, #0
 800c9f2:	42a6      	cmp	r6, r4
 800c9f4:	d105      	bne.n	800ca02 <__libc_init_array+0x2e>
 800c9f6:	bd70      	pop	{r4, r5, r6, pc}
 800c9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9fc:	4798      	blx	r3
 800c9fe:	3601      	adds	r6, #1
 800ca00:	e7ee      	b.n	800c9e0 <__libc_init_array+0xc>
 800ca02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca06:	4798      	blx	r3
 800ca08:	3601      	adds	r6, #1
 800ca0a:	e7f2      	b.n	800c9f2 <__libc_init_array+0x1e>
 800ca0c:	0800dfe8 	.word	0x0800dfe8
 800ca10:	0800dfe8 	.word	0x0800dfe8
 800ca14:	0800dfe8 	.word	0x0800dfe8
 800ca18:	0800dfec 	.word	0x0800dfec

0800ca1c <memset>:
 800ca1c:	4402      	add	r2, r0
 800ca1e:	4603      	mov	r3, r0
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d100      	bne.n	800ca26 <memset+0xa>
 800ca24:	4770      	bx	lr
 800ca26:	f803 1b01 	strb.w	r1, [r3], #1
 800ca2a:	e7f9      	b.n	800ca20 <memset+0x4>

0800ca2c <sniprintf>:
 800ca2c:	b40c      	push	{r2, r3}
 800ca2e:	b530      	push	{r4, r5, lr}
 800ca30:	4b17      	ldr	r3, [pc, #92]	; (800ca90 <sniprintf+0x64>)
 800ca32:	1e0c      	subs	r4, r1, #0
 800ca34:	681d      	ldr	r5, [r3, #0]
 800ca36:	b09d      	sub	sp, #116	; 0x74
 800ca38:	da08      	bge.n	800ca4c <sniprintf+0x20>
 800ca3a:	238b      	movs	r3, #139	; 0x8b
 800ca3c:	602b      	str	r3, [r5, #0]
 800ca3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca42:	b01d      	add	sp, #116	; 0x74
 800ca44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca48:	b002      	add	sp, #8
 800ca4a:	4770      	bx	lr
 800ca4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ca50:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca54:	bf14      	ite	ne
 800ca56:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ca5a:	4623      	moveq	r3, r4
 800ca5c:	9304      	str	r3, [sp, #16]
 800ca5e:	9307      	str	r3, [sp, #28]
 800ca60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca64:	9002      	str	r0, [sp, #8]
 800ca66:	9006      	str	r0, [sp, #24]
 800ca68:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ca6e:	ab21      	add	r3, sp, #132	; 0x84
 800ca70:	a902      	add	r1, sp, #8
 800ca72:	4628      	mov	r0, r5
 800ca74:	9301      	str	r3, [sp, #4]
 800ca76:	f000 f869 	bl	800cb4c <_svfiprintf_r>
 800ca7a:	1c43      	adds	r3, r0, #1
 800ca7c:	bfbc      	itt	lt
 800ca7e:	238b      	movlt	r3, #139	; 0x8b
 800ca80:	602b      	strlt	r3, [r5, #0]
 800ca82:	2c00      	cmp	r4, #0
 800ca84:	d0dd      	beq.n	800ca42 <sniprintf+0x16>
 800ca86:	9b02      	ldr	r3, [sp, #8]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	e7d9      	b.n	800ca42 <sniprintf+0x16>
 800ca8e:	bf00      	nop
 800ca90:	2400331c 	.word	0x2400331c

0800ca94 <__ssputs_r>:
 800ca94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca98:	688e      	ldr	r6, [r1, #8]
 800ca9a:	429e      	cmp	r6, r3
 800ca9c:	4682      	mov	sl, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	4690      	mov	r8, r2
 800caa2:	461f      	mov	r7, r3
 800caa4:	d838      	bhi.n	800cb18 <__ssputs_r+0x84>
 800caa6:	898a      	ldrh	r2, [r1, #12]
 800caa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800caac:	d032      	beq.n	800cb14 <__ssputs_r+0x80>
 800caae:	6825      	ldr	r5, [r4, #0]
 800cab0:	6909      	ldr	r1, [r1, #16]
 800cab2:	eba5 0901 	sub.w	r9, r5, r1
 800cab6:	6965      	ldr	r5, [r4, #20]
 800cab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cabc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cac0:	3301      	adds	r3, #1
 800cac2:	444b      	add	r3, r9
 800cac4:	106d      	asrs	r5, r5, #1
 800cac6:	429d      	cmp	r5, r3
 800cac8:	bf38      	it	cc
 800caca:	461d      	movcc	r5, r3
 800cacc:	0553      	lsls	r3, r2, #21
 800cace:	d531      	bpl.n	800cb34 <__ssputs_r+0xa0>
 800cad0:	4629      	mov	r1, r5
 800cad2:	f000 fb63 	bl	800d19c <_malloc_r>
 800cad6:	4606      	mov	r6, r0
 800cad8:	b950      	cbnz	r0, 800caf0 <__ssputs_r+0x5c>
 800cada:	230c      	movs	r3, #12
 800cadc:	f8ca 3000 	str.w	r3, [sl]
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cae6:	81a3      	strh	r3, [r4, #12]
 800cae8:	f04f 30ff 	mov.w	r0, #4294967295
 800caec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf0:	6921      	ldr	r1, [r4, #16]
 800caf2:	464a      	mov	r2, r9
 800caf4:	f000 fabe 	bl	800d074 <memcpy>
 800caf8:	89a3      	ldrh	r3, [r4, #12]
 800cafa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb02:	81a3      	strh	r3, [r4, #12]
 800cb04:	6126      	str	r6, [r4, #16]
 800cb06:	6165      	str	r5, [r4, #20]
 800cb08:	444e      	add	r6, r9
 800cb0a:	eba5 0509 	sub.w	r5, r5, r9
 800cb0e:	6026      	str	r6, [r4, #0]
 800cb10:	60a5      	str	r5, [r4, #8]
 800cb12:	463e      	mov	r6, r7
 800cb14:	42be      	cmp	r6, r7
 800cb16:	d900      	bls.n	800cb1a <__ssputs_r+0x86>
 800cb18:	463e      	mov	r6, r7
 800cb1a:	6820      	ldr	r0, [r4, #0]
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	4641      	mov	r1, r8
 800cb20:	f000 fab6 	bl	800d090 <memmove>
 800cb24:	68a3      	ldr	r3, [r4, #8]
 800cb26:	1b9b      	subs	r3, r3, r6
 800cb28:	60a3      	str	r3, [r4, #8]
 800cb2a:	6823      	ldr	r3, [r4, #0]
 800cb2c:	4433      	add	r3, r6
 800cb2e:	6023      	str	r3, [r4, #0]
 800cb30:	2000      	movs	r0, #0
 800cb32:	e7db      	b.n	800caec <__ssputs_r+0x58>
 800cb34:	462a      	mov	r2, r5
 800cb36:	f000 fba5 	bl	800d284 <_realloc_r>
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d1e1      	bne.n	800cb04 <__ssputs_r+0x70>
 800cb40:	6921      	ldr	r1, [r4, #16]
 800cb42:	4650      	mov	r0, sl
 800cb44:	f000 fabe 	bl	800d0c4 <_free_r>
 800cb48:	e7c7      	b.n	800cada <__ssputs_r+0x46>
	...

0800cb4c <_svfiprintf_r>:
 800cb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb50:	4698      	mov	r8, r3
 800cb52:	898b      	ldrh	r3, [r1, #12]
 800cb54:	061b      	lsls	r3, r3, #24
 800cb56:	b09d      	sub	sp, #116	; 0x74
 800cb58:	4607      	mov	r7, r0
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	4614      	mov	r4, r2
 800cb5e:	d50e      	bpl.n	800cb7e <_svfiprintf_r+0x32>
 800cb60:	690b      	ldr	r3, [r1, #16]
 800cb62:	b963      	cbnz	r3, 800cb7e <_svfiprintf_r+0x32>
 800cb64:	2140      	movs	r1, #64	; 0x40
 800cb66:	f000 fb19 	bl	800d19c <_malloc_r>
 800cb6a:	6028      	str	r0, [r5, #0]
 800cb6c:	6128      	str	r0, [r5, #16]
 800cb6e:	b920      	cbnz	r0, 800cb7a <_svfiprintf_r+0x2e>
 800cb70:	230c      	movs	r3, #12
 800cb72:	603b      	str	r3, [r7, #0]
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295
 800cb78:	e0d1      	b.n	800cd1e <_svfiprintf_r+0x1d2>
 800cb7a:	2340      	movs	r3, #64	; 0x40
 800cb7c:	616b      	str	r3, [r5, #20]
 800cb7e:	2300      	movs	r3, #0
 800cb80:	9309      	str	r3, [sp, #36]	; 0x24
 800cb82:	2320      	movs	r3, #32
 800cb84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb88:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb8c:	2330      	movs	r3, #48	; 0x30
 800cb8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd38 <_svfiprintf_r+0x1ec>
 800cb92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb96:	f04f 0901 	mov.w	r9, #1
 800cb9a:	4623      	mov	r3, r4
 800cb9c:	469a      	mov	sl, r3
 800cb9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cba2:	b10a      	cbz	r2, 800cba8 <_svfiprintf_r+0x5c>
 800cba4:	2a25      	cmp	r2, #37	; 0x25
 800cba6:	d1f9      	bne.n	800cb9c <_svfiprintf_r+0x50>
 800cba8:	ebba 0b04 	subs.w	fp, sl, r4
 800cbac:	d00b      	beq.n	800cbc6 <_svfiprintf_r+0x7a>
 800cbae:	465b      	mov	r3, fp
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	f7ff ff6d 	bl	800ca94 <__ssputs_r>
 800cbba:	3001      	adds	r0, #1
 800cbbc:	f000 80aa 	beq.w	800cd14 <_svfiprintf_r+0x1c8>
 800cbc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbc2:	445a      	add	r2, fp
 800cbc4:	9209      	str	r2, [sp, #36]	; 0x24
 800cbc6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f000 80a2 	beq.w	800cd14 <_svfiprintf_r+0x1c8>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbda:	f10a 0a01 	add.w	sl, sl, #1
 800cbde:	9304      	str	r3, [sp, #16]
 800cbe0:	9307      	str	r3, [sp, #28]
 800cbe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbe6:	931a      	str	r3, [sp, #104]	; 0x68
 800cbe8:	4654      	mov	r4, sl
 800cbea:	2205      	movs	r2, #5
 800cbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf0:	4851      	ldr	r0, [pc, #324]	; (800cd38 <_svfiprintf_r+0x1ec>)
 800cbf2:	f7f3 fb7d 	bl	80002f0 <memchr>
 800cbf6:	9a04      	ldr	r2, [sp, #16]
 800cbf8:	b9d8      	cbnz	r0, 800cc32 <_svfiprintf_r+0xe6>
 800cbfa:	06d0      	lsls	r0, r2, #27
 800cbfc:	bf44      	itt	mi
 800cbfe:	2320      	movmi	r3, #32
 800cc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc04:	0711      	lsls	r1, r2, #28
 800cc06:	bf44      	itt	mi
 800cc08:	232b      	movmi	r3, #43	; 0x2b
 800cc0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc12:	2b2a      	cmp	r3, #42	; 0x2a
 800cc14:	d015      	beq.n	800cc42 <_svfiprintf_r+0xf6>
 800cc16:	9a07      	ldr	r2, [sp, #28]
 800cc18:	4654      	mov	r4, sl
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	f04f 0c0a 	mov.w	ip, #10
 800cc20:	4621      	mov	r1, r4
 800cc22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc26:	3b30      	subs	r3, #48	; 0x30
 800cc28:	2b09      	cmp	r3, #9
 800cc2a:	d94e      	bls.n	800ccca <_svfiprintf_r+0x17e>
 800cc2c:	b1b0      	cbz	r0, 800cc5c <_svfiprintf_r+0x110>
 800cc2e:	9207      	str	r2, [sp, #28]
 800cc30:	e014      	b.n	800cc5c <_svfiprintf_r+0x110>
 800cc32:	eba0 0308 	sub.w	r3, r0, r8
 800cc36:	fa09 f303 	lsl.w	r3, r9, r3
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	9304      	str	r3, [sp, #16]
 800cc3e:	46a2      	mov	sl, r4
 800cc40:	e7d2      	b.n	800cbe8 <_svfiprintf_r+0x9c>
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	1d19      	adds	r1, r3, #4
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	9103      	str	r1, [sp, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	bfbb      	ittet	lt
 800cc4e:	425b      	neglt	r3, r3
 800cc50:	f042 0202 	orrlt.w	r2, r2, #2
 800cc54:	9307      	strge	r3, [sp, #28]
 800cc56:	9307      	strlt	r3, [sp, #28]
 800cc58:	bfb8      	it	lt
 800cc5a:	9204      	strlt	r2, [sp, #16]
 800cc5c:	7823      	ldrb	r3, [r4, #0]
 800cc5e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc60:	d10c      	bne.n	800cc7c <_svfiprintf_r+0x130>
 800cc62:	7863      	ldrb	r3, [r4, #1]
 800cc64:	2b2a      	cmp	r3, #42	; 0x2a
 800cc66:	d135      	bne.n	800ccd4 <_svfiprintf_r+0x188>
 800cc68:	9b03      	ldr	r3, [sp, #12]
 800cc6a:	1d1a      	adds	r2, r3, #4
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	9203      	str	r2, [sp, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	bfb8      	it	lt
 800cc74:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc78:	3402      	adds	r4, #2
 800cc7a:	9305      	str	r3, [sp, #20]
 800cc7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd48 <_svfiprintf_r+0x1fc>
 800cc80:	7821      	ldrb	r1, [r4, #0]
 800cc82:	2203      	movs	r2, #3
 800cc84:	4650      	mov	r0, sl
 800cc86:	f7f3 fb33 	bl	80002f0 <memchr>
 800cc8a:	b140      	cbz	r0, 800cc9e <_svfiprintf_r+0x152>
 800cc8c:	2340      	movs	r3, #64	; 0x40
 800cc8e:	eba0 000a 	sub.w	r0, r0, sl
 800cc92:	fa03 f000 	lsl.w	r0, r3, r0
 800cc96:	9b04      	ldr	r3, [sp, #16]
 800cc98:	4303      	orrs	r3, r0
 800cc9a:	3401      	adds	r4, #1
 800cc9c:	9304      	str	r3, [sp, #16]
 800cc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cca2:	4826      	ldr	r0, [pc, #152]	; (800cd3c <_svfiprintf_r+0x1f0>)
 800cca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cca8:	2206      	movs	r2, #6
 800ccaa:	f7f3 fb21 	bl	80002f0 <memchr>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d038      	beq.n	800cd24 <_svfiprintf_r+0x1d8>
 800ccb2:	4b23      	ldr	r3, [pc, #140]	; (800cd40 <_svfiprintf_r+0x1f4>)
 800ccb4:	bb1b      	cbnz	r3, 800ccfe <_svfiprintf_r+0x1b2>
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	3307      	adds	r3, #7
 800ccba:	f023 0307 	bic.w	r3, r3, #7
 800ccbe:	3308      	adds	r3, #8
 800ccc0:	9303      	str	r3, [sp, #12]
 800ccc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc4:	4433      	add	r3, r6
 800ccc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccc8:	e767      	b.n	800cb9a <_svfiprintf_r+0x4e>
 800ccca:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccce:	460c      	mov	r4, r1
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	e7a5      	b.n	800cc20 <_svfiprintf_r+0xd4>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	3401      	adds	r4, #1
 800ccd8:	9305      	str	r3, [sp, #20]
 800ccda:	4619      	mov	r1, r3
 800ccdc:	f04f 0c0a 	mov.w	ip, #10
 800cce0:	4620      	mov	r0, r4
 800cce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cce6:	3a30      	subs	r2, #48	; 0x30
 800cce8:	2a09      	cmp	r2, #9
 800ccea:	d903      	bls.n	800ccf4 <_svfiprintf_r+0x1a8>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0c5      	beq.n	800cc7c <_svfiprintf_r+0x130>
 800ccf0:	9105      	str	r1, [sp, #20]
 800ccf2:	e7c3      	b.n	800cc7c <_svfiprintf_r+0x130>
 800ccf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e7f0      	b.n	800cce0 <_svfiprintf_r+0x194>
 800ccfe:	ab03      	add	r3, sp, #12
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	462a      	mov	r2, r5
 800cd04:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <_svfiprintf_r+0x1f8>)
 800cd06:	a904      	add	r1, sp, #16
 800cd08:	4638      	mov	r0, r7
 800cd0a:	f3af 8000 	nop.w
 800cd0e:	1c42      	adds	r2, r0, #1
 800cd10:	4606      	mov	r6, r0
 800cd12:	d1d6      	bne.n	800ccc2 <_svfiprintf_r+0x176>
 800cd14:	89ab      	ldrh	r3, [r5, #12]
 800cd16:	065b      	lsls	r3, r3, #25
 800cd18:	f53f af2c 	bmi.w	800cb74 <_svfiprintf_r+0x28>
 800cd1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd1e:	b01d      	add	sp, #116	; 0x74
 800cd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd24:	ab03      	add	r3, sp, #12
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	462a      	mov	r2, r5
 800cd2a:	4b06      	ldr	r3, [pc, #24]	; (800cd44 <_svfiprintf_r+0x1f8>)
 800cd2c:	a904      	add	r1, sp, #16
 800cd2e:	4638      	mov	r0, r7
 800cd30:	f000 f87a 	bl	800ce28 <_printf_i>
 800cd34:	e7eb      	b.n	800cd0e <_svfiprintf_r+0x1c2>
 800cd36:	bf00      	nop
 800cd38:	0800dd48 	.word	0x0800dd48
 800cd3c:	0800dd52 	.word	0x0800dd52
 800cd40:	00000000 	.word	0x00000000
 800cd44:	0800ca95 	.word	0x0800ca95
 800cd48:	0800dd4e 	.word	0x0800dd4e

0800cd4c <_printf_common>:
 800cd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd50:	4616      	mov	r6, r2
 800cd52:	4699      	mov	r9, r3
 800cd54:	688a      	ldr	r2, [r1, #8]
 800cd56:	690b      	ldr	r3, [r1, #16]
 800cd58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	bfb8      	it	lt
 800cd60:	4613      	movlt	r3, r2
 800cd62:	6033      	str	r3, [r6, #0]
 800cd64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd68:	4607      	mov	r7, r0
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	b10a      	cbz	r2, 800cd72 <_printf_common+0x26>
 800cd6e:	3301      	adds	r3, #1
 800cd70:	6033      	str	r3, [r6, #0]
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	0699      	lsls	r1, r3, #26
 800cd76:	bf42      	ittt	mi
 800cd78:	6833      	ldrmi	r3, [r6, #0]
 800cd7a:	3302      	addmi	r3, #2
 800cd7c:	6033      	strmi	r3, [r6, #0]
 800cd7e:	6825      	ldr	r5, [r4, #0]
 800cd80:	f015 0506 	ands.w	r5, r5, #6
 800cd84:	d106      	bne.n	800cd94 <_printf_common+0x48>
 800cd86:	f104 0a19 	add.w	sl, r4, #25
 800cd8a:	68e3      	ldr	r3, [r4, #12]
 800cd8c:	6832      	ldr	r2, [r6, #0]
 800cd8e:	1a9b      	subs	r3, r3, r2
 800cd90:	42ab      	cmp	r3, r5
 800cd92:	dc26      	bgt.n	800cde2 <_printf_common+0x96>
 800cd94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd98:	1e13      	subs	r3, r2, #0
 800cd9a:	6822      	ldr	r2, [r4, #0]
 800cd9c:	bf18      	it	ne
 800cd9e:	2301      	movne	r3, #1
 800cda0:	0692      	lsls	r2, r2, #26
 800cda2:	d42b      	bmi.n	800cdfc <_printf_common+0xb0>
 800cda4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cda8:	4649      	mov	r1, r9
 800cdaa:	4638      	mov	r0, r7
 800cdac:	47c0      	blx	r8
 800cdae:	3001      	adds	r0, #1
 800cdb0:	d01e      	beq.n	800cdf0 <_printf_common+0xa4>
 800cdb2:	6823      	ldr	r3, [r4, #0]
 800cdb4:	68e5      	ldr	r5, [r4, #12]
 800cdb6:	6832      	ldr	r2, [r6, #0]
 800cdb8:	f003 0306 	and.w	r3, r3, #6
 800cdbc:	2b04      	cmp	r3, #4
 800cdbe:	bf08      	it	eq
 800cdc0:	1aad      	subeq	r5, r5, r2
 800cdc2:	68a3      	ldr	r3, [r4, #8]
 800cdc4:	6922      	ldr	r2, [r4, #16]
 800cdc6:	bf0c      	ite	eq
 800cdc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdcc:	2500      	movne	r5, #0
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	bfc4      	itt	gt
 800cdd2:	1a9b      	subgt	r3, r3, r2
 800cdd4:	18ed      	addgt	r5, r5, r3
 800cdd6:	2600      	movs	r6, #0
 800cdd8:	341a      	adds	r4, #26
 800cdda:	42b5      	cmp	r5, r6
 800cddc:	d11a      	bne.n	800ce14 <_printf_common+0xc8>
 800cdde:	2000      	movs	r0, #0
 800cde0:	e008      	b.n	800cdf4 <_printf_common+0xa8>
 800cde2:	2301      	movs	r3, #1
 800cde4:	4652      	mov	r2, sl
 800cde6:	4649      	mov	r1, r9
 800cde8:	4638      	mov	r0, r7
 800cdea:	47c0      	blx	r8
 800cdec:	3001      	adds	r0, #1
 800cdee:	d103      	bne.n	800cdf8 <_printf_common+0xac>
 800cdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf8:	3501      	adds	r5, #1
 800cdfa:	e7c6      	b.n	800cd8a <_printf_common+0x3e>
 800cdfc:	18e1      	adds	r1, r4, r3
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	2030      	movs	r0, #48	; 0x30
 800ce02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce06:	4422      	add	r2, r4
 800ce08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce10:	3302      	adds	r3, #2
 800ce12:	e7c7      	b.n	800cda4 <_printf_common+0x58>
 800ce14:	2301      	movs	r3, #1
 800ce16:	4622      	mov	r2, r4
 800ce18:	4649      	mov	r1, r9
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	47c0      	blx	r8
 800ce1e:	3001      	adds	r0, #1
 800ce20:	d0e6      	beq.n	800cdf0 <_printf_common+0xa4>
 800ce22:	3601      	adds	r6, #1
 800ce24:	e7d9      	b.n	800cdda <_printf_common+0x8e>
	...

0800ce28 <_printf_i>:
 800ce28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce2c:	7e0f      	ldrb	r7, [r1, #24]
 800ce2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce30:	2f78      	cmp	r7, #120	; 0x78
 800ce32:	4691      	mov	r9, r2
 800ce34:	4680      	mov	r8, r0
 800ce36:	460c      	mov	r4, r1
 800ce38:	469a      	mov	sl, r3
 800ce3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce3e:	d807      	bhi.n	800ce50 <_printf_i+0x28>
 800ce40:	2f62      	cmp	r7, #98	; 0x62
 800ce42:	d80a      	bhi.n	800ce5a <_printf_i+0x32>
 800ce44:	2f00      	cmp	r7, #0
 800ce46:	f000 80d8 	beq.w	800cffa <_printf_i+0x1d2>
 800ce4a:	2f58      	cmp	r7, #88	; 0x58
 800ce4c:	f000 80a3 	beq.w	800cf96 <_printf_i+0x16e>
 800ce50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce58:	e03a      	b.n	800ced0 <_printf_i+0xa8>
 800ce5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce5e:	2b15      	cmp	r3, #21
 800ce60:	d8f6      	bhi.n	800ce50 <_printf_i+0x28>
 800ce62:	a101      	add	r1, pc, #4	; (adr r1, 800ce68 <_printf_i+0x40>)
 800ce64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce68:	0800cec1 	.word	0x0800cec1
 800ce6c:	0800ced5 	.word	0x0800ced5
 800ce70:	0800ce51 	.word	0x0800ce51
 800ce74:	0800ce51 	.word	0x0800ce51
 800ce78:	0800ce51 	.word	0x0800ce51
 800ce7c:	0800ce51 	.word	0x0800ce51
 800ce80:	0800ced5 	.word	0x0800ced5
 800ce84:	0800ce51 	.word	0x0800ce51
 800ce88:	0800ce51 	.word	0x0800ce51
 800ce8c:	0800ce51 	.word	0x0800ce51
 800ce90:	0800ce51 	.word	0x0800ce51
 800ce94:	0800cfe1 	.word	0x0800cfe1
 800ce98:	0800cf05 	.word	0x0800cf05
 800ce9c:	0800cfc3 	.word	0x0800cfc3
 800cea0:	0800ce51 	.word	0x0800ce51
 800cea4:	0800ce51 	.word	0x0800ce51
 800cea8:	0800d003 	.word	0x0800d003
 800ceac:	0800ce51 	.word	0x0800ce51
 800ceb0:	0800cf05 	.word	0x0800cf05
 800ceb4:	0800ce51 	.word	0x0800ce51
 800ceb8:	0800ce51 	.word	0x0800ce51
 800cebc:	0800cfcb 	.word	0x0800cfcb
 800cec0:	682b      	ldr	r3, [r5, #0]
 800cec2:	1d1a      	adds	r2, r3, #4
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	602a      	str	r2, [r5, #0]
 800cec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ced0:	2301      	movs	r3, #1
 800ced2:	e0a3      	b.n	800d01c <_printf_i+0x1f4>
 800ced4:	6820      	ldr	r0, [r4, #0]
 800ced6:	6829      	ldr	r1, [r5, #0]
 800ced8:	0606      	lsls	r6, r0, #24
 800ceda:	f101 0304 	add.w	r3, r1, #4
 800cede:	d50a      	bpl.n	800cef6 <_printf_i+0xce>
 800cee0:	680e      	ldr	r6, [r1, #0]
 800cee2:	602b      	str	r3, [r5, #0]
 800cee4:	2e00      	cmp	r6, #0
 800cee6:	da03      	bge.n	800cef0 <_printf_i+0xc8>
 800cee8:	232d      	movs	r3, #45	; 0x2d
 800ceea:	4276      	negs	r6, r6
 800ceec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cef0:	485e      	ldr	r0, [pc, #376]	; (800d06c <_printf_i+0x244>)
 800cef2:	230a      	movs	r3, #10
 800cef4:	e019      	b.n	800cf2a <_printf_i+0x102>
 800cef6:	680e      	ldr	r6, [r1, #0]
 800cef8:	602b      	str	r3, [r5, #0]
 800cefa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cefe:	bf18      	it	ne
 800cf00:	b236      	sxthne	r6, r6
 800cf02:	e7ef      	b.n	800cee4 <_printf_i+0xbc>
 800cf04:	682b      	ldr	r3, [r5, #0]
 800cf06:	6820      	ldr	r0, [r4, #0]
 800cf08:	1d19      	adds	r1, r3, #4
 800cf0a:	6029      	str	r1, [r5, #0]
 800cf0c:	0601      	lsls	r1, r0, #24
 800cf0e:	d501      	bpl.n	800cf14 <_printf_i+0xec>
 800cf10:	681e      	ldr	r6, [r3, #0]
 800cf12:	e002      	b.n	800cf1a <_printf_i+0xf2>
 800cf14:	0646      	lsls	r6, r0, #25
 800cf16:	d5fb      	bpl.n	800cf10 <_printf_i+0xe8>
 800cf18:	881e      	ldrh	r6, [r3, #0]
 800cf1a:	4854      	ldr	r0, [pc, #336]	; (800d06c <_printf_i+0x244>)
 800cf1c:	2f6f      	cmp	r7, #111	; 0x6f
 800cf1e:	bf0c      	ite	eq
 800cf20:	2308      	moveq	r3, #8
 800cf22:	230a      	movne	r3, #10
 800cf24:	2100      	movs	r1, #0
 800cf26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf2a:	6865      	ldr	r5, [r4, #4]
 800cf2c:	60a5      	str	r5, [r4, #8]
 800cf2e:	2d00      	cmp	r5, #0
 800cf30:	bfa2      	ittt	ge
 800cf32:	6821      	ldrge	r1, [r4, #0]
 800cf34:	f021 0104 	bicge.w	r1, r1, #4
 800cf38:	6021      	strge	r1, [r4, #0]
 800cf3a:	b90e      	cbnz	r6, 800cf40 <_printf_i+0x118>
 800cf3c:	2d00      	cmp	r5, #0
 800cf3e:	d04d      	beq.n	800cfdc <_printf_i+0x1b4>
 800cf40:	4615      	mov	r5, r2
 800cf42:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf46:	fb03 6711 	mls	r7, r3, r1, r6
 800cf4a:	5dc7      	ldrb	r7, [r0, r7]
 800cf4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf50:	4637      	mov	r7, r6
 800cf52:	42bb      	cmp	r3, r7
 800cf54:	460e      	mov	r6, r1
 800cf56:	d9f4      	bls.n	800cf42 <_printf_i+0x11a>
 800cf58:	2b08      	cmp	r3, #8
 800cf5a:	d10b      	bne.n	800cf74 <_printf_i+0x14c>
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	07de      	lsls	r6, r3, #31
 800cf60:	d508      	bpl.n	800cf74 <_printf_i+0x14c>
 800cf62:	6923      	ldr	r3, [r4, #16]
 800cf64:	6861      	ldr	r1, [r4, #4]
 800cf66:	4299      	cmp	r1, r3
 800cf68:	bfde      	ittt	le
 800cf6a:	2330      	movle	r3, #48	; 0x30
 800cf6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf74:	1b52      	subs	r2, r2, r5
 800cf76:	6122      	str	r2, [r4, #16]
 800cf78:	f8cd a000 	str.w	sl, [sp]
 800cf7c:	464b      	mov	r3, r9
 800cf7e:	aa03      	add	r2, sp, #12
 800cf80:	4621      	mov	r1, r4
 800cf82:	4640      	mov	r0, r8
 800cf84:	f7ff fee2 	bl	800cd4c <_printf_common>
 800cf88:	3001      	adds	r0, #1
 800cf8a:	d14c      	bne.n	800d026 <_printf_i+0x1fe>
 800cf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf90:	b004      	add	sp, #16
 800cf92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf96:	4835      	ldr	r0, [pc, #212]	; (800d06c <_printf_i+0x244>)
 800cf98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf9c:	6829      	ldr	r1, [r5, #0]
 800cf9e:	6823      	ldr	r3, [r4, #0]
 800cfa0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cfa4:	6029      	str	r1, [r5, #0]
 800cfa6:	061d      	lsls	r5, r3, #24
 800cfa8:	d514      	bpl.n	800cfd4 <_printf_i+0x1ac>
 800cfaa:	07df      	lsls	r7, r3, #31
 800cfac:	bf44      	itt	mi
 800cfae:	f043 0320 	orrmi.w	r3, r3, #32
 800cfb2:	6023      	strmi	r3, [r4, #0]
 800cfb4:	b91e      	cbnz	r6, 800cfbe <_printf_i+0x196>
 800cfb6:	6823      	ldr	r3, [r4, #0]
 800cfb8:	f023 0320 	bic.w	r3, r3, #32
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	2310      	movs	r3, #16
 800cfc0:	e7b0      	b.n	800cf24 <_printf_i+0xfc>
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	f043 0320 	orr.w	r3, r3, #32
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	2378      	movs	r3, #120	; 0x78
 800cfcc:	4828      	ldr	r0, [pc, #160]	; (800d070 <_printf_i+0x248>)
 800cfce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfd2:	e7e3      	b.n	800cf9c <_printf_i+0x174>
 800cfd4:	0659      	lsls	r1, r3, #25
 800cfd6:	bf48      	it	mi
 800cfd8:	b2b6      	uxthmi	r6, r6
 800cfda:	e7e6      	b.n	800cfaa <_printf_i+0x182>
 800cfdc:	4615      	mov	r5, r2
 800cfde:	e7bb      	b.n	800cf58 <_printf_i+0x130>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	6826      	ldr	r6, [r4, #0]
 800cfe4:	6961      	ldr	r1, [r4, #20]
 800cfe6:	1d18      	adds	r0, r3, #4
 800cfe8:	6028      	str	r0, [r5, #0]
 800cfea:	0635      	lsls	r5, r6, #24
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	d501      	bpl.n	800cff4 <_printf_i+0x1cc>
 800cff0:	6019      	str	r1, [r3, #0]
 800cff2:	e002      	b.n	800cffa <_printf_i+0x1d2>
 800cff4:	0670      	lsls	r0, r6, #25
 800cff6:	d5fb      	bpl.n	800cff0 <_printf_i+0x1c8>
 800cff8:	8019      	strh	r1, [r3, #0]
 800cffa:	2300      	movs	r3, #0
 800cffc:	6123      	str	r3, [r4, #16]
 800cffe:	4615      	mov	r5, r2
 800d000:	e7ba      	b.n	800cf78 <_printf_i+0x150>
 800d002:	682b      	ldr	r3, [r5, #0]
 800d004:	1d1a      	adds	r2, r3, #4
 800d006:	602a      	str	r2, [r5, #0]
 800d008:	681d      	ldr	r5, [r3, #0]
 800d00a:	6862      	ldr	r2, [r4, #4]
 800d00c:	2100      	movs	r1, #0
 800d00e:	4628      	mov	r0, r5
 800d010:	f7f3 f96e 	bl	80002f0 <memchr>
 800d014:	b108      	cbz	r0, 800d01a <_printf_i+0x1f2>
 800d016:	1b40      	subs	r0, r0, r5
 800d018:	6060      	str	r0, [r4, #4]
 800d01a:	6863      	ldr	r3, [r4, #4]
 800d01c:	6123      	str	r3, [r4, #16]
 800d01e:	2300      	movs	r3, #0
 800d020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d024:	e7a8      	b.n	800cf78 <_printf_i+0x150>
 800d026:	6923      	ldr	r3, [r4, #16]
 800d028:	462a      	mov	r2, r5
 800d02a:	4649      	mov	r1, r9
 800d02c:	4640      	mov	r0, r8
 800d02e:	47d0      	blx	sl
 800d030:	3001      	adds	r0, #1
 800d032:	d0ab      	beq.n	800cf8c <_printf_i+0x164>
 800d034:	6823      	ldr	r3, [r4, #0]
 800d036:	079b      	lsls	r3, r3, #30
 800d038:	d413      	bmi.n	800d062 <_printf_i+0x23a>
 800d03a:	68e0      	ldr	r0, [r4, #12]
 800d03c:	9b03      	ldr	r3, [sp, #12]
 800d03e:	4298      	cmp	r0, r3
 800d040:	bfb8      	it	lt
 800d042:	4618      	movlt	r0, r3
 800d044:	e7a4      	b.n	800cf90 <_printf_i+0x168>
 800d046:	2301      	movs	r3, #1
 800d048:	4632      	mov	r2, r6
 800d04a:	4649      	mov	r1, r9
 800d04c:	4640      	mov	r0, r8
 800d04e:	47d0      	blx	sl
 800d050:	3001      	adds	r0, #1
 800d052:	d09b      	beq.n	800cf8c <_printf_i+0x164>
 800d054:	3501      	adds	r5, #1
 800d056:	68e3      	ldr	r3, [r4, #12]
 800d058:	9903      	ldr	r1, [sp, #12]
 800d05a:	1a5b      	subs	r3, r3, r1
 800d05c:	42ab      	cmp	r3, r5
 800d05e:	dcf2      	bgt.n	800d046 <_printf_i+0x21e>
 800d060:	e7eb      	b.n	800d03a <_printf_i+0x212>
 800d062:	2500      	movs	r5, #0
 800d064:	f104 0619 	add.w	r6, r4, #25
 800d068:	e7f5      	b.n	800d056 <_printf_i+0x22e>
 800d06a:	bf00      	nop
 800d06c:	0800dd59 	.word	0x0800dd59
 800d070:	0800dd6a 	.word	0x0800dd6a

0800d074 <memcpy>:
 800d074:	440a      	add	r2, r1
 800d076:	4291      	cmp	r1, r2
 800d078:	f100 33ff 	add.w	r3, r0, #4294967295
 800d07c:	d100      	bne.n	800d080 <memcpy+0xc>
 800d07e:	4770      	bx	lr
 800d080:	b510      	push	{r4, lr}
 800d082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d08a:	4291      	cmp	r1, r2
 800d08c:	d1f9      	bne.n	800d082 <memcpy+0xe>
 800d08e:	bd10      	pop	{r4, pc}

0800d090 <memmove>:
 800d090:	4288      	cmp	r0, r1
 800d092:	b510      	push	{r4, lr}
 800d094:	eb01 0402 	add.w	r4, r1, r2
 800d098:	d902      	bls.n	800d0a0 <memmove+0x10>
 800d09a:	4284      	cmp	r4, r0
 800d09c:	4623      	mov	r3, r4
 800d09e:	d807      	bhi.n	800d0b0 <memmove+0x20>
 800d0a0:	1e43      	subs	r3, r0, #1
 800d0a2:	42a1      	cmp	r1, r4
 800d0a4:	d008      	beq.n	800d0b8 <memmove+0x28>
 800d0a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0ae:	e7f8      	b.n	800d0a2 <memmove+0x12>
 800d0b0:	4402      	add	r2, r0
 800d0b2:	4601      	mov	r1, r0
 800d0b4:	428a      	cmp	r2, r1
 800d0b6:	d100      	bne.n	800d0ba <memmove+0x2a>
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0c2:	e7f7      	b.n	800d0b4 <memmove+0x24>

0800d0c4 <_free_r>:
 800d0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0c6:	2900      	cmp	r1, #0
 800d0c8:	d044      	beq.n	800d154 <_free_r+0x90>
 800d0ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0ce:	9001      	str	r0, [sp, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f1a1 0404 	sub.w	r4, r1, #4
 800d0d6:	bfb8      	it	lt
 800d0d8:	18e4      	addlt	r4, r4, r3
 800d0da:	f000 f913 	bl	800d304 <__malloc_lock>
 800d0de:	4a1e      	ldr	r2, [pc, #120]	; (800d158 <_free_r+0x94>)
 800d0e0:	9801      	ldr	r0, [sp, #4]
 800d0e2:	6813      	ldr	r3, [r2, #0]
 800d0e4:	b933      	cbnz	r3, 800d0f4 <_free_r+0x30>
 800d0e6:	6063      	str	r3, [r4, #4]
 800d0e8:	6014      	str	r4, [r2, #0]
 800d0ea:	b003      	add	sp, #12
 800d0ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0f0:	f000 b90e 	b.w	800d310 <__malloc_unlock>
 800d0f4:	42a3      	cmp	r3, r4
 800d0f6:	d908      	bls.n	800d10a <_free_r+0x46>
 800d0f8:	6825      	ldr	r5, [r4, #0]
 800d0fa:	1961      	adds	r1, r4, r5
 800d0fc:	428b      	cmp	r3, r1
 800d0fe:	bf01      	itttt	eq
 800d100:	6819      	ldreq	r1, [r3, #0]
 800d102:	685b      	ldreq	r3, [r3, #4]
 800d104:	1949      	addeq	r1, r1, r5
 800d106:	6021      	streq	r1, [r4, #0]
 800d108:	e7ed      	b.n	800d0e6 <_free_r+0x22>
 800d10a:	461a      	mov	r2, r3
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	b10b      	cbz	r3, 800d114 <_free_r+0x50>
 800d110:	42a3      	cmp	r3, r4
 800d112:	d9fa      	bls.n	800d10a <_free_r+0x46>
 800d114:	6811      	ldr	r1, [r2, #0]
 800d116:	1855      	adds	r5, r2, r1
 800d118:	42a5      	cmp	r5, r4
 800d11a:	d10b      	bne.n	800d134 <_free_r+0x70>
 800d11c:	6824      	ldr	r4, [r4, #0]
 800d11e:	4421      	add	r1, r4
 800d120:	1854      	adds	r4, r2, r1
 800d122:	42a3      	cmp	r3, r4
 800d124:	6011      	str	r1, [r2, #0]
 800d126:	d1e0      	bne.n	800d0ea <_free_r+0x26>
 800d128:	681c      	ldr	r4, [r3, #0]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	6053      	str	r3, [r2, #4]
 800d12e:	4421      	add	r1, r4
 800d130:	6011      	str	r1, [r2, #0]
 800d132:	e7da      	b.n	800d0ea <_free_r+0x26>
 800d134:	d902      	bls.n	800d13c <_free_r+0x78>
 800d136:	230c      	movs	r3, #12
 800d138:	6003      	str	r3, [r0, #0]
 800d13a:	e7d6      	b.n	800d0ea <_free_r+0x26>
 800d13c:	6825      	ldr	r5, [r4, #0]
 800d13e:	1961      	adds	r1, r4, r5
 800d140:	428b      	cmp	r3, r1
 800d142:	bf04      	itt	eq
 800d144:	6819      	ldreq	r1, [r3, #0]
 800d146:	685b      	ldreq	r3, [r3, #4]
 800d148:	6063      	str	r3, [r4, #4]
 800d14a:	bf04      	itt	eq
 800d14c:	1949      	addeq	r1, r1, r5
 800d14e:	6021      	streq	r1, [r4, #0]
 800d150:	6054      	str	r4, [r2, #4]
 800d152:	e7ca      	b.n	800d0ea <_free_r+0x26>
 800d154:	b003      	add	sp, #12
 800d156:	bd30      	pop	{r4, r5, pc}
 800d158:	2400527c 	.word	0x2400527c

0800d15c <sbrk_aligned>:
 800d15c:	b570      	push	{r4, r5, r6, lr}
 800d15e:	4e0e      	ldr	r6, [pc, #56]	; (800d198 <sbrk_aligned+0x3c>)
 800d160:	460c      	mov	r4, r1
 800d162:	6831      	ldr	r1, [r6, #0]
 800d164:	4605      	mov	r5, r0
 800d166:	b911      	cbnz	r1, 800d16e <sbrk_aligned+0x12>
 800d168:	f000 f8bc 	bl	800d2e4 <_sbrk_r>
 800d16c:	6030      	str	r0, [r6, #0]
 800d16e:	4621      	mov	r1, r4
 800d170:	4628      	mov	r0, r5
 800d172:	f000 f8b7 	bl	800d2e4 <_sbrk_r>
 800d176:	1c43      	adds	r3, r0, #1
 800d178:	d00a      	beq.n	800d190 <sbrk_aligned+0x34>
 800d17a:	1cc4      	adds	r4, r0, #3
 800d17c:	f024 0403 	bic.w	r4, r4, #3
 800d180:	42a0      	cmp	r0, r4
 800d182:	d007      	beq.n	800d194 <sbrk_aligned+0x38>
 800d184:	1a21      	subs	r1, r4, r0
 800d186:	4628      	mov	r0, r5
 800d188:	f000 f8ac 	bl	800d2e4 <_sbrk_r>
 800d18c:	3001      	adds	r0, #1
 800d18e:	d101      	bne.n	800d194 <sbrk_aligned+0x38>
 800d190:	f04f 34ff 	mov.w	r4, #4294967295
 800d194:	4620      	mov	r0, r4
 800d196:	bd70      	pop	{r4, r5, r6, pc}
 800d198:	24005280 	.word	0x24005280

0800d19c <_malloc_r>:
 800d19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a0:	1ccd      	adds	r5, r1, #3
 800d1a2:	f025 0503 	bic.w	r5, r5, #3
 800d1a6:	3508      	adds	r5, #8
 800d1a8:	2d0c      	cmp	r5, #12
 800d1aa:	bf38      	it	cc
 800d1ac:	250c      	movcc	r5, #12
 800d1ae:	2d00      	cmp	r5, #0
 800d1b0:	4607      	mov	r7, r0
 800d1b2:	db01      	blt.n	800d1b8 <_malloc_r+0x1c>
 800d1b4:	42a9      	cmp	r1, r5
 800d1b6:	d905      	bls.n	800d1c4 <_malloc_r+0x28>
 800d1b8:	230c      	movs	r3, #12
 800d1ba:	603b      	str	r3, [r7, #0]
 800d1bc:	2600      	movs	r6, #0
 800d1be:	4630      	mov	r0, r6
 800d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c4:	4e2e      	ldr	r6, [pc, #184]	; (800d280 <_malloc_r+0xe4>)
 800d1c6:	f000 f89d 	bl	800d304 <__malloc_lock>
 800d1ca:	6833      	ldr	r3, [r6, #0]
 800d1cc:	461c      	mov	r4, r3
 800d1ce:	bb34      	cbnz	r4, 800d21e <_malloc_r+0x82>
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	f7ff ffc2 	bl	800d15c <sbrk_aligned>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	4604      	mov	r4, r0
 800d1dc:	d14d      	bne.n	800d27a <_malloc_r+0xde>
 800d1de:	6834      	ldr	r4, [r6, #0]
 800d1e0:	4626      	mov	r6, r4
 800d1e2:	2e00      	cmp	r6, #0
 800d1e4:	d140      	bne.n	800d268 <_malloc_r+0xcc>
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	4631      	mov	r1, r6
 800d1ea:	4638      	mov	r0, r7
 800d1ec:	eb04 0803 	add.w	r8, r4, r3
 800d1f0:	f000 f878 	bl	800d2e4 <_sbrk_r>
 800d1f4:	4580      	cmp	r8, r0
 800d1f6:	d13a      	bne.n	800d26e <_malloc_r+0xd2>
 800d1f8:	6821      	ldr	r1, [r4, #0]
 800d1fa:	3503      	adds	r5, #3
 800d1fc:	1a6d      	subs	r5, r5, r1
 800d1fe:	f025 0503 	bic.w	r5, r5, #3
 800d202:	3508      	adds	r5, #8
 800d204:	2d0c      	cmp	r5, #12
 800d206:	bf38      	it	cc
 800d208:	250c      	movcc	r5, #12
 800d20a:	4629      	mov	r1, r5
 800d20c:	4638      	mov	r0, r7
 800d20e:	f7ff ffa5 	bl	800d15c <sbrk_aligned>
 800d212:	3001      	adds	r0, #1
 800d214:	d02b      	beq.n	800d26e <_malloc_r+0xd2>
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	442b      	add	r3, r5
 800d21a:	6023      	str	r3, [r4, #0]
 800d21c:	e00e      	b.n	800d23c <_malloc_r+0xa0>
 800d21e:	6822      	ldr	r2, [r4, #0]
 800d220:	1b52      	subs	r2, r2, r5
 800d222:	d41e      	bmi.n	800d262 <_malloc_r+0xc6>
 800d224:	2a0b      	cmp	r2, #11
 800d226:	d916      	bls.n	800d256 <_malloc_r+0xba>
 800d228:	1961      	adds	r1, r4, r5
 800d22a:	42a3      	cmp	r3, r4
 800d22c:	6025      	str	r5, [r4, #0]
 800d22e:	bf18      	it	ne
 800d230:	6059      	strne	r1, [r3, #4]
 800d232:	6863      	ldr	r3, [r4, #4]
 800d234:	bf08      	it	eq
 800d236:	6031      	streq	r1, [r6, #0]
 800d238:	5162      	str	r2, [r4, r5]
 800d23a:	604b      	str	r3, [r1, #4]
 800d23c:	4638      	mov	r0, r7
 800d23e:	f104 060b 	add.w	r6, r4, #11
 800d242:	f000 f865 	bl	800d310 <__malloc_unlock>
 800d246:	f026 0607 	bic.w	r6, r6, #7
 800d24a:	1d23      	adds	r3, r4, #4
 800d24c:	1af2      	subs	r2, r6, r3
 800d24e:	d0b6      	beq.n	800d1be <_malloc_r+0x22>
 800d250:	1b9b      	subs	r3, r3, r6
 800d252:	50a3      	str	r3, [r4, r2]
 800d254:	e7b3      	b.n	800d1be <_malloc_r+0x22>
 800d256:	6862      	ldr	r2, [r4, #4]
 800d258:	42a3      	cmp	r3, r4
 800d25a:	bf0c      	ite	eq
 800d25c:	6032      	streq	r2, [r6, #0]
 800d25e:	605a      	strne	r2, [r3, #4]
 800d260:	e7ec      	b.n	800d23c <_malloc_r+0xa0>
 800d262:	4623      	mov	r3, r4
 800d264:	6864      	ldr	r4, [r4, #4]
 800d266:	e7b2      	b.n	800d1ce <_malloc_r+0x32>
 800d268:	4634      	mov	r4, r6
 800d26a:	6876      	ldr	r6, [r6, #4]
 800d26c:	e7b9      	b.n	800d1e2 <_malloc_r+0x46>
 800d26e:	230c      	movs	r3, #12
 800d270:	603b      	str	r3, [r7, #0]
 800d272:	4638      	mov	r0, r7
 800d274:	f000 f84c 	bl	800d310 <__malloc_unlock>
 800d278:	e7a1      	b.n	800d1be <_malloc_r+0x22>
 800d27a:	6025      	str	r5, [r4, #0]
 800d27c:	e7de      	b.n	800d23c <_malloc_r+0xa0>
 800d27e:	bf00      	nop
 800d280:	2400527c 	.word	0x2400527c

0800d284 <_realloc_r>:
 800d284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d288:	4680      	mov	r8, r0
 800d28a:	4614      	mov	r4, r2
 800d28c:	460e      	mov	r6, r1
 800d28e:	b921      	cbnz	r1, 800d29a <_realloc_r+0x16>
 800d290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d294:	4611      	mov	r1, r2
 800d296:	f7ff bf81 	b.w	800d19c <_malloc_r>
 800d29a:	b92a      	cbnz	r2, 800d2a8 <_realloc_r+0x24>
 800d29c:	f7ff ff12 	bl	800d0c4 <_free_r>
 800d2a0:	4625      	mov	r5, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a8:	f000 f838 	bl	800d31c <_malloc_usable_size_r>
 800d2ac:	4284      	cmp	r4, r0
 800d2ae:	4607      	mov	r7, r0
 800d2b0:	d802      	bhi.n	800d2b8 <_realloc_r+0x34>
 800d2b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d2b6:	d812      	bhi.n	800d2de <_realloc_r+0x5a>
 800d2b8:	4621      	mov	r1, r4
 800d2ba:	4640      	mov	r0, r8
 800d2bc:	f7ff ff6e 	bl	800d19c <_malloc_r>
 800d2c0:	4605      	mov	r5, r0
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d0ed      	beq.n	800d2a2 <_realloc_r+0x1e>
 800d2c6:	42bc      	cmp	r4, r7
 800d2c8:	4622      	mov	r2, r4
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	bf28      	it	cs
 800d2ce:	463a      	movcs	r2, r7
 800d2d0:	f7ff fed0 	bl	800d074 <memcpy>
 800d2d4:	4631      	mov	r1, r6
 800d2d6:	4640      	mov	r0, r8
 800d2d8:	f7ff fef4 	bl	800d0c4 <_free_r>
 800d2dc:	e7e1      	b.n	800d2a2 <_realloc_r+0x1e>
 800d2de:	4635      	mov	r5, r6
 800d2e0:	e7df      	b.n	800d2a2 <_realloc_r+0x1e>
	...

0800d2e4 <_sbrk_r>:
 800d2e4:	b538      	push	{r3, r4, r5, lr}
 800d2e6:	4d06      	ldr	r5, [pc, #24]	; (800d300 <_sbrk_r+0x1c>)
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	4608      	mov	r0, r1
 800d2ee:	602b      	str	r3, [r5, #0]
 800d2f0:	f7f4 fcfc 	bl	8001cec <_sbrk>
 800d2f4:	1c43      	adds	r3, r0, #1
 800d2f6:	d102      	bne.n	800d2fe <_sbrk_r+0x1a>
 800d2f8:	682b      	ldr	r3, [r5, #0]
 800d2fa:	b103      	cbz	r3, 800d2fe <_sbrk_r+0x1a>
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	bd38      	pop	{r3, r4, r5, pc}
 800d300:	24005284 	.word	0x24005284

0800d304 <__malloc_lock>:
 800d304:	4801      	ldr	r0, [pc, #4]	; (800d30c <__malloc_lock+0x8>)
 800d306:	f000 b811 	b.w	800d32c <__retarget_lock_acquire_recursive>
 800d30a:	bf00      	nop
 800d30c:	24005288 	.word	0x24005288

0800d310 <__malloc_unlock>:
 800d310:	4801      	ldr	r0, [pc, #4]	; (800d318 <__malloc_unlock+0x8>)
 800d312:	f000 b80c 	b.w	800d32e <__retarget_lock_release_recursive>
 800d316:	bf00      	nop
 800d318:	24005288 	.word	0x24005288

0800d31c <_malloc_usable_size_r>:
 800d31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d320:	1f18      	subs	r0, r3, #4
 800d322:	2b00      	cmp	r3, #0
 800d324:	bfbc      	itt	lt
 800d326:	580b      	ldrlt	r3, [r1, r0]
 800d328:	18c0      	addlt	r0, r0, r3
 800d32a:	4770      	bx	lr

0800d32c <__retarget_lock_acquire_recursive>:
 800d32c:	4770      	bx	lr

0800d32e <__retarget_lock_release_recursive>:
 800d32e:	4770      	bx	lr

0800d330 <expf>:
 800d330:	ee10 2a10 	vmov	r2, s0
 800d334:	f240 412a 	movw	r1, #1066	; 0x42a
 800d338:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800d33c:	428b      	cmp	r3, r1
 800d33e:	b430      	push	{r4, r5}
 800d340:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800d344:	d92a      	bls.n	800d39c <expf+0x6c>
 800d346:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800d34a:	d058      	beq.n	800d3fe <expf+0xce>
 800d34c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800d350:	d303      	bcc.n	800d35a <expf+0x2a>
 800d352:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d356:	bc30      	pop	{r4, r5}
 800d358:	4770      	bx	lr
 800d35a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d404 <expf+0xd4>
 800d35e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d366:	dd03      	ble.n	800d370 <expf+0x40>
 800d368:	bc30      	pop	{r4, r5}
 800d36a:	2000      	movs	r0, #0
 800d36c:	f000 b92e 	b.w	800d5cc <__math_oflowf>
 800d370:	eddf 7a25 	vldr	s15, [pc, #148]	; 800d408 <expf+0xd8>
 800d374:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d37c:	d503      	bpl.n	800d386 <expf+0x56>
 800d37e:	bc30      	pop	{r4, r5}
 800d380:	2000      	movs	r0, #0
 800d382:	f000 b917 	b.w	800d5b4 <__math_uflowf>
 800d386:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d40c <expf+0xdc>
 800d38a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d392:	d503      	bpl.n	800d39c <expf+0x6c>
 800d394:	bc30      	pop	{r4, r5}
 800d396:	2000      	movs	r0, #0
 800d398:	f000 b912 	b.w	800d5c0 <__math_may_uflowf>
 800d39c:	4b1c      	ldr	r3, [pc, #112]	; (800d410 <expf+0xe0>)
 800d39e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d3a2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800d3a6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800d3aa:	eeb0 7b44 	vmov.f64	d7, d4
 800d3ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d3b2:	ee17 0a10 	vmov	r0, s14
 800d3b6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800d3ba:	f000 021f 	and.w	r2, r0, #31
 800d3be:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800d3c2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800d3c6:	ee27 4b07 	vmul.f64	d4, d7, d7
 800d3ca:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800d3ce:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800d3d2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d3d6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800d3da:	684d      	ldr	r5, [r1, #4]
 800d3dc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	190a      	adds	r2, r1, r4
 800d3e4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800d3e8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d3ec:	ec43 2b17 	vmov	d7, r2, r3
 800d3f0:	eea6 0b04 	vfma.f64	d0, d6, d4
 800d3f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d3f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d3fc:	e7ab      	b.n	800d356 <expf+0x26>
 800d3fe:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800d414 <expf+0xe4>
 800d402:	e7a8      	b.n	800d356 <expf+0x26>
 800d404:	42b17217 	.word	0x42b17217
 800d408:	c2cff1b4 	.word	0xc2cff1b4
 800d40c:	c2ce8ecf 	.word	0xc2ce8ecf
 800d410:	0800dd80 	.word	0x0800dd80
 800d414:	00000000 	.word	0x00000000

0800d418 <logf>:
 800d418:	ee10 3a10 	vmov	r3, s0
 800d41c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d420:	b410      	push	{r4}
 800d422:	d055      	beq.n	800d4d0 <logf+0xb8>
 800d424:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800d428:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800d42c:	d31a      	bcc.n	800d464 <logf+0x4c>
 800d42e:	005a      	lsls	r2, r3, #1
 800d430:	d104      	bne.n	800d43c <logf+0x24>
 800d432:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d436:	2001      	movs	r0, #1
 800d438:	f000 b8ce 	b.w	800d5d8 <__math_divzerof>
 800d43c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d440:	d043      	beq.n	800d4ca <logf+0xb2>
 800d442:	2b00      	cmp	r3, #0
 800d444:	db02      	blt.n	800d44c <logf+0x34>
 800d446:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d44a:	d303      	bcc.n	800d454 <logf+0x3c>
 800d44c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d450:	f000 b8d2 	b.w	800d5f8 <__math_invalidf>
 800d454:	eddf 7a20 	vldr	s15, [pc, #128]	; 800d4d8 <logf+0xc0>
 800d458:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d45c:	ee10 3a10 	vmov	r3, s0
 800d460:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800d464:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800d468:	491c      	ldr	r1, [pc, #112]	; (800d4dc <logf+0xc4>)
 800d46a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800d46e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800d472:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800d476:	0dd4      	lsrs	r4, r2, #23
 800d478:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800d47c:	05e4      	lsls	r4, r4, #23
 800d47e:	ed90 6b00 	vldr	d6, [r0]
 800d482:	1b1b      	subs	r3, r3, r4
 800d484:	ee07 3a90 	vmov	s15, r3
 800d488:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800d48c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d490:	15d2      	asrs	r2, r2, #23
 800d492:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d496:	ed90 6b02 	vldr	d6, [r0, #8]
 800d49a:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d49e:	ee07 2a90 	vmov	s15, r2
 800d4a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d4a6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d4aa:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800d4ae:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800d4b2:	eea5 7b00 	vfma.f64	d7, d5, d0
 800d4b6:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800d4ba:	ee30 0b06 	vadd.f64	d0, d0, d6
 800d4be:	eea5 7b04 	vfma.f64	d7, d5, d4
 800d4c2:	eea4 0b07 	vfma.f64	d0, d4, d7
 800d4c6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d4ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d4e0 <logf+0xc8>
 800d4d4:	e7f9      	b.n	800d4ca <logf+0xb2>
 800d4d6:	bf00      	nop
 800d4d8:	4b000000 	.word	0x4b000000
 800d4dc:	0800dec8 	.word	0x0800dec8
 800d4e0:	00000000 	.word	0x00000000

0800d4e4 <tanhf>:
 800d4e4:	b510      	push	{r4, lr}
 800d4e6:	ee10 4a10 	vmov	r4, s0
 800d4ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d4ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d4f2:	ed2d 8b02 	vpush	{d8}
 800d4f6:	eeb0 7a40 	vmov.f32	s14, s0
 800d4fa:	db0c      	blt.n	800d516 <tanhf+0x32>
 800d4fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d500:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800d504:	2c00      	cmp	r4, #0
 800d506:	bfac      	ite	ge
 800d508:	ee37 0a80 	vaddge.f32	s0, s15, s0
 800d50c:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 800d510:	ecbd 8b02 	vpop	{d8}
 800d514:	bd10      	pop	{r4, pc}
 800d516:	4a1b      	ldr	r2, [pc, #108]	; (800d584 <tanhf+0xa0>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	dc30      	bgt.n	800d57e <tanhf+0x9a>
 800d51c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800d520:	da06      	bge.n	800d530 <tanhf+0x4c>
 800d522:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d526:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d52a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d52e:	e7ef      	b.n	800d510 <tanhf+0x2c>
 800d530:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d534:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800d538:	db12      	blt.n	800d560 <tanhf+0x7c>
 800d53a:	f000 f987 	bl	800d84c <fabsf>
 800d53e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d542:	f000 f869 	bl	800d618 <expm1f>
 800d546:	ee30 0a08 	vadd.f32	s0, s0, s16
 800d54a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800d54e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d552:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d556:	2c00      	cmp	r4, #0
 800d558:	bfb8      	it	lt
 800d55a:	eeb1 0a40 	vneglt.f32	s0, s0
 800d55e:	e7d7      	b.n	800d510 <tanhf+0x2c>
 800d560:	f000 f974 	bl	800d84c <fabsf>
 800d564:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800d568:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d56c:	f000 f854 	bl	800d618 <expm1f>
 800d570:	ee70 7a08 	vadd.f32	s15, s0, s16
 800d574:	eeb1 7a40 	vneg.f32	s14, s0
 800d578:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d57c:	e7eb      	b.n	800d556 <tanhf+0x72>
 800d57e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d582:	e7e8      	b.n	800d556 <tanhf+0x72>
 800d584:	41afffff 	.word	0x41afffff

0800d588 <with_errnof>:
 800d588:	b513      	push	{r0, r1, r4, lr}
 800d58a:	4604      	mov	r4, r0
 800d58c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d590:	f7ff fa1a 	bl	800c9c8 <__errno>
 800d594:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d598:	6004      	str	r4, [r0, #0]
 800d59a:	b002      	add	sp, #8
 800d59c:	bd10      	pop	{r4, pc}

0800d59e <xflowf>:
 800d59e:	b130      	cbz	r0, 800d5ae <xflowf+0x10>
 800d5a0:	eef1 7a40 	vneg.f32	s15, s0
 800d5a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d5a8:	2022      	movs	r0, #34	; 0x22
 800d5aa:	f7ff bfed 	b.w	800d588 <with_errnof>
 800d5ae:	eef0 7a40 	vmov.f32	s15, s0
 800d5b2:	e7f7      	b.n	800d5a4 <xflowf+0x6>

0800d5b4 <__math_uflowf>:
 800d5b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d5bc <__math_uflowf+0x8>
 800d5b8:	f7ff bff1 	b.w	800d59e <xflowf>
 800d5bc:	10000000 	.word	0x10000000

0800d5c0 <__math_may_uflowf>:
 800d5c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d5c8 <__math_may_uflowf+0x8>
 800d5c4:	f7ff bfeb 	b.w	800d59e <xflowf>
 800d5c8:	1a200000 	.word	0x1a200000

0800d5cc <__math_oflowf>:
 800d5cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d5d4 <__math_oflowf+0x8>
 800d5d0:	f7ff bfe5 	b.w	800d59e <xflowf>
 800d5d4:	70000000 	.word	0x70000000

0800d5d8 <__math_divzerof>:
 800d5d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d5dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d5e6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d5f4 <__math_divzerof+0x1c>
 800d5ea:	2022      	movs	r0, #34	; 0x22
 800d5ec:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d5f0:	f7ff bfca 	b.w	800d588 <with_errnof>
 800d5f4:	00000000 	.word	0x00000000

0800d5f8 <__math_invalidf>:
 800d5f8:	eef0 7a40 	vmov.f32	s15, s0
 800d5fc:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d600:	eef4 7a67 	vcmp.f32	s15, s15
 800d604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d608:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d60c:	d602      	bvs.n	800d614 <__math_invalidf+0x1c>
 800d60e:	2021      	movs	r0, #33	; 0x21
 800d610:	f7ff bfba 	b.w	800d588 <with_errnof>
 800d614:	4770      	bx	lr
	...

0800d618 <expm1f>:
 800d618:	ee10 2a10 	vmov	r2, s0
 800d61c:	497c      	ldr	r1, [pc, #496]	; (800d810 <expm1f+0x1f8>)
 800d61e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d622:	428b      	cmp	r3, r1
 800d624:	d920      	bls.n	800d668 <expm1f+0x50>
 800d626:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d62a:	d902      	bls.n	800d632 <expm1f+0x1a>
 800d62c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d630:	4770      	bx	lr
 800d632:	d105      	bne.n	800d640 <expm1f+0x28>
 800d634:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d638:	2a00      	cmp	r2, #0
 800d63a:	fe20 0a27 	vselge.f32	s0, s0, s15
 800d63e:	4770      	bx	lr
 800d640:	2a00      	cmp	r2, #0
 800d642:	db05      	blt.n	800d650 <expm1f+0x38>
 800d644:	4973      	ldr	r1, [pc, #460]	; (800d814 <expm1f+0x1fc>)
 800d646:	428b      	cmp	r3, r1
 800d648:	d95c      	bls.n	800d704 <expm1f+0xec>
 800d64a:	2000      	movs	r0, #0
 800d64c:	f7ff bfbe 	b.w	800d5cc <__math_oflowf>
 800d650:	eddf 7a71 	vldr	s15, [pc, #452]	; 800d818 <expm1f+0x200>
 800d654:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d660:	d550      	bpl.n	800d704 <expm1f+0xec>
 800d662:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d666:	4770      	bx	lr
 800d668:	496c      	ldr	r1, [pc, #432]	; (800d81c <expm1f+0x204>)
 800d66a:	428b      	cmp	r3, r1
 800d66c:	d966      	bls.n	800d73c <expm1f+0x124>
 800d66e:	496c      	ldr	r1, [pc, #432]	; (800d820 <expm1f+0x208>)
 800d670:	428b      	cmp	r3, r1
 800d672:	d847      	bhi.n	800d704 <expm1f+0xec>
 800d674:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d824 <expm1f+0x20c>
 800d678:	2a00      	cmp	r2, #0
 800d67a:	bfa7      	ittee	ge
 800d67c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800d680:	eddf 7a69 	vldrge	s15, [pc, #420]	; 800d828 <expm1f+0x210>
 800d684:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 800d82c <expm1f+0x214>
 800d688:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800d68c:	bfac      	ite	ge
 800d68e:	2301      	movge	r3, #1
 800d690:	f04f 33ff 	movlt.w	r3, #4294967295
 800d694:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d698:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d69c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6a0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d6a4:	ee20 4a25 	vmul.f32	s8, s0, s11
 800d6a8:	ed9f 6a61 	vldr	s12, [pc, #388]	; 800d830 <expm1f+0x218>
 800d6ac:	eddf 6a61 	vldr	s13, [pc, #388]	; 800d834 <expm1f+0x21c>
 800d6b0:	ed9f 5a61 	vldr	s10, [pc, #388]	; 800d838 <expm1f+0x220>
 800d6b4:	ee20 7a04 	vmul.f32	s14, s0, s8
 800d6b8:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800d6bc:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d6c0:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 800d83c <expm1f+0x224>
 800d6c4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d6c8:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800d840 <expm1f+0x228>
 800d6cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d6d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d6d4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d6d8:	eef0 6a46 	vmov.f32	s13, s12
 800d6dc:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d6e0:	eee4 4a66 	vfms.f32	s9, s8, s13
 800d6e4:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800d6e8:	eea0 4a64 	vfms.f32	s8, s0, s9
 800d6ec:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800d6f0:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800d6f4:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d6f8:	bb73      	cbnz	r3, 800d758 <expm1f+0x140>
 800d6fa:	eef0 7a47 	vmov.f32	s15, s14
 800d6fe:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800d702:	e024      	b.n	800d74e <expm1f+0x136>
 800d704:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d708:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d70c:	2a00      	cmp	r2, #0
 800d70e:	fe67 7a87 	vselge.f32	s15, s15, s14
 800d712:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d844 <expm1f+0x22c>
 800d716:	eddf 6a43 	vldr	s13, [pc, #268]	; 800d824 <expm1f+0x20c>
 800d71a:	ee40 7a07 	vmla.f32	s15, s0, s14
 800d71e:	eeb0 7a40 	vmov.f32	s14, s0
 800d722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d726:	ee17 3a90 	vmov	r3, s15
 800d72a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d72e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d732:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d828 <expm1f+0x210>
 800d736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d73a:	e7ab      	b.n	800d694 <expm1f+0x7c>
 800d73c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800d740:	d208      	bcs.n	800d754 <expm1f+0x13c>
 800d742:	eddf 7a41 	vldr	s15, [pc, #260]	; 800d848 <expm1f+0x230>
 800d746:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d74a:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800d74e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d752:	4770      	bx	lr
 800d754:	2300      	movs	r3, #0
 800d756:	e7a3      	b.n	800d6a0 <expm1f+0x88>
 800d758:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800d762:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d766:	d106      	bne.n	800d776 <expm1f+0x15e>
 800d768:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d76c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800d770:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800d774:	4770      	bx	lr
 800d776:	2b01      	cmp	r3, #1
 800d778:	d118      	bne.n	800d7ac <expm1f+0x194>
 800d77a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800d77e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d786:	bf5b      	ittet	pl
 800d788:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800d78c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800d790:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800d794:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800d798:	bf43      	ittte	mi
 800d79a:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 800d79e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800d7a2:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800d7a6:	eeb0 0a46 	vmovpl.f32	s0, s12
 800d7aa:	4770      	bx	lr
 800d7ac:	1c5a      	adds	r2, r3, #1
 800d7ae:	2a39      	cmp	r2, #57	; 0x39
 800d7b0:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800d7b4:	d90b      	bls.n	800d7ce <expm1f+0x1b6>
 800d7b6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d7ba:	ee36 0a40 	vsub.f32	s0, s12, s0
 800d7be:	ee10 3a10 	vmov	r3, s0
 800d7c2:	440b      	add	r3, r1
 800d7c4:	ee00 3a10 	vmov	s0, r3
 800d7c8:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d7cc:	4770      	bx	lr
 800d7ce:	2b16      	cmp	r3, #22
 800d7d0:	dc11      	bgt.n	800d7f6 <expm1f+0x1de>
 800d7d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d7d6:	fa42 f303 	asr.w	r3, r2, r3
 800d7da:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800d7de:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d7e2:	ee07 3a90 	vmov	s15, r3
 800d7e6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d7ea:	ee10 3a10 	vmov	r3, s0
 800d7ee:	440b      	add	r3, r1
 800d7f0:	ee00 3a10 	vmov	s0, r3
 800d7f4:	4770      	bx	lr
 800d7f6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800d7fa:	05db      	lsls	r3, r3, #23
 800d7fc:	ee07 3a10 	vmov	s14, r3
 800d800:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d804:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d808:	ee37 0a86 	vadd.f32	s0, s15, s12
 800d80c:	e7ed      	b.n	800d7ea <expm1f+0x1d2>
 800d80e:	bf00      	nop
 800d810:	4195b843 	.word	0x4195b843
 800d814:	42b17217 	.word	0x42b17217
 800d818:	0da24260 	.word	0x0da24260
 800d81c:	3eb17218 	.word	0x3eb17218
 800d820:	3f851591 	.word	0x3f851591
 800d824:	3f317180 	.word	0x3f317180
 800d828:	3717f7d1 	.word	0x3717f7d1
 800d82c:	b717f7d1 	.word	0xb717f7d1
 800d830:	b457edbb 	.word	0xb457edbb
 800d834:	36867e54 	.word	0x36867e54
 800d838:	bd088889 	.word	0xbd088889
 800d83c:	b8a670cd 	.word	0xb8a670cd
 800d840:	3ad00d01 	.word	0x3ad00d01
 800d844:	3fb8aa3b 	.word	0x3fb8aa3b
 800d848:	7149f2ca 	.word	0x7149f2ca

0800d84c <fabsf>:
 800d84c:	ee10 3a10 	vmov	r3, s0
 800d850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d854:	ee00 3a10 	vmov	s0, r3
 800d858:	4770      	bx	lr
	...

0800d85c <_init>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	bf00      	nop
 800d860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d862:	bc08      	pop	{r3}
 800d864:	469e      	mov	lr, r3
 800d866:	4770      	bx	lr

0800d868 <_fini>:
 800d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86a:	bf00      	nop
 800d86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d86e:	bc08      	pop	{r3}
 800d870:	469e      	mov	lr, r3
 800d872:	4770      	bx	lr
