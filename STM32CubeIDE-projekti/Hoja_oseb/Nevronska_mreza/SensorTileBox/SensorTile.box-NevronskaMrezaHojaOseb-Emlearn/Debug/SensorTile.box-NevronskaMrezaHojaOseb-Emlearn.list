
SensorTile.box-NevronskaMrezaHojaOseb-Emlearn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e68  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  08017028  08017028  00027028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017ac0  08017ac0  00030334  2**0
                  CONTENTS
  4 .ARM          00000000  08017ac0  08017ac0  00030334  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017ac0  08017ac0  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017ac0  08017ac0  00027ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ac4  08017ac4  00027ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08017ac8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003010  20000334  08017dfc  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003344  08017dfc  00033344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e57c  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d8f  00000000  00000000  0005e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002800  00000000  00000000  00064670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002538  00000000  00000000  00066e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bd3f  00000000  00000000  000693a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039ed1  00000000  00000000  000a50e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014e4f5  00000000  00000000  000defb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022d4ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b520  00000000  00000000  0022d500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000334 	.word	0x20000334
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017010 	.word	0x08017010

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000338 	.word	0x20000338
 80001fc:	08017010 	.word	0x08017010

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <eml_net_relu>:
    int32_t activations_length;
} EmlNet;


static float
eml_net_relu(float in) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (in <= 0.0f) ? 0.0f : in; 
 8000c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3e:	d802      	bhi.n	8000c46 <eml_net_relu+0x1e>
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e000      	b.n	8000c48 <eml_net_relu+0x20>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	ee07 3a90 	vmov	s15, r3
}
 8000c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <eml_net_expit>:

static float
eml_net_expit(float in) {
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / (1.0f + expf(-in));
 8000c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c68:	eef1 7a67 	vneg.f32	s15, s15
 8000c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c70:	f014 ffa8 	bl	8015bc4 <expf>
 8000c74:	eef0 7a40 	vmov.f32	s15, s0
 8000c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c88:	eef0 7a66 	vmov.f32	s15, s13
}
 8000c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <eml_net_tanh>:

static float
eml_net_tanh(float in) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	ed87 0a01 	vstr	s0, [r7, #4]
    return tanhf(in); 
 8000ca0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ca4:	f014 fea0 	bl	80159e8 <tanhf>
 8000ca8:	eef0 7a40 	vmov.f32	s15, s0
}
 8000cac:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <eml_net_softmax>:

static EmlError
eml_net_softmax(float *input, size_t input_length)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
    EML_PRECONDITION(input, EmlUninitialized);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <eml_net_softmax+0x14>
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e06e      	b.n	8000daa <eml_net_softmax+0xf2>

    float input_max = -INFINITY;
 8000ccc:	4b39      	ldr	r3, [pc, #228]	; (8000db4 <eml_net_softmax+0xfc>)
 8000cce:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	e015      	b.n	8000d02 <eml_net_softmax+0x4a>
        if (input[i] > input_max) {
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cee:	d505      	bpl.n	8000cfc <eml_net_softmax+0x44>
            input_max = input[i];
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3e5      	bcc.n	8000cd6 <eml_net_softmax+0x1e>
        }
    }

    float sum = 0.0f;
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	e018      	b.n	8000d48 <eml_net_softmax+0x90>
        sum += expf(input[i] - input_max);
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	ed93 7a00 	vldr	s14, [r3]
 8000d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2e:	f014 ff49 	bl	8015bc4 <expf>
 8000d32:	eeb0 7a40 	vmov.f32	s14, s0
 8000d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d3e:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	3301      	adds	r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3e2      	bcc.n	8000d16 <eml_net_softmax+0x5e>
    }

    const float offset = input_max + logf(sum);
 8000d50:	ed97 0a05 	vldr	s0, [r7, #20]
 8000d54:	f014 ff6c 	bl	8015c30 <logf>
 8000d58:	eeb0 7a40 	vmov.f32	s14, s0
 8000d5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d64:	edc7 7a02 	vstr	s15, [r7, #8]
    for (size_t i = 0; i < input_length; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e018      	b.n	8000da0 <eml_net_softmax+0xe8>
        input[i] = expf(input[i] - offset);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	ed93 7a00 	vldr	s14, [r3]
 8000d7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	18d4      	adds	r4, r2, r3
 8000d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8e:	f014 ff19 	bl	8015bc4 <expf>
 8000d92:	eef0 7a40 	vmov.f32	s15, s0
 8000d96:	edc4 7a00 	vstr	s15, [r4]
    for (size_t i = 0; i < input_length; i++) {
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d3e2      	bcc.n	8000d6e <eml_net_softmax+0xb6>
    }

    return EmlOk;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	ff800000 	.word	0xff800000

08000db8 <eml_net_argmax>:

int32_t
eml_net_argmax(const float *values, int32_t values_length) {
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]

    float vmax = -INFINITY;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <eml_net_argmax+0x60>)
 8000dc4:	617b      	str	r3, [r7, #20]
    int32_t argmax = -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	e017      	b.n	8000e02 <eml_net_argmax+0x4a>
        if (values[i] > vmax) {
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	edd3 7a00 	vldr	s15, [r3]
 8000dde:	ed97 7a05 	vldr	s14, [r7, #20]
 8000de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dea:	d507      	bpl.n	8000dfc <eml_net_argmax+0x44>
            vmax = values[i];
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	617b      	str	r3, [r7, #20]
            argmax = i;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbe3      	blt.n	8000dd2 <eml_net_argmax+0x1a>
        }
    }
    return argmax;
 8000e0a:	693b      	ldr	r3, [r7, #16]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	ff800000 	.word	0xff800000

08000e1c <eml_net_valid>:


static bool
eml_net_valid(EmlNet *model) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    bool not_null = model->layers && model->activations1 && model->activations2;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d009      	beq.n	8000e40 <eml_net_valid+0x24>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <eml_net_valid+0x24>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <eml_net_valid+0x24>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <eml_net_valid+0x26>
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
    return not_null;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <eml_net_outputs>:

static inline int32_t
eml_net_outputs(EmlNet *model) {
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
    return model->layers[model->n_layers-1].n_outputs;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	3b14      	subs	r3, #20
 8000e76:	4413      	add	r3, r2
 8000e78:	681b      	ldr	r3, [r3, #0]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <eml_net_find_largest_layer>:
    return n_outputs;
}

// Calculate size of activation value arrays
static int32_t
eml_net_find_largest_layer(EmlNet *model) {
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
    int32_t largest = -1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	e02e      	b.n	8000ef8 <eml_net_find_largest_layer+0x72>
        if (model->layers[i].n_inputs > largest) {
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6859      	ldr	r1, [r3, #4]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	da09      	bge.n	8000ec6 <eml_net_find_largest_layer+0x40>
            largest = model->layers[i].n_inputs;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6859      	ldr	r1, [r3, #4]
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]
        }
        if (model->layers[i].n_outputs > largest) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6859      	ldr	r1, [r3, #4]
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	da09      	bge.n	8000ef2 <eml_net_find_largest_layer+0x6c>
            largest = model->layers[i].n_outputs;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6859      	ldr	r1, [r3, #4]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dbcb      	blt.n	8000e9a <eml_net_find_largest_layer+0x14>
        }
    }
    return largest;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <eml_net_layer_forward>:

EmlError
eml_net_layer_forward(const EmlNetLayer *layer,
                    const float *in, int32_t in_length,
                    float *out, int32_t out_length)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b08d      	sub	sp, #52	; 0x34
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	603b      	str	r3, [r7, #0]
    EML_PRECONDITION(in_length >= layer->n_inputs, EmlSizeMismatch);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	da01      	bge.n	8000f2c <eml_net_layer_forward+0x1c>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e0d3      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(out_length >= layer->n_outputs, EmlSizeMismatch);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f32:	429a      	cmp	r2, r3
 8000f34:	da01      	bge.n	8000f3a <eml_net_layer_forward+0x2a>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e0cc      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(layer->weights, EmlUninitialized);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <eml_net_layer_forward+0x36>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e0c6      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(layer->biases, EmlUninitialized);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <eml_net_layer_forward+0x42>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e0c0      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    //printf("weights "); print_array(layer->weights, layer->n_inputs*layer->n_outputs);
    //printf("biases "); print_array(layer->biases, layer->n_outputs);

    // TODO: matrix multiplication should be done in blocks. Ex 2x4*4x2 = 2x2
    // multiply inputs by weights
    for (int o=0; o<layer->n_outputs; o++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f56:	e040      	b.n	8000fda <eml_net_layer_forward+0xca>
        float sum = 0.0f;
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	e021      	b.n	8000fa8 <eml_net_layer_forward+0x98>
            const int w_idx = o+(i*layer->n_outputs); // not stored continious
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f70:	4413      	add	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
            const float w = layer->weights[w_idx];
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	613b      	str	r3, [r7, #16]
            sum += w * in[i];
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	4413      	add	r3, r2
 8000f8a:	ed93 7a00 	vldr	s14, [r3]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbd8      	blt.n	8000f64 <eml_net_layer_forward+0x54>
        }

        out[o] = sum + layer->biases[o];
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd0:	edc3 7a00 	vstr	s15, [r3]
    for (int o=0; o<layer->n_outputs; o++) {
 8000fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbb9      	blt.n	8000f58 <eml_net_layer_forward+0x48>

    }

    // apply activation function
    if (layer->activation == EmlNetActivationIdentity) {
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	7c1b      	ldrb	r3, [r3, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d072      	beq.n	80010d2 <eml_net_layer_forward+0x1c2>
        // no-op
    } else if (layer->activation == EmlNetActivationRelu) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	7c1b      	ldrb	r3, [r3, #16]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d11d      	bne.n	8001030 <eml_net_layer_forward+0x120>
        for (int i=0; i<layer->n_outputs; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	e014      	b.n	8001024 <eml_net_layer_forward+0x114>
            out[i] = eml_net_relu(out[i]);
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	18d4      	adds	r4, r2, r3
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	f7ff fe09 	bl	8000c28 <eml_net_relu>
 8001016:	eef0 7a40 	vmov.f32	s15, s0
 800101a:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	3301      	adds	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6a3a      	ldr	r2, [r7, #32]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbe5      	blt.n	8000ffa <eml_net_layer_forward+0xea>
 800102e:	e050      	b.n	80010d2 <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationLogistic) {
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	7c1b      	ldrb	r3, [r3, #16]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d11d      	bne.n	8001074 <eml_net_layer_forward+0x164>
        for (int i=0; i<layer->n_outputs; i++) {
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	e014      	b.n	8001068 <eml_net_layer_forward+0x158>
            out[i] = eml_net_expit(out[i]);
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	4413      	add	r3, r2
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	18d4      	adds	r4, r2, r3
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f7ff fe00 	bl	8000c5a <eml_net_expit>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbe5      	blt.n	800103e <eml_net_layer_forward+0x12e>
 8001072:	e02e      	b.n	80010d2 <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationTanh) {
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	7c1b      	ldrb	r3, [r3, #16]
 8001078:	2b04      	cmp	r3, #4
 800107a:	d11d      	bne.n	80010b8 <eml_net_layer_forward+0x1a8>
        for (int i=0; i<layer->n_outputs; i++) {
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	e014      	b.n	80010ac <eml_net_layer_forward+0x19c>
            out[i] = eml_net_tanh(out[i]);
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	4413      	add	r3, r2
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	18d4      	adds	r4, r2, r3
 8001096:	eeb0 0a67 	vmov.f32	s0, s15
 800109a:	f7ff fdfc 	bl	8000c96 <eml_net_tanh>
 800109e:	eef0 7a40 	vmov.f32	s15, s0
 80010a2:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbe5      	blt.n	8001082 <eml_net_layer_forward+0x172>
 80010b6:	e00c      	b.n	80010d2 <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationSoftmax) {
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	7c1b      	ldrb	r3, [r3, #16]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d106      	bne.n	80010ce <eml_net_layer_forward+0x1be>
        eml_net_softmax(out, layer->n_outputs);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	6838      	ldr	r0, [r7, #0]
 80010c8:	f7ff fdf6 	bl	8000cb8 <eml_net_softmax>
 80010cc:	e001      	b.n	80010d2 <eml_net_layer_forward+0x1c2>
    } else {
        return EmlUnsupported;
 80010ce:	2302      	movs	r3, #2
 80010d0:	e000      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    }

    //printf("activations "); print_array(out, layer->n_outputs);

    return EmlOk;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3734      	adds	r7, #52	; 0x34
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}

080010dc <eml_net_infer>:


// Run inferences. Leaves results in activations2
EmlError
eml_net_infer(EmlNet *model, const float *features, int32_t features_length)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
    EML_PRECONDITION(eml_net_valid(model), EmlUninitialized);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff fe97 	bl	8000e1c <eml_net_valid>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <eml_net_infer+0x22>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e082      	b.n	8001204 <eml_net_infer+0x128>
    EML_PRECONDITION(model->n_layers >= 2, EmlUnsupported);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	dc01      	bgt.n	800110a <eml_net_infer+0x2e>
 8001106:	2302      	movs	r3, #2
 8001108:	e07c      	b.n	8001204 <eml_net_infer+0x128>
    EML_PRECONDITION(features_length == model->layers[0].n_inputs, EmlSizeMismatch);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d001      	beq.n	800111a <eml_net_infer+0x3e>
 8001116:	2301      	movs	r3, #1
 8001118:	e074      	b.n	8001204 <eml_net_infer+0x128>
    EML_PRECONDITION(model->activations_length >= eml_net_find_largest_layer(model), EmlSizeMismatch);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	691c      	ldr	r4, [r3, #16]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff feb1 	bl	8000e86 <eml_net_find_largest_layer>
 8001124:	4603      	mov	r3, r0
 8001126:	429c      	cmp	r4, r3
 8001128:	da01      	bge.n	800112e <eml_net_infer+0x52>
 800112a:	2301      	movs	r3, #1
 800112c:	e06a      	b.n	8001204 <eml_net_infer+0x128>

    const int32_t buffer_length = model->activations_length; 
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    float *buffer1 = model->activations1;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	623b      	str	r3, [r7, #32]
    float *buffer2 = model->activations2;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	61fb      	str	r3, [r7, #28]

    // Input layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[0], features,
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6858      	ldr	r0, [r3, #4]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	f7ff fedf 	bl	8000f10 <eml_net_layer_forward>
 8001152:	4603      	mov	r3, r0
 8001154:	76fb      	strb	r3, [r7, #27]
 8001156:	7efb      	ldrb	r3, [r7, #27]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <eml_net_infer+0x84>
 800115c:	7efb      	ldrb	r3, [r7, #27]
 800115e:	e051      	b.n	8001204 <eml_net_infer+0x128>
                        features_length, buffer1, buffer_length));

    // Hidden layers
    for (int l=1; l<model->n_layers-1; l++) {
 8001160:	2301      	movs	r3, #1
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001164:	e02e      	b.n	80011c4 <eml_net_infer+0xe8>
        const EmlNetLayer *layer = &model->layers[l];
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	617b      	str	r3, [r7, #20]
        // PERF: avoid copying, swap buffers instead
        EML_CHECK_ERROR(eml_net_layer_forward(layer, buffer1, buffer_length, buffer2, buffer_length));
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001180:	6a39      	ldr	r1, [r7, #32]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff fec4 	bl	8000f10 <eml_net_layer_forward>
 8001188:	4603      	mov	r3, r0
 800118a:	74fb      	strb	r3, [r7, #19]
 800118c:	7cfb      	ldrb	r3, [r7, #19]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <eml_net_infer+0xba>
 8001192:	7cfb      	ldrb	r3, [r7, #19]
 8001194:	e036      	b.n	8001204 <eml_net_infer+0x128>
        for (int i=0; i<buffer_length; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
 800119a:	e00c      	b.n	80011b6 <eml_net_infer+0xda>
            buffer1[i] = buffer2[i];
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	441a      	add	r2, r3
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	6a39      	ldr	r1, [r7, #32]
 80011aa:	440b      	add	r3, r1
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	601a      	str	r2, [r3, #0]
        for (int i=0; i<buffer_length; i++) {
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	3301      	adds	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dbee      	blt.n	800119c <eml_net_infer+0xc0>
    for (int l=1; l<model->n_layers-1; l++) {
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	3301      	adds	r3, #1
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbca      	blt.n	8001166 <eml_net_infer+0x8a>
        }
    }

    // Output layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[model->n_layers-1],
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	460b      	mov	r3, r1
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	3b14      	subs	r3, #20
 80011e4:	18d0      	adds	r0, r2, r3
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ee:	6a39      	ldr	r1, [r7, #32]
 80011f0:	f7ff fe8e 	bl	8000f10 <eml_net_layer_forward>
 80011f4:	4603      	mov	r3, r0
 80011f6:	76bb      	strb	r3, [r7, #26]
 80011f8:	7ebb      	ldrb	r3, [r7, #26]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <eml_net_infer+0x126>
 80011fe:	7ebb      	ldrb	r3, [r7, #26]
 8001200:	e000      	b.n	8001204 <eml_net_infer+0x128>
                        buffer1, buffer_length, buffer2, buffer_length));

    return EmlOk;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3734      	adds	r7, #52	; 0x34
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}

0800120c <eml_net_predict>:
}


// Return the class, or -EmlError on failure
int32_t
eml_net_predict(EmlNet *model, const float *features, int32_t features_length) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]

    const EmlError error = eml_net_infer(model, features, features_length);
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff ff5d 	bl	80010dc <eml_net_infer>
 8001222:	4603      	mov	r3, r0
 8001224:	76fb      	strb	r3, [r7, #27]
    if (error != EmlOk) {
 8001226:	7efb      	ldrb	r3, [r7, #27]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <eml_net_predict+0x26>
        return -error;
 800122c:	7efb      	ldrb	r3, [r7, #27]
 800122e:	425b      	negs	r3, r3
 8001230:	e024      	b.n	800127c <eml_net_predict+0x70>
    }

    const int32_t n_outputs = eml_net_outputs(model);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff fe11 	bl	8000e5a <eml_net_outputs>
 8001238:	6178      	str	r0, [r7, #20]

    int32_t _class = -EmlUnknownError;
 800123a:	f06f 0304 	mvn.w	r3, #4
 800123e:	61fb      	str	r3, [r7, #28]
    if (n_outputs == 1) {
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d10f      	bne.n	8001266 <eml_net_predict+0x5a>
        _class = (model->activations2[0] > 0.5f) ? 1 : 0;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	bfcc      	ite	gt
 800125c:	2301      	movgt	r3, #1
 800125e:	2300      	movle	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	e009      	b.n	800127a <eml_net_predict+0x6e>
    } else if (n_outputs > 1) {
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b01      	cmp	r3, #1
 800126a:	dd06      	ble.n	800127a <eml_net_predict+0x6e>
        _class = eml_net_argmax(model->activations2, n_outputs);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	6979      	ldr	r1, [r7, #20]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fda0 	bl	8000db8 <eml_net_argmax>
 8001278:	61f8      	str	r0, [r7, #28]
    }

    return _class;
 800127a:	69fb      	ldr	r3, [r7, #28]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <nevronskaMreza_HojaOseb_predict>:
{ 5, 10, nevronskaMreza_HojaOseb_layer1_weights, nevronskaMreza_HojaOseb_layer1_biases, EmlNetActivationSoftmax } };
static EmlNet nevronskaMreza_HojaOseb = { 2, nevronskaMreza_HojaOseb_layers, nevronskaMreza_HojaOseb_buf1, nevronskaMreza_HojaOseb_buf2, 16 };

    int32_t
    nevronskaMreza_HojaOseb_predict(const float *features, int32_t n_features)
    {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
        return eml_net_predict(&nevronskaMreza_HojaOseb, features, n_features);
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <nevronskaMreza_HojaOseb_predict+0x20>)
 8001294:	f7ff ffba 	bl	800120c <eml_net_predict>
 8001298:	4603      	mov	r3, r0

    }
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b0a8      	sub	sp, #160	; 0xa0
 80012ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f002 fd5a 	bl	8003d66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f001 faeb 	bl	800288c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f001 feaf 	bl	8003018 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ba:	f001 fe83 	bl	8002fc4 <MX_DMA_Init>
  MX_ADC1_Init();
 80012be:	f001 fb43 	bl	8002948 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80012c2:	f001 fba9 	bl	8002a18 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80012c6:	f001 fc0b 	bl	8002ae0 <MX_I2C1_Init>
  MX_I2C3_Init();
 80012ca:	f001 fc49 	bl	8002b60 <MX_I2C3_Init>
  MX_RTC_Init();
 80012ce:	f001 fc87 	bl	8002be0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 80012d2:	f001 fce1 	bl	8002c98 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80012d6:	f001 fd01 	bl	8002cdc <MX_SPI1_Init>
  MX_SPI2_Init();
 80012da:	f001 fd3d 	bl	8002d58 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012de:	f001 fd79 	bl	8002dd4 <MX_SPI3_Init>
  MX_TIM2_Init();
 80012e2:	f001 fdb5 	bl	8002e50 <MX_TIM2_Init>
  MX_TIM6_Init();
 80012e6:	f001 fe01 	bl	8002eec <MX_TIM6_Init>
  MX_TIM7_Init();
 80012ea:	f001 fe35 	bl	8002f58 <MX_TIM7_Init>
  MX_FATFS_Init();
 80012ee:	f00d fca1 	bl	800ec34 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80012f2:	f013 f863 	bl	80143bc <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // sensor setup (activation and setting frequency)
  		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fc:	4875      	ldr	r0, [pc, #468]	; (80014d4 <main+0x22c>)
 80012fe:	f004 fb55 	bl	80059ac <HAL_GPIO_WritePin>

  		    outdata[0] = 0x10 ; // register used for setting up the accelerometer
 8001302:	4b75      	ldr	r3, [pc, #468]	; (80014d8 <main+0x230>)
 8001304:	2210      	movs	r2, #16
 8001306:	701a      	strb	r2, [r3, #0]
  		    outdata[1] = 0x48 ;//0x4a ;//0x40 ; // set frequency to 104Hz and FS to 4g
 8001308:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <main+0x230>)
 800130a:	2248      	movs	r2, #72	; 0x48
 800130c:	705a      	strb	r2, [r3, #1]
  		    HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2302      	movs	r3, #2
 8001316:	4a71      	ldr	r2, [pc, #452]	; (80014dc <main+0x234>)
 8001318:	496f      	ldr	r1, [pc, #444]	; (80014d8 <main+0x230>)
 800131a:	4871      	ldr	r0, [pc, #452]	; (80014e0 <main+0x238>)
 800131c:	f00a fba4 	bl	800ba68 <HAL_SPI_TransmitReceive>

  		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001326:	486b      	ldr	r0, [pc, #428]	; (80014d4 <main+0x22c>)
 8001328:	f004 fb40 	bl	80059ac <HAL_GPIO_WritePin>


  		    outdata[0] = 0x15 | 0x80 ; // read CTRL6_C
 800132c:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <main+0x230>)
 800132e:	2295      	movs	r2, #149	; 0x95
 8001330:	701a      	strb	r2, [r3, #0]
  		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001338:	4866      	ldr	r0, [pc, #408]	; (80014d4 <main+0x22c>)
 800133a:	f004 fb37 	bl	80059ac <HAL_GPIO_WritePin>
  		    HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2302      	movs	r3, #2
 8001346:	4a65      	ldr	r2, [pc, #404]	; (80014dc <main+0x234>)
 8001348:	4963      	ldr	r1, [pc, #396]	; (80014d8 <main+0x230>)
 800134a:	4865      	ldr	r0, [pc, #404]	; (80014e0 <main+0x238>)
 800134c:	f00a fb8c 	bl	800ba68 <HAL_SPI_TransmitReceive>
  		    uint8_t existingValue = indata[1];
 8001350:	4b62      	ldr	r3, [pc, #392]	; (80014dc <main+0x234>)
 8001352:	785b      	ldrb	r3, [r3, #1]
 8001354:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135e:	485d      	ldr	r0, [pc, #372]	; (80014d4 <main+0x22c>)
 8001360:	f004 fb24 	bl	80059ac <HAL_GPIO_WritePin>

  		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800136a:	485a      	ldr	r0, [pc, #360]	; (80014d4 <main+0x22c>)
 800136c:	f004 fb1e 	bl	80059ac <HAL_GPIO_WritePin>
  		    outdata[0] = 0x15 ; // write to register CTRL6_C
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <main+0x230>)
 8001372:	2215      	movs	r2, #21
 8001374:	701a      	strb	r2, [r3, #0]
  		    outdata[1] = existingValue | 0x10 ; //disable high performance
 8001376:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <main+0x230>)
 8001382:	705a      	strb	r2, [r3, #1]
  		    HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2302      	movs	r3, #2
 800138c:	4a53      	ldr	r2, [pc, #332]	; (80014dc <main+0x234>)
 800138e:	4952      	ldr	r1, [pc, #328]	; (80014d8 <main+0x230>)
 8001390:	4853      	ldr	r0, [pc, #332]	; (80014e0 <main+0x238>)
 8001392:	f00a fb69 	bl	800ba68 <HAL_SPI_TransmitReceive>
  		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139c:	484d      	ldr	r0, [pc, #308]	; (80014d4 <main+0x22c>)
 800139e:	f004 fb05 	bl	80059ac <HAL_GPIO_WritePin>


  		    ///////////////////////////////////////////////////////////////////SD card
  		    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80013a2:	2200      	movs	r2, #0
 80013a4:	494f      	ldr	r1, [pc, #316]	; (80014e4 <main+0x23c>)
 80013a6:	4850      	ldr	r0, [pc, #320]	; (80014e8 <main+0x240>)
 80013a8:	f011 fc68 	bl	8012c7c <f_mount>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d013      	beq.n	80013da <main+0x132>
  		    {
  		    	//Error_Handler();
  		    	snprintf(SendBuffer,BUFSIZE,"Error1 \r\n");
 80013b2:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <main+0x244>)
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	484d      	ldr	r0, [pc, #308]	; (80014f0 <main+0x248>)
 80013ba:	f013 ff7b 	bl	80152b4 <sniprintf>
  		    	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80013be:	484c      	ldr	r0, [pc, #304]	; (80014f0 <main+0x248>)
 80013c0:	f7fe ff1e 	bl	8000200 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4619      	mov	r1, r3
 80013c8:	4849      	ldr	r0, [pc, #292]	; (80014f0 <main+0x248>)
 80013ca:	f013 f8b5 	bl	8014538 <CDC_Transmit_FS>
  		    	strcpy(errorValue, "Error1 \r\n");
 80013ce:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <main+0x24c>)
 80013d0:	4a46      	ldr	r2, [pc, #280]	; (80014ec <main+0x244>)
 80013d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d4:	c303      	stmia	r3!, {r0, r1}
 80013d6:	801a      	strh	r2, [r3, #0]
 80013d8:	e075      	b.n	80014c6 <main+0x21e>
  		    }
  		    else
  		    {
  		    	if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 80013da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <main+0x250>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	2107      	movs	r1, #7
 80013e6:	483f      	ldr	r0, [pc, #252]	; (80014e4 <main+0x23c>)
 80013e8:	f012 fa82 	bl	80138f0 <f_mkfs>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d021      	beq.n	8001436 <main+0x18e>
  		        {
  		    		//Error_Handler();
  		    		snprintf(SendBuffer,BUFSIZE,"Error2 \r\n");
 80013f2:	4a42      	ldr	r2, [pc, #264]	; (80014fc <main+0x254>)
 80013f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f8:	483d      	ldr	r0, [pc, #244]	; (80014f0 <main+0x248>)
 80013fa:	f013 ff5b 	bl	80152b4 <sniprintf>
  		    		CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80013fe:	483c      	ldr	r0, [pc, #240]	; (80014f0 <main+0x248>)
 8001400:	f7fe fefe 	bl	8000200 <strlen>
 8001404:	4603      	mov	r3, r0
 8001406:	4619      	mov	r1, r3
 8001408:	4839      	ldr	r0, [pc, #228]	; (80014f0 <main+0x248>)
 800140a:	f013 f895 	bl	8014538 <CDC_Transmit_FS>

  		    		FRESULT errorState = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <main+0x250>)
 8001416:	2200      	movs	r2, #0
 8001418:	2107      	movs	r1, #7
 800141a:	4832      	ldr	r0, [pc, #200]	; (80014e4 <main+0x23c>)
 800141c:	f012 fa68 	bl	80138f0 <f_mkfs>
 8001420:	4603      	mov	r3, r0
 8001422:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

  		    		//strcpy(errorValue, "Error2 \r\n");
  		    		snprintf(errorValue, 20, "Error2 [%d]\r\n", errorState);
 8001426:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800142a:	4a35      	ldr	r2, [pc, #212]	; (8001500 <main+0x258>)
 800142c:	2114      	movs	r1, #20
 800142e:	4831      	ldr	r0, [pc, #196]	; (80014f4 <main+0x24c>)
 8001430:	f013 ff40 	bl	80152b4 <sniprintf>
 8001434:	e047      	b.n	80014c6 <main+0x21e>
  		        }
  		    	else
  		    	{
  		    		//Open file for writing (Create)
  		    		if(f_open(&SDFile, "Podatki.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8001436:	220a      	movs	r2, #10
 8001438:	4932      	ldr	r1, [pc, #200]	; (8001504 <main+0x25c>)
 800143a:	4833      	ldr	r0, [pc, #204]	; (8001508 <main+0x260>)
 800143c:	f011 fc64 	bl	8012d08 <f_open>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d013      	beq.n	800146e <main+0x1c6>
  		    		{
  		    			//Error_Handler();
  		    			snprintf(SendBuffer,BUFSIZE,"Error3 \r\n");
 8001446:	4a31      	ldr	r2, [pc, #196]	; (800150c <main+0x264>)
 8001448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800144c:	4828      	ldr	r0, [pc, #160]	; (80014f0 <main+0x248>)
 800144e:	f013 ff31 	bl	80152b4 <sniprintf>
  		    			CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8001452:	4827      	ldr	r0, [pc, #156]	; (80014f0 <main+0x248>)
 8001454:	f7fe fed4 	bl	8000200 <strlen>
 8001458:	4603      	mov	r3, r0
 800145a:	4619      	mov	r1, r3
 800145c:	4824      	ldr	r0, [pc, #144]	; (80014f0 <main+0x248>)
 800145e:	f013 f86b 	bl	8014538 <CDC_Transmit_FS>
  		    			strcpy(errorValue, "Error3 \r\n");
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <main+0x24c>)
 8001464:	4a29      	ldr	r2, [pc, #164]	; (800150c <main+0x264>)
 8001466:	ca07      	ldmia	r2, {r0, r1, r2}
 8001468:	c303      	stmia	r3!, {r0, r1}
 800146a:	801a      	strh	r2, [r3, #0]
 800146c:	e02b      	b.n	80014c6 <main+0x21e>
  		    		}
  		    		else
  		    		{

  		    			//Write to the text file
  		    			res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 800146e:	4828      	ldr	r0, [pc, #160]	; (8001510 <main+0x268>)
 8001470:	f7fe fec6 	bl	8000200 <strlen>
 8001474:	4602      	mov	r2, r0
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <main+0x26c>)
 8001478:	4925      	ldr	r1, [pc, #148]	; (8001510 <main+0x268>)
 800147a:	4823      	ldr	r0, [pc, #140]	; (8001508 <main+0x260>)
 800147c:	f011 fe12 	bl	80130a4 <f_write>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <main+0x270>)
 8001486:	701a      	strb	r2, [r3, #0]
  		    			if((byteswritten == 0) || (res != FR_OK))
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <main+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <main+0x1f0>
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <main+0x270>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <main+0x218>
  		    			{
  		    				//Error_Handler();
  		    				snprintf(SendBuffer,BUFSIZE,"Error4 \r\n");
 8001498:	4a20      	ldr	r2, [pc, #128]	; (800151c <main+0x274>)
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	4814      	ldr	r0, [pc, #80]	; (80014f0 <main+0x248>)
 80014a0:	f013 ff08 	bl	80152b4 <sniprintf>
  		    				CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <main+0x248>)
 80014a6:	f7fe feab 	bl	8000200 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4810      	ldr	r0, [pc, #64]	; (80014f0 <main+0x248>)
 80014b0:	f013 f842 	bl	8014538 <CDC_Transmit_FS>
  		    				strcpy(errorValue, "Error4 \r\n");
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <main+0x24c>)
 80014b6:	4a19      	ldr	r2, [pc, #100]	; (800151c <main+0x274>)
 80014b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ba:	c303      	stmia	r3!, {r0, r1}
 80014bc:	801a      	strh	r2, [r3, #0]
  		    			{
 80014be:	e002      	b.n	80014c6 <main+0x21e>
  		    			}
  		    			else
  		    			{

  		    				f_close(&SDFile);
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <main+0x260>)
 80014c2:	f011 ffe2 	bl	801348a <f_close>
  		    		}
  		    	}
  		    }
  		    //f_mount(&SDFatFS, (TCHAR const*)NULL, 0);

  		    f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	4906      	ldr	r1, [pc, #24]	; (80014e4 <main+0x23c>)
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <main+0x240>)
 80014cc:	f011 fbd6 	bl	8012c7c <f_mount>
  		    ///////////////////////////////////////////////////////////////////


  while (1)
  {
	  while(buf_len < windowLength) {
 80014d0:	e190      	b.n	80017f4 <main+0x54c>
 80014d2:	bf00      	nop
 80014d4:	48001000 	.word	0x48001000
 80014d8:	20000b98 	.word	0x20000b98
 80014dc:	20000b94 	.word	0x20000b94
 80014e0:	20001048 	.word	0x20001048
 80014e4:	20001290 	.word	0x20001290
 80014e8:	20001294 	.word	0x20001294
 80014ec:	080170ec 	.word	0x080170ec
 80014f0:	200003d0 	.word	0x200003d0
 80014f4:	2000012c 	.word	0x2000012c
 80014f8:	20000ba8 	.word	0x20000ba8
 80014fc:	080170f8 	.word	0x080170f8
 8001500:	08017104 	.word	0x08017104
 8001504:	08017114 	.word	0x08017114
 8001508:	200014c8 	.word	0x200014c8
 800150c:	08017120 	.word	0x08017120
 8001510:	2000002c 	.word	0x2000002c
 8001514:	20000ba4 	.word	0x20000ba4
 8001518:	20000ba1 	.word	0x20000ba1
 800151c:	0801712c 	.word	0x0801712c
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001526:	48bb      	ldr	r0, [pc, #748]	; (8001814 <main+0x56c>)
 8001528:	f004 fa40 	bl	80059ac <HAL_GPIO_WritePin>
	  		outdata[0] = 0x1e | 0x80 ; // read status register if there is new accelerometer data
 800152c:	4bba      	ldr	r3, [pc, #744]	; (8001818 <main+0x570>)
 800152e:	229e      	movs	r2, #158	; 0x9e
 8001530:	701a      	strb	r2, [r3, #0]
	  		HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2302      	movs	r3, #2
 800153a:	4ab8      	ldr	r2, [pc, #736]	; (800181c <main+0x574>)
 800153c:	49b6      	ldr	r1, [pc, #728]	; (8001818 <main+0x570>)
 800153e:	48b8      	ldr	r0, [pc, #736]	; (8001820 <main+0x578>)
 8001540:	f00a fa92 	bl	800ba68 <HAL_SPI_TransmitReceive>
	  		newValueAvailable = indata[1] & 0b1; //only accelerometer state
 8001544:	4bb5      	ldr	r3, [pc, #724]	; (800181c <main+0x574>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4bb5      	ldr	r3, [pc, #724]	; (8001824 <main+0x57c>)
 8001550:	701a      	strb	r2, [r3, #0]
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001558:	48ae      	ldr	r0, [pc, #696]	; (8001814 <main+0x56c>)
 800155a:	f004 fa27 	bl	80059ac <HAL_GPIO_WritePin>

	  		if(newValueAvailable == 1) {
 800155e:	4bb1      	ldr	r3, [pc, #708]	; (8001824 <main+0x57c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	f040 8146 	bne.w	80017f4 <main+0x54c>

	  			buf_len++;
 8001568:	4baf      	ldr	r3, [pc, #700]	; (8001828 <main+0x580>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	4aae      	ldr	r2, [pc, #696]	; (8001828 <main+0x580>)
 8001570:	6013      	str	r3, [r2, #0]

	  			newValueAvailable = 0;
 8001572:	4bac      	ldr	r3, [pc, #688]	; (8001824 <main+0x57c>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]

	  			//////////////////////////////////////////Read accelerometer measurements
	  			outdata[0] = 0x29 | 0x80 ; // read x, high
 8001578:	4ba7      	ldr	r3, [pc, #668]	; (8001818 <main+0x570>)
 800157a:	22a9      	movs	r2, #169	; 0xa9
 800157c:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001584:	48a3      	ldr	r0, [pc, #652]	; (8001814 <main+0x56c>)
 8001586:	f004 fa11 	bl	80059ac <HAL_GPIO_WritePin>
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2302      	movs	r3, #2
 8001592:	4aa2      	ldr	r2, [pc, #648]	; (800181c <main+0x574>)
 8001594:	49a0      	ldr	r1, [pc, #640]	; (8001818 <main+0x570>)
 8001596:	48a2      	ldr	r0, [pc, #648]	; (8001820 <main+0x578>)
 8001598:	f00a fa66 	bl	800ba68 <HAL_SPI_TransmitReceive>
	  			AccelX1 = indata[1];
 800159c:	4b9f      	ldr	r3, [pc, #636]	; (800181c <main+0x574>)
 800159e:	785a      	ldrb	r2, [r3, #1]
 80015a0:	4ba2      	ldr	r3, [pc, #648]	; (800182c <main+0x584>)
 80015a2:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015aa:	489a      	ldr	r0, [pc, #616]	; (8001814 <main+0x56c>)
 80015ac:	f004 f9fe 	bl	80059ac <HAL_GPIO_WritePin>
	  			outdata[0] = 0x28 | 0x80 ; // read x, low
 80015b0:	4b99      	ldr	r3, [pc, #612]	; (8001818 <main+0x570>)
 80015b2:	22a8      	movs	r2, #168	; 0xa8
 80015b4:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015bc:	4895      	ldr	r0, [pc, #596]	; (8001814 <main+0x56c>)
 80015be:	f004 f9f5 	bl	80059ac <HAL_GPIO_WritePin>
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2302      	movs	r3, #2
 80015ca:	4a94      	ldr	r2, [pc, #592]	; (800181c <main+0x574>)
 80015cc:	4992      	ldr	r1, [pc, #584]	; (8001818 <main+0x570>)
 80015ce:	4894      	ldr	r0, [pc, #592]	; (8001820 <main+0x578>)
 80015d0:	f00a fa4a 	bl	800ba68 <HAL_SPI_TransmitReceive>
	  			AccelX2 = indata[1];
 80015d4:	4b91      	ldr	r3, [pc, #580]	; (800181c <main+0x574>)
 80015d6:	785a      	ldrb	r2, [r3, #1]
 80015d8:	4b95      	ldr	r3, [pc, #596]	; (8001830 <main+0x588>)
 80015da:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e2:	488c      	ldr	r0, [pc, #560]	; (8001814 <main+0x56c>)
 80015e4:	f004 f9e2 	bl	80059ac <HAL_GPIO_WritePin>

	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ee:	4889      	ldr	r0, [pc, #548]	; (8001814 <main+0x56c>)
 80015f0:	f004 f9dc 	bl	80059ac <HAL_GPIO_WritePin>
	  			outdata[0] = 0x2b | 0x80 ; // read y, 0x53
 80015f4:	4b88      	ldr	r3, [pc, #544]	; (8001818 <main+0x570>)
 80015f6:	22ab      	movs	r2, #171	; 0xab
 80015f8:	701a      	strb	r2, [r3, #0]
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2302      	movs	r3, #2
 8001602:	4a86      	ldr	r2, [pc, #536]	; (800181c <main+0x574>)
 8001604:	4984      	ldr	r1, [pc, #528]	; (8001818 <main+0x570>)
 8001606:	4886      	ldr	r0, [pc, #536]	; (8001820 <main+0x578>)
 8001608:	f00a fa2e 	bl	800ba68 <HAL_SPI_TransmitReceive>
	  			AccelY1 = indata[1];
 800160c:	4b83      	ldr	r3, [pc, #524]	; (800181c <main+0x574>)
 800160e:	785a      	ldrb	r2, [r3, #1]
 8001610:	4b88      	ldr	r3, [pc, #544]	; (8001834 <main+0x58c>)
 8001612:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161a:	487e      	ldr	r0, [pc, #504]	; (8001814 <main+0x56c>)
 800161c:	f004 f9c6 	bl	80059ac <HAL_GPIO_WritePin>
	  			outdata[0] = 0x2a | 0x80 ; // read y, low
 8001620:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <main+0x570>)
 8001622:	22aa      	movs	r2, #170	; 0xaa
 8001624:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162c:	4879      	ldr	r0, [pc, #484]	; (8001814 <main+0x56c>)
 800162e:	f004 f9bd 	bl	80059ac <HAL_GPIO_WritePin>
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2302      	movs	r3, #2
 800163a:	4a78      	ldr	r2, [pc, #480]	; (800181c <main+0x574>)
 800163c:	4976      	ldr	r1, [pc, #472]	; (8001818 <main+0x570>)
 800163e:	4878      	ldr	r0, [pc, #480]	; (8001820 <main+0x578>)
 8001640:	f00a fa12 	bl	800ba68 <HAL_SPI_TransmitReceive>
	  			AccelY2 = indata[1];
 8001644:	4b75      	ldr	r3, [pc, #468]	; (800181c <main+0x574>)
 8001646:	785a      	ldrb	r2, [r3, #1]
 8001648:	4b7b      	ldr	r3, [pc, #492]	; (8001838 <main+0x590>)
 800164a:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001652:	4870      	ldr	r0, [pc, #448]	; (8001814 <main+0x56c>)
 8001654:	f004 f9aa 	bl	80059ac <HAL_GPIO_WritePin>

	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800165e:	486d      	ldr	r0, [pc, #436]	; (8001814 <main+0x56c>)
 8001660:	f004 f9a4 	bl	80059ac <HAL_GPIO_WritePin>
	  			outdata[0] = 0x2d | 0x80 ; // read z, 0x55
 8001664:	4b6c      	ldr	r3, [pc, #432]	; (8001818 <main+0x570>)
 8001666:	22ad      	movs	r2, #173	; 0xad
 8001668:	701a      	strb	r2, [r3, #0]
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2302      	movs	r3, #2
 8001672:	4a6a      	ldr	r2, [pc, #424]	; (800181c <main+0x574>)
 8001674:	4968      	ldr	r1, [pc, #416]	; (8001818 <main+0x570>)
 8001676:	486a      	ldr	r0, [pc, #424]	; (8001820 <main+0x578>)
 8001678:	f00a f9f6 	bl	800ba68 <HAL_SPI_TransmitReceive>
	  			AccelZ1 = indata[1];
 800167c:	4b67      	ldr	r3, [pc, #412]	; (800181c <main+0x574>)
 800167e:	785a      	ldrb	r2, [r3, #1]
 8001680:	4b6e      	ldr	r3, [pc, #440]	; (800183c <main+0x594>)
 8001682:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168a:	4862      	ldr	r0, [pc, #392]	; (8001814 <main+0x56c>)
 800168c:	f004 f98e 	bl	80059ac <HAL_GPIO_WritePin>
	  			outdata[0] = 0x2c | 0x80 ; // read z, low
 8001690:	4b61      	ldr	r3, [pc, #388]	; (8001818 <main+0x570>)
 8001692:	22ac      	movs	r2, #172	; 0xac
 8001694:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169c:	485d      	ldr	r0, [pc, #372]	; (8001814 <main+0x56c>)
 800169e:	f004 f985 	bl	80059ac <HAL_GPIO_WritePin>
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2302      	movs	r3, #2
 80016aa:	4a5c      	ldr	r2, [pc, #368]	; (800181c <main+0x574>)
 80016ac:	495a      	ldr	r1, [pc, #360]	; (8001818 <main+0x570>)
 80016ae:	485c      	ldr	r0, [pc, #368]	; (8001820 <main+0x578>)
 80016b0:	f00a f9da 	bl	800ba68 <HAL_SPI_TransmitReceive>
	  			AccelZ2 = indata[1];
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <main+0x574>)
 80016b6:	785a      	ldrb	r2, [r3, #1]
 80016b8:	4b61      	ldr	r3, [pc, #388]	; (8001840 <main+0x598>)
 80016ba:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c2:	4854      	ldr	r0, [pc, #336]	; (8001814 <main+0x56c>)
 80016c4:	f004 f972 	bl	80059ac <HAL_GPIO_WritePin>
	  			int16_t AccelY;
	  			int32_t AccelY_mg;
	  			int16_t AccelZ;
	  			int32_t AccelZ_mg;

	  			AccelX= ((int16_t)AccelX1 <<8 ) | AccelX2;
 80016c8:	4b58      	ldr	r3, [pc, #352]	; (800182c <main+0x584>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b57      	ldr	r3, [pc, #348]	; (8001830 <main+0x588>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  			AccelX_mg= (int32_t)((float)AccelX * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 80016dc:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001844 <main+0x59c>
 80016ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f4:	ee17 3a90 	vmov	r3, s15
 80016f8:	65fb      	str	r3, [r7, #92]	; 0x5c
	  			AccelY= ((int16_t)AccelY1 <<8 ) | AccelY2;
 80016fa:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <main+0x58c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b21a      	sxth	r2, r3
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <main+0x590>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  			AccelY_mg= (int32_t)((float)AccelY * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 800170e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001844 <main+0x59c>
 800171e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001726:	ee17 3a90 	vmov	r3, s15
 800172a:	657b      	str	r3, [r7, #84]	; 0x54
	  			AccelZ= ((int16_t)AccelZ1 <<8 ) | AccelZ2;
 800172c:	4b43      	ldr	r3, [pc, #268]	; (800183c <main+0x594>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	4b42      	ldr	r3, [pc, #264]	; (8001840 <main+0x598>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b21b      	sxth	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	  			AccelZ_mg= (int32_t)((float)AccelZ * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 8001740:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001844 <main+0x59c>
 8001750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	64fb      	str	r3, [r7, #76]	; 0x4c

	  			float AccelX_inG = AccelX_mg * 0.001f;
 800175e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001848 <main+0x5a0>
 800176c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001770:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	  			float AccelY_inG = AccelY_mg * 0.001f;
 8001774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001848 <main+0x5a0>
 8001782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001786:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  			float AccelZ_inG = AccelZ_mg * 0.001f;
 800178a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001794:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001848 <main+0x5a0>
 8001798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40


	  			bufAccX[buf_len - 1] = AccelX_inG;
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <main+0x580>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	4a29      	ldr	r2, [pc, #164]	; (800184c <main+0x5a4>)
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017ae:	601a      	str	r2, [r3, #0]
	  			bufAccY[buf_len - 1] = AccelY_inG;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <main+0x580>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <main+0x5a8>)
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017be:	601a      	str	r2, [r3, #0]
	  			bufAccZ[buf_len - 1] = AccelZ_inG;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <main+0x580>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	4a23      	ldr	r2, [pc, #140]	; (8001854 <main+0x5ac>)
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017ce:	601a      	str	r2, [r3, #0]

	  			bufAccMagnitude[buf_len - 1] = accMagnitude(AccelX_inG, AccelY_inG, AccelZ_inG);
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <main+0x580>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	1e5c      	subs	r4, r3, #1
 80017d6:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 80017da:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 80017de:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 80017e2:	f001 fd85 	bl	80032f0 <accMagnitude>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <main+0x5b0>)
 80017ec:	00a3      	lsls	r3, r4, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	edc3 7a00 	vstr	s15, [r3]
	  while(buf_len < windowLength) {
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <main+0x5b4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <main+0x580>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	f73f ae8e 	bgt.w	8001520 <main+0x278>

	  		}
	  	}

	  	if(buf_len == windowLength) {
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <main+0x5b4>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <main+0x580>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d1f0      	bne.n	80017f4 <main+0x54c>
 8001812:	e025      	b.n	8001860 <main+0x5b8>
 8001814:	48001000 	.word	0x48001000
 8001818:	20000b98 	.word	0x20000b98
 800181c:	20000b94 	.word	0x20000b94
 8001820:	20001048 	.word	0x20001048
 8001824:	20000b9a 	.word	0x20000b9a
 8001828:	20000b90 	.word	0x20000b90
 800182c:	20000b9b 	.word	0x20000b9b
 8001830:	20000b9e 	.word	0x20000b9e
 8001834:	20000b9c 	.word	0x20000b9c
 8001838:	20000b9f 	.word	0x20000b9f
 800183c:	20000b9d 	.word	0x20000b9d
 8001840:	20000ba0 	.word	0x20000ba0
 8001844:	3df9db23 	.word	0x3df9db23
 8001848:	3a83126f 	.word	0x3a83126f
 800184c:	200004d0 	.word	0x200004d0
 8001850:	20000670 	.word	0x20000670
 8001854:	20000810 	.word	0x20000810
 8001858:	200009b0 	.word	0x200009b0
 800185c:	20000014 	.word	0x20000014
	  		buf_len = windowOverlap;
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <main+0x684>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b32      	ldr	r3, [pc, #200]	; (8001930 <main+0x688>)
 8001868:	601a      	str	r2, [r3, #0]

	  		accX_Mean = 0;
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <main+0x68c>)
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
	  		accX_STD = 0;
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <main+0x690>)
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
	  		accX_MinMax = 0;
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <main+0x694>)
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
	  		accX_RMS = 0;
 8001882:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <main+0x698>)
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	601a      	str	r2, [r3, #0]

	  		accY_Mean = 0;
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <main+0x69c>)
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
	  		accY_STD = 0;
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <main+0x6a0>)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
	  		accY_MinMax = 0;
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <main+0x6a4>)
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
	  		accY_RMS = 0;
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <main+0x6a8>)
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

	  		accZ_Mean = 0;
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <main+0x6ac>)
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
	  		accZ_STD = 0;
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <main+0x6b0>)
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	  		accZ_MinMax = 0;
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <main+0x6b4>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
	  		accZ_RMS = 0;
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <main+0x6b8>)
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

	  		accMagnitude_Mean = 0;
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <main+0x6bc>)
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	  		accMagnitude_STD = 0;
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <main+0x6c0>)
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
	  		accMagnitude_MinMax = 0;
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <main+0x6c4>)
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
	  		accMagnitude_RMS = 0;
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <main+0x6c8>)
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]


	  		float minX = bufAccX[0];
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <main+0x6cc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  		float maxX = bufAccX[0];
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <main+0x6cc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  		float minY = bufAccY[0];
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <main+0x6d0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  		float maxY = bufAccY[0];
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <main+0x6d0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  		float minZ = bufAccZ[0];
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <main+0x6d4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  		float maxZ = bufAccZ[0];
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <main+0x6d4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  		float minMagnitude = bufAccMagnitude[0];
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <main+0x6d8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	67fb      	str	r3, [r7, #124]	; 0x7c
	  		float maxMagnitude = bufAccMagnitude[0];
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <main+0x6d8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	67bb      	str	r3, [r7, #120]	; 0x78


	  		for (int i = 0; i < windowLength; i++) {
 8001926:	2300      	movs	r3, #0
 8001928:	677b      	str	r3, [r7, #116]	; 0x74
 800192a:	e19c      	b.n	8001c66 <main+0x9be>
 800192c:	20000015 	.word	0x20000015
 8001930:	20000b90 	.word	0x20000b90
 8001934:	20000b50 	.word	0x20000b50
 8001938:	20000b54 	.word	0x20000b54
 800193c:	20000b58 	.word	0x20000b58
 8001940:	20000b5c 	.word	0x20000b5c
 8001944:	20000b60 	.word	0x20000b60
 8001948:	20000b64 	.word	0x20000b64
 800194c:	20000b68 	.word	0x20000b68
 8001950:	20000b6c 	.word	0x20000b6c
 8001954:	20000b70 	.word	0x20000b70
 8001958:	20000b74 	.word	0x20000b74
 800195c:	20000b78 	.word	0x20000b78
 8001960:	20000b7c 	.word	0x20000b7c
 8001964:	20000b80 	.word	0x20000b80
 8001968:	20000b84 	.word	0x20000b84
 800196c:	20000b88 	.word	0x20000b88
 8001970:	20000b8c 	.word	0x20000b8c
 8001974:	200004d0 	.word	0x200004d0
 8001978:	20000670 	.word	0x20000670
 800197c:	20000810 	.word	0x20000810
 8001980:	200009b0 	.word	0x200009b0

	  			accX_Mean += bufAccX[i];
 8001984:	4ac0      	ldr	r2, [pc, #768]	; (8001c88 <main+0x9e0>)
 8001986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	ed93 7a00 	vldr	s14, [r3]
 8001990:	4bbe      	ldr	r3, [pc, #760]	; (8001c8c <main+0x9e4>)
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	4bbc      	ldr	r3, [pc, #752]	; (8001c8c <main+0x9e4>)
 800199c:	edc3 7a00 	vstr	s15, [r3]
	  			if(minX > bufAccX[i])
 80019a0:	4ab9      	ldr	r2, [pc, #740]	; (8001c88 <main+0x9e0>)
 80019a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80019b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	dd06      	ble.n	80019c8 <main+0x720>
	  				minX = bufAccX[i];
 80019ba:	4ab3      	ldr	r2, [pc, #716]	; (8001c88 <main+0x9e0>)
 80019bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  			if(maxX < bufAccX[i])
 80019c8:	4aaf      	ldr	r2, [pc, #700]	; (8001c88 <main+0x9e0>)
 80019ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80019d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d506      	bpl.n	80019f0 <main+0x748>
	  				maxX = bufAccX[i];
 80019e2:	4aa9      	ldr	r2, [pc, #676]	; (8001c88 <main+0x9e0>)
 80019e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  			accX_RMS += pow(bufAccX[i], 2);
 80019f0:	4aa5      	ldr	r2, [pc, #660]	; (8001c88 <main+0x9e0>)
 80019f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdbc 	bl	8000578 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8001c80 <main+0x9d8>
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	f014 f83e 	bl	8015a8c <pow>
 8001a10:	ec55 4b10 	vmov	r4, r5, d0
 8001a14:	4b9e      	ldr	r3, [pc, #632]	; (8001c90 <main+0x9e8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fdad 	bl	8000578 <__aeabi_f2d>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4620      	mov	r0, r4
 8001a24:	4629      	mov	r1, r5
 8001a26:	f7fe fc49 	bl	80002bc <__adddf3>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f8a9 	bl	8000b88 <__aeabi_d2f>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a95      	ldr	r2, [pc, #596]	; (8001c90 <main+0x9e8>)
 8001a3a:	6013      	str	r3, [r2, #0]

	  			accY_Mean += bufAccY[i];
 8001a3c:	4a95      	ldr	r2, [pc, #596]	; (8001c94 <main+0x9ec>)
 8001a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	ed93 7a00 	vldr	s14, [r3]
 8001a48:	4b93      	ldr	r3, [pc, #588]	; (8001c98 <main+0x9f0>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a52:	4b91      	ldr	r3, [pc, #580]	; (8001c98 <main+0x9f0>)
 8001a54:	edc3 7a00 	vstr	s15, [r3]
	  			if(minY > bufAccY[i])
 8001a58:	4a8e      	ldr	r2, [pc, #568]	; (8001c94 <main+0x9ec>)
 8001a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	dd06      	ble.n	8001a80 <main+0x7d8>
	  				minY = bufAccY[i];
 8001a72:	4a88      	ldr	r2, [pc, #544]	; (8001c94 <main+0x9ec>)
 8001a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  			if(maxY < bufAccY[i])
 8001a80:	4a84      	ldr	r2, [pc, #528]	; (8001c94 <main+0x9ec>)
 8001a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a98:	d506      	bpl.n	8001aa8 <main+0x800>
	  				maxY = bufAccY[i];
 8001a9a:	4a7e      	ldr	r2, [pc, #504]	; (8001c94 <main+0x9ec>)
 8001a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  			accY_RMS += pow(bufAccY[i], 2);
 8001aa8:	4a7a      	ldr	r2, [pc, #488]	; (8001c94 <main+0x9ec>)
 8001aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd60 	bl	8000578 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001c80 <main+0x9d8>
 8001ac0:	ec43 2b10 	vmov	d0, r2, r3
 8001ac4:	f013 ffe2 	bl	8015a8c <pow>
 8001ac8:	ec55 4b10 	vmov	r4, r5, d0
 8001acc:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <main+0x9f4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd51 	bl	8000578 <__aeabi_f2d>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fbed 	bl	80002bc <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f84d 	bl	8000b88 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a6a      	ldr	r2, [pc, #424]	; (8001c9c <main+0x9f4>)
 8001af2:	6013      	str	r3, [r2, #0]

	  			accZ_Mean += bufAccZ[i];
 8001af4:	4a6a      	ldr	r2, [pc, #424]	; (8001ca0 <main+0x9f8>)
 8001af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	ed93 7a00 	vldr	s14, [r3]
 8001b00:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <main+0x9fc>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <main+0x9fc>)
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
	  			if(minZ > bufAccZ[i])
 8001b10:	4a63      	ldr	r2, [pc, #396]	; (8001ca0 <main+0x9f8>)
 8001b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	dd06      	ble.n	8001b38 <main+0x890>
	  				minZ = bufAccZ[i];
 8001b2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ca0 <main+0x9f8>)
 8001b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  			if(maxZ < bufAccZ[i])
 8001b38:	4a59      	ldr	r2, [pc, #356]	; (8001ca0 <main+0x9f8>)
 8001b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	d506      	bpl.n	8001b60 <main+0x8b8>
	  				maxZ = bufAccZ[i];
 8001b52:	4a53      	ldr	r2, [pc, #332]	; (8001ca0 <main+0x9f8>)
 8001b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  			accZ_RMS += pow(bufAccZ[i], 2);
 8001b60:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <main+0x9f8>)
 8001b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fd04 	bl	8000578 <__aeabi_f2d>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8001c80 <main+0x9d8>
 8001b78:	ec43 2b10 	vmov	d0, r2, r3
 8001b7c:	f013 ff86 	bl	8015a8c <pow>
 8001b80:	ec55 4b10 	vmov	r4, r5, d0
 8001b84:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <main+0xa00>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fcf5 	bl	8000578 <__aeabi_f2d>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4620      	mov	r0, r4
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7fe fb91 	bl	80002bc <__adddf3>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7fe fff1 	bl	8000b88 <__aeabi_d2f>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a3f      	ldr	r2, [pc, #252]	; (8001ca8 <main+0xa00>)
 8001baa:	6013      	str	r3, [r2, #0]

	  			accMagnitude_Mean += bufAccMagnitude[i];
 8001bac:	4a3f      	ldr	r2, [pc, #252]	; (8001cac <main+0xa04>)
 8001bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	ed93 7a00 	vldr	s14, [r3]
 8001bb8:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <main+0xa08>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <main+0xa08>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
	  			if(minMagnitude > bufAccMagnitude[i])
 8001bc8:	4a38      	ldr	r2, [pc, #224]	; (8001cac <main+0xa04>)
 8001bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	dd05      	ble.n	8001bee <main+0x946>
	  				minMagnitude = bufAccMagnitude[i];
 8001be2:	4a32      	ldr	r2, [pc, #200]	; (8001cac <main+0xa04>)
 8001be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	67fb      	str	r3, [r7, #124]	; 0x7c
	  			if(maxMagnitude < bufAccMagnitude[i])
 8001bee:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <main+0xa04>)
 8001bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	d505      	bpl.n	8001c14 <main+0x96c>
	  				maxMagnitude = bufAccMagnitude[i];
 8001c08:	4a28      	ldr	r2, [pc, #160]	; (8001cac <main+0xa04>)
 8001c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	67bb      	str	r3, [r7, #120]	; 0x78
	  			accMagnitude_RMS += pow(bufAccMagnitude[i], 2);
 8001c14:	4a25      	ldr	r2, [pc, #148]	; (8001cac <main+0xa04>)
 8001c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fcaa 	bl	8000578 <__aeabi_f2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001c80 <main+0x9d8>
 8001c2c:	ec43 2b10 	vmov	d0, r2, r3
 8001c30:	f013 ff2c 	bl	8015a8c <pow>
 8001c34:	ec55 4b10 	vmov	r4, r5, d0
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <main+0xa0c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc9b 	bl	8000578 <__aeabi_f2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4620      	mov	r0, r4
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f7fe fb37 	bl	80002bc <__adddf3>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ff97 	bl	8000b88 <__aeabi_d2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <main+0xa0c>)
 8001c5e:	6013      	str	r3, [r2, #0]
	  		for (int i = 0; i < windowLength; i++) {
 8001c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c62:	3301      	adds	r3, #1
 8001c64:	677b      	str	r3, [r7, #116]	; 0x74
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <main+0xa10>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	f6ff ae88 	blt.w	8001984 <main+0x6dc>

	  		}

	  		accX_Mean /= windowLength;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <main+0x9e4>)
 8001c76:	edd3 6a00 	vldr	s13, [r3]
 8001c7a:	e01f      	b.n	8001cbc <main+0xa14>
 8001c7c:	f3af 8000 	nop.w
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40000000 	.word	0x40000000
 8001c88:	200004d0 	.word	0x200004d0
 8001c8c:	20000b50 	.word	0x20000b50
 8001c90:	20000b5c 	.word	0x20000b5c
 8001c94:	20000670 	.word	0x20000670
 8001c98:	20000b60 	.word	0x20000b60
 8001c9c:	20000b6c 	.word	0x20000b6c
 8001ca0:	20000810 	.word	0x20000810
 8001ca4:	20000b70 	.word	0x20000b70
 8001ca8:	20000b7c 	.word	0x20000b7c
 8001cac:	200009b0 	.word	0x200009b0
 8001cb0:	20000b80 	.word	0x20000b80
 8001cb4:	20000b8c 	.word	0x20000b8c
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <main+0xbbc>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ccc:	4b66      	ldr	r3, [pc, #408]	; (8001e68 <main+0xbc0>)
 8001cce:	edc3 7a00 	vstr	s15, [r3]
	  		accX_MinMax = maxX - minX;
 8001cd2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001cd6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <main+0xbc4>)
 8001ce0:	edc3 7a00 	vstr	s15, [r3]
	  		accX_RMS = sqrt(accX_RMS/windowLength);
 8001ce4:	4b62      	ldr	r3, [pc, #392]	; (8001e70 <main+0xbc8>)
 8001ce6:	ed93 7a00 	vldr	s14, [r3]
 8001cea:	4b5e      	ldr	r3, [pc, #376]	; (8001e64 <main+0xbbc>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cfa:	ee16 0a90 	vmov	r0, s13
 8001cfe:	f7fe fc3b 	bl	8000578 <__aeabi_f2d>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	ec43 2b10 	vmov	d0, r2, r3
 8001d0a:	f013 ff2f 	bl	8015b6c <sqrt>
 8001d0e:	ec53 2b10 	vmov	r2, r3, d0
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe ff37 	bl	8000b88 <__aeabi_d2f>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a54      	ldr	r2, [pc, #336]	; (8001e70 <main+0xbc8>)
 8001d1e:	6013      	str	r3, [r2, #0]

	  		accY_Mean /= windowLength;
 8001d20:	4b54      	ldr	r3, [pc, #336]	; (8001e74 <main+0xbcc>)
 8001d22:	edd3 6a00 	vldr	s13, [r3]
 8001d26:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <main+0xbbc>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <main+0xbcc>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]
	  		accY_MinMax = maxY - minY;
 8001d3c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001d40:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d48:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <main+0xbd0>)
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
	  		accY_RMS = sqrt(accY_RMS/windowLength);
 8001d4e:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <main+0xbd4>)
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <main+0xbbc>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d64:	ee16 0a90 	vmov	r0, s13
 8001d68:	f7fe fc06 	bl	8000578 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b10 	vmov	d0, r2, r3
 8001d74:	f013 fefa 	bl	8015b6c <sqrt>
 8001d78:	ec53 2b10 	vmov	r2, r3, d0
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe ff02 	bl	8000b88 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a3d      	ldr	r2, [pc, #244]	; (8001e7c <main+0xbd4>)
 8001d88:	6013      	str	r3, [r2, #0]

	  		accZ_Mean /= windowLength;
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <main+0xbd8>)
 8001d8c:	edd3 6a00 	vldr	s13, [r3]
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <main+0xbbc>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	ee07 3a90 	vmov	s15, r3
 8001d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da0:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <main+0xbd8>)
 8001da2:	edc3 7a00 	vstr	s15, [r3]
	  		accZ_MinMax = maxZ - minZ;
 8001da6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001daa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <main+0xbdc>)
 8001db4:	edc3 7a00 	vstr	s15, [r3]
	  		accZ_RMS = sqrt(accZ_RMS/windowLength);
 8001db8:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <main+0xbe0>)
 8001dba:	ed93 7a00 	vldr	s14, [r3]
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <main+0xbbc>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dce:	ee16 0a90 	vmov	r0, s13
 8001dd2:	f7fe fbd1 	bl	8000578 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	ec43 2b10 	vmov	d0, r2, r3
 8001dde:	f013 fec5 	bl	8015b6c <sqrt>
 8001de2:	ec53 2b10 	vmov	r2, r3, d0
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fecd 	bl	8000b88 <__aeabi_d2f>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <main+0xbe0>)
 8001df2:	6013      	str	r3, [r2, #0]

	  		accMagnitude_Mean /= windowLength;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <main+0xbe4>)
 8001df6:	edd3 6a00 	vldr	s13, [r3]
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <main+0xbbc>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <main+0xbe4>)
 8001e0c:	edc3 7a00 	vstr	s15, [r3]
	  		accMagnitude_MinMax = maxMagnitude - minMagnitude;
 8001e10:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001e14:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <main+0xbe8>)
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
	  		accMagnitude_RMS = sqrt(accMagnitude_RMS/windowLength);
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <main+0xbec>)
 8001e24:	ed93 7a00 	vldr	s14, [r3]
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <main+0xbbc>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e38:	ee16 0a90 	vmov	r0, s13
 8001e3c:	f7fe fb9c 	bl	8000578 <__aeabi_f2d>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	ec43 2b10 	vmov	d0, r2, r3
 8001e48:	f013 fe90 	bl	8015b6c <sqrt>
 8001e4c:	ec53 2b10 	vmov	r2, r3, d0
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fe98 	bl	8000b88 <__aeabi_d2f>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <main+0xbec>)
 8001e5c:	6013      	str	r3, [r2, #0]

	  		for (int i = 0; i < windowLength; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	673b      	str	r3, [r7, #112]	; 0x70
 8001e62:	e0d0      	b.n	8002006 <main+0xd5e>
 8001e64:	20000014 	.word	0x20000014
 8001e68:	20000b50 	.word	0x20000b50
 8001e6c:	20000b58 	.word	0x20000b58
 8001e70:	20000b5c 	.word	0x20000b5c
 8001e74:	20000b60 	.word	0x20000b60
 8001e78:	20000b68 	.word	0x20000b68
 8001e7c:	20000b6c 	.word	0x20000b6c
 8001e80:	20000b70 	.word	0x20000b70
 8001e84:	20000b78 	.word	0x20000b78
 8001e88:	20000b7c 	.word	0x20000b7c
 8001e8c:	20000b80 	.word	0x20000b80
 8001e90:	20000b88 	.word	0x20000b88
 8001e94:	20000b8c 	.word	0x20000b8c
	  			accX_STD += pow(bufAccX[i] - accX_Mean, 2);
 8001e98:	4a9f      	ldr	r2, [pc, #636]	; (8002118 <main+0xe70>)
 8001e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	ed93 7a00 	vldr	s14, [r3]
 8001ea4:	4b9d      	ldr	r3, [pc, #628]	; (800211c <main+0xe74>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eae:	ee17 0a90 	vmov	r0, s15
 8001eb2:	f7fe fb61 	bl	8000578 <__aeabi_f2d>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8002110 <main+0xe68>
 8001ebe:	ec43 2b10 	vmov	d0, r2, r3
 8001ec2:	f013 fde3 	bl	8015a8c <pow>
 8001ec6:	ec55 4b10 	vmov	r4, r5, d0
 8001eca:	4b95      	ldr	r3, [pc, #596]	; (8002120 <main+0xe78>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb52 	bl	8000578 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe f9ee 	bl	80002bc <__adddf3>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7fe fe4e 	bl	8000b88 <__aeabi_d2f>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4a8c      	ldr	r2, [pc, #560]	; (8002120 <main+0xe78>)
 8001ef0:	6013      	str	r3, [r2, #0]
	  			accY_STD += pow(bufAccY[i] - accY_Mean, 2);
 8001ef2:	4a8c      	ldr	r2, [pc, #560]	; (8002124 <main+0xe7c>)
 8001ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	4b8a      	ldr	r3, [pc, #552]	; (8002128 <main+0xe80>)
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f08:	ee17 0a90 	vmov	r0, s15
 8001f0c:	f7fe fb34 	bl	8000578 <__aeabi_f2d>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8002110 <main+0xe68>
 8001f18:	ec43 2b10 	vmov	d0, r2, r3
 8001f1c:	f013 fdb6 	bl	8015a8c <pow>
 8001f20:	ec55 4b10 	vmov	r4, r5, d0
 8001f24:	4b81      	ldr	r3, [pc, #516]	; (800212c <main+0xe84>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb25 	bl	8000578 <__aeabi_f2d>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe f9c1 	bl	80002bc <__adddf3>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fe21 	bl	8000b88 <__aeabi_d2f>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a78      	ldr	r2, [pc, #480]	; (800212c <main+0xe84>)
 8001f4a:	6013      	str	r3, [r2, #0]
	  			accZ_STD += pow(bufAccZ[i] - accZ_Mean, 2);
 8001f4c:	4a78      	ldr	r2, [pc, #480]	; (8002130 <main+0xe88>)
 8001f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	ed93 7a00 	vldr	s14, [r3]
 8001f58:	4b76      	ldr	r3, [pc, #472]	; (8002134 <main+0xe8c>)
 8001f5a:	edd3 7a00 	vldr	s15, [r3]
 8001f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f62:	ee17 0a90 	vmov	r0, s15
 8001f66:	f7fe fb07 	bl	8000578 <__aeabi_f2d>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8002110 <main+0xe68>
 8001f72:	ec43 2b10 	vmov	d0, r2, r3
 8001f76:	f013 fd89 	bl	8015a8c <pow>
 8001f7a:	ec55 4b10 	vmov	r4, r5, d0
 8001f7e:	4b6e      	ldr	r3, [pc, #440]	; (8002138 <main+0xe90>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe faf8 	bl	8000578 <__aeabi_f2d>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	4629      	mov	r1, r5
 8001f90:	f7fe f994 	bl	80002bc <__adddf3>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fdf4 	bl	8000b88 <__aeabi_d2f>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a65      	ldr	r2, [pc, #404]	; (8002138 <main+0xe90>)
 8001fa4:	6013      	str	r3, [r2, #0]
	  			accMagnitude_STD += pow(bufAccMagnitude[i] - accMagnitude_Mean, 2);
 8001fa6:	4a65      	ldr	r2, [pc, #404]	; (800213c <main+0xe94>)
 8001fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <main+0xe98>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbc:	ee17 0a90 	vmov	r0, s15
 8001fc0:	f7fe fada 	bl	8000578 <__aeabi_f2d>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8002110 <main+0xe68>
 8001fcc:	ec43 2b10 	vmov	d0, r2, r3
 8001fd0:	f013 fd5c 	bl	8015a8c <pow>
 8001fd4:	ec55 4b10 	vmov	r4, r5, d0
 8001fd8:	4b5a      	ldr	r3, [pc, #360]	; (8002144 <main+0xe9c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe facb 	bl	8000578 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f7fe f967 	bl	80002bc <__adddf3>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fdc7 	bl	8000b88 <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a51      	ldr	r2, [pc, #324]	; (8002144 <main+0xe9c>)
 8001ffe:	6013      	str	r3, [r2, #0]
	  		for (int i = 0; i < windowLength; i++) {
 8002000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002002:	3301      	adds	r3, #1
 8002004:	673b      	str	r3, [r7, #112]	; 0x70
 8002006:	4b50      	ldr	r3, [pc, #320]	; (8002148 <main+0xea0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800200e:	4293      	cmp	r3, r2
 8002010:	f6ff af42 	blt.w	8001e98 <main+0xbf0>
	  		}

	  		accX_STD = sqrt(accX_STD / windowLength);
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <main+0xe78>)
 8002016:	ed93 7a00 	vldr	s14, [r3]
 800201a:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <main+0xea0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002026:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800202a:	ee16 0a90 	vmov	r0, s13
 800202e:	f7fe faa3 	bl	8000578 <__aeabi_f2d>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	ec43 2b10 	vmov	d0, r2, r3
 800203a:	f013 fd97 	bl	8015b6c <sqrt>
 800203e:	ec53 2b10 	vmov	r2, r3, d0
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f7fe fd9f 	bl	8000b88 <__aeabi_d2f>
 800204a:	4603      	mov	r3, r0
 800204c:	4a34      	ldr	r2, [pc, #208]	; (8002120 <main+0xe78>)
 800204e:	6013      	str	r3, [r2, #0]
	  		accY_STD = sqrt(accY_STD / windowLength);
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <main+0xe84>)
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <main+0xea0>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002062:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002066:	ee16 0a90 	vmov	r0, s13
 800206a:	f7fe fa85 	bl	8000578 <__aeabi_f2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	ec43 2b10 	vmov	d0, r2, r3
 8002076:	f013 fd79 	bl	8015b6c <sqrt>
 800207a:	ec53 2b10 	vmov	r2, r3, d0
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f7fe fd81 	bl	8000b88 <__aeabi_d2f>
 8002086:	4603      	mov	r3, r0
 8002088:	4a28      	ldr	r2, [pc, #160]	; (800212c <main+0xe84>)
 800208a:	6013      	str	r3, [r2, #0]
	  		accZ_STD = sqrt(accZ_STD / windowLength);
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <main+0xe90>)
 800208e:	ed93 7a00 	vldr	s14, [r3]
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <main+0xea0>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020a2:	ee16 0a90 	vmov	r0, s13
 80020a6:	f7fe fa67 	bl	8000578 <__aeabi_f2d>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ec43 2b10 	vmov	d0, r2, r3
 80020b2:	f013 fd5b 	bl	8015b6c <sqrt>
 80020b6:	ec53 2b10 	vmov	r2, r3, d0
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fd63 	bl	8000b88 <__aeabi_d2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <main+0xe90>)
 80020c6:	6013      	str	r3, [r2, #0]
	  		accMagnitude_STD = sqrt(accMagnitude_STD / windowLength);
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <main+0xe9c>)
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <main+0xea0>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020de:	ee16 0a90 	vmov	r0, s13
 80020e2:	f7fe fa49 	bl	8000578 <__aeabi_f2d>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	ec43 2b10 	vmov	d0, r2, r3
 80020ee:	f013 fd3d 	bl	8015b6c <sqrt>
 80020f2:	ec53 2b10 	vmov	r2, r3, d0
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fd45 	bl	8000b88 <__aeabi_d2f>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a10      	ldr	r2, [pc, #64]	; (8002144 <main+0xe9c>)
 8002102:	6013      	str	r3, [r2, #0]


	  		//Replace first half of buffers with their second half
	  		for (int i = 0; i < windowOverlap; i++) {
 8002104:	2300      	movs	r3, #0
 8002106:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002108:	e05b      	b.n	80021c2 <main+0xf1a>
 800210a:	bf00      	nop
 800210c:	f3af 8000 	nop.w
 8002110:	00000000 	.word	0x00000000
 8002114:	40000000 	.word	0x40000000
 8002118:	200004d0 	.word	0x200004d0
 800211c:	20000b50 	.word	0x20000b50
 8002120:	20000b54 	.word	0x20000b54
 8002124:	20000670 	.word	0x20000670
 8002128:	20000b60 	.word	0x20000b60
 800212c:	20000b64 	.word	0x20000b64
 8002130:	20000810 	.word	0x20000810
 8002134:	20000b70 	.word	0x20000b70
 8002138:	20000b74 	.word	0x20000b74
 800213c:	200009b0 	.word	0x200009b0
 8002140:	20000b80 	.word	0x20000b80
 8002144:	20000b84 	.word	0x20000b84
 8002148:	20000014 	.word	0x20000014
	  			bufAccX[i] = bufAccX[i + windowOverlap];
 800214c:	4bc4      	ldr	r3, [pc, #784]	; (8002460 <main+0x11b8>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002154:	4413      	add	r3, r2
 8002156:	4ac3      	ldr	r2, [pc, #780]	; (8002464 <main+0x11bc>)
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	49c1      	ldr	r1, [pc, #772]	; (8002464 <main+0x11bc>)
 8002160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	601a      	str	r2, [r3, #0]
	  			bufAccY[i] = bufAccY[i + windowOverlap];
 8002168:	4bbd      	ldr	r3, [pc, #756]	; (8002460 <main+0x11b8>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002170:	4413      	add	r3, r2
 8002172:	4abd      	ldr	r2, [pc, #756]	; (8002468 <main+0x11c0>)
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	49bb      	ldr	r1, [pc, #748]	; (8002468 <main+0x11c0>)
 800217c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	601a      	str	r2, [r3, #0]
	  			bufAccZ[i] = bufAccZ[i + windowOverlap];
 8002184:	4bb6      	ldr	r3, [pc, #728]	; (8002460 <main+0x11b8>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218c:	4413      	add	r3, r2
 800218e:	4ab7      	ldr	r2, [pc, #732]	; (800246c <main+0x11c4>)
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	49b5      	ldr	r1, [pc, #724]	; (800246c <main+0x11c4>)
 8002198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	601a      	str	r2, [r3, #0]
	  			bufAccMagnitude[i] = bufAccMagnitude[i + windowOverlap];
 80021a0:	4baf      	ldr	r3, [pc, #700]	; (8002460 <main+0x11b8>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a8:	4413      	add	r3, r2
 80021aa:	4ab1      	ldr	r2, [pc, #708]	; (8002470 <main+0x11c8>)
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	49af      	ldr	r1, [pc, #700]	; (8002470 <main+0x11c8>)
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	601a      	str	r2, [r3, #0]
	  		for (int i = 0; i < windowOverlap; i++) {
 80021bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021be:	3301      	adds	r3, #1
 80021c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021c2:	4ba7      	ldr	r3, [pc, #668]	; (8002460 <main+0x11b8>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	4293      	cmp	r3, r2
 80021cc:	dbbe      	blt.n	800214c <main+0xea4>
	  		}


	  		accX_Mean = (accX_Mean - (-0.7925340396583439)) * 2.0949933205020708;
 80021ce:	4ba9      	ldr	r3, [pc, #676]	; (8002474 <main+0x11cc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f9d0 	bl	8000578 <__aeabi_f2d>
 80021d8:	a37d      	add	r3, pc, #500	; (adr r3, 80023d0 <main+0x1128>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fe f86d 	bl	80002bc <__adddf3>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	a37b      	add	r3, pc, #492	; (adr r3, 80023d8 <main+0x1130>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe fa1a 	bl	8000628 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fcc4 	bl	8000b88 <__aeabi_d2f>
 8002200:	4603      	mov	r3, r0
 8002202:	4a9c      	ldr	r2, [pc, #624]	; (8002474 <main+0x11cc>)
 8002204:	6013      	str	r3, [r2, #0]
	  		accX_STD = (accX_STD - 0.25463438722461235) * 5.929210562633304;
 8002206:	4b9c      	ldr	r3, [pc, #624]	; (8002478 <main+0x11d0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f9b4 	bl	8000578 <__aeabi_f2d>
 8002210:	a373      	add	r3, pc, #460	; (adr r3, 80023e0 <main+0x1138>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fe f84f 	bl	80002b8 <__aeabi_dsub>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	a371      	add	r3, pc, #452	; (adr r3, 80023e8 <main+0x1140>)
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f7fe f9fe 	bl	8000628 <__aeabi_dmul>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fca8 	bl	8000b88 <__aeabi_d2f>
 8002238:	4603      	mov	r3, r0
 800223a:	4a8f      	ldr	r2, [pc, #572]	; (8002478 <main+0x11d0>)
 800223c:	6013      	str	r3, [r2, #0]
	  		accX_MinMax = (accX_MinMax - 1.2237432034064877) * 1.1805004714159546;
 800223e:	4b8f      	ldr	r3, [pc, #572]	; (800247c <main+0x11d4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe f998 	bl	8000578 <__aeabi_f2d>
 8002248:	a369      	add	r3, pc, #420	; (adr r3, 80023f0 <main+0x1148>)
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	f7fe f833 	bl	80002b8 <__aeabi_dsub>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	a367      	add	r3, pc, #412	; (adr r3, 80023f8 <main+0x1150>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	f7fe f9e2 	bl	8000628 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fc8c 	bl	8000b88 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	4a82      	ldr	r2, [pc, #520]	; (800247c <main+0x11d4>)
 8002274:	6013      	str	r3, [r2, #0]
	  		accX_RMS = (accX_RMS - 0.9080303069938368) * 2.8316304285664726;
 8002276:	4b82      	ldr	r3, [pc, #520]	; (8002480 <main+0x11d8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f97c 	bl	8000578 <__aeabi_f2d>
 8002280:	a35f      	add	r3, pc, #380	; (adr r3, 8002400 <main+0x1158>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f7fe f817 	bl	80002b8 <__aeabi_dsub>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	a35d      	add	r3, pc, #372	; (adr r3, 8002408 <main+0x1160>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe f9c6 	bl	8000628 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc70 	bl	8000b88 <__aeabi_d2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a75      	ldr	r2, [pc, #468]	; (8002480 <main+0x11d8>)
 80022ac:	6013      	str	r3, [r2, #0]

	  		accY_Mean = (accY_Mean - (-0.043692102975635576)) * 3.7465012332289103;
 80022ae:	4b75      	ldr	r3, [pc, #468]	; (8002484 <main+0x11dc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f960 	bl	8000578 <__aeabi_f2d>
 80022b8:	a355      	add	r3, pc, #340	; (adr r3, 8002410 <main+0x1168>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fd fffd 	bl	80002bc <__adddf3>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	a353      	add	r3, pc, #332	; (adr r3, 8002418 <main+0x1170>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe f9aa 	bl	8000628 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fc54 	bl	8000b88 <__aeabi_d2f>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a68      	ldr	r2, [pc, #416]	; (8002484 <main+0x11dc>)
 80022e4:	6013      	str	r3, [r2, #0]
	  		accY_STD = (accY_STD - 0.2380924561831248) * 6.581672613424032;
 80022e6:	4b68      	ldr	r3, [pc, #416]	; (8002488 <main+0x11e0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f944 	bl	8000578 <__aeabi_f2d>
 80022f0:	a34b      	add	r3, pc, #300	; (adr r3, 8002420 <main+0x1178>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	f7fd ffdf 	bl	80002b8 <__aeabi_dsub>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	a349      	add	r3, pc, #292	; (adr r3, 8002428 <main+0x1180>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe f98e 	bl	8000628 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f7fe fc38 	bl	8000b88 <__aeabi_d2f>
 8002318:	4603      	mov	r3, r0
 800231a:	4a5b      	ldr	r2, [pc, #364]	; (8002488 <main+0x11e0>)
 800231c:	6013      	str	r3, [r2, #0]
	  		accY_MinMax = (accY_MinMax - 1.2170445463478536) * 1.2546657227425297;
 800231e:	4b5b      	ldr	r3, [pc, #364]	; (800248c <main+0x11e4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f928 	bl	8000578 <__aeabi_f2d>
 8002328:	a341      	add	r3, pc, #260	; (adr r3, 8002430 <main+0x1188>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fd ffc3 	bl	80002b8 <__aeabi_dsub>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	a33f      	add	r3, pc, #252	; (adr r3, 8002438 <main+0x1190>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f972 	bl	8000628 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f7fe fc1c 	bl	8000b88 <__aeabi_d2f>
 8002350:	4603      	mov	r3, r0
 8002352:	4a4e      	ldr	r2, [pc, #312]	; (800248c <main+0x11e4>)
 8002354:	6013      	str	r3, [r2, #0]
	  		accY_RMS = (accY_RMS - 0.3188075751411812) * 4.415641148049384;
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <main+0x11e8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f90c 	bl	8000578 <__aeabi_f2d>
 8002360:	a337      	add	r3, pc, #220	; (adr r3, 8002440 <main+0x1198>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fd ffa7 	bl	80002b8 <__aeabi_dsub>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	a335      	add	r3, pc, #212	; (adr r3, 8002448 <main+0x11a0>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe f956 	bl	8000628 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4610      	mov	r0, r2
 8002382:	4619      	mov	r1, r3
 8002384:	f7fe fc00 	bl	8000b88 <__aeabi_d2f>
 8002388:	4603      	mov	r3, r0
 800238a:	4a41      	ldr	r2, [pc, #260]	; (8002490 <main+0x11e8>)
 800238c:	6013      	str	r3, [r2, #0]

	  		accZ_Mean = (accZ_Mean - 0.0036754295900627365) * 3.7391857781655413;
 800238e:	4b41      	ldr	r3, [pc, #260]	; (8002494 <main+0x11ec>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f8f0 	bl	8000578 <__aeabi_f2d>
 8002398:	a32d      	add	r3, pc, #180	; (adr r3, 8002450 <main+0x11a8>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f7fd ff8b 	bl	80002b8 <__aeabi_dsub>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	a32b      	add	r3, pc, #172	; (adr r3, 8002458 <main+0x11b0>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe f93a 	bl	8000628 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fbe4 	bl	8000b88 <__aeabi_d2f>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a34      	ldr	r2, [pc, #208]	; (8002494 <main+0x11ec>)
 80023c4:	6013      	str	r3, [r2, #0]
	  		accZ_STD = (accZ_STD - 0.23952607306415402) * 7.479754757980447;
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <main+0x11f0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	e066      	b.n	800249c <main+0x11f4>
 80023ce:	bf00      	nop
 80023d0:	58a9944f 	.word	0x58a9944f
 80023d4:	3fe95c70 	.word	0x3fe95c70
 80023d8:	dba728a2 	.word	0xdba728a2
 80023dc:	4000c28b 	.word	0x4000c28b
 80023e0:	076444fb 	.word	0x076444fb
 80023e4:	3fd04bee 	.word	0x3fd04bee
 80023e8:	f9466e63 	.word	0xf9466e63
 80023ec:	4017b782 	.word	0x4017b782
 80023f0:	c0d5548b 	.word	0xc0d5548b
 80023f4:	3ff39473 	.word	0x3ff39473
 80023f8:	765a4e44 	.word	0x765a4e44
 80023fc:	3ff2e354 	.word	0x3ff2e354
 8002400:	930a1781 	.word	0x930a1781
 8002404:	3fed0e95 	.word	0x3fed0e95
 8002408:	daa86966 	.word	0xdaa86966
 800240c:	4006a72d 	.word	0x4006a72d
 8002410:	b2bf6537 	.word	0xb2bf6537
 8002414:	3fa65ecf 	.word	0x3fa65ecf
 8002418:	a379227c 	.word	0xa379227c
 800241c:	400df8d5 	.word	0x400df8d5
 8002420:	485d8bf8 	.word	0x485d8bf8
 8002424:	3fce79d0 	.word	0x3fce79d0
 8002428:	fc4e8a4f 	.word	0xfc4e8a4f
 800242c:	401a53a1 	.word	0x401a53a1
 8002430:	b3c56d50 	.word	0xb3c56d50
 8002434:	3ff37903 	.word	0x3ff37903
 8002438:	5d69763f 	.word	0x5d69763f
 800243c:	3ff4131c 	.word	0x3ff4131c
 8002440:	e33cb32c 	.word	0xe33cb32c
 8002444:	3fd46757 	.word	0x3fd46757
 8002448:	d546f9db 	.word	0xd546f9db
 800244c:	4011a99d 	.word	0x4011a99d
 8002450:	3c6b1212 	.word	0x3c6b1212
 8002454:	3f6e1bef 	.word	0x3f6e1bef
 8002458:	3bb71d4f 	.word	0x3bb71d4f
 800245c:	400de9da 	.word	0x400de9da
 8002460:	20000015 	.word	0x20000015
 8002464:	200004d0 	.word	0x200004d0
 8002468:	20000670 	.word	0x20000670
 800246c:	20000810 	.word	0x20000810
 8002470:	200009b0 	.word	0x200009b0
 8002474:	20000b50 	.word	0x20000b50
 8002478:	20000b54 	.word	0x20000b54
 800247c:	20000b58 	.word	0x20000b58
 8002480:	20000b5c 	.word	0x20000b5c
 8002484:	20000b60 	.word	0x20000b60
 8002488:	20000b64 	.word	0x20000b64
 800248c:	20000b68 	.word	0x20000b68
 8002490:	20000b6c 	.word	0x20000b6c
 8002494:	20000b70 	.word	0x20000b70
 8002498:	20000b74 	.word	0x20000b74
 800249c:	f7fe f86c 	bl	8000578 <__aeabi_f2d>
 80024a0:	a3d5      	add	r3, pc, #852	; (adr r3, 80027f8 <main+0x1550>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fd ff07 	bl	80002b8 <__aeabi_dsub>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	a3d3      	add	r3, pc, #844	; (adr r3, 8002800 <main+0x1558>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe f8b6 	bl	8000628 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fb60 	bl	8000b88 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4ab5      	ldr	r2, [pc, #724]	; (80027a0 <main+0x14f8>)
 80024cc:	6013      	str	r3, [r2, #0]
	  		accZ_MinMax = (accZ_MinMax - 1.2980415984277747) * 1.313726772069218;
 80024ce:	4bb5      	ldr	r3, [pc, #724]	; (80027a4 <main+0x14fc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f850 	bl	8000578 <__aeabi_f2d>
 80024d8:	a399      	add	r3, pc, #612	; (adr r3, 8002740 <main+0x1498>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fd feeb 	bl	80002b8 <__aeabi_dsub>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	a397      	add	r3, pc, #604	; (adr r3, 8002748 <main+0x14a0>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f89a 	bl	8000628 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe fb44 	bl	8000b88 <__aeabi_d2f>
 8002500:	4603      	mov	r3, r0
 8002502:	4aa8      	ldr	r2, [pc, #672]	; (80027a4 <main+0x14fc>)
 8002504:	6013      	str	r3, [r2, #0]
	  		accZ_RMS = (accZ_RMS - 0.3156636494289826) * 4.60580702527008;
 8002506:	4ba8      	ldr	r3, [pc, #672]	; (80027a8 <main+0x1500>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f834 	bl	8000578 <__aeabi_f2d>
 8002510:	a38f      	add	r3, pc, #572	; (adr r3, 8002750 <main+0x14a8>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f7fd fecf 	bl	80002b8 <__aeabi_dsub>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	a38d      	add	r3, pc, #564	; (adr r3, 8002758 <main+0x14b0>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fe f87e 	bl	8000628 <__aeabi_dmul>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f7fe fb28 	bl	8000b88 <__aeabi_d2f>
 8002538:	4603      	mov	r3, r0
 800253a:	4a9b      	ldr	r2, [pc, #620]	; (80027a8 <main+0x1500>)
 800253c:	6013      	str	r3, [r2, #0]

	  		accMagnitude_Mean = (accMagnitude_Mean - 1.0669456527929735) * 15.930676904057798;
 800253e:	4b9b      	ldr	r3, [pc, #620]	; (80027ac <main+0x1504>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe f818 	bl	8000578 <__aeabi_f2d>
 8002548:	a385      	add	r3, pc, #532	; (adr r3, 8002760 <main+0x14b8>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fd feb3 	bl	80002b8 <__aeabi_dsub>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	a383      	add	r3, pc, #524	; (adr r3, 8002768 <main+0x14c0>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fe f862 	bl	8000628 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe fb0c 	bl	8000b88 <__aeabi_d2f>
 8002570:	4603      	mov	r3, r0
 8002572:	4a8e      	ldr	r2, [pc, #568]	; (80027ac <main+0x1504>)
 8002574:	6013      	str	r3, [r2, #0]
	  		accMagnitude_STD = (accMagnitude_STD - 0.2766352751305663) * 5.763399986208959;
 8002576:	4b8e      	ldr	r3, [pc, #568]	; (80027b0 <main+0x1508>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fd fffc 	bl	8000578 <__aeabi_f2d>
 8002580:	a37b      	add	r3, pc, #492	; (adr r3, 8002770 <main+0x14c8>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f7fd fe97 	bl	80002b8 <__aeabi_dsub>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	a379      	add	r3, pc, #484	; (adr r3, 8002778 <main+0x14d0>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	f7fe f846 	bl	8000628 <__aeabi_dmul>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7fe faf0 	bl	8000b88 <__aeabi_d2f>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4a81      	ldr	r2, [pc, #516]	; (80027b0 <main+0x1508>)
 80025ac:	6013      	str	r3, [r2, #0]
	  		accMagnitude_MinMax = (accMagnitude_MinMax - 1.3165988949163936) * 1.1621726084324315;
 80025ae:	4b81      	ldr	r3, [pc, #516]	; (80027b4 <main+0x150c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ffe0 	bl	8000578 <__aeabi_f2d>
 80025b8:	a371      	add	r3, pc, #452	; (adr r3, 8002780 <main+0x14d8>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fd fe7b 	bl	80002b8 <__aeabi_dsub>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	a36f      	add	r3, pc, #444	; (adr r3, 8002788 <main+0x14e0>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f82a 	bl	8000628 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fad4 	bl	8000b88 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a74      	ldr	r2, [pc, #464]	; (80027b4 <main+0x150c>)
 80025e4:	6013      	str	r3, [r2, #0]
	  		accMagnitude_RMS = (accMagnitude_RMS - 1.1134635041015108) * 10.457188751844905;
 80025e6:	4b74      	ldr	r3, [pc, #464]	; (80027b8 <main+0x1510>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ffc4 	bl	8000578 <__aeabi_f2d>
 80025f0:	a367      	add	r3, pc, #412	; (adr r3, 8002790 <main+0x14e8>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd fe5f 	bl	80002b8 <__aeabi_dsub>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	a365      	add	r3, pc, #404	; (adr r3, 8002798 <main+0x14f0>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fe f80e 	bl	8000628 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f7fe fab8 	bl	8000b88 <__aeabi_d2f>
 8002618:	4603      	mov	r3, r0
 800261a:	4a67      	ldr	r2, [pc, #412]	; (80027b8 <main+0x1510>)
 800261c:	6013      	str	r3, [r2, #0]

	  		/////////////////////////////////////Result

	  		const float features[] = { accX_Mean, accX_STD, accX_MinMax, accX_RMS, accY_Mean, accY_STD, accY_MinMax, accY_RMS,
 800261e:	4b67      	ldr	r3, [pc, #412]	; (80027bc <main+0x1514>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <main+0x1518>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <main+0x151c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <main+0x1520>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <main+0x1524>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	4b64      	ldr	r3, [pc, #400]	; (80027d0 <main+0x1528>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <main+0x152c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <main+0x1530>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <main+0x1534>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <main+0x14f8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <main+0x14fc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <main+0x1500>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	4b51      	ldr	r3, [pc, #324]	; (80027ac <main+0x1504>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <main+0x1508>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
 8002672:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <main+0x150c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38
 8002678:	4b4f      	ldr	r3, [pc, #316]	; (80027b8 <main+0x1510>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  								 accZ_Mean, accZ_STD, accZ_MinMax, accZ_RMS, accMagnitude_Mean, accMagnitude_STD, accMagnitude_MinMax, accMagnitude_RMS };
	  		int out = nevronskaMreza_HojaOseb_predict(features, 16); // Alternative A: "inline"
 800267e:	463b      	mov	r3, r7
 8002680:	2110      	movs	r1, #16
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fdfe 	bl	8001284 <nevronskaMreza_HojaOseb_predict>
 8002688:	6678      	str	r0, [r7, #100]	; 0x64
	  		if (out < 0) {
 800268a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800268c:	2b00      	cmp	r3, #0
 800268e:	da01      	bge.n	8002694 <main+0x13ec>
	  		    return out; // error
 8002690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002692:	e0e7      	b.n	8002864 <main+0x15bc>
	  		} else {
	  			snprintf(SendBuffer,BUFSIZE,"Razred: %lu, %s \r\n", out, classes[out]);
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <main+0x1538>)
 8002696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a0:	4a50      	ldr	r2, [pc, #320]	; (80027e4 <main+0x153c>)
 80026a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a6:	4850      	ldr	r0, [pc, #320]	; (80027e8 <main+0x1540>)
 80026a8:	f012 fe04 	bl	80152b4 <sniprintf>
	  			CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80026ac:	484e      	ldr	r0, [pc, #312]	; (80027e8 <main+0x1540>)
 80026ae:	f7fd fda7 	bl	8000200 <strlen>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4619      	mov	r1, r3
 80026b6:	484c      	ldr	r0, [pc, #304]	; (80027e8 <main+0x1540>)
 80026b8:	f011 ff3e 	bl	8014538 <CDC_Transmit_FS>

	  			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80026bc:	2200      	movs	r2, #0
 80026be:	2104      	movs	r1, #4
 80026c0:	484a      	ldr	r0, [pc, #296]	; (80027ec <main+0x1544>)
 80026c2:	f003 f973 	bl	80059ac <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 80026c6:	2201      	movs	r2, #1
 80026c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026cc:	4848      	ldr	r0, [pc, #288]	; (80027f0 <main+0x1548>)
 80026ce:	f003 f96d 	bl	80059ac <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80026d2:	2200      	movs	r2, #0
 80026d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d8:	4846      	ldr	r0, [pc, #280]	; (80027f4 <main+0x154c>)
 80026da:	f003 f967 	bl	80059ac <HAL_GPIO_WritePin>

	  			switch(out)
 80026de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	f200 809e 	bhi.w	8002822 <main+0x157a>
 80026e6:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <main+0x1444>)
 80026e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ec:	08002701 	.word	0x08002701
 80026f0:	0800270d 	.word	0x0800270d
 80026f4:	0800271b 	.word	0x0800271b
 80026f8:	08002729 	.word	0x08002729
 80026fc:	08002809 	.word	0x08002809
	  				    {
	  				        case 0:
	  				        	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	2104      	movs	r1, #4
 8002704:	4839      	ldr	r0, [pc, #228]	; (80027ec <main+0x1544>)
 8002706:	f003 f951 	bl	80059ac <HAL_GPIO_WritePin>
	  				            break;
 800270a:	e08a      	b.n	8002822 <main+0x157a>
	  				        case 1:
	  				        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002712:	4837      	ldr	r0, [pc, #220]	; (80027f0 <main+0x1548>)
 8002714:	f003 f94a 	bl	80059ac <HAL_GPIO_WritePin>
	  				        	break;
 8002718:	e083      	b.n	8002822 <main+0x157a>
	  				        case 2:
	  				        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800271a:	2201      	movs	r2, #1
 800271c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002720:	4834      	ldr	r0, [pc, #208]	; (80027f4 <main+0x154c>)
 8002722:	f003 f943 	bl	80059ac <HAL_GPIO_WritePin>
	  				        	break;
 8002726:	e07c      	b.n	8002822 <main+0x157a>
	  				        case 3:
	  				        	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8002728:	2201      	movs	r2, #1
 800272a:	2104      	movs	r1, #4
 800272c:	482f      	ldr	r0, [pc, #188]	; (80027ec <main+0x1544>)
 800272e:	f003 f93d 	bl	80059ac <HAL_GPIO_WritePin>
	  				        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002738:	482d      	ldr	r0, [pc, #180]	; (80027f0 <main+0x1548>)
 800273a:	f003 f937 	bl	80059ac <HAL_GPIO_WritePin>
	  				        	break;
 800273e:	e070      	b.n	8002822 <main+0x157a>
 8002740:	44618489 	.word	0x44618489
 8002744:	3ff4c4c7 	.word	0x3ff4c4c7
 8002748:	5d1eabc7 	.word	0x5d1eabc7
 800274c:	3ff50506 	.word	0x3ff50506
 8002750:	4eb557e4 	.word	0x4eb557e4
 8002754:	3fd433d5 	.word	0x3fd433d5
 8002758:	ad44e35e 	.word	0xad44e35e
 800275c:	40126c58 	.word	0x40126c58
 8002760:	9ad5aede 	.word	0x9ad5aede
 8002764:	3ff11235 	.word	0x3ff11235
 8002768:	aee4243c 	.word	0xaee4243c
 800276c:	402fdc81 	.word	0x402fdc81
 8002770:	70e6c484 	.word	0x70e6c484
 8002774:	3fd1b464 	.word	0x3fd1b464
 8002778:	b9da2327 	.word	0xb9da2327
 800277c:	40170db8 	.word	0x40170db8
 8002780:	00b9d9b5 	.word	0x00b9d9b5
 8002784:	3ff510ca 	.word	0x3ff510ca
 8002788:	4e186390 	.word	0x4e186390
 800278c:	3ff29842 	.word	0x3ff29842
 8002790:	1b767d23 	.word	0x1b767d23
 8002794:	3ff1d0bf 	.word	0x3ff1d0bf
 8002798:	a4e28bbd 	.word	0xa4e28bbd
 800279c:	4024ea14 	.word	0x4024ea14
 80027a0:	20000b74 	.word	0x20000b74
 80027a4:	20000b78 	.word	0x20000b78
 80027a8:	20000b7c 	.word	0x20000b7c
 80027ac:	20000b80 	.word	0x20000b80
 80027b0:	20000b84 	.word	0x20000b84
 80027b4:	20000b88 	.word	0x20000b88
 80027b8:	20000b8c 	.word	0x20000b8c
 80027bc:	20000b50 	.word	0x20000b50
 80027c0:	20000b54 	.word	0x20000b54
 80027c4:	20000b58 	.word	0x20000b58
 80027c8:	20000b5c 	.word	0x20000b5c
 80027cc:	20000b60 	.word	0x20000b60
 80027d0:	20000b64 	.word	0x20000b64
 80027d4:	20000b68 	.word	0x20000b68
 80027d8:	20000b6c 	.word	0x20000b6c
 80027dc:	20000b70 	.word	0x20000b70
 80027e0:	20000018 	.word	0x20000018
 80027e4:	08017138 	.word	0x08017138
 80027e8:	200003d0 	.word	0x200003d0
 80027ec:	48001400 	.word	0x48001400
 80027f0:	48001800 	.word	0x48001800
 80027f4:	48000400 	.word	0x48000400
 80027f8:	552cc7d2 	.word	0x552cc7d2
 80027fc:	3fcea8ca 	.word	0x3fcea8ca
 8002800:	d4ce8173 	.word	0xd4ce8173
 8002804:	401deb44 	.word	0x401deb44
	  				        case 4:
	  				        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002808:	2201      	movs	r2, #1
 800280a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800280e:	4817      	ldr	r0, [pc, #92]	; (800286c <main+0x15c4>)
 8002810:	f003 f8cc 	bl	80059ac <HAL_GPIO_WritePin>
	  				        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800281a:	4815      	ldr	r0, [pc, #84]	; (8002870 <main+0x15c8>)
 800281c:	f003 f8c6 	bl	80059ac <HAL_GPIO_WritePin>
	  				        	break;
 8002820:	bf00      	nop
	  				    }

	  			///////////////////////////////////////////////////////////////////SD card

	  			f_open(&SDFile, "Podatki.TXT", FA_OPEN_APPEND | FA_WRITE);
 8002822:	2232      	movs	r2, #50	; 0x32
 8002824:	4913      	ldr	r1, [pc, #76]	; (8002874 <main+0x15cc>)
 8002826:	4814      	ldr	r0, [pc, #80]	; (8002878 <main+0x15d0>)
 8002828:	f010 fa6e 	bl	8012d08 <f_open>
	  			f_lseek(&SDFile, f_size(&SDFile));
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <main+0x15d0>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4619      	mov	r1, r3
 8002832:	4811      	ldr	r0, [pc, #68]	; (8002878 <main+0x15d0>)
 8002834:	f010 fe53 	bl	80134de <f_lseek>

	  			strcpy(wtext, SendBuffer);
 8002838:	4910      	ldr	r1, [pc, #64]	; (800287c <main+0x15d4>)
 800283a:	4811      	ldr	r0, [pc, #68]	; (8002880 <main+0x15d8>)
 800283c:	f012 fd6e 	bl	801531c <strcpy>

	  			res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8002840:	480f      	ldr	r0, [pc, #60]	; (8002880 <main+0x15d8>)
 8002842:	f7fd fcdd 	bl	8000200 <strlen>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <main+0x15dc>)
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <main+0x15d8>)
 800284c:	480a      	ldr	r0, [pc, #40]	; (8002878 <main+0x15d0>)
 800284e:	f010 fc29 	bl	80130a4 <f_write>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <main+0x15e0>)
 8002858:	701a      	strb	r2, [r3, #0]

	  			f_close(&SDFile);
 800285a:	4807      	ldr	r0, [pc, #28]	; (8002878 <main+0x15d0>)
 800285c:	f010 fe15 	bl	801348a <f_close>
	  while(buf_len < windowLength) {
 8002860:	f7fe bfc8 	b.w	80017f4 <main+0x54c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002864:	4618      	mov	r0, r3
 8002866:	3798      	adds	r7, #152	; 0x98
 8002868:	46bd      	mov	sp, r7
 800286a:	bdb0      	pop	{r4, r5, r7, pc}
 800286c:	48000400 	.word	0x48000400
 8002870:	48001800 	.word	0x48001800
 8002874:	08017114 	.word	0x08017114
 8002878:	200014c8 	.word	0x200014c8
 800287c:	200003d0 	.word	0x200003d0
 8002880:	2000002c 	.word	0x2000002c
 8002884:	20000ba4 	.word	0x20000ba4
 8002888:	20000ba1 	.word	0x20000ba1

0800288c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b096      	sub	sp, #88	; 0x58
 8002890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002892:	f107 0314 	add.w	r3, r7, #20
 8002896:	2244      	movs	r2, #68	; 0x44
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f012 fc12 	bl	80150c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028a0:	463b      	mov	r3, r7
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80028ae:	2000      	movs	r0, #0
 80028b0:	f004 fbaa 	bl	8007008 <HAL_PWREx_ControlVoltageScaling>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <SystemClock_Config+0x32>
  {
    Error_Handler();
 80028ba:	f000 fd4c 	bl	8003356 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80028be:	f004 fb73 	bl	8006fa8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <SystemClock_Config+0xb8>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <SystemClock_Config+0xb8>)
 80028ca:	f023 0318 	bic.w	r3, r3, #24
 80028ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80028d2:	2325      	movs	r3, #37	; 0x25
 80028d4:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028dc:	2301      	movs	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80028e0:	2301      	movs	r3, #1
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e4:	2302      	movs	r3, #2
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028e8:	2303      	movs	r3, #3
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028ec:	2304      	movs	r3, #4
 80028ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80028f0:	233c      	movs	r3, #60	; 0x3c
 80028f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80028f4:	2305      	movs	r3, #5
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028f8:	2302      	movs	r3, #2
 80028fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028fc:	2302      	movs	r3, #2
 80028fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4618      	mov	r0, r3
 8002906:	f004 fc43 	bl	8007190 <HAL_RCC_OscConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002910:	f000 fd21 	bl	8003356 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002914:	230f      	movs	r3, #15
 8002916:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002918:	2303      	movs	r3, #3
 800291a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002928:	463b      	mov	r3, r7
 800292a:	2105      	movs	r1, #5
 800292c:	4618      	mov	r0, r3
 800292e:	f005 f849 	bl	80079c4 <HAL_RCC_ClockConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002938:	f000 fd0d 	bl	8003356 <Error_Handler>
  }
}
 800293c:	bf00      	nop
 800293e:	3758      	adds	r7, #88	; 0x58
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000

08002948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800294e:	463b      	mov	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800295e:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <MX_ADC1_Init+0xc4>)
 8002960:	4a2b      	ldr	r2, [pc, #172]	; (8002a10 <MX_ADC1_Init+0xc8>)
 8002962:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <MX_ADC1_Init+0xc4>)
 8002966:	2200      	movs	r2, #0
 8002968:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800296a:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <MX_ADC1_Init+0xc4>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <MX_ADC1_Init+0xc4>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002976:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <MX_ADC1_Init+0xc4>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <MX_ADC1_Init+0xc4>)
 800297e:	2204      	movs	r2, #4
 8002980:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <MX_ADC1_Init+0xc4>)
 8002984:	2200      	movs	r2, #0
 8002986:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002988:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <MX_ADC1_Init+0xc4>)
 800298a:	2201      	movs	r2, #1
 800298c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <MX_ADC1_Init+0xc4>)
 8002990:	2201      	movs	r2, #1
 8002992:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <MX_ADC1_Init+0xc4>)
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <MX_ADC1_Init+0xc4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <MX_ADC1_Init+0xc4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <MX_ADC1_Init+0xc4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <MX_ADC1_Init+0xc4>)
 80029b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <MX_ADC1_Init+0xc4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <MX_ADC1_Init+0xc4>)
 80029c2:	2204      	movs	r2, #4
 80029c4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029c6:	4811      	ldr	r0, [pc, #68]	; (8002a0c <MX_ADC1_Init+0xc4>)
 80029c8:	f001 fc06 	bl	80041d8 <HAL_ADC_Init>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80029d2:	f000 fcc0 	bl	8003356 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <MX_ADC1_Init+0xcc>)
 80029d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029da:	2306      	movs	r3, #6
 80029dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80029de:	2302      	movs	r3, #2
 80029e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029e2:	237f      	movs	r3, #127	; 0x7f
 80029e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029e6:	2304      	movs	r3, #4
 80029e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029ee:	463b      	mov	r3, r7
 80029f0:	4619      	mov	r1, r3
 80029f2:	4806      	ldr	r0, [pc, #24]	; (8002a0c <MX_ADC1_Init+0xc4>)
 80029f4:	f001 fd3c 	bl	8004470 <HAL_ADC_ConfigChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80029fe:	f000 fcaa 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000da8 	.word	0x20000da8
 8002a10:	50040000 	.word	0x50040000
 8002a14:	21800100 	.word	0x21800100

08002a18 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <MX_DFSDM1_Init+0xb8>)
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	; (8002ad4 <MX_DFSDM1_Init+0xbc>)
 8002a20:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <MX_DFSDM1_Init+0xb8>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <MX_DFSDM1_Init+0xb8>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <MX_DFSDM1_Init+0xb8>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <MX_DFSDM1_Init+0xb8>)
 8002a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a3a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <MX_DFSDM1_Init+0xb8>)
 8002a3e:	22c0      	movs	r2, #192	; 0xc0
 8002a40:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <MX_DFSDM1_Init+0xb8>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8002a48:	4821      	ldr	r0, [pc, #132]	; (8002ad0 <MX_DFSDM1_Init+0xb8>)
 8002a4a:	f002 fadf 	bl	800500c <HAL_DFSDM_FilterInit>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8002a54:	f000 fc7f 	bl	8003356 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a5a:	4a20      	ldr	r2, [pc, #128]	; (8002adc <MX_DFSDM1_Init+0xc4>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a76:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8002aa8:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <MX_DFSDM1_Init+0xc0>)
 8002aaa:	f002 f9ef 	bl	8004e8c <HAL_DFSDM_ChannelInit>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8002ab4:	f000 fc4f 	bl	8003356 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2101      	movs	r1, #1
 8002abc:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_DFSDM1_Init+0xb8>)
 8002abe:	f002 fb7f 	bl	80051c0 <HAL_DFSDM_FilterConfigRegChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8002ac8:	f000 fc45 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000e10 	.word	0x20000e10
 8002ad4:	40016100 	.word	0x40016100
 8002ad8:	20000e64 	.word	0x20000e64
 8002adc:	40016000 	.word	0x40016000

08002ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <MX_I2C1_Init+0x78>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <MX_I2C1_Init+0x7c>)
 8002aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b1a:	480e      	ldr	r0, [pc, #56]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002b1c:	f002 ff5e 	bl	80059dc <HAL_I2C_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b26:	f000 fc16 	bl	8003356 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4809      	ldr	r0, [pc, #36]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002b2e:	f002 ffe4 	bl	8005afa <HAL_I2CEx_ConfigAnalogFilter>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b38:	f000 fc0d 	bl	8003356 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4805      	ldr	r0, [pc, #20]	; (8002b54 <MX_I2C1_Init+0x74>)
 8002b40:	f003 f826 	bl	8005b90 <HAL_I2CEx_ConfigDigitalFilter>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b4a:	f000 fc04 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000efc 	.word	0x20000efc
 8002b58:	40005400 	.word	0x40005400
 8002b5c:	00b03fdb 	.word	0x00b03fdb

08002b60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <MX_I2C3_Init+0x78>)
 8002b68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <MX_I2C3_Init+0x7c>)
 8002b6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b7c:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b9a:	480e      	ldr	r0, [pc, #56]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002b9c:	f002 ff1e 	bl	80059dc <HAL_I2C_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002ba6:	f000 fbd6 	bl	8003356 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002baa:	2100      	movs	r1, #0
 8002bac:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002bae:	f002 ffa4 	bl	8005afa <HAL_I2CEx_ConfigAnalogFilter>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002bb8:	f000 fbcd 	bl	8003356 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <MX_I2C3_Init+0x74>)
 8002bc0:	f002 ffe6 	bl	8005b90 <HAL_I2CEx_ConfigDigitalFilter>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002bca:	f000 fbc4 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000f50 	.word	0x20000f50
 8002bd8:	40005c00 	.word	0x40005c00
 8002bdc:	00b03fdb 	.word	0x00b03fdb

08002be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002bfa:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <MX_RTC_Init+0xb4>)
 8002bfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c06:	227f      	movs	r2, #127	; 0x7f
 8002c08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c0c:	22ff      	movs	r2, #255	; 0xff
 8002c0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c28:	4819      	ldr	r0, [pc, #100]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c2a:	f006 ff2f 	bl	8009a8c <HAL_RTC_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002c34:	f000 fb8f 	bl	8003356 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	2200      	movs	r2, #0
 8002c50:	4619      	mov	r1, r3
 8002c52:	480f      	ldr	r0, [pc, #60]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c54:	f006 ff95 	bl	8009b82 <HAL_RTC_SetTime>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002c5e:	f000 fb7a 	bl	8003356 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8002c66:	2304      	movs	r3, #4
 8002c68:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8002c6e:	2314      	movs	r3, #20
 8002c70:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002c72:	463b      	mov	r3, r7
 8002c74:	2200      	movs	r2, #0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_RTC_Init+0xb0>)
 8002c7a:	f007 f81f 	bl	8009cbc <HAL_RTC_SetDate>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002c84:	f000 fb67 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000fa4 	.word	0x20000fa4
 8002c94:	40002800 	.word	0x40002800

08002c98 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8002c9e:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <MX_SDMMC1_SD_Init+0x40>)
 8002ca0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8002cb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cb4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000fc8 	.word	0x20000fc8
 8002cd8:	50062400 	.word	0x50062400

08002cdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <MX_SPI1_Init+0x78>)
 8002ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002cf6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002cfc:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002cfe:	2202      	movs	r2, #2
 8002d00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d12:	2218      	movs	r2, #24
 8002d14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <MX_SPI1_Init+0x74>)
 8002d3c:	f008 fdf1 	bl	800b922 <HAL_SPI_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d46:	f000 fb06 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20001048 	.word	0x20001048
 8002d54:	40013000 	.word	0x40013000

08002d58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d5e:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <MX_SPI2_Init+0x78>)
 8002d60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d8e:	2230      	movs	r2, #48	; 0x30
 8002d90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002da6:	2207      	movs	r2, #7
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002db6:	4805      	ldr	r0, [pc, #20]	; (8002dcc <MX_SPI2_Init+0x74>)
 8002db8:	f008 fdb3 	bl	800b922 <HAL_SPI_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002dc2:	f000 fac8 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200010ac 	.word	0x200010ac
 8002dd0:	40003800 	.word	0x40003800

08002dd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <MX_SPI3_Init+0x78>)
 8002ddc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002de4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002de6:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002dee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002df2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002df4:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002df6:	2202      	movs	r2, #2
 8002df8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e06:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002e0a:	2218      	movs	r2, #24
 8002e0c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002e22:	2207      	movs	r2, #7
 8002e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <MX_SPI3_Init+0x74>)
 8002e34:	f008 fd75 	bl	800b922 <HAL_SPI_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002e3e:	f000 fa8a 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20001110 	.word	0x20001110
 8002e4c:	40003c00 	.word	0x40003c00

08002e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e56:	f107 0310 	add.w	r3, r7, #16
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <MX_TIM2_Init+0x98>)
 8002e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <MX_TIM2_Init+0x98>)
 8002e78:	2277      	movs	r2, #119	; 0x77
 8002e7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <MX_TIM2_Init+0x98>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <MX_TIM2_Init+0x98>)
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295
 8002e88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e8a:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <MX_TIM2_Init+0x98>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e90:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <MX_TIM2_Init+0x98>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e96:	4814      	ldr	r0, [pc, #80]	; (8002ee8 <MX_TIM2_Init+0x98>)
 8002e98:	f009 f95e 	bl	800c158 <HAL_TIM_Base_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ea2:	f000 fa58 	bl	8003356 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <MX_TIM2_Init+0x98>)
 8002eb4:	f009 fac6 	bl	800c444 <HAL_TIM_ConfigClockSource>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002ebe:	f000 fa4a 	bl	8003356 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4806      	ldr	r0, [pc, #24]	; (8002ee8 <MX_TIM2_Init+0x98>)
 8002ed0:	f009 fce8 	bl	800c8a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002eda:	f000 fa3c 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ede:	bf00      	nop
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20001174 	.word	0x20001174

08002eec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <MX_TIM6_Init+0x64>)
 8002efe:	4a15      	ldr	r2, [pc, #84]	; (8002f54 <MX_TIM6_Init+0x68>)
 8002f00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <MX_TIM6_Init+0x64>)
 8002f04:	2277      	movs	r2, #119	; 0x77
 8002f06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <MX_TIM6_Init+0x64>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <MX_TIM6_Init+0x64>)
 8002f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <MX_TIM6_Init+0x64>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f1c:	480c      	ldr	r0, [pc, #48]	; (8002f50 <MX_TIM6_Init+0x64>)
 8002f1e:	f009 f91b 	bl	800c158 <HAL_TIM_Base_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002f28:	f000 fa15 	bl	8003356 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	4619      	mov	r1, r3
 8002f38:	4805      	ldr	r0, [pc, #20]	; (8002f50 <MX_TIM6_Init+0x64>)
 8002f3a:	f009 fcb3 	bl	800c8a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002f44:	f000 fa07 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f48:	bf00      	nop
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200011c0 	.word	0x200011c0
 8002f54:	40001000 	.word	0x40001000

08002f58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <MX_TIM7_Init+0x64>)
 8002f6a:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <MX_TIM7_Init+0x68>)
 8002f6c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <MX_TIM7_Init+0x64>)
 8002f70:	2277      	movs	r2, #119	; 0x77
 8002f72:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <MX_TIM7_Init+0x64>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <MX_TIM7_Init+0x64>)
 8002f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f80:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <MX_TIM7_Init+0x64>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f88:	480c      	ldr	r0, [pc, #48]	; (8002fbc <MX_TIM7_Init+0x64>)
 8002f8a:	f009 f8e5 	bl	800c158 <HAL_TIM_Base_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002f94:	f000 f9df 	bl	8003356 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4805      	ldr	r0, [pc, #20]	; (8002fbc <MX_TIM7_Init+0x64>)
 8002fa6:	f009 fc7d 	bl	800c8a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002fb0:	f000 f9d1 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	2000120c 	.word	0x2000120c
 8002fc0:	40001400 	.word	0x40001400

08002fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <MX_DMA_Init+0x50>)
 8002fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fce:	4a11      	ldr	r2, [pc, #68]	; (8003014 <MX_DMA_Init+0x50>)
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	6493      	str	r3, [r2, #72]	; 0x48
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <MX_DMA_Init+0x50>)
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <MX_DMA_Init+0x50>)
 8002fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <MX_DMA_Init+0x50>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6493      	str	r3, [r2, #72]	; 0x48
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <MX_DMA_Init+0x50>)
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	200e      	movs	r0, #14
 8003000:	f001 ff0d 	bl	8004e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003004:	200e      	movs	r0, #14
 8003006:	f001 ff26 	bl	8004e56 <HAL_NVIC_EnableIRQ>

}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000

08003018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08e      	sub	sp, #56	; 0x38
 800301c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800302e:	4ba9      	ldr	r3, [pc, #676]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	4aa8      	ldr	r2, [pc, #672]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303a:	4ba6      	ldr	r3, [pc, #664]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003046:	4ba3      	ldr	r3, [pc, #652]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	4aa2      	ldr	r2, [pc, #648]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 800304c:	f043 0308 	orr.w	r3, r3, #8
 8003050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003052:	4ba0      	ldr	r3, [pc, #640]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800305e:	4b9d      	ldr	r3, [pc, #628]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003062:	4a9c      	ldr	r2, [pc, #624]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800306a:	4b9a      	ldr	r3, [pc, #616]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003076:	4b97      	ldr	r3, [pc, #604]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	4a96      	ldr	r2, [pc, #600]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 800307c:	f043 0310 	orr.w	r3, r3, #16
 8003080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003082:	4b94      	ldr	r3, [pc, #592]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b91      	ldr	r3, [pc, #580]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003092:	4a90      	ldr	r2, [pc, #576]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800309a:	4b8e      	ldr	r3, [pc, #568]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030a6:	4b8b      	ldr	r3, [pc, #556]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	4a8a      	ldr	r2, [pc, #552]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 80030ac:	f043 0320 	orr.w	r3, r3, #32
 80030b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b2:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030be:	4b85      	ldr	r3, [pc, #532]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	4a84      	ldr	r2, [pc, #528]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 80030c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ca:	4b82      	ldr	r3, [pc, #520]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80030d6:	f004 f84b 	bl	8007170 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030da:	4b7e      	ldr	r3, [pc, #504]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	4a7d      	ldr	r2, [pc, #500]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 80030e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030e6:	4b7b      	ldr	r3, [pc, #492]	; (80032d4 <MX_GPIO_Init+0x2bc>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 80030f2:	2201      	movs	r2, #1
 80030f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030fc:	f002 fc56 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8003100:	2201      	movs	r2, #1
 8003102:	f641 4130 	movw	r1, #7216	; 0x1c30
 8003106:	4874      	ldr	r0, [pc, #464]	; (80032d8 <MX_GPIO_Init+0x2c0>)
 8003108:	f002 fc50 	bl	80059ac <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 800310c:	2200      	movs	r2, #0
 800310e:	2105      	movs	r1, #5
 8003110:	4872      	ldr	r0, [pc, #456]	; (80032dc <MX_GPIO_Init+0x2c4>)
 8003112:	f002 fc4b 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8003116:	2201      	movs	r2, #1
 8003118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800311c:	4870      	ldr	r0, [pc, #448]	; (80032e0 <MX_GPIO_Init+0x2c8>)
 800311e:	f002 fc45 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 8003122:	2201      	movs	r2, #1
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	486d      	ldr	r0, [pc, #436]	; (80032dc <MX_GPIO_Init+0x2c4>)
 8003128:	f002 fc40 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 800312c:	2200      	movs	r2, #0
 800312e:	2110      	movs	r1, #16
 8003130:	486b      	ldr	r0, [pc, #428]	; (80032e0 <MX_GPIO_Init+0x2c8>)
 8003132:	f002 fc3b 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8003136:	2200      	movs	r2, #0
 8003138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800313c:	4869      	ldr	r0, [pc, #420]	; (80032e4 <MX_GPIO_Init+0x2cc>)
 800313e:	f002 fc35 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8003142:	2348      	movs	r3, #72	; 0x48
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003146:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003154:	4619      	mov	r1, r3
 8003156:	4860      	ldr	r0, [pc, #384]	; (80032d8 <MX_GPIO_Init+0x2c0>)
 8003158:	f002 fa7e 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 800315c:	2360      	movs	r3, #96	; 0x60
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003168:	2303      	movs	r3, #3
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800316c:	2307      	movs	r3, #7
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003174:	4619      	mov	r1, r3
 8003176:	485c      	ldr	r0, [pc, #368]	; (80032e8 <MX_GPIO_Init+0x2d0>)
 8003178:	f002 fa6e 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 800317c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003182:	2311      	movs	r3, #17
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318a:	2303      	movs	r3, #3
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003192:	4619      	mov	r1, r3
 8003194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003198:	f002 fa5e 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 800319c:	2330      	movs	r3, #48	; 0x30
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2300      	movs	r3, #0
 80031aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b0:	4619      	mov	r1, r3
 80031b2:	4849      	ldr	r0, [pc, #292]	; (80032d8 <MX_GPIO_Init+0x2c0>)
 80031b4:	f002 fa50 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 80031b8:	2385      	movs	r3, #133	; 0x85
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031bc:	2301      	movs	r3, #1
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c4:	2300      	movs	r3, #0
 80031c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031cc:	4619      	mov	r1, r3
 80031ce:	4843      	ldr	r0, [pc, #268]	; (80032dc <MX_GPIO_Init+0x2c4>)
 80031d0:	f002 fa42 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 80031d4:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031da:	2301      	movs	r3, #1
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ea:	4619      	mov	r1, r3
 80031ec:	483c      	ldr	r0, [pc, #240]	; (80032e0 <MX_GPIO_Init+0x2c8>)
 80031ee:	f002 fa33 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 80031f2:	2308      	movs	r3, #8
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 80031fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003202:	4619      	mov	r1, r3
 8003204:	4836      	ldr	r0, [pc, #216]	; (80032e0 <MX_GPIO_Init+0x2c8>)
 8003206:	f002 fa27 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 800320a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003210:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800321a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321e:	4619      	mov	r1, r3
 8003220:	4831      	ldr	r0, [pc, #196]	; (80032e8 <MX_GPIO_Init+0x2d0>)
 8003222:	f002 fa19 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8003226:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800322c:	2311      	movs	r3, #17
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003234:	2303      	movs	r3, #3
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800323c:	4619      	mov	r1, r3
 800323e:	4826      	ldr	r0, [pc, #152]	; (80032d8 <MX_GPIO_Init+0x2c0>)
 8003240:	f002 fa0a 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8003244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324a:	2301      	movs	r3, #1
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8003256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325a:	4619      	mov	r1, r3
 800325c:	4821      	ldr	r0, [pc, #132]	; (80032e4 <MX_GPIO_Init+0x2cc>)
 800325e:	f002 f9fb 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 8003262:	2320      	movs	r3, #32
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003266:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 8003270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003274:	4619      	mov	r1, r3
 8003276:	481d      	ldr	r0, [pc, #116]	; (80032ec <MX_GPIO_Init+0x2d4>)
 8003278:	f002 f9ee 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 800327c:	2304      	movs	r3, #4
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003280:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 800328a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328e:	4619      	mov	r1, r3
 8003290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003294:	f002 f9e0 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8003298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800329e:	2300      	movs	r3, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032aa:	4619      	mov	r1, r3
 80032ac:	480d      	ldr	r0, [pc, #52]	; (80032e4 <MX_GPIO_Init+0x2cc>)
 80032ae:	f002 f9d3 	bl	8005658 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 80032b2:	2302      	movs	r3, #2
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 80032c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c4:	4619      	mov	r1, r3
 80032c6:	4806      	ldr	r0, [pc, #24]	; (80032e0 <MX_GPIO_Init+0x2c8>)
 80032c8:	f002 f9c6 	bl	8005658 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032cc:	bf00      	nop
 80032ce:	3738      	adds	r7, #56	; 0x38
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000
 80032d8:	48001000 	.word	0x48001000
 80032dc:	48001400 	.word	0x48001400
 80032e0:	48001800 	.word	0x48001800
 80032e4:	48000400 	.word	0x48000400
 80032e8:	48000c00 	.word	0x48000c00
 80032ec:	48000800 	.word	0x48000800

080032f0 <accMagnitude>:

/* USER CODE BEGIN 4 */

float accMagnitude(float accX, float accY, float accZ) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80032fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80032fe:	ed87 1a01 	vstr	s2, [r7, #4]
    //return sqrt(pow(accX, 2) + pow(accY, 2) + pow(accZ, 2));
	float result = sqrt(accX * accX + accY * accY + accZ * accZ);
 8003302:	edd7 7a03 	vldr	s15, [r7, #12]
 8003306:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800330a:	edd7 7a02 	vldr	s15, [r7, #8]
 800330e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003316:	edd7 7a01 	vldr	s15, [r7, #4]
 800331a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	ee17 0a90 	vmov	r0, s15
 8003326:	f7fd f927 	bl	8000578 <__aeabi_f2d>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	ec43 2b10 	vmov	d0, r2, r3
 8003332:	f012 fc1b 	bl	8015b6c <sqrt>
 8003336:	ec53 2b10 	vmov	r2, r3, d0
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f7fd fc23 	bl	8000b88 <__aeabi_d2f>
 8003342:	4603      	mov	r3, r0
 8003344:	617b      	str	r3, [r7, #20]
	return result;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	ee07 3a90 	vmov	s15, r3
}
 800334c:	eeb0 0a67 	vmov.f32	s0, s15
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800335a:	b672      	cpsid	i
}
 800335c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800335e:	e7fe      	b.n	800335e <Error_Handler+0x8>

08003360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_MspInit+0x44>)
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_MspInit+0x44>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6613      	str	r3, [r2, #96]	; 0x60
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_MspInit+0x44>)
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_MspInit+0x44>)
 8003380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <HAL_MspInit+0x44>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	6593      	str	r3, [r2, #88]	; 0x58
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_MspInit+0x44>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000

080033a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b0b2      	sub	sp, #200	; 0xc8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033c0:	f107 0318 	add.w	r3, r7, #24
 80033c4:	229c      	movs	r2, #156	; 0x9c
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f011 fe7b 	bl	80150c4 <memset>
  if(hadc->Instance==ADC1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <HAL_ADC_MspInit+0x100>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d162      	bne.n	800349e <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80033d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80033de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80033e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80033e6:	2303      	movs	r3, #3
 80033e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80033ea:	2305      	movs	r3, #5
 80033ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80033ee:	2360      	movs	r3, #96	; 0x60
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80033f2:	2302      	movs	r3, #2
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80033f6:	2304      	movs	r3, #4
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80033fa:	2304      	movs	r3, #4
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80033fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003404:	f107 0318 	add.w	r3, r7, #24
 8003408:	4618      	mov	r0, r3
 800340a:	f004 fd95 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003414:	f7ff ff9f 	bl	8003356 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003418:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_ADC_MspInit+0x104>)
 800341a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341c:	4a23      	ldr	r2, [pc, #140]	; (80034ac <HAL_ADC_MspInit+0x104>)
 800341e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <HAL_ADC_MspInit+0x104>)
 8003426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_ADC_MspInit+0x104>)
 8003432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003434:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <HAL_ADC_MspInit+0x104>)
 8003436:	f043 0304 	orr.w	r3, r3, #4
 800343a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800343c:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_ADC_MspInit+0x104>)
 800343e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003448:	4b18      	ldr	r3, [pc, #96]	; (80034ac <HAL_ADC_MspInit+0x104>)
 800344a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344c:	4a17      	ldr	r2, [pc, #92]	; (80034ac <HAL_ADC_MspInit+0x104>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003454:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_ADC_MspInit+0x104>)
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8003460:	2310      	movs	r3, #16
 8003462:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003466:	230b      	movs	r3, #11
 8003468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8003472:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003476:	4619      	mov	r1, r3
 8003478:	480d      	ldr	r0, [pc, #52]	; (80034b0 <HAL_ADC_MspInit+0x108>)
 800347a:	f002 f8ed 	bl	8005658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 800347e:	2308      	movs	r3, #8
 8003480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003484:	230b      	movs	r3, #11
 8003486:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8003490:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003494:	4619      	mov	r1, r3
 8003496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800349a:	f002 f8dd 	bl	8005658 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800349e:	bf00      	nop
 80034a0:	37c8      	adds	r7, #200	; 0xc8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	50040000 	.word	0x50040000
 80034ac:	40021000 	.word	0x40021000
 80034b0:	48000800 	.word	0x48000800

080034b4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b0aa      	sub	sp, #168	; 0xa8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034bc:	f107 030c 	add.w	r3, r7, #12
 80034c0:	229c      	movs	r2, #156	; 0x9c
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f011 fdfd 	bl	80150c4 <memset>
  if(DFSDM1_Init == 0)
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_DFSDM_FilterMspInit+0xe8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d129      	bne.n	8003526 <HAL_DFSDM_FilterMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80034d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 fd28 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 80034ee:	f7ff ff32 	bl	8003356 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80034f2:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <HAL_DFSDM_FilterMspInit+0xec>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3301      	adds	r3, #1
 80034f8:	4a29      	ldr	r2, [pc, #164]	; (80035a0 <HAL_DFSDM_FilterMspInit+0xec>)
 80034fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <HAL_DFSDM_FilterMspInit+0xec>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10b      	bne.n	800351c <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_DFSDM_FilterMspInit+0xf0>)
 8003506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003508:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <HAL_DFSDM_FilterMspInit+0xf0>)
 800350a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350e:	6613      	str	r3, [r2, #96]	; 0x60
 8003510:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_DFSDM_FilterMspInit+0xf0>)
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_DFSDM_FilterMspInit+0xe8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_DFSDM_FilterMspInit+0xe8>)
 8003524:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <HAL_DFSDM_FilterMspInit+0xf4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d131      	bne.n	8003594 <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003530:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003532:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_DFSDM_FilterMspInit+0xfc>)
 8003534:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003538:	2256      	movs	r2, #86	; 0x56
 800353a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003544:	2200      	movs	r2, #0
 8003546:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 800354a:	2280      	movs	r2, #128	; 0x80
 800354c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003554:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800355c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003560:	2220      	movs	r2, #32
 8003562:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800356a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800356c:	480f      	ldr	r0, [pc, #60]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 800356e:	f001 feb9 	bl	80052e4 <HAL_DMA_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 8003578:	f7ff feed 	bl	8003356 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a0b      	ldr	r2, [pc, #44]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
 800358e:	4a07      	ldr	r2, [pc, #28]	; (80035ac <HAL_DFSDM_FilterMspInit+0xf8>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8003594:	bf00      	nop
 8003596:	37a8      	adds	r7, #168	; 0xa8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	2000125c 	.word	0x2000125c
 80035a0:	20001258 	.word	0x20001258
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40016100 	.word	0x40016100
 80035ac:	20000e9c 	.word	0x20000e9c
 80035b0:	40020044 	.word	0x40020044

080035b4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b0aa      	sub	sp, #168	; 0xa8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	229c      	movs	r2, #156	; 0x9c
 80035c2:	2100      	movs	r1, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f011 fd7d 	bl	80150c4 <memset>
  if(DFSDM1_Init == 0)
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d129      	bne.n	8003626 <HAL_DFSDM_ChannelMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80035d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035de:	f107 030c 	add.w	r3, r7, #12
 80035e2:	4618      	mov	r0, r3
 80035e4:	f004 fca8 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 80035ee:	f7ff feb2 	bl	8003356 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_DFSDM_ChannelMspInit+0x80>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3301      	adds	r3, #1
 80035f8:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <HAL_DFSDM_ChannelMspInit+0x80>)
 80035fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <HAL_DFSDM_ChannelMspInit+0x80>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10b      	bne.n	800361c <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <HAL_DFSDM_ChannelMspInit+0x84>)
 8003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003608:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <HAL_DFSDM_ChannelMspInit+0x84>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	6613      	str	r3, [r2, #96]	; 0x60
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_DFSDM_ChannelMspInit+0x84>)
 8003612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <HAL_DFSDM_ChannelMspInit+0x7c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a03      	ldr	r2, [pc, #12]	; (8003630 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8003624:	6013      	str	r3, [r2, #0]
  }

}
 8003626:	bf00      	nop
 8003628:	37a8      	adds	r7, #168	; 0xa8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	2000125c 	.word	0x2000125c
 8003634:	20001258 	.word	0x20001258
 8003638:	40021000 	.word	0x40021000

0800363c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b0b2      	sub	sp, #200	; 0xc8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003654:	f107 0318 	add.w	r3, r7, #24
 8003658:	229c      	movs	r2, #156	; 0x9c
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f011 fd31 	bl	80150c4 <memset>
  if(hi2c->Instance==I2C1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a43      	ldr	r2, [pc, #268]	; (8003774 <HAL_I2C_MspInit+0x138>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d13b      	bne.n	80036e4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800366c:	2340      	movs	r3, #64	; 0x40
 800366e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003670:	2300      	movs	r3, #0
 8003672:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003674:	f107 0318 	add.w	r3, r7, #24
 8003678:	4618      	mov	r0, r3
 800367a:	f004 fc5d 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003684:	f7ff fe67 	bl	8003356 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003688:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 800368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368c:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003694:	4b38      	ldr	r3, [pc, #224]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 8003696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 80036a0:	23c0      	movs	r3, #192	; 0xc0
 80036a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a6:	2312      	movs	r3, #18
 80036a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036b8:	2304      	movs	r3, #4
 80036ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036c2:	4619      	mov	r1, r3
 80036c4:	482d      	ldr	r0, [pc, #180]	; (800377c <HAL_I2C_MspInit+0x140>)
 80036c6:	f001 ffc7 	bl	8005658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036ca:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	4a2a      	ldr	r2, [pc, #168]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 80036d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036d4:	6593      	str	r3, [r2, #88]	; 0x58
 80036d6:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80036e2:	e043      	b.n	800376c <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a25      	ldr	r2, [pc, #148]	; (8003780 <HAL_I2C_MspInit+0x144>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d13e      	bne.n	800376c <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80036ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80036f4:	2300      	movs	r3, #0
 80036f6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036f8:	f107 0318 	add.w	r3, r7, #24
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 fc1b 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003708:	f7ff fe25 	bl	8003356 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003710:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 8003712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 800371a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8003724:	f003 fd24 	bl	8007170 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8003728:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800372c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003730:	2312      	movs	r3, #18
 8003732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003736:	2301      	movs	r3, #1
 8003738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003742:	2304      	movs	r3, #4
 8003744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003748:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800374c:	4619      	mov	r1, r3
 800374e:	480d      	ldr	r0, [pc, #52]	; (8003784 <HAL_I2C_MspInit+0x148>)
 8003750:	f001 ff82 	bl	8005658 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 800375a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_I2C_MspInit+0x13c>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]
}
 800376c:	bf00      	nop
 800376e:	37c8      	adds	r7, #200	; 0xc8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40005400 	.word	0x40005400
 8003778:	40021000 	.word	0x40021000
 800377c:	48000400 	.word	0x48000400
 8003780:	40005c00 	.word	0x40005c00
 8003784:	48001800 	.word	0x48001800

08003788 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b0aa      	sub	sp, #168	; 0xa8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	229c      	movs	r2, #156	; 0x9c
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f011 fc93 	bl	80150c4 <memset>
  if(hrtc->Instance==RTC)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <HAL_RTC_MspInit+0x5c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d118      	bne.n	80037da <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80037a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80037ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	4618      	mov	r0, r3
 80037bc:	f004 fbbc 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80037c6:	f7ff fdc6 	bl	8003356 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_RTC_MspInit+0x60>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <HAL_RTC_MspInit+0x60>)
 80037d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80037da:	bf00      	nop
 80037dc:	37a8      	adds	r7, #168	; 0xa8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40002800 	.word	0x40002800
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b0b2      	sub	sp, #200	; 0xc8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003804:	f107 0318 	add.w	r3, r7, #24
 8003808:	229c      	movs	r2, #156	; 0x9c
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f011 fc59 	bl	80150c4 <memset>
  if(hsd->Instance==SDMMC1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a53      	ldr	r2, [pc, #332]	; (8003964 <HAL_SD_MspInit+0x178>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f040 809f 	bne.w	800395c <HAL_SD_MspInit+0x170>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800381e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003822:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8003824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003828:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382c:	f107 0318 	add.w	r3, r7, #24
 8003830:	4618      	mov	r0, r3
 8003832:	f004 fb81 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800383c:	f7ff fd8b 	bl	8003356 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003840:	4b49      	ldr	r3, [pc, #292]	; (8003968 <HAL_SD_MspInit+0x17c>)
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	4a48      	ldr	r2, [pc, #288]	; (8003968 <HAL_SD_MspInit+0x17c>)
 8003846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800384a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800384c:	4b46      	ldr	r3, [pc, #280]	; (8003968 <HAL_SD_MspInit+0x17c>)
 800384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003858:	4b43      	ldr	r3, [pc, #268]	; (8003968 <HAL_SD_MspInit+0x17c>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	4a42      	ldr	r2, [pc, #264]	; (8003968 <HAL_SD_MspInit+0x17c>)
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003864:	4b40      	ldr	r3, [pc, #256]	; (8003968 <HAL_SD_MspInit+0x17c>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003870:	4b3d      	ldr	r3, [pc, #244]	; (8003968 <HAL_SD_MspInit+0x17c>)
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	4a3c      	ldr	r2, [pc, #240]	; (8003968 <HAL_SD_MspInit+0x17c>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800387c:	4b3a      	ldr	r3, [pc, #232]	; (8003968 <HAL_SD_MspInit+0x17c>)
 800387e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003888:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_SD_MspInit+0x17c>)
 800388a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388c:	4a36      	ldr	r2, [pc, #216]	; (8003968 <HAL_SD_MspInit+0x17c>)
 800388e:	f043 0308 	orr.w	r3, r3, #8
 8003892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003894:	4b34      	ldr	r3, [pc, #208]	; (8003968 <HAL_SD_MspInit+0x17c>)
 8003896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 80038a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a8:	2302      	movs	r3, #2
 80038aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b4:	2303      	movs	r3, #3
 80038b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80038ba:	2308      	movs	r3, #8
 80038bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4829      	ldr	r0, [pc, #164]	; (800396c <HAL_SD_MspInit+0x180>)
 80038c8:	f001 fec6 	bl	8005658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 80038cc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80038d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e0:	2303      	movs	r3, #3
 80038e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80038e6:	230c      	movs	r3, #12
 80038e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038f0:	4619      	mov	r1, r3
 80038f2:	481f      	ldr	r0, [pc, #124]	; (8003970 <HAL_SD_MspInit+0x184>)
 80038f4:	f001 feb0 	bl	8005658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 80038f8:	2304      	movs	r3, #4
 80038fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390a:	2303      	movs	r3, #3
 800390c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003910:	230c      	movs	r3, #12
 8003912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 8003916:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800391a:	4619      	mov	r1, r3
 800391c:	4815      	ldr	r0, [pc, #84]	; (8003974 <HAL_SD_MspInit+0x188>)
 800391e:	f001 fe9b 	bl	8005658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 8003922:	23c0      	movs	r3, #192	; 0xc0
 8003924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003934:	2303      	movs	r3, #3
 8003936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 800393a:	2308      	movs	r3, #8
 800393c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003940:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003944:	4619      	mov	r1, r3
 8003946:	480a      	ldr	r0, [pc, #40]	; (8003970 <HAL_SD_MspInit+0x184>)
 8003948:	f001 fe86 	bl	8005658 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800394c:	2200      	movs	r2, #0
 800394e:	2100      	movs	r1, #0
 8003950:	2031      	movs	r0, #49	; 0x31
 8003952:	f001 fa64 	bl	8004e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003956:	2031      	movs	r0, #49	; 0x31
 8003958:	f001 fa7d 	bl	8004e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800395c:	bf00      	nop
 800395e:	37c8      	adds	r7, #200	; 0xc8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	50062400 	.word	0x50062400
 8003968:	40021000 	.word	0x40021000
 800396c:	48000400 	.word	0x48000400
 8003970:	48000800 	.word	0x48000800
 8003974:	48000c00 	.word	0x48000c00

08003978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08e      	sub	sp, #56	; 0x38
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a64      	ldr	r2, [pc, #400]	; (8003b28 <HAL_SPI_MspInit+0x1b0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d13a      	bne.n	8003a10 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800399a:	4b64      	ldr	r3, [pc, #400]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	4a63      	ldr	r2, [pc, #396]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 80039a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039a4:	6613      	str	r3, [r2, #96]	; 0x60
 80039a6:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 80039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039b2:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	4a5d      	ldr	r2, [pc, #372]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 80039b8:	f043 0310 	orr.w	r3, r3, #16
 80039bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039be:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 80039ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039d4:	2301      	movs	r3, #1
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039dc:	2305      	movs	r3, #5
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 80039e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e4:	4619      	mov	r1, r3
 80039e6:	4852      	ldr	r0, [pc, #328]	; (8003b30 <HAL_SPI_MspInit+0x1b8>)
 80039e8:	f001 fe36 	bl	8005658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 80039ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	2302      	movs	r3, #2
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039fe:	2305      	movs	r3, #5
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a06:	4619      	mov	r1, r3
 8003a08:	4849      	ldr	r0, [pc, #292]	; (8003b30 <HAL_SPI_MspInit+0x1b8>)
 8003a0a:	f001 fe25 	bl	8005658 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003a0e:	e086      	b.n	8003b1e <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a47      	ldr	r2, [pc, #284]	; (8003b34 <HAL_SPI_MspInit+0x1bc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d144      	bne.n	8003aa4 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a1a:	4b44      	ldr	r3, [pc, #272]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a43      	ldr	r2, [pc, #268]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a32:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a36:	4a3d      	ldr	r2, [pc, #244]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003a38:	f043 0308 	orr.w	r3, r3, #8
 8003a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4e:	4a37      	ldr	r2, [pc, #220]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a56:	4b35      	ldr	r3, [pc, #212]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 8003a62:	230a      	movs	r3, #10
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a72:	2305      	movs	r3, #5
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	482e      	ldr	r0, [pc, #184]	; (8003b38 <HAL_SPI_MspInit+0x1c0>)
 8003a7e:	f001 fdeb 	bl	8005658 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8003a82:	2308      	movs	r3, #8
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a86:	2302      	movs	r3, #2
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a92:	2305      	movs	r3, #5
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4827      	ldr	r0, [pc, #156]	; (8003b3c <HAL_SPI_MspInit+0x1c4>)
 8003a9e:	f001 fddb 	bl	8005658 <HAL_GPIO_Init>
}
 8003aa2:	e03c      	b.n	8003b1e <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a25      	ldr	r2, [pc, #148]	; (8003b40 <HAL_SPI_MspInit+0x1c8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d137      	bne.n	8003b1e <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003aae:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <HAL_SPI_MspInit+0x1b4>)
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8003ade:	2330      	movs	r3, #48	; 0x30
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aea:	2303      	movs	r3, #3
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003aee:	2306      	movs	r3, #6
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af6:	4619      	mov	r1, r3
 8003af8:	4812      	ldr	r0, [pc, #72]	; (8003b44 <HAL_SPI_MspInit+0x1cc>)
 8003afa:	f001 fdad 	bl	8005658 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 8003afe:	2308      	movs	r3, #8
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b06:	2301      	movs	r3, #1
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b0e:	2306      	movs	r3, #6
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8003b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b16:	4619      	mov	r1, r3
 8003b18:	480a      	ldr	r0, [pc, #40]	; (8003b44 <HAL_SPI_MspInit+0x1cc>)
 8003b1a:	f001 fd9d 	bl	8005658 <HAL_GPIO_Init>
}
 8003b1e:	bf00      	nop
 8003b20:	3738      	adds	r7, #56	; 0x38
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40013000 	.word	0x40013000
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	48001000 	.word	0x48001000
 8003b34:	40003800 	.word	0x40003800
 8003b38:	48000c00 	.word	0x48000c00
 8003b3c:	48000800 	.word	0x48000800
 8003b40:	40003c00 	.word	0x40003c00
 8003b44:	48000400 	.word	0x48000400

08003b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d10c      	bne.n	8003b74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6593      	str	r3, [r2, #88]	; 0x58
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003b72:	e02a      	b.n	8003bca <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <HAL_TIM_Base_MspInit+0x90>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d114      	bne.n	8003ba8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b84:	f043 0310 	orr.w	r3, r3, #16
 8003b88:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	2036      	movs	r0, #54	; 0x36
 8003b9c:	f001 f93f 	bl	8004e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ba0:	2036      	movs	r0, #54	; 0x36
 8003ba2:	f001 f958 	bl	8004e56 <HAL_NVIC_EnableIRQ>
}
 8003ba6:	e010      	b.n	8003bca <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <HAL_TIM_Base_MspInit+0x94>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10b      	bne.n	8003bca <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003bb8:	f043 0320 	orr.w	r3, r3, #32
 8003bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40001000 	.word	0x40001000
 8003bdc:	40001400 	.word	0x40001400

08003be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003be4:	e7fe      	b.n	8003be4 <NMI_Handler+0x4>

08003be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bea:	e7fe      	b.n	8003bea <HardFault_Handler+0x4>

08003bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf0:	e7fe      	b.n	8003bf0 <MemManage_Handler+0x4>

08003bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf6:	e7fe      	b.n	8003bf6 <BusFault_Handler+0x4>

08003bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bfc:	e7fe      	b.n	8003bfc <UsageFault_Handler+0x4>

08003bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c2c:	f000 f8f0 	bl	8003e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <DMA1_Channel4_IRQHandler+0x10>)
 8003c3a:	f001 fbfb 	bl	8005434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000e9c 	.word	0x20000e9c

08003c48 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <SDMMC1_IRQHandler+0x10>)
 8003c4e:	f006 fbeb 	bl	800a428 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000fc8 	.word	0x20000fc8

08003c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <TIM6_DAC_IRQHandler+0x10>)
 8003c62:	f008 fad0 	bl	800c206 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200011c0 	.word	0x200011c0

08003c70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <OTG_FS_IRQHandler+0x10>)
 8003c76:	f002 f92a 	bl	8005ece <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20002c08 	.word	0x20002c08

08003c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c8c:	4a14      	ldr	r2, [pc, #80]	; (8003ce0 <_sbrk+0x5c>)
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <_sbrk+0x60>)
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <_sbrk+0x64>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <_sbrk+0x64>)
 8003ca2:	4a12      	ldr	r2, [pc, #72]	; (8003cec <_sbrk+0x68>)
 8003ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <_sbrk+0x64>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d207      	bcs.n	8003cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cb4:	f011 f9cc 	bl	8015050 <__errno>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	220c      	movs	r2, #12
 8003cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e009      	b.n	8003cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cc4:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <_sbrk+0x64>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cca:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <_sbrk+0x64>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <_sbrk+0x64>)
 8003cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	200a0000 	.word	0x200a0000
 8003ce4:	00000400 	.word	0x00000400
 8003ce8:	20001260 	.word	0x20001260
 8003cec:	20003348 	.word	0x20003348

08003cf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <SystemInit+0x20>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	4a05      	ldr	r2, [pc, #20]	; (8003d10 <SystemInit+0x20>)
 8003cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d18:	f7ff ffea 	bl	8003cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d1c:	480c      	ldr	r0, [pc, #48]	; (8003d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d1e:	490d      	ldr	r1, [pc, #52]	; (8003d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d20:	4a0d      	ldr	r2, [pc, #52]	; (8003d58 <LoopForever+0xe>)
  movs r3, #0
 8003d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d24:	e002      	b.n	8003d2c <LoopCopyDataInit>

08003d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d2a:	3304      	adds	r3, #4

08003d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d30:	d3f9      	bcc.n	8003d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d34:	4c0a      	ldr	r4, [pc, #40]	; (8003d60 <LoopForever+0x16>)
  movs r3, #0
 8003d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d38:	e001      	b.n	8003d3e <LoopFillZerobss>

08003d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d3c:	3204      	adds	r2, #4

08003d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d40:	d3fb      	bcc.n	8003d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d42:	f011 f98b 	bl	801505c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d46:	f7fd faaf 	bl	80012a8 <main>

08003d4a <LoopForever>:

LoopForever:
    b LoopForever
 8003d4a:	e7fe      	b.n	8003d4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d4c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d54:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8003d58:	08017ac8 	.word	0x08017ac8
  ldr r2, =_sbss
 8003d5c:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8003d60:	20003344 	.word	0x20003344

08003d64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d64:	e7fe      	b.n	8003d64 <ADC1_IRQHandler>

08003d66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d70:	2003      	movs	r0, #3
 8003d72:	f001 f849 	bl	8004e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d76:	2000      	movs	r0, #0
 8003d78:	f000 f80e 	bl	8003d98 <HAL_InitTick>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	71fb      	strb	r3, [r7, #7]
 8003d86:	e001      	b.n	8003d8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d88:	f7ff faea 	bl	8003360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <HAL_InitTick+0x6c>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d023      	beq.n	8003df4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003dac:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <HAL_InitTick+0x70>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <HAL_InitTick+0x6c>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 f855 	bl	8004e72 <HAL_SYSTICK_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b0f      	cmp	r3, #15
 8003dd2:	d809      	bhi.n	8003de8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	f001 f81f 	bl	8004e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <HAL_InitTick+0x74>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e007      	b.n	8003df8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e004      	b.n	8003df8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e001      	b.n	8003df8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000148 	.word	0x20000148
 8003e08:	20000140 	.word	0x20000140
 8003e0c:	20000144 	.word	0x20000144

08003e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_IncTick+0x20>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_IncTick+0x24>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4413      	add	r3, r2
 8003e20:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <HAL_IncTick+0x24>)
 8003e22:	6013      	str	r3, [r2, #0]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000148 	.word	0x20000148
 8003e34:	20001264 	.word	0x20001264

08003e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <HAL_GetTick+0x14>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20001264 	.word	0x20001264

08003e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e58:	f7ff ffee 	bl	8003e38 <HAL_GetTick>
 8003e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d005      	beq.n	8003e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_Delay+0x44>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e76:	bf00      	nop
 8003e78:	f7ff ffde 	bl	8003e38 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d8f7      	bhi.n	8003e78 <HAL_Delay+0x28>
  {
  }
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000148 	.word	0x20000148

08003e98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3360      	adds	r3, #96	; 0x60
 8003f12:	461a      	mov	r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <LL_ADC_SetOffset+0x44>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	03fff000 	.word	0x03fff000

08003f48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3360      	adds	r3, #96	; 0x60
 8003f56:	461a      	mov	r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3360      	adds	r3, #96	; 0x60
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	615a      	str	r2, [r3, #20]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3330      	adds	r3, #48	; 0x30
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	4413      	add	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	211f      	movs	r1, #31
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0e9b      	lsrs	r3, r3, #26
 8004008:	f003 011f 	and.w	r1, r3, #31
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	431a      	orrs	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3314      	adds	r3, #20
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	0e5b      	lsrs	r3, r3, #25
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	4413      	add	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	0d1b      	lsrs	r3, r3, #20
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2107      	movs	r1, #7
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	401a      	ands	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	0d1b      	lsrs	r3, r3, #20
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	431a      	orrs	r2, r3
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f003 0318 	and.w	r3, r3, #24
 80040a2:	4908      	ldr	r1, [pc, #32]	; (80040c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80040a4:	40d9      	lsrs	r1, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	400b      	ands	r3, r1
 80040aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	0007ffff 	.word	0x0007ffff

080040c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80040d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6093      	str	r3, [r2, #8]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004100:	d101      	bne.n	8004106 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004124:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004128:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004150:	d101      	bne.n	8004156 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <LL_ADC_IsEnabled+0x18>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <LL_ADC_IsEnabled+0x1a>
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b04      	cmp	r3, #4
 800419c:	d101      	bne.n	80041a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d101      	bne.n	80041c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e12f      	b.n	8004452 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff f8d1 	bl	80033a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff67 	bl	80040ec <LL_ADC_IsDeepPowerDownEnabled>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff ff4d 	bl	80040c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ff82 	bl	800413c <LL_ADC_IsInternalRegulatorEnabled>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d115      	bne.n	800426a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff66 	bl	8004114 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004248:	4b84      	ldr	r3, [pc, #528]	; (800445c <HAL_ADC_Init+0x284>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	4a84      	ldr	r2, [pc, #528]	; (8004460 <HAL_ADC_Init+0x288>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	3301      	adds	r3, #1
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800425c:	e002      	b.n	8004264 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3b01      	subs	r3, #1
 8004262:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f9      	bne.n	800425e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff64 	bl	800413c <LL_ADC_IsInternalRegulatorEnabled>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10d      	bne.n	8004296 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	f043 0210 	orr.w	r2, r3, #16
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff ff75 	bl	800418a <LL_ADC_REG_IsConversionOngoing>
 80042a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 80c8 	bne.w	8004440 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 80c4 	bne.w	8004440 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80042c0:	f043 0202 	orr.w	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff49 	bl	8004164 <LL_ADC_IsEnabled>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042d8:	4862      	ldr	r0, [pc, #392]	; (8004464 <HAL_ADC_Init+0x28c>)
 80042da:	f7ff ff43 	bl	8004164 <LL_ADC_IsEnabled>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4619      	mov	r1, r3
 80042ea:	485f      	ldr	r0, [pc, #380]	; (8004468 <HAL_ADC_Init+0x290>)
 80042ec:	f7ff fdd4 	bl	8003e98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	7e5b      	ldrb	r3, [r3, #25]
 80042f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004300:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004306:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800430e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004310:	4313      	orrs	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d106      	bne.n	800432c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	3b01      	subs	r3, #1
 8004324:	045b      	lsls	r3, r3, #17
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	2b00      	cmp	r3, #0
 8004332:	d009      	beq.n	8004348 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_ADC_Init+0x294>)
 8004350:	4013      	ands	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	69b9      	ldr	r1, [r7, #24]
 8004358:	430b      	orrs	r3, r1
 800435a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff ff12 	bl	800418a <LL_ADC_REG_IsConversionOngoing>
 8004366:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff1f 	bl	80041b0 <LL_ADC_INJ_IsConversionOngoing>
 8004372:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d140      	bne.n	80043fc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d13d      	bne.n	80043fc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7e1b      	ldrb	r3, [r3, #24]
 8004388:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800438a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004392:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004394:	4313      	orrs	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a2:	f023 0306 	bic.w	r3, r3, #6
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	69b9      	ldr	r1, [r7, #24]
 80043ac:	430b      	orrs	r3, r1
 80043ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d118      	bne.n	80043ec <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043d0:	4311      	orrs	r1, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043d6:	4311      	orrs	r1, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043dc:	430a      	orrs	r2, r1
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	611a      	str	r2, [r3, #16]
 80043ea:	e007      	b.n	80043fc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10c      	bne.n	800441e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f023 010f 	bic.w	r1, r3, #15
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	1e5a      	subs	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
 800441c:	e007      	b.n	800442e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 020f 	bic.w	r2, r2, #15
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	f023 0303 	bic.w	r3, r3, #3
 8004436:	f043 0201 	orr.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	659a      	str	r2, [r3, #88]	; 0x58
 800443e:	e007      	b.n	8004450 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f043 0210 	orr.w	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004450:	7ffb      	ldrb	r3, [r7, #31]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000140 	.word	0x20000140
 8004460:	053e2d63 	.word	0x053e2d63
 8004464:	50040000 	.word	0x50040000
 8004468:	50040300 	.word	0x50040300
 800446c:	fff0c007 	.word	0xfff0c007

08004470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b0b6      	sub	sp, #216	; 0xd8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x22>
 800448e:	2302      	movs	r3, #2
 8004490:	e3d5      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x7ce>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fe73 	bl	800418a <LL_ADC_REG_IsConversionOngoing>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f040 83ba 	bne.w	8004c20 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d824      	bhi.n	80044fe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	3b02      	subs	r3, #2
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d81b      	bhi.n	80044f6 <HAL_ADC_ConfigChannel+0x86>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_ADC_ConfigChannel+0x54>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044dd 	.word	0x080044dd
 80044cc:	080044e5 	.word	0x080044e5
 80044d0:	080044ed 	.word	0x080044ed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	220c      	movs	r2, #12
 80044d8:	605a      	str	r2, [r3, #4]
          break;
 80044da:	e011      	b.n	8004500 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2212      	movs	r2, #18
 80044e0:	605a      	str	r2, [r3, #4]
          break;
 80044e2:	e00d      	b.n	8004500 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2218      	movs	r2, #24
 80044e8:	605a      	str	r2, [r3, #4]
          break;
 80044ea:	e009      	b.n	8004500 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044f2:	605a      	str	r2, [r3, #4]
          break;
 80044f4:	e004      	b.n	8004500 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2206      	movs	r2, #6
 80044fa:	605a      	str	r2, [r3, #4]
          break;
 80044fc:	e000      	b.n	8004500 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80044fe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	f7ff fd5f 	bl	8003fd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fe37 	bl	800418a <LL_ADC_REG_IsConversionOngoing>
 800451c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fe43 	bl	80041b0 <LL_ADC_INJ_IsConversionOngoing>
 800452a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800452e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 81c1 	bne.w	80048ba <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 81bc 	bne.w	80048ba <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800454a:	d10f      	bne.n	800456c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2200      	movs	r2, #0
 8004556:	4619      	mov	r1, r3
 8004558:	f7ff fd66 	bl	8004028 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fd20 	bl	8003faa <LL_ADC_SetSamplingTimeCommonConfig>
 800456a:	e00e      	b.n	800458a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	461a      	mov	r2, r3
 800457a:	f7ff fd55 	bl	8004028 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fd10 	bl	8003faa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	08db      	lsrs	r3, r3, #3
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d00a      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6919      	ldr	r1, [r3, #16]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045bc:	f7ff fca0 	bl	8003f00 <LL_ADC_SetOffset>
 80045c0:	e17b      	b.n	80048ba <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fcbd 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x17e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fcb2 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 80045e4:	4603      	mov	r3, r0
 80045e6:	0e9b      	lsrs	r3, r3, #26
 80045e8:	f003 021f 	and.w	r2, r3, #31
 80045ec:	e01e      	b.n	800462c <HAL_ADC_ConfigChannel+0x1bc>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fca7 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800460c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e004      	b.n	800462a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004620:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x1d4>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0e9b      	lsrs	r3, r3, #26
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	e018      	b.n	8004676 <HAL_ADC_ConfigChannel+0x206>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800465c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004668:	2320      	movs	r3, #32
 800466a:	e004      	b.n	8004676 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800466c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004670:	fab3 f383 	clz	r3, r3
 8004674:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004676:	429a      	cmp	r2, r3
 8004678:	d106      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2200      	movs	r2, #0
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fc76 	bl	8003f74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fc5a 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 8004694:	4603      	mov	r3, r0
 8004696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x244>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2101      	movs	r1, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fc4f 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 80046aa:	4603      	mov	r3, r0
 80046ac:	0e9b      	lsrs	r3, r3, #26
 80046ae:	f003 021f 	and.w	r2, r3, #31
 80046b2:	e01e      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x282>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2101      	movs	r1, #1
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fc44 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80046d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80046da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80046e2:	2320      	movs	r3, #32
 80046e4:	e004      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80046e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046ea:	fab3 f383 	clz	r3, r3
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <HAL_ADC_ConfigChannel+0x29a>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	0e9b      	lsrs	r3, r3, #26
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	e018      	b.n	800473c <HAL_ADC_ConfigChannel+0x2cc>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800471e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800472e:	2320      	movs	r3, #32
 8004730:	e004      	b.n	800473c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8004732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800473c:	429a      	cmp	r2, r3
 800473e:	d106      	bne.n	800474e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2200      	movs	r2, #0
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fc13 	bl	8003f74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2102      	movs	r1, #2
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fbf7 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 800475a:	4603      	mov	r3, r0
 800475c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <HAL_ADC_ConfigChannel+0x30a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fbec 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 8004770:	4603      	mov	r3, r0
 8004772:	0e9b      	lsrs	r3, r3, #26
 8004774:	f003 021f 	and.w	r2, r3, #31
 8004778:	e01e      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x348>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2102      	movs	r1, #2
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff fbe1 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 8004786:	4603      	mov	r3, r0
 8004788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004790:	fa93 f3a3 	rbit	r3, r3
 8004794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800479c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80047a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80047a8:	2320      	movs	r3, #32
 80047aa:	e004      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80047ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047b0:	fab3 f383 	clz	r3, r3
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x360>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	0e9b      	lsrs	r3, r3, #26
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	e016      	b.n	80047fe <HAL_ADC_ConfigChannel+0x38e>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80047e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80047e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80047f0:	2320      	movs	r3, #32
 80047f2:	e004      	b.n	80047fe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80047f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047fe:	429a      	cmp	r2, r3
 8004800:	d106      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	2102      	movs	r1, #2
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fbb2 	bl	8003f74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2103      	movs	r1, #3
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fb96 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 800481c:	4603      	mov	r3, r0
 800481e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <HAL_ADC_ConfigChannel+0x3cc>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2103      	movs	r1, #3
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fb8b 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 8004832:	4603      	mov	r3, r0
 8004834:	0e9b      	lsrs	r3, r3, #26
 8004836:	f003 021f 	and.w	r2, r3, #31
 800483a:	e017      	b.n	800486c <HAL_ADC_ConfigChannel+0x3fc>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2103      	movs	r1, #3
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fb80 	bl	8003f48 <LL_ADC_GetOffsetChannel>
 8004848:	4603      	mov	r3, r0
 800484a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004856:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800485e:	2320      	movs	r3, #32
 8004860:	e003      	b.n	800486a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004874:	2b00      	cmp	r3, #0
 8004876:	d105      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x414>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	0e9b      	lsrs	r3, r3, #26
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	e011      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x438>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004894:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800489c:	2320      	movs	r3, #32
 800489e:	e003      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80048a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d106      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2200      	movs	r2, #0
 80048b2:	2103      	movs	r1, #3
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fb5d 	bl	8003f74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fc50 	bl	8004164 <LL_ADC_IsEnabled>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 8140 	bne.w	8004b4c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	461a      	mov	r2, r3
 80048da:	f7ff fbd1 	bl	8004080 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	4a8f      	ldr	r2, [pc, #572]	; (8004b20 <HAL_ADC_ConfigChannel+0x6b0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	f040 8131 	bne.w	8004b4c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x4a2>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	0e9b      	lsrs	r3, r3, #26
 8004900:	3301      	adds	r3, #1
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	2b09      	cmp	r3, #9
 8004908:	bf94      	ite	ls
 800490a:	2301      	movls	r3, #1
 800490c:	2300      	movhi	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	e019      	b.n	8004946 <HAL_ADC_ConfigChannel+0x4d6>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004922:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800492a:	2320      	movs	r3, #32
 800492c:	e003      	b.n	8004936 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800492e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004930:	fab3 f383 	clz	r3, r3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	3301      	adds	r3, #1
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2b09      	cmp	r3, #9
 800493e:	bf94      	ite	ls
 8004940:	2301      	movls	r3, #1
 8004942:	2300      	movhi	r3, #0
 8004944:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004946:	2b00      	cmp	r3, #0
 8004948:	d079      	beq.n	8004a3e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x4f6>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0e9b      	lsrs	r3, r3, #26
 800495c:	3301      	adds	r3, #1
 800495e:	069b      	lsls	r3, r3, #26
 8004960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004964:	e015      	b.n	8004992 <HAL_ADC_ConfigChannel+0x522>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800496e:	fa93 f3a3 	rbit	r3, r3
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004976:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800497e:	2320      	movs	r3, #32
 8004980:	e003      	b.n	800498a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004984:	fab3 f383 	clz	r3, r3
 8004988:	b2db      	uxtb	r3, r3
 800498a:	3301      	adds	r3, #1
 800498c:	069b      	lsls	r3, r3, #26
 800498e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x542>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	0e9b      	lsrs	r3, r3, #26
 80049a4:	3301      	adds	r3, #1
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2101      	movs	r1, #1
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	e017      	b.n	80049e2 <HAL_ADC_ConfigChannel+0x572>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80049c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80049c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80049ca:	2320      	movs	r3, #32
 80049cc:	e003      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80049ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	ea42 0103 	orr.w	r1, r2, r3
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x598>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	0e9b      	lsrs	r3, r3, #26
 80049f8:	3301      	adds	r3, #1
 80049fa:	f003 021f 	and.w	r2, r3, #31
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	051b      	lsls	r3, r3, #20
 8004a06:	e018      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x5ca>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	fa93 f3a3 	rbit	r3, r3
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004a20:	2320      	movs	r3, #32
 8004a22:	e003      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f003 021f 	and.w	r2, r3, #31
 8004a32:	4613      	mov	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	e081      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d107      	bne.n	8004a5a <HAL_ADC_ConfigChannel+0x5ea>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	0e9b      	lsrs	r3, r3, #26
 8004a50:	3301      	adds	r3, #1
 8004a52:	069b      	lsls	r3, r3, #26
 8004a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a58:	e015      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x616>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	fa93 f3a3 	rbit	r3, r3
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004a72:	2320      	movs	r3, #32
 8004a74:	e003      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	fab3 f383 	clz	r3, r3
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	069b      	lsls	r3, r3, #26
 8004a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x636>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	0e9b      	lsrs	r3, r3, #26
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa4:	e017      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0x666>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	61fb      	str	r3, [r7, #28]
  return result;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004abe:	2320      	movs	r3, #32
 8004ac0:	e003      	b.n	8004aca <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	fab3 f383 	clz	r3, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	3301      	adds	r3, #1
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad6:	ea42 0103 	orr.w	r1, r2, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x692>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	0e9b      	lsrs	r3, r3, #26
 8004aec:	3301      	adds	r3, #1
 8004aee:	f003 021f 	and.w	r2, r3, #31
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	3b1e      	subs	r3, #30
 8004afa:	051b      	lsls	r3, r3, #20
 8004afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b00:	e01e      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x6d0>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	613b      	str	r3, [r7, #16]
  return result;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	e006      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x6bc>
 8004b1e:	bf00      	nop
 8004b20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	fab3 f383 	clz	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	f003 021f 	and.w	r2, r3, #31
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	3b1e      	subs	r3, #30
 8004b3a:	051b      	lsls	r3, r3, #20
 8004b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b40:	430b      	orrs	r3, r1
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	6892      	ldr	r2, [r2, #8]
 8004b46:	4619      	mov	r1, r3
 8004b48:	f7ff fa6e 	bl	8004028 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b3d      	ldr	r3, [pc, #244]	; (8004c48 <HAL_ADC_ConfigChannel+0x7d8>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d06c      	beq.n	8004c32 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b58:	483c      	ldr	r0, [pc, #240]	; (8004c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8004b5a:	f7ff f9c3 	bl	8003ee4 <LL_ADC_GetCommonPathInternalCh>
 8004b5e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a3a      	ldr	r2, [pc, #232]	; (8004c50 <HAL_ADC_ConfigChannel+0x7e0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d127      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d121      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a35      	ldr	r2, [pc, #212]	; (8004c54 <HAL_ADC_ConfigChannel+0x7e4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d157      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	482f      	ldr	r0, [pc, #188]	; (8004c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8004b8e:	f7ff f996 	bl	8003ebe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b92:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <HAL_ADC_ConfigChannel+0x7e8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	4a30      	ldr	r2, [pc, #192]	; (8004c5c <HAL_ADC_ConfigChannel+0x7ec>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	099b      	lsrs	r3, r3, #6
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bac:	e002      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f9      	bne.n	8004bae <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bba:	e03a      	b.n	8004c32 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a27      	ldr	r2, [pc, #156]	; (8004c60 <HAL_ADC_ConfigChannel+0x7f0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d113      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x77e>
 8004bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <HAL_ADC_ConfigChannel+0x7e4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d12a      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be4:	4619      	mov	r1, r3
 8004be6:	4819      	ldr	r0, [pc, #100]	; (8004c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8004be8:	f7ff f969 	bl	8003ebe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bec:	e021      	b.n	8004c32 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <HAL_ADC_ConfigChannel+0x7f4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d11c      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d116      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <HAL_ADC_ConfigChannel+0x7e4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d111      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c16:	4619      	mov	r1, r3
 8004c18:	480c      	ldr	r0, [pc, #48]	; (8004c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8004c1a:	f7ff f950 	bl	8003ebe <LL_ADC_SetCommonPathInternalCh>
 8004c1e:	e008      	b.n	8004c32 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	f043 0220 	orr.w	r2, r3, #32
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004c3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	37d8      	adds	r7, #216	; 0xd8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	80080000 	.word	0x80080000
 8004c4c:	50040300 	.word	0x50040300
 8004c50:	c7520000 	.word	0xc7520000
 8004c54:	50040000 	.word	0x50040000
 8004c58:	20000140 	.word	0x20000140
 8004c5c:	053e2d63 	.word	0x053e2d63
 8004c60:	cb840000 	.word	0xcb840000
 8004c64:	80000001 	.word	0x80000001

08004c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <__NVIC_SetPriorityGrouping+0x44>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c84:	4013      	ands	r3, r2
 8004c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c9a:	4a04      	ldr	r2, [pc, #16]	; (8004cac <__NVIC_SetPriorityGrouping+0x44>)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	60d3      	str	r3, [r2, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000ed00 	.word	0xe000ed00

08004cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cb4:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	f003 0307 	and.w	r3, r3, #7
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	e000ed00 	.word	0xe000ed00

08004ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	db0b      	blt.n	8004cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	f003 021f 	and.w	r2, r3, #31
 8004ce4:	4907      	ldr	r1, [pc, #28]	; (8004d04 <__NVIC_EnableIRQ+0x38>)
 8004ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	2001      	movs	r0, #1
 8004cee:	fa00 f202 	lsl.w	r2, r0, r2
 8004cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	e000e100 	.word	0xe000e100

08004d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	6039      	str	r1, [r7, #0]
 8004d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	db0a      	blt.n	8004d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	490c      	ldr	r1, [pc, #48]	; (8004d54 <__NVIC_SetPriority+0x4c>)
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	0112      	lsls	r2, r2, #4
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d30:	e00a      	b.n	8004d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	4908      	ldr	r1, [pc, #32]	; (8004d58 <__NVIC_SetPriority+0x50>)
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	3b04      	subs	r3, #4
 8004d40:	0112      	lsls	r2, r2, #4
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	440b      	add	r3, r1
 8004d46:	761a      	strb	r2, [r3, #24]
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	e000e100 	.word	0xe000e100
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b089      	sub	sp, #36	; 0x24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f1c3 0307 	rsb	r3, r3, #7
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	bf28      	it	cs
 8004d7a:	2304      	movcs	r3, #4
 8004d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d902      	bls.n	8004d8c <NVIC_EncodePriority+0x30>
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3b03      	subs	r3, #3
 8004d8a:	e000      	b.n	8004d8e <NVIC_EncodePriority+0x32>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	401a      	ands	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004da4:	f04f 31ff 	mov.w	r1, #4294967295
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dae:	43d9      	mvns	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db4:	4313      	orrs	r3, r2
         );
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3724      	adds	r7, #36	; 0x24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dd4:	d301      	bcc.n	8004dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e00f      	b.n	8004dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <SysTick_Config+0x40>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004de2:	210f      	movs	r1, #15
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	f7ff ff8e 	bl	8004d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <SysTick_Config+0x40>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004df2:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <SysTick_Config+0x40>)
 8004df4:	2207      	movs	r2, #7
 8004df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	e000e010 	.word	0xe000e010

08004e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff ff29 	bl	8004c68 <__NVIC_SetPriorityGrouping>
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b086      	sub	sp, #24
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	4603      	mov	r3, r0
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e30:	f7ff ff3e 	bl	8004cb0 <__NVIC_GetPriorityGrouping>
 8004e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	6978      	ldr	r0, [r7, #20]
 8004e3c:	f7ff ff8e 	bl	8004d5c <NVIC_EncodePriority>
 8004e40:	4602      	mov	r2, r0
 8004e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e46:	4611      	mov	r1, r2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff ff5d 	bl	8004d08 <__NVIC_SetPriority>
}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff ff31 	bl	8004ccc <__NVIC_EnableIRQ>
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff ffa2 	bl	8004dc4 <SysTick_Config>
 8004e80:	4603      	mov	r3, r0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0ac      	b.n	8004ff8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f9d2 	bl	800524c <DFSDM_GetChannelFromInstance>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4a55      	ldr	r2, [pc, #340]	; (8005000 <HAL_DFSDM_ChannelInit+0x174>)
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e09f      	b.n	8004ff8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7fe fb7b 	bl	80035b4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004ebe:	4b51      	ldr	r3, [pc, #324]	; (8005004 <HAL_DFSDM_ChannelInit+0x178>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	4a4f      	ldr	r2, [pc, #316]	; (8005004 <HAL_DFSDM_ChannelInit+0x178>)
 8004ec6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004ec8:	4b4e      	ldr	r3, [pc, #312]	; (8005004 <HAL_DFSDM_ChannelInit+0x178>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d125      	bne.n	8004f1c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004ed0:	4b4d      	ldr	r3, [pc, #308]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a4c      	ldr	r2, [pc, #304]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004ed6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eda:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004edc:	4b4a      	ldr	r3, [pc, #296]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4948      	ldr	r1, [pc, #288]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004eea:	4b47      	ldr	r3, [pc, #284]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a46      	ldr	r2, [pc, #280]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004ef0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004ef4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	791b      	ldrb	r3, [r3, #4]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d108      	bne.n	8004f10 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004efe:	4b42      	ldr	r3, [pc, #264]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	493f      	ldr	r1, [pc, #252]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004f10:	4b3d      	ldr	r3, [pc, #244]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3c      	ldr	r2, [pc, #240]	; (8005008 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f1a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004f2a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6819      	ldr	r1, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004f3a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004f40:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 020f 	bic.w	r2, r2, #15
 8004f58:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004f80:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6899      	ldr	r1, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	3b01      	subs	r3, #1
 8004f92:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f002 0207 	and.w	r2, r2, #7
 8004fac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f930 	bl	800524c <DFSDM_GetChannelFromInstance>
 8004fec:	4602      	mov	r2, r0
 8004fee:	4904      	ldr	r1, [pc, #16]	; (8005000 <HAL_DFSDM_ChannelInit+0x174>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	2000126c 	.word	0x2000126c
 8005004:	20001268 	.word	0x20001268
 8005008:	40016000 	.word	0x40016000

0800500c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e0ca      	b.n	80051b4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a66      	ldr	r2, [pc, #408]	; (80051bc <HAL_DFSDM_FilterInit+0x1b0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d109      	bne.n	800503c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800502c:	2b01      	cmp	r3, #1
 800502e:	d003      	beq.n	8005038 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0bb      	b.n	80051b4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fe fa2d 	bl	80034b4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005068:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7a1b      	ldrb	r3, [r3, #8]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d108      	bne.n	8005084 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e007      	b.n	8005094 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005092:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	7a5b      	ldrb	r3, [r3, #9]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d108      	bne.n	80050ae <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e007      	b.n	80050be <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80050bc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050cc:	f023 0308 	bic.w	r3, r3, #8
 80050d0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d108      	bne.n	80050ec <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6819      	ldr	r1, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	7c1b      	ldrb	r3, [r3, #16]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d108      	bne.n	8005106 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0210 	orr.w	r2, r2, #16
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e007      	b.n	8005116 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0210 	bic.w	r2, r2, #16
 8005114:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7c5b      	ldrb	r3, [r3, #17]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d108      	bne.n	8005130 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0220 	orr.w	r2, r2, #32
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e007      	b.n	8005140 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0220 	bic.w	r2, r2, #32
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800514e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005152:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6959      	ldr	r1, [r3, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	3b01      	subs	r3, #1
 8005164:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005166:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800516e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7c1a      	ldrb	r2, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40016100 	.word	0x40016100

080051c0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d02e      	beq.n	8005238 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80051e0:	2bff      	cmp	r3, #255	; 0xff
 80051e2:	d029      	beq.n	8005238 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80051f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f6:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d10d      	bne.n	800521a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800520c:	431a      	orrs	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e00a      	b.n	8005230 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
 8005236:	e001      	b.n	800523c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800523c:	7dfb      	ldrb	r3, [r7, #23]
}
 800523e:	4618      	mov	r0, r3
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <DFSDM_GetChannelFromInstance+0x7c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d102      	bne.n	8005262 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e02b      	b.n	80052ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <DFSDM_GetChannelFromInstance+0x80>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d102      	bne.n	8005270 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800526a:	2301      	movs	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e024      	b.n	80052ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a17      	ldr	r2, [pc, #92]	; (80052d0 <DFSDM_GetChannelFromInstance+0x84>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d102      	bne.n	800527e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005278:	2302      	movs	r3, #2
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e01d      	b.n	80052ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <DFSDM_GetChannelFromInstance+0x88>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d102      	bne.n	800528c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8005286:	2304      	movs	r3, #4
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e016      	b.n	80052ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <DFSDM_GetChannelFromInstance+0x8c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d102      	bne.n	800529a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8005294:	2305      	movs	r3, #5
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e00f      	b.n	80052ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a0f      	ldr	r2, [pc, #60]	; (80052dc <DFSDM_GetChannelFromInstance+0x90>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d102      	bne.n	80052a8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80052a2:	2306      	movs	r3, #6
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e008      	b.n	80052ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0d      	ldr	r2, [pc, #52]	; (80052e0 <DFSDM_GetChannelFromInstance+0x94>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d102      	bne.n	80052b6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80052b0:	2307      	movs	r3, #7
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e001      	b.n	80052ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80052b6:	2303      	movs	r3, #3
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80052ba:	68fb      	ldr	r3, [r7, #12]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40016000 	.word	0x40016000
 80052cc:	40016020 	.word	0x40016020
 80052d0:	40016040 	.word	0x40016040
 80052d4:	40016080 	.word	0x40016080
 80052d8:	400160a0 	.word	0x400160a0
 80052dc:	400160c0 	.word	0x400160c0
 80052e0:	400160e0 	.word	0x400160e0

080052e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e08d      	b.n	8005412 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	4b47      	ldr	r3, [pc, #284]	; (800541c <HAL_DMA_Init+0x138>)
 80052fe:	429a      	cmp	r2, r3
 8005300:	d80f      	bhi.n	8005322 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	4b45      	ldr	r3, [pc, #276]	; (8005420 <HAL_DMA_Init+0x13c>)
 800530a:	4413      	add	r3, r2
 800530c:	4a45      	ldr	r2, [pc, #276]	; (8005424 <HAL_DMA_Init+0x140>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	009a      	lsls	r2, r3, #2
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a42      	ldr	r2, [pc, #264]	; (8005428 <HAL_DMA_Init+0x144>)
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
 8005320:	e00e      	b.n	8005340 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	4b40      	ldr	r3, [pc, #256]	; (800542c <HAL_DMA_Init+0x148>)
 800532a:	4413      	add	r3, r2
 800532c:	4a3d      	ldr	r2, [pc, #244]	; (8005424 <HAL_DMA_Init+0x140>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	009a      	lsls	r2, r3, #2
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a3c      	ldr	r2, [pc, #240]	; (8005430 <HAL_DMA_Init+0x14c>)
 800533e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800537c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f8fe 	bl	8005594 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a0:	d102      	bne.n	80053a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053bc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <HAL_DMA_Init+0x104>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d80c      	bhi.n	80053e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f91e 	bl	8005610 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	e008      	b.n	80053fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40020407 	.word	0x40020407
 8005420:	bffdfff8 	.word	0xbffdfff8
 8005424:	cccccccd 	.word	0xcccccccd
 8005428:	40020000 	.word	0x40020000
 800542c:	bffdfbf8 	.word	0xbffdfbf8
 8005430:	40020400 	.word	0x40020400

08005434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005450:	f003 031c 	and.w	r3, r3, #28
 8005454:	2204      	movs	r2, #4
 8005456:	409a      	lsls	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d026      	beq.n	80054ae <HAL_DMA_IRQHandler+0x7a>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d021      	beq.n	80054ae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d107      	bne.n	8005488 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0204 	bic.w	r2, r2, #4
 8005486:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548c:	f003 021c 	and.w	r2, r3, #28
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	2104      	movs	r1, #4
 8005496:	fa01 f202 	lsl.w	r2, r1, r2
 800549a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d071      	beq.n	8005588 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80054ac:	e06c      	b.n	8005588 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	f003 031c 	and.w	r3, r3, #28
 80054b6:	2202      	movs	r2, #2
 80054b8:	409a      	lsls	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d02e      	beq.n	8005520 <HAL_DMA_IRQHandler+0xec>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d029      	beq.n	8005520 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10b      	bne.n	80054f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 020a 	bic.w	r2, r2, #10
 80054e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	f003 021c 	and.w	r2, r3, #28
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	2102      	movs	r1, #2
 8005500:	fa01 f202 	lsl.w	r2, r1, r2
 8005504:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d038      	beq.n	8005588 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800551e:	e033      	b.n	8005588 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	f003 031c 	and.w	r3, r3, #28
 8005528:	2208      	movs	r2, #8
 800552a:	409a      	lsls	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d02a      	beq.n	800558a <HAL_DMA_IRQHandler+0x156>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d025      	beq.n	800558a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 020e 	bic.w	r2, r2, #14
 800554c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	f003 021c 	and.w	r2, r3, #28
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	2101      	movs	r1, #1
 800555c:	fa01 f202 	lsl.w	r2, r1, r2
 8005560:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005588:	bf00      	nop
 800558a:	bf00      	nop
}
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	4b17      	ldr	r3, [pc, #92]	; (8005600 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d80a      	bhi.n	80055be <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055b4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6493      	str	r3, [r2, #72]	; 0x48
 80055bc:	e007      	b.n	80055ce <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	089b      	lsrs	r3, r3, #2
 80055c4:	009a      	lsls	r2, r3, #2
 80055c6:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80055c8:	4413      	add	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	3b08      	subs	r3, #8
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80055e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2201      	movs	r2, #1
 80055ee:	409a      	lsls	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40020407 	.word	0x40020407
 8005604:	4002081c 	.word	0x4002081c
 8005608:	cccccccd 	.word	0xcccccccd
 800560c:	40020880 	.word	0x40020880

08005610 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	461a      	mov	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a08      	ldr	r2, [pc, #32]	; (8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005632:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3b01      	subs	r3, #1
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	2201      	movs	r2, #1
 800563e:	409a      	lsls	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	1000823f 	.word	0x1000823f
 8005654:	40020940 	.word	0x40020940

08005658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005666:	e166      	b.n	8005936 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	2101      	movs	r1, #1
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	fa01 f303 	lsl.w	r3, r1, r3
 8005674:	4013      	ands	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8158 	beq.w	8005930 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d005      	beq.n	8005698 <HAL_GPIO_Init+0x40>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d130      	bne.n	80056fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	2203      	movs	r2, #3
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4013      	ands	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ce:	2201      	movs	r2, #1
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43db      	mvns	r3, r3
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4013      	ands	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	f003 0201 	and.w	r2, r3, #1
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b03      	cmp	r3, #3
 8005704:	d017      	beq.n	8005736 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	2203      	movs	r2, #3
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43db      	mvns	r3, r3
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4013      	ands	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d123      	bne.n	800578a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	08da      	lsrs	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3208      	adds	r2, #8
 800574a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	220f      	movs	r2, #15
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	43db      	mvns	r3, r3
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4013      	ands	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	08da      	lsrs	r2, r3, #3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3208      	adds	r2, #8
 8005784:	6939      	ldr	r1, [r7, #16]
 8005786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	2203      	movs	r2, #3
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	43db      	mvns	r3, r3
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4013      	ands	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f003 0203 	and.w	r2, r3, #3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 80b2 	beq.w	8005930 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057cc:	4b61      	ldr	r3, [pc, #388]	; (8005954 <HAL_GPIO_Init+0x2fc>)
 80057ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d0:	4a60      	ldr	r2, [pc, #384]	; (8005954 <HAL_GPIO_Init+0x2fc>)
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	6613      	str	r3, [r2, #96]	; 0x60
 80057d8:	4b5e      	ldr	r3, [pc, #376]	; (8005954 <HAL_GPIO_Init+0x2fc>)
 80057da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80057e4:	4a5c      	ldr	r2, [pc, #368]	; (8005958 <HAL_GPIO_Init+0x300>)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	089b      	lsrs	r3, r3, #2
 80057ea:	3302      	adds	r3, #2
 80057ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	220f      	movs	r2, #15
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4013      	ands	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800580e:	d02b      	beq.n	8005868 <HAL_GPIO_Init+0x210>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a52      	ldr	r2, [pc, #328]	; (800595c <HAL_GPIO_Init+0x304>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d025      	beq.n	8005864 <HAL_GPIO_Init+0x20c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a51      	ldr	r2, [pc, #324]	; (8005960 <HAL_GPIO_Init+0x308>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d01f      	beq.n	8005860 <HAL_GPIO_Init+0x208>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a50      	ldr	r2, [pc, #320]	; (8005964 <HAL_GPIO_Init+0x30c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d019      	beq.n	800585c <HAL_GPIO_Init+0x204>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a4f      	ldr	r2, [pc, #316]	; (8005968 <HAL_GPIO_Init+0x310>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <HAL_GPIO_Init+0x200>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a4e      	ldr	r2, [pc, #312]	; (800596c <HAL_GPIO_Init+0x314>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00d      	beq.n	8005854 <HAL_GPIO_Init+0x1fc>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a4d      	ldr	r2, [pc, #308]	; (8005970 <HAL_GPIO_Init+0x318>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <HAL_GPIO_Init+0x1f8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a4c      	ldr	r2, [pc, #304]	; (8005974 <HAL_GPIO_Init+0x31c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d101      	bne.n	800584c <HAL_GPIO_Init+0x1f4>
 8005848:	2307      	movs	r3, #7
 800584a:	e00e      	b.n	800586a <HAL_GPIO_Init+0x212>
 800584c:	2308      	movs	r3, #8
 800584e:	e00c      	b.n	800586a <HAL_GPIO_Init+0x212>
 8005850:	2306      	movs	r3, #6
 8005852:	e00a      	b.n	800586a <HAL_GPIO_Init+0x212>
 8005854:	2305      	movs	r3, #5
 8005856:	e008      	b.n	800586a <HAL_GPIO_Init+0x212>
 8005858:	2304      	movs	r3, #4
 800585a:	e006      	b.n	800586a <HAL_GPIO_Init+0x212>
 800585c:	2303      	movs	r3, #3
 800585e:	e004      	b.n	800586a <HAL_GPIO_Init+0x212>
 8005860:	2302      	movs	r3, #2
 8005862:	e002      	b.n	800586a <HAL_GPIO_Init+0x212>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_GPIO_Init+0x212>
 8005868:	2300      	movs	r3, #0
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	f002 0203 	and.w	r2, r2, #3
 8005870:	0092      	lsls	r2, r2, #2
 8005872:	4093      	lsls	r3, r2
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800587a:	4937      	ldr	r1, [pc, #220]	; (8005958 <HAL_GPIO_Init+0x300>)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	089b      	lsrs	r3, r3, #2
 8005880:	3302      	adds	r3, #2
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005888:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <HAL_GPIO_Init+0x320>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	43db      	mvns	r3, r3
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4013      	ands	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058ac:	4a32      	ldr	r2, [pc, #200]	; (8005978 <HAL_GPIO_Init+0x320>)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058b2:	4b31      	ldr	r3, [pc, #196]	; (8005978 <HAL_GPIO_Init+0x320>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	43db      	mvns	r3, r3
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4013      	ands	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058d6:	4a28      	ldr	r2, [pc, #160]	; (8005978 <HAL_GPIO_Init+0x320>)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80058dc:	4b26      	ldr	r3, [pc, #152]	; (8005978 <HAL_GPIO_Init+0x320>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4013      	ands	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005900:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <HAL_GPIO_Init+0x320>)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005906:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <HAL_GPIO_Init+0x320>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	43db      	mvns	r3, r3
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4013      	ands	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800592a:	4a13      	ldr	r2, [pc, #76]	; (8005978 <HAL_GPIO_Init+0x320>)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	3301      	adds	r3, #1
 8005934:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	f47f ae91 	bne.w	8005668 <HAL_GPIO_Init+0x10>
  }
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40021000 	.word	0x40021000
 8005958:	40010000 	.word	0x40010000
 800595c:	48000400 	.word	0x48000400
 8005960:	48000800 	.word	0x48000800
 8005964:	48000c00 	.word	0x48000c00
 8005968:	48001000 	.word	0x48001000
 800596c:	48001400 	.word	0x48001400
 8005970:	48001800 	.word	0x48001800
 8005974:	48001c00 	.word	0x48001c00
 8005978:	40010400 	.word	0x40010400

0800597c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	887b      	ldrh	r3, [r7, #2]
 800598e:	4013      	ands	r3, r2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
 8005998:	e001      	b.n	800599e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800599e:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	807b      	strh	r3, [r7, #2]
 80059b8:	4613      	mov	r3, r2
 80059ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059bc:	787b      	ldrb	r3, [r7, #1]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059c8:	e002      	b.n	80059d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059ca:	887a      	ldrh	r2, [r7, #2]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e081      	b.n	8005af2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fd fe1a 	bl	800363c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	; 0x24
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d107      	bne.n	8005a56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	e006      	b.n	8005a64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d104      	bne.n	8005a76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69d9      	ldr	r1, [r3, #28]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d138      	bne.n	8005b82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e032      	b.n	8005b84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2224      	movs	r2, #36	; 0x24
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d139      	bne.n	8005c1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e033      	b.n	8005c1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2224      	movs	r2, #36	; 0x24
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005be2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e000      	b.n	8005c1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c1a:	2302      	movs	r3, #2
  }
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2a:	b08f      	sub	sp, #60	; 0x3c
 8005c2c:	af0a      	add	r7, sp, #40	; 0x28
 8005c2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e116      	b.n	8005e68 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f00e fdc9 	bl	80147ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f007 fd78 	bl	800d76e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	687e      	ldr	r6, [r7, #4]
 8005c86:	466d      	mov	r5, sp
 8005c88:	f106 0410 	add.w	r4, r6, #16
 8005c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c98:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c9c:	1d33      	adds	r3, r6, #4
 8005c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ca0:	6838      	ldr	r0, [r7, #0]
 8005ca2:	f007 fc8b 	bl	800d5bc <USB_CoreInit>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0d7      	b.n	8005e68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f007 fd66 	bl	800d790 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
 8005cc8:	e04a      	b.n	8005d60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	333d      	adds	r3, #61	; 0x3d
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	333c      	adds	r3, #60	; 0x3c
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cf2:	7bfa      	ldrb	r2, [r7, #15]
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	b298      	uxth	r0, r3
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	3344      	adds	r3, #68	; 0x44
 8005d06:	4602      	mov	r2, r0
 8005d08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d0a:	7bfa      	ldrb	r2, [r7, #15]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	3340      	adds	r3, #64	; 0x40
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d1e:	7bfa      	ldrb	r2, [r7, #15]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	3348      	adds	r3, #72	; 0x48
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d32:	7bfa      	ldrb	r2, [r7, #15]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	334c      	adds	r3, #76	; 0x4c
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d46:	7bfa      	ldrb	r2, [r7, #15]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3354      	adds	r3, #84	; 0x54
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	7bfa      	ldrb	r2, [r7, #15]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d3af      	bcc.n	8005cca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	e044      	b.n	8005dfa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005d98:	7bfa      	ldrb	r2, [r7, #15]
 8005d9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005db2:	7bfa      	ldrb	r2, [r7, #15]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005dc8:	7bfa      	ldrb	r2, [r7, #15]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005dde:	7bfa      	ldrb	r2, [r7, #15]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	3301      	adds	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	7bfa      	ldrb	r2, [r7, #15]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d3b5      	bcc.n	8005d70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	687e      	ldr	r6, [r7, #4]
 8005e0c:	466d      	mov	r5, sp
 8005e0e:	f106 0410 	add.w	r4, r6, #16
 8005e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e22:	1d33      	adds	r3, r6, #4
 8005e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e26:	6838      	ldr	r0, [r7, #0]
 8005e28:	f007 fcfe 	bl	800d828 <USB_DevInit>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e014      	b.n	8005e68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d102      	bne.n	8005e5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 f882 	bl	8006f60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f008 fd86 	bl	800e972 <USB_DevDisconnect>

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_PCD_Start+0x1c>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e01c      	b.n	8005ec6 <HAL_PCD_Start+0x56>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d105      	bne.n	8005ea8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f007 fc4d 	bl	800d74c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f008 fd3a 	bl	800e930 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ece:	b590      	push	{r4, r7, lr}
 8005ed0:	b08d      	sub	sp, #52	; 0x34
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f008 fdf8 	bl	800eada <USB_GetMode>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 847e 	bne.w	80067ee <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f008 fd5c 	bl	800e9b4 <USB_ReadInterrupts>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 8474 	beq.w	80067ec <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	0a1b      	lsrs	r3, r3, #8
 8005f0e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f008 fd49 	bl	800e9b4 <USB_ReadInterrupts>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d107      	bne.n	8005f3c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f002 0202 	and.w	r2, r2, #2
 8005f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f008 fd37 	bl	800e9b4 <USB_ReadInterrupts>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d161      	bne.n	8006014 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0210 	bic.w	r2, r2, #16
 8005f5e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	0c5b      	lsrs	r3, r3, #17
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d124      	bne.n	8005fd6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d035      	beq.n	8006004 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	091b      	lsrs	r3, r3, #4
 8005fa0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005fa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6a38      	ldr	r0, [r7, #32]
 8005fac:	f008 fb6e 	bl	800e68c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	091b      	lsrs	r3, r3, #4
 8005fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fbc:	441a      	add	r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6a1a      	ldr	r2, [r3, #32]
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	091b      	lsrs	r3, r3, #4
 8005fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fce:	441a      	add	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	621a      	str	r2, [r3, #32]
 8005fd4:	e016      	b.n	8006004 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	0c5b      	lsrs	r3, r3, #17
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	2b06      	cmp	r3, #6
 8005fe0:	d110      	bne.n	8006004 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fe8:	2208      	movs	r2, #8
 8005fea:	4619      	mov	r1, r3
 8005fec:	6a38      	ldr	r0, [r7, #32]
 8005fee:	f008 fb4d 	bl	800e68c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	6a1a      	ldr	r2, [r3, #32]
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ffe:	441a      	add	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0210 	orr.w	r2, r2, #16
 8006012:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f008 fccb 	bl	800e9b4 <USB_ReadInterrupts>
 800601e:	4603      	mov	r3, r0
 8006020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006024:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006028:	f040 80a7 	bne.w	800617a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f008 fcd0 	bl	800e9da <USB_ReadDevAllOutEpInterrupt>
 800603a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800603c:	e099      	b.n	8006172 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 808e 	beq.w	8006166 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	4611      	mov	r1, r2
 8006054:	4618      	mov	r0, r3
 8006056:	f008 fcf4 	bl	800ea42 <USB_ReadDevOutEPInterrupt>
 800605a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006072:	461a      	mov	r2, r3
 8006074:	2301      	movs	r3, #1
 8006076:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fe96 	bl	8006dac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00c      	beq.n	80060a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	461a      	mov	r2, r3
 8006098:	2308      	movs	r3, #8
 800609a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800609c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fed2 	bl	8006e48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d008      	beq.n	80060c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	461a      	mov	r2, r3
 80060bc:	2310      	movs	r3, #16
 80060be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d030      	beq.n	800612c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d2:	2b80      	cmp	r3, #128	; 0x80
 80060d4:	d109      	bne.n	80060ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80060ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	78db      	ldrb	r3, [r3, #3]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d108      	bne.n	800611a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2200      	movs	r2, #0
 800610c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	b2db      	uxtb	r3, r3
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f00e fcad 	bl	8014a74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006126:	461a      	mov	r2, r3
 8006128:	2302      	movs	r3, #2
 800612a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	461a      	mov	r2, r3
 8006144:	2320      	movs	r3, #32
 8006146:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	461a      	mov	r2, r3
 8006160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006164:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	3301      	adds	r3, #1
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	f47f af62 	bne.w	800603e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f008 fc18 	bl	800e9b4 <USB_ReadInterrupts>
 8006184:	4603      	mov	r3, r0
 8006186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800618a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800618e:	f040 80a4 	bne.w	80062da <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f008 fc39 	bl	800ea0e <USB_ReadDevAllInEpInterrupt>
 800619c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80061a2:	e096      	b.n	80062d2 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 808b 	beq.w	80062c6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	4611      	mov	r1, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f008 fc5f 	bl	800ea7e <USB_ReadDevInEPInterrupt>
 80061c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d020      	beq.n	800620e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	2201      	movs	r2, #1
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69f9      	ldr	r1, [r7, #28]
 80061e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ec:	4013      	ands	r3, r2
 80061ee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	461a      	mov	r2, r3
 80061fe:	2301      	movs	r3, #1
 8006200:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	b2db      	uxtb	r3, r3
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f00e fb9e 	bl	801494a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	461a      	mov	r2, r3
 8006226:	2308      	movs	r3, #8
 8006228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	d008      	beq.n	8006246 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006240:	461a      	mov	r2, r3
 8006242:	2310      	movs	r3, #16
 8006244:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	461a      	mov	r2, r3
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d023      	beq.n	80062b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800626c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800626e:	6a38      	ldr	r0, [r7, #32]
 8006270:	f007 fc26 	bl	800dac0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006276:	4613      	mov	r3, r2
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	3338      	adds	r3, #56	; 0x38
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	4413      	add	r3, r2
 8006284:	3304      	adds	r3, #4
 8006286:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	78db      	ldrb	r3, [r3, #3]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d108      	bne.n	80062a2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2200      	movs	r2, #0
 8006294:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	b2db      	uxtb	r3, r3
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f00e fbfb 	bl	8014a98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ae:	461a      	mov	r2, r3
 80062b0:	2302      	movs	r3, #2
 80062b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80062be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fcea 	bl	8006c9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	3301      	adds	r3, #1
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f47f af65 	bne.w	80061a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f008 fb68 	bl	800e9b4 <USB_ReadInterrupts>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ee:	d122      	bne.n	8006336 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800630a:	2b01      	cmp	r3, #1
 800630c:	d108      	bne.n	8006320 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006316:	2100      	movs	r1, #0
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f00e fe2d 	bl	8014f78 <HAL_PCDEx_LPM_Callback>
 800631e:	e002      	b.n	8006326 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f00e fb7f 	bl	8014a24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f008 fb3a 	bl	800e9b4 <USB_ReadInterrupts>
 8006340:	4603      	mov	r3, r0
 8006342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634a:	d112      	bne.n	8006372 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b01      	cmp	r3, #1
 800635a:	d102      	bne.n	8006362 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f00e fb3b 	bl	80149d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695a      	ldr	r2, [r3, #20]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006370:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4618      	mov	r0, r3
 8006378:	f008 fb1c 	bl	800e9b4 <USB_ReadInterrupts>
 800637c:	4603      	mov	r3, r0
 800637e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006386:	d121      	bne.n	80063cc <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695a      	ldr	r2, [r3, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006396:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d111      	bne.n	80063c6 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	f003 020f 	and.w	r2, r3, #15
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80063bc:	2101      	movs	r1, #1
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f00e fdda 	bl	8014f78 <HAL_PCDEx_LPM_Callback>
 80063c4:	e002      	b.n	80063cc <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f00e fb06 	bl	80149d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f008 faef 	bl	800e9b4 <USB_ReadInterrupts>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e0:	f040 80b5 	bne.w	800654e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2110      	movs	r1, #16
 80063fe:	4618      	mov	r0, r3
 8006400:	f007 fb5e 	bl	800dac0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006404:	2300      	movs	r3, #0
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006408:	e046      	b.n	8006498 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006416:	461a      	mov	r2, r3
 8006418:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800641c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006438:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800643c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	461a      	mov	r2, r3
 800644c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006450:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006470:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	440a      	add	r2, r1
 8006488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006490:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	3301      	adds	r3, #1
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3b3      	bcc.n	800640a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80064b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ce:	f043 030b 	orr.w	r3, r3, #11
 80064d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e4:	f043 030b 	orr.w	r3, r3, #11
 80064e8:	6453      	str	r3, [r2, #68]	; 0x44
 80064ea:	e015      	b.n	8006518 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80064fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006502:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006512:	f043 030b 	orr.w	r3, r3, #11
 8006516:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006526:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800652a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f008 faff 	bl	800eb3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800654c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f008 fa2e 	bl	800e9b4 <USB_ReadInterrupts>
 8006558:	4603      	mov	r3, r0
 800655a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006562:	d124      	bne.n	80065ae <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f008 fac4 	bl	800eaf6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f007 fb21 	bl	800dbba <USB_GetDevSpeed>
 8006578:	4603      	mov	r3, r0
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681c      	ldr	r4, [r3, #0]
 8006584:	f001 fbe2 	bl	8007d4c <HAL_RCC_GetHCLKFreq>
 8006588:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800658e:	b2db      	uxtb	r3, r3
 8006590:	461a      	mov	r2, r3
 8006592:	4620      	mov	r0, r4
 8006594:	f007 f83e 	bl	800d614 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f00e f9fe 	bl	801499a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80065ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f008 f9fe 	bl	800e9b4 <USB_ReadInterrupts>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d10a      	bne.n	80065d8 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f00e f9db 	bl	801497e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695a      	ldr	r2, [r3, #20]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f002 0208 	and.w	r2, r2, #8
 80065d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f008 f9e9 	bl	800e9b4 <USB_ReadInterrupts>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e8:	2b80      	cmp	r3, #128	; 0x80
 80065ea:	d122      	bne.n	8006632 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065f8:	2301      	movs	r3, #1
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
 80065fc:	e014      	b.n	8006628 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006602:	4613      	mov	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d105      	bne.n	8006622 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	b2db      	uxtb	r3, r3
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb0b 	bl	8006c38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	3301      	adds	r3, #1
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662e:	429a      	cmp	r2, r3
 8006630:	d3e5      	bcc.n	80065fe <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f008 f9bc 	bl	800e9b4 <USB_ReadInterrupts>
 800663c:	4603      	mov	r3, r0
 800663e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006646:	d13b      	bne.n	80066c0 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006648:	2301      	movs	r3, #1
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
 800664c:	e02b      	b.n	80066a6 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3340      	adds	r3, #64	; 0x40
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d115      	bne.n	80066a0 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006674:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006676:	2b00      	cmp	r3, #0
 8006678:	da12      	bge.n	80066a0 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667e:	4613      	mov	r3, r2
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	333f      	adds	r3, #63	; 0x3f
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006696:	b2db      	uxtb	r3, r3
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 facc 	bl	8006c38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	3301      	adds	r3, #1
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d3ce      	bcc.n	800664e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80066be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f008 f975 	bl	800e9b4 <USB_ReadInterrupts>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d4:	d155      	bne.n	8006782 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066d6:	2301      	movs	r3, #1
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
 80066da:	e045      	b.n	8006768 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f0:	4613      	mov	r3, r2
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d12e      	bne.n	8006762 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006704:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006706:	2b00      	cmp	r3, #0
 8006708:	da2b      	bge.n	8006762 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006716:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800671a:	429a      	cmp	r2, r3
 800671c:	d121      	bne.n	8006762 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	4613      	mov	r3, r2
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800675e:	6053      	str	r3, [r2, #4]
            break;
 8006760:	e007      	b.n	8006772 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	3301      	adds	r3, #1
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676e:	429a      	cmp	r2, r3
 8006770:	d3b4      	bcc.n	80066dc <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f008 f914 	bl	800e9b4 <USB_ReadInterrupts>
 800678c:	4603      	mov	r3, r0
 800678e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006796:	d10a      	bne.n	80067ae <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f00e f98f 	bl	8014abc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80067ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f008 f8fe 	bl	800e9b4 <USB_ReadInterrupts>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d115      	bne.n	80067ee <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f00e f97f 	bl	8014ad8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
 80067ea:	e000      	b.n	80067ee <HAL_PCD_IRQHandler+0x920>
      return;
 80067ec:	bf00      	nop
    }
  }
}
 80067ee:	3734      	adds	r7, #52	; 0x34
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd90      	pop	{r4, r7, pc}

080067f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_PCD_SetAddress+0x1a>
 800680a:	2302      	movs	r3, #2
 800680c:	e013      	b.n	8006836 <HAL_PCD_SetAddress+0x42>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	78fa      	ldrb	r2, [r7, #3]
 800681a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	4611      	mov	r1, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f008 f85c 	bl	800e8e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	461a      	mov	r2, r3
 800684c:	4603      	mov	r3, r0
 800684e:	70fb      	strb	r3, [r7, #3]
 8006850:	460b      	mov	r3, r1
 8006852:	803b      	strh	r3, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800685c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006860:	2b00      	cmp	r3, #0
 8006862:	da0f      	bge.n	8006884 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	f003 020f 	and.w	r2, r3, #15
 800686a:	4613      	mov	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	3338      	adds	r3, #56	; 0x38
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4413      	add	r3, r2
 8006878:	3304      	adds	r3, #4
 800687a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	705a      	strb	r2, [r3, #1]
 8006882:	e00f      	b.n	80068a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	f003 020f 	and.w	r2, r3, #15
 800688a:	4613      	mov	r3, r2
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	4413      	add	r3, r2
 800689a:	3304      	adds	r3, #4
 800689c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80068b0:	883a      	ldrh	r2, [r7, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	78ba      	ldrb	r2, [r7, #2]
 80068ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068ce:	78bb      	ldrb	r3, [r7, #2]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d102      	bne.n	80068da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_PCD_EP_Open+0xaa>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e00e      	b.n	8006906 <HAL_PCD_EP_Open+0xc8>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68f9      	ldr	r1, [r7, #12]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f007 f97e 	bl	800dbf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006904:	7afb      	ldrb	r3, [r7, #11]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800691a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da0f      	bge.n	8006942 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	f003 020f 	and.w	r2, r3, #15
 8006928:	4613      	mov	r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	3338      	adds	r3, #56	; 0x38
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	3304      	adds	r3, #4
 8006938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	705a      	strb	r2, [r3, #1]
 8006940:	e00f      	b.n	8006962 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	f003 020f 	and.w	r2, r3, #15
 8006948:	4613      	mov	r3, r2
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	4413      	add	r3, r2
 8006958:	3304      	adds	r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	b2da      	uxtb	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_PCD_EP_Close+0x6e>
 8006978:	2302      	movs	r3, #2
 800697a:	e00e      	b.n	800699a <HAL_PCD_EP_Close+0x8c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68f9      	ldr	r1, [r7, #12]
 800698a:	4618      	mov	r0, r3
 800698c:	f007 f9bc 	bl	800dd08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
 80069ae:	460b      	mov	r3, r1
 80069b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069b2:	7afb      	ldrb	r3, [r7, #11]
 80069b4:	f003 020f 	and.w	r2, r3, #15
 80069b8:	4613      	mov	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	3304      	adds	r3, #4
 80069ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2200      	movs	r2, #0
 80069dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2200      	movs	r2, #0
 80069e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069e4:	7afb      	ldrb	r3, [r7, #11]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6979      	ldr	r1, [r7, #20]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f007 fc3d 	bl	800e280 <USB_EP0StartXfer>
 8006a06:	e005      	b.n	8006a14 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6979      	ldr	r1, [r7, #20]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f007 fa56 	bl	800dec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006a40:	681b      	ldr	r3, [r3, #0]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	4613      	mov	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	3338      	adds	r3, #56	; 0x38
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	3304      	adds	r3, #4
 8006a74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2200      	movs	r2, #0
 8006a86:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a9a:	7afb      	ldrb	r3, [r7, #11]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6979      	ldr	r1, [r7, #20]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f007 fbe8 	bl	800e280 <USB_EP0StartXfer>
 8006ab0:	e005      	b.n	8006abe <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6979      	ldr	r1, [r7, #20]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f007 fa01 	bl	800dec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d901      	bls.n	8006ae6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e04e      	b.n	8006b84 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da0f      	bge.n	8006b0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	f003 020f 	and.w	r2, r3, #15
 8006af4:	4613      	mov	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	3338      	adds	r3, #56	; 0x38
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	3304      	adds	r3, #4
 8006b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	705a      	strb	r2, [r3, #1]
 8006b0c:	e00d      	b.n	8006b2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	4613      	mov	r3, r2
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4413      	add	r3, r2
 8006b20:	3304      	adds	r3, #4
 8006b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_PCD_EP_SetStall+0x82>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e01c      	b.n	8006b84 <HAL_PCD_EP_SetStall+0xbc>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f007 fdef 	bl	800e73c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d108      	bne.n	8006b7a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b72:	4619      	mov	r1, r3
 8006b74:	4610      	mov	r0, r2
 8006b76:	f007 ffe1 	bl	800eb3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d901      	bls.n	8006baa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e042      	b.n	8006c30 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	da0f      	bge.n	8006bd2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bb2:	78fb      	ldrb	r3, [r7, #3]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	4613      	mov	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	3338      	adds	r3, #56	; 0x38
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	705a      	strb	r2, [r3, #1]
 8006bd0:	e00f      	b.n	8006bf2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	f003 020f 	and.w	r2, r3, #15
 8006bd8:	4613      	mov	r3, r2
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4413      	add	r3, r2
 8006be8:	3304      	adds	r3, #4
 8006bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_PCD_EP_ClrStall+0x86>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e00e      	b.n	8006c30 <HAL_PCD_EP_ClrStall+0xa4>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f007 fdf9 	bl	800e818 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	da0c      	bge.n	8006c66 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	f003 020f 	and.w	r2, r3, #15
 8006c52:	4613      	mov	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	3338      	adds	r3, #56	; 0x38
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	4413      	add	r3, r2
 8006c60:	3304      	adds	r3, #4
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e00c      	b.n	8006c80 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	f003 020f 	and.w	r2, r3, #15
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68f9      	ldr	r1, [r7, #12]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f007 fc1c 	bl	800e4c4 <USB_EPStopXfer>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006c90:	7afb      	ldrb	r3, [r7, #11]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b088      	sub	sp, #32
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	3338      	adds	r3, #56	; 0x38
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1a      	ldr	r2, [r3, #32]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d901      	bls.n	8006cd2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e067      	b.n	8006da2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d902      	bls.n	8006cee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	3303      	adds	r3, #3
 8006cf2:	089b      	lsrs	r3, r3, #2
 8006cf4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cf6:	e026      	b.n	8006d46 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d902      	bls.n	8006d14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	3303      	adds	r3, #3
 8006d18:	089b      	lsrs	r3, r3, #2
 8006d1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6919      	ldr	r1, [r3, #16]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	6978      	ldr	r0, [r7, #20]
 8006d2a:	f007 fc75 	bl	800e618 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	441a      	add	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1a      	ldr	r2, [r3, #32]
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	441a      	add	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d809      	bhi.n	8006d70 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1a      	ldr	r2, [r3, #32]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d203      	bcs.n	8006d70 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1c3      	bne.n	8006cf8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d811      	bhi.n	8006da0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	2201      	movs	r2, #1
 8006d84:	fa02 f303 	lsl.w	r3, r2, r3
 8006d88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	43db      	mvns	r3, r3
 8006d96:	6939      	ldr	r1, [r7, #16]
 8006d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	333c      	adds	r3, #60	; 0x3c
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <PCD_EP_OutXfrComplete_int+0x98>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d124      	bne.n	8006e2c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfe:	6093      	str	r3, [r2, #8]
 8006e00:	e01a      	b.n	8006e38 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	461a      	mov	r2, r3
 8006e1a:	2320      	movs	r3, #32
 8006e1c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f00d fd75 	bl	8014914 <HAL_PCD_DataOutStageCallback>
 8006e2a:	e005      	b.n	8006e38 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f00d fd6e 	bl	8014914 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	4f54310a 	.word	0x4f54310a

08006e48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	333c      	adds	r3, #60	; 0x3c
 8006e60:	3304      	adds	r3, #4
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4a0c      	ldr	r2, [pc, #48]	; (8006eac <PCD_EP_OutSetupPacket_int+0x64>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d90e      	bls.n	8006e9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d009      	beq.n	8006e9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	461a      	mov	r2, r3
 8006e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f00d fd27 	bl	80148f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	4f54300a 	.word	0x4f54300a

08006eb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d107      	bne.n	8006ede <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006ece:	883b      	ldrh	r3, [r7, #0]
 8006ed0:	0419      	lsls	r1, r3, #16
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	629a      	str	r2, [r3, #40]	; 0x28
 8006edc:	e028      	b.n	8006f30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4413      	add	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
 8006ef0:	e00d      	b.n	8006f0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	3340      	adds	r3, #64	; 0x40
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	0c1b      	lsrs	r3, r3, #16
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	4413      	add	r3, r2
 8006f06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	73fb      	strb	r3, [r7, #15]
 8006f0e:	7bfa      	ldrb	r2, [r7, #15]
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3ec      	bcc.n	8006ef2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f18:	883b      	ldrh	r3, [r7, #0]
 8006f1a:	0418      	lsls	r0, r3, #16
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	4302      	orrs	r2, r0
 8006f28:	3340      	adds	r3, #64	; 0x40
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	887a      	ldrh	r2, [r7, #2]
 8006f50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f92:	f043 0303 	orr.w	r3, r3, #3
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fac:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a04      	ldr	r2, [pc, #16]	; (8006fc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb6:	6013      	str	r3, [r2, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40007000 	.word	0x40007000

08006fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd8:	d102      	bne.n	8006fe0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fde:	e00b      	b.n	8006ff8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006fe0:	4b08      	ldr	r3, [pc, #32]	; (8007004 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	d102      	bne.n	8006ff6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff4:	e000      	b.n	8006ff8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006ff6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40007000 	.word	0x40007000

08007008 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d141      	bne.n	800709a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007016:	4b4b      	ldr	r3, [pc, #300]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800701e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007022:	d131      	bne.n	8007088 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007024:	4b47      	ldr	r3, [pc, #284]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800702a:	4a46      	ldr	r2, [pc, #280]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800702c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007034:	4b43      	ldr	r3, [pc, #268]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800703c:	4a41      	ldr	r2, [pc, #260]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800703e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007044:	4b40      	ldr	r3, [pc, #256]	; (8007148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2232      	movs	r2, #50	; 0x32
 800704a:	fb02 f303 	mul.w	r3, r2, r3
 800704e:	4a3f      	ldr	r2, [pc, #252]	; (800714c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	0c9b      	lsrs	r3, r3, #18
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800705a:	e002      	b.n	8007062 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3b01      	subs	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007062:	4b38      	ldr	r3, [pc, #224]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800706e:	d102      	bne.n	8007076 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f2      	bne.n	800705c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007076:	4b33      	ldr	r3, [pc, #204]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800707e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007082:	d158      	bne.n	8007136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e057      	b.n	8007138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007088:	4b2e      	ldr	r3, [pc, #184]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800708e:	4a2d      	ldr	r2, [pc, #180]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007098:	e04d      	b.n	8007136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a0:	d141      	bne.n	8007126 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070a2:	4b28      	ldr	r3, [pc, #160]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ae:	d131      	bne.n	8007114 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070b0:	4b24      	ldr	r3, [pc, #144]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b6:	4a23      	ldr	r2, [pc, #140]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070c0:	4b20      	ldr	r3, [pc, #128]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070c8:	4a1e      	ldr	r2, [pc, #120]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80070d0:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2232      	movs	r2, #50	; 0x32
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
 80070da:	4a1c      	ldr	r2, [pc, #112]	; (800714c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070dc:	fba2 2303 	umull	r2, r3, r2, r3
 80070e0:	0c9b      	lsrs	r3, r3, #18
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070e6:	e002      	b.n	80070ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070ee:	4b15      	ldr	r3, [pc, #84]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070fa:	d102      	bne.n	8007102 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f2      	bne.n	80070e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007102:	4b10      	ldr	r3, [pc, #64]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710e:	d112      	bne.n	8007136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e011      	b.n	8007138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800711a:	4a0a      	ldr	r2, [pc, #40]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800711c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007124:	e007      	b.n	8007136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800712e:	4a05      	ldr	r2, [pc, #20]	; (8007144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007134:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	40007000 	.word	0x40007000
 8007148:	20000140 	.word	0x20000140
 800714c:	431bde83 	.word	0x431bde83

08007150 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	4a04      	ldr	r2, [pc, #16]	; (800716c <HAL_PWREx_EnableVddUSB+0x1c>)
 800715a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800715e:	6053      	str	r3, [r2, #4]
}
 8007160:	bf00      	nop
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40007000 	.word	0x40007000

08007170 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007170:	b480      	push	{r7}
 8007172:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <HAL_PWREx_EnableVddIO2+0x1c>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	4a04      	ldr	r2, [pc, #16]	; (800718c <HAL_PWREx_EnableVddIO2+0x1c>)
 800717a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800717e:	6053      	str	r3, [r2, #4]
}
 8007180:	bf00      	nop
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40007000 	.word	0x40007000

08007190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d102      	bne.n	80071a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f000 bc08 	b.w	80079b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071a4:	4b96      	ldr	r3, [pc, #600]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 030c 	and.w	r3, r3, #12
 80071ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071ae:	4b94      	ldr	r3, [pc, #592]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 80e4 	beq.w	800738e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <HAL_RCC_OscConfig+0x4c>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b0c      	cmp	r3, #12
 80071d0:	f040 808b 	bne.w	80072ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	f040 8087 	bne.w	80072ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071dc:	4b88      	ldr	r3, [pc, #544]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <HAL_RCC_OscConfig+0x64>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e3df      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1a      	ldr	r2, [r3, #32]
 80071f8:	4b81      	ldr	r3, [pc, #516]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <HAL_RCC_OscConfig+0x7e>
 8007204:	4b7e      	ldr	r3, [pc, #504]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800720c:	e005      	b.n	800721a <HAL_RCC_OscConfig+0x8a>
 800720e:	4b7c      	ldr	r3, [pc, #496]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007214:	091b      	lsrs	r3, r3, #4
 8007216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800721a:	4293      	cmp	r3, r2
 800721c:	d223      	bcs.n	8007266 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fdca 	bl	8007dbc <RCC_SetFlashLatencyFromMSIRange>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e3c0      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007232:	4b73      	ldr	r3, [pc, #460]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a72      	ldr	r2, [pc, #456]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007238:	f043 0308 	orr.w	r3, r3, #8
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	4b70      	ldr	r3, [pc, #448]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	496d      	ldr	r1, [pc, #436]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 800724c:	4313      	orrs	r3, r2
 800724e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007250:	4b6b      	ldr	r3, [pc, #428]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	4968      	ldr	r1, [pc, #416]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007260:	4313      	orrs	r3, r2
 8007262:	604b      	str	r3, [r1, #4]
 8007264:	e025      	b.n	80072b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007266:	4b66      	ldr	r3, [pc, #408]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a65      	ldr	r2, [pc, #404]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 800726c:	f043 0308 	orr.w	r3, r3, #8
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	4b63      	ldr	r3, [pc, #396]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	4960      	ldr	r1, [pc, #384]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007280:	4313      	orrs	r3, r2
 8007282:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007284:	4b5e      	ldr	r3, [pc, #376]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	021b      	lsls	r3, r3, #8
 8007292:	495b      	ldr	r1, [pc, #364]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d109      	bne.n	80072b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fd8a 	bl	8007dbc <RCC_SetFlashLatencyFromMSIRange>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e380      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072b2:	f000 fcc1 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b51      	ldr	r3, [pc, #324]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	091b      	lsrs	r3, r3, #4
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	4950      	ldr	r1, [pc, #320]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80072c4:	5ccb      	ldrb	r3, [r1, r3]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	fa22 f303 	lsr.w	r3, r2, r3
 80072ce:	4a4e      	ldr	r2, [pc, #312]	; (8007408 <HAL_RCC_OscConfig+0x278>)
 80072d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80072d2:	4b4e      	ldr	r3, [pc, #312]	; (800740c <HAL_RCC_OscConfig+0x27c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fc fd5e 	bl	8003d98 <HAL_InitTick>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d052      	beq.n	800738c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	e364      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d032      	beq.n	8007358 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80072f2:	4b43      	ldr	r3, [pc, #268]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a42      	ldr	r2, [pc, #264]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80072f8:	f043 0301 	orr.w	r3, r3, #1
 80072fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072fe:	f7fc fd9b 	bl	8003e38 <HAL_GetTick>
 8007302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007304:	e008      	b.n	8007318 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007306:	f7fc fd97 	bl	8003e38 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e34d      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007318:	4b39      	ldr	r3, [pc, #228]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0f0      	beq.n	8007306 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007324:	4b36      	ldr	r3, [pc, #216]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a35      	ldr	r2, [pc, #212]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 800732a:	f043 0308 	orr.w	r3, r3, #8
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	4b33      	ldr	r3, [pc, #204]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	4930      	ldr	r1, [pc, #192]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 800733e:	4313      	orrs	r3, r2
 8007340:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007342:	4b2f      	ldr	r3, [pc, #188]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	492b      	ldr	r1, [pc, #172]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007352:	4313      	orrs	r3, r2
 8007354:	604b      	str	r3, [r1, #4]
 8007356:	e01a      	b.n	800738e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007358:	4b29      	ldr	r3, [pc, #164]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a28      	ldr	r2, [pc, #160]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007364:	f7fc fd68 	bl	8003e38 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800736c:	f7fc fd64 	bl	8003e38 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e31a      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800737e:	4b20      	ldr	r3, [pc, #128]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f0      	bne.n	800736c <HAL_RCC_OscConfig+0x1dc>
 800738a:	e000      	b.n	800738e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800738c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d073      	beq.n	8007482 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b08      	cmp	r3, #8
 800739e:	d005      	beq.n	80073ac <HAL_RCC_OscConfig+0x21c>
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2b0c      	cmp	r3, #12
 80073a4:	d10e      	bne.n	80073c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d10b      	bne.n	80073c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ac:	4b14      	ldr	r3, [pc, #80]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d063      	beq.n	8007480 <HAL_RCC_OscConfig+0x2f0>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d15f      	bne.n	8007480 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e2f7      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073cc:	d106      	bne.n	80073dc <HAL_RCC_OscConfig+0x24c>
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a0b      	ldr	r2, [pc, #44]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80073d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	e025      	b.n	8007428 <HAL_RCC_OscConfig+0x298>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073e4:	d114      	bne.n	8007410 <HAL_RCC_OscConfig+0x280>
 80073e6:	4b06      	ldr	r3, [pc, #24]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a05      	ldr	r2, [pc, #20]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80073ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	4b03      	ldr	r3, [pc, #12]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a02      	ldr	r2, [pc, #8]	; (8007400 <HAL_RCC_OscConfig+0x270>)
 80073f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	e013      	b.n	8007428 <HAL_RCC_OscConfig+0x298>
 8007400:	40021000 	.word	0x40021000
 8007404:	08017588 	.word	0x08017588
 8007408:	20000140 	.word	0x20000140
 800740c:	20000144 	.word	0x20000144
 8007410:	4ba0      	ldr	r3, [pc, #640]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a9f      	ldr	r2, [pc, #636]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	4b9d      	ldr	r3, [pc, #628]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a9c      	ldr	r2, [pc, #624]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d013      	beq.n	8007458 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fc fd02 	bl	8003e38 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007438:	f7fc fcfe 	bl	8003e38 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b64      	cmp	r3, #100	; 0x64
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e2b4      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800744a:	4b92      	ldr	r3, [pc, #584]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0f0      	beq.n	8007438 <HAL_RCC_OscConfig+0x2a8>
 8007456:	e014      	b.n	8007482 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007458:	f7fc fcee 	bl	8003e38 <HAL_GetTick>
 800745c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800745e:	e008      	b.n	8007472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007460:	f7fc fcea 	bl	8003e38 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b64      	cmp	r3, #100	; 0x64
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e2a0      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007472:	4b88      	ldr	r3, [pc, #544]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1f0      	bne.n	8007460 <HAL_RCC_OscConfig+0x2d0>
 800747e:	e000      	b.n	8007482 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d060      	beq.n	8007550 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b04      	cmp	r3, #4
 8007492:	d005      	beq.n	80074a0 <HAL_RCC_OscConfig+0x310>
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b0c      	cmp	r3, #12
 8007498:	d119      	bne.n	80074ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d116      	bne.n	80074ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074a0:	4b7c      	ldr	r3, [pc, #496]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_RCC_OscConfig+0x328>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e27d      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b8:	4b76      	ldr	r3, [pc, #472]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	061b      	lsls	r3, r3, #24
 80074c6:	4973      	ldr	r1, [pc, #460]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074cc:	e040      	b.n	8007550 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d023      	beq.n	800751e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074d6:	4b6f      	ldr	r3, [pc, #444]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a6e      	ldr	r2, [pc, #440]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e2:	f7fc fca9 	bl	8003e38 <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074ea:	f7fc fca5 	bl	8003e38 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e25b      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074fc:	4b65      	ldr	r3, [pc, #404]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0f0      	beq.n	80074ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007508:	4b62      	ldr	r3, [pc, #392]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	061b      	lsls	r3, r3, #24
 8007516:	495f      	ldr	r1, [pc, #380]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007518:	4313      	orrs	r3, r2
 800751a:	604b      	str	r3, [r1, #4]
 800751c:	e018      	b.n	8007550 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800751e:	4b5d      	ldr	r3, [pc, #372]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a5c      	ldr	r2, [pc, #368]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800752a:	f7fc fc85 	bl	8003e38 <HAL_GetTick>
 800752e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007530:	e008      	b.n	8007544 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007532:	f7fc fc81 	bl	8003e38 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d901      	bls.n	8007544 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e237      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007544:	4b53      	ldr	r3, [pc, #332]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f0      	bne.n	8007532 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d03c      	beq.n	80075d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01c      	beq.n	800759e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007564:	4b4b      	ldr	r3, [pc, #300]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800756a:	4a4a      	ldr	r2, [pc, #296]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 800756c:	f043 0301 	orr.w	r3, r3, #1
 8007570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007574:	f7fc fc60 	bl	8003e38 <HAL_GetTick>
 8007578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800757a:	e008      	b.n	800758e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800757c:	f7fc fc5c 	bl	8003e38 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e212      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800758e:	4b41      	ldr	r3, [pc, #260]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0ef      	beq.n	800757c <HAL_RCC_OscConfig+0x3ec>
 800759c:	e01b      	b.n	80075d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800759e:	4b3d      	ldr	r3, [pc, #244]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80075a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075a4:	4a3b      	ldr	r2, [pc, #236]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ae:	f7fc fc43 	bl	8003e38 <HAL_GetTick>
 80075b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075b6:	f7fc fc3f 	bl	8003e38 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e1f5      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075c8:	4b32      	ldr	r3, [pc, #200]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80075ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1ef      	bne.n	80075b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 80a6 	beq.w	8007730 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075e4:	2300      	movs	r3, #0
 80075e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80075e8:	4b2a      	ldr	r3, [pc, #168]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80075ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10d      	bne.n	8007610 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075f4:	4b27      	ldr	r3, [pc, #156]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80075f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f8:	4a26      	ldr	r2, [pc, #152]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 80075fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075fe:	6593      	str	r3, [r2, #88]	; 0x58
 8007600:	4b24      	ldr	r3, [pc, #144]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007608:	60bb      	str	r3, [r7, #8]
 800760a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800760c:	2301      	movs	r3, #1
 800760e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007610:	4b21      	ldr	r3, [pc, #132]	; (8007698 <HAL_RCC_OscConfig+0x508>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007618:	2b00      	cmp	r3, #0
 800761a:	d118      	bne.n	800764e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800761c:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <HAL_RCC_OscConfig+0x508>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <HAL_RCC_OscConfig+0x508>)
 8007622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007628:	f7fc fc06 	bl	8003e38 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007630:	f7fc fc02 	bl	8003e38 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e1b8      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <HAL_RCC_OscConfig+0x508>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d108      	bne.n	8007668 <HAL_RCC_OscConfig+0x4d8>
 8007656:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765c:	4a0d      	ldr	r2, [pc, #52]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 800765e:	f043 0301 	orr.w	r3, r3, #1
 8007662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007666:	e029      	b.n	80076bc <HAL_RCC_OscConfig+0x52c>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	2b05      	cmp	r3, #5
 800766e:	d115      	bne.n	800769c <HAL_RCC_OscConfig+0x50c>
 8007670:	4b08      	ldr	r3, [pc, #32]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007676:	4a07      	ldr	r2, [pc, #28]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007678:	f043 0304 	orr.w	r3, r3, #4
 800767c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007686:	4a03      	ldr	r2, [pc, #12]	; (8007694 <HAL_RCC_OscConfig+0x504>)
 8007688:	f043 0301 	orr.w	r3, r3, #1
 800768c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007690:	e014      	b.n	80076bc <HAL_RCC_OscConfig+0x52c>
 8007692:	bf00      	nop
 8007694:	40021000 	.word	0x40021000
 8007698:	40007000 	.word	0x40007000
 800769c:	4b9d      	ldr	r3, [pc, #628]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 800769e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a2:	4a9c      	ldr	r2, [pc, #624]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80076a4:	f023 0301 	bic.w	r3, r3, #1
 80076a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076ac:	4b99      	ldr	r3, [pc, #612]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b2:	4a98      	ldr	r2, [pc, #608]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80076b4:	f023 0304 	bic.w	r3, r3, #4
 80076b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d016      	beq.n	80076f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c4:	f7fc fbb8 	bl	8003e38 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076ca:	e00a      	b.n	80076e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076cc:	f7fc fbb4 	bl	8003e38 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076da:	4293      	cmp	r3, r2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e168      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076e2:	4b8c      	ldr	r3, [pc, #560]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80076e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0ed      	beq.n	80076cc <HAL_RCC_OscConfig+0x53c>
 80076f0:	e015      	b.n	800771e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f2:	f7fc fba1 	bl	8003e38 <HAL_GetTick>
 80076f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076f8:	e00a      	b.n	8007710 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076fa:	f7fc fb9d 	bl	8003e38 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	f241 3288 	movw	r2, #5000	; 0x1388
 8007708:	4293      	cmp	r3, r2
 800770a:	d901      	bls.n	8007710 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e151      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007710:	4b80      	ldr	r3, [pc, #512]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1ed      	bne.n	80076fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800771e:	7ffb      	ldrb	r3, [r7, #31]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d105      	bne.n	8007730 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007724:	4b7b      	ldr	r3, [pc, #492]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007728:	4a7a      	ldr	r2, [pc, #488]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 800772a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800772e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d03c      	beq.n	80077b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01c      	beq.n	800777e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007744:	4b73      	ldr	r3, [pc, #460]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800774a:	4a72      	ldr	r2, [pc, #456]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007754:	f7fc fb70 	bl	8003e38 <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800775a:	e008      	b.n	800776e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800775c:	f7fc fb6c 	bl	8003e38 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e122      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800776e:	4b69      	ldr	r3, [pc, #420]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0ef      	beq.n	800775c <HAL_RCC_OscConfig+0x5cc>
 800777c:	e01b      	b.n	80077b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800777e:	4b65      	ldr	r3, [pc, #404]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007784:	4a63      	ldr	r2, [pc, #396]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007786:	f023 0301 	bic.w	r3, r3, #1
 800778a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778e:	f7fc fb53 	bl	8003e38 <HAL_GetTick>
 8007792:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007794:	e008      	b.n	80077a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007796:	f7fc fb4f 	bl	8003e38 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d901      	bls.n	80077a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e105      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077a8:	4b5a      	ldr	r3, [pc, #360]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80077aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1ef      	bne.n	8007796 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 80f9 	beq.w	80079b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	f040 80cf 	bne.w	8007968 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80077ca:	4b52      	ldr	r3, [pc, #328]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f003 0203 	and.w	r2, r3, #3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	429a      	cmp	r2, r3
 80077dc:	d12c      	bne.n	8007838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	3b01      	subs	r3, #1
 80077ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d123      	bne.n	8007838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d11b      	bne.n	8007838 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800780c:	429a      	cmp	r2, r3
 800780e:	d113      	bne.n	8007838 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	3b01      	subs	r3, #1
 800781e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007820:	429a      	cmp	r2, r3
 8007822:	d109      	bne.n	8007838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	3b01      	subs	r3, #1
 8007832:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007834:	429a      	cmp	r2, r3
 8007836:	d071      	beq.n	800791c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b0c      	cmp	r3, #12
 800783c:	d068      	beq.n	8007910 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800783e:	4b35      	ldr	r3, [pc, #212]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800784a:	4b32      	ldr	r3, [pc, #200]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e0ac      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800785a:	4b2e      	ldr	r3, [pc, #184]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a2d      	ldr	r2, [pc, #180]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007864:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007866:	f7fc fae7 	bl	8003e38 <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800786c:	e008      	b.n	8007880 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800786e:	f7fc fae3 	bl	8003e38 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d901      	bls.n	8007880 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e099      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007880:	4b24      	ldr	r3, [pc, #144]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f0      	bne.n	800786e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800788c:	4b21      	ldr	r3, [pc, #132]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	4b21      	ldr	r3, [pc, #132]	; (8007918 <HAL_RCC_OscConfig+0x788>)
 8007892:	4013      	ands	r3, r2
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800789c:	3a01      	subs	r2, #1
 800789e:	0112      	lsls	r2, r2, #4
 80078a0:	4311      	orrs	r1, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80078a6:	0212      	lsls	r2, r2, #8
 80078a8:	4311      	orrs	r1, r2
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80078ae:	0852      	lsrs	r2, r2, #1
 80078b0:	3a01      	subs	r2, #1
 80078b2:	0552      	lsls	r2, r2, #21
 80078b4:	4311      	orrs	r1, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80078ba:	0852      	lsrs	r2, r2, #1
 80078bc:	3a01      	subs	r2, #1
 80078be:	0652      	lsls	r2, r2, #25
 80078c0:	4311      	orrs	r1, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078c6:	06d2      	lsls	r2, r2, #27
 80078c8:	430a      	orrs	r2, r1
 80078ca:	4912      	ldr	r1, [pc, #72]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80078d0:	4b10      	ldr	r3, [pc, #64]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a0f      	ldr	r2, [pc, #60]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80078d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078dc:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	4a0c      	ldr	r2, [pc, #48]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 80078e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80078e8:	f7fc faa6 	bl	8003e38 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f0:	f7fc faa2 	bl	8003e38 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e058      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007902:	4b04      	ldr	r3, [pc, #16]	; (8007914 <HAL_RCC_OscConfig+0x784>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f0      	beq.n	80078f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800790e:	e050      	b.n	80079b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e04f      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
 8007914:	40021000 	.word	0x40021000
 8007918:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800791c:	4b27      	ldr	r3, [pc, #156]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d144      	bne.n	80079b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007928:	4b24      	ldr	r3, [pc, #144]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a23      	ldr	r2, [pc, #140]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 800792e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007932:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007934:	4b21      	ldr	r3, [pc, #132]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	4a20      	ldr	r2, [pc, #128]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 800793a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800793e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007940:	f7fc fa7a 	bl	8003e38 <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007948:	f7fc fa76 	bl	8003e38 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e02c      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800795a:	4b18      	ldr	r3, [pc, #96]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0f0      	beq.n	8007948 <HAL_RCC_OscConfig+0x7b8>
 8007966:	e024      	b.n	80079b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	2b0c      	cmp	r3, #12
 800796c:	d01f      	beq.n	80079ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800796e:	4b13      	ldr	r3, [pc, #76]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a12      	ldr	r2, [pc, #72]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 8007974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797a:	f7fc fa5d 	bl	8003e38 <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007980:	e008      	b.n	8007994 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007982:	f7fc fa59 	bl	8003e38 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e00f      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007994:	4b09      	ldr	r3, [pc, #36]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f0      	bne.n	8007982 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	4905      	ldr	r1, [pc, #20]	; (80079bc <HAL_RCC_OscConfig+0x82c>)
 80079a6:	4b06      	ldr	r3, [pc, #24]	; (80079c0 <HAL_RCC_OscConfig+0x830>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	60cb      	str	r3, [r1, #12]
 80079ac:	e001      	b.n	80079b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3720      	adds	r7, #32
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40021000 	.word	0x40021000
 80079c0:	feeefffc 	.word	0xfeeefffc

080079c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e11d      	b.n	8007c18 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079dc:	4b90      	ldr	r3, [pc, #576]	; (8007c20 <HAL_RCC_ClockConfig+0x25c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d910      	bls.n	8007a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ea:	4b8d      	ldr	r3, [pc, #564]	; (8007c20 <HAL_RCC_ClockConfig+0x25c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f023 020f 	bic.w	r2, r3, #15
 80079f2:	498b      	ldr	r1, [pc, #556]	; (8007c20 <HAL_RCC_ClockConfig+0x25c>)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fa:	4b89      	ldr	r3, [pc, #548]	; (8007c20 <HAL_RCC_ClockConfig+0x25c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d001      	beq.n	8007a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e105      	b.n	8007c18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d010      	beq.n	8007a3a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	4b81      	ldr	r3, [pc, #516]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d908      	bls.n	8007a3a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a28:	4b7e      	ldr	r3, [pc, #504]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	497b      	ldr	r1, [pc, #492]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d079      	beq.n	8007b3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d11e      	bne.n	8007a8c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a4e:	4b75      	ldr	r3, [pc, #468]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e0dc      	b.n	8007c18 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007a5e:	f000 fa07 	bl	8007e70 <RCC_GetSysClockFreqFromPLLSource>
 8007a62:	4603      	mov	r3, r0
 8007a64:	4a70      	ldr	r2, [pc, #448]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d946      	bls.n	8007af8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007a6a:	4b6e      	ldr	r3, [pc, #440]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d140      	bne.n	8007af8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a76:	4b6b      	ldr	r3, [pc, #428]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a7e:	4a69      	ldr	r2, [pc, #420]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a86:	2380      	movs	r3, #128	; 0x80
 8007a88:	617b      	str	r3, [r7, #20]
 8007a8a:	e035      	b.n	8007af8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d107      	bne.n	8007aa4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a94:	4b63      	ldr	r3, [pc, #396]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d115      	bne.n	8007acc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e0b9      	b.n	8007c18 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d107      	bne.n	8007abc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007aac:	4b5d      	ldr	r3, [pc, #372]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0ad      	b.n	8007c18 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007abc:	4b59      	ldr	r3, [pc, #356]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e0a5      	b.n	8007c18 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007acc:	f000 f8b4 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	4a55      	ldr	r2, [pc, #340]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d90f      	bls.n	8007af8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007ad8:	4b52      	ldr	r3, [pc, #328]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d109      	bne.n	8007af8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007ae4:	4b4f      	ldr	r3, [pc, #316]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aec:	4a4d      	ldr	r2, [pc, #308]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007af4:	2380      	movs	r3, #128	; 0x80
 8007af6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007af8:	4b4a      	ldr	r3, [pc, #296]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f023 0203 	bic.w	r2, r3, #3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	4947      	ldr	r1, [pc, #284]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b0a:	f7fc f995 	bl	8003e38 <HAL_GetTick>
 8007b0e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b10:	e00a      	b.n	8007b28 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b12:	f7fc f991 	bl	8003e38 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e077      	b.n	8007c18 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b28:	4b3e      	ldr	r3, [pc, #248]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f003 020c 	and.w	r2, r3, #12
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d1eb      	bne.n	8007b12 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b80      	cmp	r3, #128	; 0x80
 8007b3e:	d105      	bne.n	8007b4c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b40:	4b38      	ldr	r3, [pc, #224]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	4a37      	ldr	r2, [pc, #220]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b4a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d010      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	4b31      	ldr	r3, [pc, #196]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d208      	bcs.n	8007b7a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b68:	4b2e      	ldr	r3, [pc, #184]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	492b      	ldr	r1, [pc, #172]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b7a:	4b29      	ldr	r3, [pc, #164]	; (8007c20 <HAL_RCC_ClockConfig+0x25c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d210      	bcs.n	8007baa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b88:	4b25      	ldr	r3, [pc, #148]	; (8007c20 <HAL_RCC_ClockConfig+0x25c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f023 020f 	bic.w	r2, r3, #15
 8007b90:	4923      	ldr	r1, [pc, #140]	; (8007c20 <HAL_RCC_ClockConfig+0x25c>)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b98:	4b21      	ldr	r3, [pc, #132]	; (8007c20 <HAL_RCC_ClockConfig+0x25c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d001      	beq.n	8007baa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e036      	b.n	8007c18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d008      	beq.n	8007bc8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bb6:	4b1b      	ldr	r3, [pc, #108]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	4918      	ldr	r1, [pc, #96]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d009      	beq.n	8007be8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bd4:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	4910      	ldr	r1, [pc, #64]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007be8:	f000 f826 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8007bec:	4602      	mov	r2, r0
 8007bee:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	091b      	lsrs	r3, r3, #4
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	490c      	ldr	r1, [pc, #48]	; (8007c2c <HAL_RCC_ClockConfig+0x268>)
 8007bfa:	5ccb      	ldrb	r3, [r1, r3]
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
 8007c04:	4a0a      	ldr	r2, [pc, #40]	; (8007c30 <HAL_RCC_ClockConfig+0x26c>)
 8007c06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <HAL_RCC_ClockConfig+0x270>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fc f8c3 	bl	8003d98 <HAL_InitTick>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]

  return status;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	40022000 	.word	0x40022000
 8007c24:	40021000 	.word	0x40021000
 8007c28:	04c4b400 	.word	0x04c4b400
 8007c2c:	08017588 	.word	0x08017588
 8007c30:	20000140 	.word	0x20000140
 8007c34:	20000144 	.word	0x20000144

08007c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b089      	sub	sp, #36	; 0x24
 8007c3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61fb      	str	r3, [r7, #28]
 8007c42:	2300      	movs	r3, #0
 8007c44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c46:	4b3e      	ldr	r3, [pc, #248]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f003 030c 	and.w	r3, r3, #12
 8007c4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c50:	4b3b      	ldr	r3, [pc, #236]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d005      	beq.n	8007c6c <HAL_RCC_GetSysClockFreq+0x34>
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	2b0c      	cmp	r3, #12
 8007c64:	d121      	bne.n	8007caa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d11e      	bne.n	8007caa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007c6c:	4b34      	ldr	r3, [pc, #208]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0308 	and.w	r3, r3, #8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d107      	bne.n	8007c88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007c78:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c7e:	0a1b      	lsrs	r3, r3, #8
 8007c80:	f003 030f 	and.w	r3, r3, #15
 8007c84:	61fb      	str	r3, [r7, #28]
 8007c86:	e005      	b.n	8007c94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007c88:	4b2d      	ldr	r3, [pc, #180]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	091b      	lsrs	r3, r3, #4
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007c94:	4a2b      	ldr	r2, [pc, #172]	; (8007d44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10d      	bne.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ca8:	e00a      	b.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d102      	bne.n	8007cb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007cb0:	4b25      	ldr	r3, [pc, #148]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	e004      	b.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d101      	bne.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007cbc:	4b22      	ldr	r3, [pc, #136]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8007cbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b0c      	cmp	r3, #12
 8007cc4:	d134      	bne.n	8007d30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cc6:	4b1e      	ldr	r3, [pc, #120]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d003      	beq.n	8007cde <HAL_RCC_GetSysClockFreq+0xa6>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d003      	beq.n	8007ce4 <HAL_RCC_GetSysClockFreq+0xac>
 8007cdc:	e005      	b.n	8007cea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007cde:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8007ce0:	617b      	str	r3, [r7, #20]
      break;
 8007ce2:	e005      	b.n	8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007ce4:	4b18      	ldr	r3, [pc, #96]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8007ce6:	617b      	str	r3, [r7, #20]
      break;
 8007ce8:	e002      	b.n	8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	617b      	str	r3, [r7, #20]
      break;
 8007cee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cf0:	4b13      	ldr	r3, [pc, #76]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	091b      	lsrs	r3, r3, #4
 8007cf6:	f003 030f 	and.w	r3, r3, #15
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007cfe:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	fb03 f202 	mul.w	r2, r3, r2
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d16:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	0e5b      	lsrs	r3, r3, #25
 8007d1c:	f003 0303 	and.w	r3, r3, #3
 8007d20:	3301      	adds	r3, #1
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007d30:	69bb      	ldr	r3, [r7, #24]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3724      	adds	r7, #36	; 0x24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40021000 	.word	0x40021000
 8007d44:	080175a0 	.word	0x080175a0
 8007d48:	00f42400 	.word	0x00f42400

08007d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d50:	4b03      	ldr	r3, [pc, #12]	; (8007d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d52:	681b      	ldr	r3, [r3, #0]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	20000140 	.word	0x20000140

08007d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d68:	f7ff fff0 	bl	8007d4c <HAL_RCC_GetHCLKFreq>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	0a1b      	lsrs	r3, r3, #8
 8007d74:	f003 0307 	and.w	r3, r3, #7
 8007d78:	4904      	ldr	r1, [pc, #16]	; (8007d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d7a:	5ccb      	ldrb	r3, [r1, r3]
 8007d7c:	f003 031f 	and.w	r3, r3, #31
 8007d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	08017598 	.word	0x08017598

08007d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d94:	f7ff ffda 	bl	8007d4c <HAL_RCC_GetHCLKFreq>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	0adb      	lsrs	r3, r3, #11
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	4904      	ldr	r1, [pc, #16]	; (8007db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007da6:	5ccb      	ldrb	r3, [r1, r3]
 8007da8:	f003 031f 	and.w	r3, r3, #31
 8007dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40021000 	.word	0x40021000
 8007db8:	08017598 	.word	0x08017598

08007dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007dc8:	4b27      	ldr	r3, [pc, #156]	; (8007e68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007dd4:	f7ff f8f8 	bl	8006fc8 <HAL_PWREx_GetVoltageRange>
 8007dd8:	6178      	str	r0, [r7, #20]
 8007dda:	e014      	b.n	8007e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ddc:	4b22      	ldr	r3, [pc, #136]	; (8007e68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de0:	4a21      	ldr	r2, [pc, #132]	; (8007e68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de6:	6593      	str	r3, [r2, #88]	; 0x58
 8007de8:	4b1f      	ldr	r3, [pc, #124]	; (8007e68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007df4:	f7ff f8e8 	bl	8006fc8 <HAL_PWREx_GetVoltageRange>
 8007df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e0c:	d10b      	bne.n	8007e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b80      	cmp	r3, #128	; 0x80
 8007e12:	d913      	bls.n	8007e3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2ba0      	cmp	r3, #160	; 0xa0
 8007e18:	d902      	bls.n	8007e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	e00d      	b.n	8007e3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e20:	2301      	movs	r3, #1
 8007e22:	613b      	str	r3, [r7, #16]
 8007e24:	e00a      	b.n	8007e3c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b7f      	cmp	r3, #127	; 0x7f
 8007e2a:	d902      	bls.n	8007e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	613b      	str	r3, [r7, #16]
 8007e30:	e004      	b.n	8007e3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b70      	cmp	r3, #112	; 0x70
 8007e36:	d101      	bne.n	8007e3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e38:	2301      	movs	r3, #1
 8007e3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f023 020f 	bic.w	r2, r3, #15
 8007e44:	4909      	ldr	r1, [pc, #36]	; (8007e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007e4c:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d001      	beq.n	8007e5e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	40021000 	.word	0x40021000
 8007e6c:	40022000 	.word	0x40022000

08007e70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e76:	4b2d      	ldr	r3, [pc, #180]	; (8007f2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d00b      	beq.n	8007e9e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d825      	bhi.n	8007ed8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d008      	beq.n	8007ea4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d11f      	bne.n	8007ed8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007e98:	4b25      	ldr	r3, [pc, #148]	; (8007f30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007e9a:	613b      	str	r3, [r7, #16]
    break;
 8007e9c:	e01f      	b.n	8007ede <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007e9e:	4b24      	ldr	r3, [pc, #144]	; (8007f30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007ea0:	613b      	str	r3, [r7, #16]
    break;
 8007ea2:	e01c      	b.n	8007ede <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ea4:	4b21      	ldr	r3, [pc, #132]	; (8007f2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d107      	bne.n	8007ec0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eb6:	0a1b      	lsrs	r3, r3, #8
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	e005      	b.n	8007ecc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ec0:	4b1a      	ldr	r3, [pc, #104]	; (8007f2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	091b      	lsrs	r3, r3, #4
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007ecc:	4a19      	ldr	r2, [pc, #100]	; (8007f34 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ed4:	613b      	str	r3, [r7, #16]
    break;
 8007ed6:	e002      	b.n	8007ede <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	613b      	str	r3, [r7, #16]
    break;
 8007edc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	091b      	lsrs	r3, r3, #4
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007eec:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	fb03 f202 	mul.w	r2, r3, r2
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f04:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	0e5b      	lsrs	r3, r3, #25
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	3301      	adds	r3, #1
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007f1e:	683b      	ldr	r3, [r7, #0]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	00f42400 	.word	0x00f42400
 8007f34:	080175a0 	.word	0x080175a0

08007f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f40:	2300      	movs	r3, #0
 8007f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f44:	2300      	movs	r3, #0
 8007f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d040      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f58:	2b80      	cmp	r3, #128	; 0x80
 8007f5a:	d02a      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f5c:	2b80      	cmp	r3, #128	; 0x80
 8007f5e:	d825      	bhi.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007f60:	2b60      	cmp	r3, #96	; 0x60
 8007f62:	d026      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f64:	2b60      	cmp	r3, #96	; 0x60
 8007f66:	d821      	bhi.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007f68:	2b40      	cmp	r3, #64	; 0x40
 8007f6a:	d006      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d81d      	bhi.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d009      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d010      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007f78:	e018      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007f7a:	4b89      	ldr	r3, [pc, #548]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	4a88      	ldr	r2, [pc, #544]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f84:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f86:	e015      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f001 fa82 	bl	8009498 <RCCEx_PLLSAI1_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f98:	e00c      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3320      	adds	r3, #32
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fb6d 	bl	8009680 <RCCEx_PLLSAI2_Config>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007faa:	e003      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	74fb      	strb	r3, [r7, #19]
      break;
 8007fb0:	e000      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fb4:	7cfb      	ldrb	r3, [r7, #19]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10b      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fba:	4b79      	ldr	r3, [pc, #484]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fc0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	4975      	ldr	r1, [pc, #468]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007fd0:	e001      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd2:	7cfb      	ldrb	r3, [r7, #19]
 8007fd4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d047      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fea:	d030      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff0:	d82a      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ff6:	d02a      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ffc:	d824      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008002:	d008      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008008:	d81e      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800800e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008012:	d010      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008014:	e018      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008016:	4b62      	ldr	r3, [pc, #392]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	4a61      	ldr	r2, [pc, #388]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800801c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008020:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008022:	e015      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3304      	adds	r3, #4
 8008028:	2100      	movs	r1, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fa34 	bl	8009498 <RCCEx_PLLSAI1_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008034:	e00c      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3320      	adds	r3, #32
 800803a:	2100      	movs	r1, #0
 800803c:	4618      	mov	r0, r3
 800803e:	f001 fb1f 	bl	8009680 <RCCEx_PLLSAI2_Config>
 8008042:	4603      	mov	r3, r0
 8008044:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008046:	e003      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	74fb      	strb	r3, [r7, #19]
      break;
 800804c:	e000      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800804e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008050:	7cfb      	ldrb	r3, [r7, #19]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10b      	bne.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008056:	4b52      	ldr	r3, [pc, #328]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008058:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800805c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	494e      	ldr	r1, [pc, #312]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800806c:	e001      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806e:	7cfb      	ldrb	r3, [r7, #19]
 8008070:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 809f 	beq.w	80081be <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008080:	2300      	movs	r3, #0
 8008082:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008084:	4b46      	ldr	r3, [pc, #280]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008090:	2301      	movs	r3, #1
 8008092:	e000      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008094:	2300      	movs	r3, #0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00d      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800809a:	4b41      	ldr	r3, [pc, #260]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800809c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800809e:	4a40      	ldr	r2, [pc, #256]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a4:	6593      	str	r3, [r2, #88]	; 0x58
 80080a6:	4b3e      	ldr	r3, [pc, #248]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ae:	60bb      	str	r3, [r7, #8]
 80080b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080b2:	2301      	movs	r3, #1
 80080b4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080b6:	4b3b      	ldr	r3, [pc, #236]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a3a      	ldr	r2, [pc, #232]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80080bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080c2:	f7fb feb9 	bl	8003e38 <HAL_GetTick>
 80080c6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80080c8:	e009      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080ca:	f7fb feb5 	bl	8003e38 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d902      	bls.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	74fb      	strb	r3, [r7, #19]
        break;
 80080dc:	e005      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80080de:	4b31      	ldr	r3, [pc, #196]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0ef      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80080ea:	7cfb      	ldrb	r3, [r7, #19]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d15b      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080f0:	4b2b      	ldr	r3, [pc, #172]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080fa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d01f      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	429a      	cmp	r2, r3
 800810c:	d019      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800810e:	4b24      	ldr	r3, [pc, #144]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008118:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800811a:	4b21      	ldr	r3, [pc, #132]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800811c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008120:	4a1f      	ldr	r2, [pc, #124]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800812a:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800812c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008130:	4a1b      	ldr	r2, [pc, #108]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800813a:	4a19      	ldr	r2, [pc, #100]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b00      	cmp	r3, #0
 800814a:	d016      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814c:	f7fb fe74 	bl	8003e38 <HAL_GetTick>
 8008150:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008152:	e00b      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008154:	f7fb fe70 	bl	8003e38 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008162:	4293      	cmp	r3, r2
 8008164:	d902      	bls.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	74fb      	strb	r3, [r7, #19]
            break;
 800816a:	e006      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800816c:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800816e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0ec      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800817a:	7cfb      	ldrb	r3, [r7, #19]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10c      	bne.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008190:	4903      	ldr	r1, [pc, #12]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008198:	e008      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800819a:	7cfb      	ldrb	r3, [r7, #19]
 800819c:	74bb      	strb	r3, [r7, #18]
 800819e:	e005      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x274>
 80081a0:	40021000 	.word	0x40021000
 80081a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a8:	7cfb      	ldrb	r3, [r7, #19]
 80081aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081ac:	7c7b      	ldrb	r3, [r7, #17]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d105      	bne.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081b2:	4ba0      	ldr	r3, [pc, #640]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b6:	4a9f      	ldr	r2, [pc, #636]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081ca:	4b9a      	ldr	r3, [pc, #616]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d0:	f023 0203 	bic.w	r2, r3, #3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d8:	4996      	ldr	r1, [pc, #600]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081ec:	4b91      	ldr	r3, [pc, #580]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f2:	f023 020c 	bic.w	r2, r3, #12
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	498e      	ldr	r1, [pc, #568]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800820e:	4b89      	ldr	r3, [pc, #548]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008214:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821c:	4985      	ldr	r1, [pc, #532]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800821e:	4313      	orrs	r3, r2
 8008220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008230:	4b80      	ldr	r3, [pc, #512]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008236:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800823e:	497d      	ldr	r1, [pc, #500]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008240:	4313      	orrs	r3, r2
 8008242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008252:	4b78      	ldr	r3, [pc, #480]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008260:	4974      	ldr	r1, [pc, #464]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0320 	and.w	r3, r3, #32
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00a      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008274:	4b6f      	ldr	r3, [pc, #444]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008282:	496c      	ldr	r1, [pc, #432]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008284:	4313      	orrs	r3, r2
 8008286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008296:	4b67      	ldr	r3, [pc, #412]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082a4:	4963      	ldr	r1, [pc, #396]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80082b8:	4b5e      	ldr	r3, [pc, #376]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082c6:	495b      	ldr	r1, [pc, #364]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082da:	4b56      	ldr	r3, [pc, #344]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e8:	4952      	ldr	r1, [pc, #328]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082fc:	4b4d      	ldr	r3, [pc, #308]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008302:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830a:	494a      	ldr	r1, [pc, #296]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800830c:	4313      	orrs	r3, r2
 800830e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800831e:	4b45      	ldr	r3, [pc, #276]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832c:	4941      	ldr	r1, [pc, #260]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008340:	4b3c      	ldr	r3, [pc, #240]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008346:	f023 0203 	bic.w	r2, r3, #3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834e:	4939      	ldr	r1, [pc, #228]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008350:	4313      	orrs	r3, r2
 8008352:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d028      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008362:	4b34      	ldr	r3, [pc, #208]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008368:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008370:	4930      	ldr	r1, [pc, #192]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800837c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008380:	d106      	bne.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008382:	4b2c      	ldr	r3, [pc, #176]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	4a2b      	ldr	r2, [pc, #172]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800838c:	60d3      	str	r3, [r2, #12]
 800838e:	e011      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008398:	d10c      	bne.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3304      	adds	r3, #4
 800839e:	2101      	movs	r1, #1
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 f879 	bl	8009498 <RCCEx_PLLSAI1_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80083aa:	7cfb      	ldrb	r3, [r7, #19]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80083b0:	7cfb      	ldrb	r3, [r7, #19]
 80083b2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d04d      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c8:	d108      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80083ca:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083d0:	4a18      	ldr	r2, [pc, #96]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80083da:	e012      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80083dc:	4b15      	ldr	r3, [pc, #84]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083e2:	4a14      	ldr	r2, [pc, #80]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80083ec:	4b11      	ldr	r3, [pc, #68]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083fa:	490e      	ldr	r1, [pc, #56]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800840a:	d106      	bne.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800840c:	4b09      	ldr	r3, [pc, #36]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	4a08      	ldr	r2, [pc, #32]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008416:	60d3      	str	r3, [r2, #12]
 8008418:	e020      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800841e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008422:	d109      	bne.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008424:	4b03      	ldr	r3, [pc, #12]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	4a02      	ldr	r2, [pc, #8]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800842a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800842e:	60d3      	str	r3, [r2, #12]
 8008430:	e014      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008432:	bf00      	nop
 8008434:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800843c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008440:	d10c      	bne.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	3304      	adds	r3, #4
 8008446:	2101      	movs	r1, #1
 8008448:	4618      	mov	r0, r3
 800844a:	f001 f825 	bl	8009498 <RCCEx_PLLSAI1_Config>
 800844e:	4603      	mov	r3, r0
 8008450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008452:	7cfb      	ldrb	r3, [r7, #19]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008458:	7cfb      	ldrb	r3, [r7, #19]
 800845a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d028      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008468:	4b7a      	ldr	r3, [pc, #488]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800846a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008476:	4977      	ldr	r1, [pc, #476]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008478:	4313      	orrs	r3, r2
 800847a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008486:	d106      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008488:	4b72      	ldr	r3, [pc, #456]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	4a71      	ldr	r2, [pc, #452]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800848e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008492:	60d3      	str	r3, [r2, #12]
 8008494:	e011      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800849e:	d10c      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3304      	adds	r3, #4
 80084a4:	2101      	movs	r1, #1
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fff6 	bl	8009498 <RCCEx_PLLSAI1_Config>
 80084ac:	4603      	mov	r3, r0
 80084ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084b0:	7cfb      	ldrb	r3, [r7, #19]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80084b6:	7cfb      	ldrb	r3, [r7, #19]
 80084b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01e      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80084c6:	4b63      	ldr	r3, [pc, #396]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d6:	495f      	ldr	r1, [pc, #380]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084e8:	d10c      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3304      	adds	r3, #4
 80084ee:	2102      	movs	r1, #2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 ffd1 	bl	8009498 <RCCEx_PLLSAI1_Config>
 80084f6:	4603      	mov	r3, r0
 80084f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084fa:	7cfb      	ldrb	r3, [r7, #19]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008500:	7cfb      	ldrb	r3, [r7, #19]
 8008502:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008510:	4b50      	ldr	r3, [pc, #320]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008516:	f023 0204 	bic.w	r2, r3, #4
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008520:	494c      	ldr	r1, [pc, #304]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008522:	4313      	orrs	r3, r2
 8008524:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008534:	4b47      	ldr	r3, [pc, #284]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800853a:	f023 0218 	bic.w	r2, r3, #24
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008544:	4943      	ldr	r1, [pc, #268]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008546:	4313      	orrs	r3, r2
 8008548:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d035      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008558:	4b3e      	ldr	r3, [pc, #248]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a3d      	ldr	r2, [pc, #244]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800855e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008564:	f7fb fc68 	bl	8003e38 <HAL_GetTick>
 8008568:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800856a:	e009      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800856c:	f7fb fc64 	bl	8003e38 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b02      	cmp	r3, #2
 8008578:	d902      	bls.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	74fb      	strb	r3, [r7, #19]
        break;
 800857e:	e005      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008580:	4b34      	ldr	r3, [pc, #208]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1ef      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800858c:	7cfb      	ldrb	r3, [r7, #19]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d113      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8008592:	4b30      	ldr	r3, [pc, #192]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008594:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a2:	492c      	ldr	r1, [pc, #176]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3320      	adds	r3, #32
 80085ae:	2102      	movs	r1, #2
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 f865 	bl	8009680 <RCCEx_PLLSAI2_Config>
 80085b6:	4603      	mov	r3, r0
 80085b8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80085ba:	7cfb      	ldrb	r3, [r7, #19]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80085c0:	7cfb      	ldrb	r3, [r7, #19]
 80085c2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01e      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80085d0:	4b20      	ldr	r3, [pc, #128]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80085d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e0:	491c      	ldr	r1, [pc, #112]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f2:	d10c      	bne.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3320      	adds	r3, #32
 80085f8:	2101      	movs	r1, #1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 f840 	bl	8009680 <RCCEx_PLLSAI2_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008604:	7cfb      	ldrb	r3, [r7, #19]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800860a:	7cfb      	ldrb	r3, [r7, #19]
 800860c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d017      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800861a:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800861c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800862a:	490a      	ldr	r1, [pc, #40]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800862c:	4313      	orrs	r3, r2
 800862e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800863c:	d105      	bne.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800863e:	4b05      	ldr	r3, [pc, #20]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	4a04      	ldr	r2, [pc, #16]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008648:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800864a:	7cbb      	ldrb	r3, [r7, #18]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	40021000 	.word	0x40021000

08008658 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800866a:	d13e      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800866c:	4bb6      	ldr	r3, [pc, #728]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800866e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008676:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800867e:	d028      	beq.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008686:	f200 86f2 	bhi.w	800946e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008690:	d005      	beq.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008698:	d00e      	beq.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800869a:	f000 bee8 	b.w	800946e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800869e:	4baa      	ldr	r3, [pc, #680]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80086a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	f040 86e2 	bne.w	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 80086ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086b2:	61fb      	str	r3, [r7, #28]
      break;
 80086b4:	f000 bedd 	b.w	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80086b8:	4ba3      	ldr	r3, [pc, #652]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80086ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086be:	f003 0302 	and.w	r3, r3, #2
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	f040 86d7 	bne.w	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 80086c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80086cc:	61fb      	str	r3, [r7, #28]
      break;
 80086ce:	f000 bed2 	b.w	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086d2:	4b9d      	ldr	r3, [pc, #628]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086de:	f040 86cc 	bne.w	800947a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 80086e2:	4b9a      	ldr	r3, [pc, #616]	; (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80086e4:	61fb      	str	r3, [r7, #28]
      break;
 80086e6:	f000 bec8 	b.w	800947a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086ea:	4b97      	ldr	r3, [pc, #604]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d036      	beq.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d840      	bhi.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d003      	beq.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d020      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800870c:	e039      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800870e:	4b8e      	ldr	r3, [pc, #568]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b02      	cmp	r3, #2
 8008718:	d116      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800871a:	4b8b      	ldr	r3, [pc, #556]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008726:	4b88      	ldr	r3, [pc, #544]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	091b      	lsrs	r3, r3, #4
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	e005      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8008732:	4b85      	ldr	r3, [pc, #532]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008738:	0a1b      	lsrs	r3, r3, #8
 800873a:	f003 030f 	and.w	r3, r3, #15
 800873e:	4a84      	ldr	r2, [pc, #528]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008744:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008746:	e01f      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	61bb      	str	r3, [r7, #24]
      break;
 800874c:	e01c      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800874e:	4b7e      	ldr	r3, [pc, #504]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800875a:	d102      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800875c:	4b7d      	ldr	r3, [pc, #500]	; (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800875e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008760:	e012      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	61bb      	str	r3, [r7, #24]
      break;
 8008766:	e00f      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008768:	4b77      	ldr	r3, [pc, #476]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008774:	d102      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8008776:	4b77      	ldr	r3, [pc, #476]	; (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008778:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800877a:	e005      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	61bb      	str	r3, [r7, #24]
      break;
 8008780:	e002      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	61bb      	str	r3, [r7, #24]
      break;
 8008786:	bf00      	nop
    }

    switch(PeriphClk)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800878e:	f000 8604 	beq.w	800939a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008798:	f200 8671 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087a2:	f000 8467 	beq.w	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087ac:	f200 8667 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087b6:	f000 852f 	beq.w	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c0:	f200 865d 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087ca:	f000 8185 	beq.w	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087d4:	f200 8653 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087de:	f000 80cb 	beq.w	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087e8:	f200 8649 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f2:	f000 842e 	beq.w	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087fc:	f200 863f 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008806:	f000 83e2 	beq.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008810:	f200 8635 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800881a:	f000 80ad 	beq.w	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008824:	f200 862b 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800882e:	f000 809b 	beq.w	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008838:	f200 8621 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008842:	f000 8089 	beq.w	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800884c:	f200 8617 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008856:	f000 8552 	beq.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008860:	f200 860d 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800886a:	f000 84fe 	beq.w	800926a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008874:	f200 8603 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800887e:	f000 849f 	beq.w	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008888:	f200 85f9 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b80      	cmp	r3, #128	; 0x80
 8008890:	f000 846a 	beq.w	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b80      	cmp	r3, #128	; 0x80
 8008898:	f200 85f1 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d84c      	bhi.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 85ea 	beq.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	2b1f      	cmp	r3, #31
 80088b0:	f200 85e5 	bhi.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80088b4:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	08008ccd 	.word	0x08008ccd
 80088c0:	08008d3b 	.word	0x08008d3b
 80088c4:	0800947f 	.word	0x0800947f
 80088c8:	08008dcf 	.word	0x08008dcf
 80088cc:	0800947f 	.word	0x0800947f
 80088d0:	0800947f 	.word	0x0800947f
 80088d4:	0800947f 	.word	0x0800947f
 80088d8:	08008e47 	.word	0x08008e47
 80088dc:	0800947f 	.word	0x0800947f
 80088e0:	0800947f 	.word	0x0800947f
 80088e4:	0800947f 	.word	0x0800947f
 80088e8:	0800947f 	.word	0x0800947f
 80088ec:	0800947f 	.word	0x0800947f
 80088f0:	0800947f 	.word	0x0800947f
 80088f4:	0800947f 	.word	0x0800947f
 80088f8:	08008ecb 	.word	0x08008ecb
 80088fc:	0800947f 	.word	0x0800947f
 8008900:	0800947f 	.word	0x0800947f
 8008904:	0800947f 	.word	0x0800947f
 8008908:	0800947f 	.word	0x0800947f
 800890c:	0800947f 	.word	0x0800947f
 8008910:	0800947f 	.word	0x0800947f
 8008914:	0800947f 	.word	0x0800947f
 8008918:	0800947f 	.word	0x0800947f
 800891c:	0800947f 	.word	0x0800947f
 8008920:	0800947f 	.word	0x0800947f
 8008924:	0800947f 	.word	0x0800947f
 8008928:	0800947f 	.word	0x0800947f
 800892c:	0800947f 	.word	0x0800947f
 8008930:	0800947f 	.word	0x0800947f
 8008934:	0800947f 	.word	0x0800947f
 8008938:	08008f4d 	.word	0x08008f4d
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b40      	cmp	r3, #64	; 0x40
 8008940:	f000 83e6 	beq.w	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008944:	f000 bd9b 	b.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8008948:	40021000 	.word	0x40021000
 800894c:	0007a120 	.word	0x0007a120
 8008950:	080175a0 	.word	0x080175a0
 8008954:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008958:	69b9      	ldr	r1, [r7, #24]
 800895a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800895e:	f000 ff83 	bl	8009868 <RCCEx_GetSAIxPeriphCLKFreq>
 8008962:	61f8      	str	r0, [r7, #28]
      break;
 8008964:	f000 bd8e 	b.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008968:	69b9      	ldr	r1, [r7, #24]
 800896a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800896e:	f000 ff7b 	bl	8009868 <RCCEx_GetSAIxPeriphCLKFreq>
 8008972:	61f8      	str	r0, [r7, #28]
      break;
 8008974:	f000 bd86 	b.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008978:	4b9a      	ldr	r3, [pc, #616]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800897a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800897e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800898a:	d015      	beq.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008992:	f200 8092 	bhi.w	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800899c:	d029      	beq.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089a4:	f200 8089 	bhi.w	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d07b      	beq.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089b4:	d04a      	beq.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 80089b6:	e080      	b.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80089b8:	4b8a      	ldr	r3, [pc, #552]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0302 	and.w	r3, r3, #2
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d17d      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80089c4:	4b87      	ldr	r3, [pc, #540]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0308 	and.w	r3, r3, #8
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80089d0:	4b84      	ldr	r3, [pc, #528]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	091b      	lsrs	r3, r3, #4
 80089d6:	f003 030f 	and.w	r3, r3, #15
 80089da:	e005      	b.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80089dc:	4b81      	ldr	r3, [pc, #516]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	f003 030f 	and.w	r3, r3, #15
 80089e8:	4a7f      	ldr	r2, [pc, #508]	; (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80089ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ee:	61fb      	str	r3, [r7, #28]
          break;
 80089f0:	e066      	b.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80089f2:	4b7c      	ldr	r3, [pc, #496]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089fe:	d162      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008a00:	4b78      	ldr	r3, [pc, #480]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a0c:	d15b      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008a0e:	4b75      	ldr	r3, [pc, #468]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a18:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	fb03 f202 	mul.w	r2, r3, r2
 8008a22:	4b70      	ldr	r3, [pc, #448]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	091b      	lsrs	r3, r3, #4
 8008a28:	f003 030f 	and.w	r3, r3, #15
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a32:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008a34:	4b6b      	ldr	r3, [pc, #428]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	0d5b      	lsrs	r3, r3, #21
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	3301      	adds	r3, #1
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a48:	61fb      	str	r3, [r7, #28]
          break;
 8008a4a:	e03c      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008a4c:	4b65      	ldr	r3, [pc, #404]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a58:	d138      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008a5a:	4b62      	ldr	r3, [pc, #392]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a66:	d131      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008a68:	4b5e      	ldr	r3, [pc, #376]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	0a1b      	lsrs	r3, r3, #8
 8008a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a72:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	fb03 f202 	mul.w	r2, r3, r2
 8008a7c:	4b59      	ldr	r3, [pc, #356]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	091b      	lsrs	r3, r3, #4
 8008a82:	f003 030f 	and.w	r3, r3, #15
 8008a86:	3301      	adds	r3, #1
 8008a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008a8e:	4b55      	ldr	r3, [pc, #340]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	0d5b      	lsrs	r3, r3, #21
 8008a94:	f003 0303 	and.w	r3, r3, #3
 8008a98:	3301      	adds	r3, #1
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa2:	61fb      	str	r3, [r7, #28]
          break;
 8008aa4:	e012      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008aa6:	4b4f      	ldr	r3, [pc, #316]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008aac:	f003 0302 	and.w	r3, r3, #2
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d10e      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8008ab4:	4b4d      	ldr	r3, [pc, #308]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008ab6:	61fb      	str	r3, [r7, #28]
          break;
 8008ab8:	e00b      	b.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8008aba:	bf00      	nop
 8008abc:	f000 bce2 	b.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008ac0:	bf00      	nop
 8008ac2:	f000 bcdf 	b.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008ac6:	bf00      	nop
 8008ac8:	f000 bcdc 	b.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008acc:	bf00      	nop
 8008ace:	f000 bcd9 	b.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008ad2:	bf00      	nop
        break;
 8008ad4:	f000 bcd6 	b.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8008ad8:	4b42      	ldr	r3, [pc, #264]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ae6:	d13d      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008ae8:	4b3e      	ldr	r3, [pc, #248]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008af4:	f040 84c5 	bne.w	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8008af8:	4b3a      	ldr	r3, [pc, #232]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b04:	f040 84bd 	bne.w	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008b08:	4b36      	ldr	r3, [pc, #216]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	0a1b      	lsrs	r3, r3, #8
 8008b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b12:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	fb03 f202 	mul.w	r2, r3, r2
 8008b1c:	4b31      	ldr	r3, [pc, #196]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	091b      	lsrs	r3, r3, #4
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	3301      	adds	r3, #1
 8008b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008b2e:	4b2d      	ldr	r3, [pc, #180]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	0edb      	lsrs	r3, r3, #27
 8008b34:	f003 031f 	and.w	r3, r3, #31
 8008b38:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10a      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008b40:	4b28      	ldr	r3, [pc, #160]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8008b4c:	2311      	movs	r3, #17
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	e001      	b.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8008b52:	2307      	movs	r3, #7
 8008b54:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5e:	61fb      	str	r3, [r7, #28]
      break;
 8008b60:	f000 bc8f 	b.w	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008b64:	4b1f      	ldr	r3, [pc, #124]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008b76:	d016      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008b7e:	f200 809b 	bhi.w	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b88:	d032      	beq.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b90:	f200 8092 	bhi.w	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 8084 	beq.w	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ba2:	d052      	beq.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8008ba4:	e088      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008ba6:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	f040 8084 	bne.w	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0308 	and.w	r3, r3, #8
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8008bc0:	4b08      	ldr	r3, [pc, #32]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	091b      	lsrs	r3, r3, #4
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	e005      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8008bcc:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	4a03      	ldr	r2, [pc, #12]	; (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bde:	61fb      	str	r3, [r7, #28]
          break;
 8008be0:	e06c      	b.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008be2:	bf00      	nop
 8008be4:	40021000 	.word	0x40021000
 8008be8:	080175a0 	.word	0x080175a0
 8008bec:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008bf0:	4ba5      	ldr	r3, [pc, #660]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bfc:	d160      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008bfe:	4ba2      	ldr	r3, [pc, #648]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c0a:	d159      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008c0c:	4b9e      	ldr	r3, [pc, #632]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	0a1b      	lsrs	r3, r3, #8
 8008c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c16:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	fb03 f202 	mul.w	r2, r3, r2
 8008c20:	4b99      	ldr	r3, [pc, #612]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	091b      	lsrs	r3, r3, #4
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c30:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008c32:	4b95      	ldr	r3, [pc, #596]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	0d5b      	lsrs	r3, r3, #21
 8008c38:	f003 0303 	and.w	r3, r3, #3
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c46:	61fb      	str	r3, [r7, #28]
          break;
 8008c48:	e03a      	b.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008c4a:	4b8f      	ldr	r3, [pc, #572]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c56:	d135      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008c58:	4b8b      	ldr	r3, [pc, #556]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c64:	d12e      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008c66:	4b88      	ldr	r3, [pc, #544]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c70:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	fb03 f202 	mul.w	r2, r3, r2
 8008c7a:	4b83      	ldr	r3, [pc, #524]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	091b      	lsrs	r3, r3, #4
 8008c80:	f003 030f 	and.w	r3, r3, #15
 8008c84:	3301      	adds	r3, #1
 8008c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008c8c:	4b7e      	ldr	r3, [pc, #504]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	0d5b      	lsrs	r3, r3, #21
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	3301      	adds	r3, #1
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca0:	61fb      	str	r3, [r7, #28]
          break;
 8008ca2:	e00f      	b.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008ca4:	4b78      	ldr	r3, [pc, #480]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d10a      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8008cb2:	4b76      	ldr	r3, [pc, #472]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008cb4:	61fb      	str	r3, [r7, #28]
          break;
 8008cb6:	e007      	b.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8008cb8:	bf00      	nop
 8008cba:	e3e2      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8008cbc:	bf00      	nop
 8008cbe:	e3e0      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8008cc0:	bf00      	nop
 8008cc2:	e3de      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8008cc4:	bf00      	nop
 8008cc6:	e3dc      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8008cc8:	bf00      	nop
      break;
 8008cca:	e3da      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008ccc:	4b6e      	ldr	r3, [pc, #440]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d827      	bhi.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8008cde:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008cf5 	.word	0x08008cf5
 8008ce8:	08008cfd 	.word	0x08008cfd
 8008cec:	08008d05 	.word	0x08008d05
 8008cf0:	08008d19 	.word	0x08008d19
          frequency = HAL_RCC_GetPCLK2Freq();
 8008cf4:	f7ff f84c 	bl	8007d90 <HAL_RCC_GetPCLK2Freq>
 8008cf8:	61f8      	str	r0, [r7, #28]
          break;
 8008cfa:	e01d      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cfc:	f7fe ff9c 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8008d00:	61f8      	str	r0, [r7, #28]
          break;
 8008d02:	e019      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d04:	4b60      	ldr	r3, [pc, #384]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d10:	d10f      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8008d12:	4b5f      	ldr	r3, [pc, #380]	; (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008d14:	61fb      	str	r3, [r7, #28]
          break;
 8008d16:	e00c      	b.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d18:	4b5b      	ldr	r3, [pc, #364]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d107      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8008d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d2a:	61fb      	str	r3, [r7, #28]
          break;
 8008d2c:	e003      	b.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8008d2e:	bf00      	nop
 8008d30:	e3a8      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008d32:	bf00      	nop
 8008d34:	e3a6      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008d36:	bf00      	nop
        break;
 8008d38:	e3a4      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008d3a:	4b53      	ldr	r3, [pc, #332]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d40:	f003 030c 	and.w	r3, r3, #12
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b0c      	cmp	r3, #12
 8008d4a:	d83a      	bhi.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d89 	.word	0x08008d89
 8008d58:	08008dc3 	.word	0x08008dc3
 8008d5c:	08008dc3 	.word	0x08008dc3
 8008d60:	08008dc3 	.word	0x08008dc3
 8008d64:	08008d91 	.word	0x08008d91
 8008d68:	08008dc3 	.word	0x08008dc3
 8008d6c:	08008dc3 	.word	0x08008dc3
 8008d70:	08008dc3 	.word	0x08008dc3
 8008d74:	08008d99 	.word	0x08008d99
 8008d78:	08008dc3 	.word	0x08008dc3
 8008d7c:	08008dc3 	.word	0x08008dc3
 8008d80:	08008dc3 	.word	0x08008dc3
 8008d84:	08008dad 	.word	0x08008dad
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d88:	f7fe ffec 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 8008d8c:	61f8      	str	r0, [r7, #28]
          break;
 8008d8e:	e01d      	b.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d90:	f7fe ff52 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8008d94:	61f8      	str	r0, [r7, #28]
          break;
 8008d96:	e019      	b.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d98:	4b3b      	ldr	r3, [pc, #236]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008da4:	d10f      	bne.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8008da6:	4b3a      	ldr	r3, [pc, #232]	; (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008da8:	61fb      	str	r3, [r7, #28]
          break;
 8008daa:	e00c      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008dac:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d107      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8008dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dbe:	61fb      	str	r3, [r7, #28]
          break;
 8008dc0:	e003      	b.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8008dc2:	bf00      	nop
 8008dc4:	e35e      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008dc6:	bf00      	nop
 8008dc8:	e35c      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008dca:	bf00      	nop
        break;
 8008dcc:	e35a      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008dce:	4b2e      	ldr	r3, [pc, #184]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b30      	cmp	r3, #48	; 0x30
 8008dde:	d021      	beq.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b30      	cmp	r3, #48	; 0x30
 8008de4:	d829      	bhi.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	d011      	beq.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b20      	cmp	r3, #32
 8008df0:	d823      	bhi.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d003      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d004      	beq.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8008dfe:	e01c      	b.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e00:	f7fe ffb0 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 8008e04:	61f8      	str	r0, [r7, #28]
          break;
 8008e06:	e01d      	b.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e08:	f7fe ff16 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8008e0c:	61f8      	str	r0, [r7, #28]
          break;
 8008e0e:	e019      	b.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e10:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e1c:	d10f      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8008e1e:	4b1c      	ldr	r3, [pc, #112]	; (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008e20:	61fb      	str	r3, [r7, #28]
          break;
 8008e22:	e00c      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e24:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d107      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8008e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e36:	61fb      	str	r3, [r7, #28]
          break;
 8008e38:	e003      	b.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8008e3a:	bf00      	nop
 8008e3c:	e322      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008e3e:	bf00      	nop
 8008e40:	e320      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008e42:	bf00      	nop
        break;
 8008e44:	e31e      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2bc0      	cmp	r3, #192	; 0xc0
 8008e56:	d027      	beq.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8008e5c:	d82f      	bhi.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b80      	cmp	r3, #128	; 0x80
 8008e62:	d017      	beq.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b80      	cmp	r3, #128	; 0x80
 8008e68:	d829      	bhi.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b40      	cmp	r3, #64	; 0x40
 8008e74:	d004      	beq.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8008e76:	e022      	b.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e78:	f7fe ff74 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 8008e7c:	61f8      	str	r0, [r7, #28]
          break;
 8008e7e:	e023      	b.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e80:	f7fe feda 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8008e84:	61f8      	str	r0, [r7, #28]
          break;
 8008e86:	e01f      	b.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8008e88:	40021000 	.word	0x40021000
 8008e8c:	02dc6c00 	.word	0x02dc6c00
 8008e90:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e94:	4b9b      	ldr	r3, [pc, #620]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea0:	d10f      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8008ea2:	4b99      	ldr	r3, [pc, #612]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008ea4:	61fb      	str	r3, [r7, #28]
          break;
 8008ea6:	e00c      	b.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ea8:	4b96      	ldr	r3, [pc, #600]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d107      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8008eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eba:	61fb      	str	r3, [r7, #28]
          break;
 8008ebc:	e003      	b.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8008ebe:	bf00      	nop
 8008ec0:	e2e0      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008ec2:	bf00      	nop
 8008ec4:	e2de      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008ec6:	bf00      	nop
        break;
 8008ec8:	e2dc      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008eca:	4b8e      	ldr	r3, [pc, #568]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ed4:	60fb      	str	r3, [r7, #12]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008edc:	d025      	beq.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ee4:	d82c      	bhi.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eec:	d013      	beq.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ef4:	d824      	bhi.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f02:	d004      	beq.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8008f04:	e01c      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f06:	f7fe ff2d 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 8008f0a:	61f8      	str	r0, [r7, #28]
          break;
 8008f0c:	e01d      	b.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f0e:	f7fe fe93 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8008f12:	61f8      	str	r0, [r7, #28]
          break;
 8008f14:	e019      	b.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f16:	4b7b      	ldr	r3, [pc, #492]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f22:	d10f      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8008f24:	4b78      	ldr	r3, [pc, #480]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008f26:	61fb      	str	r3, [r7, #28]
          break;
 8008f28:	e00c      	b.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f2a:	4b76      	ldr	r3, [pc, #472]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d107      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8008f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f3c:	61fb      	str	r3, [r7, #28]
          break;
 8008f3e:	e003      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8008f40:	bf00      	nop
 8008f42:	e29f      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008f44:	bf00      	nop
 8008f46:	e29d      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008f48:	bf00      	nop
        break;
 8008f4a:	e29b      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008f4c:	4b6d      	ldr	r3, [pc, #436]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f5e:	d025      	beq.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f66:	d82c      	bhi.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f6e:	d013      	beq.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f76:	d824      	bhi.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d004      	beq.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f84:	d004      	beq.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8008f86:	e01c      	b.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f88:	f7fe feec 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 8008f8c:	61f8      	str	r0, [r7, #28]
          break;
 8008f8e:	e01d      	b.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f90:	f7fe fe52 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8008f94:	61f8      	str	r0, [r7, #28]
          break;
 8008f96:	e019      	b.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f98:	4b5a      	ldr	r3, [pc, #360]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa4:	d10f      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8008fa6:	4b58      	ldr	r3, [pc, #352]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008fa8:	61fb      	str	r3, [r7, #28]
          break;
 8008faa:	e00c      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008fac:	4b55      	ldr	r3, [pc, #340]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d107      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8008fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fbe:	61fb      	str	r3, [r7, #28]
          break;
 8008fc0:	e003      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8008fc2:	bf00      	nop
 8008fc4:	e25e      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008fc6:	bf00      	nop
 8008fc8:	e25c      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008fca:	bf00      	nop
        break;
 8008fcc:	e25a      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008fce:	4b4d      	ldr	r3, [pc, #308]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fe0:	d007      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fe8:	d12f      	bne.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8008fea:	f7fe fe25 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8008fee:	61f8      	str	r0, [r7, #28]
          break;
 8008ff0:	e02e      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008ff2:	4b44      	ldr	r3, [pc, #272]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ffe:	d126      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8009000:	4b40      	ldr	r3, [pc, #256]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d020      	beq.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800900c:	4b3d      	ldr	r3, [pc, #244]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	0a1b      	lsrs	r3, r3, #8
 8009012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009016:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	fb03 f202 	mul.w	r2, r3, r2
 8009020:	4b38      	ldr	r3, [pc, #224]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	091b      	lsrs	r3, r3, #4
 8009026:	f003 030f 	and.w	r3, r3, #15
 800902a:	3301      	adds	r3, #1
 800902c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009030:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8009032:	4b34      	ldr	r3, [pc, #208]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	0e5b      	lsrs	r3, r3, #25
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	3301      	adds	r3, #1
 800903e:	005b      	lsls	r3, r3, #1
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	fbb2 f3f3 	udiv	r3, r2, r3
 8009046:	61fb      	str	r3, [r7, #28]
          break;
 8009048:	e001      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800904a:	bf00      	nop
 800904c:	e21a      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800904e:	bf00      	nop
        break;
 8009050:	e218      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8009052:	4b2c      	ldr	r3, [pc, #176]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8009054:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d103      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8009064:	f7fe fe94 	bl	8007d90 <HAL_RCC_GetPCLK2Freq>
 8009068:	61f8      	str	r0, [r7, #28]
        break;
 800906a:	e20b      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 800906c:	f7fe fde4 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8009070:	61f8      	str	r0, [r7, #28]
        break;
 8009072:	e207      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8009074:	4b23      	ldr	r3, [pc, #140]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8009076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800907a:	f003 0318 	and.w	r3, r3, #24
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b10      	cmp	r3, #16
 8009084:	d010      	beq.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b10      	cmp	r3, #16
 800908a:	d834      	bhi.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d024      	beq.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8009098:	e02d      	b.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800909a:	69b9      	ldr	r1, [r7, #24]
 800909c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80090a0:	f000 fbe2 	bl	8009868 <RCCEx_GetSAIxPeriphCLKFreq>
 80090a4:	61f8      	str	r0, [r7, #28]
          break;
 80090a6:	e02b      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80090a8:	4b16      	ldr	r3, [pc, #88]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0302 	and.w	r3, r3, #2
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d122      	bne.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80090b4:	4b13      	ldr	r3, [pc, #76]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0308 	and.w	r3, r3, #8
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80090c0:	4b10      	ldr	r3, [pc, #64]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	091b      	lsrs	r3, r3, #4
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	e005      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80090cc:	4b0d      	ldr	r3, [pc, #52]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80090ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090d2:	0a1b      	lsrs	r3, r3, #8
 80090d4:	f003 030f 	and.w	r3, r3, #15
 80090d8:	4a0c      	ldr	r2, [pc, #48]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80090da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090de:	61fb      	str	r3, [r7, #28]
          break;
 80090e0:	e00b      	b.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090e2:	4b08      	ldr	r3, [pc, #32]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ee:	d106      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80090f0:	4b05      	ldr	r3, [pc, #20]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80090f2:	61fb      	str	r3, [r7, #28]
          break;
 80090f4:	e003      	b.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80090f6:	bf00      	nop
 80090f8:	e1c4      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80090fa:	bf00      	nop
 80090fc:	e1c2      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80090fe:	bf00      	nop
        break;
 8009100:	e1c0      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8009102:	bf00      	nop
 8009104:	40021000 	.word	0x40021000
 8009108:	00f42400 	.word	0x00f42400
 800910c:	080175a0 	.word	0x080175a0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009110:	4b96      	ldr	r3, [pc, #600]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009116:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009122:	d013      	beq.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800912a:	d819      	bhi.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009138:	d004      	beq.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 800913a:	e011      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 800913c:	f7fe fe12 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 8009140:	61f8      	str	r0, [r7, #28]
          break;
 8009142:	e010      	b.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8009144:	f7fe fd78 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8009148:	61f8      	str	r0, [r7, #28]
          break;
 800914a:	e00c      	b.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800914c:	4b87      	ldr	r3, [pc, #540]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009158:	d104      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 800915a:	4b85      	ldr	r3, [pc, #532]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800915c:	61fb      	str	r3, [r7, #28]
          break;
 800915e:	e001      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8009160:	bf00      	nop
 8009162:	e18f      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8009164:	bf00      	nop
        break;
 8009166:	e18d      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009168:	4b80      	ldr	r3, [pc, #512]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800916a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800917a:	d013      	beq.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009182:	d819      	bhi.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d004      	beq.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009190:	d004      	beq.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8009192:	e011      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009194:	f7fe fde6 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 8009198:	61f8      	str	r0, [r7, #28]
          break;
 800919a:	e010      	b.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 800919c:	f7fe fd4c 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 80091a0:	61f8      	str	r0, [r7, #28]
          break;
 80091a2:	e00c      	b.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091a4:	4b71      	ldr	r3, [pc, #452]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b0:	d104      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80091b2:	4b6f      	ldr	r3, [pc, #444]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80091b4:	61fb      	str	r3, [r7, #28]
          break;
 80091b6:	e001      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80091b8:	bf00      	nop
 80091ba:	e163      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80091bc:	bf00      	nop
        break;
 80091be:	e161      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80091c0:	4b6a      	ldr	r3, [pc, #424]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80091c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091d2:	d013      	beq.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091da:	d819      	bhi.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d004      	beq.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e8:	d004      	beq.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80091ea:	e011      	b.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091ec:	f7fe fdba 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 80091f0:	61f8      	str	r0, [r7, #28]
          break;
 80091f2:	e010      	b.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80091f4:	f7fe fd20 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 80091f8:	61f8      	str	r0, [r7, #28]
          break;
 80091fa:	e00c      	b.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091fc:	4b5b      	ldr	r3, [pc, #364]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009208:	d104      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800920a:	4b59      	ldr	r3, [pc, #356]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800920c:	61fb      	str	r3, [r7, #28]
          break;
 800920e:	e001      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8009210:	bf00      	nop
 8009212:	e137      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8009214:	bf00      	nop
        break;
 8009216:	e135      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009218:	4b54      	ldr	r3, [pc, #336]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800921a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d011      	beq.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b02      	cmp	r3, #2
 800922e:	d818      	bhi.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d004      	beq.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 800923c:	e011      	b.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800923e:	f7fe fd91 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 8009242:	61f8      	str	r0, [r7, #28]
          break;
 8009244:	e010      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8009246:	f7fe fcf7 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 800924a:	61f8      	str	r0, [r7, #28]
          break;
 800924c:	e00c      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800924e:	4b47      	ldr	r3, [pc, #284]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800925a:	d104      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 800925c:	4b44      	ldr	r3, [pc, #272]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800925e:	61fb      	str	r3, [r7, #28]
          break;
 8009260:	e001      	b.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8009262:	bf00      	nop
 8009264:	e10e      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8009266:	bf00      	nop
        break;
 8009268:	e10c      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800926a:	4b40      	ldr	r3, [pc, #256]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800926c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009270:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800927c:	d02c      	beq.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009284:	d833      	bhi.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800928c:	d01a      	beq.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009294:	d82b      	bhi.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d004      	beq.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092a2:	d004      	beq.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80092a4:	e023      	b.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80092a6:	f7fe fd5d 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 80092aa:	61f8      	str	r0, [r7, #28]
          break;
 80092ac:	e026      	b.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80092ae:	4b2f      	ldr	r3, [pc, #188]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80092b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d11a      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80092bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80092c0:	61fb      	str	r3, [r7, #28]
          break;
 80092c2:	e016      	b.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092c4:	4b29      	ldr	r3, [pc, #164]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d0:	d111      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 80092d2:	4b27      	ldr	r3, [pc, #156]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80092d4:	61fb      	str	r3, [r7, #28]
          break;
 80092d6:	e00e      	b.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80092d8:	4b24      	ldr	r3, [pc, #144]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80092da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d109      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80092e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ea:	61fb      	str	r3, [r7, #28]
          break;
 80092ec:	e005      	b.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80092ee:	bf00      	nop
 80092f0:	e0c8      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80092f2:	bf00      	nop
 80092f4:	e0c6      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80092f6:	bf00      	nop
 80092f8:	e0c4      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80092fa:	bf00      	nop
        break;
 80092fc:	e0c2      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80092fe:	4b1b      	ldr	r3, [pc, #108]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8009300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009304:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009308:	60fb      	str	r3, [r7, #12]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009310:	d030      	beq.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009318:	d837      	bhi.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009320:	d01a      	beq.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009328:	d82f      	bhi.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d004      	beq.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009336:	d004      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8009338:	e027      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 800933a:	f7fe fd13 	bl	8007d64 <HAL_RCC_GetPCLK1Freq>
 800933e:	61f8      	str	r0, [r7, #28]
          break;
 8009340:	e02a      	b.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009342:	4b0a      	ldr	r3, [pc, #40]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8009344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b02      	cmp	r3, #2
 800934e:	d11e      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8009350:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009354:	61fb      	str	r3, [r7, #28]
          break;
 8009356:	e01a      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009358:	4b04      	ldr	r3, [pc, #16]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009364:	d115      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8009366:	4b02      	ldr	r3, [pc, #8]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009368:	61fb      	str	r3, [r7, #28]
          break;
 800936a:	e012      	b.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800936c:	40021000 	.word	0x40021000
 8009370:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009374:	4b46      	ldr	r3, [pc, #280]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8009376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b02      	cmp	r3, #2
 8009380:	d109      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8009382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009386:	61fb      	str	r3, [r7, #28]
          break;
 8009388:	e005      	b.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 800938a:	bf00      	nop
 800938c:	e07a      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800938e:	bf00      	nop
 8009390:	e078      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8009392:	bf00      	nop
 8009394:	e076      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8009396:	bf00      	nop
        break;
 8009398:	e074      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800939a:	4b3d      	ldr	r3, [pc, #244]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800939c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80093a4:	60fb      	str	r3, [r7, #12]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093ac:	d02c      	beq.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093b4:	d855      	bhi.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093c2:	d004      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80093c4:	e04d      	b.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80093c6:	f7fe fc37 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 80093ca:	61f8      	str	r0, [r7, #28]
          break;
 80093cc:	e04e      	b.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80093ce:	4b30      	ldr	r3, [pc, #192]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d145      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80093da:	4b2d      	ldr	r3, [pc, #180]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0308 	and.w	r3, r3, #8
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d005      	beq.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80093e6:	4b2a      	ldr	r3, [pc, #168]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	091b      	lsrs	r3, r3, #4
 80093ec:	f003 030f 	and.w	r3, r3, #15
 80093f0:	e005      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80093f2:	4b27      	ldr	r3, [pc, #156]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80093f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093f8:	0a1b      	lsrs	r3, r3, #8
 80093fa:	f003 030f 	and.w	r3, r3, #15
 80093fe:	4a25      	ldr	r2, [pc, #148]	; (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009404:	61fb      	str	r3, [r7, #28]
          break;
 8009406:	e02e      	b.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009408:	4b21      	ldr	r3, [pc, #132]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009414:	d129      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009416:	4b1e      	ldr	r3, [pc, #120]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800941e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009422:	d122      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009424:	4b1a      	ldr	r3, [pc, #104]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	0a1b      	lsrs	r3, r3, #8
 800942a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	fb03 f202 	mul.w	r2, r3, r2
 8009438:	4b15      	ldr	r3, [pc, #84]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	091b      	lsrs	r3, r3, #4
 800943e:	f003 030f 	and.w	r3, r3, #15
 8009442:	3301      	adds	r3, #1
 8009444:	fbb2 f3f3 	udiv	r3, r2, r3
 8009448:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800944a:	4b11      	ldr	r3, [pc, #68]	; (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	0d5b      	lsrs	r3, r3, #21
 8009450:	f003 0303 	and.w	r3, r3, #3
 8009454:	3301      	adds	r3, #1
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	fbb2 f3f3 	udiv	r3, r2, r3
 800945e:	61fb      	str	r3, [r7, #28]
          break;
 8009460:	e003      	b.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8009462:	bf00      	nop
 8009464:	e00e      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8009466:	bf00      	nop
 8009468:	e00c      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800946a:	bf00      	nop
        break;
 800946c:	e00a      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800946e:	bf00      	nop
 8009470:	e008      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8009472:	bf00      	nop
 8009474:	e006      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8009476:	bf00      	nop
 8009478:	e004      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800947a:	bf00      	nop
 800947c:	e002      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800947e:	bf00      	nop
 8009480:	e000      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8009482:	bf00      	nop
    }
  }

  return(frequency);
 8009484:	69fb      	ldr	r3, [r7, #28]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3720      	adds	r7, #32
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	40021000 	.word	0x40021000
 8009494:	080175a0 	.word	0x080175a0

08009498 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80094a6:	4b72      	ldr	r3, [pc, #456]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00e      	beq.n	80094d0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80094b2:	4b6f      	ldr	r3, [pc, #444]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	f003 0203 	and.w	r2, r3, #3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d103      	bne.n	80094ca <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
       ||
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d142      	bne.n	8009550 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	73fb      	strb	r3, [r7, #15]
 80094ce:	e03f      	b.n	8009550 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d018      	beq.n	800950a <RCCEx_PLLSAI1_Config+0x72>
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d825      	bhi.n	8009528 <RCCEx_PLLSAI1_Config+0x90>
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d002      	beq.n	80094e6 <RCCEx_PLLSAI1_Config+0x4e>
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d009      	beq.n	80094f8 <RCCEx_PLLSAI1_Config+0x60>
 80094e4:	e020      	b.n	8009528 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80094e6:	4b62      	ldr	r3, [pc, #392]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d11d      	bne.n	800952e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094f6:	e01a      	b.n	800952e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80094f8:	4b5d      	ldr	r3, [pc, #372]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009500:	2b00      	cmp	r3, #0
 8009502:	d116      	bne.n	8009532 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009508:	e013      	b.n	8009532 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800950a:	4b59      	ldr	r3, [pc, #356]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10f      	bne.n	8009536 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009516:	4b56      	ldr	r3, [pc, #344]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d109      	bne.n	8009536 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009526:	e006      	b.n	8009536 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	73fb      	strb	r3, [r7, #15]
      break;
 800952c:	e004      	b.n	8009538 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800952e:	bf00      	nop
 8009530:	e002      	b.n	8009538 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009532:	bf00      	nop
 8009534:	e000      	b.n	8009538 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009536:	bf00      	nop
    }

    if(status == HAL_OK)
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d108      	bne.n	8009550 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800953e:	4b4c      	ldr	r3, [pc, #304]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f023 0203 	bic.w	r2, r3, #3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4949      	ldr	r1, [pc, #292]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 800954c:	4313      	orrs	r3, r2
 800954e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f040 8086 	bne.w	8009664 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009558:	4b45      	ldr	r3, [pc, #276]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a44      	ldr	r2, [pc, #272]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 800955e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009564:	f7fa fc68 	bl	8003e38 <HAL_GetTick>
 8009568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800956a:	e009      	b.n	8009580 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800956c:	f7fa fc64 	bl	8003e38 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b02      	cmp	r3, #2
 8009578:	d902      	bls.n	8009580 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	73fb      	strb	r3, [r7, #15]
        break;
 800957e:	e005      	b.n	800958c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009580:	4b3b      	ldr	r3, [pc, #236]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1ef      	bne.n	800956c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d168      	bne.n	8009664 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d113      	bne.n	80095c0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009598:	4b35      	ldr	r3, [pc, #212]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	4b35      	ldr	r3, [pc, #212]	; (8009674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800959e:	4013      	ands	r3, r2
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6892      	ldr	r2, [r2, #8]
 80095a4:	0211      	lsls	r1, r2, #8
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	68d2      	ldr	r2, [r2, #12]
 80095aa:	06d2      	lsls	r2, r2, #27
 80095ac:	4311      	orrs	r1, r2
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6852      	ldr	r2, [r2, #4]
 80095b2:	3a01      	subs	r2, #1
 80095b4:	0112      	lsls	r2, r2, #4
 80095b6:	430a      	orrs	r2, r1
 80095b8:	492d      	ldr	r1, [pc, #180]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	610b      	str	r3, [r1, #16]
 80095be:	e02d      	b.n	800961c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d115      	bne.n	80095f2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80095c6:	4b2a      	ldr	r3, [pc, #168]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095c8:	691a      	ldr	r2, [r3, #16]
 80095ca:	4b2b      	ldr	r3, [pc, #172]	; (8009678 <RCCEx_PLLSAI1_Config+0x1e0>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	6892      	ldr	r2, [r2, #8]
 80095d2:	0211      	lsls	r1, r2, #8
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	6912      	ldr	r2, [r2, #16]
 80095d8:	0852      	lsrs	r2, r2, #1
 80095da:	3a01      	subs	r2, #1
 80095dc:	0552      	lsls	r2, r2, #21
 80095de:	4311      	orrs	r1, r2
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	6852      	ldr	r2, [r2, #4]
 80095e4:	3a01      	subs	r2, #1
 80095e6:	0112      	lsls	r2, r2, #4
 80095e8:	430a      	orrs	r2, r1
 80095ea:	4921      	ldr	r1, [pc, #132]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	610b      	str	r3, [r1, #16]
 80095f0:	e014      	b.n	800961c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80095f2:	4b1f      	ldr	r3, [pc, #124]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095f4:	691a      	ldr	r2, [r3, #16]
 80095f6:	4b21      	ldr	r3, [pc, #132]	; (800967c <RCCEx_PLLSAI1_Config+0x1e4>)
 80095f8:	4013      	ands	r3, r2
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	6892      	ldr	r2, [r2, #8]
 80095fe:	0211      	lsls	r1, r2, #8
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	6952      	ldr	r2, [r2, #20]
 8009604:	0852      	lsrs	r2, r2, #1
 8009606:	3a01      	subs	r2, #1
 8009608:	0652      	lsls	r2, r2, #25
 800960a:	4311      	orrs	r1, r2
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6852      	ldr	r2, [r2, #4]
 8009610:	3a01      	subs	r2, #1
 8009612:	0112      	lsls	r2, r2, #4
 8009614:	430a      	orrs	r2, r1
 8009616:	4916      	ldr	r1, [pc, #88]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009618:	4313      	orrs	r3, r2
 800961a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800961c:	4b14      	ldr	r3, [pc, #80]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a13      	ldr	r2, [pc, #76]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009626:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009628:	f7fa fc06 	bl	8003e38 <HAL_GetTick>
 800962c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800962e:	e009      	b.n	8009644 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009630:	f7fa fc02 	bl	8003e38 <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	2b02      	cmp	r3, #2
 800963c:	d902      	bls.n	8009644 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	73fb      	strb	r3, [r7, #15]
          break;
 8009642:	e005      	b.n	8009650 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0ef      	beq.n	8009630 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d106      	bne.n	8009664 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009656:	4b06      	ldr	r3, [pc, #24]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	4904      	ldr	r1, [pc, #16]	; (8009670 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009660:	4313      	orrs	r3, r2
 8009662:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40021000 	.word	0x40021000
 8009674:	07ff800f 	.word	0x07ff800f
 8009678:	ff9f800f 	.word	0xff9f800f
 800967c:	f9ff800f 	.word	0xf9ff800f

08009680 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800968e:	4b72      	ldr	r3, [pc, #456]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00e      	beq.n	80096b8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800969a:	4b6f      	ldr	r3, [pc, #444]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	f003 0203 	and.w	r2, r3, #3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d103      	bne.n	80096b2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
       ||
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d142      	bne.n	8009738 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	73fb      	strb	r3, [r7, #15]
 80096b6:	e03f      	b.n	8009738 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d018      	beq.n	80096f2 <RCCEx_PLLSAI2_Config+0x72>
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d825      	bhi.n	8009710 <RCCEx_PLLSAI2_Config+0x90>
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d002      	beq.n	80096ce <RCCEx_PLLSAI2_Config+0x4e>
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d009      	beq.n	80096e0 <RCCEx_PLLSAI2_Config+0x60>
 80096cc:	e020      	b.n	8009710 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80096ce:	4b62      	ldr	r3, [pc, #392]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0302 	and.w	r3, r3, #2
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d11d      	bne.n	8009716 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80096de:	e01a      	b.n	8009716 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80096e0:	4b5d      	ldr	r3, [pc, #372]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d116      	bne.n	800971a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80096f0:	e013      	b.n	800971a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80096f2:	4b59      	ldr	r3, [pc, #356]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10f      	bne.n	800971e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80096fe:	4b56      	ldr	r3, [pc, #344]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800970e:	e006      	b.n	800971e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	73fb      	strb	r3, [r7, #15]
      break;
 8009714:	e004      	b.n	8009720 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009716:	bf00      	nop
 8009718:	e002      	b.n	8009720 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800971a:	bf00      	nop
 800971c:	e000      	b.n	8009720 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800971e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009720:	7bfb      	ldrb	r3, [r7, #15]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d108      	bne.n	8009738 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009726:	4b4c      	ldr	r3, [pc, #304]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f023 0203 	bic.w	r2, r3, #3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4949      	ldr	r1, [pc, #292]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009734:	4313      	orrs	r3, r2
 8009736:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f040 8086 	bne.w	800984c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009740:	4b45      	ldr	r3, [pc, #276]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a44      	ldr	r2, [pc, #272]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800974a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800974c:	f7fa fb74 	bl	8003e38 <HAL_GetTick>
 8009750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009752:	e009      	b.n	8009768 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009754:	f7fa fb70 	bl	8003e38 <HAL_GetTick>
 8009758:	4602      	mov	r2, r0
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	2b02      	cmp	r3, #2
 8009760:	d902      	bls.n	8009768 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
        break;
 8009766:	e005      	b.n	8009774 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009768:	4b3b      	ldr	r3, [pc, #236]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1ef      	bne.n	8009754 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d168      	bne.n	800984c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d113      	bne.n	80097a8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009780:	4b35      	ldr	r3, [pc, #212]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009782:	695a      	ldr	r2, [r3, #20]
 8009784:	4b35      	ldr	r3, [pc, #212]	; (800985c <RCCEx_PLLSAI2_Config+0x1dc>)
 8009786:	4013      	ands	r3, r2
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	6892      	ldr	r2, [r2, #8]
 800978c:	0211      	lsls	r1, r2, #8
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	68d2      	ldr	r2, [r2, #12]
 8009792:	06d2      	lsls	r2, r2, #27
 8009794:	4311      	orrs	r1, r2
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	6852      	ldr	r2, [r2, #4]
 800979a:	3a01      	subs	r2, #1
 800979c:	0112      	lsls	r2, r2, #4
 800979e:	430a      	orrs	r2, r1
 80097a0:	492d      	ldr	r1, [pc, #180]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	614b      	str	r3, [r1, #20]
 80097a6:	e02d      	b.n	8009804 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d115      	bne.n	80097da <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80097ae:	4b2a      	ldr	r3, [pc, #168]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097b0:	695a      	ldr	r2, [r3, #20]
 80097b2:	4b2b      	ldr	r3, [pc, #172]	; (8009860 <RCCEx_PLLSAI2_Config+0x1e0>)
 80097b4:	4013      	ands	r3, r2
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	6892      	ldr	r2, [r2, #8]
 80097ba:	0211      	lsls	r1, r2, #8
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	6912      	ldr	r2, [r2, #16]
 80097c0:	0852      	lsrs	r2, r2, #1
 80097c2:	3a01      	subs	r2, #1
 80097c4:	0552      	lsls	r2, r2, #21
 80097c6:	4311      	orrs	r1, r2
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6852      	ldr	r2, [r2, #4]
 80097cc:	3a01      	subs	r2, #1
 80097ce:	0112      	lsls	r2, r2, #4
 80097d0:	430a      	orrs	r2, r1
 80097d2:	4921      	ldr	r1, [pc, #132]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	614b      	str	r3, [r1, #20]
 80097d8:	e014      	b.n	8009804 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80097da:	4b1f      	ldr	r3, [pc, #124]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097dc:	695a      	ldr	r2, [r3, #20]
 80097de:	4b21      	ldr	r3, [pc, #132]	; (8009864 <RCCEx_PLLSAI2_Config+0x1e4>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	6892      	ldr	r2, [r2, #8]
 80097e6:	0211      	lsls	r1, r2, #8
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	6952      	ldr	r2, [r2, #20]
 80097ec:	0852      	lsrs	r2, r2, #1
 80097ee:	3a01      	subs	r2, #1
 80097f0:	0652      	lsls	r2, r2, #25
 80097f2:	4311      	orrs	r1, r2
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6852      	ldr	r2, [r2, #4]
 80097f8:	3a01      	subs	r2, #1
 80097fa:	0112      	lsls	r2, r2, #4
 80097fc:	430a      	orrs	r2, r1
 80097fe:	4916      	ldr	r1, [pc, #88]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009800:	4313      	orrs	r3, r2
 8009802:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009804:	4b14      	ldr	r3, [pc, #80]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a13      	ldr	r2, [pc, #76]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 800980a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800980e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009810:	f7fa fb12 	bl	8003e38 <HAL_GetTick>
 8009814:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009816:	e009      	b.n	800982c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009818:	f7fa fb0e 	bl	8003e38 <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d902      	bls.n	800982c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	73fb      	strb	r3, [r7, #15]
          break;
 800982a:	e005      	b.n	8009838 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800982c:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0ef      	beq.n	8009818 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800983e:	4b06      	ldr	r3, [pc, #24]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	4904      	ldr	r1, [pc, #16]	; (8009858 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009848:	4313      	orrs	r3, r2
 800984a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800984c:	7bfb      	ldrb	r3, [r7, #15]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	40021000 	.word	0x40021000
 800985c:	07ff800f 	.word	0x07ff800f
 8009860:	ff9f800f 	.word	0xff9f800f
 8009864:	f9ff800f 	.word	0xf9ff800f

08009868 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8009868:	b480      	push	{r7}
 800986a:	b089      	sub	sp, #36	; 0x24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8009872:	2300      	movs	r3, #0
 8009874:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009884:	d10b      	bne.n	800989e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009886:	4b7e      	ldr	r3, [pc, #504]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800988c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009890:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	2b60      	cmp	r3, #96	; 0x60
 8009896:	d112      	bne.n	80098be <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009898:	4b7a      	ldr	r3, [pc, #488]	; (8009a84 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800989a:	61fb      	str	r3, [r7, #28]
 800989c:	e00f      	b.n	80098be <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a4:	d10b      	bne.n	80098be <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80098a6:	4b76      	ldr	r3, [pc, #472]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098b0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098b8:	d101      	bne.n	80098be <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80098ba:	4b72      	ldr	r3, [pc, #456]	; (8009a84 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80098bc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f040 80d6 	bne.w	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d003      	beq.n	80098d8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098d6:	d13b      	bne.n	8009950 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80098d8:	4b69      	ldr	r3, [pc, #420]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098e4:	f040 80c4 	bne.w	8009a70 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80098e8:	4b65      	ldr	r3, [pc, #404]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 80bd 	beq.w	8009a70 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80098f6:	4b62      	ldr	r3, [pc, #392]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	091b      	lsrs	r3, r3, #4
 80098fc:	f003 030f 	and.w	r3, r3, #15
 8009900:	3301      	adds	r3, #1
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	fbb2 f3f3 	udiv	r3, r2, r3
 8009908:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800990a:	4b5d      	ldr	r3, [pc, #372]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009914:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009916:	4b5a      	ldr	r3, [pc, #360]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	0edb      	lsrs	r3, r3, #27
 800991c:	f003 031f 	and.w	r3, r3, #31
 8009920:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009928:	4b55      	ldr	r3, [pc, #340]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8009934:	2311      	movs	r3, #17
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e001      	b.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800993a:	2307      	movs	r3, #7
 800993c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	fb03 f202 	mul.w	r2, r3, r2
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	fbb2 f3f3 	udiv	r3, r2, r3
 800994c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800994e:	e08f      	b.n	8009a70 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d13a      	bne.n	80099cc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009956:	4b4a      	ldr	r3, [pc, #296]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800995e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009962:	f040 8086 	bne.w	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8009966:	4b46      	ldr	r3, [pc, #280]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d07f      	beq.n	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009972:	4b43      	ldr	r3, [pc, #268]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	091b      	lsrs	r3, r3, #4
 8009978:	f003 030f 	and.w	r3, r3, #15
 800997c:	3301      	adds	r3, #1
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	fbb2 f3f3 	udiv	r3, r2, r3
 8009984:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009986:	4b3e      	ldr	r3, [pc, #248]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	0a1b      	lsrs	r3, r3, #8
 800998c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009990:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8009992:	4b3b      	ldr	r3, [pc, #236]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	0edb      	lsrs	r3, r3, #27
 8009998:	f003 031f 	and.w	r3, r3, #31
 800999c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80099a4:	4b36      	ldr	r3, [pc, #216]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80099b0:	2311      	movs	r3, #17
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	e001      	b.n	80099ba <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80099b6:	2307      	movs	r3, #7
 80099b8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	fb03 f202 	mul.w	r2, r3, r2
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c8:	61fb      	str	r3, [r7, #28]
 80099ca:	e052      	b.n	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d003      	beq.n	80099da <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099d8:	d109      	bne.n	80099ee <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099da:	4b29      	ldr	r3, [pc, #164]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099e6:	d144      	bne.n	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80099e8:	4b27      	ldr	r3, [pc, #156]	; (8009a88 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80099ea:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099ec:	e041      	b.n	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d003      	beq.n	80099fc <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099fa:	d13a      	bne.n	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80099fc:	4b20      	ldr	r3, [pc, #128]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a08:	d133      	bne.n	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8009a0a:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d02d      	beq.n	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8009a16:	4b1a      	ldr	r3, [pc, #104]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	091b      	lsrs	r3, r3, #4
 8009a1c:	f003 030f 	and.w	r3, r3, #15
 8009a20:	3301      	adds	r3, #1
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a28:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009a2a:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	0a1b      	lsrs	r3, r3, #8
 8009a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a34:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8009a36:	4b12      	ldr	r3, [pc, #72]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	0edb      	lsrs	r3, r3, #27
 8009a3c:	f003 031f 	and.w	r3, r3, #31
 8009a40:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8009a48:	4b0d      	ldr	r3, [pc, #52]	; (8009a80 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8009a54:	2311      	movs	r3, #17
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	e001      	b.n	8009a5e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8009a5a:	2307      	movs	r3, #7
 8009a5c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	fb03 f202 	mul.w	r2, r3, r2
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6c:	61fb      	str	r3, [r7, #28]
 8009a6e:	e000      	b.n	8009a72 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009a70:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8009a72:	69fb      	ldr	r3, [r7, #28]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3724      	adds	r7, #36	; 0x24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	40021000 	.word	0x40021000
 8009a84:	001fff68 	.word	0x001fff68
 8009a88:	00f42400 	.word	0x00f42400

08009a8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d06c      	beq.n	8009b78 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7f9 fe68 	bl	8003788 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	22ca      	movs	r2, #202	; 0xca
 8009ac6:	625a      	str	r2, [r3, #36]	; 0x24
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2253      	movs	r2, #83	; 0x53
 8009ace:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f9a0 	bl	8009e16 <RTC_EnterInitMode>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d14b      	bne.n	8009b78 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6899      	ldr	r1, [r3, #8]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	431a      	orrs	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	68d2      	ldr	r2, [r2, #12]
 8009b1a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6919      	ldr	r1, [r3, #16]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	041a      	lsls	r2, r3, #16
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f9a3 	bl	8009e7c <RTC_ExitInitMode>
 8009b36:	4603      	mov	r3, r0
 8009b38:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d11b      	bne.n	8009b78 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 0203 	bic.w	r2, r2, #3
 8009b4e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69da      	ldr	r2, [r3, #28]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	431a      	orrs	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	22ff      	movs	r2, #255	; 0xff
 8009b6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009b82:	b590      	push	{r4, r7, lr}
 8009b84:	b087      	sub	sp, #28
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d101      	bne.n	8009b9c <HAL_RTC_SetTime+0x1a>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e08b      	b.n	8009cb4 <HAL_RTC_SetTime+0x132>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	22ca      	movs	r2, #202	; 0xca
 8009bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2253      	movs	r2, #83	; 0x53
 8009bba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 f92a 	bl	8009e16 <RTC_EnterInitMode>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009bc6:	7cfb      	ldrb	r3, [r7, #19]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d163      	bne.n	8009c94 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d126      	bne.n	8009c20 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2200      	movs	r2, #0
 8009be4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 f984 	bl	8009ef8 <RTC_ByteToBcd2>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	785b      	ldrb	r3, [r3, #1]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 f97d 	bl	8009ef8 <RTC_ByteToBcd2>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c02:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	789b      	ldrb	r3, [r3, #2]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f975 	bl	8009ef8 <RTC_ByteToBcd2>
 8009c0e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c10:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	78db      	ldrb	r3, [r3, #3]
 8009c18:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	e018      	b.n	8009c52 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2200      	movs	r2, #0
 8009c32:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c40:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c46:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	78db      	ldrb	r3, [r3, #3]
 8009c4c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009c5c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009c60:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009c70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6899      	ldr	r1, [r3, #8]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	431a      	orrs	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 f8f6 	bl	8009e7c <RTC_ExitInitMode>
 8009c90:	4603      	mov	r3, r0
 8009c92:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	22ff      	movs	r2, #255	; 0xff
 8009c9a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009c9c:	7cfb      	ldrb	r3, [r7, #19]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d103      	bne.n	8009caa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009cb2:	7cfb      	ldrb	r3, [r7, #19]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd90      	pop	{r4, r7, pc}

08009cbc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d101      	bne.n	8009cd6 <HAL_RTC_SetDate+0x1a>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e075      	b.n	8009dc2 <HAL_RTC_SetDate+0x106>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10e      	bne.n	8009d0a <HAL_RTC_SetDate+0x4e>
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	f003 0310 	and.w	r3, r3, #16
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d008      	beq.n	8009d0a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	f023 0310 	bic.w	r3, r3, #16
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	330a      	adds	r3, #10
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d11c      	bne.n	8009d4a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	78db      	ldrb	r3, [r3, #3]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 f8ef 	bl	8009ef8 <RTC_ByteToBcd2>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 f8e8 	bl	8009ef8 <RTC_ByteToBcd2>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009d2c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	789b      	ldrb	r3, [r3, #2]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 f8e0 	bl	8009ef8 <RTC_ByteToBcd2>
 8009d38:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d3a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009d44:	4313      	orrs	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	e00e      	b.n	8009d68 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	78db      	ldrb	r3, [r3, #3]
 8009d4e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	785b      	ldrb	r3, [r3, #1]
 8009d54:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009d56:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009d5c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	22ca      	movs	r2, #202	; 0xca
 8009d6e:	625a      	str	r2, [r3, #36]	; 0x24
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2253      	movs	r2, #83	; 0x53
 8009d76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f84c 	bl	8009e16 <RTC_EnterInitMode>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009d82:	7cfb      	ldrb	r3, [r7, #19]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10c      	bne.n	8009da2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009d96:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 f86f 	bl	8009e7c <RTC_ExitInitMode>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	22ff      	movs	r2, #255	; 0xff
 8009da8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009daa:	7cfb      	ldrb	r3, [r7, #19]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d103      	bne.n	8009db8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009dc0:	7cfb      	ldrb	r3, [r7, #19]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	371c      	adds	r7, #28
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd90      	pop	{r4, r7, pc}

08009dca <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68da      	ldr	r2, [r3, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009de0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009de2:	f7fa f829 	bl	8003e38 <HAL_GetTick>
 8009de6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009de8:	e009      	b.n	8009dfe <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009dea:	f7fa f825 	bl	8003e38 <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009df8:	d901      	bls.n	8009dfe <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e007      	b.n	8009e0e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f003 0320 	and.w	r3, r3, #32
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0ee      	beq.n	8009dea <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d120      	bne.n	8009e72 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e3a:	f7f9 fffd 	bl	8003e38 <HAL_GetTick>
 8009e3e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e40:	e00d      	b.n	8009e5e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e42:	f7f9 fff9 	bl	8003e38 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e50:	d905      	bls.n	8009e5e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2203      	movs	r2, #3
 8009e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d102      	bne.n	8009e72 <RTC_EnterInitMode+0x5c>
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d1e7      	bne.n	8009e42 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009e88:	4b1a      	ldr	r3, [pc, #104]	; (8009ef4 <RTC_ExitInitMode+0x78>)
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	4a19      	ldr	r2, [pc, #100]	; (8009ef4 <RTC_ExitInitMode+0x78>)
 8009e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e92:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009e94:	4b17      	ldr	r3, [pc, #92]	; (8009ef4 <RTC_ExitInitMode+0x78>)
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f003 0320 	and.w	r3, r3, #32
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10c      	bne.n	8009eba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ff92 	bl	8009dca <HAL_RTC_WaitForSynchro>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d01e      	beq.n	8009eea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2203      	movs	r2, #3
 8009eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	73fb      	strb	r3, [r7, #15]
 8009eb8:	e017      	b.n	8009eea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009eba:	4b0e      	ldr	r3, [pc, #56]	; (8009ef4 <RTC_ExitInitMode+0x78>)
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	4a0d      	ldr	r2, [pc, #52]	; (8009ef4 <RTC_ExitInitMode+0x78>)
 8009ec0:	f023 0320 	bic.w	r3, r3, #32
 8009ec4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff ff7f 	bl	8009dca <HAL_RTC_WaitForSynchro>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d005      	beq.n	8009ede <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2203      	movs	r2, #3
 8009ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009ede:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <RTC_ExitInitMode+0x78>)
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	4a04      	ldr	r2, [pc, #16]	; (8009ef4 <RTC_ExitInitMode+0x78>)
 8009ee4:	f043 0320 	orr.w	r3, r3, #32
 8009ee8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	40002800 	.word	0x40002800

08009ef8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009f0a:	e005      	b.n	8009f18 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009f12:	7afb      	ldrb	r3, [r7, #11]
 8009f14:	3b0a      	subs	r3, #10
 8009f16:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009f18:	7afb      	ldrb	r3, [r7, #11]
 8009f1a:	2b09      	cmp	r3, #9
 8009f1c:	d8f6      	bhi.n	8009f0c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	011b      	lsls	r3, r3, #4
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	7afb      	ldrb	r3, [r7, #11]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	b2db      	uxtb	r3, r3
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08a      	sub	sp, #40	; 0x28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e078      	b.n	800a03c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d105      	bne.n	8009f62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7f9 fc45 	bl	80037ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2203      	movs	r2, #3
 8009f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f86a 	bl	800a044 <HAL_SD_InitCard>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e060      	b.n	800a03c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fdb5 	bl	800aaf0 <HAL_SD_GetCardStatus>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e055      	b.n	800a03c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009f90:	7e3b      	ldrb	r3, [r7, #24]
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009f96:	7e7b      	ldrb	r3, [r7, #25]
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d10a      	bne.n	8009fba <HAL_SD_Init+0x82>
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <HAL_SD_Init+0x78>
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d004      	beq.n	8009fba <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8009fb8:	e00b      	b.n	8009fd2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d104      	bne.n	8009fcc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009fca:	e002      	b.n	8009fd2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fe6b 	bl	800acb4 <HAL_SD_ConfigWideBusOperation>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e029      	b.n	800a03c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009fe8:	f7f9 ff26 	bl	8003e38 <HAL_GetTick>
 8009fec:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009fee:	e014      	b.n	800a01a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8009ff0:	f7f9 ff22 	bl	8003e38 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d10c      	bne.n	800a01a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e010      	b.n	800a03c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 ff5e 	bl	800aedc <HAL_SD_GetCardState>
 800a020:	4603      	mov	r3, r0
 800a022:	2b04      	cmp	r3, #4
 800a024:	d1e4      	bne.n	8009ff0 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3728      	adds	r7, #40	; 0x28
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a044:	b5b0      	push	{r4, r5, r7, lr}
 800a046:	b08e      	sub	sp, #56	; 0x38
 800a048:	af04      	add	r7, sp, #16
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a04c:	2300      	movs	r3, #0
 800a04e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a050:	2300      	movs	r3, #0
 800a052:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a054:	2300      	movs	r3, #0
 800a056:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800a05c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a060:	f7fe fafa 	bl	8008658 <HAL_RCCEx_GetPeriphCLKFreq>
 800a064:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d109      	bne.n	800a080 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e079      	b.n	800a174 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	0a1b      	lsrs	r3, r3, #8
 800a084:	4a3d      	ldr	r2, [pc, #244]	; (800a17c <HAL_SD_InitCard+0x138>)
 800a086:	fba2 2303 	umull	r2, r3, r2, r3
 800a08a:	091b      	lsrs	r3, r3, #4
 800a08c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d107      	bne.n	800a0ac <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f042 0210 	orr.w	r2, r2, #16
 800a0aa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681d      	ldr	r5, [r3, #0]
 800a0b0:	466c      	mov	r4, sp
 800a0b2:	f107 0314 	add.w	r3, r7, #20
 800a0b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0be:	f107 0308 	add.w	r3, r7, #8
 800a0c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f002 fc93 	bl	800c9f0 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f002 fcd6 	bl	800ca80 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	005b      	lsls	r3, r3, #1
 800a0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0de:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a0e0:	4a27      	ldr	r2, [pc, #156]	; (800a180 <HAL_SD_InitCard+0x13c>)
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7f9 feb0 	bl	8003e50 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 ffd3 	bl	800b09c <SD_PowerON>
 800a0f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00b      	beq.n	800a116 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	431a      	orrs	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e02e      	b.n	800a174 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 ff00 	bl	800af1c <SD_InitCard>
 800a11c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00b      	beq.n	800a13c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	431a      	orrs	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e01b      	b.n	800a174 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a144:	4618      	mov	r0, r3
 800a146:	f002 fd31 	bl	800cbac <SDMMC_CmdBlockLength>
 800a14a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00f      	beq.n	800a172 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a0b      	ldr	r2, [pc, #44]	; (800a184 <HAL_SD_InitCard+0x140>)
 800a158:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	431a      	orrs	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3728      	adds	r7, #40	; 0x28
 800a178:	46bd      	mov	sp, r7
 800a17a:	bdb0      	pop	{r4, r5, r7, pc}
 800a17c:	014f8b59 	.word	0x014f8b59
 800a180:	00012110 	.word	0x00012110
 800a184:	1fe00fff 	.word	0x1fe00fff

0800a188 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08c      	sub	sp, #48	; 0x30
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d107      	bne.n	800a1b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e08d      	b.n	800a2cc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	f040 8086 	bne.w	800a2ca <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a1c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	441a      	add	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d907      	bls.n	800a1e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e074      	b.n	800a2cc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2203      	movs	r2, #3
 800a1e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	025a      	lsls	r2, r3, #9
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a204:	2b01      	cmp	r3, #1
 800a206:	d002      	beq.n	800a20e <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800a208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20a:	025b      	lsls	r3, r3, #9
 800a20c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295
 800a212:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	025b      	lsls	r3, r3, #9
 800a218:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a21a:	2390      	movs	r3, #144	; 0x90
 800a21c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a21e:	2302      	movs	r3, #2
 800a220:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a222:	2300      	movs	r3, #0
 800a224:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800a226:	2300      	movs	r3, #0
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f107 0210 	add.w	r2, r7, #16
 800a232:	4611      	mov	r1, r2
 800a234:	4618      	mov	r0, r3
 800a236:	f002 fc8d 	bl	800cb54 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a248:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2201      	movs	r2, #1
 800a258:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d90a      	bls.n	800a276 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2282      	movs	r2, #130	; 0x82
 800a264:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a26c:	4618      	mov	r0, r3
 800a26e:	f002 fce3 	bl	800cc38 <SDMMC_CmdReadMultiBlock>
 800a272:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a274:	e009      	b.n	800a28a <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2281      	movs	r2, #129	; 0x81
 800a27a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a282:	4618      	mov	r0, r3
 800a284:	f002 fcb5 	bl	800cbf2 <SDMMC_CmdReadSingleBlock>
 800a288:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d012      	beq.n	800a2b6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a0f      	ldr	r2, [pc, #60]	; (800a2d4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a296:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e00a      	b.n	800a2cc <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a2c4:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e000      	b.n	800a2cc <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800a2ca:	2302      	movs	r3, #2
  }
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3730      	adds	r7, #48	; 0x30
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	1fe00fff 	.word	0x1fe00fff

0800a2d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08c      	sub	sp, #48	; 0x30
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d107      	bne.n	800a300 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e08d      	b.n	800a41c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b01      	cmp	r3, #1
 800a30a:	f040 8086 	bne.w	800a41a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	441a      	add	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a31e:	429a      	cmp	r2, r3
 800a320:	d907      	bls.n	800a332 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a326:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e074      	b.n	800a41c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2203      	movs	r2, #3
 800a336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2200      	movs	r2, #0
 800a340:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	025a      	lsls	r2, r3, #9
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a354:	2b01      	cmp	r3, #1
 800a356:	d002      	beq.n	800a35e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	025b      	lsls	r3, r3, #9
 800a35c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a35e:	f04f 33ff 	mov.w	r3, #4294967295
 800a362:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	025b      	lsls	r3, r3, #9
 800a368:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a36a:	2390      	movs	r3, #144	; 0x90
 800a36c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a36e:	2300      	movs	r3, #0
 800a370:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a372:	2300      	movs	r3, #0
 800a374:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a376:	2300      	movs	r3, #0
 800a378:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f107 0210 	add.w	r2, r7, #16
 800a382:	4611      	mov	r1, r2
 800a384:	4618      	mov	r0, r3
 800a386:	f002 fbe5 	bl	800cb54 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68da      	ldr	r2, [r3, #12]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a398:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d90a      	bls.n	800a3c6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	22a0      	movs	r2, #160	; 0xa0
 800a3b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f002 fc81 	bl	800ccc4 <SDMMC_CmdWriteMultiBlock>
 800a3c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a3c4:	e009      	b.n	800a3da <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2290      	movs	r2, #144	; 0x90
 800a3ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f002 fc53 	bl	800cc7e <SDMMC_CmdWriteSingleBlock>
 800a3d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d012      	beq.n	800a406 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a0f      	ldr	r2, [pc, #60]	; (800a424 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a3e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e00a      	b.n	800a41c <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a414:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	e000      	b.n	800a41c <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800a41a:	2302      	movs	r3, #2
  }
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3730      	adds	r7, #48	; 0x30
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	1fe00fff 	.word	0x1fe00fff

0800a428 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a434:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d008      	beq.n	800a456 <HAL_SD_IRQHandler+0x2e>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 0308 	and.w	r3, r3, #8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f001 f98e 	bl	800b770 <SD_Read_IT>
 800a454:	e199      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 80ae 	beq.w	800a5c2 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a46e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6812      	ldr	r2, [r2, #0]
 800a47a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a47e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a482:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a492:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4a2:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f003 0308 	and.w	r3, r3, #8
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d038      	beq.n	800a520 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d104      	bne.n	800a4c2 <HAL_SD_IRQHandler+0x9a>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f003 0320 	and.w	r3, r3, #32
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d011      	beq.n	800a4e6 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f002 fc20 	bl	800cd0c <SDMMC_CmdStopTransfer>
 800a4cc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d008      	beq.n	800a4e6 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f957 	bl	800a794 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a90      	ldr	r2, [pc, #576]	; (800a72c <HAL_SD_IRQHandler+0x304>)
 800a4ec:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d104      	bne.n	800a510 <HAL_SD_IRQHandler+0xe8>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d003      	beq.n	800a518 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f004 fc2b 	bl	800ed6c <HAL_SD_RxCpltCallback>
 800a516:	e138      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f004 fc1d 	bl	800ed58 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800a51e:	e134      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 812f 	beq.w	800a78a <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2200      	movs	r2, #0
 800a532:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2200      	movs	r2, #0
 800a53a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2200      	movs	r2, #0
 800a542:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f003 0302 	and.w	r3, r3, #2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d104      	bne.n	800a558 <HAL_SD_IRQHandler+0x130>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b00      	cmp	r3, #0
 800a556:	d011      	beq.n	800a57c <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f002 fbd5 	bl	800cd0c <SDMMC_CmdStopTransfer>
 800a562:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d008      	beq.n	800a57c <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	431a      	orrs	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f90c 	bl	800a794 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f003 0310 	and.w	r3, r3, #16
 800a590:	2b00      	cmp	r3, #0
 800a592:	d104      	bne.n	800a59e <HAL_SD_IRQHandler+0x176>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f004 fbda 	bl	800ed58 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d105      	bne.n	800a5ba <HAL_SD_IRQHandler+0x192>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f003 0302 	and.w	r3, r3, #2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 80e8 	beq.w	800a78a <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f004 fbd6 	bl	800ed6c <HAL_SD_RxCpltCallback>
}
 800a5c0:	e0e3      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d008      	beq.n	800a5e2 <HAL_SD_IRQHandler+0x1ba>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f003 0308 	and.w	r3, r3, #8
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f001 f919 	bl	800b812 <SD_Write_IT>
 800a5e0:	e0d3      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e8:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 809f 	beq.w	800a730 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f8:	f003 0302 	and.w	r3, r3, #2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a604:	f043 0202 	orr.w	r2, r3, #2
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	2b00      	cmp	r3, #0
 800a618:	d005      	beq.n	800a626 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61e:	f043 0208 	orr.w	r2, r3, #8
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62c:	f003 0320 	and.w	r3, r3, #32
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a638:	f043 0220 	orr.w	r2, r3, #32
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a646:	f003 0310 	and.w	r3, r3, #16
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	f043 0210 	orr.w	r2, r3, #16
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a33      	ldr	r2, [pc, #204]	; (800a72c <HAL_SD_IRQHandler+0x304>)
 800a660:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a670:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68da      	ldr	r2, [r3, #12]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a680:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a690:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68da      	ldr	r2, [r3, #12]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6a0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f002 fb30 	bl	800cd0c <SDMMC_CmdStopTransfer>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6c6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6d0:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f003 0308 	and.w	r3, r3, #8
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00a      	beq.n	800a6f2 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f852 	bl	800a794 <HAL_SD_ErrorCallback>
}
 800a6f0:	e04b      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d046      	beq.n	800a78a <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a700:	2b00      	cmp	r3, #0
 800a702:	d042      	beq.n	800a78a <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a712:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2200      	movs	r2, #0
 800a71a:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f835 	bl	800a794 <HAL_SD_ErrorCallback>
}
 800a72a:	e02e      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
 800a72c:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d025      	beq.n	800a78a <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a746:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a74e:	f003 0304 	and.w	r3, r3, #4
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10c      	bne.n	800a770 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f003 0320 	and.w	r3, r3, #32
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d003      	beq.n	800a768 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f8d4 	bl	800b90e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800a766:	e010      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f001 f8bc 	bl	800b8e6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800a76e:	e00c      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f003 0320 	and.w	r3, r3, #32
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f001 f8bd 	bl	800b8fa <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800a780:	e003      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 f8a5 	bl	800b8d2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800a788:	e7ff      	b.n	800a78a <HAL_SD_IRQHandler+0x362>
 800a78a:	bf00      	nop
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop

0800a794 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b6:	0f9b      	lsrs	r3, r3, #30
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c2:	0e9b      	lsrs	r3, r3, #26
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	f003 030f 	and.w	r3, r3, #15
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7d4:	0e1b      	lsrs	r3, r3, #24
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f003 0303 	and.w	r3, r3, #3
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7e6:	0c1b      	lsrs	r3, r3, #16
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7f2:	0a1b      	lsrs	r3, r3, #8
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a808:	0d1b      	lsrs	r3, r3, #20
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a814:	0c1b      	lsrs	r3, r3, #16
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 030f 	and.w	r3, r3, #15
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a826:	0bdb      	lsrs	r3, r3, #15
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a838:	0b9b      	lsrs	r3, r3, #14
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	b2da      	uxtb	r2, r3
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a84a:	0b5b      	lsrs	r3, r3, #13
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	b2da      	uxtb	r2, r3
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a85c:	0b1b      	lsrs	r3, r3, #12
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	b2da      	uxtb	r2, r3
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2200      	movs	r2, #0
 800a86e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a874:	2b00      	cmp	r3, #0
 800a876:	d163      	bne.n	800a940 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a87c:	009a      	lsls	r2, r3, #2
 800a87e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a882:	4013      	ands	r3, r2
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a888:	0f92      	lsrs	r2, r2, #30
 800a88a:	431a      	orrs	r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a894:	0edb      	lsrs	r3, r3, #27
 800a896:	b2db      	uxtb	r3, r3
 800a898:	f003 0307 	and.w	r3, r3, #7
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8a6:	0e1b      	lsrs	r3, r3, #24
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8b8:	0d5b      	lsrs	r3, r3, #21
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	f003 0307 	and.w	r3, r3, #7
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8ca:	0c9b      	lsrs	r3, r3, #18
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	f003 0307 	and.w	r3, r3, #7
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8dc:	0bdb      	lsrs	r3, r3, #15
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	f003 0307 	and.w	r3, r3, #7
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	7e1b      	ldrb	r3, [r3, #24]
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	f003 0307 	and.w	r3, r3, #7
 800a8fe:	3302      	adds	r3, #2
 800a900:	2201      	movs	r2, #1
 800a902:	fa02 f303 	lsl.w	r3, r2, r3
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a90a:	fb03 f202 	mul.w	r2, r3, r2
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	7a1b      	ldrb	r3, [r3, #8]
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f003 030f 	and.w	r3, r3, #15
 800a91c:	2201      	movs	r2, #1
 800a91e:	409a      	lsls	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a92c:	0a52      	lsrs	r2, r2, #9
 800a92e:	fb03 f202 	mul.w	r2, r3, r2
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a93c:	659a      	str	r2, [r3, #88]	; 0x58
 800a93e:	e031      	b.n	800a9a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a944:	2b01      	cmp	r3, #1
 800a946:	d11d      	bne.n	800a984 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a94c:	041b      	lsls	r3, r3, #16
 800a94e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a956:	0c1b      	lsrs	r3, r3, #16
 800a958:	431a      	orrs	r2, r3
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	3301      	adds	r3, #1
 800a964:	029a      	lsls	r2, r3, #10
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a978:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	659a      	str	r2, [r3, #88]	; 0x58
 800a982:	e00f      	b.n	800a9a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a58      	ldr	r2, [pc, #352]	; (800aaec <HAL_SD_GetCardCSD+0x344>)
 800a98a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a990:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e09d      	b.n	800aae0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9a8:	0b9b      	lsrs	r3, r3, #14
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9ba:	09db      	lsrs	r3, r3, #7
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9dc:	0fdb      	lsrs	r3, r3, #31
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e8:	0f5b      	lsrs	r3, r3, #29
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f003 0303 	and.w	r3, r3, #3
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9fa:	0e9b      	lsrs	r3, r3, #26
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	f003 0307 	and.w	r3, r3, #7
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa0c:	0d9b      	lsrs	r3, r3, #22
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	f003 030f 	and.w	r3, r3, #15
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa1e:	0d5b      	lsrs	r3, r3, #21
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa3a:	0c1b      	lsrs	r3, r3, #16
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa4e:	0bdb      	lsrs	r3, r3, #15
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa62:	0b9b      	lsrs	r3, r3, #14
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa76:	0b5b      	lsrs	r3, r3, #13
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa8a:	0b1b      	lsrs	r3, r3, #12
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa9e:	0a9b      	lsrs	r3, r3, #10
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	f003 0303 	and.w	r3, r3, #3
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aab2:	0a1b      	lsrs	r3, r3, #8
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	f003 0303 	and.w	r3, r3, #3
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aac6:	085b      	lsrs	r3, r3, #1
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	1fe00fff 	.word	0x1fe00fff

0800aaf0 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b094      	sub	sp, #80	; 0x50
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ab00:	f107 0308 	add.w	r3, r7, #8
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fbd4 	bl	800b2b4 <SD_SendSDStatus>
 800ab0c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d011      	beq.n	800ab38 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a4f      	ldr	r2, [pc, #316]	; (800ac58 <HAL_SD_GetCardStatus+0x168>)
 800ab1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ab36:	e070      	b.n	800ac1a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	099b      	lsrs	r3, r3, #6
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	095b      	lsrs	r3, r3, #5
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	0a1b      	lsrs	r3, r3, #8
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	0e1b      	lsrs	r3, r3, #24
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	061a      	lsls	r2, r3, #24
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	021b      	lsls	r3, r3, #8
 800ab7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab7e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	0a1b      	lsrs	r3, r3, #8
 800ab84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ab88:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	0e1b      	lsrs	r3, r3, #24
 800ab8e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	0a1b      	lsrs	r3, r3, #8
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	0d1b      	lsrs	r3, r3, #20
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	f003 030f 	and.w	r3, r3, #15
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	0c1b      	lsrs	r3, r3, #16
 800abba:	b29b      	uxth	r3, r3
 800abbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	b29b      	uxth	r3, r3
 800abca:	4313      	orrs	r3, r2
 800abcc:	b29a      	uxth	r2, r3
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	0a9b      	lsrs	r3, r3, #10
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	0a1b      	lsrs	r3, r3, #8
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	f003 0303 	and.w	r3, r3, #3
 800abec:	b2da      	uxtb	r2, r3
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	091b      	lsrs	r3, r3, #4
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 030f 	and.w	r3, r3, #15
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	f003 030f 	and.w	r3, r3, #15
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	0e1b      	lsrs	r3, r3, #24
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac22:	4618      	mov	r0, r3
 800ac24:	f001 ffc2 	bl	800cbac <SDMMC_CmdBlockLength>
 800ac28:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00d      	beq.n	800ac4c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a08      	ldr	r2, [pc, #32]	; (800ac58 <HAL_SD_GetCardStatus+0x168>)
 800ac36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac3c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ac4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3750      	adds	r7, #80	; 0x50
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	1fe00fff 	.word	0x1fe00fff

0800ac5c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800acb4:	b5b0      	push	{r4, r5, r7, lr}
 800acb6:	b090      	sub	sp, #64	; 0x40
 800acb8:	af04      	add	r7, sp, #16
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2203      	movs	r2, #3
 800acc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d02e      	beq.n	800ad32 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acda:	d106      	bne.n	800acea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	639a      	str	r2, [r3, #56]	; 0x38
 800ace8:	e029      	b.n	800ad3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acf0:	d10a      	bne.n	800ad08 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fbd6 	bl	800b4a4 <SD_WideBus_Enable>
 800acf8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	431a      	orrs	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	639a      	str	r2, [r3, #56]	; 0x38
 800ad06:	e01a      	b.n	800ad3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10a      	bne.n	800ad24 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fc13 	bl	800b53a <SD_WideBus_Disable>
 800ad14:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1c:	431a      	orrs	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	639a      	str	r2, [r3, #56]	; 0x38
 800ad22:	e00c      	b.n	800ad3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	639a      	str	r2, [r3, #56]	; 0x38
 800ad30:	e005      	b.n	800ad3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d007      	beq.n	800ad56 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a60      	ldr	r2, [pc, #384]	; (800aecc <HAL_SD_ConfigWideBusOperation+0x218>)
 800ad4c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ad54:	e097      	b.n	800ae86 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800ad56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ad5a:	f7fd fc7d 	bl	8008658 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad5e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 8086 	beq.w	800ae74 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	695a      	ldr	r2, [r3, #20]
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	4952      	ldr	r1, [pc, #328]	; (800aed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ad86:	fba1 1303 	umull	r1, r3, r1, r3
 800ad8a:	0e1b      	lsrs	r3, r3, #24
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d303      	bcc.n	800ad98 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	61fb      	str	r3, [r7, #28]
 800ad96:	e05a      	b.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ada0:	d103      	bne.n	800adaa <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	695b      	ldr	r3, [r3, #20]
 800ada6:	61fb      	str	r3, [r7, #28]
 800ada8:	e051      	b.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb2:	d126      	bne.n	800ae02 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	695b      	ldr	r3, [r3, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10e      	bne.n	800adda <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	4a45      	ldr	r2, [pc, #276]	; (800aed4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d906      	bls.n	800add2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc6:	4a42      	ldr	r2, [pc, #264]	; (800aed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800adc8:	fba2 2303 	umull	r2, r3, r2, r3
 800adcc:	0e5b      	lsrs	r3, r3, #25
 800adce:	61fb      	str	r3, [r7, #28]
 800add0:	e03d      	b.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	61fb      	str	r3, [r7, #28]
 800add8:	e039      	b.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ade2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade6:	4a3b      	ldr	r2, [pc, #236]	; (800aed4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d906      	bls.n	800adfa <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	4a38      	ldr	r2, [pc, #224]	; (800aed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800adf0:	fba2 2303 	umull	r2, r3, r2, r3
 800adf4:	0e5b      	lsrs	r3, r3, #25
 800adf6:	61fb      	str	r3, [r7, #28]
 800adf8:	e029      	b.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	61fb      	str	r3, [r7, #28]
 800ae00:	e025      	b.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10e      	bne.n	800ae28 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	4a32      	ldr	r2, [pc, #200]	; (800aed8 <HAL_SD_ConfigWideBusOperation+0x224>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d906      	bls.n	800ae20 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	4a2e      	ldr	r2, [pc, #184]	; (800aed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ae16:	fba2 2303 	umull	r2, r3, r2, r3
 800ae1a:	0e1b      	lsrs	r3, r3, #24
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	e016      	b.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	61fb      	str	r3, [r7, #28]
 800ae26:	e012      	b.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae34:	4a28      	ldr	r2, [pc, #160]	; (800aed8 <HAL_SD_ConfigWideBusOperation+0x224>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d906      	bls.n	800ae48 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	4a24      	ldr	r2, [pc, #144]	; (800aed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ae3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae42:	0e1b      	lsrs	r3, r3, #24
 800ae44:	61fb      	str	r3, [r7, #28]
 800ae46:	e002      	b.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681d      	ldr	r5, [r3, #0]
 800ae58:	466c      	mov	r4, sp
 800ae5a:	f107 0318 	add.w	r3, r7, #24
 800ae5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae66:	f107 030c 	add.w	r3, r7, #12
 800ae6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f001 fdbf 	bl	800c9f0 <SDMMC_Init>
 800ae72:	e008      	b.n	800ae86 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f001 fe8c 	bl	800cbac <SDMMC_CmdBlockLength>
 800ae94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00c      	beq.n	800aeb6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <HAL_SD_ConfigWideBusOperation+0x218>)
 800aea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	431a      	orrs	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800aebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3730      	adds	r7, #48	; 0x30
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bdb0      	pop	{r4, r5, r7, pc}
 800aeca:	bf00      	nop
 800aecc:	1fe00fff 	.word	0x1fe00fff
 800aed0:	55e63b89 	.word	0x55e63b89
 800aed4:	02faf080 	.word	0x02faf080
 800aed8:	017d7840 	.word	0x017d7840

0800aedc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aee8:	f107 030c 	add.w	r3, r7, #12
 800aeec:	4619      	mov	r1, r3
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fab0 	bl	800b454 <SD_SendStatus>
 800aef4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d005      	beq.n	800af08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	431a      	orrs	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	0a5b      	lsrs	r3, r3, #9
 800af0c:	f003 030f 	and.w	r3, r3, #15
 800af10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800af12:	693b      	ldr	r3, [r7, #16]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800af1c:	b5b0      	push	{r4, r5, r7, lr}
 800af1e:	b090      	sub	sp, #64	; 0x40
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800af24:	2301      	movs	r3, #1
 800af26:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f001 fdb9 	bl	800caa4 <SDMMC_GetPowerState>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d102      	bne.n	800af3e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800af3c:	e0a9      	b.n	800b092 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af42:	2b03      	cmp	r3, #3
 800af44:	d02e      	beq.n	800afa4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f001 fffe 	bl	800cf4c <SDMMC_CmdSendCID>
 800af50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <SD_InitCard+0x40>
    {
      return errorstate;
 800af58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5a:	e09a      	b.n	800b092 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2100      	movs	r1, #0
 800af62:	4618      	mov	r0, r3
 800af64:	f001 fde3 	bl	800cb2e <SDMMC_GetResponse>
 800af68:	4602      	mov	r2, r0
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2104      	movs	r1, #4
 800af74:	4618      	mov	r0, r3
 800af76:	f001 fdda 	bl	800cb2e <SDMMC_GetResponse>
 800af7a:	4602      	mov	r2, r0
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2108      	movs	r1, #8
 800af86:	4618      	mov	r0, r3
 800af88:	f001 fdd1 	bl	800cb2e <SDMMC_GetResponse>
 800af8c:	4602      	mov	r2, r0
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	210c      	movs	r1, #12
 800af98:	4618      	mov	r0, r3
 800af9a:	f001 fdc8 	bl	800cb2e <SDMMC_GetResponse>
 800af9e:	4602      	mov	r2, r0
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d00d      	beq.n	800afc8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f107 020e 	add.w	r2, r7, #14
 800afb4:	4611      	mov	r1, r2
 800afb6:	4618      	mov	r0, r3
 800afb8:	f002 f807 	bl	800cfca <SDMMC_CmdSetRelAdd>
 800afbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800afbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <SD_InitCard+0xac>
    {
      return errorstate;
 800afc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc6:	e064      	b.n	800b092 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afcc:	2b03      	cmp	r3, #3
 800afce:	d036      	beq.n	800b03e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800afd0:	89fb      	ldrh	r3, [r7, #14]
 800afd2:	461a      	mov	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afe0:	041b      	lsls	r3, r3, #16
 800afe2:	4619      	mov	r1, r3
 800afe4:	4610      	mov	r0, r2
 800afe6:	f001 ffd0 	bl	800cf8a <SDMMC_CmdSendCSD>
 800afea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800afec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <SD_InitCard+0xda>
    {
      return errorstate;
 800aff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff4:	e04d      	b.n	800b092 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2100      	movs	r1, #0
 800affc:	4618      	mov	r0, r3
 800affe:	f001 fd96 	bl	800cb2e <SDMMC_GetResponse>
 800b002:	4602      	mov	r2, r0
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2104      	movs	r1, #4
 800b00e:	4618      	mov	r0, r3
 800b010:	f001 fd8d 	bl	800cb2e <SDMMC_GetResponse>
 800b014:	4602      	mov	r2, r0
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2108      	movs	r1, #8
 800b020:	4618      	mov	r0, r3
 800b022:	f001 fd84 	bl	800cb2e <SDMMC_GetResponse>
 800b026:	4602      	mov	r2, r0
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	210c      	movs	r1, #12
 800b032:	4618      	mov	r0, r3
 800b034:	f001 fd7b 	bl	800cb2e <SDMMC_GetResponse>
 800b038:	4602      	mov	r2, r0
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2104      	movs	r1, #4
 800b044:	4618      	mov	r0, r3
 800b046:	f001 fd72 	bl	800cb2e <SDMMC_GetResponse>
 800b04a:	4603      	mov	r3, r0
 800b04c:	0d1a      	lsrs	r2, r3, #20
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b052:	f107 0310 	add.w	r3, r7, #16
 800b056:	4619      	mov	r1, r3
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff fba5 	bl	800a7a8 <HAL_SD_GetCardCSD>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b068:	e013      	b.n	800b092 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6819      	ldr	r1, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b072:	041b      	lsls	r3, r3, #16
 800b074:	2200      	movs	r2, #0
 800b076:	461c      	mov	r4, r3
 800b078:	4615      	mov	r5, r2
 800b07a:	4622      	mov	r2, r4
 800b07c:	462b      	mov	r3, r5
 800b07e:	4608      	mov	r0, r1
 800b080:	f001 fe7a 	bl	800cd78 <SDMMC_CmdSelDesel>
 800b084:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <SD_InitCard+0x174>
  {
    return errorstate;
 800b08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b08e:	e000      	b.n	800b092 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3740      	adds	r7, #64	; 0x40
 800b096:	46bd      	mov	sp, r7
 800b098:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b09c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b088      	sub	sp, #32
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	61fb      	str	r3, [r7, #28]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800b0b0:	f7f8 fec2 	bl	8003e38 <HAL_GetTick>
 800b0b4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f001 fe80 	bl	800cdc0 <SDMMC_CmdGoIdleState>
 800b0c0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <SD_PowerON+0x30>
  {
    return errorstate;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	e0ed      	b.n	800b2a8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f001 fe93 	bl	800cdfc <SDMMC_CmdOperCond>
 800b0d6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00d      	beq.n	800b0fa <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f001 fe69 	bl	800cdc0 <SDMMC_CmdGoIdleState>
 800b0ee:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d004      	beq.n	800b100 <SD_PowerON+0x64>
    {
      return errorstate;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	e0d6      	b.n	800b2a8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b104:	2b01      	cmp	r3, #1
 800b106:	d137      	bne.n	800b178 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2100      	movs	r1, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f001 fe94 	bl	800ce3c <SDMMC_CmdAppCommand>
 800b114:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d02d      	beq.n	800b178 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b11c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b120:	e0c2      	b.n	800b2a8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2100      	movs	r1, #0
 800b128:	4618      	mov	r0, r3
 800b12a:	f001 fe87 	bl	800ce3c <SDMMC_CmdAppCommand>
 800b12e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <SD_PowerON+0x9e>
    {
      return errorstate;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	e0b6      	b.n	800b2a8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	495c      	ldr	r1, [pc, #368]	; (800b2b0 <SD_PowerON+0x214>)
 800b140:	4618      	mov	r0, r3
 800b142:	f001 fe9e 	bl	800ce82 <SDMMC_CmdAppOperCommand>
 800b146:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b14e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b152:	e0a9      	b.n	800b2a8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2100      	movs	r1, #0
 800b15a:	4618      	mov	r0, r3
 800b15c:	f001 fce7 	bl	800cb2e <SDMMC_GetResponse>
 800b160:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	0fdb      	lsrs	r3, r3, #31
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <SD_PowerON+0xd2>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e000      	b.n	800b170 <SD_PowerON+0xd4>
 800b16e:	2300      	movs	r3, #0
 800b170:	61bb      	str	r3, [r7, #24]

    count++;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3301      	adds	r3, #1
 800b176:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b17e:	4293      	cmp	r3, r2
 800b180:	d802      	bhi.n	800b188 <SD_PowerON+0xec>
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0cc      	beq.n	800b122 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b18e:	4293      	cmp	r3, r2
 800b190:	d902      	bls.n	800b198 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b192:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b196:	e087      	b.n	800b2a8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d07e      	beq.n	800b2a0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d17a      	bne.n	800b2a6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d075      	beq.n	800b2a6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1c0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f042 0208 	orr.w	r2, r2, #8
 800b1d0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 ff5e 	bl	800d098 <SDMMC_CmdVoltageSwitch>
 800b1dc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00c      	beq.n	800b1fe <SD_PowerON+0x162>
        {
          return errorstate;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	e05f      	b.n	800b2a8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b1e8:	f7f8 fe26 	bl	8003e38 <HAL_GetTick>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f6:	d102      	bne.n	800b1fe <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800b1f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1fc:	e054      	b.n	800b2a8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b20c:	d1ec      	bne.n	800b1e8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b216:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b226:	d002      	beq.n	800b22e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800b228:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b22c:	e03c      	b.n	800b2a8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800b22e:	2001      	movs	r0, #1
 800b230:	f000 fb44 	bl	800b8bc <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f042 0204 	orr.w	r2, r2, #4
 800b242:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b244:	e00a      	b.n	800b25c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b246:	f7f8 fdf7 	bl	8003e38 <HAL_GetTick>
 800b24a:	4602      	mov	r2, r0
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b254:	d102      	bne.n	800b25c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800b256:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b25a:	e025      	b.n	800b2a8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b26a:	d1ec      	bne.n	800b246 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b274:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b284:	d102      	bne.n	800b28c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b28a:	e00d      	b.n	800b2a8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2213      	movs	r2, #19
 800b292:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f04f 32ff 	mov.w	r2, #4294967295
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38
 800b29e:	e002      	b.n	800b2a6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3720      	adds	r7, #32
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	c1100000 	.word	0xc1100000

0800b2b4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08c      	sub	sp, #48	; 0x30
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b2be:	f7f8 fdbb 	bl	8003e38 <HAL_GetTick>
 800b2c2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f001 fc2d 	bl	800cb2e <SDMMC_GetResponse>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2de:	d102      	bne.n	800b2e6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b2e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2e4:	e0b0      	b.n	800b448 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2140      	movs	r1, #64	; 0x40
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f001 fc5d 	bl	800cbac <SDMMC_CmdBlockLength>
 800b2f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d005      	beq.n	800b306 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	e0a0      	b.n	800b448 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b30e:	041b      	lsls	r3, r3, #16
 800b310:	4619      	mov	r1, r3
 800b312:	4610      	mov	r0, r2
 800b314:	f001 fd92 	bl	800ce3c <SDMMC_CmdAppCommand>
 800b318:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d005      	beq.n	800b32c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	e08d      	b.n	800b448 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b32c:	f04f 33ff 	mov.w	r3, #4294967295
 800b330:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b332:	2340      	movs	r3, #64	; 0x40
 800b334:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b336:	2360      	movs	r3, #96	; 0x60
 800b338:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b33a:	2302      	movs	r3, #2
 800b33c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b33e:	2300      	movs	r3, #0
 800b340:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b342:	2301      	movs	r3, #1
 800b344:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f107 0208 	add.w	r2, r7, #8
 800b34e:	4611      	mov	r1, r2
 800b350:	4618      	mov	r0, r3
 800b352:	f001 fbff 	bl	800cb54 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f001 fe7a 	bl	800d054 <SDMMC_CmdStatusRegister>
 800b360:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d02b      	beq.n	800b3c0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	e069      	b.n	800b448 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d013      	beq.n	800b3aa <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800b382:	2300      	movs	r3, #0
 800b384:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b386:	e00d      	b.n	800b3a4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f001 fb59 	bl	800ca44 <SDMMC_ReadFIFO>
 800b392:	4602      	mov	r2, r0
 800b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b396:	601a      	str	r2, [r3, #0]
        pData++;
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	3304      	adds	r3, #4
 800b39c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	2b07      	cmp	r3, #7
 800b3a8:	d9ee      	bls.n	800b388 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3aa:	f7f8 fd45 	bl	8003e38 <HAL_GetTick>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b8:	d102      	bne.n	800b3c0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3be:	e043      	b.n	800b448 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0d2      	beq.n	800b374 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d4:	f003 0308 	and.w	r3, r3, #8
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b3dc:	2308      	movs	r3, #8
 800b3de:	e033      	b.n	800b448 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e6:	f003 0302 	and.w	r3, r3, #2
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b3ee:	2302      	movs	r3, #2
 800b3f0:	e02a      	b.n	800b448 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f8:	f003 0320 	and.w	r3, r3, #32
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d017      	beq.n	800b430 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b400:	2320      	movs	r3, #32
 800b402:	e021      	b.n	800b448 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4618      	mov	r0, r3
 800b40a:	f001 fb1b 	bl	800ca44 <SDMMC_ReadFIFO>
 800b40e:	4602      	mov	r2, r0
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	601a      	str	r2, [r3, #0]
    pData++;
 800b414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b416:	3304      	adds	r3, #4
 800b418:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b41a:	f7f8 fd0d 	bl	8003e38 <HAL_GetTick>
 800b41e:	4602      	mov	r2, r0
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b428:	d102      	bne.n	800b430 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b42a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b42e:	e00b      	b.n	800b448 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1e2      	bne.n	800b404 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a03      	ldr	r2, [pc, #12]	; (800b450 <SD_SendSDStatus+0x19c>)
 800b444:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3730      	adds	r7, #48	; 0x30
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	18000f3a 	.word	0x18000f3a

0800b454 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b464:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b468:	e018      	b.n	800b49c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b472:	041b      	lsls	r3, r3, #16
 800b474:	4619      	mov	r1, r3
 800b476:	4610      	mov	r0, r2
 800b478:	f001 fdc9 	bl	800d00e <SDMMC_CmdSendStatus>
 800b47c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d001      	beq.n	800b488 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	e009      	b.n	800b49c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2100      	movs	r1, #0
 800b48e:	4618      	mov	r0, r3
 800b490:	f001 fb4d 	bl	800cb2e <SDMMC_GetResponse>
 800b494:	4602      	mov	r2, r0
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f001 fb37 	bl	800cb2e <SDMMC_GetResponse>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ca:	d102      	bne.n	800b4d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b4cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4d0:	e02f      	b.n	800b532 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b4d2:	f107 030c 	add.w	r3, r7, #12
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f879 	bl	800b5d0 <SD_FindSCR>
 800b4de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	e023      	b.n	800b532 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d01c      	beq.n	800b52e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4fc:	041b      	lsls	r3, r3, #16
 800b4fe:	4619      	mov	r1, r3
 800b500:	4610      	mov	r0, r2
 800b502:	f001 fc9b 	bl	800ce3c <SDMMC_CmdAppCommand>
 800b506:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	e00f      	b.n	800b532 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2102      	movs	r1, #2
 800b518:	4618      	mov	r0, r3
 800b51a:	f001 fcd2 	bl	800cec2 <SDMMC_CmdBusWidth>
 800b51e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	e003      	b.n	800b532 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b52a:	2300      	movs	r3, #0
 800b52c:	e001      	b.n	800b532 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b52e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b532:	4618      	mov	r0, r3
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b086      	sub	sp, #24
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b542:	2300      	movs	r3, #0
 800b544:	60fb      	str	r3, [r7, #12]
 800b546:	2300      	movs	r3, #0
 800b548:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2100      	movs	r1, #0
 800b550:	4618      	mov	r0, r3
 800b552:	f001 faec 	bl	800cb2e <SDMMC_GetResponse>
 800b556:	4603      	mov	r3, r0
 800b558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b55c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b560:	d102      	bne.n	800b568 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b566:	e02f      	b.n	800b5c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b568:	f107 030c 	add.w	r3, r7, #12
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f82e 	bl	800b5d0 <SD_FindSCR>
 800b574:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	e023      	b.n	800b5c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b586:	2b00      	cmp	r3, #0
 800b588:	d01c      	beq.n	800b5c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b592:	041b      	lsls	r3, r3, #16
 800b594:	4619      	mov	r1, r3
 800b596:	4610      	mov	r0, r2
 800b598:	f001 fc50 	bl	800ce3c <SDMMC_CmdAppCommand>
 800b59c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	e00f      	b.n	800b5c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f001 fc87 	bl	800cec2 <SDMMC_CmdBusWidth>
 800b5b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d001      	beq.n	800b5c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	e003      	b.n	800b5c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	e001      	b.n	800b5c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b5c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08e      	sub	sp, #56	; 0x38
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b5da:	f7f8 fc2d 	bl	8003e38 <HAL_GetTick>
 800b5de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	60bb      	str	r3, [r7, #8]
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2108      	movs	r1, #8
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 fad8 	bl	800cbac <SDMMC_CmdBlockLength>
 800b5fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b600:	2b00      	cmp	r3, #0
 800b602:	d001      	beq.n	800b608 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b606:	e0ad      	b.n	800b764 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b610:	041b      	lsls	r3, r3, #16
 800b612:	4619      	mov	r1, r3
 800b614:	4610      	mov	r0, r2
 800b616:	f001 fc11 	bl	800ce3c <SDMMC_CmdAppCommand>
 800b61a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	e09e      	b.n	800b764 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b626:	f04f 33ff 	mov.w	r3, #4294967295
 800b62a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b62c:	2308      	movs	r3, #8
 800b62e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b630:	2330      	movs	r3, #48	; 0x30
 800b632:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b634:	2302      	movs	r3, #2
 800b636:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b638:	2300      	movs	r3, #0
 800b63a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b63c:	2301      	movs	r3, #1
 800b63e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f107 0210 	add.w	r2, r7, #16
 800b648:	4611      	mov	r1, r2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 fa82 	bl	800cb54 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4618      	mov	r0, r3
 800b656:	f001 fc57 	bl	800cf08 <SDMMC_CmdSendSCR>
 800b65a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d027      	beq.n	800b6b2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	e07e      	b.n	800b764 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d113      	bne.n	800b69c <SD_FindSCR+0xcc>
 800b674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b676:	2b00      	cmp	r3, #0
 800b678:	d110      	bne.n	800b69c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f001 f9e0 	bl	800ca44 <SDMMC_ReadFIFO>
 800b684:	4603      	mov	r3, r0
 800b686:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f001 f9d9 	bl	800ca44 <SDMMC_ReadFIFO>
 800b692:	4603      	mov	r3, r0
 800b694:	60fb      	str	r3, [r7, #12]
      index++;
 800b696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b698:	3301      	adds	r3, #1
 800b69a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b69c:	f7f8 fbcc 	bl	8003e38 <HAL_GetTick>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6aa:	d102      	bne.n	800b6b2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b6ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6b0:	e058      	b.n	800b764 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6b8:	f240 532a 	movw	r3, #1322	; 0x52a
 800b6bc:	4013      	ands	r3, r2
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0d1      	beq.n	800b666 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c8:	f003 0308 	and.w	r3, r3, #8
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2208      	movs	r2, #8
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b6d8:	2308      	movs	r3, #8
 800b6da:	e043      	b.n	800b764 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e2:	f003 0302 	and.w	r3, r3, #2
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d005      	beq.n	800b6f6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	e036      	b.n	800b764 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6fc:	f003 0320 	and.w	r3, r3, #32
 800b700:	2b00      	cmp	r3, #0
 800b702:	d005      	beq.n	800b710 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2220      	movs	r2, #32
 800b70a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b70c:	2320      	movs	r3, #32
 800b70e:	e029      	b.n	800b764 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a15      	ldr	r2, [pc, #84]	; (800b76c <SD_FindSCR+0x19c>)
 800b716:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	061a      	lsls	r2, r3, #24
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	021b      	lsls	r3, r3, #8
 800b720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b724:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	0a1b      	lsrs	r3, r3, #8
 800b72a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b72e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	0e1b      	lsrs	r3, r3, #24
 800b734:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b738:	601a      	str	r2, [r3, #0]
    scr++;
 800b73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73c:	3304      	adds	r3, #4
 800b73e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	061a      	lsls	r2, r3, #24
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	021b      	lsls	r3, r3, #8
 800b748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b74c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	0a1b      	lsrs	r3, r3, #8
 800b752:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b756:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	0e1b      	lsrs	r3, r3, #24
 800b75c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b760:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3738      	adds	r7, #56	; 0x38
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	18000f3a 	.word	0x18000f3a

0800b770 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b782:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d03f      	beq.n	800b80a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b78a:	2300      	movs	r3, #0
 800b78c:	617b      	str	r3, [r7, #20]
 800b78e:	e033      	b.n	800b7f8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4618      	mov	r0, r3
 800b796:	f001 f955 	bl	800ca44 <SDMMC_ReadFIFO>
 800b79a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	0a1b      	lsrs	r3, r3, #8
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	0c1b      	lsrs	r3, r3, #16
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	0e1b      	lsrs	r3, r3, #24
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	617b      	str	r3, [r7, #20]
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	2b07      	cmp	r3, #7
 800b7fc:	d9c8      	bls.n	800b790 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b80a:	bf00      	nop
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b086      	sub	sp, #24
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b824:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d043      	beq.n	800b8b4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b82c:	2300      	movs	r3, #0
 800b82e:	617b      	str	r3, [r7, #20]
 800b830:	e037      	b.n	800b8a2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3301      	adds	r3, #1
 800b83c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	3b01      	subs	r3, #1
 800b842:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	021a      	lsls	r2, r3, #8
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3301      	adds	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	3b01      	subs	r3, #1
 800b85a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	041a      	lsls	r2, r3, #16
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	4313      	orrs	r3, r2
 800b866:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3301      	adds	r3, #1
 800b86c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	3b01      	subs	r3, #1
 800b872:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	061a      	lsls	r2, r3, #24
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3301      	adds	r3, #1
 800b884:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	3b01      	subs	r3, #1
 800b88a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f107 0208 	add.w	r2, r7, #8
 800b894:	4611      	mov	r1, r2
 800b896:	4618      	mov	r0, r3
 800b898:	f001 f8e1 	bl	800ca5e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	617b      	str	r3, [r7, #20]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2b07      	cmp	r3, #7
 800b8a6:	d9c4      	bls.n	800b832 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b8b4:	bf00      	nop
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800b8c6:	bf00      	nop
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800b8da:	bf00      	nop
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800b8ee:	bf00      	nop
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b083      	sub	sp, #12
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800b902:	bf00      	nop
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	e095      	b.n	800ba60 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d108      	bne.n	800b94e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b944:	d009      	beq.n	800b95a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	61da      	str	r2, [r3, #28]
 800b94c:	e005      	b.n	800b95a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d106      	bne.n	800b97a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7f7 ffff 	bl	8003978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2202      	movs	r2, #2
 800b97e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b990:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b99a:	d902      	bls.n	800b9a2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b99c:	2300      	movs	r3, #0
 800b99e:	60fb      	str	r3, [r7, #12]
 800b9a0:	e002      	b.n	800b9a8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b9a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b9b0:	d007      	beq.n	800b9c2 <HAL_SPI_Init+0xa0>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9ba:	d002      	beq.n	800b9c2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9f0:	431a      	orrs	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba04:	ea42 0103 	orr.w	r1, r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	430a      	orrs	r2, r1
 800ba16:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	0c1b      	lsrs	r3, r3, #16
 800ba1e:	f003 0204 	and.w	r2, r3, #4
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba26:	f003 0310 	and.w	r3, r3, #16
 800ba2a:	431a      	orrs	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba30:	f003 0308 	and.w	r3, r3, #8
 800ba34:	431a      	orrs	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ba3e:	ea42 0103 	orr.w	r1, r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	430a      	orrs	r2, r1
 800ba4e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08a      	sub	sp, #40	; 0x28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ba76:	2301      	movs	r3, #1
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d101      	bne.n	800ba8e <HAL_SPI_TransmitReceive+0x26>
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	e1fb      	b.n	800be86 <HAL_SPI_TransmitReceive+0x41e>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba96:	f7f8 f9cf 	bl	8003e38 <HAL_GetTick>
 800ba9a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800baa2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800baaa:	887b      	ldrh	r3, [r7, #2]
 800baac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800baae:	887b      	ldrh	r3, [r7, #2]
 800bab0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bab2:	7efb      	ldrb	r3, [r7, #27]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d00e      	beq.n	800bad6 <HAL_SPI_TransmitReceive+0x6e>
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800babe:	d106      	bne.n	800bace <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d102      	bne.n	800bace <HAL_SPI_TransmitReceive+0x66>
 800bac8:	7efb      	ldrb	r3, [r7, #27]
 800baca:	2b04      	cmp	r3, #4
 800bacc:	d003      	beq.n	800bad6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bace:	2302      	movs	r3, #2
 800bad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bad4:	e1cd      	b.n	800be72 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d005      	beq.n	800bae8 <HAL_SPI_TransmitReceive+0x80>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d002      	beq.n	800bae8 <HAL_SPI_TransmitReceive+0x80>
 800bae2:	887b      	ldrh	r3, [r7, #2]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d103      	bne.n	800baf0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800baee:	e1c0      	b.n	800be72 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	d003      	beq.n	800bb04 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2205      	movs	r2, #5
 800bb00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	887a      	ldrh	r2, [r7, #2]
 800bb14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	887a      	ldrh	r2, [r7, #2]
 800bb1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	887a      	ldrh	r2, [r7, #2]
 800bb2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	887a      	ldrh	r2, [r7, #2]
 800bb30:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb46:	d802      	bhi.n	800bb4e <HAL_SPI_TransmitReceive+0xe6>
 800bb48:	8a3b      	ldrh	r3, [r7, #16]
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d908      	bls.n	800bb60 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bb5c:	605a      	str	r2, [r3, #4]
 800bb5e:	e007      	b.n	800bb70 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	685a      	ldr	r2, [r3, #4]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bb6e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7a:	2b40      	cmp	r3, #64	; 0x40
 800bb7c:	d007      	beq.n	800bb8e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb96:	d97c      	bls.n	800bc92 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <HAL_SPI_TransmitReceive+0x13e>
 800bba0:	8a7b      	ldrh	r3, [r7, #18]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d169      	bne.n	800bc7a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbaa:	881a      	ldrh	r2, [r3, #0]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb6:	1c9a      	adds	r2, r3, #2
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbca:	e056      	b.n	800bc7a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	f003 0302 	and.w	r3, r3, #2
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d11b      	bne.n	800bc12 <HAL_SPI_TransmitReceive+0x1aa>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d016      	beq.n	800bc12 <HAL_SPI_TransmitReceive+0x1aa>
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d113      	bne.n	800bc12 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbee:	881a      	ldrh	r2, [r3, #0]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfa:	1c9a      	adds	r2, r3, #2
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d11c      	bne.n	800bc5a <HAL_SPI_TransmitReceive+0x1f2>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d016      	beq.n	800bc5a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68da      	ldr	r2, [r3, #12]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc36:	b292      	uxth	r2, r2
 800bc38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	1c9a      	adds	r2, r3, #2
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc56:	2301      	movs	r3, #1
 800bc58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bc5a:	f7f8 f8ed 	bl	8003e38 <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d807      	bhi.n	800bc7a <HAL_SPI_TransmitReceive+0x212>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d003      	beq.n	800bc7a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bc78:	e0fb      	b.n	800be72 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1a3      	bne.n	800bbcc <HAL_SPI_TransmitReceive+0x164>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d19d      	bne.n	800bbcc <HAL_SPI_TransmitReceive+0x164>
 800bc90:	e0df      	b.n	800be52 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d003      	beq.n	800bca2 <HAL_SPI_TransmitReceive+0x23a>
 800bc9a:	8a7b      	ldrh	r3, [r7, #18]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	f040 80cb 	bne.w	800be38 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d912      	bls.n	800bcd2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb0:	881a      	ldrh	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcbc:	1c9a      	adds	r2, r3, #2
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	3b02      	subs	r3, #2
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bcd0:	e0b2      	b.n	800be38 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	330c      	adds	r3, #12
 800bcdc:	7812      	ldrb	r2, [r2, #0]
 800bcde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce4:	1c5a      	adds	r2, r3, #1
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bcf8:	e09e      	b.n	800be38 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f003 0302 	and.w	r3, r3, #2
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d134      	bne.n	800bd72 <HAL_SPI_TransmitReceive+0x30a>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d02f      	beq.n	800bd72 <HAL_SPI_TransmitReceive+0x30a>
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d12c      	bne.n	800bd72 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d912      	bls.n	800bd48 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd26:	881a      	ldrh	r2, [r3, #0]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd32:	1c9a      	adds	r2, r3, #2
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	3b02      	subs	r3, #2
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd46:	e012      	b.n	800bd6e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	330c      	adds	r3, #12
 800bd52:	7812      	ldrb	r2, [r2, #0]
 800bd54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5a:	1c5a      	adds	r2, r3, #1
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	3b01      	subs	r3, #1
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	f003 0301 	and.w	r3, r3, #1
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d148      	bne.n	800be12 <HAL_SPI_TransmitReceive+0x3aa>
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d042      	beq.n	800be12 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d923      	bls.n	800bde0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68da      	ldr	r2, [r3, #12]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda2:	b292      	uxth	r2, r2
 800bda4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdaa:	1c9a      	adds	r2, r3, #2
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	3b02      	subs	r3, #2
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d81f      	bhi.n	800be0e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bddc:	605a      	str	r2, [r3, #4]
 800bdde:	e016      	b.n	800be0e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f103 020c 	add.w	r2, r3, #12
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdec:	7812      	ldrb	r2, [r2, #0]
 800bdee:	b2d2      	uxtb	r2, r2
 800bdf0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be02:	b29b      	uxth	r3, r3
 800be04:	3b01      	subs	r3, #1
 800be06:	b29a      	uxth	r2, r3
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be0e:	2301      	movs	r3, #1
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800be12:	f7f8 f811 	bl	8003e38 <HAL_GetTick>
 800be16:	4602      	mov	r2, r0
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be1e:	429a      	cmp	r2, r3
 800be20:	d803      	bhi.n	800be2a <HAL_SPI_TransmitReceive+0x3c2>
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be28:	d102      	bne.n	800be30 <HAL_SPI_TransmitReceive+0x3c8>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d103      	bne.n	800be38 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800be30:	2303      	movs	r3, #3
 800be32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800be36:	e01c      	b.n	800be72 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f47f af5b 	bne.w	800bcfa <HAL_SPI_TransmitReceive+0x292>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f47f af54 	bne.w	800bcfa <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be52:	69fa      	ldr	r2, [r7, #28]
 800be54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f000 f938 	bl	800c0cc <SPI_EndRxTxTransaction>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d006      	beq.n	800be70 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2220      	movs	r2, #32
 800be6c:	661a      	str	r2, [r3, #96]	; 0x60
 800be6e:	e000      	b.n	800be72 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800be70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800be82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800be86:	4618      	mov	r0, r3
 800be88:	3728      	adds	r7, #40	; 0x28
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
	...

0800be90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	603b      	str	r3, [r7, #0]
 800be9c:	4613      	mov	r3, r2
 800be9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bea0:	f7f7 ffca 	bl	8003e38 <HAL_GetTick>
 800bea4:	4602      	mov	r2, r0
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4413      	add	r3, r2
 800beae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800beb0:	f7f7 ffc2 	bl	8003e38 <HAL_GetTick>
 800beb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800beb6:	4b39      	ldr	r3, [pc, #228]	; (800bf9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	015b      	lsls	r3, r3, #5
 800bebc:	0d1b      	lsrs	r3, r3, #20
 800bebe:	69fa      	ldr	r2, [r7, #28]
 800bec0:	fb02 f303 	mul.w	r3, r2, r3
 800bec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bec6:	e054      	b.n	800bf72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bece:	d050      	beq.n	800bf72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bed0:	f7f7 ffb2 	bl	8003e38 <HAL_GetTick>
 800bed4:	4602      	mov	r2, r0
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	69fa      	ldr	r2, [r7, #28]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d902      	bls.n	800bee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d13d      	bne.n	800bf62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800befe:	d111      	bne.n	800bf24 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf08:	d004      	beq.n	800bf14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf12:	d107      	bne.n	800bf24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf2c:	d10f      	bne.n	800bf4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	e017      	b.n	800bf92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d101      	bne.n	800bf6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	689a      	ldr	r2, [r3, #8]
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	bf0c      	ite	eq
 800bf82:	2301      	moveq	r3, #1
 800bf84:	2300      	movne	r3, #0
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	461a      	mov	r2, r3
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d19b      	bne.n	800bec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3720      	adds	r7, #32
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20000140 	.word	0x20000140

0800bfa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08a      	sub	sp, #40	; 0x28
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
 800bfac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bfb2:	f7f7 ff41 	bl	8003e38 <HAL_GetTick>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	1a9b      	subs	r3, r3, r2
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bfc2:	f7f7 ff39 	bl	8003e38 <HAL_GetTick>
 800bfc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	330c      	adds	r3, #12
 800bfce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bfd0:	4b3d      	ldr	r3, [pc, #244]	; (800c0c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	00da      	lsls	r2, r3, #3
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	0d1b      	lsrs	r3, r3, #20
 800bfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe2:	fb02 f303 	mul.w	r3, r2, r3
 800bfe6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bfe8:	e060      	b.n	800c0ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bff0:	d107      	bne.n	800c002 <SPI_WaitFifoStateUntilTimeout+0x62>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d104      	bne.n	800c002 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c000:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c008:	d050      	beq.n	800c0ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c00a:	f7f7 ff15 	bl	8003e38 <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	6a3b      	ldr	r3, [r7, #32]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c016:	429a      	cmp	r2, r3
 800c018:	d902      	bls.n	800c020 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d13d      	bne.n	800c09c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c02e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c038:	d111      	bne.n	800c05e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c042:	d004      	beq.n	800c04e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c04c:	d107      	bne.n	800c05e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c05c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c066:	d10f      	bne.n	800c088 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c086:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c098:	2303      	movs	r3, #3
 800c09a:	e010      	b.n	800c0be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d101      	bne.n	800c0a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	689a      	ldr	r2, [r3, #8]
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d196      	bne.n	800bfea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3728      	adds	r7, #40	; 0x28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20000140 	.word	0x20000140

0800c0cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b086      	sub	sp, #24
 800c0d0:	af02      	add	r7, sp, #8
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f7ff ff5b 	bl	800bfa0 <SPI_WaitFifoStateUntilTimeout>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d007      	beq.n	800c100 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0f4:	f043 0220 	orr.w	r2, r3, #32
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e027      	b.n	800c150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	2200      	movs	r2, #0
 800c108:	2180      	movs	r1, #128	; 0x80
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f7ff fec0 	bl	800be90 <SPI_WaitFlagStateUntilTimeout>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d007      	beq.n	800c126 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c11a:	f043 0220 	orr.w	r2, r3, #32
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	e014      	b.n	800c150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7ff ff34 	bl	800bfa0 <SPI_WaitFifoStateUntilTimeout>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d007      	beq.n	800c14e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c142:	f043 0220 	orr.w	r2, r3, #32
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c14a:	2303      	movs	r3, #3
 800c14c:	e000      	b.n	800c150 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d101      	bne.n	800c16a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e049      	b.n	800c1fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7f7 fce2 	bl	8003b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2202      	movs	r2, #2
 800c188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3304      	adds	r3, #4
 800c194:	4619      	mov	r1, r3
 800c196:	4610      	mov	r0, r2
 800c198:	f000 fa50 	bl	800c63c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b082      	sub	sp, #8
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	f003 0302 	and.w	r3, r3, #2
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d122      	bne.n	800c262 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	f003 0302 	and.w	r3, r3, #2
 800c226:	2b02      	cmp	r3, #2
 800c228:	d11b      	bne.n	800c262 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f06f 0202 	mvn.w	r2, #2
 800c232:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	f003 0303 	and.w	r3, r3, #3
 800c244:	2b00      	cmp	r3, #0
 800c246:	d003      	beq.n	800c250 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 f9d8 	bl	800c5fe <HAL_TIM_IC_CaptureCallback>
 800c24e:	e005      	b.n	800c25c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f9ca 	bl	800c5ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f9db 	bl	800c612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	f003 0304 	and.w	r3, r3, #4
 800c26c:	2b04      	cmp	r3, #4
 800c26e:	d122      	bne.n	800c2b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	f003 0304 	and.w	r3, r3, #4
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	d11b      	bne.n	800c2b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f06f 0204 	mvn.w	r2, #4
 800c286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2202      	movs	r2, #2
 800c28c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d003      	beq.n	800c2a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 f9ae 	bl	800c5fe <HAL_TIM_IC_CaptureCallback>
 800c2a2:	e005      	b.n	800c2b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f9a0 	bl	800c5ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f9b1 	bl	800c612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	f003 0308 	and.w	r3, r3, #8
 800c2c0:	2b08      	cmp	r3, #8
 800c2c2:	d122      	bne.n	800c30a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	f003 0308 	and.w	r3, r3, #8
 800c2ce:	2b08      	cmp	r3, #8
 800c2d0:	d11b      	bne.n	800c30a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f06f 0208 	mvn.w	r2, #8
 800c2da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2204      	movs	r2, #4
 800c2e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	69db      	ldr	r3, [r3, #28]
 800c2e8:	f003 0303 	and.w	r3, r3, #3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d003      	beq.n	800c2f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f984 	bl	800c5fe <HAL_TIM_IC_CaptureCallback>
 800c2f6:	e005      	b.n	800c304 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f976 	bl	800c5ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f987 	bl	800c612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	f003 0310 	and.w	r3, r3, #16
 800c314:	2b10      	cmp	r3, #16
 800c316:	d122      	bne.n	800c35e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	f003 0310 	and.w	r3, r3, #16
 800c322:	2b10      	cmp	r3, #16
 800c324:	d11b      	bne.n	800c35e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f06f 0210 	mvn.w	r2, #16
 800c32e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2208      	movs	r2, #8
 800c334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	69db      	ldr	r3, [r3, #28]
 800c33c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c340:	2b00      	cmp	r3, #0
 800c342:	d003      	beq.n	800c34c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f95a 	bl	800c5fe <HAL_TIM_IC_CaptureCallback>
 800c34a:	e005      	b.n	800c358 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f94c 	bl	800c5ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f95d 	bl	800c612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	f003 0301 	and.w	r3, r3, #1
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d10e      	bne.n	800c38a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	2b01      	cmp	r3, #1
 800c378:	d107      	bne.n	800c38a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f06f 0201 	mvn.w	r2, #1
 800c382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f926 	bl	800c5d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c394:	2b80      	cmp	r3, #128	; 0x80
 800c396:	d10e      	bne.n	800c3b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3a2:	2b80      	cmp	r3, #128	; 0x80
 800c3a4:	d107      	bne.n	800c3b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c3ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fb09 	bl	800c9c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c4:	d10e      	bne.n	800c3e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3d0:	2b80      	cmp	r3, #128	; 0x80
 800c3d2:	d107      	bne.n	800c3e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c3dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fafc 	bl	800c9dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ee:	2b40      	cmp	r3, #64	; 0x40
 800c3f0:	d10e      	bne.n	800c410 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3fc:	2b40      	cmp	r3, #64	; 0x40
 800c3fe:	d107      	bne.n	800c410 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f90b 	bl	800c626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	f003 0320 	and.w	r3, r3, #32
 800c41a:	2b20      	cmp	r3, #32
 800c41c:	d10e      	bne.n	800c43c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	f003 0320 	and.w	r3, r3, #32
 800c428:	2b20      	cmp	r3, #32
 800c42a:	d107      	bne.n	800c43c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f06f 0220 	mvn.w	r2, #32
 800c434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fabc 	bl	800c9b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c43c:	bf00      	nop
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d101      	bne.n	800c460 <HAL_TIM_ConfigClockSource+0x1c>
 800c45c:	2302      	movs	r3, #2
 800c45e:	e0b6      	b.n	800c5ce <HAL_TIM_ConfigClockSource+0x18a>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2202      	movs	r2, #2
 800c46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c47e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c48a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c49c:	d03e      	beq.n	800c51c <HAL_TIM_ConfigClockSource+0xd8>
 800c49e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4a2:	f200 8087 	bhi.w	800c5b4 <HAL_TIM_ConfigClockSource+0x170>
 800c4a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4aa:	f000 8086 	beq.w	800c5ba <HAL_TIM_ConfigClockSource+0x176>
 800c4ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4b2:	d87f      	bhi.n	800c5b4 <HAL_TIM_ConfigClockSource+0x170>
 800c4b4:	2b70      	cmp	r3, #112	; 0x70
 800c4b6:	d01a      	beq.n	800c4ee <HAL_TIM_ConfigClockSource+0xaa>
 800c4b8:	2b70      	cmp	r3, #112	; 0x70
 800c4ba:	d87b      	bhi.n	800c5b4 <HAL_TIM_ConfigClockSource+0x170>
 800c4bc:	2b60      	cmp	r3, #96	; 0x60
 800c4be:	d050      	beq.n	800c562 <HAL_TIM_ConfigClockSource+0x11e>
 800c4c0:	2b60      	cmp	r3, #96	; 0x60
 800c4c2:	d877      	bhi.n	800c5b4 <HAL_TIM_ConfigClockSource+0x170>
 800c4c4:	2b50      	cmp	r3, #80	; 0x50
 800c4c6:	d03c      	beq.n	800c542 <HAL_TIM_ConfigClockSource+0xfe>
 800c4c8:	2b50      	cmp	r3, #80	; 0x50
 800c4ca:	d873      	bhi.n	800c5b4 <HAL_TIM_ConfigClockSource+0x170>
 800c4cc:	2b40      	cmp	r3, #64	; 0x40
 800c4ce:	d058      	beq.n	800c582 <HAL_TIM_ConfigClockSource+0x13e>
 800c4d0:	2b40      	cmp	r3, #64	; 0x40
 800c4d2:	d86f      	bhi.n	800c5b4 <HAL_TIM_ConfigClockSource+0x170>
 800c4d4:	2b30      	cmp	r3, #48	; 0x30
 800c4d6:	d064      	beq.n	800c5a2 <HAL_TIM_ConfigClockSource+0x15e>
 800c4d8:	2b30      	cmp	r3, #48	; 0x30
 800c4da:	d86b      	bhi.n	800c5b4 <HAL_TIM_ConfigClockSource+0x170>
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	d060      	beq.n	800c5a2 <HAL_TIM_ConfigClockSource+0x15e>
 800c4e0:	2b20      	cmp	r3, #32
 800c4e2:	d867      	bhi.n	800c5b4 <HAL_TIM_ConfigClockSource+0x170>
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d05c      	beq.n	800c5a2 <HAL_TIM_ConfigClockSource+0x15e>
 800c4e8:	2b10      	cmp	r3, #16
 800c4ea:	d05a      	beq.n	800c5a2 <HAL_TIM_ConfigClockSource+0x15e>
 800c4ec:	e062      	b.n	800c5b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6818      	ldr	r0, [r3, #0]
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	6899      	ldr	r1, [r3, #8]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	f000 f9b1 	bl	800c864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	609a      	str	r2, [r3, #8]
      break;
 800c51a:	e04f      	b.n	800c5bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6818      	ldr	r0, [r3, #0]
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	6899      	ldr	r1, [r3, #8]
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	f000 f99a 	bl	800c864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	689a      	ldr	r2, [r3, #8]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c53e:	609a      	str	r2, [r3, #8]
      break;
 800c540:	e03c      	b.n	800c5bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	6859      	ldr	r1, [r3, #4]
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	461a      	mov	r2, r3
 800c550:	f000 f90e 	bl	800c770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2150      	movs	r1, #80	; 0x50
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 f967 	bl	800c82e <TIM_ITRx_SetConfig>
      break;
 800c560:	e02c      	b.n	800c5bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6818      	ldr	r0, [r3, #0]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	6859      	ldr	r1, [r3, #4]
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	461a      	mov	r2, r3
 800c570:	f000 f92d 	bl	800c7ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2160      	movs	r1, #96	; 0x60
 800c57a:	4618      	mov	r0, r3
 800c57c:	f000 f957 	bl	800c82e <TIM_ITRx_SetConfig>
      break;
 800c580:	e01c      	b.n	800c5bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6818      	ldr	r0, [r3, #0]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	6859      	ldr	r1, [r3, #4]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	461a      	mov	r2, r3
 800c590:	f000 f8ee 	bl	800c770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2140      	movs	r1, #64	; 0x40
 800c59a:	4618      	mov	r0, r3
 800c59c:	f000 f947 	bl	800c82e <TIM_ITRx_SetConfig>
      break;
 800c5a0:	e00c      	b.n	800c5bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	f000 f93e 	bl	800c82e <TIM_ITRx_SetConfig>
      break;
 800c5b2:	e003      	b.n	800c5bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5b8:	e000      	b.n	800c5bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c5ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b083      	sub	sp, #12
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c5de:	bf00      	nop
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5f2:	bf00      	nop
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b083      	sub	sp, #12
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c612:	b480      	push	{r7}
 800c614:	b083      	sub	sp, #12
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c61a:	bf00      	nop
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c626:	b480      	push	{r7}
 800c628:	b083      	sub	sp, #12
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c62e:	bf00      	nop
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
	...

0800c63c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a40      	ldr	r2, [pc, #256]	; (800c750 <TIM_Base_SetConfig+0x114>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d013      	beq.n	800c67c <TIM_Base_SetConfig+0x40>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c65a:	d00f      	beq.n	800c67c <TIM_Base_SetConfig+0x40>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a3d      	ldr	r2, [pc, #244]	; (800c754 <TIM_Base_SetConfig+0x118>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d00b      	beq.n	800c67c <TIM_Base_SetConfig+0x40>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a3c      	ldr	r2, [pc, #240]	; (800c758 <TIM_Base_SetConfig+0x11c>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d007      	beq.n	800c67c <TIM_Base_SetConfig+0x40>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4a3b      	ldr	r2, [pc, #236]	; (800c75c <TIM_Base_SetConfig+0x120>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d003      	beq.n	800c67c <TIM_Base_SetConfig+0x40>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4a3a      	ldr	r2, [pc, #232]	; (800c760 <TIM_Base_SetConfig+0x124>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d108      	bne.n	800c68e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a2f      	ldr	r2, [pc, #188]	; (800c750 <TIM_Base_SetConfig+0x114>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d01f      	beq.n	800c6d6 <TIM_Base_SetConfig+0x9a>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c69c:	d01b      	beq.n	800c6d6 <TIM_Base_SetConfig+0x9a>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a2c      	ldr	r2, [pc, #176]	; (800c754 <TIM_Base_SetConfig+0x118>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d017      	beq.n	800c6d6 <TIM_Base_SetConfig+0x9a>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a2b      	ldr	r2, [pc, #172]	; (800c758 <TIM_Base_SetConfig+0x11c>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d013      	beq.n	800c6d6 <TIM_Base_SetConfig+0x9a>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a2a      	ldr	r2, [pc, #168]	; (800c75c <TIM_Base_SetConfig+0x120>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d00f      	beq.n	800c6d6 <TIM_Base_SetConfig+0x9a>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a29      	ldr	r2, [pc, #164]	; (800c760 <TIM_Base_SetConfig+0x124>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d00b      	beq.n	800c6d6 <TIM_Base_SetConfig+0x9a>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a28      	ldr	r2, [pc, #160]	; (800c764 <TIM_Base_SetConfig+0x128>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d007      	beq.n	800c6d6 <TIM_Base_SetConfig+0x9a>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a27      	ldr	r2, [pc, #156]	; (800c768 <TIM_Base_SetConfig+0x12c>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d003      	beq.n	800c6d6 <TIM_Base_SetConfig+0x9a>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a26      	ldr	r2, [pc, #152]	; (800c76c <TIM_Base_SetConfig+0x130>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d108      	bne.n	800c6e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a10      	ldr	r2, [pc, #64]	; (800c750 <TIM_Base_SetConfig+0x114>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d00f      	beq.n	800c734 <TIM_Base_SetConfig+0xf8>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a12      	ldr	r2, [pc, #72]	; (800c760 <TIM_Base_SetConfig+0x124>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d00b      	beq.n	800c734 <TIM_Base_SetConfig+0xf8>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a11      	ldr	r2, [pc, #68]	; (800c764 <TIM_Base_SetConfig+0x128>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d007      	beq.n	800c734 <TIM_Base_SetConfig+0xf8>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a10      	ldr	r2, [pc, #64]	; (800c768 <TIM_Base_SetConfig+0x12c>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d003      	beq.n	800c734 <TIM_Base_SetConfig+0xf8>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a0f      	ldr	r2, [pc, #60]	; (800c76c <TIM_Base_SetConfig+0x130>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d103      	bne.n	800c73c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	691a      	ldr	r2, [r3, #16]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	615a      	str	r2, [r3, #20]
}
 800c742:	bf00      	nop
 800c744:	3714      	adds	r7, #20
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	40012c00 	.word	0x40012c00
 800c754:	40000400 	.word	0x40000400
 800c758:	40000800 	.word	0x40000800
 800c75c:	40000c00 	.word	0x40000c00
 800c760:	40013400 	.word	0x40013400
 800c764:	40014000 	.word	0x40014000
 800c768:	40014400 	.word	0x40014400
 800c76c:	40014800 	.word	0x40014800

0800c770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6a1b      	ldr	r3, [r3, #32]
 800c780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	f023 0201 	bic.w	r2, r3, #1
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c79a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	011b      	lsls	r3, r3, #4
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	f023 030a 	bic.w	r3, r3, #10
 800c7ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	621a      	str	r2, [r3, #32]
}
 800c7c2:	bf00      	nop
 800c7c4:	371c      	adds	r7, #28
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b087      	sub	sp, #28
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	60f8      	str	r0, [r7, #12]
 800c7d6:	60b9      	str	r1, [r7, #8]
 800c7d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	f023 0210 	bic.w	r2, r3, #16
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c7f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	031b      	lsls	r3, r3, #12
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	4313      	orrs	r3, r2
 800c802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c80a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	011b      	lsls	r3, r3, #4
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	4313      	orrs	r3, r2
 800c814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	621a      	str	r2, [r3, #32]
}
 800c822:	bf00      	nop
 800c824:	371c      	adds	r7, #28
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c82e:	b480      	push	{r7}
 800c830:	b085      	sub	sp, #20
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	f043 0307 	orr.w	r3, r3, #7
 800c850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	609a      	str	r2, [r3, #8]
}
 800c858:	bf00      	nop
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c864:	b480      	push	{r7}
 800c866:	b087      	sub	sp, #28
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c87e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	021a      	lsls	r2, r3, #8
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	431a      	orrs	r2, r3
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	697a      	ldr	r2, [r7, #20]
 800c88e:	4313      	orrs	r3, r2
 800c890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	609a      	str	r2, [r3, #8]
}
 800c898:	bf00      	nop
 800c89a:	371c      	adds	r7, #28
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d101      	bne.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	e068      	b.n	800c98e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2202      	movs	r2, #2
 800c8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a2e      	ldr	r2, [pc, #184]	; (800c99c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d004      	beq.n	800c8f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a2d      	ldr	r2, [pc, #180]	; (800c9a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d108      	bne.n	800c902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c8f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	68fa      	ldr	r2, [r7, #12]
 800c910:	4313      	orrs	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a1e      	ldr	r2, [pc, #120]	; (800c99c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d01d      	beq.n	800c962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c92e:	d018      	beq.n	800c962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a1b      	ldr	r2, [pc, #108]	; (800c9a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d013      	beq.n	800c962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a1a      	ldr	r2, [pc, #104]	; (800c9a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d00e      	beq.n	800c962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a18      	ldr	r2, [pc, #96]	; (800c9ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d009      	beq.n	800c962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a13      	ldr	r2, [pc, #76]	; (800c9a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d004      	beq.n	800c962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a14      	ldr	r2, [pc, #80]	; (800c9b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d10c      	bne.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	4313      	orrs	r3, r2
 800c972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	40012c00 	.word	0x40012c00
 800c9a0:	40013400 	.word	0x40013400
 800c9a4:	40000400 	.word	0x40000400
 800c9a8:	40000800 	.word	0x40000800
 800c9ac:	40000c00 	.word	0x40000c00
 800c9b0:	40014000 	.word	0x40014000

0800c9b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9bc:	bf00      	nop
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	b480      	push	{r7}
 800c9f4:	b085      	sub	sp, #20
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	f107 001c 	add.w	r0, r7, #28
 800c9fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800ca06:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ca08:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ca0a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ca0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ca12:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ca16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	4b07      	ldr	r3, [pc, #28]	; (800ca40 <SDMMC_Init+0x50>)
 800ca24:	4013      	ands	r3, r2
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ca2e:	2300      	movs	r3, #0
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3714      	adds	r7, #20
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	b004      	add	sp, #16
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	ffc02c00 	.word	0xffc02c00

0800ca44 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b083      	sub	sp, #12
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f043 0203 	orr.w	r2, r3, #3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ca94:	2002      	movs	r0, #2
 800ca96:	f7f7 f9db 	bl	8003e50 <HAL_Delay>

  return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0303 	and.w	r3, r3, #3
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800caca:	2300      	movs	r3, #0
 800cacc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cade:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cae4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800caea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68da      	ldr	r2, [r3, #12]
 800caf6:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <SDMMC_SendCommand+0x50>)
 800caf8:	4013      	ands	r3, r2
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	431a      	orrs	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3714      	adds	r7, #20
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	fffee0c0 	.word	0xfffee0c0

0800cb14 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	b2db      	uxtb	r3, r3
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b085      	sub	sp, #20
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3314      	adds	r3, #20
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	4413      	add	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb7a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cb80:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cb86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cb9e:	2300      	movs	r3, #0

}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b088      	sub	sp, #32
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cbba:	2310      	movs	r3, #16
 800cbbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbce:	f107 0308 	add.w	r3, r7, #8
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff ff73 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cbda:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbde:	2110      	movs	r1, #16
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fa7b 	bl	800d0dc <SDMMC_GetCmdResp1>
 800cbe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbe8:	69fb      	ldr	r3, [r7, #28]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3720      	adds	r7, #32
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b088      	sub	sp, #32
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cc00:	2311      	movs	r3, #17
 800cc02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc14:	f107 0308 	add.w	r3, r7, #8
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff ff50 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cc20:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc24:	2111      	movs	r1, #17
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fa58 	bl	800d0dc <SDMMC_GetCmdResp1>
 800cc2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc2e:	69fb      	ldr	r3, [r7, #28]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3720      	adds	r7, #32
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cc46:	2312      	movs	r3, #18
 800cc48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc50:	2300      	movs	r3, #0
 800cc52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff ff2d 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cc66:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc6a:	2112      	movs	r1, #18
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 fa35 	bl	800d0dc <SDMMC_GetCmdResp1>
 800cc72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc74:	69fb      	ldr	r3, [r7, #28]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3720      	adds	r7, #32
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b088      	sub	sp, #32
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cc8c:	2318      	movs	r3, #24
 800cc8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc96:	2300      	movs	r3, #0
 800cc98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cca0:	f107 0308 	add.w	r3, r7, #8
 800cca4:	4619      	mov	r1, r3
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7ff ff0a 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ccac:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccb0:	2118      	movs	r1, #24
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fa12 	bl	800d0dc <SDMMC_GetCmdResp1>
 800ccb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccba:	69fb      	ldr	r3, [r7, #28]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3720      	adds	r7, #32
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b088      	sub	sp, #32
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ccd2:	2319      	movs	r3, #25
 800ccd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cce4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cce6:	f107 0308 	add.w	r3, r7, #8
 800ccea:	4619      	mov	r1, r3
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7ff fee7 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ccf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccf6:	2119      	movs	r1, #25
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 f9ef 	bl	800d0dc <SDMMC_GetCmdResp1>
 800ccfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd00:	69fb      	ldr	r3, [r7, #28]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3720      	adds	r7, #32
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
	...

0800cd0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd18:	230c      	movs	r3, #12
 800cd1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd2a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd44:	f107 0308 	add.w	r3, r7, #8
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff feb8 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cd50:	4a08      	ldr	r2, [pc, #32]	; (800cd74 <SDMMC_CmdStopTransfer+0x68>)
 800cd52:	210c      	movs	r1, #12
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f9c1 	bl	800d0dc <SDMMC_GetCmdResp1>
 800cd5a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800cd68:	69fb      	ldr	r3, [r7, #28]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3720      	adds	r7, #32
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	05f5e100 	.word	0x05f5e100

0800cd78 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08a      	sub	sp, #40	; 0x28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cd88:	2307      	movs	r3, #7
 800cd8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd90:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd9a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd9c:	f107 0310 	add.w	r3, r7, #16
 800cda0:	4619      	mov	r1, r3
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7ff fe8c 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cda8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdac:	2107      	movs	r1, #7
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f000 f994 	bl	800d0dc <SDMMC_GetCmdResp1>
 800cdb4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3728      	adds	r7, #40	; 0x28
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b088      	sub	sp, #32
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cddc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdde:	f107 0308 	add.w	r3, r7, #8
 800cde2:	4619      	mov	r1, r3
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7ff fe6b 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fbb8 	bl	800d560 <SDMMC_GetCmdError>
 800cdf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdf2:	69fb      	ldr	r3, [r7, #28]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3720      	adds	r7, #32
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b088      	sub	sp, #32
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce04:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ce08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce0a:	2308      	movs	r3, #8
 800ce0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce14:	2300      	movs	r3, #0
 800ce16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce1e:	f107 0308 	add.w	r3, r7, #8
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7ff fe4b 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 fb4a 	bl	800d4c4 <SDMMC_GetCmdResp7>
 800ce30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce32:	69fb      	ldr	r3, [r7, #28]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3720      	adds	r7, #32
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ce4a:	2337      	movs	r3, #55	; 0x37
 800ce4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce54:	2300      	movs	r3, #0
 800ce56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce5e:	f107 0308 	add.w	r3, r7, #8
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff fe2b 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ce6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce6e:	2137      	movs	r1, #55	; 0x37
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 f933 	bl	800d0dc <SDMMC_GetCmdResp1>
 800ce76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce78:	69fb      	ldr	r3, [r7, #28]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3720      	adds	r7, #32
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b088      	sub	sp, #32
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ce90:	2329      	movs	r3, #41	; 0x29
 800ce92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cea4:	f107 0308 	add.w	r3, r7, #8
 800cea8:	4619      	mov	r1, r3
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff fe08 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 fa4f 	bl	800d354 <SDMMC_GetCmdResp3>
 800ceb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceb8:	69fb      	ldr	r3, [r7, #28]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3720      	adds	r7, #32
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b088      	sub	sp, #32
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ced0:	2306      	movs	r3, #6
 800ced2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ced4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ced8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceda:	2300      	movs	r3, #0
 800cedc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cee2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cee4:	f107 0308 	add.w	r3, r7, #8
 800cee8:	4619      	mov	r1, r3
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f7ff fde8 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cef0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cef4:	2106      	movs	r1, #6
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f8f0 	bl	800d0dc <SDMMC_GetCmdResp1>
 800cefc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cefe:	69fb      	ldr	r3, [r7, #28]
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3720      	adds	r7, #32
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b088      	sub	sp, #32
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cf10:	2300      	movs	r3, #0
 800cf12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cf14:	2333      	movs	r3, #51	; 0x33
 800cf16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf28:	f107 0308 	add.w	r3, r7, #8
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7ff fdc6 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cf34:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf38:	2133      	movs	r1, #51	; 0x33
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f8ce 	bl	800d0dc <SDMMC_GetCmdResp1>
 800cf40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf42:	69fb      	ldr	r3, [r7, #28]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3720      	adds	r7, #32
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b088      	sub	sp, #32
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cf54:	2300      	movs	r3, #0
 800cf56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf58:	2302      	movs	r3, #2
 800cf5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cf60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf62:	2300      	movs	r3, #0
 800cf64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf6c:	f107 0308 	add.w	r3, r7, #8
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff fda4 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 f9a1 	bl	800d2c0 <SDMMC_GetCmdResp2>
 800cf7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf80:	69fb      	ldr	r3, [r7, #28]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3720      	adds	r7, #32
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b088      	sub	sp, #32
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
 800cf92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cf98:	2309      	movs	r3, #9
 800cf9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cfa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfac:	f107 0308 	add.w	r3, r7, #8
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7ff fd84 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f981 	bl	800d2c0 <SDMMC_GetCmdResp2>
 800cfbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfc0:	69fb      	ldr	r3, [r7, #28]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3720      	adds	r7, #32
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b088      	sub	sp, #32
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cfd8:	2303      	movs	r3, #3
 800cfda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfec:	f107 0308 	add.w	r3, r7, #8
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff fd64 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cff8:	683a      	ldr	r2, [r7, #0]
 800cffa:	2103      	movs	r1, #3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 f9e9 	bl	800d3d4 <SDMMC_GetCmdResp6>
 800d002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d004:	69fb      	ldr	r3, [r7, #28]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3720      	adds	r7, #32
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b088      	sub	sp, #32
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d01c:	230d      	movs	r3, #13
 800d01e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d020:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d026:	2300      	movs	r3, #0
 800d028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d02a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d02e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d030:	f107 0308 	add.w	r3, r7, #8
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7ff fd42 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d040:	210d      	movs	r1, #13
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 f84a 	bl	800d0dc <SDMMC_GetCmdResp1>
 800d048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d04a:	69fb      	ldr	r3, [r7, #28]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3720      	adds	r7, #32
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b088      	sub	sp, #32
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d05c:	2300      	movs	r3, #0
 800d05e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d060:	230d      	movs	r3, #13
 800d062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d064:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d06a:	2300      	movs	r3, #0
 800d06c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d06e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d074:	f107 0308 	add.w	r3, r7, #8
 800d078:	4619      	mov	r1, r3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff fd20 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d080:	f241 3288 	movw	r2, #5000	; 0x1388
 800d084:	210d      	movs	r1, #13
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 f828 	bl	800d0dc <SDMMC_GetCmdResp1>
 800d08c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d08e:	69fb      	ldr	r3, [r7, #28]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3720      	adds	r7, #32
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d0a4:	230b      	movs	r3, #11
 800d0a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0b8:	f107 0308 	add.w	r3, r7, #8
 800d0bc:	4619      	mov	r1, r3
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7ff fcfe 	bl	800cac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d0c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0c8:	210b      	movs	r1, #11
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 f806 	bl	800d0dc <SDMMC_GetCmdResp1>
 800d0d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0d2:	69fb      	ldr	r3, [r7, #28]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3720      	adds	r7, #32
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b088      	sub	sp, #32
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	607a      	str	r2, [r7, #4]
 800d0e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d0ea:	4b70      	ldr	r3, [pc, #448]	; (800d2ac <SDMMC_GetCmdResp1+0x1d0>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4a70      	ldr	r2, [pc, #448]	; (800d2b0 <SDMMC_GetCmdResp1+0x1d4>)
 800d0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f4:	0a5a      	lsrs	r2, r3, #9
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	fb02 f303 	mul.w	r3, r2, r3
 800d0fc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	1e5a      	subs	r2, r3, #1
 800d102:	61fa      	str	r2, [r7, #28]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d102      	bne.n	800d10e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d108:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d10c:	e0c9      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d112:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d114:	69ba      	ldr	r2, [r7, #24]
 800d116:	4b67      	ldr	r3, [pc, #412]	; (800d2b4 <SDMMC_GetCmdResp1+0x1d8>)
 800d118:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0ef      	beq.n	800d0fe <SDMMC_GetCmdResp1+0x22>
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d124:	2b00      	cmp	r3, #0
 800d126:	d1ea      	bne.n	800d0fe <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d12c:	f003 0304 	and.w	r3, r3, #4
 800d130:	2b00      	cmp	r3, #0
 800d132:	d004      	beq.n	800d13e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2204      	movs	r2, #4
 800d138:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d13a:	2304      	movs	r3, #4
 800d13c:	e0b1      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d142:	f003 0301 	and.w	r3, r3, #1
 800d146:	2b00      	cmp	r3, #0
 800d148:	d004      	beq.n	800d154 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2201      	movs	r2, #1
 800d14e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d150:	2301      	movs	r3, #1
 800d152:	e0a6      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4a58      	ldr	r2, [pc, #352]	; (800d2b8 <SDMMC_GetCmdResp1+0x1dc>)
 800d158:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f7ff fcda 	bl	800cb14 <SDMMC_GetCommandResponse>
 800d160:	4603      	mov	r3, r0
 800d162:	461a      	mov	r2, r3
 800d164:	7afb      	ldrb	r3, [r7, #11]
 800d166:	4293      	cmp	r3, r2
 800d168:	d001      	beq.n	800d16e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d16a:	2301      	movs	r3, #1
 800d16c:	e099      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d16e:	2100      	movs	r1, #0
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7ff fcdc 	bl	800cb2e <SDMMC_GetResponse>
 800d176:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	4b50      	ldr	r3, [pc, #320]	; (800d2bc <SDMMC_GetCmdResp1+0x1e0>)
 800d17c:	4013      	ands	r3, r2
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d101      	bne.n	800d186 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d182:	2300      	movs	r3, #0
 800d184:	e08d      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	da02      	bge.n	800d192 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d18c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d190:	e087      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d001      	beq.n	800d1a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d19c:	2340      	movs	r3, #64	; 0x40
 800d19e:	e080      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d001      	beq.n	800d1ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d1aa:	2380      	movs	r3, #128	; 0x80
 800d1ac:	e079      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d002      	beq.n	800d1be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d1b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1bc:	e071      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d002      	beq.n	800d1ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d1c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1cc:	e069      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d002      	beq.n	800d1de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1dc:	e061      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d002      	beq.n	800d1ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d1e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1ec:	e059      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d1f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1fc:	e051      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d002      	beq.n	800d20e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d20c:	e049      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d218:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d21c:	e041      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d22c:	e039      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d23c:	e031      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d248:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d24c:	e029      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d258:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d25c:	e021      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d268:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d26c:	e019      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d274:	2b00      	cmp	r3, #0
 800d276:	d002      	beq.n	800d27e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d278:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d27c:	e011      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d288:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d28c:	e009      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	f003 0308 	and.w	r3, r3, #8
 800d294:	2b00      	cmp	r3, #0
 800d296:	d002      	beq.n	800d29e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d298:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d29c:	e001      	b.n	800d2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d29e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3720      	adds	r7, #32
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	20000140 	.word	0x20000140
 800d2b0:	10624dd3 	.word	0x10624dd3
 800d2b4:	00200045 	.word	0x00200045
 800d2b8:	002000c5 	.word	0x002000c5
 800d2bc:	fdffe008 	.word	0xfdffe008

0800d2c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2c8:	4b1f      	ldr	r3, [pc, #124]	; (800d348 <SDMMC_GetCmdResp2+0x88>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a1f      	ldr	r2, [pc, #124]	; (800d34c <SDMMC_GetCmdResp2+0x8c>)
 800d2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d2d2:	0a5b      	lsrs	r3, r3, #9
 800d2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2d8:	fb02 f303 	mul.w	r3, r2, r3
 800d2dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	1e5a      	subs	r2, r3, #1
 800d2e2:	60fa      	str	r2, [r7, #12]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2ec:	e026      	b.n	800d33c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d0ef      	beq.n	800d2de <SDMMC_GetCmdResp2+0x1e>
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1ea      	bne.n	800d2de <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30c:	f003 0304 	and.w	r3, r3, #4
 800d310:	2b00      	cmp	r3, #0
 800d312:	d004      	beq.n	800d31e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2204      	movs	r2, #4
 800d318:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d31a:	2304      	movs	r3, #4
 800d31c:	e00e      	b.n	800d33c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d322:	f003 0301 	and.w	r3, r3, #1
 800d326:	2b00      	cmp	r3, #0
 800d328:	d004      	beq.n	800d334 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2201      	movs	r2, #1
 800d32e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d330:	2301      	movs	r3, #1
 800d332:	e003      	b.n	800d33c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a06      	ldr	r2, [pc, #24]	; (800d350 <SDMMC_GetCmdResp2+0x90>)
 800d338:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3714      	adds	r7, #20
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr
 800d348:	20000140 	.word	0x20000140
 800d34c:	10624dd3 	.word	0x10624dd3
 800d350:	002000c5 	.word	0x002000c5

0800d354 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d35c:	4b1a      	ldr	r3, [pc, #104]	; (800d3c8 <SDMMC_GetCmdResp3+0x74>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a1a      	ldr	r2, [pc, #104]	; (800d3cc <SDMMC_GetCmdResp3+0x78>)
 800d362:	fba2 2303 	umull	r2, r3, r2, r3
 800d366:	0a5b      	lsrs	r3, r3, #9
 800d368:	f241 3288 	movw	r2, #5000	; 0x1388
 800d36c:	fb02 f303 	mul.w	r3, r2, r3
 800d370:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	1e5a      	subs	r2, r3, #1
 800d376:	60fa      	str	r2, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d102      	bne.n	800d382 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d37c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d380:	e01b      	b.n	800d3ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d386:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0ef      	beq.n	800d372 <SDMMC_GetCmdResp3+0x1e>
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1ea      	bne.n	800d372 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a0:	f003 0304 	and.w	r3, r3, #4
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d004      	beq.n	800d3b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2204      	movs	r2, #4
 800d3ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3ae:	2304      	movs	r3, #4
 800d3b0:	e003      	b.n	800d3ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	4a06      	ldr	r2, [pc, #24]	; (800d3d0 <SDMMC_GetCmdResp3+0x7c>)
 800d3b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	20000140 	.word	0x20000140
 800d3cc:	10624dd3 	.word	0x10624dd3
 800d3d0:	002000c5 	.word	0x002000c5

0800d3d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b088      	sub	sp, #32
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	607a      	str	r2, [r7, #4]
 800d3e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3e2:	4b35      	ldr	r3, [pc, #212]	; (800d4b8 <SDMMC_GetCmdResp6+0xe4>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a35      	ldr	r2, [pc, #212]	; (800d4bc <SDMMC_GetCmdResp6+0xe8>)
 800d3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ec:	0a5b      	lsrs	r3, r3, #9
 800d3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3f2:	fb02 f303 	mul.w	r3, r2, r3
 800d3f6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	1e5a      	subs	r2, r3, #1
 800d3fc:	61fa      	str	r2, [r7, #28]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d102      	bne.n	800d408 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d402:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d406:	e052      	b.n	800d4ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d40c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d414:	2b00      	cmp	r3, #0
 800d416:	d0ef      	beq.n	800d3f8 <SDMMC_GetCmdResp6+0x24>
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1ea      	bne.n	800d3f8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d426:	f003 0304 	and.w	r3, r3, #4
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d004      	beq.n	800d438 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2204      	movs	r2, #4
 800d432:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d434:	2304      	movs	r3, #4
 800d436:	e03a      	b.n	800d4ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	d004      	beq.n	800d44e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2201      	movs	r2, #1
 800d448:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e02f      	b.n	800d4ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f7ff fb60 	bl	800cb14 <SDMMC_GetCommandResponse>
 800d454:	4603      	mov	r3, r0
 800d456:	461a      	mov	r2, r3
 800d458:	7afb      	ldrb	r3, [r7, #11]
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d001      	beq.n	800d462 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d45e:	2301      	movs	r3, #1
 800d460:	e025      	b.n	800d4ae <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	4a16      	ldr	r2, [pc, #88]	; (800d4c0 <SDMMC_GetCmdResp6+0xec>)
 800d466:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d468:	2100      	movs	r1, #0
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f7ff fb5f 	bl	800cb2e <SDMMC_GetResponse>
 800d470:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d106      	bne.n	800d48a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	0c1b      	lsrs	r3, r3, #16
 800d480:	b29a      	uxth	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d486:	2300      	movs	r3, #0
 800d488:	e011      	b.n	800d4ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d490:	2b00      	cmp	r3, #0
 800d492:	d002      	beq.n	800d49a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d498:	e009      	b.n	800d4ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d002      	beq.n	800d4aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4a8:	e001      	b.n	800d4ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d4aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3720      	adds	r7, #32
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20000140 	.word	0x20000140
 800d4bc:	10624dd3 	.word	0x10624dd3
 800d4c0:	002000c5 	.word	0x002000c5

0800d4c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d4cc:	4b22      	ldr	r3, [pc, #136]	; (800d558 <SDMMC_GetCmdResp7+0x94>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a22      	ldr	r2, [pc, #136]	; (800d55c <SDMMC_GetCmdResp7+0x98>)
 800d4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d6:	0a5b      	lsrs	r3, r3, #9
 800d4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4dc:	fb02 f303 	mul.w	r3, r2, r3
 800d4e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	1e5a      	subs	r2, r3, #1
 800d4e6:	60fa      	str	r2, [r7, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4f0:	e02c      	b.n	800d54c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d0ef      	beq.n	800d4e2 <SDMMC_GetCmdResp7+0x1e>
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1ea      	bne.n	800d4e2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d510:	f003 0304 	and.w	r3, r3, #4
 800d514:	2b00      	cmp	r3, #0
 800d516:	d004      	beq.n	800d522 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2204      	movs	r2, #4
 800d51c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d51e:	2304      	movs	r3, #4
 800d520:	e014      	b.n	800d54c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d004      	beq.n	800d538 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2201      	movs	r2, #1
 800d532:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d534:	2301      	movs	r3, #1
 800d536:	e009      	b.n	800d54c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2240      	movs	r2, #64	; 0x40
 800d548:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d54a:	2300      	movs	r3, #0

}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr
 800d558:	20000140 	.word	0x20000140
 800d55c:	10624dd3 	.word	0x10624dd3

0800d560 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d568:	4b11      	ldr	r3, [pc, #68]	; (800d5b0 <SDMMC_GetCmdError+0x50>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a11      	ldr	r2, [pc, #68]	; (800d5b4 <SDMMC_GetCmdError+0x54>)
 800d56e:	fba2 2303 	umull	r2, r3, r2, r3
 800d572:	0a5b      	lsrs	r3, r3, #9
 800d574:	f241 3288 	movw	r2, #5000	; 0x1388
 800d578:	fb02 f303 	mul.w	r3, r2, r3
 800d57c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	1e5a      	subs	r2, r3, #1
 800d582:	60fa      	str	r2, [r7, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d102      	bne.n	800d58e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d58c:	e009      	b.n	800d5a2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d596:	2b00      	cmp	r3, #0
 800d598:	d0f1      	beq.n	800d57e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4a06      	ldr	r2, [pc, #24]	; (800d5b8 <SDMMC_GetCmdError+0x58>)
 800d59e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	20000140 	.word	0x20000140
 800d5b4:	10624dd3 	.word	0x10624dd3
 800d5b8:	002000c5 	.word	0x002000c5

0800d5bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5bc:	b084      	sub	sp, #16
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b084      	sub	sp, #16
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	f107 001c 	add.w	r0, r7, #28
 800d5ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f001 faf6 	bl	800ebcc <USB_CoreReset>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d106      	bne.n	800d5f8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	639a      	str	r2, [r3, #56]	; 0x38
 800d5f6:	e005      	b.n	800d604 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800d604:	7bfb      	ldrb	r3, [r7, #15]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d610:	b004      	add	sp, #16
 800d612:	4770      	bx	lr

0800d614 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d614:	b480      	push	{r7}
 800d616:	b087      	sub	sp, #28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	4613      	mov	r3, r2
 800d620:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d622:	79fb      	ldrb	r3, [r7, #7]
 800d624:	2b02      	cmp	r3, #2
 800d626:	d165      	bne.n	800d6f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	4a3e      	ldr	r2, [pc, #248]	; (800d724 <USB_SetTurnaroundTime+0x110>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d906      	bls.n	800d63e <USB_SetTurnaroundTime+0x2a>
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	4a3d      	ldr	r2, [pc, #244]	; (800d728 <USB_SetTurnaroundTime+0x114>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d202      	bcs.n	800d63e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d638:	230f      	movs	r3, #15
 800d63a:	617b      	str	r3, [r7, #20]
 800d63c:	e05c      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	4a39      	ldr	r2, [pc, #228]	; (800d728 <USB_SetTurnaroundTime+0x114>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d306      	bcc.n	800d654 <USB_SetTurnaroundTime+0x40>
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	4a38      	ldr	r2, [pc, #224]	; (800d72c <USB_SetTurnaroundTime+0x118>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d202      	bcs.n	800d654 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d64e:	230e      	movs	r3, #14
 800d650:	617b      	str	r3, [r7, #20]
 800d652:	e051      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	4a35      	ldr	r2, [pc, #212]	; (800d72c <USB_SetTurnaroundTime+0x118>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d306      	bcc.n	800d66a <USB_SetTurnaroundTime+0x56>
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	4a34      	ldr	r2, [pc, #208]	; (800d730 <USB_SetTurnaroundTime+0x11c>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d202      	bcs.n	800d66a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d664:	230d      	movs	r3, #13
 800d666:	617b      	str	r3, [r7, #20]
 800d668:	e046      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	4a30      	ldr	r2, [pc, #192]	; (800d730 <USB_SetTurnaroundTime+0x11c>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d306      	bcc.n	800d680 <USB_SetTurnaroundTime+0x6c>
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	4a2f      	ldr	r2, [pc, #188]	; (800d734 <USB_SetTurnaroundTime+0x120>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d802      	bhi.n	800d680 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d67a:	230c      	movs	r3, #12
 800d67c:	617b      	str	r3, [r7, #20]
 800d67e:	e03b      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	4a2c      	ldr	r2, [pc, #176]	; (800d734 <USB_SetTurnaroundTime+0x120>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d906      	bls.n	800d696 <USB_SetTurnaroundTime+0x82>
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	4a2b      	ldr	r2, [pc, #172]	; (800d738 <USB_SetTurnaroundTime+0x124>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d802      	bhi.n	800d696 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d690:	230b      	movs	r3, #11
 800d692:	617b      	str	r3, [r7, #20]
 800d694:	e030      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	4a27      	ldr	r2, [pc, #156]	; (800d738 <USB_SetTurnaroundTime+0x124>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d906      	bls.n	800d6ac <USB_SetTurnaroundTime+0x98>
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	4a26      	ldr	r2, [pc, #152]	; (800d73c <USB_SetTurnaroundTime+0x128>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d802      	bhi.n	800d6ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d6a6:	230a      	movs	r3, #10
 800d6a8:	617b      	str	r3, [r7, #20]
 800d6aa:	e025      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	4a23      	ldr	r2, [pc, #140]	; (800d73c <USB_SetTurnaroundTime+0x128>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d906      	bls.n	800d6c2 <USB_SetTurnaroundTime+0xae>
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	4a22      	ldr	r2, [pc, #136]	; (800d740 <USB_SetTurnaroundTime+0x12c>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d202      	bcs.n	800d6c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d6bc:	2309      	movs	r3, #9
 800d6be:	617b      	str	r3, [r7, #20]
 800d6c0:	e01a      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	4a1e      	ldr	r2, [pc, #120]	; (800d740 <USB_SetTurnaroundTime+0x12c>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d306      	bcc.n	800d6d8 <USB_SetTurnaroundTime+0xc4>
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	4a1d      	ldr	r2, [pc, #116]	; (800d744 <USB_SetTurnaroundTime+0x130>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d802      	bhi.n	800d6d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d6d2:	2308      	movs	r3, #8
 800d6d4:	617b      	str	r3, [r7, #20]
 800d6d6:	e00f      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	4a1a      	ldr	r2, [pc, #104]	; (800d744 <USB_SetTurnaroundTime+0x130>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d906      	bls.n	800d6ee <USB_SetTurnaroundTime+0xda>
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	4a19      	ldr	r2, [pc, #100]	; (800d748 <USB_SetTurnaroundTime+0x134>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d202      	bcs.n	800d6ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d6e8:	2307      	movs	r3, #7
 800d6ea:	617b      	str	r3, [r7, #20]
 800d6ec:	e004      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d6ee:	2306      	movs	r3, #6
 800d6f0:	617b      	str	r3, [r7, #20]
 800d6f2:	e001      	b.n	800d6f8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d6f4:	2309      	movs	r3, #9
 800d6f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	68da      	ldr	r2, [r3, #12]
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	029b      	lsls	r3, r3, #10
 800d70c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d710:	431a      	orrs	r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d716:	2300      	movs	r3, #0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	371c      	adds	r7, #28
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr
 800d724:	00d8acbf 	.word	0x00d8acbf
 800d728:	00e4e1c0 	.word	0x00e4e1c0
 800d72c:	00f42400 	.word	0x00f42400
 800d730:	01067380 	.word	0x01067380
 800d734:	011a499f 	.word	0x011a499f
 800d738:	01312cff 	.word	0x01312cff
 800d73c:	014ca43f 	.word	0x014ca43f
 800d740:	016e3600 	.word	0x016e3600
 800d744:	01a6ab1f 	.word	0x01a6ab1f
 800d748:	01e84800 	.word	0x01e84800

0800d74c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f043 0201 	orr.w	r2, r3, #1
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr

0800d76e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d76e:	b480      	push	{r7}
 800d770:	b083      	sub	sp, #12
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f023 0201 	bic.w	r2, r3, #1
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d782:	2300      	movs	r3, #0
}
 800d784:	4618      	mov	r0, r3
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	460b      	mov	r3, r1
 800d79a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d79c:	2300      	movs	r3, #0
 800d79e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d7ac:	78fb      	ldrb	r3, [r7, #3]
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d115      	bne.n	800d7de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d7be:	2001      	movs	r0, #1
 800d7c0:	f7f6 fb46 	bl	8003e50 <HAL_Delay>
      ms++;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f001 f985 	bl	800eada <USB_GetMode>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d01e      	beq.n	800d814 <USB_SetCurrentMode+0x84>
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b31      	cmp	r3, #49	; 0x31
 800d7da:	d9f0      	bls.n	800d7be <USB_SetCurrentMode+0x2e>
 800d7dc:	e01a      	b.n	800d814 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d7de:	78fb      	ldrb	r3, [r7, #3]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d115      	bne.n	800d810 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d7f0:	2001      	movs	r0, #1
 800d7f2:	f7f6 fb2d 	bl	8003e50 <HAL_Delay>
      ms++;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f001 f96c 	bl	800eada <USB_GetMode>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d005      	beq.n	800d814 <USB_SetCurrentMode+0x84>
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b31      	cmp	r3, #49	; 0x31
 800d80c:	d9f0      	bls.n	800d7f0 <USB_SetCurrentMode+0x60>
 800d80e:	e001      	b.n	800d814 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d810:	2301      	movs	r3, #1
 800d812:	e005      	b.n	800d820 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2b32      	cmp	r3, #50	; 0x32
 800d818:	d101      	bne.n	800d81e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d828:	b084      	sub	sp, #16
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b086      	sub	sp, #24
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d842:	2300      	movs	r3, #0
 800d844:	613b      	str	r3, [r7, #16]
 800d846:	e009      	b.n	800d85c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	3340      	adds	r3, #64	; 0x40
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	2200      	movs	r2, #0
 800d854:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	3301      	adds	r3, #1
 800d85a:	613b      	str	r3, [r7, #16]
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	2b0e      	cmp	r3, #14
 800d860:	d9f2      	bls.n	800d848 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d864:	2b00      	cmp	r3, #0
 800d866:	d11c      	bne.n	800d8a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d876:	f043 0302 	orr.w	r3, r3, #2
 800d87a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d880:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	e005      	b.n	800d8ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	680b      	ldr	r3, [r1, #0]
 800d8cc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d8ce:	2103      	movs	r1, #3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 f959 	bl	800db88 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d8d6:	2110      	movs	r1, #16
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 f8f1 	bl	800dac0 <USB_FlushTxFifo>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 f91d 	bl	800db28 <USB_FlushRxFifo>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8fe:	461a      	mov	r2, r3
 800d900:	2300      	movs	r3, #0
 800d902:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d90a:	461a      	mov	r2, r3
 800d90c:	2300      	movs	r3, #0
 800d90e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d916:	461a      	mov	r2, r3
 800d918:	2300      	movs	r3, #0
 800d91a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d91c:	2300      	movs	r3, #0
 800d91e:	613b      	str	r3, [r7, #16]
 800d920:	e043      	b.n	800d9aa <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	015a      	lsls	r2, r3, #5
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	4413      	add	r3, r2
 800d92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d938:	d118      	bne.n	800d96c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10a      	bne.n	800d956 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	015a      	lsls	r2, r3, #5
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	4413      	add	r3, r2
 800d948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d94c:	461a      	mov	r2, r3
 800d94e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	e013      	b.n	800d97e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	015a      	lsls	r2, r3, #5
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	4413      	add	r3, r2
 800d95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d962:	461a      	mov	r2, r3
 800d964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d968:	6013      	str	r3, [r2, #0]
 800d96a:	e008      	b.n	800d97e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	015a      	lsls	r2, r3, #5
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	4413      	add	r3, r2
 800d974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d978:	461a      	mov	r2, r3
 800d97a:	2300      	movs	r3, #0
 800d97c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	015a      	lsls	r2, r3, #5
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	4413      	add	r3, r2
 800d986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98a:	461a      	mov	r2, r3
 800d98c:	2300      	movs	r3, #0
 800d98e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	015a      	lsls	r2, r3, #5
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	4413      	add	r3, r2
 800d998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d99c:	461a      	mov	r2, r3
 800d99e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d9a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	693a      	ldr	r2, [r7, #16]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d3b7      	bcc.n	800d922 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	613b      	str	r3, [r7, #16]
 800d9b6:	e043      	b.n	800da40 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	015a      	lsls	r2, r3, #5
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	4413      	add	r3, r2
 800d9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9ce:	d118      	bne.n	800da02 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d10a      	bne.n	800d9ec <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	015a      	lsls	r2, r3, #5
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	4413      	add	r3, r2
 800d9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d9e8:	6013      	str	r3, [r2, #0]
 800d9ea:	e013      	b.n	800da14 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	015a      	lsls	r2, r3, #5
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d9fe:	6013      	str	r3, [r2, #0]
 800da00:	e008      	b.n	800da14 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	015a      	lsls	r2, r3, #5
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	4413      	add	r3, r2
 800da0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da0e:	461a      	mov	r2, r3
 800da10:	2300      	movs	r3, #0
 800da12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	015a      	lsls	r2, r3, #5
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	4413      	add	r3, r2
 800da1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da20:	461a      	mov	r2, r3
 800da22:	2300      	movs	r3, #0
 800da24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	015a      	lsls	r2, r3, #5
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	4413      	add	r3, r2
 800da2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da32:	461a      	mov	r2, r3
 800da34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800da38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	3301      	adds	r3, #1
 800da3e:	613b      	str	r3, [r7, #16]
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	429a      	cmp	r2, r3
 800da46:	d3b7      	bcc.n	800d9b8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800da68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	f043 0210 	orr.w	r2, r3, #16
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	699a      	ldr	r2, [r3, #24]
 800da7a:	4b10      	ldr	r3, [pc, #64]	; (800dabc <USB_DevInit+0x294>)
 800da7c:	4313      	orrs	r3, r2
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800da82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da84:	2b00      	cmp	r3, #0
 800da86:	d005      	beq.n	800da94 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	699b      	ldr	r3, [r3, #24]
 800da8c:	f043 0208 	orr.w	r2, r3, #8
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800da94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da96:	2b01      	cmp	r3, #1
 800da98:	d107      	bne.n	800daaa <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800daa2:	f043 0304 	orr.w	r3, r3, #4
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800daaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3718      	adds	r7, #24
 800dab0:	46bd      	mov	sp, r7
 800dab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dab6:	b004      	add	sp, #16
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	803c3800 	.word	0x803c3800

0800dac0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800daca:	2300      	movs	r3, #0
 800dacc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3301      	adds	r3, #1
 800dad2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	4a13      	ldr	r2, [pc, #76]	; (800db24 <USB_FlushTxFifo+0x64>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d901      	bls.n	800dae0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dadc:	2303      	movs	r3, #3
 800dade:	e01b      	b.n	800db18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	daf2      	bge.n	800dace <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dae8:	2300      	movs	r3, #0
 800daea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	019b      	lsls	r3, r3, #6
 800daf0:	f043 0220 	orr.w	r2, r3, #32
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	3301      	adds	r3, #1
 800dafc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	4a08      	ldr	r2, [pc, #32]	; (800db24 <USB_FlushTxFifo+0x64>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d901      	bls.n	800db0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800db06:	2303      	movs	r3, #3
 800db08:	e006      	b.n	800db18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	f003 0320 	and.w	r3, r3, #32
 800db12:	2b20      	cmp	r3, #32
 800db14:	d0f0      	beq.n	800daf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3714      	adds	r7, #20
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr
 800db24:	00030d40 	.word	0x00030d40

0800db28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800db28:	b480      	push	{r7}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db30:	2300      	movs	r3, #0
 800db32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	3301      	adds	r3, #1
 800db38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	4a11      	ldr	r2, [pc, #68]	; (800db84 <USB_FlushRxFifo+0x5c>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d901      	bls.n	800db46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800db42:	2303      	movs	r3, #3
 800db44:	e018      	b.n	800db78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	691b      	ldr	r3, [r3, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	daf2      	bge.n	800db34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800db4e:	2300      	movs	r3, #0
 800db50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2210      	movs	r2, #16
 800db56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	3301      	adds	r3, #1
 800db5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	4a08      	ldr	r2, [pc, #32]	; (800db84 <USB_FlushRxFifo+0x5c>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d901      	bls.n	800db6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800db66:	2303      	movs	r3, #3
 800db68:	e006      	b.n	800db78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	f003 0310 	and.w	r3, r3, #16
 800db72:	2b10      	cmp	r3, #16
 800db74:	d0f0      	beq.n	800db58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	00030d40 	.word	0x00030d40

0800db88 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800db88:	b480      	push	{r7}
 800db8a:	b085      	sub	sp, #20
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	460b      	mov	r3, r1
 800db92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	78fb      	ldrb	r3, [r7, #3]
 800dba2:	68f9      	ldr	r1, [r7, #12]
 800dba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b087      	sub	sp, #28
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	f003 0306 	and.w	r3, r3, #6
 800dbd2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2b02      	cmp	r3, #2
 800dbd8:	d002      	beq.n	800dbe0 <USB_GetDevSpeed+0x26>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2b06      	cmp	r3, #6
 800dbde:	d102      	bne.n	800dbe6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	75fb      	strb	r3, [r7, #23]
 800dbe4:	e001      	b.n	800dbea <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800dbe6:	230f      	movs	r3, #15
 800dbe8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	371c      	adds	r7, #28
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	785b      	ldrb	r3, [r3, #1]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d13a      	bne.n	800dc8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc1a:	69da      	ldr	r2, [r3, #28]
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	f003 030f 	and.w	r3, r3, #15
 800dc24:	2101      	movs	r1, #1
 800dc26:	fa01 f303 	lsl.w	r3, r1, r3
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	68f9      	ldr	r1, [r7, #12]
 800dc2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc32:	4313      	orrs	r3, r2
 800dc34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	015a      	lsls	r2, r3, #5
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d155      	bne.n	800dcf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	015a      	lsls	r2, r3, #5
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	4413      	add	r3, r2
 800dc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	791b      	ldrb	r3, [r3, #4]
 800dc66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	059b      	lsls	r3, r3, #22
 800dc6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc70:	4313      	orrs	r3, r2
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	0151      	lsls	r1, r2, #5
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	440a      	add	r2, r1
 800dc7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	e036      	b.n	800dcf8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc90:	69da      	ldr	r2, [r3, #28]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	f003 030f 	and.w	r3, r3, #15
 800dc9a:	2101      	movs	r1, #1
 800dc9c:	fa01 f303 	lsl.w	r3, r1, r3
 800dca0:	041b      	lsls	r3, r3, #16
 800dca2:	68f9      	ldr	r1, [r7, #12]
 800dca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	015a      	lsls	r2, r3, #5
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d11a      	bne.n	800dcf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	015a      	lsls	r2, r3, #5
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	4413      	add	r3, r2
 800dcca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	791b      	ldrb	r3, [r3, #4]
 800dcdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dcde:	430b      	orrs	r3, r1
 800dce0:	4313      	orrs	r3, r2
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	0151      	lsls	r1, r2, #5
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	440a      	add	r2, r1
 800dcea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcf6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3714      	adds	r7, #20
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr
	...

0800dd08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	785b      	ldrb	r3, [r3, #1]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d161      	bne.n	800dde8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	015a      	lsls	r2, r3, #5
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd3a:	d11f      	bne.n	800dd7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	015a      	lsls	r2, r3, #5
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	4413      	add	r3, r2
 800dd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	0151      	lsls	r1, r2, #5
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	440a      	add	r2, r1
 800dd52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	015a      	lsls	r2, r3, #5
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	4413      	add	r3, r2
 800dd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	0151      	lsls	r1, r2, #5
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	440a      	add	r2, r1
 800dd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	f003 030f 	and.w	r3, r3, #15
 800dd8c:	2101      	movs	r1, #1
 800dd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	43db      	mvns	r3, r3
 800dd96:	68f9      	ldr	r1, [r7, #12]
 800dd98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd9c:	4013      	ands	r3, r2
 800dd9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dda6:	69da      	ldr	r2, [r3, #28]
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	f003 030f 	and.w	r3, r3, #15
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	fa01 f303 	lsl.w	r3, r1, r3
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	43db      	mvns	r3, r3
 800ddba:	68f9      	ldr	r1, [r7, #12]
 800ddbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	015a      	lsls	r2, r3, #5
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	4413      	add	r3, r2
 800ddcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	0159      	lsls	r1, r3, #5
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	440b      	add	r3, r1
 800ddda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddde:	4619      	mov	r1, r3
 800dde0:	4b35      	ldr	r3, [pc, #212]	; (800deb8 <USB_DeactivateEndpoint+0x1b0>)
 800dde2:	4013      	ands	r3, r2
 800dde4:	600b      	str	r3, [r1, #0]
 800dde6:	e060      	b.n	800deaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	015a      	lsls	r2, r3, #5
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	4413      	add	r3, r2
 800ddf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddfe:	d11f      	bne.n	800de40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	015a      	lsls	r2, r3, #5
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	4413      	add	r3, r2
 800de08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	68ba      	ldr	r2, [r7, #8]
 800de10:	0151      	lsls	r1, r2, #5
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	440a      	add	r2, r1
 800de16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	015a      	lsls	r2, r3, #5
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	4413      	add	r3, r2
 800de28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	0151      	lsls	r1, r2, #5
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	440a      	add	r2, r1
 800de36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	f003 030f 	and.w	r3, r3, #15
 800de50:	2101      	movs	r1, #1
 800de52:	fa01 f303 	lsl.w	r3, r1, r3
 800de56:	041b      	lsls	r3, r3, #16
 800de58:	43db      	mvns	r3, r3
 800de5a:	68f9      	ldr	r1, [r7, #12]
 800de5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de60:	4013      	ands	r3, r2
 800de62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de6a:	69da      	ldr	r2, [r3, #28]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	f003 030f 	and.w	r3, r3, #15
 800de74:	2101      	movs	r1, #1
 800de76:	fa01 f303 	lsl.w	r3, r1, r3
 800de7a:	041b      	lsls	r3, r3, #16
 800de7c:	43db      	mvns	r3, r3
 800de7e:	68f9      	ldr	r1, [r7, #12]
 800de80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de84:	4013      	ands	r3, r2
 800de86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	0159      	lsls	r1, r3, #5
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	440b      	add	r3, r1
 800de9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea2:	4619      	mov	r1, r3
 800dea4:	4b05      	ldr	r3, [pc, #20]	; (800debc <USB_DeactivateEndpoint+0x1b4>)
 800dea6:	4013      	ands	r3, r2
 800dea8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr
 800deb8:	ec337800 	.word	0xec337800
 800debc:	eff37800 	.word	0xeff37800

0800dec0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	785b      	ldrb	r3, [r3, #1]
 800ded8:	2b01      	cmp	r3, #1
 800deda:	f040 810a 	bne.w	800e0f2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d132      	bne.n	800df4c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	015a      	lsls	r2, r3, #5
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	4413      	add	r3, r2
 800deee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	693a      	ldr	r2, [r7, #16]
 800def6:	0151      	lsls	r1, r2, #5
 800def8:	697a      	ldr	r2, [r7, #20]
 800defa:	440a      	add	r2, r1
 800defc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	015a      	lsls	r2, r3, #5
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	4413      	add	r3, r2
 800df12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df16:	691b      	ldr	r3, [r3, #16]
 800df18:	693a      	ldr	r2, [r7, #16]
 800df1a:	0151      	lsls	r1, r2, #5
 800df1c:	697a      	ldr	r2, [r7, #20]
 800df1e:	440a      	add	r2, r1
 800df20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	015a      	lsls	r2, r3, #5
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	4413      	add	r3, r2
 800df32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	0151      	lsls	r1, r2, #5
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	440a      	add	r2, r1
 800df40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df44:	0cdb      	lsrs	r3, r3, #19
 800df46:	04db      	lsls	r3, r3, #19
 800df48:	6113      	str	r3, [r2, #16]
 800df4a:	e074      	b.n	800e036 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	015a      	lsls	r2, r3, #5
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	4413      	add	r3, r2
 800df54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	0151      	lsls	r1, r2, #5
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	440a      	add	r2, r1
 800df62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df66:	0cdb      	lsrs	r3, r3, #19
 800df68:	04db      	lsls	r3, r3, #19
 800df6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	015a      	lsls	r2, r3, #5
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	4413      	add	r3, r2
 800df74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df78:	691b      	ldr	r3, [r3, #16]
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	0151      	lsls	r1, r2, #5
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	440a      	add	r2, r1
 800df82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	015a      	lsls	r2, r3, #5
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	4413      	add	r3, r2
 800df98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df9c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	6999      	ldr	r1, [r3, #24]
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	440b      	add	r3, r1
 800dfa8:	1e59      	subs	r1, r3, #1
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	fbb1 f3f3 	udiv	r3, r1, r3
 800dfb2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dfb4:	4b9e      	ldr	r3, [pc, #632]	; (800e230 <USB_EPStartXfer+0x370>)
 800dfb6:	400b      	ands	r3, r1
 800dfb8:	6939      	ldr	r1, [r7, #16]
 800dfba:	0148      	lsls	r0, r1, #5
 800dfbc:	6979      	ldr	r1, [r7, #20]
 800dfbe:	4401      	add	r1, r0
 800dfc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	015a      	lsls	r2, r3, #5
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	4413      	add	r3, r2
 800dfd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfd4:	691a      	ldr	r2, [r3, #16]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	699b      	ldr	r3, [r3, #24]
 800dfda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfde:	6939      	ldr	r1, [r7, #16]
 800dfe0:	0148      	lsls	r0, r1, #5
 800dfe2:	6979      	ldr	r1, [r7, #20]
 800dfe4:	4401      	add	r1, r0
 800dfe6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dfea:	4313      	orrs	r3, r2
 800dfec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	791b      	ldrb	r3, [r3, #4]
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d11f      	bne.n	800e036 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	015a      	lsls	r2, r3, #5
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	4413      	add	r3, r2
 800dffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	693a      	ldr	r2, [r7, #16]
 800e006:	0151      	lsls	r1, r2, #5
 800e008:	697a      	ldr	r2, [r7, #20]
 800e00a:	440a      	add	r2, r1
 800e00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e010:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e014:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	015a      	lsls	r2, r3, #5
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	4413      	add	r3, r2
 800e01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e022:	691b      	ldr	r3, [r3, #16]
 800e024:	693a      	ldr	r2, [r7, #16]
 800e026:	0151      	lsls	r1, r2, #5
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	440a      	add	r2, r1
 800e02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e034:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	015a      	lsls	r2, r3, #5
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	4413      	add	r3, r2
 800e03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	693a      	ldr	r2, [r7, #16]
 800e046:	0151      	lsls	r1, r2, #5
 800e048:	697a      	ldr	r2, [r7, #20]
 800e04a:	440a      	add	r2, r1
 800e04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e050:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e054:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	791b      	ldrb	r3, [r3, #4]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d015      	beq.n	800e08a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	699b      	ldr	r3, [r3, #24]
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 8106 	beq.w	800e274 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e06e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	f003 030f 	and.w	r3, r3, #15
 800e078:	2101      	movs	r1, #1
 800e07a:	fa01 f303 	lsl.w	r3, r1, r3
 800e07e:	6979      	ldr	r1, [r7, #20]
 800e080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e084:	4313      	orrs	r3, r2
 800e086:	634b      	str	r3, [r1, #52]	; 0x34
 800e088:	e0f4      	b.n	800e274 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e096:	2b00      	cmp	r3, #0
 800e098:	d110      	bne.n	800e0bc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	015a      	lsls	r2, r3, #5
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	0151      	lsls	r1, r2, #5
 800e0ac:	697a      	ldr	r2, [r7, #20]
 800e0ae:	440a      	add	r2, r1
 800e0b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0b8:	6013      	str	r3, [r2, #0]
 800e0ba:	e00f      	b.n	800e0dc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	015a      	lsls	r2, r3, #5
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	693a      	ldr	r2, [r7, #16]
 800e0cc:	0151      	lsls	r1, r2, #5
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	440a      	add	r2, r1
 800e0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0da:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	6919      	ldr	r1, [r3, #16]
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	781a      	ldrb	r2, [r3, #0]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 fa94 	bl	800e618 <USB_WritePacket>
 800e0f0:	e0c0      	b.n	800e274 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	015a      	lsls	r2, r3, #5
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0fe:	691b      	ldr	r3, [r3, #16]
 800e100:	693a      	ldr	r2, [r7, #16]
 800e102:	0151      	lsls	r1, r2, #5
 800e104:	697a      	ldr	r2, [r7, #20]
 800e106:	440a      	add	r2, r1
 800e108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e10c:	0cdb      	lsrs	r3, r3, #19
 800e10e:	04db      	lsls	r3, r3, #19
 800e110:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	015a      	lsls	r2, r3, #5
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	4413      	add	r3, r2
 800e11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	693a      	ldr	r2, [r7, #16]
 800e122:	0151      	lsls	r1, r2, #5
 800e124:	697a      	ldr	r2, [r7, #20]
 800e126:	440a      	add	r2, r1
 800e128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e12c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e130:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e134:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	699b      	ldr	r3, [r3, #24]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d123      	bne.n	800e186 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	015a      	lsls	r2, r3, #5
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	4413      	add	r3, r2
 800e146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e14a:	691a      	ldr	r2, [r3, #16]
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e154:	6939      	ldr	r1, [r7, #16]
 800e156:	0148      	lsls	r0, r1, #5
 800e158:	6979      	ldr	r1, [r7, #20]
 800e15a:	4401      	add	r1, r0
 800e15c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e160:	4313      	orrs	r3, r2
 800e162:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	015a      	lsls	r2, r3, #5
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e170:	691b      	ldr	r3, [r3, #16]
 800e172:	693a      	ldr	r2, [r7, #16]
 800e174:	0151      	lsls	r1, r2, #5
 800e176:	697a      	ldr	r2, [r7, #20]
 800e178:	440a      	add	r2, r1
 800e17a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e17e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e182:	6113      	str	r3, [r2, #16]
 800e184:	e037      	b.n	800e1f6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	699a      	ldr	r2, [r3, #24]
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	4413      	add	r3, r2
 800e190:	1e5a      	subs	r2, r3, #1
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	fbb2 f3f3 	udiv	r3, r2, r3
 800e19a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	89fa      	ldrh	r2, [r7, #14]
 800e1a2:	fb03 f202 	mul.w	r2, r3, r2
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	015a      	lsls	r2, r3, #5
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1b6:	691a      	ldr	r2, [r3, #16]
 800e1b8:	89fb      	ldrh	r3, [r7, #14]
 800e1ba:	04d9      	lsls	r1, r3, #19
 800e1bc:	4b1c      	ldr	r3, [pc, #112]	; (800e230 <USB_EPStartXfer+0x370>)
 800e1be:	400b      	ands	r3, r1
 800e1c0:	6939      	ldr	r1, [r7, #16]
 800e1c2:	0148      	lsls	r0, r1, #5
 800e1c4:	6979      	ldr	r1, [r7, #20]
 800e1c6:	4401      	add	r1, r0
 800e1c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	015a      	lsls	r2, r3, #5
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1dc:	691a      	ldr	r2, [r3, #16]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	69db      	ldr	r3, [r3, #28]
 800e1e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1e6:	6939      	ldr	r1, [r7, #16]
 800e1e8:	0148      	lsls	r0, r1, #5
 800e1ea:	6979      	ldr	r1, [r7, #20]
 800e1ec:	4401      	add	r1, r0
 800e1ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	791b      	ldrb	r3, [r3, #4]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d12a      	bne.n	800e254 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d112      	bne.n	800e234 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	015a      	lsls	r2, r3, #5
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	4413      	add	r3, r2
 800e216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	693a      	ldr	r2, [r7, #16]
 800e21e:	0151      	lsls	r1, r2, #5
 800e220:	697a      	ldr	r2, [r7, #20]
 800e222:	440a      	add	r2, r1
 800e224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e22c:	6013      	str	r3, [r2, #0]
 800e22e:	e011      	b.n	800e254 <USB_EPStartXfer+0x394>
 800e230:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	015a      	lsls	r2, r3, #5
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	4413      	add	r3, r2
 800e23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	693a      	ldr	r2, [r7, #16]
 800e244:	0151      	lsls	r1, r2, #5
 800e246:	697a      	ldr	r2, [r7, #20]
 800e248:	440a      	add	r2, r1
 800e24a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e24e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e252:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	015a      	lsls	r2, r3, #5
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	4413      	add	r3, r2
 800e25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	693a      	ldr	r2, [r7, #16]
 800e264:	0151      	lsls	r1, r2, #5
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	440a      	add	r2, r1
 800e26a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e26e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e272:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3718      	adds	r7, #24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop

0800e280 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	785b      	ldrb	r3, [r3, #1]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	f040 80ab 	bne.w	800e3f4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	699b      	ldr	r3, [r3, #24]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d132      	bne.n	800e30c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	015a      	lsls	r2, r3, #5
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	68ba      	ldr	r2, [r7, #8]
 800e2b6:	0151      	lsls	r1, r2, #5
 800e2b8:	68fa      	ldr	r2, [r7, #12]
 800e2ba:	440a      	add	r2, r1
 800e2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e2c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e2c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	015a      	lsls	r2, r3, #5
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2d6:	691b      	ldr	r3, [r3, #16]
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	0151      	lsls	r1, r2, #5
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	440a      	add	r2, r1
 800e2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e2e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	015a      	lsls	r2, r3, #5
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	0151      	lsls	r1, r2, #5
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	440a      	add	r2, r1
 800e300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e304:	0cdb      	lsrs	r3, r3, #19
 800e306:	04db      	lsls	r3, r3, #19
 800e308:	6113      	str	r3, [r2, #16]
 800e30a:	e04e      	b.n	800e3aa <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	015a      	lsls	r2, r3, #5
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	4413      	add	r3, r2
 800e314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	68ba      	ldr	r2, [r7, #8]
 800e31c:	0151      	lsls	r1, r2, #5
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	440a      	add	r2, r1
 800e322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e326:	0cdb      	lsrs	r3, r3, #19
 800e328:	04db      	lsls	r3, r3, #19
 800e32a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	015a      	lsls	r2, r3, #5
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	4413      	add	r3, r2
 800e334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	0151      	lsls	r1, r2, #5
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	440a      	add	r2, r1
 800e342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e346:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e34a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e34e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	699a      	ldr	r2, [r3, #24]
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d903      	bls.n	800e364 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	68da      	ldr	r2, [r3, #12]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	015a      	lsls	r2, r3, #5
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	4413      	add	r3, r2
 800e36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e370:	691b      	ldr	r3, [r3, #16]
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	0151      	lsls	r1, r2, #5
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	440a      	add	r2, r1
 800e37a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e37e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	015a      	lsls	r2, r3, #5
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	4413      	add	r3, r2
 800e38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e390:	691a      	ldr	r2, [r3, #16]
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	699b      	ldr	r3, [r3, #24]
 800e396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e39a:	68b9      	ldr	r1, [r7, #8]
 800e39c:	0148      	lsls	r0, r1, #5
 800e39e:	68f9      	ldr	r1, [r7, #12]
 800e3a0:	4401      	add	r1, r0
 800e3a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	015a      	lsls	r2, r3, #5
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68ba      	ldr	r2, [r7, #8]
 800e3ba:	0151      	lsls	r1, r2, #5
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	440a      	add	r2, r1
 800e3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3c8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d071      	beq.n	800e4b6 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	f003 030f 	and.w	r3, r3, #15
 800e3e2:	2101      	movs	r1, #1
 800e3e4:	fa01 f303 	lsl.w	r3, r1, r3
 800e3e8:	68f9      	ldr	r1, [r7, #12]
 800e3ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	634b      	str	r3, [r1, #52]	; 0x34
 800e3f2:	e060      	b.n	800e4b6 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	015a      	lsls	r2, r3, #5
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	68ba      	ldr	r2, [r7, #8]
 800e404:	0151      	lsls	r1, r2, #5
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	440a      	add	r2, r1
 800e40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e40e:	0cdb      	lsrs	r3, r3, #19
 800e410:	04db      	lsls	r3, r3, #19
 800e412:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	015a      	lsls	r2, r3, #5
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	4413      	add	r3, r2
 800e41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	0151      	lsls	r1, r2, #5
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	440a      	add	r2, r1
 800e42a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e42e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e432:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e436:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	699b      	ldr	r3, [r3, #24]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d003      	beq.n	800e448 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	68da      	ldr	r2, [r3, #12]
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	68da      	ldr	r2, [r3, #12]
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	015a      	lsls	r2, r3, #5
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	4413      	add	r3, r2
 800e458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e45c:	691b      	ldr	r3, [r3, #16]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	0151      	lsls	r1, r2, #5
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	440a      	add	r2, r1
 800e466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e46a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e46e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	015a      	lsls	r2, r3, #5
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	4413      	add	r3, r2
 800e478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e47c:	691a      	ldr	r2, [r3, #16]
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e486:	68b9      	ldr	r1, [r7, #8]
 800e488:	0148      	lsls	r0, r1, #5
 800e48a:	68f9      	ldr	r1, [r7, #12]
 800e48c:	4401      	add	r1, r0
 800e48e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e492:	4313      	orrs	r3, r2
 800e494:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	015a      	lsls	r2, r3, #5
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	4413      	add	r3, r2
 800e49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	68ba      	ldr	r2, [r7, #8]
 800e4a6:	0151      	lsls	r1, r2, #5
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	440a      	add	r2, r1
 800e4ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e4b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e4b6:	2300      	movs	r3, #0
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b087      	sub	sp, #28
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	785b      	ldrb	r3, [r3, #1]
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d14a      	bne.n	800e578 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	015a      	lsls	r2, r3, #5
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4fa:	f040 8086 	bne.w	800e60a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	015a      	lsls	r2, r3, #5
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	4413      	add	r3, r2
 800e508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	7812      	ldrb	r2, [r2, #0]
 800e512:	0151      	lsls	r1, r2, #5
 800e514:	693a      	ldr	r2, [r7, #16]
 800e516:	440a      	add	r2, r1
 800e518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e51c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e520:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	015a      	lsls	r2, r3, #5
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	4413      	add	r3, r2
 800e52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	7812      	ldrb	r2, [r2, #0]
 800e536:	0151      	lsls	r1, r2, #5
 800e538:	693a      	ldr	r2, [r7, #16]
 800e53a:	440a      	add	r2, r1
 800e53c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e544:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	3301      	adds	r3, #1
 800e54a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f242 7210 	movw	r2, #10000	; 0x2710
 800e552:	4293      	cmp	r3, r2
 800e554:	d902      	bls.n	800e55c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	75fb      	strb	r3, [r7, #23]
          break;
 800e55a:	e056      	b.n	800e60a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	015a      	lsls	r2, r3, #5
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	4413      	add	r3, r2
 800e566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e574:	d0e7      	beq.n	800e546 <USB_EPStopXfer+0x82>
 800e576:	e048      	b.n	800e60a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	015a      	lsls	r2, r3, #5
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	4413      	add	r3, r2
 800e582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e58c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e590:	d13b      	bne.n	800e60a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	015a      	lsls	r2, r3, #5
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	4413      	add	r3, r2
 800e59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	683a      	ldr	r2, [r7, #0]
 800e5a4:	7812      	ldrb	r2, [r2, #0]
 800e5a6:	0151      	lsls	r1, r2, #5
 800e5a8:	693a      	ldr	r2, [r7, #16]
 800e5aa:	440a      	add	r2, r1
 800e5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e5b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	015a      	lsls	r2, r3, #5
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	4413      	add	r3, r2
 800e5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	683a      	ldr	r2, [r7, #0]
 800e5c8:	7812      	ldrb	r2, [r2, #0]
 800e5ca:	0151      	lsls	r1, r2, #5
 800e5cc:	693a      	ldr	r2, [r7, #16]
 800e5ce:	440a      	add	r2, r1
 800e5d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f242 7210 	movw	r2, #10000	; 0x2710
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d902      	bls.n	800e5f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	75fb      	strb	r3, [r7, #23]
          break;
 800e5ee:	e00c      	b.n	800e60a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	015a      	lsls	r2, r3, #5
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e608:	d0e7      	beq.n	800e5da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	371c      	adds	r7, #28
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800e618:	b480      	push	{r7}
 800e61a:	b089      	sub	sp, #36	; 0x24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	4611      	mov	r1, r2
 800e624:	461a      	mov	r2, r3
 800e626:	460b      	mov	r3, r1
 800e628:	71fb      	strb	r3, [r7, #7]
 800e62a:	4613      	mov	r3, r2
 800e62c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800e636:	88bb      	ldrh	r3, [r7, #4]
 800e638:	3303      	adds	r3, #3
 800e63a:	089b      	lsrs	r3, r3, #2
 800e63c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800e63e:	2300      	movs	r3, #0
 800e640:	61bb      	str	r3, [r7, #24]
 800e642:	e018      	b.n	800e676 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e644:	79fb      	ldrb	r3, [r7, #7]
 800e646:	031a      	lsls	r2, r3, #12
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	4413      	add	r3, r2
 800e64c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e650:	461a      	mov	r2, r3
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6013      	str	r3, [r2, #0]
    pSrc++;
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	3301      	adds	r3, #1
 800e65c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	3301      	adds	r3, #1
 800e662:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	3301      	adds	r3, #1
 800e668:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	3301      	adds	r3, #1
 800e66e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	3301      	adds	r3, #1
 800e674:	61bb      	str	r3, [r7, #24]
 800e676:	69ba      	ldr	r2, [r7, #24]
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d3e2      	bcc.n	800e644 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3724      	adds	r7, #36	; 0x24
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr

0800e68c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b08b      	sub	sp, #44	; 0x2c
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	4613      	mov	r3, r2
 800e698:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e6a2:	88fb      	ldrh	r3, [r7, #6]
 800e6a4:	089b      	lsrs	r3, r3, #2
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e6aa:	88fb      	ldrh	r3, [r7, #6]
 800e6ac:	f003 0303 	and.w	r3, r3, #3
 800e6b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	623b      	str	r3, [r7, #32]
 800e6b6:	e014      	b.n	800e6e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	601a      	str	r2, [r3, #0]
    pDest++;
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d8:	3301      	adds	r3, #1
 800e6da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e6dc:	6a3b      	ldr	r3, [r7, #32]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	623b      	str	r3, [r7, #32]
 800e6e2:	6a3a      	ldr	r2, [r7, #32]
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d3e6      	bcc.n	800e6b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e6ea:	8bfb      	ldrh	r3, [r7, #30]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d01e      	beq.n	800e72e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	f107 0310 	add.w	r3, r7, #16
 800e700:	6812      	ldr	r2, [r2, #0]
 800e702:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e704:	693a      	ldr	r2, [r7, #16]
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	00db      	lsls	r3, r3, #3
 800e70c:	fa22 f303 	lsr.w	r3, r2, r3
 800e710:	b2da      	uxtb	r2, r3
 800e712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e714:	701a      	strb	r2, [r3, #0]
      i++;
 800e716:	6a3b      	ldr	r3, [r7, #32]
 800e718:	3301      	adds	r3, #1
 800e71a:	623b      	str	r3, [r7, #32]
      pDest++;
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	3301      	adds	r3, #1
 800e720:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e722:	8bfb      	ldrh	r3, [r7, #30]
 800e724:	3b01      	subs	r3, #1
 800e726:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e728:	8bfb      	ldrh	r3, [r7, #30]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1ea      	bne.n	800e704 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e730:	4618      	mov	r0, r3
 800e732:	372c      	adds	r7, #44	; 0x2c
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	785b      	ldrb	r3, [r3, #1]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d12c      	bne.n	800e7b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	015a      	lsls	r2, r3, #5
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	4413      	add	r3, r2
 800e760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	db12      	blt.n	800e790 <USB_EPSetStall+0x54>
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00f      	beq.n	800e790 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	015a      	lsls	r2, r3, #5
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	4413      	add	r3, r2
 800e778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	0151      	lsls	r1, r2, #5
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	440a      	add	r2, r1
 800e786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e78a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e78e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	015a      	lsls	r2, r3, #5
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	4413      	add	r3, r2
 800e798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	0151      	lsls	r1, r2, #5
 800e7a2:	68fa      	ldr	r2, [r7, #12]
 800e7a4:	440a      	add	r2, r1
 800e7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	e02b      	b.n	800e80a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	015a      	lsls	r2, r3, #5
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	db12      	blt.n	800e7ea <USB_EPSetStall+0xae>
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00f      	beq.n	800e7ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	015a      	lsls	r2, r3, #5
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68ba      	ldr	r2, [r7, #8]
 800e7da:	0151      	lsls	r1, r2, #5
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	440a      	add	r2, r1
 800e7e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e7e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	015a      	lsls	r2, r3, #5
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	68ba      	ldr	r2, [r7, #8]
 800e7fa:	0151      	lsls	r1, r2, #5
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	440a      	add	r2, r1
 800e800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e808:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	785b      	ldrb	r3, [r3, #1]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d128      	bne.n	800e886 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	015a      	lsls	r2, r3, #5
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	4413      	add	r3, r2
 800e83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	0151      	lsls	r1, r2, #5
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	440a      	add	r2, r1
 800e84a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e84e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e852:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	791b      	ldrb	r3, [r3, #4]
 800e858:	2b03      	cmp	r3, #3
 800e85a:	d003      	beq.n	800e864 <USB_EPClearStall+0x4c>
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	791b      	ldrb	r3, [r3, #4]
 800e860:	2b02      	cmp	r3, #2
 800e862:	d138      	bne.n	800e8d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	015a      	lsls	r2, r3, #5
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	4413      	add	r3, r2
 800e86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	68ba      	ldr	r2, [r7, #8]
 800e874:	0151      	lsls	r1, r2, #5
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	440a      	add	r2, r1
 800e87a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e87e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e882:	6013      	str	r3, [r2, #0]
 800e884:	e027      	b.n	800e8d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	015a      	lsls	r2, r3, #5
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	4413      	add	r3, r2
 800e88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	68ba      	ldr	r2, [r7, #8]
 800e896:	0151      	lsls	r1, r2, #5
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	440a      	add	r2, r1
 800e89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	791b      	ldrb	r3, [r3, #4]
 800e8aa:	2b03      	cmp	r3, #3
 800e8ac:	d003      	beq.n	800e8b6 <USB_EPClearStall+0x9e>
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	791b      	ldrb	r3, [r3, #4]
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d10f      	bne.n	800e8d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	015a      	lsls	r2, r3, #5
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	4413      	add	r3, r2
 800e8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	68ba      	ldr	r2, [r7, #8]
 800e8c6:	0151      	lsls	r1, r2, #5
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	440a      	add	r2, r1
 800e8cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3714      	adds	r7, #20
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e902:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e906:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	78fb      	ldrb	r3, [r7, #3]
 800e912:	011b      	lsls	r3, r3, #4
 800e914:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e918:	68f9      	ldr	r1, [r7, #12]
 800e91a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e91e:	4313      	orrs	r3, r2
 800e920:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e922:	2300      	movs	r3, #0
}
 800e924:	4618      	mov	r0, r3
 800e926:	3714      	adds	r7, #20
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e930:	b480      	push	{r7}
 800e932:	b085      	sub	sp, #20
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e94a:	f023 0303 	bic.w	r3, r3, #3
 800e94e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e95e:	f023 0302 	bic.w	r3, r3, #2
 800e962:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e972:	b480      	push	{r7}
 800e974:	b085      	sub	sp, #20
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e98c:	f023 0303 	bic.w	r3, r3, #3
 800e990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	68fa      	ldr	r2, [r7, #12]
 800e99c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9a0:	f043 0302 	orr.w	r3, r3, #2
 800e9a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3714      	adds	r7, #20
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	695b      	ldr	r3, [r3, #20]
 800e9c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3714      	adds	r7, #20
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr

0800e9da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9da:	b480      	push	{r7}
 800e9dc:	b085      	sub	sp, #20
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f6:	69db      	ldr	r3, [r3, #28]
 800e9f8:	68ba      	ldr	r2, [r7, #8]
 800e9fa:	4013      	ands	r3, r2
 800e9fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	0c1b      	lsrs	r3, r3, #16
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3714      	adds	r7, #20
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr

0800ea0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b085      	sub	sp, #20
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea20:	699b      	ldr	r3, [r3, #24]
 800ea22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea2a:	69db      	ldr	r3, [r3, #28]
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	4013      	ands	r3, r2
 800ea30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	b29b      	uxth	r3, r3
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea42:	b480      	push	{r7}
 800ea44:	b085      	sub	sp, #20
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ea52:	78fb      	ldrb	r3, [r7, #3]
 800ea54:	015a      	lsls	r2, r3, #5
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	4413      	add	r3, r2
 800ea5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea68:	695b      	ldr	r3, [r3, #20]
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ea70:	68bb      	ldr	r3, [r7, #8]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3714      	adds	r7, #20
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr

0800ea7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea7e:	b480      	push	{r7}
 800ea80:	b087      	sub	sp, #28
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	460b      	mov	r3, r1
 800ea88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea94:	691b      	ldr	r3, [r3, #16]
 800ea96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eaa2:	78fb      	ldrb	r3, [r7, #3]
 800eaa4:	f003 030f 	and.w	r3, r3, #15
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	fa22 f303 	lsr.w	r3, r2, r3
 800eaae:	01db      	lsls	r3, r3, #7
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	693a      	ldr	r2, [r7, #16]
 800eab4:	4313      	orrs	r3, r2
 800eab6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eab8:	78fb      	ldrb	r3, [r7, #3]
 800eaba:	015a      	lsls	r2, r3, #5
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	4413      	add	r3, r2
 800eac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	693a      	ldr	r2, [r7, #16]
 800eac8:	4013      	ands	r3, r2
 800eaca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eacc:	68bb      	ldr	r3, [r7, #8]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	371c      	adds	r7, #28
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr

0800eada <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eada:	b480      	push	{r7}
 800eadc:	b083      	sub	sp, #12
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	695b      	ldr	r3, [r3, #20]
 800eae6:	f003 0301 	and.w	r3, r3, #1
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eaf6:	b480      	push	{r7}
 800eaf8:	b085      	sub	sp, #20
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb14:	f023 0307 	bic.w	r3, r3, #7
 800eb18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	333c      	adds	r3, #60	; 0x3c
 800eb4e:	3304      	adds	r3, #4
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	4a1c      	ldr	r2, [pc, #112]	; (800ebc8 <USB_EP0_OutStart+0x8c>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d90a      	bls.n	800eb72 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb6c:	d101      	bne.n	800eb72 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e024      	b.n	800ebbc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb78:	461a      	mov	r2, r3
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb84:	691b      	ldr	r3, [r3, #16]
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb98:	691b      	ldr	r3, [r3, #16]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eba0:	f043 0318 	orr.w	r3, r3, #24
 800eba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ebb8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3714      	adds	r7, #20
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	4f54300a 	.word	0x4f54300a

0800ebcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	4a13      	ldr	r2, [pc, #76]	; (800ec30 <USB_CoreReset+0x64>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d901      	bls.n	800ebea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	e01b      	b.n	800ec22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	691b      	ldr	r3, [r3, #16]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	daf2      	bge.n	800ebd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	f043 0201 	orr.w	r2, r3, #1
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	3301      	adds	r3, #1
 800ec06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4a09      	ldr	r2, [pc, #36]	; (800ec30 <USB_CoreReset+0x64>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d901      	bls.n	800ec14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ec10:	2303      	movs	r3, #3
 800ec12:	e006      	b.n	800ec22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	f003 0301 	and.w	r3, r3, #1
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d0f0      	beq.n	800ec02 <USB_CoreReset+0x36>

  return HAL_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3714      	adds	r7, #20
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	00030d40 	.word	0x00030d40

0800ec34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ec38:	4904      	ldr	r1, [pc, #16]	; (800ec4c <MX_FATFS_Init+0x18>)
 800ec3a:	4805      	ldr	r0, [pc, #20]	; (800ec50 <MX_FATFS_Init+0x1c>)
 800ec3c:	f005 fad0 	bl	80141e0 <FATFS_LinkDriver>
 800ec40:	4603      	mov	r3, r0
 800ec42:	461a      	mov	r2, r3
 800ec44:	4b03      	ldr	r3, [pc, #12]	; (800ec54 <MX_FATFS_Init+0x20>)
 800ec46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ec48:	bf00      	nop
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	20001290 	.word	0x20001290
 800ec50:	080175d0 	.word	0x080175d0
 800ec54:	2000128c 	.word	0x2000128c

0800ec58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ec5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ec72:	f000 f885 	bl	800ed80 <BSP_SD_IsDetected>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d001      	beq.n	800ec80 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	e012      	b.n	800eca6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ec80:	480b      	ldr	r0, [pc, #44]	; (800ecb0 <BSP_SD_Init+0x48>)
 800ec82:	f7fb f959 	bl	8009f38 <HAL_SD_Init>
 800ec86:	4603      	mov	r3, r0
 800ec88:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ec8a:	79fb      	ldrb	r3, [r7, #7]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d109      	bne.n	800eca4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ec90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ec94:	4806      	ldr	r0, [pc, #24]	; (800ecb0 <BSP_SD_Init+0x48>)
 800ec96:	f7fc f80d 	bl	800acb4 <HAL_SD_ConfigWideBusOperation>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d001      	beq.n	800eca4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800eca0:	2301      	movs	r3, #1
 800eca2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800eca4:	79fb      	ldrb	r3, [r7, #7]
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3708      	adds	r7, #8
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	20000fc8 	.word	0x20000fc8

0800ecb4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	68ba      	ldr	r2, [r7, #8]
 800ecc8:	68f9      	ldr	r1, [r7, #12]
 800ecca:	4806      	ldr	r0, [pc, #24]	; (800ece4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800eccc:	f7fb fa5c 	bl	800a188 <HAL_SD_ReadBlocks_DMA>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ecda:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3718      	adds	r7, #24
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	20000fc8 	.word	0x20000fc8

0800ece8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b086      	sub	sp, #24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	68f9      	ldr	r1, [r7, #12]
 800ecfe:	4806      	ldr	r0, [pc, #24]	; (800ed18 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ed00:	f7fb faea 	bl	800a2d8 <HAL_SD_WriteBlocks_DMA>
 800ed04:	4603      	mov	r3, r0
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d001      	beq.n	800ed0e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3718      	adds	r7, #24
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	20000fc8 	.word	0x20000fc8

0800ed1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ed20:	4805      	ldr	r0, [pc, #20]	; (800ed38 <BSP_SD_GetCardState+0x1c>)
 800ed22:	f7fc f8db 	bl	800aedc <HAL_SD_GetCardState>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b04      	cmp	r3, #4
 800ed2a:	bf14      	ite	ne
 800ed2c:	2301      	movne	r3, #1
 800ed2e:	2300      	moveq	r3, #0
 800ed30:	b2db      	uxtb	r3, r3
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	20000fc8 	.word	0x20000fc8

0800ed3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	4803      	ldr	r0, [pc, #12]	; (800ed54 <BSP_SD_GetCardInfo+0x18>)
 800ed48:	f7fb ff88 	bl	800ac5c <HAL_SD_GetCardInfo>
}
 800ed4c:	bf00      	nop
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	20000fc8 	.word	0x20000fc8

0800ed58 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ed60:	f000 f9a0 	bl	800f0a4 <BSP_SD_WriteCpltCallback>
}
 800ed64:	bf00      	nop
 800ed66:	3708      	adds	r7, #8
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ed74:	f000 f9a2 	bl	800f0bc <BSP_SD_ReadCpltCallback>
}
 800ed78:	bf00      	nop
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ed86:	2301      	movs	r3, #1
 800ed88:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ed8a:	f000 f80b 	bl	800eda4 <BSP_PlatformIsDetected>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d101      	bne.n	800ed98 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ed94:	2300      	movs	r3, #0
 800ed96:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ed98:	79fb      	ldrb	r3, [r7, #7]
 800ed9a:	b2db      	uxtb	r3, r3
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800edaa:	2301      	movs	r3, #1
 800edac:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800edae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edb2:	4806      	ldr	r0, [pc, #24]	; (800edcc <BSP_PlatformIsDetected+0x28>)
 800edb4:	f7f6 fde2 	bl	800597c <HAL_GPIO_ReadPin>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d001      	beq.n	800edc2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800edbe:	2300      	movs	r3, #0
 800edc0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800edc2:	79fb      	ldrb	r3, [r7, #7]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	48000400 	.word	0x48000400

0800edd0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800edd8:	f7f5 f82e 	bl	8003e38 <HAL_GetTick>
 800eddc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800edde:	e006      	b.n	800edee <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ede0:	f7ff ff9c 	bl	800ed1c <BSP_SD_GetCardState>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d101      	bne.n	800edee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800edea:	2300      	movs	r3, #0
 800edec:	e009      	b.n	800ee02 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800edee:	f7f5 f823 	bl	8003e38 <HAL_GetTick>
 800edf2:	4602      	mov	r2, r0
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d8f0      	bhi.n	800ede0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800edfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
	...

0800ee0c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	4603      	mov	r3, r0
 800ee14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ee16:	4b0b      	ldr	r3, [pc, #44]	; (800ee44 <SD_CheckStatus+0x38>)
 800ee18:	2201      	movs	r2, #1
 800ee1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ee1c:	f7ff ff7e 	bl	800ed1c <BSP_SD_GetCardState>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d107      	bne.n	800ee36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ee26:	4b07      	ldr	r3, [pc, #28]	; (800ee44 <SD_CheckStatus+0x38>)
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	f023 0301 	bic.w	r3, r3, #1
 800ee30:	b2da      	uxtb	r2, r3
 800ee32:	4b04      	ldr	r3, [pc, #16]	; (800ee44 <SD_CheckStatus+0x38>)
 800ee34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ee36:	4b03      	ldr	r3, [pc, #12]	; (800ee44 <SD_CheckStatus+0x38>)
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	b2db      	uxtb	r3, r3
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	20000149 	.word	0x20000149

0800ee48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	4603      	mov	r3, r0
 800ee50:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ee52:	f7ff ff09 	bl	800ec68 <BSP_SD_Init>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d107      	bne.n	800ee6c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7ff ffd4 	bl	800ee0c <SD_CheckStatus>
 800ee64:	4603      	mov	r3, r0
 800ee66:	461a      	mov	r2, r3
 800ee68:	4b04      	ldr	r3, [pc, #16]	; (800ee7c <SD_initialize+0x34>)
 800ee6a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ee6c:	4b03      	ldr	r3, [pc, #12]	; (800ee7c <SD_initialize+0x34>)
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	b2db      	uxtb	r3, r3
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	20000149 	.word	0x20000149

0800ee80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	4603      	mov	r3, r0
 800ee88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ee8a:	79fb      	ldrb	r3, [r7, #7]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7ff ffbd 	bl	800ee0c <SD_CheckStatus>
 800ee92:	4603      	mov	r3, r0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b086      	sub	sp, #24
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60b9      	str	r1, [r7, #8]
 800eea4:	607a      	str	r2, [r7, #4]
 800eea6:	603b      	str	r3, [r7, #0]
 800eea8:	4603      	mov	r3, r0
 800eeaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800eeac:	2301      	movs	r3, #1
 800eeae:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800eeb0:	f247 5030 	movw	r0, #30000	; 0x7530
 800eeb4:	f7ff ff8c 	bl	800edd0 <SD_CheckStatusWithTimeout>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	da01      	bge.n	800eec2 <SD_read+0x26>
  {
    return res;
 800eebe:	7dfb      	ldrb	r3, [r7, #23]
 800eec0:	e03b      	b.n	800ef3a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	6879      	ldr	r1, [r7, #4]
 800eec6:	68b8      	ldr	r0, [r7, #8]
 800eec8:	f7ff fef4 	bl	800ecb4 <BSP_SD_ReadBlocks_DMA>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d132      	bne.n	800ef38 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800eed2:	4b1c      	ldr	r3, [pc, #112]	; (800ef44 <SD_read+0xa8>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800eed8:	f7f4 ffae 	bl	8003e38 <HAL_GetTick>
 800eedc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800eede:	bf00      	nop
 800eee0:	4b18      	ldr	r3, [pc, #96]	; (800ef44 <SD_read+0xa8>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d108      	bne.n	800eefa <SD_read+0x5e>
 800eee8:	f7f4 ffa6 	bl	8003e38 <HAL_GetTick>
 800eeec:	4602      	mov	r2, r0
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	f247 522f 	movw	r2, #29999	; 0x752f
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d9f2      	bls.n	800eee0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800eefa:	4b12      	ldr	r3, [pc, #72]	; (800ef44 <SD_read+0xa8>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d102      	bne.n	800ef08 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ef02:	2301      	movs	r3, #1
 800ef04:	75fb      	strb	r3, [r7, #23]
 800ef06:	e017      	b.n	800ef38 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ef08:	4b0e      	ldr	r3, [pc, #56]	; (800ef44 <SD_read+0xa8>)
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ef0e:	f7f4 ff93 	bl	8003e38 <HAL_GetTick>
 800ef12:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ef14:	e007      	b.n	800ef26 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef16:	f7ff ff01 	bl	800ed1c <BSP_SD_GetCardState>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d102      	bne.n	800ef26 <SD_read+0x8a>
          {
            res = RES_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ef24:	e008      	b.n	800ef38 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ef26:	f7f4 ff87 	bl	8003e38 <HAL_GetTick>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	1ad3      	subs	r3, r2, r3
 800ef30:	f247 522f 	movw	r2, #29999	; 0x752f
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d9ee      	bls.n	800ef16 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ef38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3718      	adds	r7, #24
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	200016fc 	.word	0x200016fc

0800ef48 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60b9      	str	r1, [r7, #8]
 800ef50:	607a      	str	r2, [r7, #4]
 800ef52:	603b      	str	r3, [r7, #0]
 800ef54:	4603      	mov	r3, r0
 800ef56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ef5c:	4b24      	ldr	r3, [pc, #144]	; (800eff0 <SD_write+0xa8>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ef62:	f247 5030 	movw	r0, #30000	; 0x7530
 800ef66:	f7ff ff33 	bl	800edd0 <SD_CheckStatusWithTimeout>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	da01      	bge.n	800ef74 <SD_write+0x2c>
  {
    return res;
 800ef70:	7dfb      	ldrb	r3, [r7, #23]
 800ef72:	e038      	b.n	800efe6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ef74:	683a      	ldr	r2, [r7, #0]
 800ef76:	6879      	ldr	r1, [r7, #4]
 800ef78:	68b8      	ldr	r0, [r7, #8]
 800ef7a:	f7ff feb5 	bl	800ece8 <BSP_SD_WriteBlocks_DMA>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d12f      	bne.n	800efe4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ef84:	f7f4 ff58 	bl	8003e38 <HAL_GetTick>
 800ef88:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ef8a:	bf00      	nop
 800ef8c:	4b18      	ldr	r3, [pc, #96]	; (800eff0 <SD_write+0xa8>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d108      	bne.n	800efa6 <SD_write+0x5e>
 800ef94:	f7f4 ff50 	bl	8003e38 <HAL_GetTick>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	f247 522f 	movw	r2, #29999	; 0x752f
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d9f2      	bls.n	800ef8c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800efa6:	4b12      	ldr	r3, [pc, #72]	; (800eff0 <SD_write+0xa8>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d102      	bne.n	800efb4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	75fb      	strb	r3, [r7, #23]
 800efb2:	e017      	b.n	800efe4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800efb4:	4b0e      	ldr	r3, [pc, #56]	; (800eff0 <SD_write+0xa8>)
 800efb6:	2200      	movs	r2, #0
 800efb8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800efba:	f7f4 ff3d 	bl	8003e38 <HAL_GetTick>
 800efbe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800efc0:	e007      	b.n	800efd2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800efc2:	f7ff feab 	bl	800ed1c <BSP_SD_GetCardState>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d102      	bne.n	800efd2 <SD_write+0x8a>
          {
            res = RES_OK;
 800efcc:	2300      	movs	r3, #0
 800efce:	75fb      	strb	r3, [r7, #23]
            break;
 800efd0:	e008      	b.n	800efe4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800efd2:	f7f4 ff31 	bl	8003e38 <HAL_GetTick>
 800efd6:	4602      	mov	r2, r0
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	1ad3      	subs	r3, r2, r3
 800efdc:	f247 522f 	movw	r2, #29999	; 0x752f
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d9ee      	bls.n	800efc2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800efe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3718      	adds	r7, #24
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	200016f8 	.word	0x200016f8

0800eff4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b08c      	sub	sp, #48	; 0x30
 800eff8:	af00      	add	r7, sp, #0
 800effa:	4603      	mov	r3, r0
 800effc:	603a      	str	r2, [r7, #0]
 800effe:	71fb      	strb	r3, [r7, #7]
 800f000:	460b      	mov	r3, r1
 800f002:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f004:	2301      	movs	r3, #1
 800f006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f00a:	4b25      	ldr	r3, [pc, #148]	; (800f0a0 <SD_ioctl+0xac>)
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	f003 0301 	and.w	r3, r3, #1
 800f014:	2b00      	cmp	r3, #0
 800f016:	d001      	beq.n	800f01c <SD_ioctl+0x28>
 800f018:	2303      	movs	r3, #3
 800f01a:	e03c      	b.n	800f096 <SD_ioctl+0xa2>

  switch (cmd)
 800f01c:	79bb      	ldrb	r3, [r7, #6]
 800f01e:	2b03      	cmp	r3, #3
 800f020:	d834      	bhi.n	800f08c <SD_ioctl+0x98>
 800f022:	a201      	add	r2, pc, #4	; (adr r2, 800f028 <SD_ioctl+0x34>)
 800f024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f028:	0800f039 	.word	0x0800f039
 800f02c:	0800f041 	.word	0x0800f041
 800f030:	0800f059 	.word	0x0800f059
 800f034:	0800f073 	.word	0x0800f073
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f038:	2300      	movs	r3, #0
 800f03a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f03e:	e028      	b.n	800f092 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f040:	f107 0308 	add.w	r3, r7, #8
 800f044:	4618      	mov	r0, r3
 800f046:	f7ff fe79 	bl	800ed3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f04a:	6a3a      	ldr	r2, [r7, #32]
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f056:	e01c      	b.n	800f092 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f058:	f107 0308 	add.w	r3, r7, #8
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff fe6d 	bl	800ed3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	b29a      	uxth	r2, r3
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f06a:	2300      	movs	r3, #0
 800f06c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f070:	e00f      	b.n	800f092 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f072:	f107 0308 	add.w	r3, r7, #8
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff fe60 	bl	800ed3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	0a5a      	lsrs	r2, r3, #9
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f08a:	e002      	b.n	800f092 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f08c:	2304      	movs	r3, #4
 800f08e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f096:	4618      	mov	r0, r3
 800f098:	3730      	adds	r7, #48	; 0x30
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	20000149 	.word	0x20000149

0800f0a4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f0a8:	4b03      	ldr	r3, [pc, #12]	; (800f0b8 <BSP_SD_WriteCpltCallback+0x14>)
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	601a      	str	r2, [r3, #0]
}
 800f0ae:	bf00      	nop
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr
 800f0b8:	200016f8 	.word	0x200016f8

0800f0bc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f0c0:	4b03      	ldr	r3, [pc, #12]	; (800f0d0 <BSP_SD_ReadCpltCallback+0x14>)
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	601a      	str	r2, [r3, #0]
}
 800f0c6:	bf00      	nop
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr
 800f0d0:	200016fc 	.word	0x200016fc

0800f0d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	460b      	mov	r3, r1
 800f0de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f0e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f0e4:	f005 ff96 	bl	8015014 <USBD_static_malloc>
 800f0e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d105      	bne.n	800f0fc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	e066      	b.n	800f1ca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	68fa      	ldr	r2, [r7, #12]
 800f100:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	7c1b      	ldrb	r3, [r3, #16]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d119      	bne.n	800f140 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f10c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f110:	2202      	movs	r2, #2
 800f112:	2181      	movs	r1, #129	; 0x81
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f005 fd69 	bl	8014bec <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2201      	movs	r2, #1
 800f11e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f120:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f124:	2202      	movs	r2, #2
 800f126:	2101      	movs	r1, #1
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f005 fd5f 	bl	8014bec <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2201      	movs	r2, #1
 800f132:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2210      	movs	r2, #16
 800f13a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f13e:	e016      	b.n	800f16e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f140:	2340      	movs	r3, #64	; 0x40
 800f142:	2202      	movs	r2, #2
 800f144:	2181      	movs	r1, #129	; 0x81
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f005 fd50 	bl	8014bec <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2201      	movs	r2, #1
 800f150:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f152:	2340      	movs	r3, #64	; 0x40
 800f154:	2202      	movs	r2, #2
 800f156:	2101      	movs	r1, #1
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f005 fd47 	bl	8014bec <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2201      	movs	r2, #1
 800f162:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2210      	movs	r2, #16
 800f16a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f16e:	2308      	movs	r3, #8
 800f170:	2203      	movs	r2, #3
 800f172:	2182      	movs	r1, #130	; 0x82
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f005 fd39 	bl	8014bec <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2201      	movs	r2, #1
 800f17e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2200      	movs	r2, #0
 800f190:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2200      	movs	r2, #0
 800f198:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	7c1b      	ldrb	r3, [r3, #16]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d109      	bne.n	800f1b8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f1aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1ae:	2101      	movs	r1, #1
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f005 fe95 	bl	8014ee0 <USBD_LL_PrepareReceive>
 800f1b6:	e007      	b.n	800f1c8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f1be:	2340      	movs	r3, #64	; 0x40
 800f1c0:	2101      	movs	r1, #1
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f005 fe8c 	bl	8014ee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f1c8:	2300      	movs	r3, #0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3710      	adds	r7, #16
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	460b      	mov	r3, r1
 800f1dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f1de:	2181      	movs	r1, #129	; 0x81
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f005 fd41 	bl	8014c68 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f005 fd3a 	bl	8014c68 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f1fc:	2182      	movs	r1, #130	; 0x82
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f005 fd32 	bl	8014c68 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00e      	beq.n	800f23c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f22e:	4618      	mov	r0, r3
 800f230:	f005 fefe 	bl	8015030 <USBD_static_free>
    pdev->pClassData = NULL;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f23c:	2300      	movs	r3, #0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
	...

0800f248 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b086      	sub	sp, #24
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f258:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f25a:	2300      	movs	r3, #0
 800f25c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f25e:	2300      	movs	r3, #0
 800f260:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f262:	2300      	movs	r3, #0
 800f264:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d101      	bne.n	800f270 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f26c:	2303      	movs	r3, #3
 800f26e:	e0af      	b.n	800f3d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d03f      	beq.n	800f2fc <USBD_CDC_Setup+0xb4>
 800f27c:	2b20      	cmp	r3, #32
 800f27e:	f040 809f 	bne.w	800f3c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	88db      	ldrh	r3, [r3, #6]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d02e      	beq.n	800f2e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	b25b      	sxtb	r3, r3
 800f290:	2b00      	cmp	r3, #0
 800f292:	da16      	bge.n	800f2c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f2a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	88d2      	ldrh	r2, [r2, #6]
 800f2a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	88db      	ldrh	r3, [r3, #6]
 800f2ac:	2b07      	cmp	r3, #7
 800f2ae:	bf28      	it	cs
 800f2b0:	2307      	movcs	r3, #7
 800f2b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	89fa      	ldrh	r2, [r7, #14]
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f001 fb43 	bl	8010946 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f2c0:	e085      	b.n	800f3ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	785a      	ldrb	r2, [r3, #1]
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	88db      	ldrh	r3, [r3, #6]
 800f2d0:	b2da      	uxtb	r2, r3
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f2d8:	6939      	ldr	r1, [r7, #16]
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	88db      	ldrh	r3, [r3, #6]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f001 fb5c 	bl	801099e <USBD_CtlPrepareRx>
      break;
 800f2e6:	e072      	b.n	800f3ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2ee:	689b      	ldr	r3, [r3, #8]
 800f2f0:	683a      	ldr	r2, [r7, #0]
 800f2f2:	7850      	ldrb	r0, [r2, #1]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	4798      	blx	r3
      break;
 800f2fa:	e068      	b.n	800f3ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	785b      	ldrb	r3, [r3, #1]
 800f300:	2b0b      	cmp	r3, #11
 800f302:	d852      	bhi.n	800f3aa <USBD_CDC_Setup+0x162>
 800f304:	a201      	add	r2, pc, #4	; (adr r2, 800f30c <USBD_CDC_Setup+0xc4>)
 800f306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f30a:	bf00      	nop
 800f30c:	0800f33d 	.word	0x0800f33d
 800f310:	0800f3b9 	.word	0x0800f3b9
 800f314:	0800f3ab 	.word	0x0800f3ab
 800f318:	0800f3ab 	.word	0x0800f3ab
 800f31c:	0800f3ab 	.word	0x0800f3ab
 800f320:	0800f3ab 	.word	0x0800f3ab
 800f324:	0800f3ab 	.word	0x0800f3ab
 800f328:	0800f3ab 	.word	0x0800f3ab
 800f32c:	0800f3ab 	.word	0x0800f3ab
 800f330:	0800f3ab 	.word	0x0800f3ab
 800f334:	0800f367 	.word	0x0800f367
 800f338:	0800f391 	.word	0x0800f391
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f342:	b2db      	uxtb	r3, r3
 800f344:	2b03      	cmp	r3, #3
 800f346:	d107      	bne.n	800f358 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f348:	f107 030a 	add.w	r3, r7, #10
 800f34c:	2202      	movs	r2, #2
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f001 faf8 	bl	8010946 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f356:	e032      	b.n	800f3be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f358:	6839      	ldr	r1, [r7, #0]
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f001 fa82 	bl	8010864 <USBD_CtlError>
            ret = USBD_FAIL;
 800f360:	2303      	movs	r3, #3
 800f362:	75fb      	strb	r3, [r7, #23]
          break;
 800f364:	e02b      	b.n	800f3be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	2b03      	cmp	r3, #3
 800f370:	d107      	bne.n	800f382 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f372:	f107 030d 	add.w	r3, r7, #13
 800f376:	2201      	movs	r2, #1
 800f378:	4619      	mov	r1, r3
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f001 fae3 	bl	8010946 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f380:	e01d      	b.n	800f3be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f382:	6839      	ldr	r1, [r7, #0]
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f001 fa6d 	bl	8010864 <USBD_CtlError>
            ret = USBD_FAIL;
 800f38a:	2303      	movs	r3, #3
 800f38c:	75fb      	strb	r3, [r7, #23]
          break;
 800f38e:	e016      	b.n	800f3be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d00f      	beq.n	800f3bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f001 fa60 	bl	8010864 <USBD_CtlError>
            ret = USBD_FAIL;
 800f3a4:	2303      	movs	r3, #3
 800f3a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f3a8:	e008      	b.n	800f3bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f001 fa59 	bl	8010864 <USBD_CtlError>
          ret = USBD_FAIL;
 800f3b2:	2303      	movs	r3, #3
 800f3b4:	75fb      	strb	r3, [r7, #23]
          break;
 800f3b6:	e002      	b.n	800f3be <USBD_CDC_Setup+0x176>
          break;
 800f3b8:	bf00      	nop
 800f3ba:	e008      	b.n	800f3ce <USBD_CDC_Setup+0x186>
          break;
 800f3bc:	bf00      	nop
      }
      break;
 800f3be:	e006      	b.n	800f3ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f3c0:	6839      	ldr	r1, [r7, #0]
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f001 fa4e 	bl	8010864 <USBD_CtlError>
      ret = USBD_FAIL;
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800f3cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800f3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3718      	adds	r7, #24
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f3ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d101      	bne.n	800f3fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f3f6:	2303      	movs	r3, #3
 800f3f8:	e04f      	b.n	800f49a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f400:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f402:	78fa      	ldrb	r2, [r7, #3]
 800f404:	6879      	ldr	r1, [r7, #4]
 800f406:	4613      	mov	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4413      	add	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	440b      	add	r3, r1
 800f410:	3318      	adds	r3, #24
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d029      	beq.n	800f46c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f418:	78fa      	ldrb	r2, [r7, #3]
 800f41a:	6879      	ldr	r1, [r7, #4]
 800f41c:	4613      	mov	r3, r2
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4413      	add	r3, r2
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	440b      	add	r3, r1
 800f426:	3318      	adds	r3, #24
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	78f9      	ldrb	r1, [r7, #3]
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	460b      	mov	r3, r1
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	440b      	add	r3, r1
 800f434:	009b      	lsls	r3, r3, #2
 800f436:	4403      	add	r3, r0
 800f438:	3348      	adds	r3, #72	; 0x48
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f440:	fb01 f303 	mul.w	r3, r1, r3
 800f444:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f446:	2b00      	cmp	r3, #0
 800f448:	d110      	bne.n	800f46c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f44a:	78fa      	ldrb	r2, [r7, #3]
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	4613      	mov	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	440b      	add	r3, r1
 800f458:	3318      	adds	r3, #24
 800f45a:	2200      	movs	r2, #0
 800f45c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f45e:	78f9      	ldrb	r1, [r7, #3]
 800f460:	2300      	movs	r3, #0
 800f462:	2200      	movs	r2, #0
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f005 fd03 	bl	8014e70 <USBD_LL_Transmit>
 800f46a:	e015      	b.n	800f498 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	2200      	movs	r2, #0
 800f470:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f47a:	691b      	ldr	r3, [r3, #16]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00b      	beq.n	800f498 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	68ba      	ldr	r2, [r7, #8]
 800f48a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f494:	78fa      	ldrb	r2, [r7, #3]
 800f496:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b084      	sub	sp, #16
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d101      	bne.n	800f4c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f4c0:	2303      	movs	r3, #3
 800f4c2:	e015      	b.n	800f4f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f4c4:	78fb      	ldrb	r3, [r7, #3]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f005 fd41 	bl	8014f50 <USBD_LL_GetRxDataSize>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	68fa      	ldr	r2, [r7, #12]
 800f4e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f4ee:	2300      	movs	r3, #0
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3710      	adds	r7, #16
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f506:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d101      	bne.n	800f512 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f50e:	2303      	movs	r3, #3
 800f510:	e01b      	b.n	800f54a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d015      	beq.n	800f548 <USBD_CDC_EP0_RxReady+0x50>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f522:	2bff      	cmp	r3, #255	; 0xff
 800f524:	d010      	beq.n	800f548 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f52c:	689b      	ldr	r3, [r3, #8]
 800f52e:	68fa      	ldr	r2, [r7, #12]
 800f530:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f534:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f536:	68fa      	ldr	r2, [r7, #12]
 800f538:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f53c:	b292      	uxth	r2, r2
 800f53e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	22ff      	movs	r2, #255	; 0xff
 800f544:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
	...

0800f554 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2243      	movs	r2, #67	; 0x43
 800f560:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f562:	4b03      	ldr	r3, [pc, #12]	; (800f570 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f564:	4618      	mov	r0, r3
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr
 800f570:	200001d4 	.word	0x200001d4

0800f574 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f574:	b480      	push	{r7}
 800f576:	b083      	sub	sp, #12
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2243      	movs	r2, #67	; 0x43
 800f580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f582:	4b03      	ldr	r3, [pc, #12]	; (800f590 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f584:	4618      	mov	r0, r3
 800f586:	370c      	adds	r7, #12
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr
 800f590:	20000190 	.word	0x20000190

0800f594 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2243      	movs	r2, #67	; 0x43
 800f5a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f5a2:	4b03      	ldr	r3, [pc, #12]	; (800f5b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	370c      	adds	r7, #12
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr
 800f5b0:	20000218 	.word	0x20000218

0800f5b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	220a      	movs	r2, #10
 800f5c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f5c2:	4b03      	ldr	r3, [pc, #12]	; (800f5d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	2000014c 	.word	0x2000014c

0800f5d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d101      	bne.n	800f5e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f5e4:	2303      	movs	r3, #3
 800f5e6:	e004      	b.n	800f5f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	370c      	adds	r7, #12
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr

0800f5fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f5fe:	b480      	push	{r7}
 800f600:	b087      	sub	sp, #28
 800f602:	af00      	add	r7, sp, #0
 800f604:	60f8      	str	r0, [r7, #12]
 800f606:	60b9      	str	r1, [r7, #8]
 800f608:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f610:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d101      	bne.n	800f61c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f618:	2303      	movs	r3, #3
 800f61a:	e008      	b.n	800f62e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	68ba      	ldr	r2, [r7, #8]
 800f620:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	371c      	adds	r7, #28
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr

0800f63a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f63a:	b480      	push	{r7}
 800f63c:	b085      	sub	sp, #20
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f64a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d101      	bne.n	800f656 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f652:	2303      	movs	r3, #3
 800f654:	e004      	b.n	800f660 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	683a      	ldr	r2, [r7, #0]
 800f65a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f65e:	2300      	movs	r3, #0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3714      	adds	r7, #20
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f67a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f67c:	2301      	movs	r3, #1
 800f67e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f686:	2b00      	cmp	r3, #0
 800f688:	d101      	bne.n	800f68e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f68a:	2303      	movs	r3, #3
 800f68c:	e01a      	b.n	800f6c4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f694:	2b00      	cmp	r3, #0
 800f696:	d114      	bne.n	800f6c2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	2201      	movs	r2, #1
 800f69c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f6b6:	2181      	movs	r1, #129	; 0x81
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f005 fbd9 	bl	8014e70 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3710      	adds	r7, #16
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d101      	bne.n	800f6ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	e016      	b.n	800f718 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	7c1b      	ldrb	r3, [r3, #16]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d109      	bne.n	800f706 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f6f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f6fc:	2101      	movs	r1, #1
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f005 fbee 	bl	8014ee0 <USBD_LL_PrepareReceive>
 800f704:	e007      	b.n	800f716 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f70c:	2340      	movs	r3, #64	; 0x40
 800f70e:	2101      	movs	r1, #1
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f005 fbe5 	bl	8014ee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f716:	2300      	movs	r3, #0
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3710      	adds	r7, #16
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b086      	sub	sp, #24
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	4613      	mov	r3, r2
 800f72c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d101      	bne.n	800f738 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f734:	2303      	movs	r3, #3
 800f736:	e01f      	b.n	800f778 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2200      	movs	r2, #0
 800f73c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2200      	movs	r2, #0
 800f744:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d003      	beq.n	800f75e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	68ba      	ldr	r2, [r7, #8]
 800f75a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2201      	movs	r2, #1
 800f762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	79fa      	ldrb	r2, [r7, #7]
 800f76a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f005 f9c1 	bl	8014af4 <USBD_LL_Init>
 800f772:	4603      	mov	r3, r0
 800f774:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f776:	7dfb      	ldrb	r3, [r7, #23]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3718      	adds	r7, #24
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f78a:	2300      	movs	r3, #0
 800f78c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d101      	bne.n	800f798 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f794:	2303      	movs	r3, #3
 800f796:	e016      	b.n	800f7c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	683a      	ldr	r2, [r7, #0]
 800f79c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00b      	beq.n	800f7c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b4:	f107 020e 	add.w	r2, r7, #14
 800f7b8:	4610      	mov	r0, r2
 800f7ba:	4798      	blx	r3
 800f7bc:	4602      	mov	r2, r0
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b082      	sub	sp, #8
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f005 f9d6 	bl	8014b88 <USBD_LL_Start>
 800f7dc:	4603      	mov	r3, r0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3708      	adds	r7, #8
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f7e6:	b480      	push	{r7}
 800f7e8:	b083      	sub	sp, #12
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	460b      	mov	r3, r1
 800f806:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f808:	2303      	movs	r3, #3
 800f80a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f812:	2b00      	cmp	r3, #0
 800f814:	d009      	beq.n	800f82a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	78fa      	ldrb	r2, [r7, #3]
 800f820:	4611      	mov	r1, r2
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	4798      	blx	r3
 800f826:	4603      	mov	r3, r0
 800f828:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3710      	adds	r7, #16
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	460b      	mov	r3, r1
 800f83e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f846:	2b00      	cmp	r3, #0
 800f848:	d007      	beq.n	800f85a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	78fa      	ldrb	r2, [r7, #3]
 800f854:	4611      	mov	r1, r2
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	4798      	blx	r3
  }

  return USBD_OK;
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f874:	6839      	ldr	r1, [r7, #0]
 800f876:	4618      	mov	r0, r3
 800f878:	f000 ffba 	bl	80107f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2201      	movs	r2, #1
 800f880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f88a:	461a      	mov	r2, r3
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f898:	f003 031f 	and.w	r3, r3, #31
 800f89c:	2b02      	cmp	r3, #2
 800f89e:	d01a      	beq.n	800f8d6 <USBD_LL_SetupStage+0x72>
 800f8a0:	2b02      	cmp	r3, #2
 800f8a2:	d822      	bhi.n	800f8ea <USBD_LL_SetupStage+0x86>
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <USBD_LL_SetupStage+0x4a>
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d00a      	beq.n	800f8c2 <USBD_LL_SetupStage+0x5e>
 800f8ac:	e01d      	b.n	800f8ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 fa62 	bl	800fd80 <USBD_StdDevReq>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	73fb      	strb	r3, [r7, #15]
      break;
 800f8c0:	e020      	b.n	800f904 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 fac6 	bl	800fe5c <USBD_StdItfReq>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	73fb      	strb	r3, [r7, #15]
      break;
 800f8d4:	e016      	b.n	800f904 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8dc:	4619      	mov	r1, r3
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 fb05 	bl	800feee <USBD_StdEPReq>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	73fb      	strb	r3, [r7, #15]
      break;
 800f8e8:	e00c      	b.n	800f904 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f8f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f005 f9eb 	bl	8014cd4 <USBD_LL_StallEP>
 800f8fe:	4603      	mov	r3, r0
 800f900:	73fb      	strb	r3, [r7, #15]
      break;
 800f902:	bf00      	nop
  }

  return ret;
 800f904:	7bfb      	ldrb	r3, [r7, #15]
}
 800f906:	4618      	mov	r0, r3
 800f908:	3710      	adds	r7, #16
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b086      	sub	sp, #24
 800f912:	af00      	add	r7, sp, #0
 800f914:	60f8      	str	r0, [r7, #12]
 800f916:	460b      	mov	r3, r1
 800f918:	607a      	str	r2, [r7, #4]
 800f91a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f91c:	7afb      	ldrb	r3, [r7, #11]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d138      	bne.n	800f994 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f928:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f930:	2b03      	cmp	r3, #3
 800f932:	d14a      	bne.n	800f9ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	689a      	ldr	r2, [r3, #8]
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d913      	bls.n	800f968 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	689a      	ldr	r2, [r3, #8]
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	1ad2      	subs	r2, r2, r3
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	68da      	ldr	r2, [r3, #12]
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	689b      	ldr	r3, [r3, #8]
 800f956:	4293      	cmp	r3, r2
 800f958:	bf28      	it	cs
 800f95a:	4613      	movcs	r3, r2
 800f95c:	461a      	mov	r2, r3
 800f95e:	6879      	ldr	r1, [r7, #4]
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	f001 f839 	bl	80109d8 <USBD_CtlContinueRx>
 800f966:	e030      	b.n	800f9ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	2b03      	cmp	r3, #3
 800f972:	d10b      	bne.n	800f98c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f97a:	691b      	ldr	r3, [r3, #16]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d005      	beq.n	800f98c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f986:	691b      	ldr	r3, [r3, #16]
 800f988:	68f8      	ldr	r0, [r7, #12]
 800f98a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f001 f834 	bl	80109fa <USBD_CtlSendStatus>
 800f992:	e01a      	b.n	800f9ca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	2b03      	cmp	r3, #3
 800f99e:	d114      	bne.n	800f9ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9a6:	699b      	ldr	r3, [r3, #24]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d00e      	beq.n	800f9ca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9b2:	699b      	ldr	r3, [r3, #24]
 800f9b4:	7afa      	ldrb	r2, [r7, #11]
 800f9b6:	4611      	mov	r1, r2
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	4798      	blx	r3
 800f9bc:	4603      	mov	r3, r0
 800f9be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f9c0:	7dfb      	ldrb	r3, [r7, #23]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d001      	beq.n	800f9ca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f9c6:	7dfb      	ldrb	r3, [r7, #23]
 800f9c8:	e000      	b.n	800f9cc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3718      	adds	r7, #24
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b086      	sub	sp, #24
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	460b      	mov	r3, r1
 800f9de:	607a      	str	r2, [r7, #4]
 800f9e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f9e2:	7afb      	ldrb	r3, [r7, #11]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d16b      	bne.n	800fac0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	3314      	adds	r3, #20
 800f9ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	d156      	bne.n	800faa6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	689a      	ldr	r2, [r3, #8]
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d914      	bls.n	800fa2e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	689a      	ldr	r2, [r3, #8]
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	1ad2      	subs	r2, r2, r3
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	461a      	mov	r2, r3
 800fa18:	6879      	ldr	r1, [r7, #4]
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f000 ffae 	bl	801097c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa20:	2300      	movs	r3, #0
 800fa22:	2200      	movs	r2, #0
 800fa24:	2100      	movs	r1, #0
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	f005 fa5a 	bl	8014ee0 <USBD_LL_PrepareReceive>
 800fa2c:	e03b      	b.n	800faa6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	68da      	ldr	r2, [r3, #12]
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d11c      	bne.n	800fa74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	685a      	ldr	r2, [r3, #4]
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d316      	bcc.n	800fa74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d20f      	bcs.n	800fa74 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fa54:	2200      	movs	r2, #0
 800fa56:	2100      	movs	r1, #0
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f000 ff8f 	bl	801097c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa66:	2300      	movs	r3, #0
 800fa68:	2200      	movs	r2, #0
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f005 fa37 	bl	8014ee0 <USBD_LL_PrepareReceive>
 800fa72:	e018      	b.n	800faa6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	2b03      	cmp	r3, #3
 800fa7e:	d10b      	bne.n	800fa98 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d005      	beq.n	800fa98 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	68f8      	ldr	r0, [r7, #12]
 800fa96:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa98:	2180      	movs	r1, #128	; 0x80
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f005 f91a 	bl	8014cd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	f000 ffbd 	bl	8010a20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800faac:	2b01      	cmp	r3, #1
 800faae:	d122      	bne.n	800faf6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f7ff fe98 	bl	800f7e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2200      	movs	r2, #0
 800faba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fabe:	e01a      	b.n	800faf6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	2b03      	cmp	r3, #3
 800faca:	d114      	bne.n	800faf6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fad2:	695b      	ldr	r3, [r3, #20]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00e      	beq.n	800faf6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fade:	695b      	ldr	r3, [r3, #20]
 800fae0:	7afa      	ldrb	r2, [r7, #11]
 800fae2:	4611      	mov	r1, r2
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	4798      	blx	r3
 800fae8:	4603      	mov	r3, r0
 800faea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800faec:	7dfb      	ldrb	r3, [r7, #23]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d001      	beq.n	800faf6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800faf2:	7dfb      	ldrb	r3, [r7, #23]
 800faf4:	e000      	b.n	800faf8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3718      	adds	r7, #24
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d101      	bne.n	800fb34 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fb30:	2303      	movs	r3, #3
 800fb32:	e02f      	b.n	800fb94 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00f      	beq.n	800fb5e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d009      	beq.n	800fb5e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	687a      	ldr	r2, [r7, #4]
 800fb54:	6852      	ldr	r2, [r2, #4]
 800fb56:	b2d2      	uxtb	r2, r2
 800fb58:	4611      	mov	r1, r2
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb5e:	2340      	movs	r3, #64	; 0x40
 800fb60:	2200      	movs	r2, #0
 800fb62:	2100      	movs	r1, #0
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f005 f841 	bl	8014bec <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2240      	movs	r2, #64	; 0x40
 800fb76:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb7a:	2340      	movs	r3, #64	; 0x40
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	2180      	movs	r1, #128	; 0x80
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f005 f833 	bl	8014bec <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2201      	movs	r2, #1
 800fb8a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2240      	movs	r2, #64	; 0x40
 800fb90:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3708      	adds	r7, #8
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	460b      	mov	r3, r1
 800fba6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	78fa      	ldrb	r2, [r7, #3]
 800fbac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fbae:	2300      	movs	r3, #0
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr

0800fbbc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2204      	movs	r2, #4
 800fbd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fbda:	2300      	movs	r3, #0
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	370c      	adds	r7, #12
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr

0800fbe8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	2b04      	cmp	r3, #4
 800fbfa:	d106      	bne.n	800fc0a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fc02:	b2da      	uxtb	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d101      	bne.n	800fc2e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fc2a:	2303      	movs	r3, #3
 800fc2c:	e012      	b.n	800fc54 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2b03      	cmp	r3, #3
 800fc38:	d10b      	bne.n	800fc52 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc40:	69db      	ldr	r3, [r3, #28]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d005      	beq.n	800fc52 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc4c:	69db      	ldr	r3, [r3, #28]
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc52:	2300      	movs	r3, #0
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	460b      	mov	r3, r1
 800fc66:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d101      	bne.n	800fc76 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fc72:	2303      	movs	r3, #3
 800fc74:	e014      	b.n	800fca0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	2b03      	cmp	r3, #3
 800fc80:	d10d      	bne.n	800fc9e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc88:	6a1b      	ldr	r3, [r3, #32]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d007      	beq.n	800fc9e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc94:	6a1b      	ldr	r3, [r3, #32]
 800fc96:	78fa      	ldrb	r2, [r7, #3]
 800fc98:	4611      	mov	r1, r2
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc9e:	2300      	movs	r3, #0
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d101      	bne.n	800fcc2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fcbe:	2303      	movs	r3, #3
 800fcc0:	e014      	b.n	800fcec <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	2b03      	cmp	r3, #3
 800fccc:	d10d      	bne.n	800fcea <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d007      	beq.n	800fcea <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce2:	78fa      	ldrb	r2, [r7, #3]
 800fce4:	4611      	mov	r1, r2
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fcfc:	2300      	movs	r3, #0
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	370c      	adds	r7, #12
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr

0800fd0a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b082      	sub	sp, #8
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2201      	movs	r2, #1
 800fd16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d009      	beq.n	800fd38 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	6852      	ldr	r2, [r2, #4]
 800fd30:	b2d2      	uxtb	r2, r2
 800fd32:	4611      	mov	r1, r2
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	4798      	blx	r3
  }

  return USBD_OK;
 800fd38:	2300      	movs	r3, #0
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3708      	adds	r7, #8
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}

0800fd42 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fd42:	b480      	push	{r7}
 800fd44:	b087      	sub	sp, #28
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	3301      	adds	r3, #1
 800fd58:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fd60:	8a3b      	ldrh	r3, [r7, #16]
 800fd62:	021b      	lsls	r3, r3, #8
 800fd64:	b21a      	sxth	r2, r3
 800fd66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	b21b      	sxth	r3, r3
 800fd6e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fd70:	89fb      	ldrh	r3, [r7, #14]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	371c      	adds	r7, #28
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
	...

0800fd80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd96:	2b40      	cmp	r3, #64	; 0x40
 800fd98:	d005      	beq.n	800fda6 <USBD_StdDevReq+0x26>
 800fd9a:	2b40      	cmp	r3, #64	; 0x40
 800fd9c:	d853      	bhi.n	800fe46 <USBD_StdDevReq+0xc6>
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00b      	beq.n	800fdba <USBD_StdDevReq+0x3a>
 800fda2:	2b20      	cmp	r3, #32
 800fda4:	d14f      	bne.n	800fe46 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdac:	689b      	ldr	r3, [r3, #8]
 800fdae:	6839      	ldr	r1, [r7, #0]
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	4798      	blx	r3
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	73fb      	strb	r3, [r7, #15]
      break;
 800fdb8:	e04a      	b.n	800fe50 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	785b      	ldrb	r3, [r3, #1]
 800fdbe:	2b09      	cmp	r3, #9
 800fdc0:	d83b      	bhi.n	800fe3a <USBD_StdDevReq+0xba>
 800fdc2:	a201      	add	r2, pc, #4	; (adr r2, 800fdc8 <USBD_StdDevReq+0x48>)
 800fdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc8:	0800fe1d 	.word	0x0800fe1d
 800fdcc:	0800fe31 	.word	0x0800fe31
 800fdd0:	0800fe3b 	.word	0x0800fe3b
 800fdd4:	0800fe27 	.word	0x0800fe27
 800fdd8:	0800fe3b 	.word	0x0800fe3b
 800fddc:	0800fdfb 	.word	0x0800fdfb
 800fde0:	0800fdf1 	.word	0x0800fdf1
 800fde4:	0800fe3b 	.word	0x0800fe3b
 800fde8:	0800fe13 	.word	0x0800fe13
 800fdec:	0800fe05 	.word	0x0800fe05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fdf0:	6839      	ldr	r1, [r7, #0]
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 f9de 	bl	80101b4 <USBD_GetDescriptor>
          break;
 800fdf8:	e024      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fdfa:	6839      	ldr	r1, [r7, #0]
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 fb6d 	bl	80104dc <USBD_SetAddress>
          break;
 800fe02:	e01f      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fe04:	6839      	ldr	r1, [r7, #0]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 fbac 	bl	8010564 <USBD_SetConfig>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	73fb      	strb	r3, [r7, #15]
          break;
 800fe10:	e018      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fe12:	6839      	ldr	r1, [r7, #0]
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 fc4b 	bl	80106b0 <USBD_GetConfig>
          break;
 800fe1a:	e013      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fe1c:	6839      	ldr	r1, [r7, #0]
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 fc7c 	bl	801071c <USBD_GetStatus>
          break;
 800fe24:	e00e      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fe26:	6839      	ldr	r1, [r7, #0]
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fcab 	bl	8010784 <USBD_SetFeature>
          break;
 800fe2e:	e009      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fe30:	6839      	ldr	r1, [r7, #0]
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 fcba 	bl	80107ac <USBD_ClrFeature>
          break;
 800fe38:	e004      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fe3a:	6839      	ldr	r1, [r7, #0]
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fd11 	bl	8010864 <USBD_CtlError>
          break;
 800fe42:	bf00      	nop
      }
      break;
 800fe44:	e004      	b.n	800fe50 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fe46:	6839      	ldr	r1, [r7, #0]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 fd0b 	bl	8010864 <USBD_CtlError>
      break;
 800fe4e:	bf00      	nop
  }

  return ret;
 800fe50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop

0800fe5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe72:	2b40      	cmp	r3, #64	; 0x40
 800fe74:	d005      	beq.n	800fe82 <USBD_StdItfReq+0x26>
 800fe76:	2b40      	cmp	r3, #64	; 0x40
 800fe78:	d82f      	bhi.n	800feda <USBD_StdItfReq+0x7e>
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d001      	beq.n	800fe82 <USBD_StdItfReq+0x26>
 800fe7e:	2b20      	cmp	r3, #32
 800fe80:	d12b      	bne.n	800feda <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	3b01      	subs	r3, #1
 800fe8c:	2b02      	cmp	r3, #2
 800fe8e:	d81d      	bhi.n	800fecc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	889b      	ldrh	r3, [r3, #4]
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d813      	bhi.n	800fec2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	6839      	ldr	r1, [r7, #0]
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	4798      	blx	r3
 800fea8:	4603      	mov	r3, r0
 800feaa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	88db      	ldrh	r3, [r3, #6]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d110      	bne.n	800fed6 <USBD_StdItfReq+0x7a>
 800feb4:	7bfb      	ldrb	r3, [r7, #15]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10d      	bne.n	800fed6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 fd9d 	bl	80109fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fec0:	e009      	b.n	800fed6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fec2:	6839      	ldr	r1, [r7, #0]
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 fccd 	bl	8010864 <USBD_CtlError>
          break;
 800feca:	e004      	b.n	800fed6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fecc:	6839      	ldr	r1, [r7, #0]
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 fcc8 	bl	8010864 <USBD_CtlError>
          break;
 800fed4:	e000      	b.n	800fed8 <USBD_StdItfReq+0x7c>
          break;
 800fed6:	bf00      	nop
      }
      break;
 800fed8:	e004      	b.n	800fee4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800feda:	6839      	ldr	r1, [r7, #0]
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 fcc1 	bl	8010864 <USBD_CtlError>
      break;
 800fee2:	bf00      	nop
  }

  return ret;
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3710      	adds	r7, #16
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	b084      	sub	sp, #16
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fef8:	2300      	movs	r3, #0
 800fefa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	889b      	ldrh	r3, [r3, #4]
 800ff00:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff0a:	2b40      	cmp	r3, #64	; 0x40
 800ff0c:	d007      	beq.n	800ff1e <USBD_StdEPReq+0x30>
 800ff0e:	2b40      	cmp	r3, #64	; 0x40
 800ff10:	f200 8145 	bhi.w	801019e <USBD_StdEPReq+0x2b0>
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00c      	beq.n	800ff32 <USBD_StdEPReq+0x44>
 800ff18:	2b20      	cmp	r3, #32
 800ff1a:	f040 8140 	bne.w	801019e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff24:	689b      	ldr	r3, [r3, #8]
 800ff26:	6839      	ldr	r1, [r7, #0]
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	4798      	blx	r3
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ff30:	e13a      	b.n	80101a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	785b      	ldrb	r3, [r3, #1]
 800ff36:	2b03      	cmp	r3, #3
 800ff38:	d007      	beq.n	800ff4a <USBD_StdEPReq+0x5c>
 800ff3a:	2b03      	cmp	r3, #3
 800ff3c:	f300 8129 	bgt.w	8010192 <USBD_StdEPReq+0x2a4>
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d07f      	beq.n	8010044 <USBD_StdEPReq+0x156>
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d03c      	beq.n	800ffc2 <USBD_StdEPReq+0xd4>
 800ff48:	e123      	b.n	8010192 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d002      	beq.n	800ff5c <USBD_StdEPReq+0x6e>
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d016      	beq.n	800ff88 <USBD_StdEPReq+0x9a>
 800ff5a:	e02c      	b.n	800ffb6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff5c:	7bbb      	ldrb	r3, [r7, #14]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00d      	beq.n	800ff7e <USBD_StdEPReq+0x90>
 800ff62:	7bbb      	ldrb	r3, [r7, #14]
 800ff64:	2b80      	cmp	r3, #128	; 0x80
 800ff66:	d00a      	beq.n	800ff7e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ff68:	7bbb      	ldrb	r3, [r7, #14]
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f004 feb1 	bl	8014cd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff72:	2180      	movs	r1, #128	; 0x80
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f004 fead 	bl	8014cd4 <USBD_LL_StallEP>
 800ff7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ff7c:	e020      	b.n	800ffc0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ff7e:	6839      	ldr	r1, [r7, #0]
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 fc6f 	bl	8010864 <USBD_CtlError>
              break;
 800ff86:	e01b      	b.n	800ffc0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	885b      	ldrh	r3, [r3, #2]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10e      	bne.n	800ffae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ff90:	7bbb      	ldrb	r3, [r7, #14]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00b      	beq.n	800ffae <USBD_StdEPReq+0xc0>
 800ff96:	7bbb      	ldrb	r3, [r7, #14]
 800ff98:	2b80      	cmp	r3, #128	; 0x80
 800ff9a:	d008      	beq.n	800ffae <USBD_StdEPReq+0xc0>
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	88db      	ldrh	r3, [r3, #6]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d104      	bne.n	800ffae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ffa4:	7bbb      	ldrb	r3, [r7, #14]
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f004 fe93 	bl	8014cd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 fd23 	bl	80109fa <USBD_CtlSendStatus>

              break;
 800ffb4:	e004      	b.n	800ffc0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ffb6:	6839      	ldr	r1, [r7, #0]
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 fc53 	bl	8010864 <USBD_CtlError>
              break;
 800ffbe:	bf00      	nop
          }
          break;
 800ffc0:	e0ec      	b.n	801019c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	2b02      	cmp	r3, #2
 800ffcc:	d002      	beq.n	800ffd4 <USBD_StdEPReq+0xe6>
 800ffce:	2b03      	cmp	r3, #3
 800ffd0:	d016      	beq.n	8010000 <USBD_StdEPReq+0x112>
 800ffd2:	e030      	b.n	8010036 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ffd4:	7bbb      	ldrb	r3, [r7, #14]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00d      	beq.n	800fff6 <USBD_StdEPReq+0x108>
 800ffda:	7bbb      	ldrb	r3, [r7, #14]
 800ffdc:	2b80      	cmp	r3, #128	; 0x80
 800ffde:	d00a      	beq.n	800fff6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ffe0:	7bbb      	ldrb	r3, [r7, #14]
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f004 fe75 	bl	8014cd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffea:	2180      	movs	r1, #128	; 0x80
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f004 fe71 	bl	8014cd4 <USBD_LL_StallEP>
 800fff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fff4:	e025      	b.n	8010042 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fff6:	6839      	ldr	r1, [r7, #0]
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 fc33 	bl	8010864 <USBD_CtlError>
              break;
 800fffe:	e020      	b.n	8010042 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	885b      	ldrh	r3, [r3, #2]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d11b      	bne.n	8010040 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010008:	7bbb      	ldrb	r3, [r7, #14]
 801000a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801000e:	2b00      	cmp	r3, #0
 8010010:	d004      	beq.n	801001c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010012:	7bbb      	ldrb	r3, [r7, #14]
 8010014:	4619      	mov	r1, r3
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f004 fe92 	bl	8014d40 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 fcec 	bl	80109fa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010028:	689b      	ldr	r3, [r3, #8]
 801002a:	6839      	ldr	r1, [r7, #0]
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	4798      	blx	r3
 8010030:	4603      	mov	r3, r0
 8010032:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010034:	e004      	b.n	8010040 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010036:	6839      	ldr	r1, [r7, #0]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fc13 	bl	8010864 <USBD_CtlError>
              break;
 801003e:	e000      	b.n	8010042 <USBD_StdEPReq+0x154>
              break;
 8010040:	bf00      	nop
          }
          break;
 8010042:	e0ab      	b.n	801019c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801004a:	b2db      	uxtb	r3, r3
 801004c:	2b02      	cmp	r3, #2
 801004e:	d002      	beq.n	8010056 <USBD_StdEPReq+0x168>
 8010050:	2b03      	cmp	r3, #3
 8010052:	d032      	beq.n	80100ba <USBD_StdEPReq+0x1cc>
 8010054:	e097      	b.n	8010186 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010056:	7bbb      	ldrb	r3, [r7, #14]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d007      	beq.n	801006c <USBD_StdEPReq+0x17e>
 801005c:	7bbb      	ldrb	r3, [r7, #14]
 801005e:	2b80      	cmp	r3, #128	; 0x80
 8010060:	d004      	beq.n	801006c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010062:	6839      	ldr	r1, [r7, #0]
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 fbfd 	bl	8010864 <USBD_CtlError>
                break;
 801006a:	e091      	b.n	8010190 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801006c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010070:	2b00      	cmp	r3, #0
 8010072:	da0b      	bge.n	801008c <USBD_StdEPReq+0x19e>
 8010074:	7bbb      	ldrb	r3, [r7, #14]
 8010076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801007a:	4613      	mov	r3, r2
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	4413      	add	r3, r2
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	3310      	adds	r3, #16
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	4413      	add	r3, r2
 8010088:	3304      	adds	r3, #4
 801008a:	e00b      	b.n	80100a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801008c:	7bbb      	ldrb	r3, [r7, #14]
 801008e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010092:	4613      	mov	r3, r2
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	4413      	add	r3, r2
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	4413      	add	r3, r2
 80100a2:	3304      	adds	r3, #4
 80100a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	2200      	movs	r2, #0
 80100aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	2202      	movs	r2, #2
 80100b0:	4619      	mov	r1, r3
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 fc47 	bl	8010946 <USBD_CtlSendData>
              break;
 80100b8:	e06a      	b.n	8010190 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80100ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	da11      	bge.n	80100e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80100c2:	7bbb      	ldrb	r3, [r7, #14]
 80100c4:	f003 020f 	and.w	r2, r3, #15
 80100c8:	6879      	ldr	r1, [r7, #4]
 80100ca:	4613      	mov	r3, r2
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	4413      	add	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	440b      	add	r3, r1
 80100d4:	3324      	adds	r3, #36	; 0x24
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d117      	bne.n	801010c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80100dc:	6839      	ldr	r1, [r7, #0]
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f000 fbc0 	bl	8010864 <USBD_CtlError>
                  break;
 80100e4:	e054      	b.n	8010190 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80100e6:	7bbb      	ldrb	r3, [r7, #14]
 80100e8:	f003 020f 	and.w	r2, r3, #15
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	4613      	mov	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	4413      	add	r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	440b      	add	r3, r1
 80100f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d104      	bne.n	801010c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010102:	6839      	ldr	r1, [r7, #0]
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 fbad 	bl	8010864 <USBD_CtlError>
                  break;
 801010a:	e041      	b.n	8010190 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801010c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010110:	2b00      	cmp	r3, #0
 8010112:	da0b      	bge.n	801012c <USBD_StdEPReq+0x23e>
 8010114:	7bbb      	ldrb	r3, [r7, #14]
 8010116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801011a:	4613      	mov	r3, r2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	4413      	add	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	3310      	adds	r3, #16
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	4413      	add	r3, r2
 8010128:	3304      	adds	r3, #4
 801012a:	e00b      	b.n	8010144 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801012c:	7bbb      	ldrb	r3, [r7, #14]
 801012e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010132:	4613      	mov	r3, r2
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	4413      	add	r3, r2
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	4413      	add	r3, r2
 8010142:	3304      	adds	r3, #4
 8010144:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010146:	7bbb      	ldrb	r3, [r7, #14]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d002      	beq.n	8010152 <USBD_StdEPReq+0x264>
 801014c:	7bbb      	ldrb	r3, [r7, #14]
 801014e:	2b80      	cmp	r3, #128	; 0x80
 8010150:	d103      	bne.n	801015a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2200      	movs	r2, #0
 8010156:	601a      	str	r2, [r3, #0]
 8010158:	e00e      	b.n	8010178 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801015a:	7bbb      	ldrb	r3, [r7, #14]
 801015c:	4619      	mov	r1, r3
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f004 fe24 	bl	8014dac <USBD_LL_IsStallEP>
 8010164:	4603      	mov	r3, r0
 8010166:	2b00      	cmp	r3, #0
 8010168:	d003      	beq.n	8010172 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2201      	movs	r2, #1
 801016e:	601a      	str	r2, [r3, #0]
 8010170:	e002      	b.n	8010178 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	2200      	movs	r2, #0
 8010176:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	2202      	movs	r2, #2
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 fbe1 	bl	8010946 <USBD_CtlSendData>
              break;
 8010184:	e004      	b.n	8010190 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010186:	6839      	ldr	r1, [r7, #0]
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f000 fb6b 	bl	8010864 <USBD_CtlError>
              break;
 801018e:	bf00      	nop
          }
          break;
 8010190:	e004      	b.n	801019c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010192:	6839      	ldr	r1, [r7, #0]
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 fb65 	bl	8010864 <USBD_CtlError>
          break;
 801019a:	bf00      	nop
      }
      break;
 801019c:	e004      	b.n	80101a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801019e:	6839      	ldr	r1, [r7, #0]
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 fb5f 	bl	8010864 <USBD_CtlError>
      break;
 80101a6:	bf00      	nop
  }

  return ret;
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
	...

080101b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80101be:	2300      	movs	r3, #0
 80101c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80101c6:	2300      	movs	r3, #0
 80101c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	885b      	ldrh	r3, [r3, #2]
 80101ce:	0a1b      	lsrs	r3, r3, #8
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	3b01      	subs	r3, #1
 80101d4:	2b0e      	cmp	r3, #14
 80101d6:	f200 8152 	bhi.w	801047e <USBD_GetDescriptor+0x2ca>
 80101da:	a201      	add	r2, pc, #4	; (adr r2, 80101e0 <USBD_GetDescriptor+0x2c>)
 80101dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e0:	08010251 	.word	0x08010251
 80101e4:	08010269 	.word	0x08010269
 80101e8:	080102a9 	.word	0x080102a9
 80101ec:	0801047f 	.word	0x0801047f
 80101f0:	0801047f 	.word	0x0801047f
 80101f4:	0801041f 	.word	0x0801041f
 80101f8:	0801044b 	.word	0x0801044b
 80101fc:	0801047f 	.word	0x0801047f
 8010200:	0801047f 	.word	0x0801047f
 8010204:	0801047f 	.word	0x0801047f
 8010208:	0801047f 	.word	0x0801047f
 801020c:	0801047f 	.word	0x0801047f
 8010210:	0801047f 	.word	0x0801047f
 8010214:	0801047f 	.word	0x0801047f
 8010218:	0801021d 	.word	0x0801021d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010222:	69db      	ldr	r3, [r3, #28]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d00b      	beq.n	8010240 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801022e:	69db      	ldr	r3, [r3, #28]
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	7c12      	ldrb	r2, [r2, #16]
 8010234:	f107 0108 	add.w	r1, r7, #8
 8010238:	4610      	mov	r0, r2
 801023a:	4798      	blx	r3
 801023c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801023e:	e126      	b.n	801048e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010240:	6839      	ldr	r1, [r7, #0]
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f000 fb0e 	bl	8010864 <USBD_CtlError>
        err++;
 8010248:	7afb      	ldrb	r3, [r7, #11]
 801024a:	3301      	adds	r3, #1
 801024c:	72fb      	strb	r3, [r7, #11]
      break;
 801024e:	e11e      	b.n	801048e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	7c12      	ldrb	r2, [r2, #16]
 801025c:	f107 0108 	add.w	r1, r7, #8
 8010260:	4610      	mov	r0, r2
 8010262:	4798      	blx	r3
 8010264:	60f8      	str	r0, [r7, #12]
      break;
 8010266:	e112      	b.n	801048e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	7c1b      	ldrb	r3, [r3, #16]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10d      	bne.n	801028c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010278:	f107 0208 	add.w	r2, r7, #8
 801027c:	4610      	mov	r0, r2
 801027e:	4798      	blx	r3
 8010280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	3301      	adds	r3, #1
 8010286:	2202      	movs	r2, #2
 8010288:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801028a:	e100      	b.n	801048e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010294:	f107 0208 	add.w	r2, r7, #8
 8010298:	4610      	mov	r0, r2
 801029a:	4798      	blx	r3
 801029c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	3301      	adds	r3, #1
 80102a2:	2202      	movs	r2, #2
 80102a4:	701a      	strb	r2, [r3, #0]
      break;
 80102a6:	e0f2      	b.n	801048e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	885b      	ldrh	r3, [r3, #2]
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	2b05      	cmp	r3, #5
 80102b0:	f200 80ac 	bhi.w	801040c <USBD_GetDescriptor+0x258>
 80102b4:	a201      	add	r2, pc, #4	; (adr r2, 80102bc <USBD_GetDescriptor+0x108>)
 80102b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ba:	bf00      	nop
 80102bc:	080102d5 	.word	0x080102d5
 80102c0:	08010309 	.word	0x08010309
 80102c4:	0801033d 	.word	0x0801033d
 80102c8:	08010371 	.word	0x08010371
 80102cc:	080103a5 	.word	0x080103a5
 80102d0:	080103d9 	.word	0x080103d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00b      	beq.n	80102f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	687a      	ldr	r2, [r7, #4]
 80102ea:	7c12      	ldrb	r2, [r2, #16]
 80102ec:	f107 0108 	add.w	r1, r7, #8
 80102f0:	4610      	mov	r0, r2
 80102f2:	4798      	blx	r3
 80102f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102f6:	e091      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 fab2 	bl	8010864 <USBD_CtlError>
            err++;
 8010300:	7afb      	ldrb	r3, [r7, #11]
 8010302:	3301      	adds	r3, #1
 8010304:	72fb      	strb	r3, [r7, #11]
          break;
 8010306:	e089      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00b      	beq.n	801032c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	7c12      	ldrb	r2, [r2, #16]
 8010320:	f107 0108 	add.w	r1, r7, #8
 8010324:	4610      	mov	r0, r2
 8010326:	4798      	blx	r3
 8010328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801032a:	e077      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 fa98 	bl	8010864 <USBD_CtlError>
            err++;
 8010334:	7afb      	ldrb	r3, [r7, #11]
 8010336:	3301      	adds	r3, #1
 8010338:	72fb      	strb	r3, [r7, #11]
          break;
 801033a:	e06f      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00b      	beq.n	8010360 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	7c12      	ldrb	r2, [r2, #16]
 8010354:	f107 0108 	add.w	r1, r7, #8
 8010358:	4610      	mov	r0, r2
 801035a:	4798      	blx	r3
 801035c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801035e:	e05d      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010360:	6839      	ldr	r1, [r7, #0]
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f000 fa7e 	bl	8010864 <USBD_CtlError>
            err++;
 8010368:	7afb      	ldrb	r3, [r7, #11]
 801036a:	3301      	adds	r3, #1
 801036c:	72fb      	strb	r3, [r7, #11]
          break;
 801036e:	e055      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00b      	beq.n	8010394 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010382:	691b      	ldr	r3, [r3, #16]
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	7c12      	ldrb	r2, [r2, #16]
 8010388:	f107 0108 	add.w	r1, r7, #8
 801038c:	4610      	mov	r0, r2
 801038e:	4798      	blx	r3
 8010390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010392:	e043      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010394:	6839      	ldr	r1, [r7, #0]
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 fa64 	bl	8010864 <USBD_CtlError>
            err++;
 801039c:	7afb      	ldrb	r3, [r7, #11]
 801039e:	3301      	adds	r3, #1
 80103a0:	72fb      	strb	r3, [r7, #11]
          break;
 80103a2:	e03b      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103aa:	695b      	ldr	r3, [r3, #20]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00b      	beq.n	80103c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103b6:	695b      	ldr	r3, [r3, #20]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	7c12      	ldrb	r2, [r2, #16]
 80103bc:	f107 0108 	add.w	r1, r7, #8
 80103c0:	4610      	mov	r0, r2
 80103c2:	4798      	blx	r3
 80103c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103c6:	e029      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80103c8:	6839      	ldr	r1, [r7, #0]
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f000 fa4a 	bl	8010864 <USBD_CtlError>
            err++;
 80103d0:	7afb      	ldrb	r3, [r7, #11]
 80103d2:	3301      	adds	r3, #1
 80103d4:	72fb      	strb	r3, [r7, #11]
          break;
 80103d6:	e021      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103de:	699b      	ldr	r3, [r3, #24]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00b      	beq.n	80103fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103ea:	699b      	ldr	r3, [r3, #24]
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	7c12      	ldrb	r2, [r2, #16]
 80103f0:	f107 0108 	add.w	r1, r7, #8
 80103f4:	4610      	mov	r0, r2
 80103f6:	4798      	blx	r3
 80103f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103fa:	e00f      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80103fc:	6839      	ldr	r1, [r7, #0]
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 fa30 	bl	8010864 <USBD_CtlError>
            err++;
 8010404:	7afb      	ldrb	r3, [r7, #11]
 8010406:	3301      	adds	r3, #1
 8010408:	72fb      	strb	r3, [r7, #11]
          break;
 801040a:	e007      	b.n	801041c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801040c:	6839      	ldr	r1, [r7, #0]
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 fa28 	bl	8010864 <USBD_CtlError>
          err++;
 8010414:	7afb      	ldrb	r3, [r7, #11]
 8010416:	3301      	adds	r3, #1
 8010418:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801041a:	bf00      	nop
      }
      break;
 801041c:	e037      	b.n	801048e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	7c1b      	ldrb	r3, [r3, #16]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d109      	bne.n	801043a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801042c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801042e:	f107 0208 	add.w	r2, r7, #8
 8010432:	4610      	mov	r0, r2
 8010434:	4798      	blx	r3
 8010436:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010438:	e029      	b.n	801048e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801043a:	6839      	ldr	r1, [r7, #0]
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f000 fa11 	bl	8010864 <USBD_CtlError>
        err++;
 8010442:	7afb      	ldrb	r3, [r7, #11]
 8010444:	3301      	adds	r3, #1
 8010446:	72fb      	strb	r3, [r7, #11]
      break;
 8010448:	e021      	b.n	801048e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	7c1b      	ldrb	r3, [r3, #16]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d10d      	bne.n	801046e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801045a:	f107 0208 	add.w	r2, r7, #8
 801045e:	4610      	mov	r0, r2
 8010460:	4798      	blx	r3
 8010462:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	3301      	adds	r3, #1
 8010468:	2207      	movs	r2, #7
 801046a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801046c:	e00f      	b.n	801048e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 f9f7 	bl	8010864 <USBD_CtlError>
        err++;
 8010476:	7afb      	ldrb	r3, [r7, #11]
 8010478:	3301      	adds	r3, #1
 801047a:	72fb      	strb	r3, [r7, #11]
      break;
 801047c:	e007      	b.n	801048e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801047e:	6839      	ldr	r1, [r7, #0]
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 f9ef 	bl	8010864 <USBD_CtlError>
      err++;
 8010486:	7afb      	ldrb	r3, [r7, #11]
 8010488:	3301      	adds	r3, #1
 801048a:	72fb      	strb	r3, [r7, #11]
      break;
 801048c:	bf00      	nop
  }

  if (err != 0U)
 801048e:	7afb      	ldrb	r3, [r7, #11]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d11e      	bne.n	80104d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	88db      	ldrh	r3, [r3, #6]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d016      	beq.n	80104ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801049c:	893b      	ldrh	r3, [r7, #8]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00e      	beq.n	80104c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	88da      	ldrh	r2, [r3, #6]
 80104a6:	893b      	ldrh	r3, [r7, #8]
 80104a8:	4293      	cmp	r3, r2
 80104aa:	bf28      	it	cs
 80104ac:	4613      	movcs	r3, r2
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80104b2:	893b      	ldrh	r3, [r7, #8]
 80104b4:	461a      	mov	r2, r3
 80104b6:	68f9      	ldr	r1, [r7, #12]
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 fa44 	bl	8010946 <USBD_CtlSendData>
 80104be:	e009      	b.n	80104d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80104c0:	6839      	ldr	r1, [r7, #0]
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 f9ce 	bl	8010864 <USBD_CtlError>
 80104c8:	e004      	b.n	80104d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 fa95 	bl	80109fa <USBD_CtlSendStatus>
 80104d0:	e000      	b.n	80104d4 <USBD_GetDescriptor+0x320>
    return;
 80104d2:	bf00      	nop
  }
}
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop

080104dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	889b      	ldrh	r3, [r3, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d131      	bne.n	8010552 <USBD_SetAddress+0x76>
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	88db      	ldrh	r3, [r3, #6]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d12d      	bne.n	8010552 <USBD_SetAddress+0x76>
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	885b      	ldrh	r3, [r3, #2]
 80104fa:	2b7f      	cmp	r3, #127	; 0x7f
 80104fc:	d829      	bhi.n	8010552 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	885b      	ldrh	r3, [r3, #2]
 8010502:	b2db      	uxtb	r3, r3
 8010504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010508:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010510:	b2db      	uxtb	r3, r3
 8010512:	2b03      	cmp	r3, #3
 8010514:	d104      	bne.n	8010520 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010516:	6839      	ldr	r1, [r7, #0]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 f9a3 	bl	8010864 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801051e:	e01d      	b.n	801055c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	7bfa      	ldrb	r2, [r7, #15]
 8010524:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010528:	7bfb      	ldrb	r3, [r7, #15]
 801052a:	4619      	mov	r1, r3
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f004 fc69 	bl	8014e04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 fa61 	bl	80109fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010538:	7bfb      	ldrb	r3, [r7, #15]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d004      	beq.n	8010548 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2202      	movs	r2, #2
 8010542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010546:	e009      	b.n	801055c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2201      	movs	r2, #1
 801054c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010550:	e004      	b.n	801055c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010552:	6839      	ldr	r1, [r7, #0]
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 f985 	bl	8010864 <USBD_CtlError>
  }
}
 801055a:	bf00      	nop
 801055c:	bf00      	nop
 801055e:	3710      	adds	r7, #16
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801056e:	2300      	movs	r3, #0
 8010570:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	885b      	ldrh	r3, [r3, #2]
 8010576:	b2da      	uxtb	r2, r3
 8010578:	4b4c      	ldr	r3, [pc, #304]	; (80106ac <USBD_SetConfig+0x148>)
 801057a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801057c:	4b4b      	ldr	r3, [pc, #300]	; (80106ac <USBD_SetConfig+0x148>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	2b01      	cmp	r3, #1
 8010582:	d905      	bls.n	8010590 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010584:	6839      	ldr	r1, [r7, #0]
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 f96c 	bl	8010864 <USBD_CtlError>
    return USBD_FAIL;
 801058c:	2303      	movs	r3, #3
 801058e:	e088      	b.n	80106a2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010596:	b2db      	uxtb	r3, r3
 8010598:	2b02      	cmp	r3, #2
 801059a:	d002      	beq.n	80105a2 <USBD_SetConfig+0x3e>
 801059c:	2b03      	cmp	r3, #3
 801059e:	d025      	beq.n	80105ec <USBD_SetConfig+0x88>
 80105a0:	e071      	b.n	8010686 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80105a2:	4b42      	ldr	r3, [pc, #264]	; (80106ac <USBD_SetConfig+0x148>)
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d01c      	beq.n	80105e4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80105aa:	4b40      	ldr	r3, [pc, #256]	; (80106ac <USBD_SetConfig+0x148>)
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	461a      	mov	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80105b4:	4b3d      	ldr	r3, [pc, #244]	; (80106ac <USBD_SetConfig+0x148>)
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	4619      	mov	r1, r3
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7ff f91e 	bl	800f7fc <USBD_SetClassConfig>
 80105c0:	4603      	mov	r3, r0
 80105c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80105c4:	7bfb      	ldrb	r3, [r7, #15]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d004      	beq.n	80105d4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80105ca:	6839      	ldr	r1, [r7, #0]
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f000 f949 	bl	8010864 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80105d2:	e065      	b.n	80106a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 fa10 	bl	80109fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2203      	movs	r2, #3
 80105de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80105e2:	e05d      	b.n	80106a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f000 fa08 	bl	80109fa <USBD_CtlSendStatus>
      break;
 80105ea:	e059      	b.n	80106a0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80105ec:	4b2f      	ldr	r3, [pc, #188]	; (80106ac <USBD_SetConfig+0x148>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d112      	bne.n	801061a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2202      	movs	r2, #2
 80105f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80105fc:	4b2b      	ldr	r3, [pc, #172]	; (80106ac <USBD_SetConfig+0x148>)
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	461a      	mov	r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010606:	4b29      	ldr	r3, [pc, #164]	; (80106ac <USBD_SetConfig+0x148>)
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	4619      	mov	r1, r3
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff f911 	bl	800f834 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 f9f1 	bl	80109fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010618:	e042      	b.n	80106a0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801061a:	4b24      	ldr	r3, [pc, #144]	; (80106ac <USBD_SetConfig+0x148>)
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	461a      	mov	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	429a      	cmp	r2, r3
 8010626:	d02a      	beq.n	801067e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	b2db      	uxtb	r3, r3
 801062e:	4619      	mov	r1, r3
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7ff f8ff 	bl	800f834 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010636:	4b1d      	ldr	r3, [pc, #116]	; (80106ac <USBD_SetConfig+0x148>)
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010640:	4b1a      	ldr	r3, [pc, #104]	; (80106ac <USBD_SetConfig+0x148>)
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	4619      	mov	r1, r3
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7ff f8d8 	bl	800f7fc <USBD_SetClassConfig>
 801064c:	4603      	mov	r3, r0
 801064e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010650:	7bfb      	ldrb	r3, [r7, #15]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d00f      	beq.n	8010676 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010656:	6839      	ldr	r1, [r7, #0]
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 f903 	bl	8010864 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	685b      	ldr	r3, [r3, #4]
 8010662:	b2db      	uxtb	r3, r3
 8010664:	4619      	mov	r1, r3
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7ff f8e4 	bl	800f834 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2202      	movs	r2, #2
 8010670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010674:	e014      	b.n	80106a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f9bf 	bl	80109fa <USBD_CtlSendStatus>
      break;
 801067c:	e010      	b.n	80106a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f000 f9bb 	bl	80109fa <USBD_CtlSendStatus>
      break;
 8010684:	e00c      	b.n	80106a0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010686:	6839      	ldr	r1, [r7, #0]
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f000 f8eb 	bl	8010864 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801068e:	4b07      	ldr	r3, [pc, #28]	; (80106ac <USBD_SetConfig+0x148>)
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	4619      	mov	r1, r3
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f7ff f8cd 	bl	800f834 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801069a:	2303      	movs	r3, #3
 801069c:	73fb      	strb	r3, [r7, #15]
      break;
 801069e:	bf00      	nop
  }

  return ret;
 80106a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	20001700 	.word	0x20001700

080106b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	88db      	ldrh	r3, [r3, #6]
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d004      	beq.n	80106cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80106c2:	6839      	ldr	r1, [r7, #0]
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f000 f8cd 	bl	8010864 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80106ca:	e023      	b.n	8010714 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	dc02      	bgt.n	80106de <USBD_GetConfig+0x2e>
 80106d8:	2b00      	cmp	r3, #0
 80106da:	dc03      	bgt.n	80106e4 <USBD_GetConfig+0x34>
 80106dc:	e015      	b.n	801070a <USBD_GetConfig+0x5a>
 80106de:	2b03      	cmp	r3, #3
 80106e0:	d00b      	beq.n	80106fa <USBD_GetConfig+0x4a>
 80106e2:	e012      	b.n	801070a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	3308      	adds	r3, #8
 80106ee:	2201      	movs	r2, #1
 80106f0:	4619      	mov	r1, r3
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 f927 	bl	8010946 <USBD_CtlSendData>
        break;
 80106f8:	e00c      	b.n	8010714 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	3304      	adds	r3, #4
 80106fe:	2201      	movs	r2, #1
 8010700:	4619      	mov	r1, r3
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f91f 	bl	8010946 <USBD_CtlSendData>
        break;
 8010708:	e004      	b.n	8010714 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801070a:	6839      	ldr	r1, [r7, #0]
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 f8a9 	bl	8010864 <USBD_CtlError>
        break;
 8010712:	bf00      	nop
}
 8010714:	bf00      	nop
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801072c:	b2db      	uxtb	r3, r3
 801072e:	3b01      	subs	r3, #1
 8010730:	2b02      	cmp	r3, #2
 8010732:	d81e      	bhi.n	8010772 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	88db      	ldrh	r3, [r3, #6]
 8010738:	2b02      	cmp	r3, #2
 801073a:	d004      	beq.n	8010746 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801073c:	6839      	ldr	r1, [r7, #0]
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 f890 	bl	8010864 <USBD_CtlError>
        break;
 8010744:	e01a      	b.n	801077c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2201      	movs	r2, #1
 801074a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010752:	2b00      	cmp	r3, #0
 8010754:	d005      	beq.n	8010762 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	f043 0202 	orr.w	r2, r3, #2
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	330c      	adds	r3, #12
 8010766:	2202      	movs	r2, #2
 8010768:	4619      	mov	r1, r3
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 f8eb 	bl	8010946 <USBD_CtlSendData>
      break;
 8010770:	e004      	b.n	801077c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010772:	6839      	ldr	r1, [r7, #0]
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 f875 	bl	8010864 <USBD_CtlError>
      break;
 801077a:	bf00      	nop
  }
}
 801077c:	bf00      	nop
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	885b      	ldrh	r3, [r3, #2]
 8010792:	2b01      	cmp	r3, #1
 8010794:	d106      	bne.n	80107a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2201      	movs	r2, #1
 801079a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f000 f92b 	bl	80109fa <USBD_CtlSendStatus>
  }
}
 80107a4:	bf00      	nop
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	3b01      	subs	r3, #1
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	d80b      	bhi.n	80107dc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	885b      	ldrh	r3, [r3, #2]
 80107c8:	2b01      	cmp	r3, #1
 80107ca:	d10c      	bne.n	80107e6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2200      	movs	r2, #0
 80107d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f910 	bl	80109fa <USBD_CtlSendStatus>
      }
      break;
 80107da:	e004      	b.n	80107e6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80107dc:	6839      	ldr	r1, [r7, #0]
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f840 	bl	8010864 <USBD_CtlError>
      break;
 80107e4:	e000      	b.n	80107e8 <USBD_ClrFeature+0x3c>
      break;
 80107e6:	bf00      	nop
  }
}
 80107e8:	bf00      	nop
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	781a      	ldrb	r2, [r3, #0]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	3301      	adds	r3, #1
 801080a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	781a      	ldrb	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	3301      	adds	r3, #1
 8010818:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801081a:	68f8      	ldr	r0, [r7, #12]
 801081c:	f7ff fa91 	bl	800fd42 <SWAPBYTE>
 8010820:	4603      	mov	r3, r0
 8010822:	461a      	mov	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	3301      	adds	r3, #1
 801082c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	3301      	adds	r3, #1
 8010832:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010834:	68f8      	ldr	r0, [r7, #12]
 8010836:	f7ff fa84 	bl	800fd42 <SWAPBYTE>
 801083a:	4603      	mov	r3, r0
 801083c:	461a      	mov	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	3301      	adds	r3, #1
 8010846:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	3301      	adds	r3, #1
 801084c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f7ff fa77 	bl	800fd42 <SWAPBYTE>
 8010854:	4603      	mov	r3, r0
 8010856:	461a      	mov	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	80da      	strh	r2, [r3, #6]
}
 801085c:	bf00      	nop
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801086e:	2180      	movs	r1, #128	; 0x80
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f004 fa2f 	bl	8014cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010876:	2100      	movs	r1, #0
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f004 fa2b 	bl	8014cd4 <USBD_LL_StallEP>
}
 801087e:	bf00      	nop
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b086      	sub	sp, #24
 801088a:	af00      	add	r7, sp, #0
 801088c:	60f8      	str	r0, [r7, #12]
 801088e:	60b9      	str	r1, [r7, #8]
 8010890:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010892:	2300      	movs	r3, #0
 8010894:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d036      	beq.n	801090a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80108a0:	6938      	ldr	r0, [r7, #16]
 80108a2:	f000 f836 	bl	8010912 <USBD_GetLen>
 80108a6:	4603      	mov	r3, r0
 80108a8:	3301      	adds	r3, #1
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	005b      	lsls	r3, r3, #1
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80108b4:	7dfb      	ldrb	r3, [r7, #23]
 80108b6:	68ba      	ldr	r2, [r7, #8]
 80108b8:	4413      	add	r3, r2
 80108ba:	687a      	ldr	r2, [r7, #4]
 80108bc:	7812      	ldrb	r2, [r2, #0]
 80108be:	701a      	strb	r2, [r3, #0]
  idx++;
 80108c0:	7dfb      	ldrb	r3, [r7, #23]
 80108c2:	3301      	adds	r3, #1
 80108c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80108c6:	7dfb      	ldrb	r3, [r7, #23]
 80108c8:	68ba      	ldr	r2, [r7, #8]
 80108ca:	4413      	add	r3, r2
 80108cc:	2203      	movs	r2, #3
 80108ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80108d0:	7dfb      	ldrb	r3, [r7, #23]
 80108d2:	3301      	adds	r3, #1
 80108d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80108d6:	e013      	b.n	8010900 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
 80108da:	68ba      	ldr	r2, [r7, #8]
 80108dc:	4413      	add	r3, r2
 80108de:	693a      	ldr	r2, [r7, #16]
 80108e0:	7812      	ldrb	r2, [r2, #0]
 80108e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	3301      	adds	r3, #1
 80108e8:	613b      	str	r3, [r7, #16]
    idx++;
 80108ea:	7dfb      	ldrb	r3, [r7, #23]
 80108ec:	3301      	adds	r3, #1
 80108ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80108f0:	7dfb      	ldrb	r3, [r7, #23]
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	4413      	add	r3, r2
 80108f6:	2200      	movs	r2, #0
 80108f8:	701a      	strb	r2, [r3, #0]
    idx++;
 80108fa:	7dfb      	ldrb	r3, [r7, #23]
 80108fc:	3301      	adds	r3, #1
 80108fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d1e7      	bne.n	80108d8 <USBD_GetString+0x52>
 8010908:	e000      	b.n	801090c <USBD_GetString+0x86>
    return;
 801090a:	bf00      	nop
  }
}
 801090c:	3718      	adds	r7, #24
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010912:	b480      	push	{r7}
 8010914:	b085      	sub	sp, #20
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801091a:	2300      	movs	r3, #0
 801091c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010922:	e005      	b.n	8010930 <USBD_GetLen+0x1e>
  {
    len++;
 8010924:	7bfb      	ldrb	r3, [r7, #15]
 8010926:	3301      	adds	r3, #1
 8010928:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	3301      	adds	r3, #1
 801092e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1f5      	bne.n	8010924 <USBD_GetLen+0x12>
  }

  return len;
 8010938:	7bfb      	ldrb	r3, [r7, #15]
}
 801093a:	4618      	mov	r0, r3
 801093c:	3714      	adds	r7, #20
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b084      	sub	sp, #16
 801094a:	af00      	add	r7, sp, #0
 801094c:	60f8      	str	r0, [r7, #12]
 801094e:	60b9      	str	r1, [r7, #8]
 8010950:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2202      	movs	r2, #2
 8010956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	68ba      	ldr	r2, [r7, #8]
 801096a:	2100      	movs	r1, #0
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	f004 fa7f 	bl	8014e70 <USBD_LL_Transmit>

  return USBD_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3710      	adds	r7, #16
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	68ba      	ldr	r2, [r7, #8]
 801098c:	2100      	movs	r1, #0
 801098e:	68f8      	ldr	r0, [r7, #12]
 8010990:	f004 fa6e 	bl	8014e70 <USBD_LL_Transmit>

  return USBD_OK;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b084      	sub	sp, #16
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	60f8      	str	r0, [r7, #12]
 80109a6:	60b9      	str	r1, [r7, #8]
 80109a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2203      	movs	r2, #3
 80109ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	68ba      	ldr	r2, [r7, #8]
 80109c6:	2100      	movs	r1, #0
 80109c8:	68f8      	ldr	r0, [r7, #12]
 80109ca:	f004 fa89 	bl	8014ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80109ce:	2300      	movs	r3, #0
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	68ba      	ldr	r2, [r7, #8]
 80109e8:	2100      	movs	r1, #0
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f004 fa78 	bl	8014ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b082      	sub	sp, #8
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2204      	movs	r2, #4
 8010a06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	2100      	movs	r1, #0
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f004 fa2d 	bl	8014e70 <USBD_LL_Transmit>

  return USBD_OK;
 8010a16:	2300      	movs	r3, #0
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2205      	movs	r2, #5
 8010a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010a30:	2300      	movs	r3, #0
 8010a32:	2200      	movs	r2, #0
 8010a34:	2100      	movs	r1, #0
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f004 fa52 	bl	8014ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3708      	adds	r7, #8
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
	...

08010a48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	4603      	mov	r3, r0
 8010a50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010a52:	79fb      	ldrb	r3, [r7, #7]
 8010a54:	4a08      	ldr	r2, [pc, #32]	; (8010a78 <disk_status+0x30>)
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	4413      	add	r3, r2
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	79fa      	ldrb	r2, [r7, #7]
 8010a60:	4905      	ldr	r1, [pc, #20]	; (8010a78 <disk_status+0x30>)
 8010a62:	440a      	add	r2, r1
 8010a64:	7a12      	ldrb	r2, [r2, #8]
 8010a66:	4610      	mov	r0, r2
 8010a68:	4798      	blx	r3
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3710      	adds	r7, #16
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	2000172c 	.word	0x2000172c

08010a7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b084      	sub	sp, #16
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	4603      	mov	r3, r0
 8010a84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010a8a:	79fb      	ldrb	r3, [r7, #7]
 8010a8c:	4a0d      	ldr	r2, [pc, #52]	; (8010ac4 <disk_initialize+0x48>)
 8010a8e:	5cd3      	ldrb	r3, [r2, r3]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d111      	bne.n	8010ab8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010a94:	79fb      	ldrb	r3, [r7, #7]
 8010a96:	4a0b      	ldr	r2, [pc, #44]	; (8010ac4 <disk_initialize+0x48>)
 8010a98:	2101      	movs	r1, #1
 8010a9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010a9c:	79fb      	ldrb	r3, [r7, #7]
 8010a9e:	4a09      	ldr	r2, [pc, #36]	; (8010ac4 <disk_initialize+0x48>)
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	4413      	add	r3, r2
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	79fa      	ldrb	r2, [r7, #7]
 8010aaa:	4906      	ldr	r1, [pc, #24]	; (8010ac4 <disk_initialize+0x48>)
 8010aac:	440a      	add	r2, r1
 8010aae:	7a12      	ldrb	r2, [r2, #8]
 8010ab0:	4610      	mov	r0, r2
 8010ab2:	4798      	blx	r3
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	2000172c 	.word	0x2000172c

08010ac8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010ac8:	b590      	push	{r4, r7, lr}
 8010aca:	b087      	sub	sp, #28
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60b9      	str	r1, [r7, #8]
 8010ad0:	607a      	str	r2, [r7, #4]
 8010ad2:	603b      	str	r3, [r7, #0]
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010ad8:	7bfb      	ldrb	r3, [r7, #15]
 8010ada:	4a0a      	ldr	r2, [pc, #40]	; (8010b04 <disk_read+0x3c>)
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	4413      	add	r3, r2
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	689c      	ldr	r4, [r3, #8]
 8010ae4:	7bfb      	ldrb	r3, [r7, #15]
 8010ae6:	4a07      	ldr	r2, [pc, #28]	; (8010b04 <disk_read+0x3c>)
 8010ae8:	4413      	add	r3, r2
 8010aea:	7a18      	ldrb	r0, [r3, #8]
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	68b9      	ldr	r1, [r7, #8]
 8010af2:	47a0      	blx	r4
 8010af4:	4603      	mov	r3, r0
 8010af6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	371c      	adds	r7, #28
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd90      	pop	{r4, r7, pc}
 8010b02:	bf00      	nop
 8010b04:	2000172c 	.word	0x2000172c

08010b08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010b08:	b590      	push	{r4, r7, lr}
 8010b0a:	b087      	sub	sp, #28
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60b9      	str	r1, [r7, #8]
 8010b10:	607a      	str	r2, [r7, #4]
 8010b12:	603b      	str	r3, [r7, #0]
 8010b14:	4603      	mov	r3, r0
 8010b16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010b18:	7bfb      	ldrb	r3, [r7, #15]
 8010b1a:	4a0a      	ldr	r2, [pc, #40]	; (8010b44 <disk_write+0x3c>)
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	4413      	add	r3, r2
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	68dc      	ldr	r4, [r3, #12]
 8010b24:	7bfb      	ldrb	r3, [r7, #15]
 8010b26:	4a07      	ldr	r2, [pc, #28]	; (8010b44 <disk_write+0x3c>)
 8010b28:	4413      	add	r3, r2
 8010b2a:	7a18      	ldrb	r0, [r3, #8]
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	68b9      	ldr	r1, [r7, #8]
 8010b32:	47a0      	blx	r4
 8010b34:	4603      	mov	r3, r0
 8010b36:	75fb      	strb	r3, [r7, #23]
  return res;
 8010b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	371c      	adds	r7, #28
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd90      	pop	{r4, r7, pc}
 8010b42:	bf00      	nop
 8010b44:	2000172c 	.word	0x2000172c

08010b48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	4603      	mov	r3, r0
 8010b50:	603a      	str	r2, [r7, #0]
 8010b52:	71fb      	strb	r3, [r7, #7]
 8010b54:	460b      	mov	r3, r1
 8010b56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010b58:	79fb      	ldrb	r3, [r7, #7]
 8010b5a:	4a09      	ldr	r2, [pc, #36]	; (8010b80 <disk_ioctl+0x38>)
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	4413      	add	r3, r2
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	691b      	ldr	r3, [r3, #16]
 8010b64:	79fa      	ldrb	r2, [r7, #7]
 8010b66:	4906      	ldr	r1, [pc, #24]	; (8010b80 <disk_ioctl+0x38>)
 8010b68:	440a      	add	r2, r1
 8010b6a:	7a10      	ldrb	r0, [r2, #8]
 8010b6c:	79b9      	ldrb	r1, [r7, #6]
 8010b6e:	683a      	ldr	r2, [r7, #0]
 8010b70:	4798      	blx	r3
 8010b72:	4603      	mov	r3, r0
 8010b74:	73fb      	strb	r3, [r7, #15]
  return res;
 8010b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3710      	adds	r7, #16
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	2000172c 	.word	0x2000172c

08010b84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3301      	adds	r3, #1
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010b94:	89fb      	ldrh	r3, [r7, #14]
 8010b96:	021b      	lsls	r3, r3, #8
 8010b98:	b21a      	sxth	r2, r3
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	b21b      	sxth	r3, r3
 8010ba0:	4313      	orrs	r3, r2
 8010ba2:	b21b      	sxth	r3, r3
 8010ba4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3714      	adds	r7, #20
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	3303      	adds	r3, #3
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	021b      	lsls	r3, r3, #8
 8010bc8:	687a      	ldr	r2, [r7, #4]
 8010bca:	3202      	adds	r2, #2
 8010bcc:	7812      	ldrb	r2, [r2, #0]
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	021b      	lsls	r3, r3, #8
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	3201      	adds	r2, #1
 8010bda:	7812      	ldrb	r2, [r2, #0]
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	021b      	lsls	r3, r3, #8
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	7812      	ldrb	r2, [r2, #0]
 8010be8:	4313      	orrs	r3, r2
 8010bea:	60fb      	str	r3, [r7, #12]
	return rv;
 8010bec:	68fb      	ldr	r3, [r7, #12]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3714      	adds	r7, #20
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr

08010bfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010bfa:	b480      	push	{r7}
 8010bfc:	b083      	sub	sp, #12
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
 8010c02:	460b      	mov	r3, r1
 8010c04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	1c5a      	adds	r2, r3, #1
 8010c0a:	607a      	str	r2, [r7, #4]
 8010c0c:	887a      	ldrh	r2, [r7, #2]
 8010c0e:	b2d2      	uxtb	r2, r2
 8010c10:	701a      	strb	r2, [r3, #0]
 8010c12:	887b      	ldrh	r3, [r7, #2]
 8010c14:	0a1b      	lsrs	r3, r3, #8
 8010c16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	1c5a      	adds	r2, r3, #1
 8010c1c:	607a      	str	r2, [r7, #4]
 8010c1e:	887a      	ldrh	r2, [r7, #2]
 8010c20:	b2d2      	uxtb	r2, r2
 8010c22:	701a      	strb	r2, [r3, #0]
}
 8010c24:	bf00      	nop
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	1c5a      	adds	r2, r3, #1
 8010c3e:	607a      	str	r2, [r7, #4]
 8010c40:	683a      	ldr	r2, [r7, #0]
 8010c42:	b2d2      	uxtb	r2, r2
 8010c44:	701a      	strb	r2, [r3, #0]
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	0a1b      	lsrs	r3, r3, #8
 8010c4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	1c5a      	adds	r2, r3, #1
 8010c50:	607a      	str	r2, [r7, #4]
 8010c52:	683a      	ldr	r2, [r7, #0]
 8010c54:	b2d2      	uxtb	r2, r2
 8010c56:	701a      	strb	r2, [r3, #0]
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	0a1b      	lsrs	r3, r3, #8
 8010c5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	1c5a      	adds	r2, r3, #1
 8010c62:	607a      	str	r2, [r7, #4]
 8010c64:	683a      	ldr	r2, [r7, #0]
 8010c66:	b2d2      	uxtb	r2, r2
 8010c68:	701a      	strb	r2, [r3, #0]
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	0a1b      	lsrs	r3, r3, #8
 8010c6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	1c5a      	adds	r2, r3, #1
 8010c74:	607a      	str	r2, [r7, #4]
 8010c76:	683a      	ldr	r2, [r7, #0]
 8010c78:	b2d2      	uxtb	r2, r2
 8010c7a:	701a      	strb	r2, [r3, #0]
}
 8010c7c:	bf00      	nop
 8010c7e:	370c      	adds	r7, #12
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010c88:	b480      	push	{r7}
 8010c8a:	b087      	sub	sp, #28
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d00d      	beq.n	8010cbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010ca2:	693a      	ldr	r2, [r7, #16]
 8010ca4:	1c53      	adds	r3, r2, #1
 8010ca6:	613b      	str	r3, [r7, #16]
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	1c59      	adds	r1, r3, #1
 8010cac:	6179      	str	r1, [r7, #20]
 8010cae:	7812      	ldrb	r2, [r2, #0]
 8010cb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	3b01      	subs	r3, #1
 8010cb6:	607b      	str	r3, [r7, #4]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1f1      	bne.n	8010ca2 <mem_cpy+0x1a>
	}
}
 8010cbe:	bf00      	nop
 8010cc0:	371c      	adds	r7, #28
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010cca:	b480      	push	{r7}
 8010ccc:	b087      	sub	sp, #28
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	60f8      	str	r0, [r7, #12]
 8010cd2:	60b9      	str	r1, [r7, #8]
 8010cd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	1c5a      	adds	r2, r3, #1
 8010cde:	617a      	str	r2, [r7, #20]
 8010ce0:	68ba      	ldr	r2, [r7, #8]
 8010ce2:	b2d2      	uxtb	r2, r2
 8010ce4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	3b01      	subs	r3, #1
 8010cea:	607b      	str	r3, [r7, #4]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d1f3      	bne.n	8010cda <mem_set+0x10>
}
 8010cf2:	bf00      	nop
 8010cf4:	bf00      	nop
 8010cf6:	371c      	adds	r7, #28
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010d00:	b480      	push	{r7}
 8010d02:	b089      	sub	sp, #36	; 0x24
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	61fb      	str	r3, [r7, #28]
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010d14:	2300      	movs	r3, #0
 8010d16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	1c5a      	adds	r2, r3, #1
 8010d1c:	61fa      	str	r2, [r7, #28]
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	4619      	mov	r1, r3
 8010d22:	69bb      	ldr	r3, [r7, #24]
 8010d24:	1c5a      	adds	r2, r3, #1
 8010d26:	61ba      	str	r2, [r7, #24]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	1acb      	subs	r3, r1, r3
 8010d2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	3b01      	subs	r3, #1
 8010d32:	607b      	str	r3, [r7, #4]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d002      	beq.n	8010d40 <mem_cmp+0x40>
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d0eb      	beq.n	8010d18 <mem_cmp+0x18>

	return r;
 8010d40:	697b      	ldr	r3, [r7, #20]
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3724      	adds	r7, #36	; 0x24
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr

08010d4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010d4e:	b480      	push	{r7}
 8010d50:	b083      	sub	sp, #12
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
 8010d56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010d58:	e002      	b.n	8010d60 <chk_chr+0x12>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	607b      	str	r3, [r7, #4]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d005      	beq.n	8010d74 <chk_chr+0x26>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d1f2      	bne.n	8010d5a <chk_chr+0xc>
	return *str;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	781b      	ldrb	r3, [r3, #0]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	370c      	adds	r7, #12
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b085      	sub	sp, #20
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010d8e:	2300      	movs	r3, #0
 8010d90:	60bb      	str	r3, [r7, #8]
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	60fb      	str	r3, [r7, #12]
 8010d96:	e029      	b.n	8010dec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010d98:	4a27      	ldr	r2, [pc, #156]	; (8010e38 <chk_lock+0xb4>)
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	011b      	lsls	r3, r3, #4
 8010d9e:	4413      	add	r3, r2
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d01d      	beq.n	8010de2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010da6:	4a24      	ldr	r2, [pc, #144]	; (8010e38 <chk_lock+0xb4>)
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	011b      	lsls	r3, r3, #4
 8010dac:	4413      	add	r3, r2
 8010dae:	681a      	ldr	r2, [r3, #0]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d116      	bne.n	8010de6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010db8:	4a1f      	ldr	r2, [pc, #124]	; (8010e38 <chk_lock+0xb4>)
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	011b      	lsls	r3, r3, #4
 8010dbe:	4413      	add	r3, r2
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d10c      	bne.n	8010de6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010dcc:	4a1a      	ldr	r2, [pc, #104]	; (8010e38 <chk_lock+0xb4>)
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	011b      	lsls	r3, r3, #4
 8010dd2:	4413      	add	r3, r2
 8010dd4:	3308      	adds	r3, #8
 8010dd6:	681a      	ldr	r2, [r3, #0]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d102      	bne.n	8010de6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010de0:	e007      	b.n	8010df2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010de2:	2301      	movs	r3, #1
 8010de4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	3301      	adds	r3, #1
 8010dea:	60fb      	str	r3, [r7, #12]
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d9d2      	bls.n	8010d98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	2b02      	cmp	r3, #2
 8010df6:	d109      	bne.n	8010e0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d102      	bne.n	8010e04 <chk_lock+0x80>
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	2b02      	cmp	r3, #2
 8010e02:	d101      	bne.n	8010e08 <chk_lock+0x84>
 8010e04:	2300      	movs	r3, #0
 8010e06:	e010      	b.n	8010e2a <chk_lock+0xa6>
 8010e08:	2312      	movs	r3, #18
 8010e0a:	e00e      	b.n	8010e2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d108      	bne.n	8010e24 <chk_lock+0xa0>
 8010e12:	4a09      	ldr	r2, [pc, #36]	; (8010e38 <chk_lock+0xb4>)
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	011b      	lsls	r3, r3, #4
 8010e18:	4413      	add	r3, r2
 8010e1a:	330c      	adds	r3, #12
 8010e1c:	881b      	ldrh	r3, [r3, #0]
 8010e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e22:	d101      	bne.n	8010e28 <chk_lock+0xa4>
 8010e24:	2310      	movs	r3, #16
 8010e26:	e000      	b.n	8010e2a <chk_lock+0xa6>
 8010e28:	2300      	movs	r3, #0
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3714      	adds	r7, #20
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop
 8010e38:	2000170c 	.word	0x2000170c

08010e3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b083      	sub	sp, #12
 8010e40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010e42:	2300      	movs	r3, #0
 8010e44:	607b      	str	r3, [r7, #4]
 8010e46:	e002      	b.n	8010e4e <enq_lock+0x12>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	607b      	str	r3, [r7, #4]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d806      	bhi.n	8010e62 <enq_lock+0x26>
 8010e54:	4a09      	ldr	r2, [pc, #36]	; (8010e7c <enq_lock+0x40>)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	011b      	lsls	r3, r3, #4
 8010e5a:	4413      	add	r3, r2
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d1f2      	bne.n	8010e48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2b02      	cmp	r3, #2
 8010e66:	bf14      	ite	ne
 8010e68:	2301      	movne	r3, #1
 8010e6a:	2300      	moveq	r3, #0
 8010e6c:	b2db      	uxtb	r3, r3
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	370c      	adds	r7, #12
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	2000170c 	.word	0x2000170c

08010e80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010e80:	b480      	push	{r7}
 8010e82:	b085      	sub	sp, #20
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	60fb      	str	r3, [r7, #12]
 8010e8e:	e01f      	b.n	8010ed0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010e90:	4a41      	ldr	r2, [pc, #260]	; (8010f98 <inc_lock+0x118>)
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	011b      	lsls	r3, r3, #4
 8010e96:	4413      	add	r3, r2
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d113      	bne.n	8010eca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010ea2:	4a3d      	ldr	r2, [pc, #244]	; (8010f98 <inc_lock+0x118>)
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	011b      	lsls	r3, r3, #4
 8010ea8:	4413      	add	r3, r2
 8010eaa:	3304      	adds	r3, #4
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d109      	bne.n	8010eca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010eb6:	4a38      	ldr	r2, [pc, #224]	; (8010f98 <inc_lock+0x118>)
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	011b      	lsls	r3, r3, #4
 8010ebc:	4413      	add	r3, r2
 8010ebe:	3308      	adds	r3, #8
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d006      	beq.n	8010ed8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	3301      	adds	r3, #1
 8010ece:	60fb      	str	r3, [r7, #12]
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d9dc      	bls.n	8010e90 <inc_lock+0x10>
 8010ed6:	e000      	b.n	8010eda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010ed8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2b02      	cmp	r3, #2
 8010ede:	d132      	bne.n	8010f46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	60fb      	str	r3, [r7, #12]
 8010ee4:	e002      	b.n	8010eec <inc_lock+0x6c>
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	60fb      	str	r3, [r7, #12]
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d806      	bhi.n	8010f00 <inc_lock+0x80>
 8010ef2:	4a29      	ldr	r2, [pc, #164]	; (8010f98 <inc_lock+0x118>)
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	011b      	lsls	r3, r3, #4
 8010ef8:	4413      	add	r3, r2
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d1f2      	bne.n	8010ee6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	2b02      	cmp	r3, #2
 8010f04:	d101      	bne.n	8010f0a <inc_lock+0x8a>
 8010f06:	2300      	movs	r3, #0
 8010f08:	e040      	b.n	8010f8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	4922      	ldr	r1, [pc, #136]	; (8010f98 <inc_lock+0x118>)
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	011b      	lsls	r3, r3, #4
 8010f14:	440b      	add	r3, r1
 8010f16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	689a      	ldr	r2, [r3, #8]
 8010f1c:	491e      	ldr	r1, [pc, #120]	; (8010f98 <inc_lock+0x118>)
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	011b      	lsls	r3, r3, #4
 8010f22:	440b      	add	r3, r1
 8010f24:	3304      	adds	r3, #4
 8010f26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	695a      	ldr	r2, [r3, #20]
 8010f2c:	491a      	ldr	r1, [pc, #104]	; (8010f98 <inc_lock+0x118>)
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	011b      	lsls	r3, r3, #4
 8010f32:	440b      	add	r3, r1
 8010f34:	3308      	adds	r3, #8
 8010f36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010f38:	4a17      	ldr	r2, [pc, #92]	; (8010f98 <inc_lock+0x118>)
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	011b      	lsls	r3, r3, #4
 8010f3e:	4413      	add	r3, r2
 8010f40:	330c      	adds	r3, #12
 8010f42:	2200      	movs	r2, #0
 8010f44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d009      	beq.n	8010f60 <inc_lock+0xe0>
 8010f4c:	4a12      	ldr	r2, [pc, #72]	; (8010f98 <inc_lock+0x118>)
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	011b      	lsls	r3, r3, #4
 8010f52:	4413      	add	r3, r2
 8010f54:	330c      	adds	r3, #12
 8010f56:	881b      	ldrh	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d001      	beq.n	8010f60 <inc_lock+0xe0>
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	e015      	b.n	8010f8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d108      	bne.n	8010f78 <inc_lock+0xf8>
 8010f66:	4a0c      	ldr	r2, [pc, #48]	; (8010f98 <inc_lock+0x118>)
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	011b      	lsls	r3, r3, #4
 8010f6c:	4413      	add	r3, r2
 8010f6e:	330c      	adds	r3, #12
 8010f70:	881b      	ldrh	r3, [r3, #0]
 8010f72:	3301      	adds	r3, #1
 8010f74:	b29a      	uxth	r2, r3
 8010f76:	e001      	b.n	8010f7c <inc_lock+0xfc>
 8010f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010f7c:	4906      	ldr	r1, [pc, #24]	; (8010f98 <inc_lock+0x118>)
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	011b      	lsls	r3, r3, #4
 8010f82:	440b      	add	r3, r1
 8010f84:	330c      	adds	r3, #12
 8010f86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	3301      	adds	r3, #1
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3714      	adds	r7, #20
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr
 8010f98:	2000170c 	.word	0x2000170c

08010f9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b085      	sub	sp, #20
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	3b01      	subs	r3, #1
 8010fa8:	607b      	str	r3, [r7, #4]
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	d825      	bhi.n	8010ffc <dec_lock+0x60>
		n = Files[i].ctr;
 8010fb0:	4a17      	ldr	r2, [pc, #92]	; (8011010 <dec_lock+0x74>)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	011b      	lsls	r3, r3, #4
 8010fb6:	4413      	add	r3, r2
 8010fb8:	330c      	adds	r3, #12
 8010fba:	881b      	ldrh	r3, [r3, #0]
 8010fbc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010fbe:	89fb      	ldrh	r3, [r7, #14]
 8010fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fc4:	d101      	bne.n	8010fca <dec_lock+0x2e>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010fca:	89fb      	ldrh	r3, [r7, #14]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d002      	beq.n	8010fd6 <dec_lock+0x3a>
 8010fd0:	89fb      	ldrh	r3, [r7, #14]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010fd6:	4a0e      	ldr	r2, [pc, #56]	; (8011010 <dec_lock+0x74>)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	011b      	lsls	r3, r3, #4
 8010fdc:	4413      	add	r3, r2
 8010fde:	330c      	adds	r3, #12
 8010fe0:	89fa      	ldrh	r2, [r7, #14]
 8010fe2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010fe4:	89fb      	ldrh	r3, [r7, #14]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d105      	bne.n	8010ff6 <dec_lock+0x5a>
 8010fea:	4a09      	ldr	r2, [pc, #36]	; (8011010 <dec_lock+0x74>)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	011b      	lsls	r3, r3, #4
 8010ff0:	4413      	add	r3, r2
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	737b      	strb	r3, [r7, #13]
 8010ffa:	e001      	b.n	8011000 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010ffc:	2302      	movs	r3, #2
 8010ffe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011000:	7b7b      	ldrb	r3, [r7, #13]
}
 8011002:	4618      	mov	r0, r3
 8011004:	3714      	adds	r7, #20
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr
 801100e:	bf00      	nop
 8011010:	2000170c 	.word	0x2000170c

08011014 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011014:	b480      	push	{r7}
 8011016:	b085      	sub	sp, #20
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801101c:	2300      	movs	r3, #0
 801101e:	60fb      	str	r3, [r7, #12]
 8011020:	e010      	b.n	8011044 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011022:	4a0d      	ldr	r2, [pc, #52]	; (8011058 <clear_lock+0x44>)
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	011b      	lsls	r3, r3, #4
 8011028:	4413      	add	r3, r2
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	429a      	cmp	r2, r3
 8011030:	d105      	bne.n	801103e <clear_lock+0x2a>
 8011032:	4a09      	ldr	r2, [pc, #36]	; (8011058 <clear_lock+0x44>)
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	011b      	lsls	r3, r3, #4
 8011038:	4413      	add	r3, r2
 801103a:	2200      	movs	r2, #0
 801103c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	3301      	adds	r3, #1
 8011042:	60fb      	str	r3, [r7, #12]
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2b01      	cmp	r3, #1
 8011048:	d9eb      	bls.n	8011022 <clear_lock+0xe>
	}
}
 801104a:	bf00      	nop
 801104c:	bf00      	nop
 801104e:	3714      	adds	r7, #20
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	4770      	bx	lr
 8011058:	2000170c 	.word	0x2000170c

0801105c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b086      	sub	sp, #24
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011064:	2300      	movs	r3, #0
 8011066:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	78db      	ldrb	r3, [r3, #3]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d034      	beq.n	80110da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011074:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	7858      	ldrb	r0, [r3, #1]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011080:	2301      	movs	r3, #1
 8011082:	697a      	ldr	r2, [r7, #20]
 8011084:	f7ff fd40 	bl	8010b08 <disk_write>
 8011088:	4603      	mov	r3, r0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d002      	beq.n	8011094 <sync_window+0x38>
			res = FR_DISK_ERR;
 801108e:	2301      	movs	r3, #1
 8011090:	73fb      	strb	r3, [r7, #15]
 8011092:	e022      	b.n	80110da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2200      	movs	r2, #0
 8011098:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801109e:	697a      	ldr	r2, [r7, #20]
 80110a0:	1ad2      	subs	r2, r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	69db      	ldr	r3, [r3, #28]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d217      	bcs.n	80110da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	789b      	ldrb	r3, [r3, #2]
 80110ae:	613b      	str	r3, [r7, #16]
 80110b0:	e010      	b.n	80110d4 <sync_window+0x78>
					wsect += fs->fsize;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	69db      	ldr	r3, [r3, #28]
 80110b6:	697a      	ldr	r2, [r7, #20]
 80110b8:	4413      	add	r3, r2
 80110ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	7858      	ldrb	r0, [r3, #1]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80110c6:	2301      	movs	r3, #1
 80110c8:	697a      	ldr	r2, [r7, #20]
 80110ca:	f7ff fd1d 	bl	8010b08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	3b01      	subs	r3, #1
 80110d2:	613b      	str	r3, [r7, #16]
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d8eb      	bhi.n	80110b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80110da:	7bfb      	ldrb	r3, [r7, #15]
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3718      	adds	r7, #24
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}

080110e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80110ee:	2300      	movs	r3, #0
 80110f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110f6:	683a      	ldr	r2, [r7, #0]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d01b      	beq.n	8011134 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	f7ff ffad 	bl	801105c <sync_window>
 8011102:	4603      	mov	r3, r0
 8011104:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011106:	7bfb      	ldrb	r3, [r7, #15]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d113      	bne.n	8011134 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	7858      	ldrb	r0, [r3, #1]
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011116:	2301      	movs	r3, #1
 8011118:	683a      	ldr	r2, [r7, #0]
 801111a:	f7ff fcd5 	bl	8010ac8 <disk_read>
 801111e:	4603      	mov	r3, r0
 8011120:	2b00      	cmp	r3, #0
 8011122:	d004      	beq.n	801112e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011124:	f04f 33ff 	mov.w	r3, #4294967295
 8011128:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801112a:	2301      	movs	r3, #1
 801112c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	683a      	ldr	r2, [r7, #0]
 8011132:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011134:	7bfb      	ldrb	r3, [r7, #15]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
	...

08011140 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f7ff ff87 	bl	801105c <sync_window>
 801114e:	4603      	mov	r3, r0
 8011150:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011152:	7bfb      	ldrb	r3, [r7, #15]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d158      	bne.n	801120a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	2b03      	cmp	r3, #3
 801115e:	d148      	bne.n	80111f2 <sync_fs+0xb2>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	791b      	ldrb	r3, [r3, #4]
 8011164:	2b01      	cmp	r3, #1
 8011166:	d144      	bne.n	80111f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	3334      	adds	r3, #52	; 0x34
 801116c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011170:	2100      	movs	r1, #0
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff fda9 	bl	8010cca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	3334      	adds	r3, #52	; 0x34
 801117c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011180:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011184:	4618      	mov	r0, r3
 8011186:	f7ff fd38 	bl	8010bfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	3334      	adds	r3, #52	; 0x34
 801118e:	4921      	ldr	r1, [pc, #132]	; (8011214 <sync_fs+0xd4>)
 8011190:	4618      	mov	r0, r3
 8011192:	f7ff fd4d 	bl	8010c30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	3334      	adds	r3, #52	; 0x34
 801119a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801119e:	491e      	ldr	r1, [pc, #120]	; (8011218 <sync_fs+0xd8>)
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7ff fd45 	bl	8010c30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	3334      	adds	r3, #52	; 0x34
 80111aa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	695b      	ldr	r3, [r3, #20]
 80111b2:	4619      	mov	r1, r3
 80111b4:	4610      	mov	r0, r2
 80111b6:	f7ff fd3b 	bl	8010c30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	3334      	adds	r3, #52	; 0x34
 80111be:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	691b      	ldr	r3, [r3, #16]
 80111c6:	4619      	mov	r1, r3
 80111c8:	4610      	mov	r0, r2
 80111ca:	f7ff fd31 	bl	8010c30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6a1b      	ldr	r3, [r3, #32]
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	7858      	ldrb	r0, [r3, #1]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111e6:	2301      	movs	r3, #1
 80111e8:	f7ff fc8e 	bl	8010b08 <disk_write>
			fs->fsi_flag = 0;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2200      	movs	r2, #0
 80111f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	785b      	ldrb	r3, [r3, #1]
 80111f6:	2200      	movs	r2, #0
 80111f8:	2100      	movs	r1, #0
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ff fca4 	bl	8010b48 <disk_ioctl>
 8011200:	4603      	mov	r3, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	d001      	beq.n	801120a <sync_fs+0xca>
 8011206:	2301      	movs	r3, #1
 8011208:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801120a:	7bfb      	ldrb	r3, [r7, #15]
}
 801120c:	4618      	mov	r0, r3
 801120e:	3710      	adds	r7, #16
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	41615252 	.word	0x41615252
 8011218:	61417272 	.word	0x61417272

0801121c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801121c:	b480      	push	{r7}
 801121e:	b083      	sub	sp, #12
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	3b02      	subs	r3, #2
 801122a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	699b      	ldr	r3, [r3, #24]
 8011230:	3b02      	subs	r3, #2
 8011232:	683a      	ldr	r2, [r7, #0]
 8011234:	429a      	cmp	r2, r3
 8011236:	d301      	bcc.n	801123c <clust2sect+0x20>
 8011238:	2300      	movs	r3, #0
 801123a:	e008      	b.n	801124e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	895b      	ldrh	r3, [r3, #10]
 8011240:	461a      	mov	r2, r3
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	fb03 f202 	mul.w	r2, r3, r2
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801124c:	4413      	add	r3, r2
}
 801124e:	4618      	mov	r0, r3
 8011250:	370c      	adds	r7, #12
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr

0801125a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801125a:	b580      	push	{r7, lr}
 801125c:	b086      	sub	sp, #24
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
 8011262:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	2b01      	cmp	r3, #1
 801126e:	d904      	bls.n	801127a <get_fat+0x20>
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	699b      	ldr	r3, [r3, #24]
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	429a      	cmp	r2, r3
 8011278:	d302      	bcc.n	8011280 <get_fat+0x26>
		val = 1;	/* Internal error */
 801127a:	2301      	movs	r3, #1
 801127c:	617b      	str	r3, [r7, #20]
 801127e:	e08f      	b.n	80113a0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011280:	f04f 33ff 	mov.w	r3, #4294967295
 8011284:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	2b03      	cmp	r3, #3
 801128c:	d062      	beq.n	8011354 <get_fat+0xfa>
 801128e:	2b03      	cmp	r3, #3
 8011290:	dc7c      	bgt.n	801138c <get_fat+0x132>
 8011292:	2b01      	cmp	r3, #1
 8011294:	d002      	beq.n	801129c <get_fat+0x42>
 8011296:	2b02      	cmp	r3, #2
 8011298:	d042      	beq.n	8011320 <get_fat+0xc6>
 801129a:	e077      	b.n	801138c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	60fb      	str	r3, [r7, #12]
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	085b      	lsrs	r3, r3, #1
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	4413      	add	r3, r2
 80112a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	0a5b      	lsrs	r3, r3, #9
 80112b2:	4413      	add	r3, r2
 80112b4:	4619      	mov	r1, r3
 80112b6:	6938      	ldr	r0, [r7, #16]
 80112b8:	f7ff ff14 	bl	80110e4 <move_window>
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d167      	bne.n	8011392 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	1c5a      	adds	r2, r3, #1
 80112c6:	60fa      	str	r2, [r7, #12]
 80112c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112cc:	693a      	ldr	r2, [r7, #16]
 80112ce:	4413      	add	r3, r2
 80112d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80112d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	0a5b      	lsrs	r3, r3, #9
 80112de:	4413      	add	r3, r2
 80112e0:	4619      	mov	r1, r3
 80112e2:	6938      	ldr	r0, [r7, #16]
 80112e4:	f7ff fefe 	bl	80110e4 <move_window>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d153      	bne.n	8011396 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112f4:	693a      	ldr	r2, [r7, #16]
 80112f6:	4413      	add	r3, r2
 80112f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80112fc:	021b      	lsls	r3, r3, #8
 80112fe:	461a      	mov	r2, r3
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	4313      	orrs	r3, r2
 8011304:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	f003 0301 	and.w	r3, r3, #1
 801130c:	2b00      	cmp	r3, #0
 801130e:	d002      	beq.n	8011316 <get_fat+0xbc>
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	091b      	lsrs	r3, r3, #4
 8011314:	e002      	b.n	801131c <get_fat+0xc2>
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801131c:	617b      	str	r3, [r7, #20]
			break;
 801131e:	e03f      	b.n	80113a0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	0a1b      	lsrs	r3, r3, #8
 8011328:	4413      	add	r3, r2
 801132a:	4619      	mov	r1, r3
 801132c:	6938      	ldr	r0, [r7, #16]
 801132e:	f7ff fed9 	bl	80110e4 <move_window>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	d130      	bne.n	801139a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	005b      	lsls	r3, r3, #1
 8011342:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011346:	4413      	add	r3, r2
 8011348:	4618      	mov	r0, r3
 801134a:	f7ff fc1b 	bl	8010b84 <ld_word>
 801134e:	4603      	mov	r3, r0
 8011350:	617b      	str	r3, [r7, #20]
			break;
 8011352:	e025      	b.n	80113a0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	09db      	lsrs	r3, r3, #7
 801135c:	4413      	add	r3, r2
 801135e:	4619      	mov	r1, r3
 8011360:	6938      	ldr	r0, [r7, #16]
 8011362:	f7ff febf 	bl	80110e4 <move_window>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d118      	bne.n	801139e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	009b      	lsls	r3, r3, #2
 8011376:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801137a:	4413      	add	r3, r2
 801137c:	4618      	mov	r0, r3
 801137e:	f7ff fc19 	bl	8010bb4 <ld_dword>
 8011382:	4603      	mov	r3, r0
 8011384:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011388:	617b      	str	r3, [r7, #20]
			break;
 801138a:	e009      	b.n	80113a0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801138c:	2301      	movs	r3, #1
 801138e:	617b      	str	r3, [r7, #20]
 8011390:	e006      	b.n	80113a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011392:	bf00      	nop
 8011394:	e004      	b.n	80113a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011396:	bf00      	nop
 8011398:	e002      	b.n	80113a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801139a:	bf00      	nop
 801139c:	e000      	b.n	80113a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801139e:	bf00      	nop
		}
	}

	return val;
 80113a0:	697b      	ldr	r3, [r7, #20]
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3718      	adds	r7, #24
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80113aa:	b590      	push	{r4, r7, lr}
 80113ac:	b089      	sub	sp, #36	; 0x24
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	60f8      	str	r0, [r7, #12]
 80113b2:	60b9      	str	r1, [r7, #8]
 80113b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80113b6:	2302      	movs	r3, #2
 80113b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	f240 80d2 	bls.w	8011566 <put_fat+0x1bc>
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	699b      	ldr	r3, [r3, #24]
 80113c6:	68ba      	ldr	r2, [r7, #8]
 80113c8:	429a      	cmp	r2, r3
 80113ca:	f080 80cc 	bcs.w	8011566 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	2b03      	cmp	r3, #3
 80113d4:	f000 8096 	beq.w	8011504 <put_fat+0x15a>
 80113d8:	2b03      	cmp	r3, #3
 80113da:	f300 80cd 	bgt.w	8011578 <put_fat+0x1ce>
 80113de:	2b01      	cmp	r3, #1
 80113e0:	d002      	beq.n	80113e8 <put_fat+0x3e>
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	d06e      	beq.n	80114c4 <put_fat+0x11a>
 80113e6:	e0c7      	b.n	8011578 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	61bb      	str	r3, [r7, #24]
 80113ec:	69bb      	ldr	r3, [r7, #24]
 80113ee:	085b      	lsrs	r3, r3, #1
 80113f0:	69ba      	ldr	r2, [r7, #24]
 80113f2:	4413      	add	r3, r2
 80113f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	0a5b      	lsrs	r3, r3, #9
 80113fe:	4413      	add	r3, r2
 8011400:	4619      	mov	r1, r3
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	f7ff fe6e 	bl	80110e4 <move_window>
 8011408:	4603      	mov	r3, r0
 801140a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801140c:	7ffb      	ldrb	r3, [r7, #31]
 801140e:	2b00      	cmp	r3, #0
 8011410:	f040 80ab 	bne.w	801156a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801141a:	69bb      	ldr	r3, [r7, #24]
 801141c:	1c59      	adds	r1, r3, #1
 801141e:	61b9      	str	r1, [r7, #24]
 8011420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011424:	4413      	add	r3, r2
 8011426:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	f003 0301 	and.w	r3, r3, #1
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00d      	beq.n	801144e <put_fat+0xa4>
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	b25b      	sxtb	r3, r3
 8011438:	f003 030f 	and.w	r3, r3, #15
 801143c:	b25a      	sxtb	r2, r3
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	b2db      	uxtb	r3, r3
 8011442:	011b      	lsls	r3, r3, #4
 8011444:	b25b      	sxtb	r3, r3
 8011446:	4313      	orrs	r3, r2
 8011448:	b25b      	sxtb	r3, r3
 801144a:	b2db      	uxtb	r3, r3
 801144c:	e001      	b.n	8011452 <put_fat+0xa8>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	b2db      	uxtb	r3, r3
 8011452:	697a      	ldr	r2, [r7, #20]
 8011454:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	2201      	movs	r2, #1
 801145a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	0a5b      	lsrs	r3, r3, #9
 8011464:	4413      	add	r3, r2
 8011466:	4619      	mov	r1, r3
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f7ff fe3b 	bl	80110e4 <move_window>
 801146e:	4603      	mov	r3, r0
 8011470:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011472:	7ffb      	ldrb	r3, [r7, #31]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d17a      	bne.n	801156e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011484:	4413      	add	r3, r2
 8011486:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	f003 0301 	and.w	r3, r3, #1
 801148e:	2b00      	cmp	r3, #0
 8011490:	d003      	beq.n	801149a <put_fat+0xf0>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	091b      	lsrs	r3, r3, #4
 8011496:	b2db      	uxtb	r3, r3
 8011498:	e00e      	b.n	80114b8 <put_fat+0x10e>
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	b25b      	sxtb	r3, r3
 80114a0:	f023 030f 	bic.w	r3, r3, #15
 80114a4:	b25a      	sxtb	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	0a1b      	lsrs	r3, r3, #8
 80114aa:	b25b      	sxtb	r3, r3
 80114ac:	f003 030f 	and.w	r3, r3, #15
 80114b0:	b25b      	sxtb	r3, r3
 80114b2:	4313      	orrs	r3, r2
 80114b4:	b25b      	sxtb	r3, r3
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	697a      	ldr	r2, [r7, #20]
 80114ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2201      	movs	r2, #1
 80114c0:	70da      	strb	r2, [r3, #3]
			break;
 80114c2:	e059      	b.n	8011578 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	0a1b      	lsrs	r3, r3, #8
 80114cc:	4413      	add	r3, r2
 80114ce:	4619      	mov	r1, r3
 80114d0:	68f8      	ldr	r0, [r7, #12]
 80114d2:	f7ff fe07 	bl	80110e4 <move_window>
 80114d6:	4603      	mov	r3, r0
 80114d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80114da:	7ffb      	ldrb	r3, [r7, #31]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d148      	bne.n	8011572 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	005b      	lsls	r3, r3, #1
 80114ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80114ee:	4413      	add	r3, r2
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	b292      	uxth	r2, r2
 80114f4:	4611      	mov	r1, r2
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7ff fb7f 	bl	8010bfa <st_word>
			fs->wflag = 1;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2201      	movs	r2, #1
 8011500:	70da      	strb	r2, [r3, #3]
			break;
 8011502:	e039      	b.n	8011578 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	09db      	lsrs	r3, r3, #7
 801150c:	4413      	add	r3, r2
 801150e:	4619      	mov	r1, r3
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f7ff fde7 	bl	80110e4 <move_window>
 8011516:	4603      	mov	r3, r0
 8011518:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801151a:	7ffb      	ldrb	r3, [r7, #31]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d12a      	bne.n	8011576 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	009b      	lsls	r3, r3, #2
 8011530:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011534:	4413      	add	r3, r2
 8011536:	4618      	mov	r0, r3
 8011538:	f7ff fb3c 	bl	8010bb4 <ld_dword>
 801153c:	4603      	mov	r3, r0
 801153e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011542:	4323      	orrs	r3, r4
 8011544:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011554:	4413      	add	r3, r2
 8011556:	6879      	ldr	r1, [r7, #4]
 8011558:	4618      	mov	r0, r3
 801155a:	f7ff fb69 	bl	8010c30 <st_dword>
			fs->wflag = 1;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2201      	movs	r2, #1
 8011562:	70da      	strb	r2, [r3, #3]
			break;
 8011564:	e008      	b.n	8011578 <put_fat+0x1ce>
		}
	}
 8011566:	bf00      	nop
 8011568:	e006      	b.n	8011578 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801156a:	bf00      	nop
 801156c:	e004      	b.n	8011578 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801156e:	bf00      	nop
 8011570:	e002      	b.n	8011578 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011572:	bf00      	nop
 8011574:	e000      	b.n	8011578 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011576:	bf00      	nop
	return res;
 8011578:	7ffb      	ldrb	r3, [r7, #31]
}
 801157a:	4618      	mov	r0, r3
 801157c:	3724      	adds	r7, #36	; 0x24
 801157e:	46bd      	mov	sp, r7
 8011580:	bd90      	pop	{r4, r7, pc}

08011582 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011582:	b580      	push	{r7, lr}
 8011584:	b088      	sub	sp, #32
 8011586:	af00      	add	r7, sp, #0
 8011588:	60f8      	str	r0, [r7, #12]
 801158a:	60b9      	str	r1, [r7, #8]
 801158c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801158e:	2300      	movs	r3, #0
 8011590:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	2b01      	cmp	r3, #1
 801159c:	d904      	bls.n	80115a8 <remove_chain+0x26>
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	699b      	ldr	r3, [r3, #24]
 80115a2:	68ba      	ldr	r2, [r7, #8]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d301      	bcc.n	80115ac <remove_chain+0x2a>
 80115a8:	2302      	movs	r3, #2
 80115aa:	e04b      	b.n	8011644 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00c      	beq.n	80115cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80115b2:	f04f 32ff 	mov.w	r2, #4294967295
 80115b6:	6879      	ldr	r1, [r7, #4]
 80115b8:	69b8      	ldr	r0, [r7, #24]
 80115ba:	f7ff fef6 	bl	80113aa <put_fat>
 80115be:	4603      	mov	r3, r0
 80115c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80115c2:	7ffb      	ldrb	r3, [r7, #31]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <remove_chain+0x4a>
 80115c8:	7ffb      	ldrb	r3, [r7, #31]
 80115ca:	e03b      	b.n	8011644 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80115cc:	68b9      	ldr	r1, [r7, #8]
 80115ce:	68f8      	ldr	r0, [r7, #12]
 80115d0:	f7ff fe43 	bl	801125a <get_fat>
 80115d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d031      	beq.n	8011640 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	2b01      	cmp	r3, #1
 80115e0:	d101      	bne.n	80115e6 <remove_chain+0x64>
 80115e2:	2302      	movs	r3, #2
 80115e4:	e02e      	b.n	8011644 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ec:	d101      	bne.n	80115f2 <remove_chain+0x70>
 80115ee:	2301      	movs	r3, #1
 80115f0:	e028      	b.n	8011644 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80115f2:	2200      	movs	r2, #0
 80115f4:	68b9      	ldr	r1, [r7, #8]
 80115f6:	69b8      	ldr	r0, [r7, #24]
 80115f8:	f7ff fed7 	bl	80113aa <put_fat>
 80115fc:	4603      	mov	r3, r0
 80115fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011600:	7ffb      	ldrb	r3, [r7, #31]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d001      	beq.n	801160a <remove_chain+0x88>
 8011606:	7ffb      	ldrb	r3, [r7, #31]
 8011608:	e01c      	b.n	8011644 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	695a      	ldr	r2, [r3, #20]
 801160e:	69bb      	ldr	r3, [r7, #24]
 8011610:	699b      	ldr	r3, [r3, #24]
 8011612:	3b02      	subs	r3, #2
 8011614:	429a      	cmp	r2, r3
 8011616:	d20b      	bcs.n	8011630 <remove_chain+0xae>
			fs->free_clst++;
 8011618:	69bb      	ldr	r3, [r7, #24]
 801161a:	695b      	ldr	r3, [r3, #20]
 801161c:	1c5a      	adds	r2, r3, #1
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	791b      	ldrb	r3, [r3, #4]
 8011626:	f043 0301 	orr.w	r3, r3, #1
 801162a:	b2da      	uxtb	r2, r3
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	699b      	ldr	r3, [r3, #24]
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	429a      	cmp	r2, r3
 801163c:	d3c6      	bcc.n	80115cc <remove_chain+0x4a>
 801163e:	e000      	b.n	8011642 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011640:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3720      	adds	r7, #32
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b088      	sub	sp, #32
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d10d      	bne.n	801167e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	691b      	ldr	r3, [r3, #16]
 8011666:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d004      	beq.n	8011678 <create_chain+0x2c>
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	699b      	ldr	r3, [r3, #24]
 8011672:	69ba      	ldr	r2, [r7, #24]
 8011674:	429a      	cmp	r2, r3
 8011676:	d31b      	bcc.n	80116b0 <create_chain+0x64>
 8011678:	2301      	movs	r3, #1
 801167a:	61bb      	str	r3, [r7, #24]
 801167c:	e018      	b.n	80116b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801167e:	6839      	ldr	r1, [r7, #0]
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f7ff fdea 	bl	801125a <get_fat>
 8011686:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2b01      	cmp	r3, #1
 801168c:	d801      	bhi.n	8011692 <create_chain+0x46>
 801168e:	2301      	movs	r3, #1
 8011690:	e070      	b.n	8011774 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011698:	d101      	bne.n	801169e <create_chain+0x52>
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	e06a      	b.n	8011774 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	699b      	ldr	r3, [r3, #24]
 80116a2:	68fa      	ldr	r2, [r7, #12]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d201      	bcs.n	80116ac <create_chain+0x60>
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	e063      	b.n	8011774 <create_chain+0x128>
		scl = clst;
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80116b0:	69bb      	ldr	r3, [r7, #24]
 80116b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	3301      	adds	r3, #1
 80116b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	699b      	ldr	r3, [r3, #24]
 80116be:	69fa      	ldr	r2, [r7, #28]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d307      	bcc.n	80116d4 <create_chain+0x88>
				ncl = 2;
 80116c4:	2302      	movs	r3, #2
 80116c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80116c8:	69fa      	ldr	r2, [r7, #28]
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d901      	bls.n	80116d4 <create_chain+0x88>
 80116d0:	2300      	movs	r3, #0
 80116d2:	e04f      	b.n	8011774 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80116d4:	69f9      	ldr	r1, [r7, #28]
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f7ff fdbf 	bl	801125a <get_fat>
 80116dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00e      	beq.n	8011702 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2b01      	cmp	r3, #1
 80116e8:	d003      	beq.n	80116f2 <create_chain+0xa6>
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116f0:	d101      	bne.n	80116f6 <create_chain+0xaa>
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	e03e      	b.n	8011774 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80116f6:	69fa      	ldr	r2, [r7, #28]
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d1da      	bne.n	80116b4 <create_chain+0x68>
 80116fe:	2300      	movs	r3, #0
 8011700:	e038      	b.n	8011774 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011702:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011704:	f04f 32ff 	mov.w	r2, #4294967295
 8011708:	69f9      	ldr	r1, [r7, #28]
 801170a:	6938      	ldr	r0, [r7, #16]
 801170c:	f7ff fe4d 	bl	80113aa <put_fat>
 8011710:	4603      	mov	r3, r0
 8011712:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011714:	7dfb      	ldrb	r3, [r7, #23]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d109      	bne.n	801172e <create_chain+0xe2>
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d006      	beq.n	801172e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011720:	69fa      	ldr	r2, [r7, #28]
 8011722:	6839      	ldr	r1, [r7, #0]
 8011724:	6938      	ldr	r0, [r7, #16]
 8011726:	f7ff fe40 	bl	80113aa <put_fat>
 801172a:	4603      	mov	r3, r0
 801172c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801172e:	7dfb      	ldrb	r3, [r7, #23]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d116      	bne.n	8011762 <create_chain+0x116>
		fs->last_clst = ncl;
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	69fa      	ldr	r2, [r7, #28]
 8011738:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	695a      	ldr	r2, [r3, #20]
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	699b      	ldr	r3, [r3, #24]
 8011742:	3b02      	subs	r3, #2
 8011744:	429a      	cmp	r2, r3
 8011746:	d804      	bhi.n	8011752 <create_chain+0x106>
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	695b      	ldr	r3, [r3, #20]
 801174c:	1e5a      	subs	r2, r3, #1
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	791b      	ldrb	r3, [r3, #4]
 8011756:	f043 0301 	orr.w	r3, r3, #1
 801175a:	b2da      	uxtb	r2, r3
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	711a      	strb	r2, [r3, #4]
 8011760:	e007      	b.n	8011772 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011762:	7dfb      	ldrb	r3, [r7, #23]
 8011764:	2b01      	cmp	r3, #1
 8011766:	d102      	bne.n	801176e <create_chain+0x122>
 8011768:	f04f 33ff 	mov.w	r3, #4294967295
 801176c:	e000      	b.n	8011770 <create_chain+0x124>
 801176e:	2301      	movs	r3, #1
 8011770:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011772:	69fb      	ldr	r3, [r7, #28]
}
 8011774:	4618      	mov	r0, r3
 8011776:	3720      	adds	r7, #32
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801177c:	b480      	push	{r7}
 801177e:	b087      	sub	sp, #28
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011790:	3304      	adds	r3, #4
 8011792:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	0a5b      	lsrs	r3, r3, #9
 8011798:	68fa      	ldr	r2, [r7, #12]
 801179a:	8952      	ldrh	r2, [r2, #10]
 801179c:	fbb3 f3f2 	udiv	r3, r3, r2
 80117a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	1d1a      	adds	r2, r3, #4
 80117a6:	613a      	str	r2, [r7, #16]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d101      	bne.n	80117b6 <clmt_clust+0x3a>
 80117b2:	2300      	movs	r3, #0
 80117b4:	e010      	b.n	80117d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80117b6:	697a      	ldr	r2, [r7, #20]
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d307      	bcc.n	80117ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80117be:	697a      	ldr	r2, [r7, #20]
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	1ad3      	subs	r3, r2, r3
 80117c4:	617b      	str	r3, [r7, #20]
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	3304      	adds	r3, #4
 80117ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80117cc:	e7e9      	b.n	80117a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80117ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	4413      	add	r3, r2
}
 80117d8:	4618      	mov	r0, r3
 80117da:	371c      	adds	r7, #28
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr

080117e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80117fa:	d204      	bcs.n	8011806 <dir_sdi+0x22>
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	f003 031f 	and.w	r3, r3, #31
 8011802:	2b00      	cmp	r3, #0
 8011804:	d001      	beq.n	801180a <dir_sdi+0x26>
		return FR_INT_ERR;
 8011806:	2302      	movs	r3, #2
 8011808:	e063      	b.n	80118d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	683a      	ldr	r2, [r7, #0]
 801180e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	689b      	ldr	r3, [r3, #8]
 8011814:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d106      	bne.n	801182a <dir_sdi+0x46>
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	2b02      	cmp	r3, #2
 8011822:	d902      	bls.n	801182a <dir_sdi+0x46>
		clst = fs->dirbase;
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011828:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d10c      	bne.n	801184a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	095b      	lsrs	r3, r3, #5
 8011834:	693a      	ldr	r2, [r7, #16]
 8011836:	8912      	ldrh	r2, [r2, #8]
 8011838:	4293      	cmp	r3, r2
 801183a:	d301      	bcc.n	8011840 <dir_sdi+0x5c>
 801183c:	2302      	movs	r3, #2
 801183e:	e048      	b.n	80118d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	61da      	str	r2, [r3, #28]
 8011848:	e029      	b.n	801189e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	895b      	ldrh	r3, [r3, #10]
 801184e:	025b      	lsls	r3, r3, #9
 8011850:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011852:	e019      	b.n	8011888 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6979      	ldr	r1, [r7, #20]
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff fcfe 	bl	801125a <get_fat>
 801185e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011866:	d101      	bne.n	801186c <dir_sdi+0x88>
 8011868:	2301      	movs	r3, #1
 801186a:	e032      	b.n	80118d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	2b01      	cmp	r3, #1
 8011870:	d904      	bls.n	801187c <dir_sdi+0x98>
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	699b      	ldr	r3, [r3, #24]
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	429a      	cmp	r2, r3
 801187a:	d301      	bcc.n	8011880 <dir_sdi+0x9c>
 801187c:	2302      	movs	r3, #2
 801187e:	e028      	b.n	80118d2 <dir_sdi+0xee>
			ofs -= csz;
 8011880:	683a      	ldr	r2, [r7, #0]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	1ad3      	subs	r3, r2, r3
 8011886:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011888:	683a      	ldr	r2, [r7, #0]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	429a      	cmp	r2, r3
 801188e:	d2e1      	bcs.n	8011854 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011890:	6979      	ldr	r1, [r7, #20]
 8011892:	6938      	ldr	r0, [r7, #16]
 8011894:	f7ff fcc2 	bl	801121c <clust2sect>
 8011898:	4602      	mov	r2, r0
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	697a      	ldr	r2, [r7, #20]
 80118a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	69db      	ldr	r3, [r3, #28]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d101      	bne.n	80118b0 <dir_sdi+0xcc>
 80118ac:	2302      	movs	r3, #2
 80118ae:	e010      	b.n	80118d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	69da      	ldr	r2, [r3, #28]
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	0a5b      	lsrs	r3, r3, #9
 80118b8:	441a      	add	r2, r3
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118ca:	441a      	add	r2, r3
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80118d0:	2300      	movs	r3, #0
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3718      	adds	r7, #24
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}

080118da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80118da:	b580      	push	{r7, lr}
 80118dc:	b086      	sub	sp, #24
 80118de:	af00      	add	r7, sp, #0
 80118e0:	6078      	str	r0, [r7, #4]
 80118e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	695b      	ldr	r3, [r3, #20]
 80118ee:	3320      	adds	r3, #32
 80118f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	69db      	ldr	r3, [r3, #28]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d003      	beq.n	8011902 <dir_next+0x28>
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011900:	d301      	bcc.n	8011906 <dir_next+0x2c>
 8011902:	2304      	movs	r3, #4
 8011904:	e0aa      	b.n	8011a5c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801190c:	2b00      	cmp	r3, #0
 801190e:	f040 8098 	bne.w	8011a42 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	69db      	ldr	r3, [r3, #28]
 8011916:	1c5a      	adds	r2, r3, #1
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	699b      	ldr	r3, [r3, #24]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d10b      	bne.n	801193c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	095b      	lsrs	r3, r3, #5
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	8912      	ldrh	r2, [r2, #8]
 801192c:	4293      	cmp	r3, r2
 801192e:	f0c0 8088 	bcc.w	8011a42 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2200      	movs	r2, #0
 8011936:	61da      	str	r2, [r3, #28]
 8011938:	2304      	movs	r3, #4
 801193a:	e08f      	b.n	8011a5c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	0a5b      	lsrs	r3, r3, #9
 8011940:	68fa      	ldr	r2, [r7, #12]
 8011942:	8952      	ldrh	r2, [r2, #10]
 8011944:	3a01      	subs	r2, #1
 8011946:	4013      	ands	r3, r2
 8011948:	2b00      	cmp	r3, #0
 801194a:	d17a      	bne.n	8011a42 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801194c:	687a      	ldr	r2, [r7, #4]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	699b      	ldr	r3, [r3, #24]
 8011952:	4619      	mov	r1, r3
 8011954:	4610      	mov	r0, r2
 8011956:	f7ff fc80 	bl	801125a <get_fat>
 801195a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b01      	cmp	r3, #1
 8011960:	d801      	bhi.n	8011966 <dir_next+0x8c>
 8011962:	2302      	movs	r3, #2
 8011964:	e07a      	b.n	8011a5c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	f1b3 3fff 	cmp.w	r3, #4294967295
 801196c:	d101      	bne.n	8011972 <dir_next+0x98>
 801196e:	2301      	movs	r3, #1
 8011970:	e074      	b.n	8011a5c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	699b      	ldr	r3, [r3, #24]
 8011976:	697a      	ldr	r2, [r7, #20]
 8011978:	429a      	cmp	r2, r3
 801197a:	d358      	bcc.n	8011a2e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d104      	bne.n	801198c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2200      	movs	r2, #0
 8011986:	61da      	str	r2, [r3, #28]
 8011988:	2304      	movs	r3, #4
 801198a:	e067      	b.n	8011a5c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	699b      	ldr	r3, [r3, #24]
 8011992:	4619      	mov	r1, r3
 8011994:	4610      	mov	r0, r2
 8011996:	f7ff fe59 	bl	801164c <create_chain>
 801199a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d101      	bne.n	80119a6 <dir_next+0xcc>
 80119a2:	2307      	movs	r3, #7
 80119a4:	e05a      	b.n	8011a5c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	d101      	bne.n	80119b0 <dir_next+0xd6>
 80119ac:	2302      	movs	r3, #2
 80119ae:	e055      	b.n	8011a5c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119b6:	d101      	bne.n	80119bc <dir_next+0xe2>
 80119b8:	2301      	movs	r3, #1
 80119ba:	e04f      	b.n	8011a5c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f7ff fb4d 	bl	801105c <sync_window>
 80119c2:	4603      	mov	r3, r0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d001      	beq.n	80119cc <dir_next+0xf2>
 80119c8:	2301      	movs	r3, #1
 80119ca:	e047      	b.n	8011a5c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	3334      	adds	r3, #52	; 0x34
 80119d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119d4:	2100      	movs	r1, #0
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7ff f977 	bl	8010cca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80119dc:	2300      	movs	r3, #0
 80119de:	613b      	str	r3, [r7, #16]
 80119e0:	6979      	ldr	r1, [r7, #20]
 80119e2:	68f8      	ldr	r0, [r7, #12]
 80119e4:	f7ff fc1a 	bl	801121c <clust2sect>
 80119e8:	4602      	mov	r2, r0
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	631a      	str	r2, [r3, #48]	; 0x30
 80119ee:	e012      	b.n	8011a16 <dir_next+0x13c>
						fs->wflag = 1;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2201      	movs	r2, #1
 80119f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80119f6:	68f8      	ldr	r0, [r7, #12]
 80119f8:	f7ff fb30 	bl	801105c <sync_window>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d001      	beq.n	8011a06 <dir_next+0x12c>
 8011a02:	2301      	movs	r3, #1
 8011a04:	e02a      	b.n	8011a5c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	613b      	str	r3, [r7, #16]
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a10:	1c5a      	adds	r2, r3, #1
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	631a      	str	r2, [r3, #48]	; 0x30
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	895b      	ldrh	r3, [r3, #10]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	d3e6      	bcc.n	80119f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	1ad2      	subs	r2, r2, r3
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	697a      	ldr	r2, [r7, #20]
 8011a32:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011a34:	6979      	ldr	r1, [r7, #20]
 8011a36:	68f8      	ldr	r0, [r7, #12]
 8011a38:	f7ff fbf0 	bl	801121c <clust2sect>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	68ba      	ldr	r2, [r7, #8]
 8011a46:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a54:	441a      	add	r2, r3
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3718      	adds	r7, #24
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b086      	sub	sp, #24
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011a74:	2100      	movs	r1, #0
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f7ff feb4 	bl	80117e4 <dir_sdi>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011a80:	7dfb      	ldrb	r3, [r7, #23]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d12b      	bne.n	8011ade <dir_alloc+0x7a>
		n = 0;
 8011a86:	2300      	movs	r3, #0
 8011a88:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	69db      	ldr	r3, [r3, #28]
 8011a8e:	4619      	mov	r1, r3
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f7ff fb27 	bl	80110e4 <move_window>
 8011a96:	4603      	mov	r3, r0
 8011a98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011a9a:	7dfb      	ldrb	r3, [r7, #23]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d11d      	bne.n	8011adc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6a1b      	ldr	r3, [r3, #32]
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	2be5      	cmp	r3, #229	; 0xe5
 8011aa8:	d004      	beq.n	8011ab4 <dir_alloc+0x50>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6a1b      	ldr	r3, [r3, #32]
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d107      	bne.n	8011ac4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	613b      	str	r3, [r7, #16]
 8011aba:	693a      	ldr	r2, [r7, #16]
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d102      	bne.n	8011ac8 <dir_alloc+0x64>
 8011ac2:	e00c      	b.n	8011ade <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011ac8:	2101      	movs	r1, #1
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7ff ff05 	bl	80118da <dir_next>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011ad4:	7dfb      	ldrb	r3, [r7, #23]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d0d7      	beq.n	8011a8a <dir_alloc+0x26>
 8011ada:	e000      	b.n	8011ade <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011adc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011ade:	7dfb      	ldrb	r3, [r7, #23]
 8011ae0:	2b04      	cmp	r3, #4
 8011ae2:	d101      	bne.n	8011ae8 <dir_alloc+0x84>
 8011ae4:	2307      	movs	r3, #7
 8011ae6:	75fb      	strb	r3, [r7, #23]
	return res;
 8011ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3718      	adds	r7, #24
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011af2:	b580      	push	{r7, lr}
 8011af4:	b084      	sub	sp, #16
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	6078      	str	r0, [r7, #4]
 8011afa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	331a      	adds	r3, #26
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7ff f83f 	bl	8010b84 <ld_word>
 8011b06:	4603      	mov	r3, r0
 8011b08:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	2b03      	cmp	r3, #3
 8011b10:	d109      	bne.n	8011b26 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	3314      	adds	r3, #20
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7ff f834 	bl	8010b84 <ld_word>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	041b      	lsls	r3, r3, #16
 8011b20:	68fa      	ldr	r2, [r7, #12]
 8011b22:	4313      	orrs	r3, r2
 8011b24:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011b26:	68fb      	ldr	r3, [r7, #12]
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3710      	adds	r7, #16
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	331a      	adds	r3, #26
 8011b40:	687a      	ldr	r2, [r7, #4]
 8011b42:	b292      	uxth	r2, r2
 8011b44:	4611      	mov	r1, r2
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7ff f857 	bl	8010bfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	2b03      	cmp	r3, #3
 8011b52:	d109      	bne.n	8011b68 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	f103 0214 	add.w	r2, r3, #20
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	0c1b      	lsrs	r3, r3, #16
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	4619      	mov	r1, r3
 8011b62:	4610      	mov	r0, r2
 8011b64:	f7ff f849 	bl	8010bfa <st_word>
	}
}
 8011b68:	bf00      	nop
 8011b6a:	3710      	adds	r7, #16
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011b70:	b590      	push	{r4, r7, lr}
 8011b72:	b087      	sub	sp, #28
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	331a      	adds	r3, #26
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7ff f800 	bl	8010b84 <ld_word>
 8011b84:	4603      	mov	r3, r0
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d001      	beq.n	8011b8e <cmp_lfn+0x1e>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	e059      	b.n	8011c42 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b96:	1e5a      	subs	r2, r3, #1
 8011b98:	4613      	mov	r3, r2
 8011b9a:	005b      	lsls	r3, r3, #1
 8011b9c:	4413      	add	r3, r2
 8011b9e:	009b      	lsls	r3, r3, #2
 8011ba0:	4413      	add	r3, r2
 8011ba2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	81fb      	strh	r3, [r7, #14]
 8011ba8:	2300      	movs	r3, #0
 8011baa:	613b      	str	r3, [r7, #16]
 8011bac:	e033      	b.n	8011c16 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011bae:	4a27      	ldr	r2, [pc, #156]	; (8011c4c <cmp_lfn+0xdc>)
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	4413      	add	r3, r2
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7fe ffe1 	bl	8010b84 <ld_word>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011bc6:	89fb      	ldrh	r3, [r7, #14]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d01a      	beq.n	8011c02 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	2bfe      	cmp	r3, #254	; 0xfe
 8011bd0:	d812      	bhi.n	8011bf8 <cmp_lfn+0x88>
 8011bd2:	89bb      	ldrh	r3, [r7, #12]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f002 fb4f 	bl	8014278 <ff_wtoupper>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	461c      	mov	r4, r3
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	1c5a      	adds	r2, r3, #1
 8011be2:	617a      	str	r2, [r7, #20]
 8011be4:	005b      	lsls	r3, r3, #1
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	4413      	add	r3, r2
 8011bea:	881b      	ldrh	r3, [r3, #0]
 8011bec:	4618      	mov	r0, r3
 8011bee:	f002 fb43 	bl	8014278 <ff_wtoupper>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	429c      	cmp	r4, r3
 8011bf6:	d001      	beq.n	8011bfc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e022      	b.n	8011c42 <cmp_lfn+0xd2>
			}
			wc = uc;
 8011bfc:	89bb      	ldrh	r3, [r7, #12]
 8011bfe:	81fb      	strh	r3, [r7, #14]
 8011c00:	e006      	b.n	8011c10 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c02:	89bb      	ldrh	r3, [r7, #12]
 8011c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d001      	beq.n	8011c10 <cmp_lfn+0xa0>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	e018      	b.n	8011c42 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	3301      	adds	r3, #1
 8011c14:	613b      	str	r3, [r7, #16]
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	2b0c      	cmp	r3, #12
 8011c1a:	d9c8      	bls.n	8011bae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00b      	beq.n	8011c40 <cmp_lfn+0xd0>
 8011c28:	89fb      	ldrh	r3, [r7, #14]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d008      	beq.n	8011c40 <cmp_lfn+0xd0>
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	005b      	lsls	r3, r3, #1
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	4413      	add	r3, r2
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d001      	beq.n	8011c40 <cmp_lfn+0xd0>
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	e000      	b.n	8011c42 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011c40:	2301      	movs	r3, #1
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	371c      	adds	r7, #28
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd90      	pop	{r4, r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	08017664 	.word	0x08017664

08011c50 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b088      	sub	sp, #32
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	60f8      	str	r0, [r7, #12]
 8011c58:	60b9      	str	r1, [r7, #8]
 8011c5a:	4611      	mov	r1, r2
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	460b      	mov	r3, r1
 8011c60:	71fb      	strb	r3, [r7, #7]
 8011c62:	4613      	mov	r3, r2
 8011c64:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	330d      	adds	r3, #13
 8011c6a:	79ba      	ldrb	r2, [r7, #6]
 8011c6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	330b      	adds	r3, #11
 8011c72:	220f      	movs	r2, #15
 8011c74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	330c      	adds	r3, #12
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	331a      	adds	r3, #26
 8011c82:	2100      	movs	r1, #0
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fe ffb8 	bl	8010bfa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011c8a:	79fb      	ldrb	r3, [r7, #7]
 8011c8c:	1e5a      	subs	r2, r3, #1
 8011c8e:	4613      	mov	r3, r2
 8011c90:	005b      	lsls	r3, r3, #1
 8011c92:	4413      	add	r3, r2
 8011c94:	009b      	lsls	r3, r3, #2
 8011c96:	4413      	add	r3, r2
 8011c98:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	82fb      	strh	r3, [r7, #22]
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011ca2:	8afb      	ldrh	r3, [r7, #22]
 8011ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	d007      	beq.n	8011cbc <put_lfn+0x6c>
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	1c5a      	adds	r2, r3, #1
 8011cb0:	61fa      	str	r2, [r7, #28]
 8011cb2:	005b      	lsls	r3, r3, #1
 8011cb4:	68fa      	ldr	r2, [r7, #12]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	881b      	ldrh	r3, [r3, #0]
 8011cba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011cbc:	4a17      	ldr	r2, [pc, #92]	; (8011d1c <put_lfn+0xcc>)
 8011cbe:	69bb      	ldr	r3, [r7, #24]
 8011cc0:	4413      	add	r3, r2
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	4413      	add	r3, r2
 8011cca:	8afa      	ldrh	r2, [r7, #22]
 8011ccc:	4611      	mov	r1, r2
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fe ff93 	bl	8010bfa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011cd4:	8afb      	ldrh	r3, [r7, #22]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d102      	bne.n	8011ce0 <put_lfn+0x90>
 8011cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011cde:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011ce0:	69bb      	ldr	r3, [r7, #24]
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	61bb      	str	r3, [r7, #24]
 8011ce6:	69bb      	ldr	r3, [r7, #24]
 8011ce8:	2b0c      	cmp	r3, #12
 8011cea:	d9da      	bls.n	8011ca2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011cec:	8afb      	ldrh	r3, [r7, #22]
 8011cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d006      	beq.n	8011d04 <put_lfn+0xb4>
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	005b      	lsls	r3, r3, #1
 8011cfa:	68fa      	ldr	r2, [r7, #12]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	881b      	ldrh	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d103      	bne.n	8011d0c <put_lfn+0xbc>
 8011d04:	79fb      	ldrb	r3, [r7, #7]
 8011d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d0a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	79fa      	ldrb	r2, [r7, #7]
 8011d10:	701a      	strb	r2, [r3, #0]
}
 8011d12:	bf00      	nop
 8011d14:	3720      	adds	r7, #32
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	08017664 	.word	0x08017664

08011d20 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b08c      	sub	sp, #48	; 0x30
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	60b9      	str	r1, [r7, #8]
 8011d2a:	607a      	str	r2, [r7, #4]
 8011d2c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011d2e:	220b      	movs	r2, #11
 8011d30:	68b9      	ldr	r1, [r7, #8]
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f7fe ffa8 	bl	8010c88 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	2b05      	cmp	r3, #5
 8011d3c:	d92b      	bls.n	8011d96 <gen_numname+0x76>
		sr = seq;
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011d42:	e022      	b.n	8011d8a <gen_numname+0x6a>
			wc = *lfn++;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	1c9a      	adds	r2, r3, #2
 8011d48:	607a      	str	r2, [r7, #4]
 8011d4a:	881b      	ldrh	r3, [r3, #0]
 8011d4c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011d4e:	2300      	movs	r3, #0
 8011d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d52:	e017      	b.n	8011d84 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	005a      	lsls	r2, r3, #1
 8011d58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d5a:	f003 0301 	and.w	r3, r3, #1
 8011d5e:	4413      	add	r3, r2
 8011d60:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011d62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d64:	085b      	lsrs	r3, r3, #1
 8011d66:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d005      	beq.n	8011d7e <gen_numname+0x5e>
 8011d72:	69fb      	ldr	r3, [r7, #28]
 8011d74:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8011d78:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8011d7c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d80:	3301      	adds	r3, #1
 8011d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d86:	2b0f      	cmp	r3, #15
 8011d88:	d9e4      	bls.n	8011d54 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	881b      	ldrh	r3, [r3, #0]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d1d8      	bne.n	8011d44 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011d96:	2307      	movs	r3, #7
 8011d98:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	b2db      	uxtb	r3, r3
 8011d9e:	f003 030f 	and.w	r3, r3, #15
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	3330      	adds	r3, #48	; 0x30
 8011da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dae:	2b39      	cmp	r3, #57	; 0x39
 8011db0:	d904      	bls.n	8011dbc <gen_numname+0x9c>
 8011db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011db6:	3307      	adds	r3, #7
 8011db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbe:	1e5a      	subs	r2, r3, #1
 8011dc0:	62ba      	str	r2, [r7, #40]	; 0x28
 8011dc2:	3330      	adds	r3, #48	; 0x30
 8011dc4:	443b      	add	r3, r7
 8011dc6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011dca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	091b      	lsrs	r3, r3, #4
 8011dd2:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d1df      	bne.n	8011d9a <gen_numname+0x7a>
	ns[i] = '~';
 8011dda:	f107 0214 	add.w	r2, r7, #20
 8011dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de0:	4413      	add	r3, r2
 8011de2:	227e      	movs	r2, #126	; 0x7e
 8011de4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011de6:	2300      	movs	r3, #0
 8011de8:	627b      	str	r3, [r7, #36]	; 0x24
 8011dea:	e002      	b.n	8011df2 <gen_numname+0xd2>
 8011dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dee:	3301      	adds	r3, #1
 8011df0:	627b      	str	r3, [r7, #36]	; 0x24
 8011df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d205      	bcs.n	8011e06 <gen_numname+0xe6>
 8011dfa:	68fa      	ldr	r2, [r7, #12]
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	4413      	add	r3, r2
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	2b20      	cmp	r3, #32
 8011e04:	d1f2      	bne.n	8011dec <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e08:	2b07      	cmp	r3, #7
 8011e0a:	d807      	bhi.n	8011e1c <gen_numname+0xfc>
 8011e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0e:	1c5a      	adds	r2, r3, #1
 8011e10:	62ba      	str	r2, [r7, #40]	; 0x28
 8011e12:	3330      	adds	r3, #48	; 0x30
 8011e14:	443b      	add	r3, r7
 8011e16:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011e1a:	e000      	b.n	8011e1e <gen_numname+0xfe>
 8011e1c:	2120      	movs	r1, #32
 8011e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e20:	1c5a      	adds	r2, r3, #1
 8011e22:	627a      	str	r2, [r7, #36]	; 0x24
 8011e24:	68fa      	ldr	r2, [r7, #12]
 8011e26:	4413      	add	r3, r2
 8011e28:	460a      	mov	r2, r1
 8011e2a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2e:	2b07      	cmp	r3, #7
 8011e30:	d9e9      	bls.n	8011e06 <gen_numname+0xe6>
}
 8011e32:	bf00      	nop
 8011e34:	bf00      	nop
 8011e36:	3730      	adds	r7, #48	; 0x30
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011e44:	2300      	movs	r3, #0
 8011e46:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011e48:	230b      	movs	r3, #11
 8011e4a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011e4c:	7bfb      	ldrb	r3, [r7, #15]
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	0852      	lsrs	r2, r2, #1
 8011e52:	01db      	lsls	r3, r3, #7
 8011e54:	4313      	orrs	r3, r2
 8011e56:	b2da      	uxtb	r2, r3
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	1c59      	adds	r1, r3, #1
 8011e5c:	6079      	str	r1, [r7, #4]
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	4413      	add	r3, r2
 8011e62:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	3b01      	subs	r3, #1
 8011e68:	60bb      	str	r3, [r7, #8]
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d1ed      	bne.n	8011e4c <sum_sfn+0x10>
	return sum;
 8011e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3714      	adds	r7, #20
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr

08011e7e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b086      	sub	sp, #24
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7ff fca8 	bl	80117e4 <dir_sdi>
 8011e94:	4603      	mov	r3, r0
 8011e96:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011e98:	7dfb      	ldrb	r3, [r7, #23]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d001      	beq.n	8011ea2 <dir_find+0x24>
 8011e9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ea0:	e0a9      	b.n	8011ff6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011ea2:	23ff      	movs	r3, #255	; 0xff
 8011ea4:	753b      	strb	r3, [r7, #20]
 8011ea6:	7d3b      	ldrb	r3, [r7, #20]
 8011ea8:	757b      	strb	r3, [r7, #21]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	69db      	ldr	r3, [r3, #28]
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	6938      	ldr	r0, [r7, #16]
 8011eba:	f7ff f913 	bl	80110e4 <move_window>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011ec2:	7dfb      	ldrb	r3, [r7, #23]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f040 8090 	bne.w	8011fea <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a1b      	ldr	r3, [r3, #32]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011ed2:	7dbb      	ldrb	r3, [r7, #22]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d102      	bne.n	8011ede <dir_find+0x60>
 8011ed8:	2304      	movs	r3, #4
 8011eda:	75fb      	strb	r3, [r7, #23]
 8011edc:	e08a      	b.n	8011ff4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6a1b      	ldr	r3, [r3, #32]
 8011ee2:	330b      	adds	r3, #11
 8011ee4:	781b      	ldrb	r3, [r3, #0]
 8011ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011eea:	73fb      	strb	r3, [r7, #15]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	7bfa      	ldrb	r2, [r7, #15]
 8011ef0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011ef2:	7dbb      	ldrb	r3, [r7, #22]
 8011ef4:	2be5      	cmp	r3, #229	; 0xe5
 8011ef6:	d007      	beq.n	8011f08 <dir_find+0x8a>
 8011ef8:	7bfb      	ldrb	r3, [r7, #15]
 8011efa:	f003 0308 	and.w	r3, r3, #8
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d009      	beq.n	8011f16 <dir_find+0x98>
 8011f02:	7bfb      	ldrb	r3, [r7, #15]
 8011f04:	2b0f      	cmp	r3, #15
 8011f06:	d006      	beq.n	8011f16 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011f08:	23ff      	movs	r3, #255	; 0xff
 8011f0a:	757b      	strb	r3, [r7, #21]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f12:	631a      	str	r2, [r3, #48]	; 0x30
 8011f14:	e05e      	b.n	8011fd4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011f16:	7bfb      	ldrb	r3, [r7, #15]
 8011f18:	2b0f      	cmp	r3, #15
 8011f1a:	d136      	bne.n	8011f8a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d154      	bne.n	8011fd4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011f2a:	7dbb      	ldrb	r3, [r7, #22]
 8011f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d00d      	beq.n	8011f50 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6a1b      	ldr	r3, [r3, #32]
 8011f38:	7b5b      	ldrb	r3, [r3, #13]
 8011f3a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011f3c:	7dbb      	ldrb	r3, [r7, #22]
 8011f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f42:	75bb      	strb	r3, [r7, #22]
 8011f44:	7dbb      	ldrb	r3, [r7, #22]
 8011f46:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	695a      	ldr	r2, [r3, #20]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011f50:	7dba      	ldrb	r2, [r7, #22]
 8011f52:	7d7b      	ldrb	r3, [r7, #21]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d115      	bne.n	8011f84 <dir_find+0x106>
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6a1b      	ldr	r3, [r3, #32]
 8011f5c:	330d      	adds	r3, #13
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	7d3a      	ldrb	r2, [r7, #20]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d10e      	bne.n	8011f84 <dir_find+0x106>
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	68da      	ldr	r2, [r3, #12]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6a1b      	ldr	r3, [r3, #32]
 8011f6e:	4619      	mov	r1, r3
 8011f70:	4610      	mov	r0, r2
 8011f72:	f7ff fdfd 	bl	8011b70 <cmp_lfn>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d003      	beq.n	8011f84 <dir_find+0x106>
 8011f7c:	7d7b      	ldrb	r3, [r7, #21]
 8011f7e:	3b01      	subs	r3, #1
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	e000      	b.n	8011f86 <dir_find+0x108>
 8011f84:	23ff      	movs	r3, #255	; 0xff
 8011f86:	757b      	strb	r3, [r7, #21]
 8011f88:	e024      	b.n	8011fd4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011f8a:	7d7b      	ldrb	r3, [r7, #21]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d109      	bne.n	8011fa4 <dir_find+0x126>
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6a1b      	ldr	r3, [r3, #32]
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7ff ff51 	bl	8011e3c <sum_sfn>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	7d3b      	ldrb	r3, [r7, #20]
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	d024      	beq.n	8011fee <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011faa:	f003 0301 	and.w	r3, r3, #1
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d10a      	bne.n	8011fc8 <dir_find+0x14a>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6a18      	ldr	r0, [r3, #32]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	3324      	adds	r3, #36	; 0x24
 8011fba:	220b      	movs	r2, #11
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	f7fe fe9f 	bl	8010d00 <mem_cmp>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d014      	beq.n	8011ff2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011fc8:	23ff      	movs	r3, #255	; 0xff
 8011fca:	757b      	strb	r3, [r7, #21]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f7ff fc7f 	bl	80118da <dir_next>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011fe0:	7dfb      	ldrb	r3, [r7, #23]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	f43f af65 	beq.w	8011eb2 <dir_find+0x34>
 8011fe8:	e004      	b.n	8011ff4 <dir_find+0x176>
		if (res != FR_OK) break;
 8011fea:	bf00      	nop
 8011fec:	e002      	b.n	8011ff4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011fee:	bf00      	nop
 8011ff0:	e000      	b.n	8011ff4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011ff2:	bf00      	nop

	return res;
 8011ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3718      	adds	r7, #24
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
	...

08012000 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b08c      	sub	sp, #48	; 0x30
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012014:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012018:	2b00      	cmp	r3, #0
 801201a:	d001      	beq.n	8012020 <dir_register+0x20>
 801201c:	2306      	movs	r3, #6
 801201e:	e0e0      	b.n	80121e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012020:	2300      	movs	r3, #0
 8012022:	627b      	str	r3, [r7, #36]	; 0x24
 8012024:	e002      	b.n	801202c <dir_register+0x2c>
 8012026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012028:	3301      	adds	r3, #1
 801202a:	627b      	str	r3, [r7, #36]	; 0x24
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	68da      	ldr	r2, [r3, #12]
 8012030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012032:	005b      	lsls	r3, r3, #1
 8012034:	4413      	add	r3, r2
 8012036:	881b      	ldrh	r3, [r3, #0]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1f4      	bne.n	8012026 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8012042:	f107 030c 	add.w	r3, r7, #12
 8012046:	220c      	movs	r2, #12
 8012048:	4618      	mov	r0, r3
 801204a:	f7fe fe1d 	bl	8010c88 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801204e:	7dfb      	ldrb	r3, [r7, #23]
 8012050:	f003 0301 	and.w	r3, r3, #1
 8012054:	2b00      	cmp	r3, #0
 8012056:	d032      	beq.n	80120be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2240      	movs	r2, #64	; 0x40
 801205c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8012060:	2301      	movs	r3, #1
 8012062:	62bb      	str	r3, [r7, #40]	; 0x28
 8012064:	e016      	b.n	8012094 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	68da      	ldr	r2, [r3, #12]
 8012070:	f107 010c 	add.w	r1, r7, #12
 8012074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012076:	f7ff fe53 	bl	8011d20 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7ff feff 	bl	8011e7e <dir_find>
 8012080:	4603      	mov	r3, r0
 8012082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8012086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801208a:	2b00      	cmp	r3, #0
 801208c:	d106      	bne.n	801209c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012090:	3301      	adds	r3, #1
 8012092:	62bb      	str	r3, [r7, #40]	; 0x28
 8012094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012096:	2b63      	cmp	r3, #99	; 0x63
 8012098:	d9e5      	bls.n	8012066 <dir_register+0x66>
 801209a:	e000      	b.n	801209e <dir_register+0x9e>
			if (res != FR_OK) break;
 801209c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a0:	2b64      	cmp	r3, #100	; 0x64
 80120a2:	d101      	bne.n	80120a8 <dir_register+0xa8>
 80120a4:	2307      	movs	r3, #7
 80120a6:	e09c      	b.n	80121e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80120a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ac:	2b04      	cmp	r3, #4
 80120ae:	d002      	beq.n	80120b6 <dir_register+0xb6>
 80120b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120b4:	e095      	b.n	80121e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80120b6:	7dfa      	ldrb	r2, [r7, #23]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80120be:	7dfb      	ldrb	r3, [r7, #23]
 80120c0:	f003 0302 	and.w	r3, r3, #2
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d007      	beq.n	80120d8 <dir_register+0xd8>
 80120c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ca:	330c      	adds	r3, #12
 80120cc:	4a47      	ldr	r2, [pc, #284]	; (80121ec <dir_register+0x1ec>)
 80120ce:	fba2 2303 	umull	r2, r3, r2, r3
 80120d2:	089b      	lsrs	r3, r3, #2
 80120d4:	3301      	adds	r3, #1
 80120d6:	e000      	b.n	80120da <dir_register+0xda>
 80120d8:	2301      	movs	r3, #1
 80120da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80120dc:	6a39      	ldr	r1, [r7, #32]
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7ff fcc0 	bl	8011a64 <dir_alloc>
 80120e4:	4603      	mov	r3, r0
 80120e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80120ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d148      	bne.n	8012184 <dir_register+0x184>
 80120f2:	6a3b      	ldr	r3, [r7, #32]
 80120f4:	3b01      	subs	r3, #1
 80120f6:	623b      	str	r3, [r7, #32]
 80120f8:	6a3b      	ldr	r3, [r7, #32]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d042      	beq.n	8012184 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	695a      	ldr	r2, [r3, #20]
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	015b      	lsls	r3, r3, #5
 8012106:	1ad3      	subs	r3, r2, r3
 8012108:	4619      	mov	r1, r3
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7ff fb6a 	bl	80117e4 <dir_sdi>
 8012110:	4603      	mov	r3, r0
 8012112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801211a:	2b00      	cmp	r3, #0
 801211c:	d132      	bne.n	8012184 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	3324      	adds	r3, #36	; 0x24
 8012122:	4618      	mov	r0, r3
 8012124:	f7ff fe8a 	bl	8011e3c <sum_sfn>
 8012128:	4603      	mov	r3, r0
 801212a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	69db      	ldr	r3, [r3, #28]
 8012130:	4619      	mov	r1, r3
 8012132:	69f8      	ldr	r0, [r7, #28]
 8012134:	f7fe ffd6 	bl	80110e4 <move_window>
 8012138:	4603      	mov	r3, r0
 801213a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801213e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012142:	2b00      	cmp	r3, #0
 8012144:	d11d      	bne.n	8012182 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012146:	69fb      	ldr	r3, [r7, #28]
 8012148:	68d8      	ldr	r0, [r3, #12]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6a19      	ldr	r1, [r3, #32]
 801214e:	6a3b      	ldr	r3, [r7, #32]
 8012150:	b2da      	uxtb	r2, r3
 8012152:	7efb      	ldrb	r3, [r7, #27]
 8012154:	f7ff fd7c 	bl	8011c50 <put_lfn>
				fs->wflag = 1;
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	2201      	movs	r2, #1
 801215c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801215e:	2100      	movs	r1, #0
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff fbba 	bl	80118da <dir_next>
 8012166:	4603      	mov	r3, r0
 8012168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801216c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012170:	2b00      	cmp	r3, #0
 8012172:	d107      	bne.n	8012184 <dir_register+0x184>
 8012174:	6a3b      	ldr	r3, [r7, #32]
 8012176:	3b01      	subs	r3, #1
 8012178:	623b      	str	r3, [r7, #32]
 801217a:	6a3b      	ldr	r3, [r7, #32]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d1d5      	bne.n	801212c <dir_register+0x12c>
 8012180:	e000      	b.n	8012184 <dir_register+0x184>
				if (res != FR_OK) break;
 8012182:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012188:	2b00      	cmp	r3, #0
 801218a:	d128      	bne.n	80121de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	69db      	ldr	r3, [r3, #28]
 8012190:	4619      	mov	r1, r3
 8012192:	69f8      	ldr	r0, [r7, #28]
 8012194:	f7fe ffa6 	bl	80110e4 <move_window>
 8012198:	4603      	mov	r3, r0
 801219a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801219e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d11b      	bne.n	80121de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6a1b      	ldr	r3, [r3, #32]
 80121aa:	2220      	movs	r2, #32
 80121ac:	2100      	movs	r1, #0
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fe fd8b 	bl	8010cca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a18      	ldr	r0, [r3, #32]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	3324      	adds	r3, #36	; 0x24
 80121bc:	220b      	movs	r2, #11
 80121be:	4619      	mov	r1, r3
 80121c0:	f7fe fd62 	bl	8010c88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6a1b      	ldr	r3, [r3, #32]
 80121ce:	330c      	adds	r3, #12
 80121d0:	f002 0218 	and.w	r2, r2, #24
 80121d4:	b2d2      	uxtb	r2, r2
 80121d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	2201      	movs	r2, #1
 80121dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80121de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3730      	adds	r7, #48	; 0x30
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	4ec4ec4f 	.word	0x4ec4ec4f

080121f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b08a      	sub	sp, #40	; 0x28
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	613b      	str	r3, [r7, #16]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	60fb      	str	r3, [r7, #12]
 8012208:	2300      	movs	r3, #0
 801220a:	617b      	str	r3, [r7, #20]
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	1c5a      	adds	r2, r3, #1
 8012214:	61ba      	str	r2, [r7, #24]
 8012216:	693a      	ldr	r2, [r7, #16]
 8012218:	4413      	add	r3, r2
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801221e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012220:	2b1f      	cmp	r3, #31
 8012222:	d940      	bls.n	80122a6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012226:	2b2f      	cmp	r3, #47	; 0x2f
 8012228:	d006      	beq.n	8012238 <create_name+0x48>
 801222a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801222c:	2b5c      	cmp	r3, #92	; 0x5c
 801222e:	d110      	bne.n	8012252 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012230:	e002      	b.n	8012238 <create_name+0x48>
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	3301      	adds	r3, #1
 8012236:	61bb      	str	r3, [r7, #24]
 8012238:	693a      	ldr	r2, [r7, #16]
 801223a:	69bb      	ldr	r3, [r7, #24]
 801223c:	4413      	add	r3, r2
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	2b2f      	cmp	r3, #47	; 0x2f
 8012242:	d0f6      	beq.n	8012232 <create_name+0x42>
 8012244:	693a      	ldr	r2, [r7, #16]
 8012246:	69bb      	ldr	r3, [r7, #24]
 8012248:	4413      	add	r3, r2
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	2b5c      	cmp	r3, #92	; 0x5c
 801224e:	d0f0      	beq.n	8012232 <create_name+0x42>
			break;
 8012250:	e02a      	b.n	80122a8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	2bfe      	cmp	r3, #254	; 0xfe
 8012256:	d901      	bls.n	801225c <create_name+0x6c>
 8012258:	2306      	movs	r3, #6
 801225a:	e17d      	b.n	8012558 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801225c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801225e:	b2db      	uxtb	r3, r3
 8012260:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012264:	2101      	movs	r1, #1
 8012266:	4618      	mov	r0, r3
 8012268:	f001 ffca 	bl	8014200 <ff_convert>
 801226c:	4603      	mov	r3, r0
 801226e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <create_name+0x8a>
 8012276:	2306      	movs	r3, #6
 8012278:	e16e      	b.n	8012558 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801227a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801227c:	2b7f      	cmp	r3, #127	; 0x7f
 801227e:	d809      	bhi.n	8012294 <create_name+0xa4>
 8012280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012282:	4619      	mov	r1, r3
 8012284:	488d      	ldr	r0, [pc, #564]	; (80124bc <create_name+0x2cc>)
 8012286:	f7fe fd62 	bl	8010d4e <chk_chr>
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d001      	beq.n	8012294 <create_name+0xa4>
 8012290:	2306      	movs	r3, #6
 8012292:	e161      	b.n	8012558 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	1c5a      	adds	r2, r3, #1
 8012298:	617a      	str	r2, [r7, #20]
 801229a:	005b      	lsls	r3, r3, #1
 801229c:	68fa      	ldr	r2, [r7, #12]
 801229e:	4413      	add	r3, r2
 80122a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80122a2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80122a4:	e7b4      	b.n	8012210 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80122a6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80122a8:	693a      	ldr	r2, [r7, #16]
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	441a      	add	r2, r3
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80122b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122b4:	2b1f      	cmp	r3, #31
 80122b6:	d801      	bhi.n	80122bc <create_name+0xcc>
 80122b8:	2304      	movs	r3, #4
 80122ba:	e000      	b.n	80122be <create_name+0xce>
 80122bc:	2300      	movs	r3, #0
 80122be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80122c2:	e011      	b.n	80122e8 <create_name+0xf8>
		w = lfn[di - 1];
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80122ca:	3b01      	subs	r3, #1
 80122cc:	005b      	lsls	r3, r3, #1
 80122ce:	68fa      	ldr	r2, [r7, #12]
 80122d0:	4413      	add	r3, r2
 80122d2:	881b      	ldrh	r3, [r3, #0]
 80122d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80122d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122d8:	2b20      	cmp	r3, #32
 80122da:	d002      	beq.n	80122e2 <create_name+0xf2>
 80122dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122de:	2b2e      	cmp	r3, #46	; 0x2e
 80122e0:	d106      	bne.n	80122f0 <create_name+0x100>
		di--;
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	3b01      	subs	r3, #1
 80122e6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d1ea      	bne.n	80122c4 <create_name+0xd4>
 80122ee:	e000      	b.n	80122f2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80122f0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	005b      	lsls	r3, r3, #1
 80122f6:	68fa      	ldr	r2, [r7, #12]
 80122f8:	4413      	add	r3, r2
 80122fa:	2200      	movs	r2, #0
 80122fc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d101      	bne.n	8012308 <create_name+0x118>
 8012304:	2306      	movs	r3, #6
 8012306:	e127      	b.n	8012558 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	3324      	adds	r3, #36	; 0x24
 801230c:	220b      	movs	r2, #11
 801230e:	2120      	movs	r1, #32
 8012310:	4618      	mov	r0, r3
 8012312:	f7fe fcda 	bl	8010cca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012316:	2300      	movs	r3, #0
 8012318:	61bb      	str	r3, [r7, #24]
 801231a:	e002      	b.n	8012322 <create_name+0x132>
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	3301      	adds	r3, #1
 8012320:	61bb      	str	r3, [r7, #24]
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	005b      	lsls	r3, r3, #1
 8012326:	68fa      	ldr	r2, [r7, #12]
 8012328:	4413      	add	r3, r2
 801232a:	881b      	ldrh	r3, [r3, #0]
 801232c:	2b20      	cmp	r3, #32
 801232e:	d0f5      	beq.n	801231c <create_name+0x12c>
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	005b      	lsls	r3, r3, #1
 8012334:	68fa      	ldr	r2, [r7, #12]
 8012336:	4413      	add	r3, r2
 8012338:	881b      	ldrh	r3, [r3, #0]
 801233a:	2b2e      	cmp	r3, #46	; 0x2e
 801233c:	d0ee      	beq.n	801231c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801233e:	69bb      	ldr	r3, [r7, #24]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d009      	beq.n	8012358 <create_name+0x168>
 8012344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012348:	f043 0303 	orr.w	r3, r3, #3
 801234c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012350:	e002      	b.n	8012358 <create_name+0x168>
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	3b01      	subs	r3, #1
 8012356:	617b      	str	r3, [r7, #20]
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d009      	beq.n	8012372 <create_name+0x182>
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012364:	3b01      	subs	r3, #1
 8012366:	005b      	lsls	r3, r3, #1
 8012368:	68fa      	ldr	r2, [r7, #12]
 801236a:	4413      	add	r3, r2
 801236c:	881b      	ldrh	r3, [r3, #0]
 801236e:	2b2e      	cmp	r3, #46	; 0x2e
 8012370:	d1ef      	bne.n	8012352 <create_name+0x162>

	i = b = 0; ni = 8;
 8012372:	2300      	movs	r3, #0
 8012374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012378:	2300      	movs	r3, #0
 801237a:	623b      	str	r3, [r7, #32]
 801237c:	2308      	movs	r3, #8
 801237e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012380:	69bb      	ldr	r3, [r7, #24]
 8012382:	1c5a      	adds	r2, r3, #1
 8012384:	61ba      	str	r2, [r7, #24]
 8012386:	005b      	lsls	r3, r3, #1
 8012388:	68fa      	ldr	r2, [r7, #12]
 801238a:	4413      	add	r3, r2
 801238c:	881b      	ldrh	r3, [r3, #0]
 801238e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012392:	2b00      	cmp	r3, #0
 8012394:	f000 8090 	beq.w	80124b8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801239a:	2b20      	cmp	r3, #32
 801239c:	d006      	beq.n	80123ac <create_name+0x1bc>
 801239e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123a0:	2b2e      	cmp	r3, #46	; 0x2e
 80123a2:	d10a      	bne.n	80123ba <create_name+0x1ca>
 80123a4:	69ba      	ldr	r2, [r7, #24]
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d006      	beq.n	80123ba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80123ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123b0:	f043 0303 	orr.w	r3, r3, #3
 80123b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123b8:	e07d      	b.n	80124b6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80123ba:	6a3a      	ldr	r2, [r7, #32]
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d203      	bcs.n	80123ca <create_name+0x1da>
 80123c2:	69ba      	ldr	r2, [r7, #24]
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d123      	bne.n	8012412 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	2b0b      	cmp	r3, #11
 80123ce:	d106      	bne.n	80123de <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80123d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123d4:	f043 0303 	orr.w	r3, r3, #3
 80123d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123dc:	e075      	b.n	80124ca <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80123de:	69ba      	ldr	r2, [r7, #24]
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d005      	beq.n	80123f2 <create_name+0x202>
 80123e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123ea:	f043 0303 	orr.w	r3, r3, #3
 80123ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80123f2:	69ba      	ldr	r2, [r7, #24]
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d866      	bhi.n	80124c8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	61bb      	str	r3, [r7, #24]
 80123fe:	2308      	movs	r3, #8
 8012400:	623b      	str	r3, [r7, #32]
 8012402:	230b      	movs	r3, #11
 8012404:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801240a:	009b      	lsls	r3, r3, #2
 801240c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012410:	e051      	b.n	80124b6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012414:	2b7f      	cmp	r3, #127	; 0x7f
 8012416:	d914      	bls.n	8012442 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801241a:	2100      	movs	r1, #0
 801241c:	4618      	mov	r0, r3
 801241e:	f001 feef 	bl	8014200 <ff_convert>
 8012422:	4603      	mov	r3, r0
 8012424:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012428:	2b00      	cmp	r3, #0
 801242a:	d004      	beq.n	8012436 <create_name+0x246>
 801242c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801242e:	3b80      	subs	r3, #128	; 0x80
 8012430:	4a23      	ldr	r2, [pc, #140]	; (80124c0 <create_name+0x2d0>)
 8012432:	5cd3      	ldrb	r3, [r2, r3]
 8012434:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801243a:	f043 0302 	orr.w	r3, r3, #2
 801243e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012444:	2b00      	cmp	r3, #0
 8012446:	d007      	beq.n	8012458 <create_name+0x268>
 8012448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801244a:	4619      	mov	r1, r3
 801244c:	481d      	ldr	r0, [pc, #116]	; (80124c4 <create_name+0x2d4>)
 801244e:	f7fe fc7e 	bl	8010d4e <chk_chr>
 8012452:	4603      	mov	r3, r0
 8012454:	2b00      	cmp	r3, #0
 8012456:	d008      	beq.n	801246a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012458:	235f      	movs	r3, #95	; 0x5f
 801245a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801245c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012460:	f043 0303 	orr.w	r3, r3, #3
 8012464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012468:	e01b      	b.n	80124a2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801246a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801246c:	2b40      	cmp	r3, #64	; 0x40
 801246e:	d909      	bls.n	8012484 <create_name+0x294>
 8012470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012472:	2b5a      	cmp	r3, #90	; 0x5a
 8012474:	d806      	bhi.n	8012484 <create_name+0x294>
					b |= 2;
 8012476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801247a:	f043 0302 	orr.w	r3, r3, #2
 801247e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012482:	e00e      	b.n	80124a2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012486:	2b60      	cmp	r3, #96	; 0x60
 8012488:	d90b      	bls.n	80124a2 <create_name+0x2b2>
 801248a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801248c:	2b7a      	cmp	r3, #122	; 0x7a
 801248e:	d808      	bhi.n	80124a2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012490:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012494:	f043 0301 	orr.w	r3, r3, #1
 8012498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801249c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801249e:	3b20      	subs	r3, #32
 80124a0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80124a2:	6a3b      	ldr	r3, [r7, #32]
 80124a4:	1c5a      	adds	r2, r3, #1
 80124a6:	623a      	str	r2, [r7, #32]
 80124a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80124aa:	b2d1      	uxtb	r1, r2
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	4413      	add	r3, r2
 80124b0:	460a      	mov	r2, r1
 80124b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80124b6:	e763      	b.n	8012380 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80124b8:	bf00      	nop
 80124ba:	e006      	b.n	80124ca <create_name+0x2da>
 80124bc:	0801714c 	.word	0x0801714c
 80124c0:	080175e4 	.word	0x080175e4
 80124c4:	08017158 	.word	0x08017158
			if (si > di) break;			/* No extension */
 80124c8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80124d0:	2be5      	cmp	r3, #229	; 0xe5
 80124d2:	d103      	bne.n	80124dc <create_name+0x2ec>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2205      	movs	r2, #5
 80124d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	2b08      	cmp	r3, #8
 80124e0:	d104      	bne.n	80124ec <create_name+0x2fc>
 80124e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80124e6:	009b      	lsls	r3, r3, #2
 80124e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80124ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80124f0:	f003 030c 	and.w	r3, r3, #12
 80124f4:	2b0c      	cmp	r3, #12
 80124f6:	d005      	beq.n	8012504 <create_name+0x314>
 80124f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80124fc:	f003 0303 	and.w	r3, r3, #3
 8012500:	2b03      	cmp	r3, #3
 8012502:	d105      	bne.n	8012510 <create_name+0x320>
 8012504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012508:	f043 0302 	orr.w	r3, r3, #2
 801250c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012514:	f003 0302 	and.w	r3, r3, #2
 8012518:	2b00      	cmp	r3, #0
 801251a:	d117      	bne.n	801254c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801251c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012520:	f003 0303 	and.w	r3, r3, #3
 8012524:	2b01      	cmp	r3, #1
 8012526:	d105      	bne.n	8012534 <create_name+0x344>
 8012528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801252c:	f043 0310 	orr.w	r3, r3, #16
 8012530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012538:	f003 030c 	and.w	r3, r3, #12
 801253c:	2b04      	cmp	r3, #4
 801253e:	d105      	bne.n	801254c <create_name+0x35c>
 8012540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012544:	f043 0308 	orr.w	r3, r3, #8
 8012548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012552:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8012556:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012558:	4618      	mov	r0, r3
 801255a:	3728      	adds	r7, #40	; 0x28
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}

08012560 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b086      	sub	sp, #24
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012574:	e002      	b.n	801257c <follow_path+0x1c>
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	3301      	adds	r3, #1
 801257a:	603b      	str	r3, [r7, #0]
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	2b2f      	cmp	r3, #47	; 0x2f
 8012582:	d0f8      	beq.n	8012576 <follow_path+0x16>
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	2b5c      	cmp	r3, #92	; 0x5c
 801258a:	d0f4      	beq.n	8012576 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	2200      	movs	r2, #0
 8012590:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	2b1f      	cmp	r3, #31
 8012598:	d80a      	bhi.n	80125b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2280      	movs	r2, #128	; 0x80
 801259e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80125a2:	2100      	movs	r1, #0
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff f91d 	bl	80117e4 <dir_sdi>
 80125aa:	4603      	mov	r3, r0
 80125ac:	75fb      	strb	r3, [r7, #23]
 80125ae:	e043      	b.n	8012638 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80125b0:	463b      	mov	r3, r7
 80125b2:	4619      	mov	r1, r3
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f7ff fe1b 	bl	80121f0 <create_name>
 80125ba:	4603      	mov	r3, r0
 80125bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80125be:	7dfb      	ldrb	r3, [r7, #23]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d134      	bne.n	801262e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f7ff fc5a 	bl	8011e7e <dir_find>
 80125ca:	4603      	mov	r3, r0
 80125cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80125d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80125d6:	7dfb      	ldrb	r3, [r7, #23]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00a      	beq.n	80125f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80125dc:	7dfb      	ldrb	r3, [r7, #23]
 80125de:	2b04      	cmp	r3, #4
 80125e0:	d127      	bne.n	8012632 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80125e2:	7afb      	ldrb	r3, [r7, #11]
 80125e4:	f003 0304 	and.w	r3, r3, #4
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d122      	bne.n	8012632 <follow_path+0xd2>
 80125ec:	2305      	movs	r3, #5
 80125ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80125f0:	e01f      	b.n	8012632 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80125f2:	7afb      	ldrb	r3, [r7, #11]
 80125f4:	f003 0304 	and.w	r3, r3, #4
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d11c      	bne.n	8012636 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	799b      	ldrb	r3, [r3, #6]
 8012600:	f003 0310 	and.w	r3, r3, #16
 8012604:	2b00      	cmp	r3, #0
 8012606:	d102      	bne.n	801260e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012608:	2305      	movs	r3, #5
 801260a:	75fb      	strb	r3, [r7, #23]
 801260c:	e014      	b.n	8012638 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	695b      	ldr	r3, [r3, #20]
 8012618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801261c:	4413      	add	r3, r2
 801261e:	4619      	mov	r1, r3
 8012620:	68f8      	ldr	r0, [r7, #12]
 8012622:	f7ff fa66 	bl	8011af2 <ld_clust>
 8012626:	4602      	mov	r2, r0
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801262c:	e7c0      	b.n	80125b0 <follow_path+0x50>
			if (res != FR_OK) break;
 801262e:	bf00      	nop
 8012630:	e002      	b.n	8012638 <follow_path+0xd8>
				break;
 8012632:	bf00      	nop
 8012634:	e000      	b.n	8012638 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012636:	bf00      	nop
			}
		}
	}

	return res;
 8012638:	7dfb      	ldrb	r3, [r7, #23]
}
 801263a:	4618      	mov	r0, r3
 801263c:	3718      	adds	r7, #24
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012642:	b480      	push	{r7}
 8012644:	b087      	sub	sp, #28
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801264a:	f04f 33ff 	mov.w	r3, #4294967295
 801264e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d031      	beq.n	80126bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	617b      	str	r3, [r7, #20]
 801265e:	e002      	b.n	8012666 <get_ldnumber+0x24>
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	3301      	adds	r3, #1
 8012664:	617b      	str	r3, [r7, #20]
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	2b1f      	cmp	r3, #31
 801266c:	d903      	bls.n	8012676 <get_ldnumber+0x34>
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	2b3a      	cmp	r3, #58	; 0x3a
 8012674:	d1f4      	bne.n	8012660 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	2b3a      	cmp	r3, #58	; 0x3a
 801267c:	d11c      	bne.n	80126b8 <get_ldnumber+0x76>
			tp = *path;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	1c5a      	adds	r2, r3, #1
 8012688:	60fa      	str	r2, [r7, #12]
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	3b30      	subs	r3, #48	; 0x30
 801268e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	2b09      	cmp	r3, #9
 8012694:	d80e      	bhi.n	80126b4 <get_ldnumber+0x72>
 8012696:	68fa      	ldr	r2, [r7, #12]
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	429a      	cmp	r2, r3
 801269c:	d10a      	bne.n	80126b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d107      	bne.n	80126b4 <get_ldnumber+0x72>
					vol = (int)i;
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	3301      	adds	r3, #1
 80126ac:	617b      	str	r3, [r7, #20]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	697a      	ldr	r2, [r7, #20]
 80126b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	e002      	b.n	80126be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80126b8:	2300      	movs	r3, #0
 80126ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80126bc:	693b      	ldr	r3, [r7, #16]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	371c      	adds	r7, #28
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr
	...

080126cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2200      	movs	r2, #0
 80126da:	70da      	strb	r2, [r3, #3]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f04f 32ff 	mov.w	r2, #4294967295
 80126e2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80126e4:	6839      	ldr	r1, [r7, #0]
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f7fe fcfc 	bl	80110e4 <move_window>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d001      	beq.n	80126f6 <check_fs+0x2a>
 80126f2:	2304      	movs	r3, #4
 80126f4:	e038      	b.n	8012768 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	3334      	adds	r3, #52	; 0x34
 80126fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80126fe:	4618      	mov	r0, r3
 8012700:	f7fe fa40 	bl	8010b84 <ld_word>
 8012704:	4603      	mov	r3, r0
 8012706:	461a      	mov	r2, r3
 8012708:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801270c:	429a      	cmp	r2, r3
 801270e:	d001      	beq.n	8012714 <check_fs+0x48>
 8012710:	2303      	movs	r3, #3
 8012712:	e029      	b.n	8012768 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801271a:	2be9      	cmp	r3, #233	; 0xe9
 801271c:	d009      	beq.n	8012732 <check_fs+0x66>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012724:	2beb      	cmp	r3, #235	; 0xeb
 8012726:	d11e      	bne.n	8012766 <check_fs+0x9a>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801272e:	2b90      	cmp	r3, #144	; 0x90
 8012730:	d119      	bne.n	8012766 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	3334      	adds	r3, #52	; 0x34
 8012736:	3336      	adds	r3, #54	; 0x36
 8012738:	4618      	mov	r0, r3
 801273a:	f7fe fa3b 	bl	8010bb4 <ld_dword>
 801273e:	4603      	mov	r3, r0
 8012740:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012744:	4a0a      	ldr	r2, [pc, #40]	; (8012770 <check_fs+0xa4>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d101      	bne.n	801274e <check_fs+0x82>
 801274a:	2300      	movs	r3, #0
 801274c:	e00c      	b.n	8012768 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	3334      	adds	r3, #52	; 0x34
 8012752:	3352      	adds	r3, #82	; 0x52
 8012754:	4618      	mov	r0, r3
 8012756:	f7fe fa2d 	bl	8010bb4 <ld_dword>
 801275a:	4603      	mov	r3, r0
 801275c:	4a05      	ldr	r2, [pc, #20]	; (8012774 <check_fs+0xa8>)
 801275e:	4293      	cmp	r3, r2
 8012760:	d101      	bne.n	8012766 <check_fs+0x9a>
 8012762:	2300      	movs	r3, #0
 8012764:	e000      	b.n	8012768 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012766:	2302      	movs	r3, #2
}
 8012768:	4618      	mov	r0, r3
 801276a:	3708      	adds	r7, #8
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}
 8012770:	00544146 	.word	0x00544146
 8012774:	33544146 	.word	0x33544146

08012778 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b096      	sub	sp, #88	; 0x58
 801277c:	af00      	add	r7, sp, #0
 801277e:	60f8      	str	r0, [r7, #12]
 8012780:	60b9      	str	r1, [r7, #8]
 8012782:	4613      	mov	r3, r2
 8012784:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	2200      	movs	r2, #0
 801278a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801278c:	68f8      	ldr	r0, [r7, #12]
 801278e:	f7ff ff58 	bl	8012642 <get_ldnumber>
 8012792:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012796:	2b00      	cmp	r3, #0
 8012798:	da01      	bge.n	801279e <find_volume+0x26>
 801279a:	230b      	movs	r3, #11
 801279c:	e22d      	b.n	8012bfa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801279e:	4aa1      	ldr	r2, [pc, #644]	; (8012a24 <find_volume+0x2ac>)
 80127a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80127a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d101      	bne.n	80127b2 <find_volume+0x3a>
 80127ae:	230c      	movs	r3, #12
 80127b0:	e223      	b.n	8012bfa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80127b8:	79fb      	ldrb	r3, [r7, #7]
 80127ba:	f023 0301 	bic.w	r3, r3, #1
 80127be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80127c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d01a      	beq.n	80127fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80127c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ca:	785b      	ldrb	r3, [r3, #1]
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fe f93b 	bl	8010a48 <disk_status>
 80127d2:	4603      	mov	r3, r0
 80127d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80127d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127dc:	f003 0301 	and.w	r3, r3, #1
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d10c      	bne.n	80127fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80127e4:	79fb      	ldrb	r3, [r7, #7]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d007      	beq.n	80127fa <find_volume+0x82>
 80127ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127ee:	f003 0304 	and.w	r3, r3, #4
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d001      	beq.n	80127fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80127f6:	230a      	movs	r3, #10
 80127f8:	e1ff      	b.n	8012bfa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80127fa:	2300      	movs	r3, #0
 80127fc:	e1fd      	b.n	8012bfa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80127fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012800:	2200      	movs	r2, #0
 8012802:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012806:	b2da      	uxtb	r2, r3
 8012808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801280a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801280e:	785b      	ldrb	r3, [r3, #1]
 8012810:	4618      	mov	r0, r3
 8012812:	f7fe f933 	bl	8010a7c <disk_initialize>
 8012816:	4603      	mov	r3, r0
 8012818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801281c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012820:	f003 0301 	and.w	r3, r3, #1
 8012824:	2b00      	cmp	r3, #0
 8012826:	d001      	beq.n	801282c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012828:	2303      	movs	r3, #3
 801282a:	e1e6      	b.n	8012bfa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801282c:	79fb      	ldrb	r3, [r7, #7]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d007      	beq.n	8012842 <find_volume+0xca>
 8012832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012836:	f003 0304 	and.w	r3, r3, #4
 801283a:	2b00      	cmp	r3, #0
 801283c:	d001      	beq.n	8012842 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801283e:	230a      	movs	r3, #10
 8012840:	e1db      	b.n	8012bfa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012842:	2300      	movs	r3, #0
 8012844:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012846:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801284a:	f7ff ff3f 	bl	80126cc <check_fs>
 801284e:	4603      	mov	r3, r0
 8012850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012858:	2b02      	cmp	r3, #2
 801285a:	d149      	bne.n	80128f0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801285c:	2300      	movs	r3, #0
 801285e:	643b      	str	r3, [r7, #64]	; 0x40
 8012860:	e01e      	b.n	80128a0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012864:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801286a:	011b      	lsls	r3, r3, #4
 801286c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012870:	4413      	add	r3, r2
 8012872:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012876:	3304      	adds	r3, #4
 8012878:	781b      	ldrb	r3, [r3, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d006      	beq.n	801288c <find_volume+0x114>
 801287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012880:	3308      	adds	r3, #8
 8012882:	4618      	mov	r0, r3
 8012884:	f7fe f996 	bl	8010bb4 <ld_dword>
 8012888:	4602      	mov	r2, r0
 801288a:	e000      	b.n	801288e <find_volume+0x116>
 801288c:	2200      	movs	r2, #0
 801288e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	3358      	adds	r3, #88	; 0x58
 8012894:	443b      	add	r3, r7
 8012896:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801289a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801289c:	3301      	adds	r3, #1
 801289e:	643b      	str	r3, [r7, #64]	; 0x40
 80128a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128a2:	2b03      	cmp	r3, #3
 80128a4:	d9dd      	bls.n	8012862 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80128a6:	2300      	movs	r3, #0
 80128a8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80128aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d002      	beq.n	80128b6 <find_volume+0x13e>
 80128b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128b2:	3b01      	subs	r3, #1
 80128b4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80128b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	3358      	adds	r3, #88	; 0x58
 80128bc:	443b      	add	r3, r7
 80128be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80128c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80128c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d005      	beq.n	80128d6 <find_volume+0x15e>
 80128ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80128cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128ce:	f7ff fefd 	bl	80126cc <check_fs>
 80128d2:	4603      	mov	r3, r0
 80128d4:	e000      	b.n	80128d8 <find_volume+0x160>
 80128d6:	2303      	movs	r3, #3
 80128d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80128dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	d905      	bls.n	80128f0 <find_volume+0x178>
 80128e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128e6:	3301      	adds	r3, #1
 80128e8:	643b      	str	r3, [r7, #64]	; 0x40
 80128ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128ec:	2b03      	cmp	r3, #3
 80128ee:	d9e2      	bls.n	80128b6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80128f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128f4:	2b04      	cmp	r3, #4
 80128f6:	d101      	bne.n	80128fc <find_volume+0x184>
 80128f8:	2301      	movs	r3, #1
 80128fa:	e17e      	b.n	8012bfa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80128fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012900:	2b01      	cmp	r3, #1
 8012902:	d901      	bls.n	8012908 <find_volume+0x190>
 8012904:	230d      	movs	r3, #13
 8012906:	e178      	b.n	8012bfa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290a:	3334      	adds	r3, #52	; 0x34
 801290c:	330b      	adds	r3, #11
 801290e:	4618      	mov	r0, r3
 8012910:	f7fe f938 	bl	8010b84 <ld_word>
 8012914:	4603      	mov	r3, r0
 8012916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801291a:	d001      	beq.n	8012920 <find_volume+0x1a8>
 801291c:	230d      	movs	r3, #13
 801291e:	e16c      	b.n	8012bfa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012922:	3334      	adds	r3, #52	; 0x34
 8012924:	3316      	adds	r3, #22
 8012926:	4618      	mov	r0, r3
 8012928:	f7fe f92c 	bl	8010b84 <ld_word>
 801292c:	4603      	mov	r3, r0
 801292e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012932:	2b00      	cmp	r3, #0
 8012934:	d106      	bne.n	8012944 <find_volume+0x1cc>
 8012936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012938:	3334      	adds	r3, #52	; 0x34
 801293a:	3324      	adds	r3, #36	; 0x24
 801293c:	4618      	mov	r0, r3
 801293e:	f7fe f939 	bl	8010bb4 <ld_dword>
 8012942:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012948:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012952:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012956:	789b      	ldrb	r3, [r3, #2]
 8012958:	2b01      	cmp	r3, #1
 801295a:	d005      	beq.n	8012968 <find_volume+0x1f0>
 801295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295e:	789b      	ldrb	r3, [r3, #2]
 8012960:	2b02      	cmp	r3, #2
 8012962:	d001      	beq.n	8012968 <find_volume+0x1f0>
 8012964:	230d      	movs	r3, #13
 8012966:	e148      	b.n	8012bfa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801296a:	789b      	ldrb	r3, [r3, #2]
 801296c:	461a      	mov	r2, r3
 801296e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012970:	fb02 f303 	mul.w	r3, r2, r3
 8012974:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801297c:	b29a      	uxth	r2, r3
 801297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012980:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012984:	895b      	ldrh	r3, [r3, #10]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d008      	beq.n	801299c <find_volume+0x224>
 801298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298c:	895b      	ldrh	r3, [r3, #10]
 801298e:	461a      	mov	r2, r3
 8012990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012992:	895b      	ldrh	r3, [r3, #10]
 8012994:	3b01      	subs	r3, #1
 8012996:	4013      	ands	r3, r2
 8012998:	2b00      	cmp	r3, #0
 801299a:	d001      	beq.n	80129a0 <find_volume+0x228>
 801299c:	230d      	movs	r3, #13
 801299e:	e12c      	b.n	8012bfa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80129a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a2:	3334      	adds	r3, #52	; 0x34
 80129a4:	3311      	adds	r3, #17
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7fe f8ec 	bl	8010b84 <ld_word>
 80129ac:	4603      	mov	r3, r0
 80129ae:	461a      	mov	r2, r3
 80129b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80129b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b6:	891b      	ldrh	r3, [r3, #8]
 80129b8:	f003 030f 	and.w	r3, r3, #15
 80129bc:	b29b      	uxth	r3, r3
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d001      	beq.n	80129c6 <find_volume+0x24e>
 80129c2:	230d      	movs	r3, #13
 80129c4:	e119      	b.n	8012bfa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80129c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c8:	3334      	adds	r3, #52	; 0x34
 80129ca:	3313      	adds	r3, #19
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7fe f8d9 	bl	8010b84 <ld_word>
 80129d2:	4603      	mov	r3, r0
 80129d4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80129d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d106      	bne.n	80129ea <find_volume+0x272>
 80129dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129de:	3334      	adds	r3, #52	; 0x34
 80129e0:	3320      	adds	r3, #32
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7fe f8e6 	bl	8010bb4 <ld_dword>
 80129e8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80129ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ec:	3334      	adds	r3, #52	; 0x34
 80129ee:	330e      	adds	r3, #14
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7fe f8c7 	bl	8010b84 <ld_word>
 80129f6:	4603      	mov	r3, r0
 80129f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80129fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d101      	bne.n	8012a04 <find_volume+0x28c>
 8012a00:	230d      	movs	r3, #13
 8012a02:	e0fa      	b.n	8012bfa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012a04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a08:	4413      	add	r3, r2
 8012a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a0c:	8912      	ldrh	r2, [r2, #8]
 8012a0e:	0912      	lsrs	r2, r2, #4
 8012a10:	b292      	uxth	r2, r2
 8012a12:	4413      	add	r3, r2
 8012a14:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d204      	bcs.n	8012a28 <find_volume+0x2b0>
 8012a1e:	230d      	movs	r3, #13
 8012a20:	e0eb      	b.n	8012bfa <find_volume+0x482>
 8012a22:	bf00      	nop
 8012a24:	20001704 	.word	0x20001704
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2c:	1ad3      	subs	r3, r2, r3
 8012a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a30:	8952      	ldrh	r2, [r2, #10]
 8012a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a36:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d101      	bne.n	8012a42 <find_volume+0x2ca>
 8012a3e:	230d      	movs	r3, #13
 8012a40:	e0db      	b.n	8012bfa <find_volume+0x482>
		fmt = FS_FAT32;
 8012a42:	2303      	movs	r3, #3
 8012a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012a4e:	4293      	cmp	r3, r2
 8012a50:	d802      	bhi.n	8012a58 <find_volume+0x2e0>
 8012a52:	2302      	movs	r3, #2
 8012a54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d802      	bhi.n	8012a68 <find_volume+0x2f0>
 8012a62:	2301      	movs	r3, #1
 8012a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a6a:	1c9a      	adds	r2, r3, #2
 8012a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a6e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a74:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012a76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a7a:	441a      	add	r2, r3
 8012a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a7e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012a80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a84:	441a      	add	r2, r3
 8012a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a88:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012a8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a8e:	2b03      	cmp	r3, #3
 8012a90:	d11e      	bne.n	8012ad0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a94:	3334      	adds	r3, #52	; 0x34
 8012a96:	332a      	adds	r3, #42	; 0x2a
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fe f873 	bl	8010b84 <ld_word>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d001      	beq.n	8012aa8 <find_volume+0x330>
 8012aa4:	230d      	movs	r3, #13
 8012aa6:	e0a8      	b.n	8012bfa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aaa:	891b      	ldrh	r3, [r3, #8]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d001      	beq.n	8012ab4 <find_volume+0x33c>
 8012ab0:	230d      	movs	r3, #13
 8012ab2:	e0a2      	b.n	8012bfa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab6:	3334      	adds	r3, #52	; 0x34
 8012ab8:	332c      	adds	r3, #44	; 0x2c
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7fe f87a 	bl	8010bb4 <ld_dword>
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac8:	699b      	ldr	r3, [r3, #24]
 8012aca:	009b      	lsls	r3, r3, #2
 8012acc:	647b      	str	r3, [r7, #68]	; 0x44
 8012ace:	e01f      	b.n	8012b10 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad2:	891b      	ldrh	r3, [r3, #8]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d101      	bne.n	8012adc <find_volume+0x364>
 8012ad8:	230d      	movs	r3, #13
 8012ada:	e08e      	b.n	8012bfa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ae2:	441a      	add	r2, r3
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012aec:	2b02      	cmp	r3, #2
 8012aee:	d103      	bne.n	8012af8 <find_volume+0x380>
 8012af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af2:	699b      	ldr	r3, [r3, #24]
 8012af4:	005b      	lsls	r3, r3, #1
 8012af6:	e00a      	b.n	8012b0e <find_volume+0x396>
 8012af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afa:	699a      	ldr	r2, [r3, #24]
 8012afc:	4613      	mov	r3, r2
 8012afe:	005b      	lsls	r3, r3, #1
 8012b00:	4413      	add	r3, r2
 8012b02:	085a      	lsrs	r2, r3, #1
 8012b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b06:	699b      	ldr	r3, [r3, #24]
 8012b08:	f003 0301 	and.w	r3, r3, #1
 8012b0c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012b0e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b12:	69da      	ldr	r2, [r3, #28]
 8012b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012b1a:	0a5b      	lsrs	r3, r3, #9
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d201      	bcs.n	8012b24 <find_volume+0x3ac>
 8012b20:	230d      	movs	r3, #13
 8012b22:	e06a      	b.n	8012bfa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b26:	f04f 32ff 	mov.w	r2, #4294967295
 8012b2a:	615a      	str	r2, [r3, #20]
 8012b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2e:	695a      	ldr	r2, [r3, #20]
 8012b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b32:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b36:	2280      	movs	r2, #128	; 0x80
 8012b38:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b3e:	2b03      	cmp	r3, #3
 8012b40:	d149      	bne.n	8012bd6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b44:	3334      	adds	r3, #52	; 0x34
 8012b46:	3330      	adds	r3, #48	; 0x30
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7fe f81b 	bl	8010b84 <ld_word>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d140      	bne.n	8012bd6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b56:	3301      	adds	r3, #1
 8012b58:	4619      	mov	r1, r3
 8012b5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b5c:	f7fe fac2 	bl	80110e4 <move_window>
 8012b60:	4603      	mov	r3, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d137      	bne.n	8012bd6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b68:	2200      	movs	r2, #0
 8012b6a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6e:	3334      	adds	r3, #52	; 0x34
 8012b70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fe f805 	bl	8010b84 <ld_word>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d127      	bne.n	8012bd6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b88:	3334      	adds	r3, #52	; 0x34
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7fe f812 	bl	8010bb4 <ld_dword>
 8012b90:	4603      	mov	r3, r0
 8012b92:	4a1c      	ldr	r2, [pc, #112]	; (8012c04 <find_volume+0x48c>)
 8012b94:	4293      	cmp	r3, r2
 8012b96:	d11e      	bne.n	8012bd6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9a:	3334      	adds	r3, #52	; 0x34
 8012b9c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7fe f807 	bl	8010bb4 <ld_dword>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	4a17      	ldr	r2, [pc, #92]	; (8012c08 <find_volume+0x490>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d113      	bne.n	8012bd6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb0:	3334      	adds	r3, #52	; 0x34
 8012bb2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fd fffc 	bl	8010bb4 <ld_dword>
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc4:	3334      	adds	r3, #52	; 0x34
 8012bc6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7fd fff2 	bl	8010bb4 <ld_dword>
 8012bd0:	4602      	mov	r2, r0
 8012bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012bdc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012bde:	4b0b      	ldr	r3, [pc, #44]	; (8012c0c <find_volume+0x494>)
 8012be0:	881b      	ldrh	r3, [r3, #0]
 8012be2:	3301      	adds	r3, #1
 8012be4:	b29a      	uxth	r2, r3
 8012be6:	4b09      	ldr	r3, [pc, #36]	; (8012c0c <find_volume+0x494>)
 8012be8:	801a      	strh	r2, [r3, #0]
 8012bea:	4b08      	ldr	r3, [pc, #32]	; (8012c0c <find_volume+0x494>)
 8012bec:	881a      	ldrh	r2, [r3, #0]
 8012bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012bf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012bf4:	f7fe fa0e 	bl	8011014 <clear_lock>
#endif
	return FR_OK;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3758      	adds	r7, #88	; 0x58
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	41615252 	.word	0x41615252
 8012c08:	61417272 	.word	0x61417272
 8012c0c:	20001708 	.word	0x20001708

08012c10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012c1a:	2309      	movs	r3, #9
 8012c1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d01c      	beq.n	8012c5e <validate+0x4e>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d018      	beq.n	8012c5e <validate+0x4e>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d013      	beq.n	8012c5e <validate+0x4e>
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	889a      	ldrh	r2, [r3, #4]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	88db      	ldrh	r3, [r3, #6]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d10c      	bne.n	8012c5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	785b      	ldrb	r3, [r3, #1]
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7fd fefc 	bl	8010a48 <disk_status>
 8012c50:	4603      	mov	r3, r0
 8012c52:	f003 0301 	and.w	r3, r3, #1
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d101      	bne.n	8012c5e <validate+0x4e>
			res = FR_OK;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012c5e:	7bfb      	ldrb	r3, [r7, #15]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d102      	bne.n	8012c6a <validate+0x5a>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	e000      	b.n	8012c6c <validate+0x5c>
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	683a      	ldr	r2, [r7, #0]
 8012c6e:	6013      	str	r3, [r2, #0]
	return res;
 8012c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3710      	adds	r7, #16
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
	...

08012c7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b088      	sub	sp, #32
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	60b9      	str	r1, [r7, #8]
 8012c86:	4613      	mov	r3, r2
 8012c88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012c8e:	f107 0310 	add.w	r3, r7, #16
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7ff fcd5 	bl	8012642 <get_ldnumber>
 8012c98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c9a:	69fb      	ldr	r3, [r7, #28]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	da01      	bge.n	8012ca4 <f_mount+0x28>
 8012ca0:	230b      	movs	r3, #11
 8012ca2:	e02b      	b.n	8012cfc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012ca4:	4a17      	ldr	r2, [pc, #92]	; (8012d04 <f_mount+0x88>)
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012cae:	69bb      	ldr	r3, [r7, #24]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d005      	beq.n	8012cc0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012cb4:	69b8      	ldr	r0, [r7, #24]
 8012cb6:	f7fe f9ad 	bl	8011014 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d002      	beq.n	8012ccc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	490d      	ldr	r1, [pc, #52]	; (8012d04 <f_mount+0x88>)
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d002      	beq.n	8012ce2 <f_mount+0x66>
 8012cdc:	79fb      	ldrb	r3, [r7, #7]
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	d001      	beq.n	8012ce6 <f_mount+0x6a>
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	e00a      	b.n	8012cfc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012ce6:	f107 010c 	add.w	r1, r7, #12
 8012cea:	f107 0308 	add.w	r3, r7, #8
 8012cee:	2200      	movs	r2, #0
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7ff fd41 	bl	8012778 <find_volume>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3720      	adds	r7, #32
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	20001704 	.word	0x20001704

08012d08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b09a      	sub	sp, #104	; 0x68
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	60f8      	str	r0, [r7, #12]
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	4613      	mov	r3, r2
 8012d14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d101      	bne.n	8012d20 <f_open+0x18>
 8012d1c:	2309      	movs	r3, #9
 8012d1e:	e1bd      	b.n	801309c <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012d20:	79fb      	ldrb	r3, [r7, #7]
 8012d22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012d28:	79fa      	ldrb	r2, [r7, #7]
 8012d2a:	f107 0110 	add.w	r1, r7, #16
 8012d2e:	f107 0308 	add.w	r3, r7, #8
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7ff fd20 	bl	8012778 <find_volume>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8012d3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	f040 81a1 	bne.w	801308a <f_open+0x382>
		dj.obj.fs = fs;
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8012d4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012d50:	f001 fb1c 	bl	801438c <ff_memalloc>
 8012d54:	65b8      	str	r0, [r7, #88]	; 0x58
 8012d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d101      	bne.n	8012d60 <f_open+0x58>
 8012d5c:	2311      	movs	r3, #17
 8012d5e:	e19d      	b.n	801309c <f_open+0x394>
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d64:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8012d66:	68ba      	ldr	r2, [r7, #8]
 8012d68:	f107 0314 	add.w	r3, r7, #20
 8012d6c:	4611      	mov	r1, r2
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7ff fbf6 	bl	8012560 <follow_path>
 8012d74:	4603      	mov	r3, r0
 8012d76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d11a      	bne.n	8012db8 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012d82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012d86:	b25b      	sxtb	r3, r3
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	da03      	bge.n	8012d94 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8012d8c:	2306      	movs	r3, #6
 8012d8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012d92:	e011      	b.n	8012db8 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012d94:	79fb      	ldrb	r3, [r7, #7]
 8012d96:	f023 0301 	bic.w	r3, r3, #1
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	bf14      	ite	ne
 8012d9e:	2301      	movne	r3, #1
 8012da0:	2300      	moveq	r3, #0
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	461a      	mov	r2, r3
 8012da6:	f107 0314 	add.w	r3, r7, #20
 8012daa:	4611      	mov	r1, r2
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7fd ffe9 	bl	8010d84 <chk_lock>
 8012db2:	4603      	mov	r3, r0
 8012db4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012db8:	79fb      	ldrb	r3, [r7, #7]
 8012dba:	f003 031c 	and.w	r3, r3, #28
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d07f      	beq.n	8012ec2 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8012dc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d017      	beq.n	8012dfa <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012dca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012dce:	2b04      	cmp	r3, #4
 8012dd0:	d10e      	bne.n	8012df0 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012dd2:	f7fe f833 	bl	8010e3c <enq_lock>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d006      	beq.n	8012dea <f_open+0xe2>
 8012ddc:	f107 0314 	add.w	r3, r7, #20
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7ff f90d 	bl	8012000 <dir_register>
 8012de6:	4603      	mov	r3, r0
 8012de8:	e000      	b.n	8012dec <f_open+0xe4>
 8012dea:	2312      	movs	r3, #18
 8012dec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012df0:	79fb      	ldrb	r3, [r7, #7]
 8012df2:	f043 0308 	orr.w	r3, r3, #8
 8012df6:	71fb      	strb	r3, [r7, #7]
 8012df8:	e010      	b.n	8012e1c <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012dfa:	7ebb      	ldrb	r3, [r7, #26]
 8012dfc:	f003 0311 	and.w	r3, r3, #17
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d003      	beq.n	8012e0c <f_open+0x104>
					res = FR_DENIED;
 8012e04:	2307      	movs	r3, #7
 8012e06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012e0a:	e007      	b.n	8012e1c <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012e0c:	79fb      	ldrb	r3, [r7, #7]
 8012e0e:	f003 0304 	and.w	r3, r3, #4
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d002      	beq.n	8012e1c <f_open+0x114>
 8012e16:	2308      	movs	r3, #8
 8012e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012e1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d168      	bne.n	8012ef6 <f_open+0x1ee>
 8012e24:	79fb      	ldrb	r3, [r7, #7]
 8012e26:	f003 0308 	and.w	r3, r3, #8
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d063      	beq.n	8012ef6 <f_open+0x1ee>
				dw = GET_FATTIME();
 8012e2e:	f7fb ff13 	bl	800ec58 <get_fattime>
 8012e32:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e36:	330e      	adds	r3, #14
 8012e38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fd fef8 	bl	8010c30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e42:	3316      	adds	r3, #22
 8012e44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7fd fef2 	bl	8010c30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e4e:	330b      	adds	r3, #11
 8012e50:	2220      	movs	r2, #32
 8012e52:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e58:	4611      	mov	r1, r2
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fe fe49 	bl	8011af2 <ld_clust>
 8012e60:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012e66:	2200      	movs	r2, #0
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7fe fe61 	bl	8011b30 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e70:	331c      	adds	r3, #28
 8012e72:	2100      	movs	r1, #0
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7fd fedb 	bl	8010c30 <st_dword>
					fs->wflag = 1;
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d037      	beq.n	8012ef6 <f_open+0x1ee>
						dw = fs->winsect;
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e8a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8012e8c:	f107 0314 	add.w	r3, r7, #20
 8012e90:	2200      	movs	r2, #0
 8012e92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7fe fb74 	bl	8011582 <remove_chain>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8012ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d126      	bne.n	8012ef6 <f_open+0x1ee>
							res = move_window(fs, dw);
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7fe f919 	bl	80110e4 <move_window>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ebc:	3a01      	subs	r2, #1
 8012ebe:	611a      	str	r2, [r3, #16]
 8012ec0:	e019      	b.n	8012ef6 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012ec2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d115      	bne.n	8012ef6 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012eca:	7ebb      	ldrb	r3, [r7, #26]
 8012ecc:	f003 0310 	and.w	r3, r3, #16
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d003      	beq.n	8012edc <f_open+0x1d4>
					res = FR_NO_FILE;
 8012ed4:	2304      	movs	r3, #4
 8012ed6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012eda:	e00c      	b.n	8012ef6 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012edc:	79fb      	ldrb	r3, [r7, #7]
 8012ede:	f003 0302 	and.w	r3, r3, #2
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d007      	beq.n	8012ef6 <f_open+0x1ee>
 8012ee6:	7ebb      	ldrb	r3, [r7, #26]
 8012ee8:	f003 0301 	and.w	r3, r3, #1
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d002      	beq.n	8012ef6 <f_open+0x1ee>
						res = FR_DENIED;
 8012ef0:	2307      	movs	r3, #7
 8012ef2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012ef6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d128      	bne.n	8012f50 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012efe:	79fb      	ldrb	r3, [r7, #7]
 8012f00:	f003 0308 	and.w	r3, r3, #8
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d003      	beq.n	8012f10 <f_open+0x208>
				mode |= FA_MODIFIED;
 8012f08:	79fb      	ldrb	r3, [r7, #7]
 8012f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f0e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012f10:	693b      	ldr	r3, [r7, #16]
 8012f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f1e:	79fb      	ldrb	r3, [r7, #7]
 8012f20:	f023 0301 	bic.w	r3, r3, #1
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	bf14      	ite	ne
 8012f28:	2301      	movne	r3, #1
 8012f2a:	2300      	moveq	r3, #0
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	461a      	mov	r2, r3
 8012f30:	f107 0314 	add.w	r3, r7, #20
 8012f34:	4611      	mov	r1, r2
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fd ffa2 	bl	8010e80 <inc_lock>
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	691b      	ldr	r3, [r3, #16]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d102      	bne.n	8012f50 <f_open+0x248>
 8012f4a:	2302      	movs	r3, #2
 8012f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012f50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f040 8095 	bne.w	8013084 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f5e:	4611      	mov	r1, r2
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7fe fdc6 	bl	8011af2 <ld_clust>
 8012f66:	4602      	mov	r2, r0
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f6e:	331c      	adds	r3, #28
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7fd fe1f 	bl	8010bb4 <ld_dword>
 8012f76:	4602      	mov	r2, r0
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012f82:	693a      	ldr	r2, [r7, #16]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	88da      	ldrh	r2, [r3, #6]
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	79fa      	ldrb	r2, [r7, #7]
 8012f94:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	3330      	adds	r3, #48	; 0x30
 8012fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fb0:	2100      	movs	r1, #0
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7fd fe89 	bl	8010cca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	f003 0320 	and.w	r3, r3, #32
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d060      	beq.n	8013084 <f_open+0x37c>
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d05c      	beq.n	8013084 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	68da      	ldr	r2, [r3, #12]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	895b      	ldrh	r3, [r3, #10]
 8012fd6:	025b      	lsls	r3, r3, #9
 8012fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	689b      	ldr	r3, [r3, #8]
 8012fde:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012fe6:	e016      	b.n	8013016 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7fe f934 	bl	801125a <get_fat>
 8012ff2:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012ff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d802      	bhi.n	8013000 <f_open+0x2f8>
 8012ffa:	2302      	movs	r3, #2
 8012ffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013006:	d102      	bne.n	801300e <f_open+0x306>
 8013008:	2301      	movs	r3, #1
 801300a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801300e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013012:	1ad3      	subs	r3, r2, r3
 8013014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013016:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801301a:	2b00      	cmp	r3, #0
 801301c:	d103      	bne.n	8013026 <f_open+0x31e>
 801301e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013022:	429a      	cmp	r2, r3
 8013024:	d8e0      	bhi.n	8012fe8 <f_open+0x2e0>
				}
				fp->clust = clst;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801302a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801302c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013030:	2b00      	cmp	r3, #0
 8013032:	d127      	bne.n	8013084 <f_open+0x37c>
 8013034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801303a:	2b00      	cmp	r3, #0
 801303c:	d022      	beq.n	8013084 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013042:	4618      	mov	r0, r3
 8013044:	f7fe f8ea 	bl	801121c <clust2sect>
 8013048:	64b8      	str	r0, [r7, #72]	; 0x48
 801304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801304c:	2b00      	cmp	r3, #0
 801304e:	d103      	bne.n	8013058 <f_open+0x350>
						res = FR_INT_ERR;
 8013050:	2302      	movs	r3, #2
 8013052:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013056:	e015      	b.n	8013084 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801305a:	0a5a      	lsrs	r2, r3, #9
 801305c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801305e:	441a      	add	r2, r3
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	7858      	ldrb	r0, [r3, #1]
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	6a1a      	ldr	r2, [r3, #32]
 8013072:	2301      	movs	r3, #1
 8013074:	f7fd fd28 	bl	8010ac8 <disk_read>
 8013078:	4603      	mov	r3, r0
 801307a:	2b00      	cmp	r3, #0
 801307c:	d002      	beq.n	8013084 <f_open+0x37c>
 801307e:	2301      	movs	r3, #1
 8013080:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8013084:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8013086:	f001 f98d 	bl	80143a4 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801308a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801308e:	2b00      	cmp	r3, #0
 8013090:	d002      	beq.n	8013098 <f_open+0x390>
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	2200      	movs	r2, #0
 8013096:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013098:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801309c:	4618      	mov	r0, r3
 801309e:	3768      	adds	r7, #104	; 0x68
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b08c      	sub	sp, #48	; 0x30
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	60f8      	str	r0, [r7, #12]
 80130ac:	60b9      	str	r1, [r7, #8]
 80130ae:	607a      	str	r2, [r7, #4]
 80130b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	2200      	movs	r2, #0
 80130ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f107 0210 	add.w	r2, r7, #16
 80130c2:	4611      	mov	r1, r2
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7ff fda3 	bl	8012c10 <validate>
 80130ca:	4603      	mov	r3, r0
 80130cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80130d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d107      	bne.n	80130e8 <f_write+0x44>
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	7d5b      	ldrb	r3, [r3, #21]
 80130dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80130e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d002      	beq.n	80130ee <f_write+0x4a>
 80130e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130ec:	e14b      	b.n	8013386 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	7d1b      	ldrb	r3, [r3, #20]
 80130f2:	f003 0302 	and.w	r3, r3, #2
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d101      	bne.n	80130fe <f_write+0x5a>
 80130fa:	2307      	movs	r3, #7
 80130fc:	e143      	b.n	8013386 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	699a      	ldr	r2, [r3, #24]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	441a      	add	r2, r3
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	699b      	ldr	r3, [r3, #24]
 801310a:	429a      	cmp	r2, r3
 801310c:	f080 812d 	bcs.w	801336a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	699b      	ldr	r3, [r3, #24]
 8013114:	43db      	mvns	r3, r3
 8013116:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013118:	e127      	b.n	801336a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	699b      	ldr	r3, [r3, #24]
 801311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013122:	2b00      	cmp	r3, #0
 8013124:	f040 80e3 	bne.w	80132ee <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	699b      	ldr	r3, [r3, #24]
 801312c:	0a5b      	lsrs	r3, r3, #9
 801312e:	693a      	ldr	r2, [r7, #16]
 8013130:	8952      	ldrh	r2, [r2, #10]
 8013132:	3a01      	subs	r2, #1
 8013134:	4013      	ands	r3, r2
 8013136:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d143      	bne.n	80131c6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	699b      	ldr	r3, [r3, #24]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d10c      	bne.n	8013160 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314e:	2b00      	cmp	r3, #0
 8013150:	d11a      	bne.n	8013188 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2100      	movs	r1, #0
 8013156:	4618      	mov	r0, r3
 8013158:	f7fe fa78 	bl	801164c <create_chain>
 801315c:	62b8      	str	r0, [r7, #40]	; 0x28
 801315e:	e013      	b.n	8013188 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013164:	2b00      	cmp	r3, #0
 8013166:	d007      	beq.n	8013178 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	699b      	ldr	r3, [r3, #24]
 801316c:	4619      	mov	r1, r3
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f7fe fb04 	bl	801177c <clmt_clust>
 8013174:	62b8      	str	r0, [r7, #40]	; 0x28
 8013176:	e007      	b.n	8013188 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013178:	68fa      	ldr	r2, [r7, #12]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	69db      	ldr	r3, [r3, #28]
 801317e:	4619      	mov	r1, r3
 8013180:	4610      	mov	r0, r2
 8013182:	f7fe fa63 	bl	801164c <create_chain>
 8013186:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318a:	2b00      	cmp	r3, #0
 801318c:	f000 80f2 	beq.w	8013374 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013192:	2b01      	cmp	r3, #1
 8013194:	d104      	bne.n	80131a0 <f_write+0xfc>
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	2202      	movs	r2, #2
 801319a:	755a      	strb	r2, [r3, #21]
 801319c:	2302      	movs	r3, #2
 801319e:	e0f2      	b.n	8013386 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80131a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a6:	d104      	bne.n	80131b2 <f_write+0x10e>
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2201      	movs	r2, #1
 80131ac:	755a      	strb	r2, [r3, #21]
 80131ae:	2301      	movs	r3, #1
 80131b0:	e0e9      	b.n	8013386 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131b6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d102      	bne.n	80131c6 <f_write+0x122>
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131c4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	7d1b      	ldrb	r3, [r3, #20]
 80131ca:	b25b      	sxtb	r3, r3
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	da18      	bge.n	8013202 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	7858      	ldrb	r0, [r3, #1]
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	6a1a      	ldr	r2, [r3, #32]
 80131de:	2301      	movs	r3, #1
 80131e0:	f7fd fc92 	bl	8010b08 <disk_write>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d004      	beq.n	80131f4 <f_write+0x150>
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2201      	movs	r2, #1
 80131ee:	755a      	strb	r2, [r3, #21]
 80131f0:	2301      	movs	r3, #1
 80131f2:	e0c8      	b.n	8013386 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	7d1b      	ldrb	r3, [r3, #20]
 80131f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131fc:	b2da      	uxtb	r2, r3
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013202:	693a      	ldr	r2, [r7, #16]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	69db      	ldr	r3, [r3, #28]
 8013208:	4619      	mov	r1, r3
 801320a:	4610      	mov	r0, r2
 801320c:	f7fe f806 	bl	801121c <clust2sect>
 8013210:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d104      	bne.n	8013222 <f_write+0x17e>
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2202      	movs	r2, #2
 801321c:	755a      	strb	r2, [r3, #21]
 801321e:	2302      	movs	r3, #2
 8013220:	e0b1      	b.n	8013386 <f_write+0x2e2>
			sect += csect;
 8013222:	697a      	ldr	r2, [r7, #20]
 8013224:	69bb      	ldr	r3, [r7, #24]
 8013226:	4413      	add	r3, r2
 8013228:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	0a5b      	lsrs	r3, r3, #9
 801322e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013230:	6a3b      	ldr	r3, [r7, #32]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d03c      	beq.n	80132b0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013236:	69ba      	ldr	r2, [r7, #24]
 8013238:	6a3b      	ldr	r3, [r7, #32]
 801323a:	4413      	add	r3, r2
 801323c:	693a      	ldr	r2, [r7, #16]
 801323e:	8952      	ldrh	r2, [r2, #10]
 8013240:	4293      	cmp	r3, r2
 8013242:	d905      	bls.n	8013250 <f_write+0x1ac>
					cc = fs->csize - csect;
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	895b      	ldrh	r3, [r3, #10]
 8013248:	461a      	mov	r2, r3
 801324a:	69bb      	ldr	r3, [r7, #24]
 801324c:	1ad3      	subs	r3, r2, r3
 801324e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	7858      	ldrb	r0, [r3, #1]
 8013254:	6a3b      	ldr	r3, [r7, #32]
 8013256:	697a      	ldr	r2, [r7, #20]
 8013258:	69f9      	ldr	r1, [r7, #28]
 801325a:	f7fd fc55 	bl	8010b08 <disk_write>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d004      	beq.n	801326e <f_write+0x1ca>
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	2201      	movs	r2, #1
 8013268:	755a      	strb	r2, [r3, #21]
 801326a:	2301      	movs	r3, #1
 801326c:	e08b      	b.n	8013386 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	6a1a      	ldr	r2, [r3, #32]
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	1ad3      	subs	r3, r2, r3
 8013276:	6a3a      	ldr	r2, [r7, #32]
 8013278:	429a      	cmp	r2, r3
 801327a:	d915      	bls.n	80132a8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	6a1a      	ldr	r2, [r3, #32]
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	1ad3      	subs	r3, r2, r3
 801328a:	025b      	lsls	r3, r3, #9
 801328c:	69fa      	ldr	r2, [r7, #28]
 801328e:	4413      	add	r3, r2
 8013290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013294:	4619      	mov	r1, r3
 8013296:	f7fd fcf7 	bl	8010c88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	7d1b      	ldrb	r3, [r3, #20]
 801329e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132a2:	b2da      	uxtb	r2, r3
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	025b      	lsls	r3, r3, #9
 80132ac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80132ae:	e03f      	b.n	8013330 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	6a1b      	ldr	r3, [r3, #32]
 80132b4:	697a      	ldr	r2, [r7, #20]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d016      	beq.n	80132e8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	699a      	ldr	r2, [r3, #24]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d210      	bcs.n	80132e8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	7858      	ldrb	r0, [r3, #1]
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132d0:	2301      	movs	r3, #1
 80132d2:	697a      	ldr	r2, [r7, #20]
 80132d4:	f7fd fbf8 	bl	8010ac8 <disk_read>
 80132d8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d004      	beq.n	80132e8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2201      	movs	r2, #1
 80132e2:	755a      	strb	r2, [r3, #21]
 80132e4:	2301      	movs	r3, #1
 80132e6:	e04e      	b.n	8013386 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	697a      	ldr	r2, [r7, #20]
 80132ec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	699b      	ldr	r3, [r3, #24]
 80132f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132f6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80132fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80132fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	429a      	cmp	r2, r3
 8013302:	d901      	bls.n	8013308 <f_write+0x264>
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	699b      	ldr	r3, [r3, #24]
 8013312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013316:	4413      	add	r3, r2
 8013318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801331a:	69f9      	ldr	r1, [r7, #28]
 801331c:	4618      	mov	r0, r3
 801331e:	f7fd fcb3 	bl	8010c88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	7d1b      	ldrb	r3, [r3, #20]
 8013326:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801332a:	b2da      	uxtb	r2, r3
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013330:	69fa      	ldr	r2, [r7, #28]
 8013332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013334:	4413      	add	r3, r2
 8013336:	61fb      	str	r3, [r7, #28]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	699a      	ldr	r2, [r3, #24]
 801333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333e:	441a      	add	r2, r3
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	619a      	str	r2, [r3, #24]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	68da      	ldr	r2, [r3, #12]
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	699b      	ldr	r3, [r3, #24]
 801334c:	429a      	cmp	r2, r3
 801334e:	bf38      	it	cc
 8013350:	461a      	movcc	r2, r3
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	60da      	str	r2, [r3, #12]
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	681a      	ldr	r2, [r3, #0]
 801335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801335c:	441a      	add	r2, r3
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	601a      	str	r2, [r3, #0]
 8013362:	687a      	ldr	r2, [r7, #4]
 8013364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013366:	1ad3      	subs	r3, r2, r3
 8013368:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2b00      	cmp	r3, #0
 801336e:	f47f aed4 	bne.w	801311a <f_write+0x76>
 8013372:	e000      	b.n	8013376 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013374:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	7d1b      	ldrb	r3, [r3, #20]
 801337a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801337e:	b2da      	uxtb	r2, r3
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013384:	2300      	movs	r3, #0
}
 8013386:	4618      	mov	r0, r3
 8013388:	3730      	adds	r7, #48	; 0x30
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}

0801338e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801338e:	b580      	push	{r7, lr}
 8013390:	b086      	sub	sp, #24
 8013392:	af00      	add	r7, sp, #0
 8013394:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f107 0208 	add.w	r2, r7, #8
 801339c:	4611      	mov	r1, r2
 801339e:	4618      	mov	r0, r3
 80133a0:	f7ff fc36 	bl	8012c10 <validate>
 80133a4:	4603      	mov	r3, r0
 80133a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80133a8:	7dfb      	ldrb	r3, [r7, #23]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d168      	bne.n	8013480 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	7d1b      	ldrb	r3, [r3, #20]
 80133b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d062      	beq.n	8013480 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	7d1b      	ldrb	r3, [r3, #20]
 80133be:	b25b      	sxtb	r3, r3
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	da15      	bge.n	80133f0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	7858      	ldrb	r0, [r3, #1]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6a1a      	ldr	r2, [r3, #32]
 80133d2:	2301      	movs	r3, #1
 80133d4:	f7fd fb98 	bl	8010b08 <disk_write>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d001      	beq.n	80133e2 <f_sync+0x54>
 80133de:	2301      	movs	r3, #1
 80133e0:	e04f      	b.n	8013482 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	7d1b      	ldrb	r3, [r3, #20]
 80133e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133ea:	b2da      	uxtb	r2, r3
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80133f0:	f7fb fc32 	bl	800ec58 <get_fattime>
 80133f4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80133f6:	68ba      	ldr	r2, [r7, #8]
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133fc:	4619      	mov	r1, r3
 80133fe:	4610      	mov	r0, r2
 8013400:	f7fd fe70 	bl	80110e4 <move_window>
 8013404:	4603      	mov	r3, r0
 8013406:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013408:	7dfb      	ldrb	r3, [r7, #23]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d138      	bne.n	8013480 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013412:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	330b      	adds	r3, #11
 8013418:	781a      	ldrb	r2, [r3, #0]
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	330b      	adds	r3, #11
 801341e:	f042 0220 	orr.w	r2, r2, #32
 8013422:	b2d2      	uxtb	r2, r2
 8013424:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	6818      	ldr	r0, [r3, #0]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	689b      	ldr	r3, [r3, #8]
 801342e:	461a      	mov	r2, r3
 8013430:	68f9      	ldr	r1, [r7, #12]
 8013432:	f7fe fb7d 	bl	8011b30 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	f103 021c 	add.w	r2, r3, #28
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	68db      	ldr	r3, [r3, #12]
 8013440:	4619      	mov	r1, r3
 8013442:	4610      	mov	r0, r2
 8013444:	f7fd fbf4 	bl	8010c30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	3316      	adds	r3, #22
 801344c:	6939      	ldr	r1, [r7, #16]
 801344e:	4618      	mov	r0, r3
 8013450:	f7fd fbee 	bl	8010c30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	3312      	adds	r3, #18
 8013458:	2100      	movs	r1, #0
 801345a:	4618      	mov	r0, r3
 801345c:	f7fd fbcd 	bl	8010bfa <st_word>
					fs->wflag = 1;
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	2201      	movs	r2, #1
 8013464:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	4618      	mov	r0, r3
 801346a:	f7fd fe69 	bl	8011140 <sync_fs>
 801346e:	4603      	mov	r3, r0
 8013470:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	7d1b      	ldrb	r3, [r3, #20]
 8013476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801347a:	b2da      	uxtb	r2, r3
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013480:	7dfb      	ldrb	r3, [r7, #23]
}
 8013482:	4618      	mov	r0, r3
 8013484:	3718      	adds	r7, #24
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}

0801348a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801348a:	b580      	push	{r7, lr}
 801348c:	b084      	sub	sp, #16
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f7ff ff7b 	bl	801338e <f_sync>
 8013498:	4603      	mov	r3, r0
 801349a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801349c:	7bfb      	ldrb	r3, [r7, #15]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d118      	bne.n	80134d4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f107 0208 	add.w	r2, r7, #8
 80134a8:	4611      	mov	r1, r2
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7ff fbb0 	bl	8012c10 <validate>
 80134b0:	4603      	mov	r3, r0
 80134b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80134b4:	7bfb      	ldrb	r3, [r7, #15]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d10c      	bne.n	80134d4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	691b      	ldr	r3, [r3, #16]
 80134be:	4618      	mov	r0, r3
 80134c0:	f7fd fd6c 	bl	8010f9c <dec_lock>
 80134c4:	4603      	mov	r3, r0
 80134c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80134c8:	7bfb      	ldrb	r3, [r7, #15]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d102      	bne.n	80134d4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2200      	movs	r2, #0
 80134d2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80134d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3710      	adds	r7, #16
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}

080134de <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80134de:	b580      	push	{r7, lr}
 80134e0:	b090      	sub	sp, #64	; 0x40
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	6078      	str	r0, [r7, #4]
 80134e6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f107 0208 	add.w	r2, r7, #8
 80134ee:	4611      	mov	r1, r2
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7ff fb8d 	bl	8012c10 <validate>
 80134f6:	4603      	mov	r3, r0
 80134f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80134fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013500:	2b00      	cmp	r3, #0
 8013502:	d103      	bne.n	801350c <f_lseek+0x2e>
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	7d5b      	ldrb	r3, [r3, #21]
 8013508:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801350c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013510:	2b00      	cmp	r3, #0
 8013512:	d002      	beq.n	801351a <f_lseek+0x3c>
 8013514:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013518:	e1e6      	b.n	80138e8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801351e:	2b00      	cmp	r3, #0
 8013520:	f000 80d1 	beq.w	80136c6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801352a:	d15a      	bne.n	80135e2 <f_lseek+0x104>
			tbl = fp->cltbl;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013530:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013534:	1d1a      	adds	r2, r3, #4
 8013536:	627a      	str	r2, [r7, #36]	; 0x24
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	617b      	str	r3, [r7, #20]
 801353c:	2302      	movs	r3, #2
 801353e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	689b      	ldr	r3, [r3, #8]
 8013544:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013548:	2b00      	cmp	r3, #0
 801354a:	d03a      	beq.n	80135c2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801354e:	613b      	str	r3, [r7, #16]
 8013550:	2300      	movs	r3, #0
 8013552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013556:	3302      	adds	r3, #2
 8013558:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355c:	60fb      	str	r3, [r7, #12]
 801355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013560:	3301      	adds	r3, #1
 8013562:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013568:	4618      	mov	r0, r3
 801356a:	f7fd fe76 	bl	801125a <get_fat>
 801356e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013572:	2b01      	cmp	r3, #1
 8013574:	d804      	bhi.n	8013580 <f_lseek+0xa2>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2202      	movs	r2, #2
 801357a:	755a      	strb	r2, [r3, #21]
 801357c:	2302      	movs	r3, #2
 801357e:	e1b3      	b.n	80138e8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013586:	d104      	bne.n	8013592 <f_lseek+0xb4>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2201      	movs	r2, #1
 801358c:	755a      	strb	r2, [r3, #21]
 801358e:	2301      	movs	r3, #1
 8013590:	e1aa      	b.n	80138e8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	3301      	adds	r3, #1
 8013596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013598:	429a      	cmp	r2, r3
 801359a:	d0de      	beq.n	801355a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801359c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d809      	bhi.n	80135b8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80135a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a6:	1d1a      	adds	r2, r3, #4
 80135a8:	627a      	str	r2, [r7, #36]	; 0x24
 80135aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135ac:	601a      	str	r2, [r3, #0]
 80135ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135b0:	1d1a      	adds	r2, r3, #4
 80135b2:	627a      	str	r2, [r7, #36]	; 0x24
 80135b4:	693a      	ldr	r2, [r7, #16]
 80135b6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	699b      	ldr	r3, [r3, #24]
 80135bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135be:	429a      	cmp	r2, r3
 80135c0:	d3c4      	bcc.n	801354c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135c8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80135ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d803      	bhi.n	80135da <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80135d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d4:	2200      	movs	r2, #0
 80135d6:	601a      	str	r2, [r3, #0]
 80135d8:	e184      	b.n	80138e4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80135da:	2311      	movs	r3, #17
 80135dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80135e0:	e180      	b.n	80138e4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	68db      	ldr	r3, [r3, #12]
 80135e6:	683a      	ldr	r2, [r7, #0]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d902      	bls.n	80135f2 <f_lseek+0x114>
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	68db      	ldr	r3, [r3, #12]
 80135f0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	683a      	ldr	r2, [r7, #0]
 80135f6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	f000 8172 	beq.w	80138e4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	3b01      	subs	r3, #1
 8013604:	4619      	mov	r1, r3
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f7fe f8b8 	bl	801177c <clmt_clust>
 801360c:	4602      	mov	r2, r0
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013612:	68ba      	ldr	r2, [r7, #8]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	69db      	ldr	r3, [r3, #28]
 8013618:	4619      	mov	r1, r3
 801361a:	4610      	mov	r0, r2
 801361c:	f7fd fdfe 	bl	801121c <clust2sect>
 8013620:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d104      	bne.n	8013632 <f_lseek+0x154>
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2202      	movs	r2, #2
 801362c:	755a      	strb	r2, [r3, #21]
 801362e:	2302      	movs	r3, #2
 8013630:	e15a      	b.n	80138e8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	3b01      	subs	r3, #1
 8013636:	0a5b      	lsrs	r3, r3, #9
 8013638:	68ba      	ldr	r2, [r7, #8]
 801363a:	8952      	ldrh	r2, [r2, #10]
 801363c:	3a01      	subs	r2, #1
 801363e:	4013      	ands	r3, r2
 8013640:	69ba      	ldr	r2, [r7, #24]
 8013642:	4413      	add	r3, r2
 8013644:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	699b      	ldr	r3, [r3, #24]
 801364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801364e:	2b00      	cmp	r3, #0
 8013650:	f000 8148 	beq.w	80138e4 <f_lseek+0x406>
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6a1b      	ldr	r3, [r3, #32]
 8013658:	69ba      	ldr	r2, [r7, #24]
 801365a:	429a      	cmp	r2, r3
 801365c:	f000 8142 	beq.w	80138e4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	7d1b      	ldrb	r3, [r3, #20]
 8013664:	b25b      	sxtb	r3, r3
 8013666:	2b00      	cmp	r3, #0
 8013668:	da18      	bge.n	801369c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	7858      	ldrb	r0, [r3, #1]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	6a1a      	ldr	r2, [r3, #32]
 8013678:	2301      	movs	r3, #1
 801367a:	f7fd fa45 	bl	8010b08 <disk_write>
 801367e:	4603      	mov	r3, r0
 8013680:	2b00      	cmp	r3, #0
 8013682:	d004      	beq.n	801368e <f_lseek+0x1b0>
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2201      	movs	r2, #1
 8013688:	755a      	strb	r2, [r3, #21]
 801368a:	2301      	movs	r3, #1
 801368c:	e12c      	b.n	80138e8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	7d1b      	ldrb	r3, [r3, #20]
 8013692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013696:	b2da      	uxtb	r2, r3
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	7858      	ldrb	r0, [r3, #1]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136a6:	2301      	movs	r3, #1
 80136a8:	69ba      	ldr	r2, [r7, #24]
 80136aa:	f7fd fa0d 	bl	8010ac8 <disk_read>
 80136ae:	4603      	mov	r3, r0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d004      	beq.n	80136be <f_lseek+0x1e0>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2201      	movs	r2, #1
 80136b8:	755a      	strb	r2, [r3, #21]
 80136ba:	2301      	movs	r3, #1
 80136bc:	e114      	b.n	80138e8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	69ba      	ldr	r2, [r7, #24]
 80136c2:	621a      	str	r2, [r3, #32]
 80136c4:	e10e      	b.n	80138e4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	683a      	ldr	r2, [r7, #0]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d908      	bls.n	80136e2 <f_lseek+0x204>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	7d1b      	ldrb	r3, [r3, #20]
 80136d4:	f003 0302 	and.w	r3, r3, #2
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d102      	bne.n	80136e2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	699b      	ldr	r3, [r3, #24]
 80136e6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80136e8:	2300      	movs	r3, #0
 80136ea:	637b      	str	r3, [r7, #52]	; 0x34
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136f0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	f000 80a7 	beq.w	8013848 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	895b      	ldrh	r3, [r3, #10]
 80136fe:	025b      	lsls	r3, r3, #9
 8013700:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013702:	6a3b      	ldr	r3, [r7, #32]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d01b      	beq.n	8013740 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	1e5a      	subs	r2, r3, #1
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	fbb2 f2f3 	udiv	r2, r2, r3
 8013712:	6a3b      	ldr	r3, [r7, #32]
 8013714:	1e59      	subs	r1, r3, #1
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801371c:	429a      	cmp	r2, r3
 801371e:	d30f      	bcc.n	8013740 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013720:	6a3b      	ldr	r3, [r7, #32]
 8013722:	1e5a      	subs	r2, r3, #1
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	425b      	negs	r3, r3
 8013728:	401a      	ands	r2, r3
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	699b      	ldr	r3, [r3, #24]
 8013732:	683a      	ldr	r2, [r7, #0]
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	69db      	ldr	r3, [r3, #28]
 801373c:	63bb      	str	r3, [r7, #56]	; 0x38
 801373e:	e022      	b.n	8013786 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	689b      	ldr	r3, [r3, #8]
 8013744:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013748:	2b00      	cmp	r3, #0
 801374a:	d119      	bne.n	8013780 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2100      	movs	r1, #0
 8013750:	4618      	mov	r0, r3
 8013752:	f7fd ff7b 	bl	801164c <create_chain>
 8013756:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801375a:	2b01      	cmp	r3, #1
 801375c:	d104      	bne.n	8013768 <f_lseek+0x28a>
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2202      	movs	r2, #2
 8013762:	755a      	strb	r2, [r3, #21]
 8013764:	2302      	movs	r3, #2
 8013766:	e0bf      	b.n	80138e8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801376e:	d104      	bne.n	801377a <f_lseek+0x29c>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2201      	movs	r2, #1
 8013774:	755a      	strb	r2, [r3, #21]
 8013776:	2301      	movs	r3, #1
 8013778:	e0b6      	b.n	80138e8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801377e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013784:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013788:	2b00      	cmp	r3, #0
 801378a:	d05d      	beq.n	8013848 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801378c:	e03a      	b.n	8013804 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801378e:	683a      	ldr	r2, [r7, #0]
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	1ad3      	subs	r3, r2, r3
 8013794:	603b      	str	r3, [r7, #0]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	699a      	ldr	r2, [r3, #24]
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	441a      	add	r2, r3
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	7d1b      	ldrb	r3, [r3, #20]
 80137a6:	f003 0302 	and.w	r3, r3, #2
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00b      	beq.n	80137c6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fd ff4a 	bl	801164c <create_chain>
 80137b8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80137ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d108      	bne.n	80137d2 <f_lseek+0x2f4>
							ofs = 0; break;
 80137c0:	2300      	movs	r3, #0
 80137c2:	603b      	str	r3, [r7, #0]
 80137c4:	e022      	b.n	801380c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7fd fd45 	bl	801125a <get_fat>
 80137d0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80137d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137d8:	d104      	bne.n	80137e4 <f_lseek+0x306>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2201      	movs	r2, #1
 80137de:	755a      	strb	r2, [r3, #21]
 80137e0:	2301      	movs	r3, #1
 80137e2:	e081      	b.n	80138e8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80137e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e6:	2b01      	cmp	r3, #1
 80137e8:	d904      	bls.n	80137f4 <f_lseek+0x316>
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	699b      	ldr	r3, [r3, #24]
 80137ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d304      	bcc.n	80137fe <f_lseek+0x320>
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2202      	movs	r2, #2
 80137f8:	755a      	strb	r2, [r3, #21]
 80137fa:	2302      	movs	r3, #2
 80137fc:	e074      	b.n	80138e8 <f_lseek+0x40a>
					fp->clust = clst;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013802:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013804:	683a      	ldr	r2, [r7, #0]
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	429a      	cmp	r2, r3
 801380a:	d8c0      	bhi.n	801378e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	699a      	ldr	r2, [r3, #24]
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	441a      	add	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801381e:	2b00      	cmp	r3, #0
 8013820:	d012      	beq.n	8013848 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013826:	4618      	mov	r0, r3
 8013828:	f7fd fcf8 	bl	801121c <clust2sect>
 801382c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013830:	2b00      	cmp	r3, #0
 8013832:	d104      	bne.n	801383e <f_lseek+0x360>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2202      	movs	r2, #2
 8013838:	755a      	strb	r2, [r3, #21]
 801383a:	2302      	movs	r3, #2
 801383c:	e054      	b.n	80138e8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	0a5b      	lsrs	r3, r3, #9
 8013842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013844:	4413      	add	r3, r2
 8013846:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	699a      	ldr	r2, [r3, #24]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	68db      	ldr	r3, [r3, #12]
 8013850:	429a      	cmp	r2, r3
 8013852:	d90a      	bls.n	801386a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	699a      	ldr	r2, [r3, #24]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	7d1b      	ldrb	r3, [r3, #20]
 8013860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013864:	b2da      	uxtb	r2, r3
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	699b      	ldr	r3, [r3, #24]
 801386e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013872:	2b00      	cmp	r3, #0
 8013874:	d036      	beq.n	80138e4 <f_lseek+0x406>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6a1b      	ldr	r3, [r3, #32]
 801387a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801387c:	429a      	cmp	r2, r3
 801387e:	d031      	beq.n	80138e4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	7d1b      	ldrb	r3, [r3, #20]
 8013884:	b25b      	sxtb	r3, r3
 8013886:	2b00      	cmp	r3, #0
 8013888:	da18      	bge.n	80138bc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	7858      	ldrb	r0, [r3, #1]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6a1a      	ldr	r2, [r3, #32]
 8013898:	2301      	movs	r3, #1
 801389a:	f7fd f935 	bl	8010b08 <disk_write>
 801389e:	4603      	mov	r3, r0
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d004      	beq.n	80138ae <f_lseek+0x3d0>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2201      	movs	r2, #1
 80138a8:	755a      	strb	r2, [r3, #21]
 80138aa:	2301      	movs	r3, #1
 80138ac:	e01c      	b.n	80138e8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	7d1b      	ldrb	r3, [r3, #20]
 80138b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138b6:	b2da      	uxtb	r2, r3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	7858      	ldrb	r0, [r3, #1]
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138c6:	2301      	movs	r3, #1
 80138c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138ca:	f7fd f8fd 	bl	8010ac8 <disk_read>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d004      	beq.n	80138de <f_lseek+0x400>
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2201      	movs	r2, #1
 80138d8:	755a      	strb	r2, [r3, #21]
 80138da:	2301      	movs	r3, #1
 80138dc:	e004      	b.n	80138e8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138e2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80138e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3740      	adds	r7, #64	; 0x40
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80138f0:	b590      	push	{r4, r7, lr}
 80138f2:	b09d      	sub	sp, #116	; 0x74
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	607a      	str	r2, [r7, #4]
 80138fa:	603b      	str	r3, [r7, #0]
 80138fc:	460b      	mov	r3, r1
 80138fe:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8013900:	2301      	movs	r3, #1
 8013902:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8013904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013908:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 801390a:	f107 030c 	add.w	r3, r7, #12
 801390e:	4618      	mov	r0, r3
 8013910:	f7fe fe97 	bl	8012642 <get_ldnumber>
 8013914:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013918:	2b00      	cmp	r3, #0
 801391a:	da02      	bge.n	8013922 <f_mkfs+0x32>
 801391c:	230b      	movs	r3, #11
 801391e:	f000 bc0d 	b.w	801413c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8013922:	4a94      	ldr	r2, [pc, #592]	; (8013b74 <f_mkfs+0x284>)
 8013924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d005      	beq.n	801393a <f_mkfs+0x4a>
 801392e:	4a91      	ldr	r2, [pc, #580]	; (8013b74 <f_mkfs+0x284>)
 8013930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013936:	2200      	movs	r2, #0
 8013938:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 801393a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801393c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8013940:	2300      	movs	r3, #0
 8013942:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8013946:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801394a:	4618      	mov	r0, r3
 801394c:	f7fd f896 	bl	8010a7c <disk_initialize>
 8013950:	4603      	mov	r3, r0
 8013952:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8013956:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801395a:	f003 0301 	and.w	r3, r3, #1
 801395e:	2b00      	cmp	r3, #0
 8013960:	d001      	beq.n	8013966 <f_mkfs+0x76>
 8013962:	2303      	movs	r3, #3
 8013964:	e3ea      	b.n	801413c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8013966:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801396a:	f003 0304 	and.w	r3, r3, #4
 801396e:	2b00      	cmp	r3, #0
 8013970:	d001      	beq.n	8013976 <f_mkfs+0x86>
 8013972:	230a      	movs	r3, #10
 8013974:	e3e2      	b.n	801413c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8013976:	f107 0214 	add.w	r2, r7, #20
 801397a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801397e:	2103      	movs	r1, #3
 8013980:	4618      	mov	r0, r3
 8013982:	f7fd f8e1 	bl	8010b48 <disk_ioctl>
 8013986:	4603      	mov	r3, r0
 8013988:	2b00      	cmp	r3, #0
 801398a:	d10c      	bne.n	80139a6 <f_mkfs+0xb6>
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d009      	beq.n	80139a6 <f_mkfs+0xb6>
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013998:	d805      	bhi.n	80139a6 <f_mkfs+0xb6>
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	1e5a      	subs	r2, r3, #1
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	4013      	ands	r3, r2
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d001      	beq.n	80139aa <f_mkfs+0xba>
 80139a6:	2301      	movs	r3, #1
 80139a8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80139aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80139ae:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d003      	beq.n	80139be <f_mkfs+0xce>
 80139b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80139b8:	687a      	ldr	r2, [r7, #4]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d309      	bcc.n	80139d2 <f_mkfs+0xe2>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80139c4:	d805      	bhi.n	80139d2 <f_mkfs+0xe2>
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	1e5a      	subs	r2, r3, #1
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	4013      	ands	r3, r2
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d001      	beq.n	80139d6 <f_mkfs+0xe6>
 80139d2:	2313      	movs	r3, #19
 80139d4:	e3b2      	b.n	801413c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80139d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	fbb2 f3f3 	udiv	r3, r2, r3
 80139de:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80139e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80139e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80139ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80139ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80139f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80139f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f4:	fb02 f303 	mul.w	r3, r2, r3
 80139f8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80139fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d101      	bne.n	8013a04 <f_mkfs+0x114>
 8013a00:	230e      	movs	r3, #14
 8013a02:	e39b      	b.n	801413c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8013a04:	f107 0210 	add.w	r2, r7, #16
 8013a08:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013a0c:	2101      	movs	r1, #1
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7fd f89a 	bl	8010b48 <disk_ioctl>
 8013a14:	4603      	mov	r3, r0
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d001      	beq.n	8013a1e <f_mkfs+0x12e>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	e38e      	b.n	801413c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8013a1e:	7afb      	ldrb	r3, [r7, #11]
 8013a20:	f003 0308 	and.w	r3, r3, #8
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d001      	beq.n	8013a2c <f_mkfs+0x13c>
 8013a28:	2300      	movs	r3, #0
 8013a2a:	e000      	b.n	8013a2e <f_mkfs+0x13e>
 8013a2c:	233f      	movs	r3, #63	; 0x3f
 8013a2e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d901      	bls.n	8013a3c <f_mkfs+0x14c>
 8013a38:	230e      	movs	r3, #14
 8013a3a:	e37f      	b.n	801413c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a40:	1ad3      	subs	r3, r2, r3
 8013a42:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	2b7f      	cmp	r3, #127	; 0x7f
 8013a48:	d801      	bhi.n	8013a4e <f_mkfs+0x15e>
 8013a4a:	230e      	movs	r3, #14
 8013a4c:	e376      	b.n	801413c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2b80      	cmp	r3, #128	; 0x80
 8013a52:	d901      	bls.n	8013a58 <f_mkfs+0x168>
 8013a54:	2313      	movs	r3, #19
 8013a56:	e371      	b.n	801413c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8013a58:	7afb      	ldrb	r3, [r7, #11]
 8013a5a:	f003 0302 	and.w	r3, r3, #2
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d00d      	beq.n	8013a7e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8013a62:	7afb      	ldrb	r3, [r7, #11]
 8013a64:	f003 0307 	and.w	r3, r3, #7
 8013a68:	2b02      	cmp	r3, #2
 8013a6a:	d004      	beq.n	8013a76 <f_mkfs+0x186>
 8013a6c:	7afb      	ldrb	r3, [r7, #11]
 8013a6e:	f003 0301 	and.w	r3, r3, #1
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d103      	bne.n	8013a7e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8013a76:	2303      	movs	r3, #3
 8013a78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013a7c:	e009      	b.n	8013a92 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8013a7e:	7afb      	ldrb	r3, [r7, #11]
 8013a80:	f003 0301 	and.w	r3, r3, #1
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d101      	bne.n	8013a8c <f_mkfs+0x19c>
 8013a88:	2313      	movs	r3, #19
 8013a8a:	e357      	b.n	801413c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8013a8c:	2302      	movs	r3, #2
 8013a8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8013a96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013a9a:	2b03      	cmp	r3, #3
 8013a9c:	d13c      	bne.n	8013b18 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8013a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d11b      	bne.n	8013adc <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8013aa4:	693b      	ldr	r3, [r7, #16]
 8013aa6:	0c5b      	lsrs	r3, r3, #17
 8013aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013aaa:	2300      	movs	r3, #0
 8013aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8013aae:	2301      	movs	r3, #1
 8013ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8013ab2:	e005      	b.n	8013ac0 <f_mkfs+0x1d0>
 8013ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8013aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013abc:	005b      	lsls	r3, r3, #1
 8013abe:	653b      	str	r3, [r7, #80]	; 0x50
 8013ac0:	4a2d      	ldr	r2, [pc, #180]	; (8013b78 <f_mkfs+0x288>)
 8013ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d007      	beq.n	8013adc <f_mkfs+0x1ec>
 8013acc:	4a2a      	ldr	r2, [pc, #168]	; (8013b78 <f_mkfs+0x288>)
 8013ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d2eb      	bcs.n	8013ab4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8013adc:	693a      	ldr	r2, [r7, #16]
 8013ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ae4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8013ae6:	6a3b      	ldr	r3, [r7, #32]
 8013ae8:	3302      	adds	r3, #2
 8013aea:	009a      	lsls	r2, r3, #2
 8013aec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013aee:	4413      	add	r3, r2
 8013af0:	1e5a      	subs	r2, r3, #1
 8013af2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013af8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8013afa:	2320      	movs	r3, #32
 8013afc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8013afe:	2300      	movs	r3, #0
 8013b00:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8013b02:	6a3b      	ldr	r3, [r7, #32]
 8013b04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	d903      	bls.n	8013b14 <f_mkfs+0x224>
 8013b0c:	6a3b      	ldr	r3, [r7, #32]
 8013b0e:	4a1b      	ldr	r2, [pc, #108]	; (8013b7c <f_mkfs+0x28c>)
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d952      	bls.n	8013bba <f_mkfs+0x2ca>
 8013b14:	230e      	movs	r3, #14
 8013b16:	e311      	b.n	801413c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8013b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d11b      	bne.n	8013b56 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	0b1b      	lsrs	r3, r3, #12
 8013b22:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013b24:	2300      	movs	r3, #0
 8013b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8013b28:	2301      	movs	r3, #1
 8013b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8013b2c:	e005      	b.n	8013b3a <f_mkfs+0x24a>
 8013b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b30:	3301      	adds	r3, #1
 8013b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8013b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b36:	005b      	lsls	r3, r3, #1
 8013b38:	653b      	str	r3, [r7, #80]	; 0x50
 8013b3a:	4a11      	ldr	r2, [pc, #68]	; (8013b80 <f_mkfs+0x290>)
 8013b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d007      	beq.n	8013b56 <f_mkfs+0x266>
 8013b46:	4a0e      	ldr	r2, [pc, #56]	; (8013b80 <f_mkfs+0x290>)
 8013b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b4e:	461a      	mov	r2, r3
 8013b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d2eb      	bcs.n	8013b2e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8013b56:	693a      	ldr	r2, [r7, #16]
 8013b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b5e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8013b60:	6a3b      	ldr	r3, [r7, #32]
 8013b62:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013b66:	4293      	cmp	r3, r2
 8013b68:	d90c      	bls.n	8013b84 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8013b6a:	6a3b      	ldr	r3, [r7, #32]
 8013b6c:	3302      	adds	r3, #2
 8013b6e:	005b      	lsls	r3, r3, #1
 8013b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013b72:	e012      	b.n	8013b9a <f_mkfs+0x2aa>
 8013b74:	20001704 	.word	0x20001704
 8013b78:	08017674 	.word	0x08017674
 8013b7c:	0ffffff5 	.word	0x0ffffff5
 8013b80:	08017684 	.word	0x08017684
				} else {
					fmt = FS_FAT12;
 8013b84:	2301      	movs	r3, #1
 8013b86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8013b8a:	6a3a      	ldr	r2, [r7, #32]
 8013b8c:	4613      	mov	r3, r2
 8013b8e:	005b      	lsls	r3, r3, #1
 8013b90:	4413      	add	r3, r2
 8013b92:	3301      	adds	r3, #1
 8013b94:	085b      	lsrs	r3, r3, #1
 8013b96:	3303      	adds	r3, #3
 8013b98:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8013b9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b9e:	4413      	add	r3, r2
 8013ba0:	1e5a      	subs	r2, r3, #1
 8013ba2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ba8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8013baa:	2301      	movs	r3, #1
 8013bac:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8013bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bb0:	015a      	lsls	r2, r3, #5
 8013bb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8013bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bbe:	4413      	add	r3, r2
 8013bc0:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8013bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bc6:	fb03 f202 	mul.w	r2, r3, r2
 8013bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bcc:	4413      	add	r3, r2
 8013bce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013bd0:	4413      	add	r3, r2
 8013bd2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8013bd4:	697a      	ldr	r2, [r7, #20]
 8013bd6:	69fb      	ldr	r3, [r7, #28]
 8013bd8:	4413      	add	r3, r2
 8013bda:	1e5a      	subs	r2, r3, #1
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	425b      	negs	r3, r3
 8013be0:	401a      	ands	r2, r3
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	1ad3      	subs	r3, r2, r3
 8013be6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8013be8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013bec:	2b03      	cmp	r3, #3
 8013bee:	d108      	bne.n	8013c02 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8013bf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013bf4:	4413      	add	r3, r2
 8013bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8013bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013bfc:	4413      	add	r3, r2
 8013bfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8013c00:	e006      	b.n	8013c10 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8013c02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013c0c:	4413      	add	r3, r2
 8013c0e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8013c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c12:	011a      	lsls	r2, r3, #4
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	441a      	add	r2, r3
 8013c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1a:	1ad2      	subs	r2, r2, r3
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	d901      	bls.n	8013c26 <f_mkfs+0x336>
 8013c22:	230e      	movs	r3, #14
 8013c24:	e28a      	b.n	801413c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8013c26:	693a      	ldr	r2, [r7, #16]
 8013c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c2a:	1ad2      	subs	r2, r2, r3
 8013c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013c30:	fb01 f303 	mul.w	r3, r1, r3
 8013c34:	1ad2      	subs	r2, r2, r3
 8013c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c38:	1ad2      	subs	r2, r2, r3
 8013c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c40:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8013c42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013c46:	2b03      	cmp	r3, #3
 8013c48:	d10f      	bne.n	8013c6a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8013c4a:	6a3b      	ldr	r3, [r7, #32]
 8013c4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013c50:	4293      	cmp	r3, r2
 8013c52:	d80a      	bhi.n	8013c6a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d105      	bne.n	8013c66 <f_mkfs+0x376>
 8013c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c5c:	085b      	lsrs	r3, r3, #1
 8013c5e:	607b      	str	r3, [r7, #4]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d144      	bne.n	8013cf0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8013c66:	230e      	movs	r3, #14
 8013c68:	e268      	b.n	801413c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8013c6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013c6e:	2b02      	cmp	r3, #2
 8013c70:	d133      	bne.n	8013cda <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8013c72:	6a3b      	ldr	r3, [r7, #32]
 8013c74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d91e      	bls.n	8013cba <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d107      	bne.n	8013c92 <f_mkfs+0x3a2>
 8013c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c84:	005b      	lsls	r3, r3, #1
 8013c86:	2b40      	cmp	r3, #64	; 0x40
 8013c88:	d803      	bhi.n	8013c92 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8013c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c8c:	005b      	lsls	r3, r3, #1
 8013c8e:	607b      	str	r3, [r7, #4]
 8013c90:	e033      	b.n	8013cfa <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8013c92:	7afb      	ldrb	r3, [r7, #11]
 8013c94:	f003 0302 	and.w	r3, r3, #2
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d003      	beq.n	8013ca4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8013c9c:	2303      	movs	r3, #3
 8013c9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013ca2:	e02a      	b.n	8013cfa <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d105      	bne.n	8013cb6 <f_mkfs+0x3c6>
 8013caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	607b      	str	r3, [r7, #4]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2b80      	cmp	r3, #128	; 0x80
 8013cb4:	d91e      	bls.n	8013cf4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8013cb6:	230e      	movs	r3, #14
 8013cb8:	e240      	b.n	801413c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8013cba:	6a3b      	ldr	r3, [r7, #32]
 8013cbc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013cc0:	4293      	cmp	r3, r2
 8013cc2:	d80a      	bhi.n	8013cda <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d105      	bne.n	8013cd6 <f_mkfs+0x3e6>
 8013cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ccc:	005b      	lsls	r3, r3, #1
 8013cce:	607b      	str	r3, [r7, #4]
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2b80      	cmp	r3, #128	; 0x80
 8013cd4:	d910      	bls.n	8013cf8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8013cd6:	230e      	movs	r3, #14
 8013cd8:	e230      	b.n	801413c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8013cda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d10c      	bne.n	8013cfc <f_mkfs+0x40c>
 8013ce2:	6a3b      	ldr	r3, [r7, #32]
 8013ce4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d907      	bls.n	8013cfc <f_mkfs+0x40c>
 8013cec:	230e      	movs	r3, #14
 8013cee:	e225      	b.n	801413c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013cf0:	bf00      	nop
 8013cf2:	e6ce      	b.n	8013a92 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013cf4:	bf00      	nop
 8013cf6:	e6cc      	b.n	8013a92 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013cf8:	bf00      	nop
			pau = au;
 8013cfa:	e6ca      	b.n	8013a92 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8013cfc:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8013cfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013d00:	461a      	mov	r2, r3
 8013d02:	2100      	movs	r1, #0
 8013d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d06:	f7fc ffe0 	bl	8010cca <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8013d0a:	220b      	movs	r2, #11
 8013d0c:	49b2      	ldr	r1, [pc, #712]	; (8013fd8 <f_mkfs+0x6e8>)
 8013d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d10:	f7fc ffba 	bl	8010c88 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8013d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d16:	330b      	adds	r3, #11
 8013d18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013d1a:	4611      	mov	r1, r2
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7fc ff6c 	bl	8010bfa <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8013d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d24:	330d      	adds	r3, #13
 8013d26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013d28:	b2d2      	uxtb	r2, r2
 8013d2a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8013d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2e:	330e      	adds	r3, #14
 8013d30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013d32:	b292      	uxth	r2, r2
 8013d34:	4611      	mov	r1, r2
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7fc ff5f 	bl	8010bfa <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8013d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3e:	3310      	adds	r3, #16
 8013d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d42:	b2d2      	uxtb	r2, r2
 8013d44:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8013d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d48:	f103 0211 	add.w	r2, r3, #17
 8013d4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013d50:	2b03      	cmp	r3, #3
 8013d52:	d002      	beq.n	8013d5a <f_mkfs+0x46a>
 8013d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	e000      	b.n	8013d5c <f_mkfs+0x46c>
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	4610      	mov	r0, r2
 8013d60:	f7fc ff4b 	bl	8010bfa <st_word>
		if (sz_vol < 0x10000) {
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d6a:	d208      	bcs.n	8013d7e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8013d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d6e:	3313      	adds	r3, #19
 8013d70:	693a      	ldr	r2, [r7, #16]
 8013d72:	b292      	uxth	r2, r2
 8013d74:	4611      	mov	r1, r2
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7fc ff3f 	bl	8010bfa <st_word>
 8013d7c:	e006      	b.n	8013d8c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8013d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d80:	3320      	adds	r3, #32
 8013d82:	693a      	ldr	r2, [r7, #16]
 8013d84:	4611      	mov	r1, r2
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7fc ff52 	bl	8010c30 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8013d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d8e:	3315      	adds	r3, #21
 8013d90:	22f8      	movs	r2, #248	; 0xf8
 8013d92:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8013d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d96:	3318      	adds	r3, #24
 8013d98:	213f      	movs	r1, #63	; 0x3f
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7fc ff2d 	bl	8010bfa <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da2:	331a      	adds	r3, #26
 8013da4:	21ff      	movs	r1, #255	; 0xff
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7fc ff27 	bl	8010bfa <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8013dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dae:	331c      	adds	r3, #28
 8013db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fc ff3c 	bl	8010c30 <st_dword>
		if (fmt == FS_FAT32) {
 8013db8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013dbc:	2b03      	cmp	r3, #3
 8013dbe:	d131      	bne.n	8013e24 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8013dc6:	f7fa ff47 	bl	800ec58 <get_fattime>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	4619      	mov	r1, r3
 8013dce:	4620      	mov	r0, r4
 8013dd0:	f7fc ff2e 	bl	8010c30 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8013dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd6:	3324      	adds	r3, #36	; 0x24
 8013dd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7fc ff28 	bl	8010c30 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8013de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de2:	332c      	adds	r3, #44	; 0x2c
 8013de4:	2102      	movs	r1, #2
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7fc ff22 	bl	8010c30 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8013dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dee:	3330      	adds	r3, #48	; 0x30
 8013df0:	2101      	movs	r1, #1
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7fc ff01 	bl	8010bfa <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8013df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dfa:	3332      	adds	r3, #50	; 0x32
 8013dfc:	2106      	movs	r1, #6
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fc fefb 	bl	8010bfa <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8013e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e06:	3340      	adds	r3, #64	; 0x40
 8013e08:	2280      	movs	r2, #128	; 0x80
 8013e0a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8013e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e0e:	3342      	adds	r3, #66	; 0x42
 8013e10:	2229      	movs	r2, #41	; 0x29
 8013e12:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8013e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e16:	3347      	adds	r3, #71	; 0x47
 8013e18:	2213      	movs	r2, #19
 8013e1a:	4970      	ldr	r1, [pc, #448]	; (8013fdc <f_mkfs+0x6ec>)
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7fc ff33 	bl	8010c88 <mem_cpy>
 8013e22:	e020      	b.n	8013e66 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8013e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e26:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8013e2a:	f7fa ff15 	bl	800ec58 <get_fattime>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	4619      	mov	r1, r3
 8013e32:	4620      	mov	r0, r4
 8013e34:	f7fc fefc 	bl	8010c30 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8013e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3a:	3316      	adds	r3, #22
 8013e3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e3e:	b292      	uxth	r2, r2
 8013e40:	4611      	mov	r1, r2
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fc fed9 	bl	8010bfa <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8013e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4a:	3324      	adds	r3, #36	; 0x24
 8013e4c:	2280      	movs	r2, #128	; 0x80
 8013e4e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8013e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e52:	3326      	adds	r3, #38	; 0x26
 8013e54:	2229      	movs	r2, #41	; 0x29
 8013e56:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8013e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5a:	332b      	adds	r3, #43	; 0x2b
 8013e5c:	2213      	movs	r2, #19
 8013e5e:	4960      	ldr	r1, [pc, #384]	; (8013fe0 <f_mkfs+0x6f0>)
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7fc ff11 	bl	8010c88 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013e6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7fc fec2 	bl	8010bfa <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8013e76:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e80:	f7fc fe42 	bl	8010b08 <disk_write>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <f_mkfs+0x59e>
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	e156      	b.n	801413c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8013e8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013e92:	2b03      	cmp	r3, #3
 8013e94:	d140      	bne.n	8013f18 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8013e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e98:	1d9a      	adds	r2, r3, #6
 8013e9a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013ea2:	f7fc fe31 	bl	8010b08 <disk_write>
			mem_set(buf, 0, ss);
 8013ea6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013ea8:	461a      	mov	r2, r3
 8013eaa:	2100      	movs	r1, #0
 8013eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013eae:	f7fc ff0c 	bl	8010cca <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8013eb2:	494c      	ldr	r1, [pc, #304]	; (8013fe4 <f_mkfs+0x6f4>)
 8013eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013eb6:	f7fc febb 	bl	8010c30 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8013eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ebc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013ec0:	4949      	ldr	r1, [pc, #292]	; (8013fe8 <f_mkfs+0x6f8>)
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fc feb4 	bl	8010c30 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8013ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013ece:	6a3b      	ldr	r3, [r7, #32]
 8013ed0:	3b01      	subs	r3, #1
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	4610      	mov	r0, r2
 8013ed6:	f7fc feab 	bl	8010c30 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8013eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013edc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013ee0:	2102      	movs	r1, #2
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7fc fea4 	bl	8010c30 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8013ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013eee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7fc fe81 	bl	8010bfa <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8013ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efa:	1dda      	adds	r2, r3, #7
 8013efc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013f00:	2301      	movs	r3, #1
 8013f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f04:	f7fc fe00 	bl	8010b08 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8013f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0a:	1c5a      	adds	r2, r3, #1
 8013f0c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013f10:	2301      	movs	r3, #1
 8013f12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f14:	f7fc fdf8 	bl	8010b08 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8013f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f1a:	2100      	movs	r1, #0
 8013f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f1e:	f7fc fed4 	bl	8010cca <mem_set>
		sect = b_fat;		/* FAT start sector */
 8013f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f24:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013f26:	2300      	movs	r3, #0
 8013f28:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f2a:	e04b      	b.n	8013fc4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8013f2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013f30:	2b03      	cmp	r3, #3
 8013f32:	d113      	bne.n	8013f5c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8013f34:	f06f 0107 	mvn.w	r1, #7
 8013f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f3a:	f7fc fe79 	bl	8010c30 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8013f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f40:	3304      	adds	r3, #4
 8013f42:	f04f 31ff 	mov.w	r1, #4294967295
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7fc fe72 	bl	8010c30 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8013f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4e:	3308      	adds	r3, #8
 8013f50:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fc fe6b 	bl	8010c30 <st_dword>
 8013f5a:	e00b      	b.n	8013f74 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8013f5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d101      	bne.n	8013f68 <f_mkfs+0x678>
 8013f64:	4b21      	ldr	r3, [pc, #132]	; (8013fec <f_mkfs+0x6fc>)
 8013f66:	e001      	b.n	8013f6c <f_mkfs+0x67c>
 8013f68:	f06f 0307 	mvn.w	r3, #7
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f70:	f7fc fe5e 	bl	8010c30 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8013f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f76:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8013f78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	bf28      	it	cs
 8013f80:	4613      	movcs	r3, r2
 8013f82:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013f84:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013f8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f8e:	f7fc fdbb 	bl	8010b08 <disk_write>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d001      	beq.n	8013f9c <f_mkfs+0x6ac>
 8013f98:	2301      	movs	r3, #1
 8013f9a:	e0cf      	b.n	801413c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8013f9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	2100      	movs	r1, #0
 8013fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fa4:	f7fc fe91 	bl	8010cca <mem_set>
				sect += n; nsect -= n;
 8013fa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013fac:	4413      	add	r3, r2
 8013fae:	667b      	str	r3, [r7, #100]	; 0x64
 8013fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013fb4:	1ad3      	subs	r3, r2, r3
 8013fb6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8013fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d1dc      	bne.n	8013f78 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8013fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d3af      	bcc.n	8013f2c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8013fcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013fd0:	2b03      	cmp	r3, #3
 8013fd2:	d10d      	bne.n	8013ff0 <f_mkfs+0x700>
 8013fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fd6:	e00c      	b.n	8013ff2 <f_mkfs+0x702>
 8013fd8:	08017160 	.word	0x08017160
 8013fdc:	0801716c 	.word	0x0801716c
 8013fe0:	08017180 	.word	0x08017180
 8013fe4:	41615252 	.word	0x41615252
 8013fe8:	61417272 	.word	0x61417272
 8013fec:	00fffff8 	.word	0x00fffff8
 8013ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ff2:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8013ff4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff8:	4293      	cmp	r3, r2
 8013ffa:	bf28      	it	cs
 8013ffc:	4613      	movcs	r3, r2
 8013ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014000:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8014004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014006:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801400a:	f7fc fd7d 	bl	8010b08 <disk_write>
 801400e:	4603      	mov	r3, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	d001      	beq.n	8014018 <f_mkfs+0x728>
 8014014:	2301      	movs	r3, #1
 8014016:	e091      	b.n	801413c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8014018:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801401a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801401c:	4413      	add	r3, r2
 801401e:	667b      	str	r3, [r7, #100]	; 0x64
 8014020:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014024:	1ad3      	subs	r3, r2, r3
 8014026:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8014028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801402a:	2b00      	cmp	r3, #0
 801402c:	d1e2      	bne.n	8013ff4 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801402e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014032:	2b03      	cmp	r3, #3
 8014034:	d103      	bne.n	801403e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8014036:	230c      	movs	r3, #12
 8014038:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801403c:	e010      	b.n	8014060 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014044:	d303      	bcc.n	801404e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014046:	2306      	movs	r3, #6
 8014048:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801404c:	e008      	b.n	8014060 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801404e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014052:	2b02      	cmp	r3, #2
 8014054:	d101      	bne.n	801405a <f_mkfs+0x76a>
 8014056:	2304      	movs	r3, #4
 8014058:	e000      	b.n	801405c <f_mkfs+0x76c>
 801405a:	2301      	movs	r3, #1
 801405c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014060:	7afb      	ldrb	r3, [r7, #11]
 8014062:	f003 0308 	and.w	r3, r3, #8
 8014066:	2b00      	cmp	r3, #0
 8014068:	d15b      	bne.n	8014122 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801406a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801406c:	461a      	mov	r2, r3
 801406e:	2100      	movs	r1, #0
 8014070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014072:	f7fc fe2a 	bl	8010cca <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014078:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801407c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014080:	4618      	mov	r0, r3
 8014082:	f7fc fdba 	bl	8010bfa <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014088:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801408c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801408e:	69bb      	ldr	r3, [r7, #24]
 8014090:	2200      	movs	r2, #0
 8014092:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	3301      	adds	r3, #1
 8014098:	2201      	movs	r2, #1
 801409a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801409c:	69bb      	ldr	r3, [r7, #24]
 801409e:	3302      	adds	r3, #2
 80140a0:	2201      	movs	r2, #1
 80140a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	3303      	adds	r3, #3
 80140a8:	2200      	movs	r2, #0
 80140aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80140ac:	69bb      	ldr	r3, [r7, #24]
 80140ae:	3304      	adds	r3, #4
 80140b0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80140b4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80140b6:	693a      	ldr	r2, [r7, #16]
 80140b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ba:	441a      	add	r2, r3
 80140bc:	4b21      	ldr	r3, [pc, #132]	; (8014144 <f_mkfs+0x854>)
 80140be:	fba3 1302 	umull	r1, r3, r3, r2
 80140c2:	1ad2      	subs	r2, r2, r3
 80140c4:	0852      	lsrs	r2, r2, #1
 80140c6:	4413      	add	r3, r2
 80140c8:	0b5b      	lsrs	r3, r3, #13
 80140ca:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	3305      	adds	r3, #5
 80140d0:	22fe      	movs	r2, #254	; 0xfe
 80140d2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80140d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140d6:	089b      	lsrs	r3, r3, #2
 80140d8:	b2da      	uxtb	r2, r3
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	3306      	adds	r3, #6
 80140de:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80140e2:	b2d2      	uxtb	r2, r2
 80140e4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80140e6:	69bb      	ldr	r3, [r7, #24]
 80140e8:	3307      	adds	r3, #7
 80140ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80140ec:	b2d2      	uxtb	r2, r2
 80140ee:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80140f0:	69bb      	ldr	r3, [r7, #24]
 80140f2:	3308      	adds	r3, #8
 80140f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7fc fd9a 	bl	8010c30 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80140fc:	69bb      	ldr	r3, [r7, #24]
 80140fe:	330c      	adds	r3, #12
 8014100:	693a      	ldr	r2, [r7, #16]
 8014102:	4611      	mov	r1, r2
 8014104:	4618      	mov	r0, r3
 8014106:	f7fc fd93 	bl	8010c30 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801410a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801410e:	2301      	movs	r3, #1
 8014110:	2200      	movs	r2, #0
 8014112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014114:	f7fc fcf8 	bl	8010b08 <disk_write>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	d001      	beq.n	8014122 <f_mkfs+0x832>
 801411e:	2301      	movs	r3, #1
 8014120:	e00c      	b.n	801413c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8014122:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014126:	2200      	movs	r2, #0
 8014128:	2100      	movs	r1, #0
 801412a:	4618      	mov	r0, r3
 801412c:	f7fc fd0c 	bl	8010b48 <disk_ioctl>
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d001      	beq.n	801413a <f_mkfs+0x84a>
 8014136:	2301      	movs	r3, #1
 8014138:	e000      	b.n	801413c <f_mkfs+0x84c>

	return FR_OK;
 801413a:	2300      	movs	r3, #0
}
 801413c:	4618      	mov	r0, r3
 801413e:	3774      	adds	r7, #116	; 0x74
 8014140:	46bd      	mov	sp, r7
 8014142:	bd90      	pop	{r4, r7, pc}
 8014144:	0515565b 	.word	0x0515565b

08014148 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014148:	b480      	push	{r7}
 801414a:	b087      	sub	sp, #28
 801414c:	af00      	add	r7, sp, #0
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	4613      	mov	r3, r2
 8014154:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014156:	2301      	movs	r3, #1
 8014158:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801415a:	2300      	movs	r3, #0
 801415c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801415e:	4b1f      	ldr	r3, [pc, #124]	; (80141dc <FATFS_LinkDriverEx+0x94>)
 8014160:	7a5b      	ldrb	r3, [r3, #9]
 8014162:	b2db      	uxtb	r3, r3
 8014164:	2b00      	cmp	r3, #0
 8014166:	d131      	bne.n	80141cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014168:	4b1c      	ldr	r3, [pc, #112]	; (80141dc <FATFS_LinkDriverEx+0x94>)
 801416a:	7a5b      	ldrb	r3, [r3, #9]
 801416c:	b2db      	uxtb	r3, r3
 801416e:	461a      	mov	r2, r3
 8014170:	4b1a      	ldr	r3, [pc, #104]	; (80141dc <FATFS_LinkDriverEx+0x94>)
 8014172:	2100      	movs	r1, #0
 8014174:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014176:	4b19      	ldr	r3, [pc, #100]	; (80141dc <FATFS_LinkDriverEx+0x94>)
 8014178:	7a5b      	ldrb	r3, [r3, #9]
 801417a:	b2db      	uxtb	r3, r3
 801417c:	4a17      	ldr	r2, [pc, #92]	; (80141dc <FATFS_LinkDriverEx+0x94>)
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	4413      	add	r3, r2
 8014182:	68fa      	ldr	r2, [r7, #12]
 8014184:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014186:	4b15      	ldr	r3, [pc, #84]	; (80141dc <FATFS_LinkDriverEx+0x94>)
 8014188:	7a5b      	ldrb	r3, [r3, #9]
 801418a:	b2db      	uxtb	r3, r3
 801418c:	461a      	mov	r2, r3
 801418e:	4b13      	ldr	r3, [pc, #76]	; (80141dc <FATFS_LinkDriverEx+0x94>)
 8014190:	4413      	add	r3, r2
 8014192:	79fa      	ldrb	r2, [r7, #7]
 8014194:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014196:	4b11      	ldr	r3, [pc, #68]	; (80141dc <FATFS_LinkDriverEx+0x94>)
 8014198:	7a5b      	ldrb	r3, [r3, #9]
 801419a:	b2db      	uxtb	r3, r3
 801419c:	1c5a      	adds	r2, r3, #1
 801419e:	b2d1      	uxtb	r1, r2
 80141a0:	4a0e      	ldr	r2, [pc, #56]	; (80141dc <FATFS_LinkDriverEx+0x94>)
 80141a2:	7251      	strb	r1, [r2, #9]
 80141a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80141a6:	7dbb      	ldrb	r3, [r7, #22]
 80141a8:	3330      	adds	r3, #48	; 0x30
 80141aa:	b2da      	uxtb	r2, r3
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	3301      	adds	r3, #1
 80141b4:	223a      	movs	r2, #58	; 0x3a
 80141b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	3302      	adds	r3, #2
 80141bc:	222f      	movs	r2, #47	; 0x2f
 80141be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	3303      	adds	r3, #3
 80141c4:	2200      	movs	r2, #0
 80141c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80141c8:	2300      	movs	r3, #0
 80141ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80141cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	371c      	adds	r7, #28
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr
 80141da:	bf00      	nop
 80141dc:	2000172c 	.word	0x2000172c

080141e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b082      	sub	sp, #8
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80141ea:	2200      	movs	r2, #0
 80141ec:	6839      	ldr	r1, [r7, #0]
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f7ff ffaa 	bl	8014148 <FATFS_LinkDriverEx>
 80141f4:	4603      	mov	r3, r0
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	3708      	adds	r7, #8
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}
	...

08014200 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014200:	b480      	push	{r7}
 8014202:	b085      	sub	sp, #20
 8014204:	af00      	add	r7, sp, #0
 8014206:	4603      	mov	r3, r0
 8014208:	6039      	str	r1, [r7, #0]
 801420a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801420c:	88fb      	ldrh	r3, [r7, #6]
 801420e:	2b7f      	cmp	r3, #127	; 0x7f
 8014210:	d802      	bhi.n	8014218 <ff_convert+0x18>
		c = chr;
 8014212:	88fb      	ldrh	r3, [r7, #6]
 8014214:	81fb      	strh	r3, [r7, #14]
 8014216:	e025      	b.n	8014264 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d00b      	beq.n	8014236 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801421e:	88fb      	ldrh	r3, [r7, #6]
 8014220:	2bff      	cmp	r3, #255	; 0xff
 8014222:	d805      	bhi.n	8014230 <ff_convert+0x30>
 8014224:	88fb      	ldrh	r3, [r7, #6]
 8014226:	3b80      	subs	r3, #128	; 0x80
 8014228:	4a12      	ldr	r2, [pc, #72]	; (8014274 <ff_convert+0x74>)
 801422a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801422e:	e000      	b.n	8014232 <ff_convert+0x32>
 8014230:	2300      	movs	r3, #0
 8014232:	81fb      	strh	r3, [r7, #14]
 8014234:	e016      	b.n	8014264 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014236:	2300      	movs	r3, #0
 8014238:	81fb      	strh	r3, [r7, #14]
 801423a:	e009      	b.n	8014250 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801423c:	89fb      	ldrh	r3, [r7, #14]
 801423e:	4a0d      	ldr	r2, [pc, #52]	; (8014274 <ff_convert+0x74>)
 8014240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014244:	88fa      	ldrh	r2, [r7, #6]
 8014246:	429a      	cmp	r2, r3
 8014248:	d006      	beq.n	8014258 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801424a:	89fb      	ldrh	r3, [r7, #14]
 801424c:	3301      	adds	r3, #1
 801424e:	81fb      	strh	r3, [r7, #14]
 8014250:	89fb      	ldrh	r3, [r7, #14]
 8014252:	2b7f      	cmp	r3, #127	; 0x7f
 8014254:	d9f2      	bls.n	801423c <ff_convert+0x3c>
 8014256:	e000      	b.n	801425a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014258:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801425a:	89fb      	ldrh	r3, [r7, #14]
 801425c:	3380      	adds	r3, #128	; 0x80
 801425e:	b29b      	uxth	r3, r3
 8014260:	b2db      	uxtb	r3, r3
 8014262:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014264:	89fb      	ldrh	r3, [r7, #14]
}
 8014266:	4618      	mov	r0, r3
 8014268:	3714      	adds	r7, #20
 801426a:	46bd      	mov	sp, r7
 801426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014270:	4770      	bx	lr
 8014272:	bf00      	nop
 8014274:	08017694 	.word	0x08017694

08014278 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014278:	b480      	push	{r7}
 801427a:	b087      	sub	sp, #28
 801427c:	af00      	add	r7, sp, #0
 801427e:	4603      	mov	r3, r0
 8014280:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014282:	88fb      	ldrh	r3, [r7, #6]
 8014284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014288:	d201      	bcs.n	801428e <ff_wtoupper+0x16>
 801428a:	4b3e      	ldr	r3, [pc, #248]	; (8014384 <ff_wtoupper+0x10c>)
 801428c:	e000      	b.n	8014290 <ff_wtoupper+0x18>
 801428e:	4b3e      	ldr	r3, [pc, #248]	; (8014388 <ff_wtoupper+0x110>)
 8014290:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	1c9a      	adds	r2, r3, #2
 8014296:	617a      	str	r2, [r7, #20]
 8014298:	881b      	ldrh	r3, [r3, #0]
 801429a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801429c:	8a7b      	ldrh	r3, [r7, #18]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d068      	beq.n	8014374 <ff_wtoupper+0xfc>
 80142a2:	88fa      	ldrh	r2, [r7, #6]
 80142a4:	8a7b      	ldrh	r3, [r7, #18]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d364      	bcc.n	8014374 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	1c9a      	adds	r2, r3, #2
 80142ae:	617a      	str	r2, [r7, #20]
 80142b0:	881b      	ldrh	r3, [r3, #0]
 80142b2:	823b      	strh	r3, [r7, #16]
 80142b4:	8a3b      	ldrh	r3, [r7, #16]
 80142b6:	0a1b      	lsrs	r3, r3, #8
 80142b8:	81fb      	strh	r3, [r7, #14]
 80142ba:	8a3b      	ldrh	r3, [r7, #16]
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80142c0:	88fa      	ldrh	r2, [r7, #6]
 80142c2:	8a79      	ldrh	r1, [r7, #18]
 80142c4:	8a3b      	ldrh	r3, [r7, #16]
 80142c6:	440b      	add	r3, r1
 80142c8:	429a      	cmp	r2, r3
 80142ca:	da49      	bge.n	8014360 <ff_wtoupper+0xe8>
			switch (cmd) {
 80142cc:	89fb      	ldrh	r3, [r7, #14]
 80142ce:	2b08      	cmp	r3, #8
 80142d0:	d84f      	bhi.n	8014372 <ff_wtoupper+0xfa>
 80142d2:	a201      	add	r2, pc, #4	; (adr r2, 80142d8 <ff_wtoupper+0x60>)
 80142d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142d8:	080142fd 	.word	0x080142fd
 80142dc:	0801430f 	.word	0x0801430f
 80142e0:	08014325 	.word	0x08014325
 80142e4:	0801432d 	.word	0x0801432d
 80142e8:	08014335 	.word	0x08014335
 80142ec:	0801433d 	.word	0x0801433d
 80142f0:	08014345 	.word	0x08014345
 80142f4:	0801434d 	.word	0x0801434d
 80142f8:	08014355 	.word	0x08014355
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80142fc:	88fa      	ldrh	r2, [r7, #6]
 80142fe:	8a7b      	ldrh	r3, [r7, #18]
 8014300:	1ad3      	subs	r3, r2, r3
 8014302:	005b      	lsls	r3, r3, #1
 8014304:	697a      	ldr	r2, [r7, #20]
 8014306:	4413      	add	r3, r2
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	80fb      	strh	r3, [r7, #6]
 801430c:	e027      	b.n	801435e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801430e:	88fa      	ldrh	r2, [r7, #6]
 8014310:	8a7b      	ldrh	r3, [r7, #18]
 8014312:	1ad3      	subs	r3, r2, r3
 8014314:	b29b      	uxth	r3, r3
 8014316:	f003 0301 	and.w	r3, r3, #1
 801431a:	b29b      	uxth	r3, r3
 801431c:	88fa      	ldrh	r2, [r7, #6]
 801431e:	1ad3      	subs	r3, r2, r3
 8014320:	80fb      	strh	r3, [r7, #6]
 8014322:	e01c      	b.n	801435e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014324:	88fb      	ldrh	r3, [r7, #6]
 8014326:	3b10      	subs	r3, #16
 8014328:	80fb      	strh	r3, [r7, #6]
 801432a:	e018      	b.n	801435e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801432c:	88fb      	ldrh	r3, [r7, #6]
 801432e:	3b20      	subs	r3, #32
 8014330:	80fb      	strh	r3, [r7, #6]
 8014332:	e014      	b.n	801435e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014334:	88fb      	ldrh	r3, [r7, #6]
 8014336:	3b30      	subs	r3, #48	; 0x30
 8014338:	80fb      	strh	r3, [r7, #6]
 801433a:	e010      	b.n	801435e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801433c:	88fb      	ldrh	r3, [r7, #6]
 801433e:	3b1a      	subs	r3, #26
 8014340:	80fb      	strh	r3, [r7, #6]
 8014342:	e00c      	b.n	801435e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014344:	88fb      	ldrh	r3, [r7, #6]
 8014346:	3308      	adds	r3, #8
 8014348:	80fb      	strh	r3, [r7, #6]
 801434a:	e008      	b.n	801435e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801434c:	88fb      	ldrh	r3, [r7, #6]
 801434e:	3b50      	subs	r3, #80	; 0x50
 8014350:	80fb      	strh	r3, [r7, #6]
 8014352:	e004      	b.n	801435e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014354:	88fb      	ldrh	r3, [r7, #6]
 8014356:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801435a:	80fb      	strh	r3, [r7, #6]
 801435c:	bf00      	nop
			}
			break;
 801435e:	e008      	b.n	8014372 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014360:	89fb      	ldrh	r3, [r7, #14]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d195      	bne.n	8014292 <ff_wtoupper+0x1a>
 8014366:	8a3b      	ldrh	r3, [r7, #16]
 8014368:	005b      	lsls	r3, r3, #1
 801436a:	697a      	ldr	r2, [r7, #20]
 801436c:	4413      	add	r3, r2
 801436e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014370:	e78f      	b.n	8014292 <ff_wtoupper+0x1a>
			break;
 8014372:	bf00      	nop
	}

	return chr;
 8014374:	88fb      	ldrh	r3, [r7, #6]
}
 8014376:	4618      	mov	r0, r3
 8014378:	371c      	adds	r7, #28
 801437a:	46bd      	mov	sp, r7
 801437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014380:	4770      	bx	lr
 8014382:	bf00      	nop
 8014384:	08017794 	.word	0x08017794
 8014388:	08017988 	.word	0x08017988

0801438c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f000 fe85 	bl	80150a4 <malloc>
 801439a:	4603      	mov	r3, r0
}
 801439c:	4618      	mov	r0, r3
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f000 fe81 	bl	80150b4 <free>
}
 80143b2:	bf00      	nop
 80143b4:	3708      	adds	r7, #8
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}
	...

080143bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80143c0:	2200      	movs	r2, #0
 80143c2:	4912      	ldr	r1, [pc, #72]	; (801440c <MX_USB_DEVICE_Init+0x50>)
 80143c4:	4812      	ldr	r0, [pc, #72]	; (8014410 <MX_USB_DEVICE_Init+0x54>)
 80143c6:	f7fb f9ab 	bl	800f720 <USBD_Init>
 80143ca:	4603      	mov	r3, r0
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d001      	beq.n	80143d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80143d0:	f7ee ffc1 	bl	8003356 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80143d4:	490f      	ldr	r1, [pc, #60]	; (8014414 <MX_USB_DEVICE_Init+0x58>)
 80143d6:	480e      	ldr	r0, [pc, #56]	; (8014410 <MX_USB_DEVICE_Init+0x54>)
 80143d8:	f7fb f9d2 	bl	800f780 <USBD_RegisterClass>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d001      	beq.n	80143e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80143e2:	f7ee ffb8 	bl	8003356 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80143e6:	490c      	ldr	r1, [pc, #48]	; (8014418 <MX_USB_DEVICE_Init+0x5c>)
 80143e8:	4809      	ldr	r0, [pc, #36]	; (8014410 <MX_USB_DEVICE_Init+0x54>)
 80143ea:	f7fb f8f3 	bl	800f5d4 <USBD_CDC_RegisterInterface>
 80143ee:	4603      	mov	r3, r0
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d001      	beq.n	80143f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80143f4:	f7ee ffaf 	bl	8003356 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80143f8:	4805      	ldr	r0, [pc, #20]	; (8014410 <MX_USB_DEVICE_Init+0x54>)
 80143fa:	f7fb f9e8 	bl	800f7ce <USBD_Start>
 80143fe:	4603      	mov	r3, r0
 8014400:	2b00      	cmp	r3, #0
 8014402:	d001      	beq.n	8014408 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014404:	f7ee ffa7 	bl	8003356 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014408:	bf00      	nop
 801440a:	bd80      	pop	{r7, pc}
 801440c:	20000270 	.word	0x20000270
 8014410:	20001738 	.word	0x20001738
 8014414:	20000158 	.word	0x20000158
 8014418:	2000025c 	.word	0x2000025c

0801441c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014420:	2200      	movs	r2, #0
 8014422:	4905      	ldr	r1, [pc, #20]	; (8014438 <CDC_Init_FS+0x1c>)
 8014424:	4805      	ldr	r0, [pc, #20]	; (801443c <CDC_Init_FS+0x20>)
 8014426:	f7fb f8ea 	bl	800f5fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801442a:	4905      	ldr	r1, [pc, #20]	; (8014440 <CDC_Init_FS+0x24>)
 801442c:	4803      	ldr	r0, [pc, #12]	; (801443c <CDC_Init_FS+0x20>)
 801442e:	f7fb f904 	bl	800f63a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014432:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014434:	4618      	mov	r0, r3
 8014436:	bd80      	pop	{r7, pc}
 8014438:	20002208 	.word	0x20002208
 801443c:	20001738 	.word	0x20001738
 8014440:	20001a08 	.word	0x20001a08

08014444 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014444:	b480      	push	{r7}
 8014446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014448:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801444a:	4618      	mov	r0, r3
 801444c:	46bd      	mov	sp, r7
 801444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014452:	4770      	bx	lr

08014454 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
 801445a:	4603      	mov	r3, r0
 801445c:	6039      	str	r1, [r7, #0]
 801445e:	71fb      	strb	r3, [r7, #7]
 8014460:	4613      	mov	r3, r2
 8014462:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014464:	79fb      	ldrb	r3, [r7, #7]
 8014466:	2b23      	cmp	r3, #35	; 0x23
 8014468:	d84a      	bhi.n	8014500 <CDC_Control_FS+0xac>
 801446a:	a201      	add	r2, pc, #4	; (adr r2, 8014470 <CDC_Control_FS+0x1c>)
 801446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014470:	08014501 	.word	0x08014501
 8014474:	08014501 	.word	0x08014501
 8014478:	08014501 	.word	0x08014501
 801447c:	08014501 	.word	0x08014501
 8014480:	08014501 	.word	0x08014501
 8014484:	08014501 	.word	0x08014501
 8014488:	08014501 	.word	0x08014501
 801448c:	08014501 	.word	0x08014501
 8014490:	08014501 	.word	0x08014501
 8014494:	08014501 	.word	0x08014501
 8014498:	08014501 	.word	0x08014501
 801449c:	08014501 	.word	0x08014501
 80144a0:	08014501 	.word	0x08014501
 80144a4:	08014501 	.word	0x08014501
 80144a8:	08014501 	.word	0x08014501
 80144ac:	08014501 	.word	0x08014501
 80144b0:	08014501 	.word	0x08014501
 80144b4:	08014501 	.word	0x08014501
 80144b8:	08014501 	.word	0x08014501
 80144bc:	08014501 	.word	0x08014501
 80144c0:	08014501 	.word	0x08014501
 80144c4:	08014501 	.word	0x08014501
 80144c8:	08014501 	.word	0x08014501
 80144cc:	08014501 	.word	0x08014501
 80144d0:	08014501 	.word	0x08014501
 80144d4:	08014501 	.word	0x08014501
 80144d8:	08014501 	.word	0x08014501
 80144dc:	08014501 	.word	0x08014501
 80144e0:	08014501 	.word	0x08014501
 80144e4:	08014501 	.word	0x08014501
 80144e8:	08014501 	.word	0x08014501
 80144ec:	08014501 	.word	0x08014501
 80144f0:	08014501 	.word	0x08014501
 80144f4:	08014501 	.word	0x08014501
 80144f8:	08014501 	.word	0x08014501
 80144fc:	08014501 	.word	0x08014501
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014500:	bf00      	nop
  }

  return (USBD_OK);
 8014502:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014504:	4618      	mov	r0, r3
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr

08014510 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b082      	sub	sp, #8
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801451a:	6879      	ldr	r1, [r7, #4]
 801451c:	4805      	ldr	r0, [pc, #20]	; (8014534 <CDC_Receive_FS+0x24>)
 801451e:	f7fb f88c 	bl	800f63a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014522:	4804      	ldr	r0, [pc, #16]	; (8014534 <CDC_Receive_FS+0x24>)
 8014524:	f7fb f8d2 	bl	800f6cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014528:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801452a:	4618      	mov	r0, r3
 801452c:	3708      	adds	r7, #8
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}
 8014532:	bf00      	nop
 8014534:	20001738 	.word	0x20001738

08014538 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	460b      	mov	r3, r1
 8014542:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014544:	2300      	movs	r3, #0
 8014546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014548:	4b0d      	ldr	r3, [pc, #52]	; (8014580 <CDC_Transmit_FS+0x48>)
 801454a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801454e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014556:	2b00      	cmp	r3, #0
 8014558:	d001      	beq.n	801455e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801455a:	2301      	movs	r3, #1
 801455c:	e00b      	b.n	8014576 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801455e:	887b      	ldrh	r3, [r7, #2]
 8014560:	461a      	mov	r2, r3
 8014562:	6879      	ldr	r1, [r7, #4]
 8014564:	4806      	ldr	r0, [pc, #24]	; (8014580 <CDC_Transmit_FS+0x48>)
 8014566:	f7fb f84a 	bl	800f5fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801456a:	4805      	ldr	r0, [pc, #20]	; (8014580 <CDC_Transmit_FS+0x48>)
 801456c:	f7fb f87e 	bl	800f66c <USBD_CDC_TransmitPacket>
 8014570:	4603      	mov	r3, r0
 8014572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014574:	7bfb      	ldrb	r3, [r7, #15]
}
 8014576:	4618      	mov	r0, r3
 8014578:	3710      	adds	r7, #16
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	20001738 	.word	0x20001738

08014584 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014584:	b480      	push	{r7}
 8014586:	b087      	sub	sp, #28
 8014588:	af00      	add	r7, sp, #0
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	60b9      	str	r1, [r7, #8]
 801458e:	4613      	mov	r3, r2
 8014590:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014592:	2300      	movs	r3, #0
 8014594:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801459a:	4618      	mov	r0, r3
 801459c:	371c      	adds	r7, #28
 801459e:	46bd      	mov	sp, r7
 80145a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a4:	4770      	bx	lr
	...

080145a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80145a8:	b480      	push	{r7}
 80145aa:	b083      	sub	sp, #12
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	4603      	mov	r3, r0
 80145b0:	6039      	str	r1, [r7, #0]
 80145b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	2212      	movs	r2, #18
 80145b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80145ba:	4b03      	ldr	r3, [pc, #12]	; (80145c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80145bc:	4618      	mov	r0, r3
 80145be:	370c      	adds	r7, #12
 80145c0:	46bd      	mov	sp, r7
 80145c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c6:	4770      	bx	lr
 80145c8:	20000290 	.word	0x20000290

080145cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80145cc:	b480      	push	{r7}
 80145ce:	b083      	sub	sp, #12
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	4603      	mov	r3, r0
 80145d4:	6039      	str	r1, [r7, #0]
 80145d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	2204      	movs	r2, #4
 80145dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80145de:	4b03      	ldr	r3, [pc, #12]	; (80145ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	370c      	adds	r7, #12
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr
 80145ec:	200002b0 	.word	0x200002b0

080145f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b082      	sub	sp, #8
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	4603      	mov	r3, r0
 80145f8:	6039      	str	r1, [r7, #0]
 80145fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80145fc:	79fb      	ldrb	r3, [r7, #7]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d105      	bne.n	801460e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014602:	683a      	ldr	r2, [r7, #0]
 8014604:	4907      	ldr	r1, [pc, #28]	; (8014624 <USBD_FS_ProductStrDescriptor+0x34>)
 8014606:	4808      	ldr	r0, [pc, #32]	; (8014628 <USBD_FS_ProductStrDescriptor+0x38>)
 8014608:	f7fc f93d 	bl	8010886 <USBD_GetString>
 801460c:	e004      	b.n	8014618 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801460e:	683a      	ldr	r2, [r7, #0]
 8014610:	4904      	ldr	r1, [pc, #16]	; (8014624 <USBD_FS_ProductStrDescriptor+0x34>)
 8014612:	4805      	ldr	r0, [pc, #20]	; (8014628 <USBD_FS_ProductStrDescriptor+0x38>)
 8014614:	f7fc f937 	bl	8010886 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014618:	4b02      	ldr	r3, [pc, #8]	; (8014624 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801461a:	4618      	mov	r0, r3
 801461c:	3708      	adds	r7, #8
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
 8014622:	bf00      	nop
 8014624:	20002a08 	.word	0x20002a08
 8014628:	08017194 	.word	0x08017194

0801462c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b082      	sub	sp, #8
 8014630:	af00      	add	r7, sp, #0
 8014632:	4603      	mov	r3, r0
 8014634:	6039      	str	r1, [r7, #0]
 8014636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014638:	683a      	ldr	r2, [r7, #0]
 801463a:	4904      	ldr	r1, [pc, #16]	; (801464c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801463c:	4804      	ldr	r0, [pc, #16]	; (8014650 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801463e:	f7fc f922 	bl	8010886 <USBD_GetString>
  return USBD_StrDesc;
 8014642:	4b02      	ldr	r3, [pc, #8]	; (801464c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014644:	4618      	mov	r0, r3
 8014646:	3708      	adds	r7, #8
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}
 801464c:	20002a08 	.word	0x20002a08
 8014650:	080171ac 	.word	0x080171ac

08014654 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	4603      	mov	r3, r0
 801465c:	6039      	str	r1, [r7, #0]
 801465e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	221a      	movs	r2, #26
 8014664:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014666:	f000 f855 	bl	8014714 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801466a:	4b02      	ldr	r3, [pc, #8]	; (8014674 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801466c:	4618      	mov	r0, r3
 801466e:	3708      	adds	r7, #8
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	200002b4 	.word	0x200002b4

08014678 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	4603      	mov	r3, r0
 8014680:	6039      	str	r1, [r7, #0]
 8014682:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014684:	79fb      	ldrb	r3, [r7, #7]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d105      	bne.n	8014696 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801468a:	683a      	ldr	r2, [r7, #0]
 801468c:	4907      	ldr	r1, [pc, #28]	; (80146ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801468e:	4808      	ldr	r0, [pc, #32]	; (80146b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014690:	f7fc f8f9 	bl	8010886 <USBD_GetString>
 8014694:	e004      	b.n	80146a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014696:	683a      	ldr	r2, [r7, #0]
 8014698:	4904      	ldr	r1, [pc, #16]	; (80146ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801469a:	4805      	ldr	r0, [pc, #20]	; (80146b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801469c:	f7fc f8f3 	bl	8010886 <USBD_GetString>
  }
  return USBD_StrDesc;
 80146a0:	4b02      	ldr	r3, [pc, #8]	; (80146ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3708      	adds	r7, #8
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	20002a08 	.word	0x20002a08
 80146b0:	080171c0 	.word	0x080171c0

080146b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	4603      	mov	r3, r0
 80146bc:	6039      	str	r1, [r7, #0]
 80146be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80146c0:	79fb      	ldrb	r3, [r7, #7]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d105      	bne.n	80146d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80146c6:	683a      	ldr	r2, [r7, #0]
 80146c8:	4907      	ldr	r1, [pc, #28]	; (80146e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80146ca:	4808      	ldr	r0, [pc, #32]	; (80146ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80146cc:	f7fc f8db 	bl	8010886 <USBD_GetString>
 80146d0:	e004      	b.n	80146dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80146d2:	683a      	ldr	r2, [r7, #0]
 80146d4:	4904      	ldr	r1, [pc, #16]	; (80146e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80146d6:	4805      	ldr	r0, [pc, #20]	; (80146ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80146d8:	f7fc f8d5 	bl	8010886 <USBD_GetString>
  }
  return USBD_StrDesc;
 80146dc:	4b02      	ldr	r3, [pc, #8]	; (80146e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	20002a08 	.word	0x20002a08
 80146ec:	080171cc 	.word	0x080171cc

080146f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146f0:	b480      	push	{r7}
 80146f2:	b083      	sub	sp, #12
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	4603      	mov	r3, r0
 80146f8:	6039      	str	r1, [r7, #0]
 80146fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	220c      	movs	r2, #12
 8014700:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8014702:	4b03      	ldr	r3, [pc, #12]	; (8014710 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8014704:	4618      	mov	r0, r3
 8014706:	370c      	adds	r7, #12
 8014708:	46bd      	mov	sp, r7
 801470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470e:	4770      	bx	lr
 8014710:	200002a4 	.word	0x200002a4

08014714 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b084      	sub	sp, #16
 8014718:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801471a:	4b0f      	ldr	r3, [pc, #60]	; (8014758 <Get_SerialNum+0x44>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014720:	4b0e      	ldr	r3, [pc, #56]	; (801475c <Get_SerialNum+0x48>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014726:	4b0e      	ldr	r3, [pc, #56]	; (8014760 <Get_SerialNum+0x4c>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801472c:	68fa      	ldr	r2, [r7, #12]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	4413      	add	r3, r2
 8014732:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d009      	beq.n	801474e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801473a:	2208      	movs	r2, #8
 801473c:	4909      	ldr	r1, [pc, #36]	; (8014764 <Get_SerialNum+0x50>)
 801473e:	68f8      	ldr	r0, [r7, #12]
 8014740:	f000 f814 	bl	801476c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014744:	2204      	movs	r2, #4
 8014746:	4908      	ldr	r1, [pc, #32]	; (8014768 <Get_SerialNum+0x54>)
 8014748:	68b8      	ldr	r0, [r7, #8]
 801474a:	f000 f80f 	bl	801476c <IntToUnicode>
  }
}
 801474e:	bf00      	nop
 8014750:	3710      	adds	r7, #16
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
 8014756:	bf00      	nop
 8014758:	1fff7590 	.word	0x1fff7590
 801475c:	1fff7594 	.word	0x1fff7594
 8014760:	1fff7598 	.word	0x1fff7598
 8014764:	200002b6 	.word	0x200002b6
 8014768:	200002c6 	.word	0x200002c6

0801476c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801476c:	b480      	push	{r7}
 801476e:	b087      	sub	sp, #28
 8014770:	af00      	add	r7, sp, #0
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	4613      	mov	r3, r2
 8014778:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801477a:	2300      	movs	r3, #0
 801477c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801477e:	2300      	movs	r3, #0
 8014780:	75fb      	strb	r3, [r7, #23]
 8014782:	e027      	b.n	80147d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	0f1b      	lsrs	r3, r3, #28
 8014788:	2b09      	cmp	r3, #9
 801478a:	d80b      	bhi.n	80147a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	0f1b      	lsrs	r3, r3, #28
 8014790:	b2da      	uxtb	r2, r3
 8014792:	7dfb      	ldrb	r3, [r7, #23]
 8014794:	005b      	lsls	r3, r3, #1
 8014796:	4619      	mov	r1, r3
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	440b      	add	r3, r1
 801479c:	3230      	adds	r2, #48	; 0x30
 801479e:	b2d2      	uxtb	r2, r2
 80147a0:	701a      	strb	r2, [r3, #0]
 80147a2:	e00a      	b.n	80147ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	0f1b      	lsrs	r3, r3, #28
 80147a8:	b2da      	uxtb	r2, r3
 80147aa:	7dfb      	ldrb	r3, [r7, #23]
 80147ac:	005b      	lsls	r3, r3, #1
 80147ae:	4619      	mov	r1, r3
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	440b      	add	r3, r1
 80147b4:	3237      	adds	r2, #55	; 0x37
 80147b6:	b2d2      	uxtb	r2, r2
 80147b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	011b      	lsls	r3, r3, #4
 80147be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80147c0:	7dfb      	ldrb	r3, [r7, #23]
 80147c2:	005b      	lsls	r3, r3, #1
 80147c4:	3301      	adds	r3, #1
 80147c6:	68ba      	ldr	r2, [r7, #8]
 80147c8:	4413      	add	r3, r2
 80147ca:	2200      	movs	r2, #0
 80147cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80147ce:	7dfb      	ldrb	r3, [r7, #23]
 80147d0:	3301      	adds	r3, #1
 80147d2:	75fb      	strb	r3, [r7, #23]
 80147d4:	7dfa      	ldrb	r2, [r7, #23]
 80147d6:	79fb      	ldrb	r3, [r7, #7]
 80147d8:	429a      	cmp	r2, r3
 80147da:	d3d3      	bcc.n	8014784 <IntToUnicode+0x18>
  }
}
 80147dc:	bf00      	nop
 80147de:	bf00      	nop
 80147e0:	371c      	adds	r7, #28
 80147e2:	46bd      	mov	sp, r7
 80147e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e8:	4770      	bx	lr
	...

080147ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b0b2      	sub	sp, #200	; 0xc8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80147f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80147f8:	2200      	movs	r2, #0
 80147fa:	601a      	str	r2, [r3, #0]
 80147fc:	605a      	str	r2, [r3, #4]
 80147fe:	609a      	str	r2, [r3, #8]
 8014800:	60da      	str	r2, [r3, #12]
 8014802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8014804:	f107 0318 	add.w	r3, r7, #24
 8014808:	229c      	movs	r2, #156	; 0x9c
 801480a:	2100      	movs	r1, #0
 801480c:	4618      	mov	r0, r3
 801480e:	f000 fc59 	bl	80150c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801481a:	d163      	bne.n	80148e4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801481c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014820:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8014822:	2300      	movs	r3, #0
 8014824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8014828:	f107 0318 	add.w	r3, r7, #24
 801482c:	4618      	mov	r0, r3
 801482e:	f7f3 fb83 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 8014832:	4603      	mov	r3, r0
 8014834:	2b00      	cmp	r3, #0
 8014836:	d001      	beq.n	801483c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8014838:	f7ee fd8d 	bl	8003356 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801483c:	4b2b      	ldr	r3, [pc, #172]	; (80148ec <HAL_PCD_MspInit+0x100>)
 801483e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014840:	4a2a      	ldr	r2, [pc, #168]	; (80148ec <HAL_PCD_MspInit+0x100>)
 8014842:	f043 0301 	orr.w	r3, r3, #1
 8014846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014848:	4b28      	ldr	r3, [pc, #160]	; (80148ec <HAL_PCD_MspInit+0x100>)
 801484a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801484c:	f003 0301 	and.w	r3, r3, #1
 8014850:	617b      	str	r3, [r7, #20]
 8014852:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 8014854:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801485c:	2302      	movs	r3, #2
 801485e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014862:	2300      	movs	r3, #0
 8014864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014868:	2303      	movs	r3, #3
 801486a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801486e:	230a      	movs	r3, #10
 8014870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014874:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014878:	4619      	mov	r1, r3
 801487a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801487e:	f7f0 feeb 	bl	8005658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014882:	4b1a      	ldr	r3, [pc, #104]	; (80148ec <HAL_PCD_MspInit+0x100>)
 8014884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014886:	4a19      	ldr	r2, [pc, #100]	; (80148ec <HAL_PCD_MspInit+0x100>)
 8014888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801488c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801488e:	4b17      	ldr	r3, [pc, #92]	; (80148ec <HAL_PCD_MspInit+0x100>)
 8014890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014896:	613b      	str	r3, [r7, #16]
 8014898:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801489a:	4b14      	ldr	r3, [pc, #80]	; (80148ec <HAL_PCD_MspInit+0x100>)
 801489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d114      	bne.n	80148d0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80148a6:	4b11      	ldr	r3, [pc, #68]	; (80148ec <HAL_PCD_MspInit+0x100>)
 80148a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148aa:	4a10      	ldr	r2, [pc, #64]	; (80148ec <HAL_PCD_MspInit+0x100>)
 80148ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80148b0:	6593      	str	r3, [r2, #88]	; 0x58
 80148b2:	4b0e      	ldr	r3, [pc, #56]	; (80148ec <HAL_PCD_MspInit+0x100>)
 80148b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80148ba:	60fb      	str	r3, [r7, #12]
 80148bc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80148be:	f7f2 fc47 	bl	8007150 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80148c2:	4b0a      	ldr	r3, [pc, #40]	; (80148ec <HAL_PCD_MspInit+0x100>)
 80148c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148c6:	4a09      	ldr	r2, [pc, #36]	; (80148ec <HAL_PCD_MspInit+0x100>)
 80148c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80148cc:	6593      	str	r3, [r2, #88]	; 0x58
 80148ce:	e001      	b.n	80148d4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80148d0:	f7f2 fc3e 	bl	8007150 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80148d4:	2200      	movs	r2, #0
 80148d6:	2100      	movs	r1, #0
 80148d8:	2043      	movs	r0, #67	; 0x43
 80148da:	f7f0 faa0 	bl	8004e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80148de:	2043      	movs	r0, #67	; 0x43
 80148e0:	f7f0 fab9 	bl	8004e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80148e4:	bf00      	nop
 80148e6:	37c8      	adds	r7, #200	; 0xc8
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}
 80148ec:	40021000 	.word	0x40021000

080148f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b082      	sub	sp, #8
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8014904:	4619      	mov	r1, r3
 8014906:	4610      	mov	r0, r2
 8014908:	f7fa ffac 	bl	800f864 <USBD_LL_SetupStage>
}
 801490c:	bf00      	nop
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
 801491c:	460b      	mov	r3, r1
 801491e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014926:	78fa      	ldrb	r2, [r7, #3]
 8014928:	6879      	ldr	r1, [r7, #4]
 801492a:	4613      	mov	r3, r2
 801492c:	00db      	lsls	r3, r3, #3
 801492e:	4413      	add	r3, r2
 8014930:	009b      	lsls	r3, r3, #2
 8014932:	440b      	add	r3, r1
 8014934:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014938:	681a      	ldr	r2, [r3, #0]
 801493a:	78fb      	ldrb	r3, [r7, #3]
 801493c:	4619      	mov	r1, r3
 801493e:	f7fa ffe6 	bl	800f90e <USBD_LL_DataOutStage>
}
 8014942:	bf00      	nop
 8014944:	3708      	adds	r7, #8
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}

0801494a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801494a:	b580      	push	{r7, lr}
 801494c:	b082      	sub	sp, #8
 801494e:	af00      	add	r7, sp, #0
 8014950:	6078      	str	r0, [r7, #4]
 8014952:	460b      	mov	r3, r1
 8014954:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801495c:	78fa      	ldrb	r2, [r7, #3]
 801495e:	6879      	ldr	r1, [r7, #4]
 8014960:	4613      	mov	r3, r2
 8014962:	00db      	lsls	r3, r3, #3
 8014964:	4413      	add	r3, r2
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	440b      	add	r3, r1
 801496a:	334c      	adds	r3, #76	; 0x4c
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	78fb      	ldrb	r3, [r7, #3]
 8014970:	4619      	mov	r1, r3
 8014972:	f7fb f82f 	bl	800f9d4 <USBD_LL_DataInStage>
}
 8014976:	bf00      	nop
 8014978:	3708      	adds	r7, #8
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}

0801497e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801497e:	b580      	push	{r7, lr}
 8014980:	b082      	sub	sp, #8
 8014982:	af00      	add	r7, sp, #0
 8014984:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801498c:	4618      	mov	r0, r3
 801498e:	f7fb f943 	bl	800fc18 <USBD_LL_SOF>
}
 8014992:	bf00      	nop
 8014994:	3708      	adds	r7, #8
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}

0801499a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801499a:	b580      	push	{r7, lr}
 801499c:	b084      	sub	sp, #16
 801499e:	af00      	add	r7, sp, #0
 80149a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80149a2:	2301      	movs	r3, #1
 80149a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	68db      	ldr	r3, [r3, #12]
 80149aa:	2b02      	cmp	r3, #2
 80149ac:	d001      	beq.n	80149b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80149ae:	f7ee fcd2 	bl	8003356 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80149b8:	7bfa      	ldrb	r2, [r7, #15]
 80149ba:	4611      	mov	r1, r2
 80149bc:	4618      	mov	r0, r3
 80149be:	f7fb f8ed 	bl	800fb9c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7fb f899 	bl	800fb00 <USBD_LL_Reset>
}
 80149ce:	bf00      	nop
 80149d0:	3710      	adds	r7, #16
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
	...

080149d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	6812      	ldr	r2, [r2, #0]
 80149ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80149f2:	f043 0301 	orr.w	r3, r3, #1
 80149f6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7fb f8dc 	bl	800fbbc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6a1b      	ldr	r3, [r3, #32]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d005      	beq.n	8014a18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a0c:	4b04      	ldr	r3, [pc, #16]	; (8014a20 <HAL_PCD_SuspendCallback+0x48>)
 8014a0e:	691b      	ldr	r3, [r3, #16]
 8014a10:	4a03      	ldr	r2, [pc, #12]	; (8014a20 <HAL_PCD_SuspendCallback+0x48>)
 8014a12:	f043 0306 	orr.w	r3, r3, #6
 8014a16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014a18:	bf00      	nop
 8014a1a:	3708      	adds	r7, #8
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}
 8014a20:	e000ed00 	.word	0xe000ed00

08014a24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	6812      	ldr	r2, [r2, #0]
 8014a3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014a3e:	f023 0301 	bic.w	r3, r3, #1
 8014a42:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6a1b      	ldr	r3, [r3, #32]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d007      	beq.n	8014a5c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a4c:	4b08      	ldr	r3, [pc, #32]	; (8014a70 <HAL_PCD_ResumeCallback+0x4c>)
 8014a4e:	691b      	ldr	r3, [r3, #16]
 8014a50:	4a07      	ldr	r2, [pc, #28]	; (8014a70 <HAL_PCD_ResumeCallback+0x4c>)
 8014a52:	f023 0306 	bic.w	r3, r3, #6
 8014a56:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014a58:	f000 faf4 	bl	8015044 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7fb f8c0 	bl	800fbe8 <USBD_LL_Resume>
}
 8014a68:	bf00      	nop
 8014a6a:	3708      	adds	r7, #8
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	e000ed00 	.word	0xe000ed00

08014a74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b082      	sub	sp, #8
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014a86:	78fa      	ldrb	r2, [r7, #3]
 8014a88:	4611      	mov	r1, r2
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7fb f90c 	bl	800fca8 <USBD_LL_IsoOUTIncomplete>
}
 8014a90:	bf00      	nop
 8014a92:	3708      	adds	r7, #8
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	460b      	mov	r3, r1
 8014aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014aaa:	78fa      	ldrb	r2, [r7, #3]
 8014aac:	4611      	mov	r1, r2
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fb f8d4 	bl	800fc5c <USBD_LL_IsoINIncomplete>
}
 8014ab4:	bf00      	nop
 8014ab6:	3708      	adds	r7, #8
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b082      	sub	sp, #8
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7fb f912 	bl	800fcf4 <USBD_LL_DevConnected>
}
 8014ad0:	bf00      	nop
 8014ad2:	3708      	adds	r7, #8
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7fb f90f 	bl	800fd0a <USBD_LL_DevDisconnected>
}
 8014aec:	bf00      	nop
 8014aee:	3708      	adds	r7, #8
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}

08014af4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	781b      	ldrb	r3, [r3, #0]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d139      	bne.n	8014b78 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014b04:	4a1f      	ldr	r2, [pc, #124]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	4a1d      	ldr	r2, [pc, #116]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014b14:	4b1b      	ldr	r3, [pc, #108]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014b1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8014b1c:	4b19      	ldr	r3, [pc, #100]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b1e:	2206      	movs	r2, #6
 8014b20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014b22:	4b18      	ldr	r3, [pc, #96]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b24:	2202      	movs	r2, #2
 8014b26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014b28:	4b16      	ldr	r3, [pc, #88]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014b2e:	4b15      	ldr	r3, [pc, #84]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b30:	2200      	movs	r2, #0
 8014b32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014b34:	4b13      	ldr	r3, [pc, #76]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b36:	2200      	movs	r2, #0
 8014b38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8014b3a:	4b12      	ldr	r3, [pc, #72]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b3c:	2201      	movs	r2, #1
 8014b3e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014b40:	4b10      	ldr	r3, [pc, #64]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b42:	2200      	movs	r2, #0
 8014b44:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014b46:	4b0f      	ldr	r3, [pc, #60]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b48:	2200      	movs	r2, #0
 8014b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014b4c:	480d      	ldr	r0, [pc, #52]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b4e:	f7f1 f86b 	bl	8005c28 <HAL_PCD_Init>
 8014b52:	4603      	mov	r3, r0
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d001      	beq.n	8014b5c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8014b58:	f7ee fbfd 	bl	8003356 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014b5c:	2180      	movs	r1, #128	; 0x80
 8014b5e:	4809      	ldr	r0, [pc, #36]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b60:	f7f2 f9ed 	bl	8006f3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014b64:	2240      	movs	r2, #64	; 0x40
 8014b66:	2100      	movs	r1, #0
 8014b68:	4806      	ldr	r0, [pc, #24]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b6a:	f7f2 f9a1 	bl	8006eb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014b6e:	2280      	movs	r2, #128	; 0x80
 8014b70:	2101      	movs	r1, #1
 8014b72:	4804      	ldr	r0, [pc, #16]	; (8014b84 <USBD_LL_Init+0x90>)
 8014b74:	f7f2 f99c 	bl	8006eb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014b78:	2300      	movs	r3, #0
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3708      	adds	r7, #8
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}
 8014b82:	bf00      	nop
 8014b84:	20002c08 	.word	0x20002c08

08014b88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b90:	2300      	movs	r3, #0
 8014b92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b94:	2300      	movs	r3, #0
 8014b96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7f1 f966 	bl	8005e70 <HAL_PCD_Start>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014ba8:	7bbb      	ldrb	r3, [r7, #14]
 8014baa:	2b03      	cmp	r3, #3
 8014bac:	d816      	bhi.n	8014bdc <USBD_LL_Start+0x54>
 8014bae:	a201      	add	r2, pc, #4	; (adr r2, 8014bb4 <USBD_LL_Start+0x2c>)
 8014bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bb4:	08014bc5 	.word	0x08014bc5
 8014bb8:	08014bcb 	.word	0x08014bcb
 8014bbc:	08014bd1 	.word	0x08014bd1
 8014bc0:	08014bd7 	.word	0x08014bd7
    case HAL_OK :
      usb_status = USBD_OK;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8014bc8:	e00b      	b.n	8014be2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014bca:	2303      	movs	r3, #3
 8014bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8014bce:	e008      	b.n	8014be2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8014bd4:	e005      	b.n	8014be2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014bd6:	2303      	movs	r3, #3
 8014bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8014bda:	e002      	b.n	8014be2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014bdc:	2303      	movs	r3, #3
 8014bde:	73fb      	strb	r3, [r7, #15]
    break;
 8014be0:	bf00      	nop
  }
  return usb_status;
 8014be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	3710      	adds	r7, #16
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b084      	sub	sp, #16
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	4608      	mov	r0, r1
 8014bf6:	4611      	mov	r1, r2
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	70fb      	strb	r3, [r7, #3]
 8014bfe:	460b      	mov	r3, r1
 8014c00:	70bb      	strb	r3, [r7, #2]
 8014c02:	4613      	mov	r3, r2
 8014c04:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c06:	2300      	movs	r3, #0
 8014c08:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014c14:	78bb      	ldrb	r3, [r7, #2]
 8014c16:	883a      	ldrh	r2, [r7, #0]
 8014c18:	78f9      	ldrb	r1, [r7, #3]
 8014c1a:	f7f1 fe10 	bl	800683e <HAL_PCD_EP_Open>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014c22:	7bbb      	ldrb	r3, [r7, #14]
 8014c24:	2b03      	cmp	r3, #3
 8014c26:	d817      	bhi.n	8014c58 <USBD_LL_OpenEP+0x6c>
 8014c28:	a201      	add	r2, pc, #4	; (adr r2, 8014c30 <USBD_LL_OpenEP+0x44>)
 8014c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c2e:	bf00      	nop
 8014c30:	08014c41 	.word	0x08014c41
 8014c34:	08014c47 	.word	0x08014c47
 8014c38:	08014c4d 	.word	0x08014c4d
 8014c3c:	08014c53 	.word	0x08014c53
    case HAL_OK :
      usb_status = USBD_OK;
 8014c40:	2300      	movs	r3, #0
 8014c42:	73fb      	strb	r3, [r7, #15]
    break;
 8014c44:	e00b      	b.n	8014c5e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014c46:	2303      	movs	r3, #3
 8014c48:	73fb      	strb	r3, [r7, #15]
    break;
 8014c4a:	e008      	b.n	8014c5e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8014c50:	e005      	b.n	8014c5e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014c52:	2303      	movs	r3, #3
 8014c54:	73fb      	strb	r3, [r7, #15]
    break;
 8014c56:	e002      	b.n	8014c5e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8014c58:	2303      	movs	r3, #3
 8014c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8014c5c:	bf00      	nop
  }
  return usb_status;
 8014c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3710      	adds	r7, #16
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}

08014c68 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b084      	sub	sp, #16
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	460b      	mov	r3, r1
 8014c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c74:	2300      	movs	r3, #0
 8014c76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c82:	78fa      	ldrb	r2, [r7, #3]
 8014c84:	4611      	mov	r1, r2
 8014c86:	4618      	mov	r0, r3
 8014c88:	f7f1 fe41 	bl	800690e <HAL_PCD_EP_Close>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014c90:	7bbb      	ldrb	r3, [r7, #14]
 8014c92:	2b03      	cmp	r3, #3
 8014c94:	d816      	bhi.n	8014cc4 <USBD_LL_CloseEP+0x5c>
 8014c96:	a201      	add	r2, pc, #4	; (adr r2, 8014c9c <USBD_LL_CloseEP+0x34>)
 8014c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c9c:	08014cad 	.word	0x08014cad
 8014ca0:	08014cb3 	.word	0x08014cb3
 8014ca4:	08014cb9 	.word	0x08014cb9
 8014ca8:	08014cbf 	.word	0x08014cbf
    case HAL_OK :
      usb_status = USBD_OK;
 8014cac:	2300      	movs	r3, #0
 8014cae:	73fb      	strb	r3, [r7, #15]
    break;
 8014cb0:	e00b      	b.n	8014cca <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014cb2:	2303      	movs	r3, #3
 8014cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8014cb6:	e008      	b.n	8014cca <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014cb8:	2301      	movs	r3, #1
 8014cba:	73fb      	strb	r3, [r7, #15]
    break;
 8014cbc:	e005      	b.n	8014cca <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014cbe:	2303      	movs	r3, #3
 8014cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8014cc2:	e002      	b.n	8014cca <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014cc4:	2303      	movs	r3, #3
 8014cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8014cc8:	bf00      	nop
  }
  return usb_status;
 8014cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	3710      	adds	r7, #16
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}

08014cd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b084      	sub	sp, #16
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
 8014cdc:	460b      	mov	r3, r1
 8014cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014cee:	78fa      	ldrb	r2, [r7, #3]
 8014cf0:	4611      	mov	r1, r2
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7f1 fee8 	bl	8006ac8 <HAL_PCD_EP_SetStall>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014cfc:	7bbb      	ldrb	r3, [r7, #14]
 8014cfe:	2b03      	cmp	r3, #3
 8014d00:	d816      	bhi.n	8014d30 <USBD_LL_StallEP+0x5c>
 8014d02:	a201      	add	r2, pc, #4	; (adr r2, 8014d08 <USBD_LL_StallEP+0x34>)
 8014d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d08:	08014d19 	.word	0x08014d19
 8014d0c:	08014d1f 	.word	0x08014d1f
 8014d10:	08014d25 	.word	0x08014d25
 8014d14:	08014d2b 	.word	0x08014d2b
    case HAL_OK :
      usb_status = USBD_OK;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8014d1c:	e00b      	b.n	8014d36 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014d1e:	2303      	movs	r3, #3
 8014d20:	73fb      	strb	r3, [r7, #15]
    break;
 8014d22:	e008      	b.n	8014d36 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014d24:	2301      	movs	r3, #1
 8014d26:	73fb      	strb	r3, [r7, #15]
    break;
 8014d28:	e005      	b.n	8014d36 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014d2a:	2303      	movs	r3, #3
 8014d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8014d2e:	e002      	b.n	8014d36 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014d30:	2303      	movs	r3, #3
 8014d32:	73fb      	strb	r3, [r7, #15]
    break;
 8014d34:	bf00      	nop
  }
  return usb_status;
 8014d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3710      	adds	r7, #16
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}

08014d40 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b084      	sub	sp, #16
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
 8014d48:	460b      	mov	r3, r1
 8014d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d50:	2300      	movs	r3, #0
 8014d52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d5a:	78fa      	ldrb	r2, [r7, #3]
 8014d5c:	4611      	mov	r1, r2
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7f1 ff14 	bl	8006b8c <HAL_PCD_EP_ClrStall>
 8014d64:	4603      	mov	r3, r0
 8014d66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014d68:	7bbb      	ldrb	r3, [r7, #14]
 8014d6a:	2b03      	cmp	r3, #3
 8014d6c:	d816      	bhi.n	8014d9c <USBD_LL_ClearStallEP+0x5c>
 8014d6e:	a201      	add	r2, pc, #4	; (adr r2, 8014d74 <USBD_LL_ClearStallEP+0x34>)
 8014d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d74:	08014d85 	.word	0x08014d85
 8014d78:	08014d8b 	.word	0x08014d8b
 8014d7c:	08014d91 	.word	0x08014d91
 8014d80:	08014d97 	.word	0x08014d97
    case HAL_OK :
      usb_status = USBD_OK;
 8014d84:	2300      	movs	r3, #0
 8014d86:	73fb      	strb	r3, [r7, #15]
    break;
 8014d88:	e00b      	b.n	8014da2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014d8a:	2303      	movs	r3, #3
 8014d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8014d8e:	e008      	b.n	8014da2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014d90:	2301      	movs	r3, #1
 8014d92:	73fb      	strb	r3, [r7, #15]
    break;
 8014d94:	e005      	b.n	8014da2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014d96:	2303      	movs	r3, #3
 8014d98:	73fb      	strb	r3, [r7, #15]
    break;
 8014d9a:	e002      	b.n	8014da2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014d9c:	2303      	movs	r3, #3
 8014d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8014da0:	bf00      	nop
  }
  return usb_status;
 8014da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3710      	adds	r7, #16
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}

08014dac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014dac:	b480      	push	{r7}
 8014dae:	b085      	sub	sp, #20
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	460b      	mov	r3, r1
 8014db6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014dbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	da0b      	bge.n	8014de0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014dc8:	78fb      	ldrb	r3, [r7, #3]
 8014dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014dce:	68f9      	ldr	r1, [r7, #12]
 8014dd0:	4613      	mov	r3, r2
 8014dd2:	00db      	lsls	r3, r3, #3
 8014dd4:	4413      	add	r3, r2
 8014dd6:	009b      	lsls	r3, r3, #2
 8014dd8:	440b      	add	r3, r1
 8014dda:	333e      	adds	r3, #62	; 0x3e
 8014ddc:	781b      	ldrb	r3, [r3, #0]
 8014dde:	e00b      	b.n	8014df8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014de0:	78fb      	ldrb	r3, [r7, #3]
 8014de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014de6:	68f9      	ldr	r1, [r7, #12]
 8014de8:	4613      	mov	r3, r2
 8014dea:	00db      	lsls	r3, r3, #3
 8014dec:	4413      	add	r3, r2
 8014dee:	009b      	lsls	r3, r3, #2
 8014df0:	440b      	add	r3, r1
 8014df2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8014df6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3714      	adds	r7, #20
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr

08014e04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b084      	sub	sp, #16
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e10:	2300      	movs	r3, #0
 8014e12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e14:	2300      	movs	r3, #0
 8014e16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014e1e:	78fa      	ldrb	r2, [r7, #3]
 8014e20:	4611      	mov	r1, r2
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7f1 fce6 	bl	80067f4 <HAL_PCD_SetAddress>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014e2c:	7bbb      	ldrb	r3, [r7, #14]
 8014e2e:	2b03      	cmp	r3, #3
 8014e30:	d816      	bhi.n	8014e60 <USBD_LL_SetUSBAddress+0x5c>
 8014e32:	a201      	add	r2, pc, #4	; (adr r2, 8014e38 <USBD_LL_SetUSBAddress+0x34>)
 8014e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e38:	08014e49 	.word	0x08014e49
 8014e3c:	08014e4f 	.word	0x08014e4f
 8014e40:	08014e55 	.word	0x08014e55
 8014e44:	08014e5b 	.word	0x08014e5b
    case HAL_OK :
      usb_status = USBD_OK;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8014e4c:	e00b      	b.n	8014e66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014e4e:	2303      	movs	r3, #3
 8014e50:	73fb      	strb	r3, [r7, #15]
    break;
 8014e52:	e008      	b.n	8014e66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014e54:	2301      	movs	r3, #1
 8014e56:	73fb      	strb	r3, [r7, #15]
    break;
 8014e58:	e005      	b.n	8014e66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014e5a:	2303      	movs	r3, #3
 8014e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8014e5e:	e002      	b.n	8014e66 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014e60:	2303      	movs	r3, #3
 8014e62:	73fb      	strb	r3, [r7, #15]
    break;
 8014e64:	bf00      	nop
  }
  return usb_status;
 8014e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3710      	adds	r7, #16
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}

08014e70 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b086      	sub	sp, #24
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	607a      	str	r2, [r7, #4]
 8014e7a:	603b      	str	r3, [r7, #0]
 8014e7c:	460b      	mov	r3, r1
 8014e7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e80:	2300      	movs	r3, #0
 8014e82:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e84:	2300      	movs	r3, #0
 8014e86:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e8e:	7af9      	ldrb	r1, [r7, #11]
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	f7f1 fddb 	bl	8006a4e <HAL_PCD_EP_Transmit>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014e9c:	7dbb      	ldrb	r3, [r7, #22]
 8014e9e:	2b03      	cmp	r3, #3
 8014ea0:	d816      	bhi.n	8014ed0 <USBD_LL_Transmit+0x60>
 8014ea2:	a201      	add	r2, pc, #4	; (adr r2, 8014ea8 <USBD_LL_Transmit+0x38>)
 8014ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ea8:	08014eb9 	.word	0x08014eb9
 8014eac:	08014ebf 	.word	0x08014ebf
 8014eb0:	08014ec5 	.word	0x08014ec5
 8014eb4:	08014ecb 	.word	0x08014ecb
    case HAL_OK :
      usb_status = USBD_OK;
 8014eb8:	2300      	movs	r3, #0
 8014eba:	75fb      	strb	r3, [r7, #23]
    break;
 8014ebc:	e00b      	b.n	8014ed6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014ebe:	2303      	movs	r3, #3
 8014ec0:	75fb      	strb	r3, [r7, #23]
    break;
 8014ec2:	e008      	b.n	8014ed6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014ec4:	2301      	movs	r3, #1
 8014ec6:	75fb      	strb	r3, [r7, #23]
    break;
 8014ec8:	e005      	b.n	8014ed6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014eca:	2303      	movs	r3, #3
 8014ecc:	75fb      	strb	r3, [r7, #23]
    break;
 8014ece:	e002      	b.n	8014ed6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8014ed0:	2303      	movs	r3, #3
 8014ed2:	75fb      	strb	r3, [r7, #23]
    break;
 8014ed4:	bf00      	nop
  }
  return usb_status;
 8014ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3718      	adds	r7, #24
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}

08014ee0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b086      	sub	sp, #24
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	607a      	str	r2, [r7, #4]
 8014eea:	603b      	str	r3, [r7, #0]
 8014eec:	460b      	mov	r3, r1
 8014eee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014efe:	7af9      	ldrb	r1, [r7, #11]
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	687a      	ldr	r2, [r7, #4]
 8014f04:	f7f1 fd4d 	bl	80069a2 <HAL_PCD_EP_Receive>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014f0c:	7dbb      	ldrb	r3, [r7, #22]
 8014f0e:	2b03      	cmp	r3, #3
 8014f10:	d816      	bhi.n	8014f40 <USBD_LL_PrepareReceive+0x60>
 8014f12:	a201      	add	r2, pc, #4	; (adr r2, 8014f18 <USBD_LL_PrepareReceive+0x38>)
 8014f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f18:	08014f29 	.word	0x08014f29
 8014f1c:	08014f2f 	.word	0x08014f2f
 8014f20:	08014f35 	.word	0x08014f35
 8014f24:	08014f3b 	.word	0x08014f3b
    case HAL_OK :
      usb_status = USBD_OK;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	75fb      	strb	r3, [r7, #23]
    break;
 8014f2c:	e00b      	b.n	8014f46 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014f2e:	2303      	movs	r3, #3
 8014f30:	75fb      	strb	r3, [r7, #23]
    break;
 8014f32:	e008      	b.n	8014f46 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014f34:	2301      	movs	r3, #1
 8014f36:	75fb      	strb	r3, [r7, #23]
    break;
 8014f38:	e005      	b.n	8014f46 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014f3a:	2303      	movs	r3, #3
 8014f3c:	75fb      	strb	r3, [r7, #23]
    break;
 8014f3e:	e002      	b.n	8014f46 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8014f40:	2303      	movs	r3, #3
 8014f42:	75fb      	strb	r3, [r7, #23]
    break;
 8014f44:	bf00      	nop
  }
  return usb_status;
 8014f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3718      	adds	r7, #24
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}

08014f50 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b082      	sub	sp, #8
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	460b      	mov	r3, r1
 8014f5a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f62:	78fa      	ldrb	r2, [r7, #3]
 8014f64:	4611      	mov	r1, r2
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7f1 fd59 	bl	8006a1e <HAL_PCD_EP_GetRxCount>
 8014f6c:	4603      	mov	r3, r0
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3708      	adds	r7, #8
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
	...

08014f78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	460b      	mov	r3, r1
 8014f82:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8014f84:	78fb      	ldrb	r3, [r7, #3]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d002      	beq.n	8014f90 <HAL_PCDEx_LPM_Callback+0x18>
 8014f8a:	2b01      	cmp	r3, #1
 8014f8c:	d01f      	beq.n	8014fce <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8014f8e:	e03b      	b.n	8015008 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	6a1b      	ldr	r3, [r3, #32]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d007      	beq.n	8014fa8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014f98:	f000 f854 	bl	8015044 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014f9c:	4b1c      	ldr	r3, [pc, #112]	; (8015010 <HAL_PCDEx_LPM_Callback+0x98>)
 8014f9e:	691b      	ldr	r3, [r3, #16]
 8014fa0:	4a1b      	ldr	r2, [pc, #108]	; (8015010 <HAL_PCDEx_LPM_Callback+0x98>)
 8014fa2:	f023 0306 	bic.w	r3, r3, #6
 8014fa6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	6812      	ldr	r2, [r2, #0]
 8014fb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014fba:	f023 0301 	bic.w	r3, r3, #1
 8014fbe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7fa fe0e 	bl	800fbe8 <USBD_LL_Resume>
    break;
 8014fcc:	e01c      	b.n	8015008 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	687a      	ldr	r2, [r7, #4]
 8014fda:	6812      	ldr	r2, [r2, #0]
 8014fdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014fe0:	f043 0301 	orr.w	r3, r3, #1
 8014fe4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fa fde5 	bl	800fbbc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6a1b      	ldr	r3, [r3, #32]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d005      	beq.n	8015006 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ffa:	4b05      	ldr	r3, [pc, #20]	; (8015010 <HAL_PCDEx_LPM_Callback+0x98>)
 8014ffc:	691b      	ldr	r3, [r3, #16]
 8014ffe:	4a04      	ldr	r2, [pc, #16]	; (8015010 <HAL_PCDEx_LPM_Callback+0x98>)
 8015000:	f043 0306 	orr.w	r3, r3, #6
 8015004:	6113      	str	r3, [r2, #16]
    break;
 8015006:	bf00      	nop
}
 8015008:	bf00      	nop
 801500a:	3708      	adds	r7, #8
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	e000ed00 	.word	0xe000ed00

08015014 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015014:	b480      	push	{r7}
 8015016:	b083      	sub	sp, #12
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801501c:	4b03      	ldr	r3, [pc, #12]	; (801502c <USBD_static_malloc+0x18>)
}
 801501e:	4618      	mov	r0, r3
 8015020:	370c      	adds	r7, #12
 8015022:	46bd      	mov	sp, r7
 8015024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015028:	4770      	bx	lr
 801502a:	bf00      	nop
 801502c:	20003114 	.word	0x20003114

08015030 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015030:	b480      	push	{r7}
 8015032:	b083      	sub	sp, #12
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]

}
 8015038:	bf00      	nop
 801503a:	370c      	adds	r7, #12
 801503c:	46bd      	mov	sp, r7
 801503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015042:	4770      	bx	lr

08015044 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015048:	f7ed fc20 	bl	800288c <SystemClock_Config>
}
 801504c:	bf00      	nop
 801504e:	bd80      	pop	{r7, pc}

08015050 <__errno>:
 8015050:	4b01      	ldr	r3, [pc, #4]	; (8015058 <__errno+0x8>)
 8015052:	6818      	ldr	r0, [r3, #0]
 8015054:	4770      	bx	lr
 8015056:	bf00      	nop
 8015058:	200002d0 	.word	0x200002d0

0801505c <__libc_init_array>:
 801505c:	b570      	push	{r4, r5, r6, lr}
 801505e:	4d0d      	ldr	r5, [pc, #52]	; (8015094 <__libc_init_array+0x38>)
 8015060:	4c0d      	ldr	r4, [pc, #52]	; (8015098 <__libc_init_array+0x3c>)
 8015062:	1b64      	subs	r4, r4, r5
 8015064:	10a4      	asrs	r4, r4, #2
 8015066:	2600      	movs	r6, #0
 8015068:	42a6      	cmp	r6, r4
 801506a:	d109      	bne.n	8015080 <__libc_init_array+0x24>
 801506c:	4d0b      	ldr	r5, [pc, #44]	; (801509c <__libc_init_array+0x40>)
 801506e:	4c0c      	ldr	r4, [pc, #48]	; (80150a0 <__libc_init_array+0x44>)
 8015070:	f001 ffce 	bl	8017010 <_init>
 8015074:	1b64      	subs	r4, r4, r5
 8015076:	10a4      	asrs	r4, r4, #2
 8015078:	2600      	movs	r6, #0
 801507a:	42a6      	cmp	r6, r4
 801507c:	d105      	bne.n	801508a <__libc_init_array+0x2e>
 801507e:	bd70      	pop	{r4, r5, r6, pc}
 8015080:	f855 3b04 	ldr.w	r3, [r5], #4
 8015084:	4798      	blx	r3
 8015086:	3601      	adds	r6, #1
 8015088:	e7ee      	b.n	8015068 <__libc_init_array+0xc>
 801508a:	f855 3b04 	ldr.w	r3, [r5], #4
 801508e:	4798      	blx	r3
 8015090:	3601      	adds	r6, #1
 8015092:	e7f2      	b.n	801507a <__libc_init_array+0x1e>
 8015094:	08017ac0 	.word	0x08017ac0
 8015098:	08017ac0 	.word	0x08017ac0
 801509c:	08017ac0 	.word	0x08017ac0
 80150a0:	08017ac4 	.word	0x08017ac4

080150a4 <malloc>:
 80150a4:	4b02      	ldr	r3, [pc, #8]	; (80150b0 <malloc+0xc>)
 80150a6:	4601      	mov	r1, r0
 80150a8:	6818      	ldr	r0, [r3, #0]
 80150aa:	f000 b87f 	b.w	80151ac <_malloc_r>
 80150ae:	bf00      	nop
 80150b0:	200002d0 	.word	0x200002d0

080150b4 <free>:
 80150b4:	4b02      	ldr	r3, [pc, #8]	; (80150c0 <free+0xc>)
 80150b6:	4601      	mov	r1, r0
 80150b8:	6818      	ldr	r0, [r3, #0]
 80150ba:	f000 b80b 	b.w	80150d4 <_free_r>
 80150be:	bf00      	nop
 80150c0:	200002d0 	.word	0x200002d0

080150c4 <memset>:
 80150c4:	4402      	add	r2, r0
 80150c6:	4603      	mov	r3, r0
 80150c8:	4293      	cmp	r3, r2
 80150ca:	d100      	bne.n	80150ce <memset+0xa>
 80150cc:	4770      	bx	lr
 80150ce:	f803 1b01 	strb.w	r1, [r3], #1
 80150d2:	e7f9      	b.n	80150c8 <memset+0x4>

080150d4 <_free_r>:
 80150d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80150d6:	2900      	cmp	r1, #0
 80150d8:	d044      	beq.n	8015164 <_free_r+0x90>
 80150da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150de:	9001      	str	r0, [sp, #4]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f1a1 0404 	sub.w	r4, r1, #4
 80150e6:	bfb8      	it	lt
 80150e8:	18e4      	addlt	r4, r4, r3
 80150ea:	f000 f91f 	bl	801532c <__malloc_lock>
 80150ee:	4a1e      	ldr	r2, [pc, #120]	; (8015168 <_free_r+0x94>)
 80150f0:	9801      	ldr	r0, [sp, #4]
 80150f2:	6813      	ldr	r3, [r2, #0]
 80150f4:	b933      	cbnz	r3, 8015104 <_free_r+0x30>
 80150f6:	6063      	str	r3, [r4, #4]
 80150f8:	6014      	str	r4, [r2, #0]
 80150fa:	b003      	add	sp, #12
 80150fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015100:	f000 b91a 	b.w	8015338 <__malloc_unlock>
 8015104:	42a3      	cmp	r3, r4
 8015106:	d908      	bls.n	801511a <_free_r+0x46>
 8015108:	6825      	ldr	r5, [r4, #0]
 801510a:	1961      	adds	r1, r4, r5
 801510c:	428b      	cmp	r3, r1
 801510e:	bf01      	itttt	eq
 8015110:	6819      	ldreq	r1, [r3, #0]
 8015112:	685b      	ldreq	r3, [r3, #4]
 8015114:	1949      	addeq	r1, r1, r5
 8015116:	6021      	streq	r1, [r4, #0]
 8015118:	e7ed      	b.n	80150f6 <_free_r+0x22>
 801511a:	461a      	mov	r2, r3
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	b10b      	cbz	r3, 8015124 <_free_r+0x50>
 8015120:	42a3      	cmp	r3, r4
 8015122:	d9fa      	bls.n	801511a <_free_r+0x46>
 8015124:	6811      	ldr	r1, [r2, #0]
 8015126:	1855      	adds	r5, r2, r1
 8015128:	42a5      	cmp	r5, r4
 801512a:	d10b      	bne.n	8015144 <_free_r+0x70>
 801512c:	6824      	ldr	r4, [r4, #0]
 801512e:	4421      	add	r1, r4
 8015130:	1854      	adds	r4, r2, r1
 8015132:	42a3      	cmp	r3, r4
 8015134:	6011      	str	r1, [r2, #0]
 8015136:	d1e0      	bne.n	80150fa <_free_r+0x26>
 8015138:	681c      	ldr	r4, [r3, #0]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	6053      	str	r3, [r2, #4]
 801513e:	4421      	add	r1, r4
 8015140:	6011      	str	r1, [r2, #0]
 8015142:	e7da      	b.n	80150fa <_free_r+0x26>
 8015144:	d902      	bls.n	801514c <_free_r+0x78>
 8015146:	230c      	movs	r3, #12
 8015148:	6003      	str	r3, [r0, #0]
 801514a:	e7d6      	b.n	80150fa <_free_r+0x26>
 801514c:	6825      	ldr	r5, [r4, #0]
 801514e:	1961      	adds	r1, r4, r5
 8015150:	428b      	cmp	r3, r1
 8015152:	bf04      	itt	eq
 8015154:	6819      	ldreq	r1, [r3, #0]
 8015156:	685b      	ldreq	r3, [r3, #4]
 8015158:	6063      	str	r3, [r4, #4]
 801515a:	bf04      	itt	eq
 801515c:	1949      	addeq	r1, r1, r5
 801515e:	6021      	streq	r1, [r4, #0]
 8015160:	6054      	str	r4, [r2, #4]
 8015162:	e7ca      	b.n	80150fa <_free_r+0x26>
 8015164:	b003      	add	sp, #12
 8015166:	bd30      	pop	{r4, r5, pc}
 8015168:	20003334 	.word	0x20003334

0801516c <sbrk_aligned>:
 801516c:	b570      	push	{r4, r5, r6, lr}
 801516e:	4e0e      	ldr	r6, [pc, #56]	; (80151a8 <sbrk_aligned+0x3c>)
 8015170:	460c      	mov	r4, r1
 8015172:	6831      	ldr	r1, [r6, #0]
 8015174:	4605      	mov	r5, r0
 8015176:	b911      	cbnz	r1, 801517e <sbrk_aligned+0x12>
 8015178:	f000 f88c 	bl	8015294 <_sbrk_r>
 801517c:	6030      	str	r0, [r6, #0]
 801517e:	4621      	mov	r1, r4
 8015180:	4628      	mov	r0, r5
 8015182:	f000 f887 	bl	8015294 <_sbrk_r>
 8015186:	1c43      	adds	r3, r0, #1
 8015188:	d00a      	beq.n	80151a0 <sbrk_aligned+0x34>
 801518a:	1cc4      	adds	r4, r0, #3
 801518c:	f024 0403 	bic.w	r4, r4, #3
 8015190:	42a0      	cmp	r0, r4
 8015192:	d007      	beq.n	80151a4 <sbrk_aligned+0x38>
 8015194:	1a21      	subs	r1, r4, r0
 8015196:	4628      	mov	r0, r5
 8015198:	f000 f87c 	bl	8015294 <_sbrk_r>
 801519c:	3001      	adds	r0, #1
 801519e:	d101      	bne.n	80151a4 <sbrk_aligned+0x38>
 80151a0:	f04f 34ff 	mov.w	r4, #4294967295
 80151a4:	4620      	mov	r0, r4
 80151a6:	bd70      	pop	{r4, r5, r6, pc}
 80151a8:	20003338 	.word	0x20003338

080151ac <_malloc_r>:
 80151ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151b0:	1ccd      	adds	r5, r1, #3
 80151b2:	f025 0503 	bic.w	r5, r5, #3
 80151b6:	3508      	adds	r5, #8
 80151b8:	2d0c      	cmp	r5, #12
 80151ba:	bf38      	it	cc
 80151bc:	250c      	movcc	r5, #12
 80151be:	2d00      	cmp	r5, #0
 80151c0:	4607      	mov	r7, r0
 80151c2:	db01      	blt.n	80151c8 <_malloc_r+0x1c>
 80151c4:	42a9      	cmp	r1, r5
 80151c6:	d905      	bls.n	80151d4 <_malloc_r+0x28>
 80151c8:	230c      	movs	r3, #12
 80151ca:	603b      	str	r3, [r7, #0]
 80151cc:	2600      	movs	r6, #0
 80151ce:	4630      	mov	r0, r6
 80151d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151d4:	4e2e      	ldr	r6, [pc, #184]	; (8015290 <_malloc_r+0xe4>)
 80151d6:	f000 f8a9 	bl	801532c <__malloc_lock>
 80151da:	6833      	ldr	r3, [r6, #0]
 80151dc:	461c      	mov	r4, r3
 80151de:	bb34      	cbnz	r4, 801522e <_malloc_r+0x82>
 80151e0:	4629      	mov	r1, r5
 80151e2:	4638      	mov	r0, r7
 80151e4:	f7ff ffc2 	bl	801516c <sbrk_aligned>
 80151e8:	1c43      	adds	r3, r0, #1
 80151ea:	4604      	mov	r4, r0
 80151ec:	d14d      	bne.n	801528a <_malloc_r+0xde>
 80151ee:	6834      	ldr	r4, [r6, #0]
 80151f0:	4626      	mov	r6, r4
 80151f2:	2e00      	cmp	r6, #0
 80151f4:	d140      	bne.n	8015278 <_malloc_r+0xcc>
 80151f6:	6823      	ldr	r3, [r4, #0]
 80151f8:	4631      	mov	r1, r6
 80151fa:	4638      	mov	r0, r7
 80151fc:	eb04 0803 	add.w	r8, r4, r3
 8015200:	f000 f848 	bl	8015294 <_sbrk_r>
 8015204:	4580      	cmp	r8, r0
 8015206:	d13a      	bne.n	801527e <_malloc_r+0xd2>
 8015208:	6821      	ldr	r1, [r4, #0]
 801520a:	3503      	adds	r5, #3
 801520c:	1a6d      	subs	r5, r5, r1
 801520e:	f025 0503 	bic.w	r5, r5, #3
 8015212:	3508      	adds	r5, #8
 8015214:	2d0c      	cmp	r5, #12
 8015216:	bf38      	it	cc
 8015218:	250c      	movcc	r5, #12
 801521a:	4629      	mov	r1, r5
 801521c:	4638      	mov	r0, r7
 801521e:	f7ff ffa5 	bl	801516c <sbrk_aligned>
 8015222:	3001      	adds	r0, #1
 8015224:	d02b      	beq.n	801527e <_malloc_r+0xd2>
 8015226:	6823      	ldr	r3, [r4, #0]
 8015228:	442b      	add	r3, r5
 801522a:	6023      	str	r3, [r4, #0]
 801522c:	e00e      	b.n	801524c <_malloc_r+0xa0>
 801522e:	6822      	ldr	r2, [r4, #0]
 8015230:	1b52      	subs	r2, r2, r5
 8015232:	d41e      	bmi.n	8015272 <_malloc_r+0xc6>
 8015234:	2a0b      	cmp	r2, #11
 8015236:	d916      	bls.n	8015266 <_malloc_r+0xba>
 8015238:	1961      	adds	r1, r4, r5
 801523a:	42a3      	cmp	r3, r4
 801523c:	6025      	str	r5, [r4, #0]
 801523e:	bf18      	it	ne
 8015240:	6059      	strne	r1, [r3, #4]
 8015242:	6863      	ldr	r3, [r4, #4]
 8015244:	bf08      	it	eq
 8015246:	6031      	streq	r1, [r6, #0]
 8015248:	5162      	str	r2, [r4, r5]
 801524a:	604b      	str	r3, [r1, #4]
 801524c:	4638      	mov	r0, r7
 801524e:	f104 060b 	add.w	r6, r4, #11
 8015252:	f000 f871 	bl	8015338 <__malloc_unlock>
 8015256:	f026 0607 	bic.w	r6, r6, #7
 801525a:	1d23      	adds	r3, r4, #4
 801525c:	1af2      	subs	r2, r6, r3
 801525e:	d0b6      	beq.n	80151ce <_malloc_r+0x22>
 8015260:	1b9b      	subs	r3, r3, r6
 8015262:	50a3      	str	r3, [r4, r2]
 8015264:	e7b3      	b.n	80151ce <_malloc_r+0x22>
 8015266:	6862      	ldr	r2, [r4, #4]
 8015268:	42a3      	cmp	r3, r4
 801526a:	bf0c      	ite	eq
 801526c:	6032      	streq	r2, [r6, #0]
 801526e:	605a      	strne	r2, [r3, #4]
 8015270:	e7ec      	b.n	801524c <_malloc_r+0xa0>
 8015272:	4623      	mov	r3, r4
 8015274:	6864      	ldr	r4, [r4, #4]
 8015276:	e7b2      	b.n	80151de <_malloc_r+0x32>
 8015278:	4634      	mov	r4, r6
 801527a:	6876      	ldr	r6, [r6, #4]
 801527c:	e7b9      	b.n	80151f2 <_malloc_r+0x46>
 801527e:	230c      	movs	r3, #12
 8015280:	603b      	str	r3, [r7, #0]
 8015282:	4638      	mov	r0, r7
 8015284:	f000 f858 	bl	8015338 <__malloc_unlock>
 8015288:	e7a1      	b.n	80151ce <_malloc_r+0x22>
 801528a:	6025      	str	r5, [r4, #0]
 801528c:	e7de      	b.n	801524c <_malloc_r+0xa0>
 801528e:	bf00      	nop
 8015290:	20003334 	.word	0x20003334

08015294 <_sbrk_r>:
 8015294:	b538      	push	{r3, r4, r5, lr}
 8015296:	4d06      	ldr	r5, [pc, #24]	; (80152b0 <_sbrk_r+0x1c>)
 8015298:	2300      	movs	r3, #0
 801529a:	4604      	mov	r4, r0
 801529c:	4608      	mov	r0, r1
 801529e:	602b      	str	r3, [r5, #0]
 80152a0:	f7ee fcf0 	bl	8003c84 <_sbrk>
 80152a4:	1c43      	adds	r3, r0, #1
 80152a6:	d102      	bne.n	80152ae <_sbrk_r+0x1a>
 80152a8:	682b      	ldr	r3, [r5, #0]
 80152aa:	b103      	cbz	r3, 80152ae <_sbrk_r+0x1a>
 80152ac:	6023      	str	r3, [r4, #0]
 80152ae:	bd38      	pop	{r3, r4, r5, pc}
 80152b0:	2000333c 	.word	0x2000333c

080152b4 <sniprintf>:
 80152b4:	b40c      	push	{r2, r3}
 80152b6:	b530      	push	{r4, r5, lr}
 80152b8:	4b17      	ldr	r3, [pc, #92]	; (8015318 <sniprintf+0x64>)
 80152ba:	1e0c      	subs	r4, r1, #0
 80152bc:	681d      	ldr	r5, [r3, #0]
 80152be:	b09d      	sub	sp, #116	; 0x74
 80152c0:	da08      	bge.n	80152d4 <sniprintf+0x20>
 80152c2:	238b      	movs	r3, #139	; 0x8b
 80152c4:	602b      	str	r3, [r5, #0]
 80152c6:	f04f 30ff 	mov.w	r0, #4294967295
 80152ca:	b01d      	add	sp, #116	; 0x74
 80152cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80152d0:	b002      	add	sp, #8
 80152d2:	4770      	bx	lr
 80152d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80152d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80152dc:	bf14      	ite	ne
 80152de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80152e2:	4623      	moveq	r3, r4
 80152e4:	9304      	str	r3, [sp, #16]
 80152e6:	9307      	str	r3, [sp, #28]
 80152e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152ec:	9002      	str	r0, [sp, #8]
 80152ee:	9006      	str	r0, [sp, #24]
 80152f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80152f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80152f6:	ab21      	add	r3, sp, #132	; 0x84
 80152f8:	a902      	add	r1, sp, #8
 80152fa:	4628      	mov	r0, r5
 80152fc:	9301      	str	r3, [sp, #4]
 80152fe:	f000 f87d 	bl	80153fc <_svfiprintf_r>
 8015302:	1c43      	adds	r3, r0, #1
 8015304:	bfbc      	itt	lt
 8015306:	238b      	movlt	r3, #139	; 0x8b
 8015308:	602b      	strlt	r3, [r5, #0]
 801530a:	2c00      	cmp	r4, #0
 801530c:	d0dd      	beq.n	80152ca <sniprintf+0x16>
 801530e:	9b02      	ldr	r3, [sp, #8]
 8015310:	2200      	movs	r2, #0
 8015312:	701a      	strb	r2, [r3, #0]
 8015314:	e7d9      	b.n	80152ca <sniprintf+0x16>
 8015316:	bf00      	nop
 8015318:	200002d0 	.word	0x200002d0

0801531c <strcpy>:
 801531c:	4603      	mov	r3, r0
 801531e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015322:	f803 2b01 	strb.w	r2, [r3], #1
 8015326:	2a00      	cmp	r2, #0
 8015328:	d1f9      	bne.n	801531e <strcpy+0x2>
 801532a:	4770      	bx	lr

0801532c <__malloc_lock>:
 801532c:	4801      	ldr	r0, [pc, #4]	; (8015334 <__malloc_lock+0x8>)
 801532e:	f000 baf9 	b.w	8015924 <__retarget_lock_acquire_recursive>
 8015332:	bf00      	nop
 8015334:	20003340 	.word	0x20003340

08015338 <__malloc_unlock>:
 8015338:	4801      	ldr	r0, [pc, #4]	; (8015340 <__malloc_unlock+0x8>)
 801533a:	f000 baf4 	b.w	8015926 <__retarget_lock_release_recursive>
 801533e:	bf00      	nop
 8015340:	20003340 	.word	0x20003340

08015344 <__ssputs_r>:
 8015344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015348:	688e      	ldr	r6, [r1, #8]
 801534a:	429e      	cmp	r6, r3
 801534c:	4682      	mov	sl, r0
 801534e:	460c      	mov	r4, r1
 8015350:	4690      	mov	r8, r2
 8015352:	461f      	mov	r7, r3
 8015354:	d838      	bhi.n	80153c8 <__ssputs_r+0x84>
 8015356:	898a      	ldrh	r2, [r1, #12]
 8015358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801535c:	d032      	beq.n	80153c4 <__ssputs_r+0x80>
 801535e:	6825      	ldr	r5, [r4, #0]
 8015360:	6909      	ldr	r1, [r1, #16]
 8015362:	eba5 0901 	sub.w	r9, r5, r1
 8015366:	6965      	ldr	r5, [r4, #20]
 8015368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801536c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015370:	3301      	adds	r3, #1
 8015372:	444b      	add	r3, r9
 8015374:	106d      	asrs	r5, r5, #1
 8015376:	429d      	cmp	r5, r3
 8015378:	bf38      	it	cc
 801537a:	461d      	movcc	r5, r3
 801537c:	0553      	lsls	r3, r2, #21
 801537e:	d531      	bpl.n	80153e4 <__ssputs_r+0xa0>
 8015380:	4629      	mov	r1, r5
 8015382:	f7ff ff13 	bl	80151ac <_malloc_r>
 8015386:	4606      	mov	r6, r0
 8015388:	b950      	cbnz	r0, 80153a0 <__ssputs_r+0x5c>
 801538a:	230c      	movs	r3, #12
 801538c:	f8ca 3000 	str.w	r3, [sl]
 8015390:	89a3      	ldrh	r3, [r4, #12]
 8015392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015396:	81a3      	strh	r3, [r4, #12]
 8015398:	f04f 30ff 	mov.w	r0, #4294967295
 801539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a0:	6921      	ldr	r1, [r4, #16]
 80153a2:	464a      	mov	r2, r9
 80153a4:	f000 fac0 	bl	8015928 <memcpy>
 80153a8:	89a3      	ldrh	r3, [r4, #12]
 80153aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80153ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153b2:	81a3      	strh	r3, [r4, #12]
 80153b4:	6126      	str	r6, [r4, #16]
 80153b6:	6165      	str	r5, [r4, #20]
 80153b8:	444e      	add	r6, r9
 80153ba:	eba5 0509 	sub.w	r5, r5, r9
 80153be:	6026      	str	r6, [r4, #0]
 80153c0:	60a5      	str	r5, [r4, #8]
 80153c2:	463e      	mov	r6, r7
 80153c4:	42be      	cmp	r6, r7
 80153c6:	d900      	bls.n	80153ca <__ssputs_r+0x86>
 80153c8:	463e      	mov	r6, r7
 80153ca:	6820      	ldr	r0, [r4, #0]
 80153cc:	4632      	mov	r2, r6
 80153ce:	4641      	mov	r1, r8
 80153d0:	f000 fab8 	bl	8015944 <memmove>
 80153d4:	68a3      	ldr	r3, [r4, #8]
 80153d6:	1b9b      	subs	r3, r3, r6
 80153d8:	60a3      	str	r3, [r4, #8]
 80153da:	6823      	ldr	r3, [r4, #0]
 80153dc:	4433      	add	r3, r6
 80153de:	6023      	str	r3, [r4, #0]
 80153e0:	2000      	movs	r0, #0
 80153e2:	e7db      	b.n	801539c <__ssputs_r+0x58>
 80153e4:	462a      	mov	r2, r5
 80153e6:	f000 fac7 	bl	8015978 <_realloc_r>
 80153ea:	4606      	mov	r6, r0
 80153ec:	2800      	cmp	r0, #0
 80153ee:	d1e1      	bne.n	80153b4 <__ssputs_r+0x70>
 80153f0:	6921      	ldr	r1, [r4, #16]
 80153f2:	4650      	mov	r0, sl
 80153f4:	f7ff fe6e 	bl	80150d4 <_free_r>
 80153f8:	e7c7      	b.n	801538a <__ssputs_r+0x46>
	...

080153fc <_svfiprintf_r>:
 80153fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015400:	4698      	mov	r8, r3
 8015402:	898b      	ldrh	r3, [r1, #12]
 8015404:	061b      	lsls	r3, r3, #24
 8015406:	b09d      	sub	sp, #116	; 0x74
 8015408:	4607      	mov	r7, r0
 801540a:	460d      	mov	r5, r1
 801540c:	4614      	mov	r4, r2
 801540e:	d50e      	bpl.n	801542e <_svfiprintf_r+0x32>
 8015410:	690b      	ldr	r3, [r1, #16]
 8015412:	b963      	cbnz	r3, 801542e <_svfiprintf_r+0x32>
 8015414:	2140      	movs	r1, #64	; 0x40
 8015416:	f7ff fec9 	bl	80151ac <_malloc_r>
 801541a:	6028      	str	r0, [r5, #0]
 801541c:	6128      	str	r0, [r5, #16]
 801541e:	b920      	cbnz	r0, 801542a <_svfiprintf_r+0x2e>
 8015420:	230c      	movs	r3, #12
 8015422:	603b      	str	r3, [r7, #0]
 8015424:	f04f 30ff 	mov.w	r0, #4294967295
 8015428:	e0d1      	b.n	80155ce <_svfiprintf_r+0x1d2>
 801542a:	2340      	movs	r3, #64	; 0x40
 801542c:	616b      	str	r3, [r5, #20]
 801542e:	2300      	movs	r3, #0
 8015430:	9309      	str	r3, [sp, #36]	; 0x24
 8015432:	2320      	movs	r3, #32
 8015434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015438:	f8cd 800c 	str.w	r8, [sp, #12]
 801543c:	2330      	movs	r3, #48	; 0x30
 801543e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80155e8 <_svfiprintf_r+0x1ec>
 8015442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015446:	f04f 0901 	mov.w	r9, #1
 801544a:	4623      	mov	r3, r4
 801544c:	469a      	mov	sl, r3
 801544e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015452:	b10a      	cbz	r2, 8015458 <_svfiprintf_r+0x5c>
 8015454:	2a25      	cmp	r2, #37	; 0x25
 8015456:	d1f9      	bne.n	801544c <_svfiprintf_r+0x50>
 8015458:	ebba 0b04 	subs.w	fp, sl, r4
 801545c:	d00b      	beq.n	8015476 <_svfiprintf_r+0x7a>
 801545e:	465b      	mov	r3, fp
 8015460:	4622      	mov	r2, r4
 8015462:	4629      	mov	r1, r5
 8015464:	4638      	mov	r0, r7
 8015466:	f7ff ff6d 	bl	8015344 <__ssputs_r>
 801546a:	3001      	adds	r0, #1
 801546c:	f000 80aa 	beq.w	80155c4 <_svfiprintf_r+0x1c8>
 8015470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015472:	445a      	add	r2, fp
 8015474:	9209      	str	r2, [sp, #36]	; 0x24
 8015476:	f89a 3000 	ldrb.w	r3, [sl]
 801547a:	2b00      	cmp	r3, #0
 801547c:	f000 80a2 	beq.w	80155c4 <_svfiprintf_r+0x1c8>
 8015480:	2300      	movs	r3, #0
 8015482:	f04f 32ff 	mov.w	r2, #4294967295
 8015486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801548a:	f10a 0a01 	add.w	sl, sl, #1
 801548e:	9304      	str	r3, [sp, #16]
 8015490:	9307      	str	r3, [sp, #28]
 8015492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015496:	931a      	str	r3, [sp, #104]	; 0x68
 8015498:	4654      	mov	r4, sl
 801549a:	2205      	movs	r2, #5
 801549c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154a0:	4851      	ldr	r0, [pc, #324]	; (80155e8 <_svfiprintf_r+0x1ec>)
 80154a2:	f7ea feb5 	bl	8000210 <memchr>
 80154a6:	9a04      	ldr	r2, [sp, #16]
 80154a8:	b9d8      	cbnz	r0, 80154e2 <_svfiprintf_r+0xe6>
 80154aa:	06d0      	lsls	r0, r2, #27
 80154ac:	bf44      	itt	mi
 80154ae:	2320      	movmi	r3, #32
 80154b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154b4:	0711      	lsls	r1, r2, #28
 80154b6:	bf44      	itt	mi
 80154b8:	232b      	movmi	r3, #43	; 0x2b
 80154ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154be:	f89a 3000 	ldrb.w	r3, [sl]
 80154c2:	2b2a      	cmp	r3, #42	; 0x2a
 80154c4:	d015      	beq.n	80154f2 <_svfiprintf_r+0xf6>
 80154c6:	9a07      	ldr	r2, [sp, #28]
 80154c8:	4654      	mov	r4, sl
 80154ca:	2000      	movs	r0, #0
 80154cc:	f04f 0c0a 	mov.w	ip, #10
 80154d0:	4621      	mov	r1, r4
 80154d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154d6:	3b30      	subs	r3, #48	; 0x30
 80154d8:	2b09      	cmp	r3, #9
 80154da:	d94e      	bls.n	801557a <_svfiprintf_r+0x17e>
 80154dc:	b1b0      	cbz	r0, 801550c <_svfiprintf_r+0x110>
 80154de:	9207      	str	r2, [sp, #28]
 80154e0:	e014      	b.n	801550c <_svfiprintf_r+0x110>
 80154e2:	eba0 0308 	sub.w	r3, r0, r8
 80154e6:	fa09 f303 	lsl.w	r3, r9, r3
 80154ea:	4313      	orrs	r3, r2
 80154ec:	9304      	str	r3, [sp, #16]
 80154ee:	46a2      	mov	sl, r4
 80154f0:	e7d2      	b.n	8015498 <_svfiprintf_r+0x9c>
 80154f2:	9b03      	ldr	r3, [sp, #12]
 80154f4:	1d19      	adds	r1, r3, #4
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	9103      	str	r1, [sp, #12]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	bfbb      	ittet	lt
 80154fe:	425b      	neglt	r3, r3
 8015500:	f042 0202 	orrlt.w	r2, r2, #2
 8015504:	9307      	strge	r3, [sp, #28]
 8015506:	9307      	strlt	r3, [sp, #28]
 8015508:	bfb8      	it	lt
 801550a:	9204      	strlt	r2, [sp, #16]
 801550c:	7823      	ldrb	r3, [r4, #0]
 801550e:	2b2e      	cmp	r3, #46	; 0x2e
 8015510:	d10c      	bne.n	801552c <_svfiprintf_r+0x130>
 8015512:	7863      	ldrb	r3, [r4, #1]
 8015514:	2b2a      	cmp	r3, #42	; 0x2a
 8015516:	d135      	bne.n	8015584 <_svfiprintf_r+0x188>
 8015518:	9b03      	ldr	r3, [sp, #12]
 801551a:	1d1a      	adds	r2, r3, #4
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	9203      	str	r2, [sp, #12]
 8015520:	2b00      	cmp	r3, #0
 8015522:	bfb8      	it	lt
 8015524:	f04f 33ff 	movlt.w	r3, #4294967295
 8015528:	3402      	adds	r4, #2
 801552a:	9305      	str	r3, [sp, #20]
 801552c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80155f8 <_svfiprintf_r+0x1fc>
 8015530:	7821      	ldrb	r1, [r4, #0]
 8015532:	2203      	movs	r2, #3
 8015534:	4650      	mov	r0, sl
 8015536:	f7ea fe6b 	bl	8000210 <memchr>
 801553a:	b140      	cbz	r0, 801554e <_svfiprintf_r+0x152>
 801553c:	2340      	movs	r3, #64	; 0x40
 801553e:	eba0 000a 	sub.w	r0, r0, sl
 8015542:	fa03 f000 	lsl.w	r0, r3, r0
 8015546:	9b04      	ldr	r3, [sp, #16]
 8015548:	4303      	orrs	r3, r0
 801554a:	3401      	adds	r4, #1
 801554c:	9304      	str	r3, [sp, #16]
 801554e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015552:	4826      	ldr	r0, [pc, #152]	; (80155ec <_svfiprintf_r+0x1f0>)
 8015554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015558:	2206      	movs	r2, #6
 801555a:	f7ea fe59 	bl	8000210 <memchr>
 801555e:	2800      	cmp	r0, #0
 8015560:	d038      	beq.n	80155d4 <_svfiprintf_r+0x1d8>
 8015562:	4b23      	ldr	r3, [pc, #140]	; (80155f0 <_svfiprintf_r+0x1f4>)
 8015564:	bb1b      	cbnz	r3, 80155ae <_svfiprintf_r+0x1b2>
 8015566:	9b03      	ldr	r3, [sp, #12]
 8015568:	3307      	adds	r3, #7
 801556a:	f023 0307 	bic.w	r3, r3, #7
 801556e:	3308      	adds	r3, #8
 8015570:	9303      	str	r3, [sp, #12]
 8015572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015574:	4433      	add	r3, r6
 8015576:	9309      	str	r3, [sp, #36]	; 0x24
 8015578:	e767      	b.n	801544a <_svfiprintf_r+0x4e>
 801557a:	fb0c 3202 	mla	r2, ip, r2, r3
 801557e:	460c      	mov	r4, r1
 8015580:	2001      	movs	r0, #1
 8015582:	e7a5      	b.n	80154d0 <_svfiprintf_r+0xd4>
 8015584:	2300      	movs	r3, #0
 8015586:	3401      	adds	r4, #1
 8015588:	9305      	str	r3, [sp, #20]
 801558a:	4619      	mov	r1, r3
 801558c:	f04f 0c0a 	mov.w	ip, #10
 8015590:	4620      	mov	r0, r4
 8015592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015596:	3a30      	subs	r2, #48	; 0x30
 8015598:	2a09      	cmp	r2, #9
 801559a:	d903      	bls.n	80155a4 <_svfiprintf_r+0x1a8>
 801559c:	2b00      	cmp	r3, #0
 801559e:	d0c5      	beq.n	801552c <_svfiprintf_r+0x130>
 80155a0:	9105      	str	r1, [sp, #20]
 80155a2:	e7c3      	b.n	801552c <_svfiprintf_r+0x130>
 80155a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80155a8:	4604      	mov	r4, r0
 80155aa:	2301      	movs	r3, #1
 80155ac:	e7f0      	b.n	8015590 <_svfiprintf_r+0x194>
 80155ae:	ab03      	add	r3, sp, #12
 80155b0:	9300      	str	r3, [sp, #0]
 80155b2:	462a      	mov	r2, r5
 80155b4:	4b0f      	ldr	r3, [pc, #60]	; (80155f4 <_svfiprintf_r+0x1f8>)
 80155b6:	a904      	add	r1, sp, #16
 80155b8:	4638      	mov	r0, r7
 80155ba:	f3af 8000 	nop.w
 80155be:	1c42      	adds	r2, r0, #1
 80155c0:	4606      	mov	r6, r0
 80155c2:	d1d6      	bne.n	8015572 <_svfiprintf_r+0x176>
 80155c4:	89ab      	ldrh	r3, [r5, #12]
 80155c6:	065b      	lsls	r3, r3, #25
 80155c8:	f53f af2c 	bmi.w	8015424 <_svfiprintf_r+0x28>
 80155cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155ce:	b01d      	add	sp, #116	; 0x74
 80155d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155d4:	ab03      	add	r3, sp, #12
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	462a      	mov	r2, r5
 80155da:	4b06      	ldr	r3, [pc, #24]	; (80155f4 <_svfiprintf_r+0x1f8>)
 80155dc:	a904      	add	r1, sp, #16
 80155de:	4638      	mov	r0, r7
 80155e0:	f000 f87a 	bl	80156d8 <_printf_i>
 80155e4:	e7eb      	b.n	80155be <_svfiprintf_r+0x1c2>
 80155e6:	bf00      	nop
 80155e8:	08017a44 	.word	0x08017a44
 80155ec:	08017a4e 	.word	0x08017a4e
 80155f0:	00000000 	.word	0x00000000
 80155f4:	08015345 	.word	0x08015345
 80155f8:	08017a4a 	.word	0x08017a4a

080155fc <_printf_common>:
 80155fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015600:	4616      	mov	r6, r2
 8015602:	4699      	mov	r9, r3
 8015604:	688a      	ldr	r2, [r1, #8]
 8015606:	690b      	ldr	r3, [r1, #16]
 8015608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801560c:	4293      	cmp	r3, r2
 801560e:	bfb8      	it	lt
 8015610:	4613      	movlt	r3, r2
 8015612:	6033      	str	r3, [r6, #0]
 8015614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015618:	4607      	mov	r7, r0
 801561a:	460c      	mov	r4, r1
 801561c:	b10a      	cbz	r2, 8015622 <_printf_common+0x26>
 801561e:	3301      	adds	r3, #1
 8015620:	6033      	str	r3, [r6, #0]
 8015622:	6823      	ldr	r3, [r4, #0]
 8015624:	0699      	lsls	r1, r3, #26
 8015626:	bf42      	ittt	mi
 8015628:	6833      	ldrmi	r3, [r6, #0]
 801562a:	3302      	addmi	r3, #2
 801562c:	6033      	strmi	r3, [r6, #0]
 801562e:	6825      	ldr	r5, [r4, #0]
 8015630:	f015 0506 	ands.w	r5, r5, #6
 8015634:	d106      	bne.n	8015644 <_printf_common+0x48>
 8015636:	f104 0a19 	add.w	sl, r4, #25
 801563a:	68e3      	ldr	r3, [r4, #12]
 801563c:	6832      	ldr	r2, [r6, #0]
 801563e:	1a9b      	subs	r3, r3, r2
 8015640:	42ab      	cmp	r3, r5
 8015642:	dc26      	bgt.n	8015692 <_printf_common+0x96>
 8015644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015648:	1e13      	subs	r3, r2, #0
 801564a:	6822      	ldr	r2, [r4, #0]
 801564c:	bf18      	it	ne
 801564e:	2301      	movne	r3, #1
 8015650:	0692      	lsls	r2, r2, #26
 8015652:	d42b      	bmi.n	80156ac <_printf_common+0xb0>
 8015654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015658:	4649      	mov	r1, r9
 801565a:	4638      	mov	r0, r7
 801565c:	47c0      	blx	r8
 801565e:	3001      	adds	r0, #1
 8015660:	d01e      	beq.n	80156a0 <_printf_common+0xa4>
 8015662:	6823      	ldr	r3, [r4, #0]
 8015664:	68e5      	ldr	r5, [r4, #12]
 8015666:	6832      	ldr	r2, [r6, #0]
 8015668:	f003 0306 	and.w	r3, r3, #6
 801566c:	2b04      	cmp	r3, #4
 801566e:	bf08      	it	eq
 8015670:	1aad      	subeq	r5, r5, r2
 8015672:	68a3      	ldr	r3, [r4, #8]
 8015674:	6922      	ldr	r2, [r4, #16]
 8015676:	bf0c      	ite	eq
 8015678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801567c:	2500      	movne	r5, #0
 801567e:	4293      	cmp	r3, r2
 8015680:	bfc4      	itt	gt
 8015682:	1a9b      	subgt	r3, r3, r2
 8015684:	18ed      	addgt	r5, r5, r3
 8015686:	2600      	movs	r6, #0
 8015688:	341a      	adds	r4, #26
 801568a:	42b5      	cmp	r5, r6
 801568c:	d11a      	bne.n	80156c4 <_printf_common+0xc8>
 801568e:	2000      	movs	r0, #0
 8015690:	e008      	b.n	80156a4 <_printf_common+0xa8>
 8015692:	2301      	movs	r3, #1
 8015694:	4652      	mov	r2, sl
 8015696:	4649      	mov	r1, r9
 8015698:	4638      	mov	r0, r7
 801569a:	47c0      	blx	r8
 801569c:	3001      	adds	r0, #1
 801569e:	d103      	bne.n	80156a8 <_printf_common+0xac>
 80156a0:	f04f 30ff 	mov.w	r0, #4294967295
 80156a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156a8:	3501      	adds	r5, #1
 80156aa:	e7c6      	b.n	801563a <_printf_common+0x3e>
 80156ac:	18e1      	adds	r1, r4, r3
 80156ae:	1c5a      	adds	r2, r3, #1
 80156b0:	2030      	movs	r0, #48	; 0x30
 80156b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80156b6:	4422      	add	r2, r4
 80156b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80156bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80156c0:	3302      	adds	r3, #2
 80156c2:	e7c7      	b.n	8015654 <_printf_common+0x58>
 80156c4:	2301      	movs	r3, #1
 80156c6:	4622      	mov	r2, r4
 80156c8:	4649      	mov	r1, r9
 80156ca:	4638      	mov	r0, r7
 80156cc:	47c0      	blx	r8
 80156ce:	3001      	adds	r0, #1
 80156d0:	d0e6      	beq.n	80156a0 <_printf_common+0xa4>
 80156d2:	3601      	adds	r6, #1
 80156d4:	e7d9      	b.n	801568a <_printf_common+0x8e>
	...

080156d8 <_printf_i>:
 80156d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80156dc:	7e0f      	ldrb	r7, [r1, #24]
 80156de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80156e0:	2f78      	cmp	r7, #120	; 0x78
 80156e2:	4691      	mov	r9, r2
 80156e4:	4680      	mov	r8, r0
 80156e6:	460c      	mov	r4, r1
 80156e8:	469a      	mov	sl, r3
 80156ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80156ee:	d807      	bhi.n	8015700 <_printf_i+0x28>
 80156f0:	2f62      	cmp	r7, #98	; 0x62
 80156f2:	d80a      	bhi.n	801570a <_printf_i+0x32>
 80156f4:	2f00      	cmp	r7, #0
 80156f6:	f000 80d8 	beq.w	80158aa <_printf_i+0x1d2>
 80156fa:	2f58      	cmp	r7, #88	; 0x58
 80156fc:	f000 80a3 	beq.w	8015846 <_printf_i+0x16e>
 8015700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015708:	e03a      	b.n	8015780 <_printf_i+0xa8>
 801570a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801570e:	2b15      	cmp	r3, #21
 8015710:	d8f6      	bhi.n	8015700 <_printf_i+0x28>
 8015712:	a101      	add	r1, pc, #4	; (adr r1, 8015718 <_printf_i+0x40>)
 8015714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015718:	08015771 	.word	0x08015771
 801571c:	08015785 	.word	0x08015785
 8015720:	08015701 	.word	0x08015701
 8015724:	08015701 	.word	0x08015701
 8015728:	08015701 	.word	0x08015701
 801572c:	08015701 	.word	0x08015701
 8015730:	08015785 	.word	0x08015785
 8015734:	08015701 	.word	0x08015701
 8015738:	08015701 	.word	0x08015701
 801573c:	08015701 	.word	0x08015701
 8015740:	08015701 	.word	0x08015701
 8015744:	08015891 	.word	0x08015891
 8015748:	080157b5 	.word	0x080157b5
 801574c:	08015873 	.word	0x08015873
 8015750:	08015701 	.word	0x08015701
 8015754:	08015701 	.word	0x08015701
 8015758:	080158b3 	.word	0x080158b3
 801575c:	08015701 	.word	0x08015701
 8015760:	080157b5 	.word	0x080157b5
 8015764:	08015701 	.word	0x08015701
 8015768:	08015701 	.word	0x08015701
 801576c:	0801587b 	.word	0x0801587b
 8015770:	682b      	ldr	r3, [r5, #0]
 8015772:	1d1a      	adds	r2, r3, #4
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	602a      	str	r2, [r5, #0]
 8015778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801577c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015780:	2301      	movs	r3, #1
 8015782:	e0a3      	b.n	80158cc <_printf_i+0x1f4>
 8015784:	6820      	ldr	r0, [r4, #0]
 8015786:	6829      	ldr	r1, [r5, #0]
 8015788:	0606      	lsls	r6, r0, #24
 801578a:	f101 0304 	add.w	r3, r1, #4
 801578e:	d50a      	bpl.n	80157a6 <_printf_i+0xce>
 8015790:	680e      	ldr	r6, [r1, #0]
 8015792:	602b      	str	r3, [r5, #0]
 8015794:	2e00      	cmp	r6, #0
 8015796:	da03      	bge.n	80157a0 <_printf_i+0xc8>
 8015798:	232d      	movs	r3, #45	; 0x2d
 801579a:	4276      	negs	r6, r6
 801579c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157a0:	485e      	ldr	r0, [pc, #376]	; (801591c <_printf_i+0x244>)
 80157a2:	230a      	movs	r3, #10
 80157a4:	e019      	b.n	80157da <_printf_i+0x102>
 80157a6:	680e      	ldr	r6, [r1, #0]
 80157a8:	602b      	str	r3, [r5, #0]
 80157aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80157ae:	bf18      	it	ne
 80157b0:	b236      	sxthne	r6, r6
 80157b2:	e7ef      	b.n	8015794 <_printf_i+0xbc>
 80157b4:	682b      	ldr	r3, [r5, #0]
 80157b6:	6820      	ldr	r0, [r4, #0]
 80157b8:	1d19      	adds	r1, r3, #4
 80157ba:	6029      	str	r1, [r5, #0]
 80157bc:	0601      	lsls	r1, r0, #24
 80157be:	d501      	bpl.n	80157c4 <_printf_i+0xec>
 80157c0:	681e      	ldr	r6, [r3, #0]
 80157c2:	e002      	b.n	80157ca <_printf_i+0xf2>
 80157c4:	0646      	lsls	r6, r0, #25
 80157c6:	d5fb      	bpl.n	80157c0 <_printf_i+0xe8>
 80157c8:	881e      	ldrh	r6, [r3, #0]
 80157ca:	4854      	ldr	r0, [pc, #336]	; (801591c <_printf_i+0x244>)
 80157cc:	2f6f      	cmp	r7, #111	; 0x6f
 80157ce:	bf0c      	ite	eq
 80157d0:	2308      	moveq	r3, #8
 80157d2:	230a      	movne	r3, #10
 80157d4:	2100      	movs	r1, #0
 80157d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80157da:	6865      	ldr	r5, [r4, #4]
 80157dc:	60a5      	str	r5, [r4, #8]
 80157de:	2d00      	cmp	r5, #0
 80157e0:	bfa2      	ittt	ge
 80157e2:	6821      	ldrge	r1, [r4, #0]
 80157e4:	f021 0104 	bicge.w	r1, r1, #4
 80157e8:	6021      	strge	r1, [r4, #0]
 80157ea:	b90e      	cbnz	r6, 80157f0 <_printf_i+0x118>
 80157ec:	2d00      	cmp	r5, #0
 80157ee:	d04d      	beq.n	801588c <_printf_i+0x1b4>
 80157f0:	4615      	mov	r5, r2
 80157f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80157f6:	fb03 6711 	mls	r7, r3, r1, r6
 80157fa:	5dc7      	ldrb	r7, [r0, r7]
 80157fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015800:	4637      	mov	r7, r6
 8015802:	42bb      	cmp	r3, r7
 8015804:	460e      	mov	r6, r1
 8015806:	d9f4      	bls.n	80157f2 <_printf_i+0x11a>
 8015808:	2b08      	cmp	r3, #8
 801580a:	d10b      	bne.n	8015824 <_printf_i+0x14c>
 801580c:	6823      	ldr	r3, [r4, #0]
 801580e:	07de      	lsls	r6, r3, #31
 8015810:	d508      	bpl.n	8015824 <_printf_i+0x14c>
 8015812:	6923      	ldr	r3, [r4, #16]
 8015814:	6861      	ldr	r1, [r4, #4]
 8015816:	4299      	cmp	r1, r3
 8015818:	bfde      	ittt	le
 801581a:	2330      	movle	r3, #48	; 0x30
 801581c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015820:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015824:	1b52      	subs	r2, r2, r5
 8015826:	6122      	str	r2, [r4, #16]
 8015828:	f8cd a000 	str.w	sl, [sp]
 801582c:	464b      	mov	r3, r9
 801582e:	aa03      	add	r2, sp, #12
 8015830:	4621      	mov	r1, r4
 8015832:	4640      	mov	r0, r8
 8015834:	f7ff fee2 	bl	80155fc <_printf_common>
 8015838:	3001      	adds	r0, #1
 801583a:	d14c      	bne.n	80158d6 <_printf_i+0x1fe>
 801583c:	f04f 30ff 	mov.w	r0, #4294967295
 8015840:	b004      	add	sp, #16
 8015842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015846:	4835      	ldr	r0, [pc, #212]	; (801591c <_printf_i+0x244>)
 8015848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801584c:	6829      	ldr	r1, [r5, #0]
 801584e:	6823      	ldr	r3, [r4, #0]
 8015850:	f851 6b04 	ldr.w	r6, [r1], #4
 8015854:	6029      	str	r1, [r5, #0]
 8015856:	061d      	lsls	r5, r3, #24
 8015858:	d514      	bpl.n	8015884 <_printf_i+0x1ac>
 801585a:	07df      	lsls	r7, r3, #31
 801585c:	bf44      	itt	mi
 801585e:	f043 0320 	orrmi.w	r3, r3, #32
 8015862:	6023      	strmi	r3, [r4, #0]
 8015864:	b91e      	cbnz	r6, 801586e <_printf_i+0x196>
 8015866:	6823      	ldr	r3, [r4, #0]
 8015868:	f023 0320 	bic.w	r3, r3, #32
 801586c:	6023      	str	r3, [r4, #0]
 801586e:	2310      	movs	r3, #16
 8015870:	e7b0      	b.n	80157d4 <_printf_i+0xfc>
 8015872:	6823      	ldr	r3, [r4, #0]
 8015874:	f043 0320 	orr.w	r3, r3, #32
 8015878:	6023      	str	r3, [r4, #0]
 801587a:	2378      	movs	r3, #120	; 0x78
 801587c:	4828      	ldr	r0, [pc, #160]	; (8015920 <_printf_i+0x248>)
 801587e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015882:	e7e3      	b.n	801584c <_printf_i+0x174>
 8015884:	0659      	lsls	r1, r3, #25
 8015886:	bf48      	it	mi
 8015888:	b2b6      	uxthmi	r6, r6
 801588a:	e7e6      	b.n	801585a <_printf_i+0x182>
 801588c:	4615      	mov	r5, r2
 801588e:	e7bb      	b.n	8015808 <_printf_i+0x130>
 8015890:	682b      	ldr	r3, [r5, #0]
 8015892:	6826      	ldr	r6, [r4, #0]
 8015894:	6961      	ldr	r1, [r4, #20]
 8015896:	1d18      	adds	r0, r3, #4
 8015898:	6028      	str	r0, [r5, #0]
 801589a:	0635      	lsls	r5, r6, #24
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	d501      	bpl.n	80158a4 <_printf_i+0x1cc>
 80158a0:	6019      	str	r1, [r3, #0]
 80158a2:	e002      	b.n	80158aa <_printf_i+0x1d2>
 80158a4:	0670      	lsls	r0, r6, #25
 80158a6:	d5fb      	bpl.n	80158a0 <_printf_i+0x1c8>
 80158a8:	8019      	strh	r1, [r3, #0]
 80158aa:	2300      	movs	r3, #0
 80158ac:	6123      	str	r3, [r4, #16]
 80158ae:	4615      	mov	r5, r2
 80158b0:	e7ba      	b.n	8015828 <_printf_i+0x150>
 80158b2:	682b      	ldr	r3, [r5, #0]
 80158b4:	1d1a      	adds	r2, r3, #4
 80158b6:	602a      	str	r2, [r5, #0]
 80158b8:	681d      	ldr	r5, [r3, #0]
 80158ba:	6862      	ldr	r2, [r4, #4]
 80158bc:	2100      	movs	r1, #0
 80158be:	4628      	mov	r0, r5
 80158c0:	f7ea fca6 	bl	8000210 <memchr>
 80158c4:	b108      	cbz	r0, 80158ca <_printf_i+0x1f2>
 80158c6:	1b40      	subs	r0, r0, r5
 80158c8:	6060      	str	r0, [r4, #4]
 80158ca:	6863      	ldr	r3, [r4, #4]
 80158cc:	6123      	str	r3, [r4, #16]
 80158ce:	2300      	movs	r3, #0
 80158d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158d4:	e7a8      	b.n	8015828 <_printf_i+0x150>
 80158d6:	6923      	ldr	r3, [r4, #16]
 80158d8:	462a      	mov	r2, r5
 80158da:	4649      	mov	r1, r9
 80158dc:	4640      	mov	r0, r8
 80158de:	47d0      	blx	sl
 80158e0:	3001      	adds	r0, #1
 80158e2:	d0ab      	beq.n	801583c <_printf_i+0x164>
 80158e4:	6823      	ldr	r3, [r4, #0]
 80158e6:	079b      	lsls	r3, r3, #30
 80158e8:	d413      	bmi.n	8015912 <_printf_i+0x23a>
 80158ea:	68e0      	ldr	r0, [r4, #12]
 80158ec:	9b03      	ldr	r3, [sp, #12]
 80158ee:	4298      	cmp	r0, r3
 80158f0:	bfb8      	it	lt
 80158f2:	4618      	movlt	r0, r3
 80158f4:	e7a4      	b.n	8015840 <_printf_i+0x168>
 80158f6:	2301      	movs	r3, #1
 80158f8:	4632      	mov	r2, r6
 80158fa:	4649      	mov	r1, r9
 80158fc:	4640      	mov	r0, r8
 80158fe:	47d0      	blx	sl
 8015900:	3001      	adds	r0, #1
 8015902:	d09b      	beq.n	801583c <_printf_i+0x164>
 8015904:	3501      	adds	r5, #1
 8015906:	68e3      	ldr	r3, [r4, #12]
 8015908:	9903      	ldr	r1, [sp, #12]
 801590a:	1a5b      	subs	r3, r3, r1
 801590c:	42ab      	cmp	r3, r5
 801590e:	dcf2      	bgt.n	80158f6 <_printf_i+0x21e>
 8015910:	e7eb      	b.n	80158ea <_printf_i+0x212>
 8015912:	2500      	movs	r5, #0
 8015914:	f104 0619 	add.w	r6, r4, #25
 8015918:	e7f5      	b.n	8015906 <_printf_i+0x22e>
 801591a:	bf00      	nop
 801591c:	08017a55 	.word	0x08017a55
 8015920:	08017a66 	.word	0x08017a66

08015924 <__retarget_lock_acquire_recursive>:
 8015924:	4770      	bx	lr

08015926 <__retarget_lock_release_recursive>:
 8015926:	4770      	bx	lr

08015928 <memcpy>:
 8015928:	440a      	add	r2, r1
 801592a:	4291      	cmp	r1, r2
 801592c:	f100 33ff 	add.w	r3, r0, #4294967295
 8015930:	d100      	bne.n	8015934 <memcpy+0xc>
 8015932:	4770      	bx	lr
 8015934:	b510      	push	{r4, lr}
 8015936:	f811 4b01 	ldrb.w	r4, [r1], #1
 801593a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801593e:	4291      	cmp	r1, r2
 8015940:	d1f9      	bne.n	8015936 <memcpy+0xe>
 8015942:	bd10      	pop	{r4, pc}

08015944 <memmove>:
 8015944:	4288      	cmp	r0, r1
 8015946:	b510      	push	{r4, lr}
 8015948:	eb01 0402 	add.w	r4, r1, r2
 801594c:	d902      	bls.n	8015954 <memmove+0x10>
 801594e:	4284      	cmp	r4, r0
 8015950:	4623      	mov	r3, r4
 8015952:	d807      	bhi.n	8015964 <memmove+0x20>
 8015954:	1e43      	subs	r3, r0, #1
 8015956:	42a1      	cmp	r1, r4
 8015958:	d008      	beq.n	801596c <memmove+0x28>
 801595a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801595e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015962:	e7f8      	b.n	8015956 <memmove+0x12>
 8015964:	4402      	add	r2, r0
 8015966:	4601      	mov	r1, r0
 8015968:	428a      	cmp	r2, r1
 801596a:	d100      	bne.n	801596e <memmove+0x2a>
 801596c:	bd10      	pop	{r4, pc}
 801596e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015976:	e7f7      	b.n	8015968 <memmove+0x24>

08015978 <_realloc_r>:
 8015978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801597c:	4680      	mov	r8, r0
 801597e:	4614      	mov	r4, r2
 8015980:	460e      	mov	r6, r1
 8015982:	b921      	cbnz	r1, 801598e <_realloc_r+0x16>
 8015984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015988:	4611      	mov	r1, r2
 801598a:	f7ff bc0f 	b.w	80151ac <_malloc_r>
 801598e:	b92a      	cbnz	r2, 801599c <_realloc_r+0x24>
 8015990:	f7ff fba0 	bl	80150d4 <_free_r>
 8015994:	4625      	mov	r5, r4
 8015996:	4628      	mov	r0, r5
 8015998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801599c:	f000 f81b 	bl	80159d6 <_malloc_usable_size_r>
 80159a0:	4284      	cmp	r4, r0
 80159a2:	4607      	mov	r7, r0
 80159a4:	d802      	bhi.n	80159ac <_realloc_r+0x34>
 80159a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80159aa:	d812      	bhi.n	80159d2 <_realloc_r+0x5a>
 80159ac:	4621      	mov	r1, r4
 80159ae:	4640      	mov	r0, r8
 80159b0:	f7ff fbfc 	bl	80151ac <_malloc_r>
 80159b4:	4605      	mov	r5, r0
 80159b6:	2800      	cmp	r0, #0
 80159b8:	d0ed      	beq.n	8015996 <_realloc_r+0x1e>
 80159ba:	42bc      	cmp	r4, r7
 80159bc:	4622      	mov	r2, r4
 80159be:	4631      	mov	r1, r6
 80159c0:	bf28      	it	cs
 80159c2:	463a      	movcs	r2, r7
 80159c4:	f7ff ffb0 	bl	8015928 <memcpy>
 80159c8:	4631      	mov	r1, r6
 80159ca:	4640      	mov	r0, r8
 80159cc:	f7ff fb82 	bl	80150d4 <_free_r>
 80159d0:	e7e1      	b.n	8015996 <_realloc_r+0x1e>
 80159d2:	4635      	mov	r5, r6
 80159d4:	e7df      	b.n	8015996 <_realloc_r+0x1e>

080159d6 <_malloc_usable_size_r>:
 80159d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159da:	1f18      	subs	r0, r3, #4
 80159dc:	2b00      	cmp	r3, #0
 80159de:	bfbc      	itt	lt
 80159e0:	580b      	ldrlt	r3, [r1, r0]
 80159e2:	18c0      	addlt	r0, r0, r3
 80159e4:	4770      	bx	lr
	...

080159e8 <tanhf>:
 80159e8:	b510      	push	{r4, lr}
 80159ea:	ee10 4a10 	vmov	r4, s0
 80159ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80159f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80159f6:	ed2d 8b02 	vpush	{d8}
 80159fa:	eeb0 7a40 	vmov.f32	s14, s0
 80159fe:	db0c      	blt.n	8015a1a <tanhf+0x32>
 8015a00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015a04:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8015a08:	2c00      	cmp	r4, #0
 8015a0a:	bfac      	ite	ge
 8015a0c:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8015a10:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8015a14:	ecbd 8b02 	vpop	{d8}
 8015a18:	bd10      	pop	{r4, pc}
 8015a1a:	4a1b      	ldr	r2, [pc, #108]	; (8015a88 <tanhf+0xa0>)
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	dc30      	bgt.n	8015a82 <tanhf+0x9a>
 8015a20:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8015a24:	da06      	bge.n	8015a34 <tanhf+0x4c>
 8015a26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015a2a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015a2e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015a32:	e7ef      	b.n	8015a14 <tanhf+0x2c>
 8015a34:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015a38:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8015a3c:	db12      	blt.n	8015a64 <tanhf+0x7c>
 8015a3e:	f001 facd 	bl	8016fdc <fabsf>
 8015a42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015a46:	f001 f9ad 	bl	8016da4 <expm1f>
 8015a4a:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015a4e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8015a52:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015a56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015a5a:	2c00      	cmp	r4, #0
 8015a5c:	bfb8      	it	lt
 8015a5e:	eeb1 0a40 	vneglt.f32	s0, s0
 8015a62:	e7d7      	b.n	8015a14 <tanhf+0x2c>
 8015a64:	f001 faba 	bl	8016fdc <fabsf>
 8015a68:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8015a6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015a70:	f001 f998 	bl	8016da4 <expm1f>
 8015a74:	ee70 7a08 	vadd.f32	s15, s0, s16
 8015a78:	eeb1 7a40 	vneg.f32	s14, s0
 8015a7c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015a80:	e7eb      	b.n	8015a5a <tanhf+0x72>
 8015a82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015a86:	e7e8      	b.n	8015a5a <tanhf+0x72>
 8015a88:	41afffff 	.word	0x41afffff

08015a8c <pow>:
 8015a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a8e:	ed2d 8b02 	vpush	{d8}
 8015a92:	eeb0 8a40 	vmov.f32	s16, s0
 8015a96:	eef0 8a60 	vmov.f32	s17, s1
 8015a9a:	ec55 4b11 	vmov	r4, r5, d1
 8015a9e:	f000 f8f7 	bl	8015c90 <__ieee754_pow>
 8015aa2:	4622      	mov	r2, r4
 8015aa4:	462b      	mov	r3, r5
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	4629      	mov	r1, r5
 8015aaa:	ec57 6b10 	vmov	r6, r7, d0
 8015aae:	f7eb f855 	bl	8000b5c <__aeabi_dcmpun>
 8015ab2:	2800      	cmp	r0, #0
 8015ab4:	d13b      	bne.n	8015b2e <pow+0xa2>
 8015ab6:	ec51 0b18 	vmov	r0, r1, d8
 8015aba:	2200      	movs	r2, #0
 8015abc:	2300      	movs	r3, #0
 8015abe:	f7eb f81b 	bl	8000af8 <__aeabi_dcmpeq>
 8015ac2:	b1b8      	cbz	r0, 8015af4 <pow+0x68>
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	4620      	mov	r0, r4
 8015aca:	4629      	mov	r1, r5
 8015acc:	f7eb f814 	bl	8000af8 <__aeabi_dcmpeq>
 8015ad0:	2800      	cmp	r0, #0
 8015ad2:	d146      	bne.n	8015b62 <pow+0xd6>
 8015ad4:	ec45 4b10 	vmov	d0, r4, r5
 8015ad8:	f001 f8d3 	bl	8016c82 <finite>
 8015adc:	b338      	cbz	r0, 8015b2e <pow+0xa2>
 8015ade:	2200      	movs	r2, #0
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	4629      	mov	r1, r5
 8015ae6:	f7eb f811 	bl	8000b0c <__aeabi_dcmplt>
 8015aea:	b300      	cbz	r0, 8015b2e <pow+0xa2>
 8015aec:	f7ff fab0 	bl	8015050 <__errno>
 8015af0:	2322      	movs	r3, #34	; 0x22
 8015af2:	e01b      	b.n	8015b2c <pow+0xa0>
 8015af4:	ec47 6b10 	vmov	d0, r6, r7
 8015af8:	f001 f8c3 	bl	8016c82 <finite>
 8015afc:	b9e0      	cbnz	r0, 8015b38 <pow+0xac>
 8015afe:	eeb0 0a48 	vmov.f32	s0, s16
 8015b02:	eef0 0a68 	vmov.f32	s1, s17
 8015b06:	f001 f8bc 	bl	8016c82 <finite>
 8015b0a:	b1a8      	cbz	r0, 8015b38 <pow+0xac>
 8015b0c:	ec45 4b10 	vmov	d0, r4, r5
 8015b10:	f001 f8b7 	bl	8016c82 <finite>
 8015b14:	b180      	cbz	r0, 8015b38 <pow+0xac>
 8015b16:	4632      	mov	r2, r6
 8015b18:	463b      	mov	r3, r7
 8015b1a:	4630      	mov	r0, r6
 8015b1c:	4639      	mov	r1, r7
 8015b1e:	f7eb f81d 	bl	8000b5c <__aeabi_dcmpun>
 8015b22:	2800      	cmp	r0, #0
 8015b24:	d0e2      	beq.n	8015aec <pow+0x60>
 8015b26:	f7ff fa93 	bl	8015050 <__errno>
 8015b2a:	2321      	movs	r3, #33	; 0x21
 8015b2c:	6003      	str	r3, [r0, #0]
 8015b2e:	ecbd 8b02 	vpop	{d8}
 8015b32:	ec47 6b10 	vmov	d0, r6, r7
 8015b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b38:	2200      	movs	r2, #0
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	4630      	mov	r0, r6
 8015b3e:	4639      	mov	r1, r7
 8015b40:	f7ea ffda 	bl	8000af8 <__aeabi_dcmpeq>
 8015b44:	2800      	cmp	r0, #0
 8015b46:	d0f2      	beq.n	8015b2e <pow+0xa2>
 8015b48:	eeb0 0a48 	vmov.f32	s0, s16
 8015b4c:	eef0 0a68 	vmov.f32	s1, s17
 8015b50:	f001 f897 	bl	8016c82 <finite>
 8015b54:	2800      	cmp	r0, #0
 8015b56:	d0ea      	beq.n	8015b2e <pow+0xa2>
 8015b58:	ec45 4b10 	vmov	d0, r4, r5
 8015b5c:	f001 f891 	bl	8016c82 <finite>
 8015b60:	e7c3      	b.n	8015aea <pow+0x5e>
 8015b62:	4f01      	ldr	r7, [pc, #4]	; (8015b68 <pow+0xdc>)
 8015b64:	2600      	movs	r6, #0
 8015b66:	e7e2      	b.n	8015b2e <pow+0xa2>
 8015b68:	3ff00000 	.word	0x3ff00000

08015b6c <sqrt>:
 8015b6c:	b538      	push	{r3, r4, r5, lr}
 8015b6e:	ed2d 8b02 	vpush	{d8}
 8015b72:	ec55 4b10 	vmov	r4, r5, d0
 8015b76:	f000 fdb9 	bl	80166ec <__ieee754_sqrt>
 8015b7a:	4622      	mov	r2, r4
 8015b7c:	462b      	mov	r3, r5
 8015b7e:	4620      	mov	r0, r4
 8015b80:	4629      	mov	r1, r5
 8015b82:	eeb0 8a40 	vmov.f32	s16, s0
 8015b86:	eef0 8a60 	vmov.f32	s17, s1
 8015b8a:	f7ea ffe7 	bl	8000b5c <__aeabi_dcmpun>
 8015b8e:	b990      	cbnz	r0, 8015bb6 <sqrt+0x4a>
 8015b90:	2200      	movs	r2, #0
 8015b92:	2300      	movs	r3, #0
 8015b94:	4620      	mov	r0, r4
 8015b96:	4629      	mov	r1, r5
 8015b98:	f7ea ffb8 	bl	8000b0c <__aeabi_dcmplt>
 8015b9c:	b158      	cbz	r0, 8015bb6 <sqrt+0x4a>
 8015b9e:	f7ff fa57 	bl	8015050 <__errno>
 8015ba2:	2321      	movs	r3, #33	; 0x21
 8015ba4:	6003      	str	r3, [r0, #0]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	2300      	movs	r3, #0
 8015baa:	4610      	mov	r0, r2
 8015bac:	4619      	mov	r1, r3
 8015bae:	f7ea fe65 	bl	800087c <__aeabi_ddiv>
 8015bb2:	ec41 0b18 	vmov	d8, r0, r1
 8015bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8015bba:	eef0 0a68 	vmov.f32	s1, s17
 8015bbe:	ecbd 8b02 	vpop	{d8}
 8015bc2:	bd38      	pop	{r3, r4, r5, pc}

08015bc4 <expf>:
 8015bc4:	b508      	push	{r3, lr}
 8015bc6:	ed2d 8b02 	vpush	{d8}
 8015bca:	eef0 8a40 	vmov.f32	s17, s0
 8015bce:	f000 fe3f 	bl	8016850 <__ieee754_expf>
 8015bd2:	eeb0 8a40 	vmov.f32	s16, s0
 8015bd6:	eeb0 0a68 	vmov.f32	s0, s17
 8015bda:	f001 fa06 	bl	8016fea <finitef>
 8015bde:	b160      	cbz	r0, 8015bfa <expf+0x36>
 8015be0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8015c20 <expf+0x5c>
 8015be4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bec:	dd0a      	ble.n	8015c04 <expf+0x40>
 8015bee:	f7ff fa2f 	bl	8015050 <__errno>
 8015bf2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8015c24 <expf+0x60>
 8015bf6:	2322      	movs	r3, #34	; 0x22
 8015bf8:	6003      	str	r3, [r0, #0]
 8015bfa:	eeb0 0a48 	vmov.f32	s0, s16
 8015bfe:	ecbd 8b02 	vpop	{d8}
 8015c02:	bd08      	pop	{r3, pc}
 8015c04:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015c28 <expf+0x64>
 8015c08:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c10:	d5f3      	bpl.n	8015bfa <expf+0x36>
 8015c12:	f7ff fa1d 	bl	8015050 <__errno>
 8015c16:	2322      	movs	r3, #34	; 0x22
 8015c18:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8015c2c <expf+0x68>
 8015c1c:	6003      	str	r3, [r0, #0]
 8015c1e:	e7ec      	b.n	8015bfa <expf+0x36>
 8015c20:	42b17180 	.word	0x42b17180
 8015c24:	7f800000 	.word	0x7f800000
 8015c28:	c2cff1b5 	.word	0xc2cff1b5
 8015c2c:	00000000 	.word	0x00000000

08015c30 <logf>:
 8015c30:	b508      	push	{r3, lr}
 8015c32:	ed2d 8b02 	vpush	{d8}
 8015c36:	eeb0 8a40 	vmov.f32	s16, s0
 8015c3a:	f000 fed7 	bl	80169ec <__ieee754_logf>
 8015c3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c46:	d60f      	bvs.n	8015c68 <logf+0x38>
 8015c48:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c50:	dc0a      	bgt.n	8015c68 <logf+0x38>
 8015c52:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5a:	d108      	bne.n	8015c6e <logf+0x3e>
 8015c5c:	f7ff f9f8 	bl	8015050 <__errno>
 8015c60:	2322      	movs	r3, #34	; 0x22
 8015c62:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8015c84 <logf+0x54>
 8015c66:	6003      	str	r3, [r0, #0]
 8015c68:	ecbd 8b02 	vpop	{d8}
 8015c6c:	bd08      	pop	{r3, pc}
 8015c6e:	f7ff f9ef 	bl	8015050 <__errno>
 8015c72:	ecbd 8b02 	vpop	{d8}
 8015c76:	2321      	movs	r3, #33	; 0x21
 8015c78:	6003      	str	r3, [r0, #0]
 8015c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015c7e:	4802      	ldr	r0, [pc, #8]	; (8015c88 <logf+0x58>)
 8015c80:	f001 b9c0 	b.w	8017004 <nanf>
 8015c84:	ff800000 	.word	0xff800000
 8015c88:	08017a49 	.word	0x08017a49
 8015c8c:	00000000 	.word	0x00000000

08015c90 <__ieee754_pow>:
 8015c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c94:	ed2d 8b06 	vpush	{d8-d10}
 8015c98:	b089      	sub	sp, #36	; 0x24
 8015c9a:	ed8d 1b00 	vstr	d1, [sp]
 8015c9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8015ca2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8015ca6:	ea58 0102 	orrs.w	r1, r8, r2
 8015caa:	ec57 6b10 	vmov	r6, r7, d0
 8015cae:	d115      	bne.n	8015cdc <__ieee754_pow+0x4c>
 8015cb0:	19b3      	adds	r3, r6, r6
 8015cb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8015cb6:	4152      	adcs	r2, r2
 8015cb8:	4299      	cmp	r1, r3
 8015cba:	4b89      	ldr	r3, [pc, #548]	; (8015ee0 <__ieee754_pow+0x250>)
 8015cbc:	4193      	sbcs	r3, r2
 8015cbe:	f080 84d2 	bcs.w	8016666 <__ieee754_pow+0x9d6>
 8015cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015cc6:	4630      	mov	r0, r6
 8015cc8:	4639      	mov	r1, r7
 8015cca:	f7ea faf7 	bl	80002bc <__adddf3>
 8015cce:	ec41 0b10 	vmov	d0, r0, r1
 8015cd2:	b009      	add	sp, #36	; 0x24
 8015cd4:	ecbd 8b06 	vpop	{d8-d10}
 8015cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cdc:	4b81      	ldr	r3, [pc, #516]	; (8015ee4 <__ieee754_pow+0x254>)
 8015cde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8015ce2:	429c      	cmp	r4, r3
 8015ce4:	ee10 aa10 	vmov	sl, s0
 8015ce8:	463d      	mov	r5, r7
 8015cea:	dc06      	bgt.n	8015cfa <__ieee754_pow+0x6a>
 8015cec:	d101      	bne.n	8015cf2 <__ieee754_pow+0x62>
 8015cee:	2e00      	cmp	r6, #0
 8015cf0:	d1e7      	bne.n	8015cc2 <__ieee754_pow+0x32>
 8015cf2:	4598      	cmp	r8, r3
 8015cf4:	dc01      	bgt.n	8015cfa <__ieee754_pow+0x6a>
 8015cf6:	d10f      	bne.n	8015d18 <__ieee754_pow+0x88>
 8015cf8:	b172      	cbz	r2, 8015d18 <__ieee754_pow+0x88>
 8015cfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8015cfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8015d02:	ea55 050a 	orrs.w	r5, r5, sl
 8015d06:	d1dc      	bne.n	8015cc2 <__ieee754_pow+0x32>
 8015d08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015d0c:	18db      	adds	r3, r3, r3
 8015d0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8015d12:	4152      	adcs	r2, r2
 8015d14:	429d      	cmp	r5, r3
 8015d16:	e7d0      	b.n	8015cba <__ieee754_pow+0x2a>
 8015d18:	2d00      	cmp	r5, #0
 8015d1a:	da3b      	bge.n	8015d94 <__ieee754_pow+0x104>
 8015d1c:	4b72      	ldr	r3, [pc, #456]	; (8015ee8 <__ieee754_pow+0x258>)
 8015d1e:	4598      	cmp	r8, r3
 8015d20:	dc51      	bgt.n	8015dc6 <__ieee754_pow+0x136>
 8015d22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015d26:	4598      	cmp	r8, r3
 8015d28:	f340 84ac 	ble.w	8016684 <__ieee754_pow+0x9f4>
 8015d2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015d30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015d34:	2b14      	cmp	r3, #20
 8015d36:	dd0f      	ble.n	8015d58 <__ieee754_pow+0xc8>
 8015d38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015d3c:	fa22 f103 	lsr.w	r1, r2, r3
 8015d40:	fa01 f303 	lsl.w	r3, r1, r3
 8015d44:	4293      	cmp	r3, r2
 8015d46:	f040 849d 	bne.w	8016684 <__ieee754_pow+0x9f4>
 8015d4a:	f001 0101 	and.w	r1, r1, #1
 8015d4e:	f1c1 0302 	rsb	r3, r1, #2
 8015d52:	9304      	str	r3, [sp, #16]
 8015d54:	b182      	cbz	r2, 8015d78 <__ieee754_pow+0xe8>
 8015d56:	e05f      	b.n	8015e18 <__ieee754_pow+0x188>
 8015d58:	2a00      	cmp	r2, #0
 8015d5a:	d15b      	bne.n	8015e14 <__ieee754_pow+0x184>
 8015d5c:	f1c3 0314 	rsb	r3, r3, #20
 8015d60:	fa48 f103 	asr.w	r1, r8, r3
 8015d64:	fa01 f303 	lsl.w	r3, r1, r3
 8015d68:	4543      	cmp	r3, r8
 8015d6a:	f040 8488 	bne.w	801667e <__ieee754_pow+0x9ee>
 8015d6e:	f001 0101 	and.w	r1, r1, #1
 8015d72:	f1c1 0302 	rsb	r3, r1, #2
 8015d76:	9304      	str	r3, [sp, #16]
 8015d78:	4b5c      	ldr	r3, [pc, #368]	; (8015eec <__ieee754_pow+0x25c>)
 8015d7a:	4598      	cmp	r8, r3
 8015d7c:	d132      	bne.n	8015de4 <__ieee754_pow+0x154>
 8015d7e:	f1b9 0f00 	cmp.w	r9, #0
 8015d82:	f280 8478 	bge.w	8016676 <__ieee754_pow+0x9e6>
 8015d86:	4959      	ldr	r1, [pc, #356]	; (8015eec <__ieee754_pow+0x25c>)
 8015d88:	4632      	mov	r2, r6
 8015d8a:	463b      	mov	r3, r7
 8015d8c:	2000      	movs	r0, #0
 8015d8e:	f7ea fd75 	bl	800087c <__aeabi_ddiv>
 8015d92:	e79c      	b.n	8015cce <__ieee754_pow+0x3e>
 8015d94:	2300      	movs	r3, #0
 8015d96:	9304      	str	r3, [sp, #16]
 8015d98:	2a00      	cmp	r2, #0
 8015d9a:	d13d      	bne.n	8015e18 <__ieee754_pow+0x188>
 8015d9c:	4b51      	ldr	r3, [pc, #324]	; (8015ee4 <__ieee754_pow+0x254>)
 8015d9e:	4598      	cmp	r8, r3
 8015da0:	d1ea      	bne.n	8015d78 <__ieee754_pow+0xe8>
 8015da2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015da6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015daa:	ea53 030a 	orrs.w	r3, r3, sl
 8015dae:	f000 845a 	beq.w	8016666 <__ieee754_pow+0x9d6>
 8015db2:	4b4f      	ldr	r3, [pc, #316]	; (8015ef0 <__ieee754_pow+0x260>)
 8015db4:	429c      	cmp	r4, r3
 8015db6:	dd08      	ble.n	8015dca <__ieee754_pow+0x13a>
 8015db8:	f1b9 0f00 	cmp.w	r9, #0
 8015dbc:	f2c0 8457 	blt.w	801666e <__ieee754_pow+0x9de>
 8015dc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015dc4:	e783      	b.n	8015cce <__ieee754_pow+0x3e>
 8015dc6:	2302      	movs	r3, #2
 8015dc8:	e7e5      	b.n	8015d96 <__ieee754_pow+0x106>
 8015dca:	f1b9 0f00 	cmp.w	r9, #0
 8015dce:	f04f 0000 	mov.w	r0, #0
 8015dd2:	f04f 0100 	mov.w	r1, #0
 8015dd6:	f6bf af7a 	bge.w	8015cce <__ieee754_pow+0x3e>
 8015dda:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015dde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015de2:	e774      	b.n	8015cce <__ieee754_pow+0x3e>
 8015de4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015de8:	d106      	bne.n	8015df8 <__ieee754_pow+0x168>
 8015dea:	4632      	mov	r2, r6
 8015dec:	463b      	mov	r3, r7
 8015dee:	4630      	mov	r0, r6
 8015df0:	4639      	mov	r1, r7
 8015df2:	f7ea fc19 	bl	8000628 <__aeabi_dmul>
 8015df6:	e76a      	b.n	8015cce <__ieee754_pow+0x3e>
 8015df8:	4b3e      	ldr	r3, [pc, #248]	; (8015ef4 <__ieee754_pow+0x264>)
 8015dfa:	4599      	cmp	r9, r3
 8015dfc:	d10c      	bne.n	8015e18 <__ieee754_pow+0x188>
 8015dfe:	2d00      	cmp	r5, #0
 8015e00:	db0a      	blt.n	8015e18 <__ieee754_pow+0x188>
 8015e02:	ec47 6b10 	vmov	d0, r6, r7
 8015e06:	b009      	add	sp, #36	; 0x24
 8015e08:	ecbd 8b06 	vpop	{d8-d10}
 8015e0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e10:	f000 bc6c 	b.w	80166ec <__ieee754_sqrt>
 8015e14:	2300      	movs	r3, #0
 8015e16:	9304      	str	r3, [sp, #16]
 8015e18:	ec47 6b10 	vmov	d0, r6, r7
 8015e1c:	f000 ff28 	bl	8016c70 <fabs>
 8015e20:	ec51 0b10 	vmov	r0, r1, d0
 8015e24:	f1ba 0f00 	cmp.w	sl, #0
 8015e28:	d129      	bne.n	8015e7e <__ieee754_pow+0x1ee>
 8015e2a:	b124      	cbz	r4, 8015e36 <__ieee754_pow+0x1a6>
 8015e2c:	4b2f      	ldr	r3, [pc, #188]	; (8015eec <__ieee754_pow+0x25c>)
 8015e2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d123      	bne.n	8015e7e <__ieee754_pow+0x1ee>
 8015e36:	f1b9 0f00 	cmp.w	r9, #0
 8015e3a:	da05      	bge.n	8015e48 <__ieee754_pow+0x1b8>
 8015e3c:	4602      	mov	r2, r0
 8015e3e:	460b      	mov	r3, r1
 8015e40:	2000      	movs	r0, #0
 8015e42:	492a      	ldr	r1, [pc, #168]	; (8015eec <__ieee754_pow+0x25c>)
 8015e44:	f7ea fd1a 	bl	800087c <__aeabi_ddiv>
 8015e48:	2d00      	cmp	r5, #0
 8015e4a:	f6bf af40 	bge.w	8015cce <__ieee754_pow+0x3e>
 8015e4e:	9b04      	ldr	r3, [sp, #16]
 8015e50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015e54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015e58:	4323      	orrs	r3, r4
 8015e5a:	d108      	bne.n	8015e6e <__ieee754_pow+0x1de>
 8015e5c:	4602      	mov	r2, r0
 8015e5e:	460b      	mov	r3, r1
 8015e60:	4610      	mov	r0, r2
 8015e62:	4619      	mov	r1, r3
 8015e64:	f7ea fa28 	bl	80002b8 <__aeabi_dsub>
 8015e68:	4602      	mov	r2, r0
 8015e6a:	460b      	mov	r3, r1
 8015e6c:	e78f      	b.n	8015d8e <__ieee754_pow+0xfe>
 8015e6e:	9b04      	ldr	r3, [sp, #16]
 8015e70:	2b01      	cmp	r3, #1
 8015e72:	f47f af2c 	bne.w	8015cce <__ieee754_pow+0x3e>
 8015e76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	e727      	b.n	8015cce <__ieee754_pow+0x3e>
 8015e7e:	0feb      	lsrs	r3, r5, #31
 8015e80:	3b01      	subs	r3, #1
 8015e82:	9306      	str	r3, [sp, #24]
 8015e84:	9a06      	ldr	r2, [sp, #24]
 8015e86:	9b04      	ldr	r3, [sp, #16]
 8015e88:	4313      	orrs	r3, r2
 8015e8a:	d102      	bne.n	8015e92 <__ieee754_pow+0x202>
 8015e8c:	4632      	mov	r2, r6
 8015e8e:	463b      	mov	r3, r7
 8015e90:	e7e6      	b.n	8015e60 <__ieee754_pow+0x1d0>
 8015e92:	4b19      	ldr	r3, [pc, #100]	; (8015ef8 <__ieee754_pow+0x268>)
 8015e94:	4598      	cmp	r8, r3
 8015e96:	f340 80fb 	ble.w	8016090 <__ieee754_pow+0x400>
 8015e9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015e9e:	4598      	cmp	r8, r3
 8015ea0:	4b13      	ldr	r3, [pc, #76]	; (8015ef0 <__ieee754_pow+0x260>)
 8015ea2:	dd0c      	ble.n	8015ebe <__ieee754_pow+0x22e>
 8015ea4:	429c      	cmp	r4, r3
 8015ea6:	dc0f      	bgt.n	8015ec8 <__ieee754_pow+0x238>
 8015ea8:	f1b9 0f00 	cmp.w	r9, #0
 8015eac:	da0f      	bge.n	8015ece <__ieee754_pow+0x23e>
 8015eae:	2000      	movs	r0, #0
 8015eb0:	b009      	add	sp, #36	; 0x24
 8015eb2:	ecbd 8b06 	vpop	{d8-d10}
 8015eb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eba:	f000 beae 	b.w	8016c1a <__math_oflow>
 8015ebe:	429c      	cmp	r4, r3
 8015ec0:	dbf2      	blt.n	8015ea8 <__ieee754_pow+0x218>
 8015ec2:	4b0a      	ldr	r3, [pc, #40]	; (8015eec <__ieee754_pow+0x25c>)
 8015ec4:	429c      	cmp	r4, r3
 8015ec6:	dd19      	ble.n	8015efc <__ieee754_pow+0x26c>
 8015ec8:	f1b9 0f00 	cmp.w	r9, #0
 8015ecc:	dcef      	bgt.n	8015eae <__ieee754_pow+0x21e>
 8015ece:	2000      	movs	r0, #0
 8015ed0:	b009      	add	sp, #36	; 0x24
 8015ed2:	ecbd 8b06 	vpop	{d8-d10}
 8015ed6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eda:	f000 be95 	b.w	8016c08 <__math_uflow>
 8015ede:	bf00      	nop
 8015ee0:	fff00000 	.word	0xfff00000
 8015ee4:	7ff00000 	.word	0x7ff00000
 8015ee8:	433fffff 	.word	0x433fffff
 8015eec:	3ff00000 	.word	0x3ff00000
 8015ef0:	3fefffff 	.word	0x3fefffff
 8015ef4:	3fe00000 	.word	0x3fe00000
 8015ef8:	41e00000 	.word	0x41e00000
 8015efc:	4b60      	ldr	r3, [pc, #384]	; (8016080 <__ieee754_pow+0x3f0>)
 8015efe:	2200      	movs	r2, #0
 8015f00:	f7ea f9da 	bl	80002b8 <__aeabi_dsub>
 8015f04:	a354      	add	r3, pc, #336	; (adr r3, 8016058 <__ieee754_pow+0x3c8>)
 8015f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	460d      	mov	r5, r1
 8015f0e:	f7ea fb8b 	bl	8000628 <__aeabi_dmul>
 8015f12:	a353      	add	r3, pc, #332	; (adr r3, 8016060 <__ieee754_pow+0x3d0>)
 8015f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f18:	4606      	mov	r6, r0
 8015f1a:	460f      	mov	r7, r1
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	4629      	mov	r1, r5
 8015f20:	f7ea fb82 	bl	8000628 <__aeabi_dmul>
 8015f24:	4b57      	ldr	r3, [pc, #348]	; (8016084 <__ieee754_pow+0x3f4>)
 8015f26:	4682      	mov	sl, r0
 8015f28:	468b      	mov	fp, r1
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	4629      	mov	r1, r5
 8015f30:	f7ea fb7a 	bl	8000628 <__aeabi_dmul>
 8015f34:	4602      	mov	r2, r0
 8015f36:	460b      	mov	r3, r1
 8015f38:	a14b      	add	r1, pc, #300	; (adr r1, 8016068 <__ieee754_pow+0x3d8>)
 8015f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f3e:	f7ea f9bb 	bl	80002b8 <__aeabi_dsub>
 8015f42:	4622      	mov	r2, r4
 8015f44:	462b      	mov	r3, r5
 8015f46:	f7ea fb6f 	bl	8000628 <__aeabi_dmul>
 8015f4a:	4602      	mov	r2, r0
 8015f4c:	460b      	mov	r3, r1
 8015f4e:	2000      	movs	r0, #0
 8015f50:	494d      	ldr	r1, [pc, #308]	; (8016088 <__ieee754_pow+0x3f8>)
 8015f52:	f7ea f9b1 	bl	80002b8 <__aeabi_dsub>
 8015f56:	4622      	mov	r2, r4
 8015f58:	4680      	mov	r8, r0
 8015f5a:	4689      	mov	r9, r1
 8015f5c:	462b      	mov	r3, r5
 8015f5e:	4620      	mov	r0, r4
 8015f60:	4629      	mov	r1, r5
 8015f62:	f7ea fb61 	bl	8000628 <__aeabi_dmul>
 8015f66:	4602      	mov	r2, r0
 8015f68:	460b      	mov	r3, r1
 8015f6a:	4640      	mov	r0, r8
 8015f6c:	4649      	mov	r1, r9
 8015f6e:	f7ea fb5b 	bl	8000628 <__aeabi_dmul>
 8015f72:	a33f      	add	r3, pc, #252	; (adr r3, 8016070 <__ieee754_pow+0x3e0>)
 8015f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f78:	f7ea fb56 	bl	8000628 <__aeabi_dmul>
 8015f7c:	4602      	mov	r2, r0
 8015f7e:	460b      	mov	r3, r1
 8015f80:	4650      	mov	r0, sl
 8015f82:	4659      	mov	r1, fp
 8015f84:	f7ea f998 	bl	80002b8 <__aeabi_dsub>
 8015f88:	4602      	mov	r2, r0
 8015f8a:	460b      	mov	r3, r1
 8015f8c:	4680      	mov	r8, r0
 8015f8e:	4689      	mov	r9, r1
 8015f90:	4630      	mov	r0, r6
 8015f92:	4639      	mov	r1, r7
 8015f94:	f7ea f992 	bl	80002bc <__adddf3>
 8015f98:	2000      	movs	r0, #0
 8015f9a:	4632      	mov	r2, r6
 8015f9c:	463b      	mov	r3, r7
 8015f9e:	4604      	mov	r4, r0
 8015fa0:	460d      	mov	r5, r1
 8015fa2:	f7ea f989 	bl	80002b8 <__aeabi_dsub>
 8015fa6:	4602      	mov	r2, r0
 8015fa8:	460b      	mov	r3, r1
 8015faa:	4640      	mov	r0, r8
 8015fac:	4649      	mov	r1, r9
 8015fae:	f7ea f983 	bl	80002b8 <__aeabi_dsub>
 8015fb2:	9b04      	ldr	r3, [sp, #16]
 8015fb4:	9a06      	ldr	r2, [sp, #24]
 8015fb6:	3b01      	subs	r3, #1
 8015fb8:	4313      	orrs	r3, r2
 8015fba:	4682      	mov	sl, r0
 8015fbc:	468b      	mov	fp, r1
 8015fbe:	f040 81e7 	bne.w	8016390 <__ieee754_pow+0x700>
 8015fc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016078 <__ieee754_pow+0x3e8>
 8015fc6:	eeb0 8a47 	vmov.f32	s16, s14
 8015fca:	eef0 8a67 	vmov.f32	s17, s15
 8015fce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015fd2:	2600      	movs	r6, #0
 8015fd4:	4632      	mov	r2, r6
 8015fd6:	463b      	mov	r3, r7
 8015fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fdc:	f7ea f96c 	bl	80002b8 <__aeabi_dsub>
 8015fe0:	4622      	mov	r2, r4
 8015fe2:	462b      	mov	r3, r5
 8015fe4:	f7ea fb20 	bl	8000628 <__aeabi_dmul>
 8015fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015fec:	4680      	mov	r8, r0
 8015fee:	4689      	mov	r9, r1
 8015ff0:	4650      	mov	r0, sl
 8015ff2:	4659      	mov	r1, fp
 8015ff4:	f7ea fb18 	bl	8000628 <__aeabi_dmul>
 8015ff8:	4602      	mov	r2, r0
 8015ffa:	460b      	mov	r3, r1
 8015ffc:	4640      	mov	r0, r8
 8015ffe:	4649      	mov	r1, r9
 8016000:	f7ea f95c 	bl	80002bc <__adddf3>
 8016004:	4632      	mov	r2, r6
 8016006:	463b      	mov	r3, r7
 8016008:	4680      	mov	r8, r0
 801600a:	4689      	mov	r9, r1
 801600c:	4620      	mov	r0, r4
 801600e:	4629      	mov	r1, r5
 8016010:	f7ea fb0a 	bl	8000628 <__aeabi_dmul>
 8016014:	460b      	mov	r3, r1
 8016016:	4604      	mov	r4, r0
 8016018:	460d      	mov	r5, r1
 801601a:	4602      	mov	r2, r0
 801601c:	4649      	mov	r1, r9
 801601e:	4640      	mov	r0, r8
 8016020:	f7ea f94c 	bl	80002bc <__adddf3>
 8016024:	4b19      	ldr	r3, [pc, #100]	; (801608c <__ieee754_pow+0x3fc>)
 8016026:	4299      	cmp	r1, r3
 8016028:	ec45 4b19 	vmov	d9, r4, r5
 801602c:	4606      	mov	r6, r0
 801602e:	460f      	mov	r7, r1
 8016030:	468b      	mov	fp, r1
 8016032:	f340 82f1 	ble.w	8016618 <__ieee754_pow+0x988>
 8016036:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801603a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801603e:	4303      	orrs	r3, r0
 8016040:	f000 81e4 	beq.w	801640c <__ieee754_pow+0x77c>
 8016044:	ec51 0b18 	vmov	r0, r1, d8
 8016048:	2200      	movs	r2, #0
 801604a:	2300      	movs	r3, #0
 801604c:	f7ea fd5e 	bl	8000b0c <__aeabi_dcmplt>
 8016050:	3800      	subs	r0, #0
 8016052:	bf18      	it	ne
 8016054:	2001      	movne	r0, #1
 8016056:	e72b      	b.n	8015eb0 <__ieee754_pow+0x220>
 8016058:	60000000 	.word	0x60000000
 801605c:	3ff71547 	.word	0x3ff71547
 8016060:	f85ddf44 	.word	0xf85ddf44
 8016064:	3e54ae0b 	.word	0x3e54ae0b
 8016068:	55555555 	.word	0x55555555
 801606c:	3fd55555 	.word	0x3fd55555
 8016070:	652b82fe 	.word	0x652b82fe
 8016074:	3ff71547 	.word	0x3ff71547
 8016078:	00000000 	.word	0x00000000
 801607c:	bff00000 	.word	0xbff00000
 8016080:	3ff00000 	.word	0x3ff00000
 8016084:	3fd00000 	.word	0x3fd00000
 8016088:	3fe00000 	.word	0x3fe00000
 801608c:	408fffff 	.word	0x408fffff
 8016090:	4bd5      	ldr	r3, [pc, #852]	; (80163e8 <__ieee754_pow+0x758>)
 8016092:	402b      	ands	r3, r5
 8016094:	2200      	movs	r2, #0
 8016096:	b92b      	cbnz	r3, 80160a4 <__ieee754_pow+0x414>
 8016098:	4bd4      	ldr	r3, [pc, #848]	; (80163ec <__ieee754_pow+0x75c>)
 801609a:	f7ea fac5 	bl	8000628 <__aeabi_dmul>
 801609e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80160a2:	460c      	mov	r4, r1
 80160a4:	1523      	asrs	r3, r4, #20
 80160a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80160aa:	4413      	add	r3, r2
 80160ac:	9305      	str	r3, [sp, #20]
 80160ae:	4bd0      	ldr	r3, [pc, #832]	; (80163f0 <__ieee754_pow+0x760>)
 80160b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80160b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80160b8:	429c      	cmp	r4, r3
 80160ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80160be:	dd08      	ble.n	80160d2 <__ieee754_pow+0x442>
 80160c0:	4bcc      	ldr	r3, [pc, #816]	; (80163f4 <__ieee754_pow+0x764>)
 80160c2:	429c      	cmp	r4, r3
 80160c4:	f340 8162 	ble.w	801638c <__ieee754_pow+0x6fc>
 80160c8:	9b05      	ldr	r3, [sp, #20]
 80160ca:	3301      	adds	r3, #1
 80160cc:	9305      	str	r3, [sp, #20]
 80160ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80160d2:	2400      	movs	r4, #0
 80160d4:	00e3      	lsls	r3, r4, #3
 80160d6:	9307      	str	r3, [sp, #28]
 80160d8:	4bc7      	ldr	r3, [pc, #796]	; (80163f8 <__ieee754_pow+0x768>)
 80160da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80160de:	ed93 7b00 	vldr	d7, [r3]
 80160e2:	4629      	mov	r1, r5
 80160e4:	ec53 2b17 	vmov	r2, r3, d7
 80160e8:	eeb0 9a47 	vmov.f32	s18, s14
 80160ec:	eef0 9a67 	vmov.f32	s19, s15
 80160f0:	4682      	mov	sl, r0
 80160f2:	f7ea f8e1 	bl	80002b8 <__aeabi_dsub>
 80160f6:	4652      	mov	r2, sl
 80160f8:	4606      	mov	r6, r0
 80160fa:	460f      	mov	r7, r1
 80160fc:	462b      	mov	r3, r5
 80160fe:	ec51 0b19 	vmov	r0, r1, d9
 8016102:	f7ea f8db 	bl	80002bc <__adddf3>
 8016106:	4602      	mov	r2, r0
 8016108:	460b      	mov	r3, r1
 801610a:	2000      	movs	r0, #0
 801610c:	49bb      	ldr	r1, [pc, #748]	; (80163fc <__ieee754_pow+0x76c>)
 801610e:	f7ea fbb5 	bl	800087c <__aeabi_ddiv>
 8016112:	ec41 0b1a 	vmov	d10, r0, r1
 8016116:	4602      	mov	r2, r0
 8016118:	460b      	mov	r3, r1
 801611a:	4630      	mov	r0, r6
 801611c:	4639      	mov	r1, r7
 801611e:	f7ea fa83 	bl	8000628 <__aeabi_dmul>
 8016122:	2300      	movs	r3, #0
 8016124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016128:	9302      	str	r3, [sp, #8]
 801612a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801612e:	46ab      	mov	fp, r5
 8016130:	106d      	asrs	r5, r5, #1
 8016132:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016136:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801613a:	ec41 0b18 	vmov	d8, r0, r1
 801613e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016142:	2200      	movs	r2, #0
 8016144:	4640      	mov	r0, r8
 8016146:	4649      	mov	r1, r9
 8016148:	4614      	mov	r4, r2
 801614a:	461d      	mov	r5, r3
 801614c:	f7ea fa6c 	bl	8000628 <__aeabi_dmul>
 8016150:	4602      	mov	r2, r0
 8016152:	460b      	mov	r3, r1
 8016154:	4630      	mov	r0, r6
 8016156:	4639      	mov	r1, r7
 8016158:	f7ea f8ae 	bl	80002b8 <__aeabi_dsub>
 801615c:	ec53 2b19 	vmov	r2, r3, d9
 8016160:	4606      	mov	r6, r0
 8016162:	460f      	mov	r7, r1
 8016164:	4620      	mov	r0, r4
 8016166:	4629      	mov	r1, r5
 8016168:	f7ea f8a6 	bl	80002b8 <__aeabi_dsub>
 801616c:	4602      	mov	r2, r0
 801616e:	460b      	mov	r3, r1
 8016170:	4650      	mov	r0, sl
 8016172:	4659      	mov	r1, fp
 8016174:	f7ea f8a0 	bl	80002b8 <__aeabi_dsub>
 8016178:	4642      	mov	r2, r8
 801617a:	464b      	mov	r3, r9
 801617c:	f7ea fa54 	bl	8000628 <__aeabi_dmul>
 8016180:	4602      	mov	r2, r0
 8016182:	460b      	mov	r3, r1
 8016184:	4630      	mov	r0, r6
 8016186:	4639      	mov	r1, r7
 8016188:	f7ea f896 	bl	80002b8 <__aeabi_dsub>
 801618c:	ec53 2b1a 	vmov	r2, r3, d10
 8016190:	f7ea fa4a 	bl	8000628 <__aeabi_dmul>
 8016194:	ec53 2b18 	vmov	r2, r3, d8
 8016198:	ec41 0b19 	vmov	d9, r0, r1
 801619c:	ec51 0b18 	vmov	r0, r1, d8
 80161a0:	f7ea fa42 	bl	8000628 <__aeabi_dmul>
 80161a4:	a37c      	add	r3, pc, #496	; (adr r3, 8016398 <__ieee754_pow+0x708>)
 80161a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161aa:	4604      	mov	r4, r0
 80161ac:	460d      	mov	r5, r1
 80161ae:	f7ea fa3b 	bl	8000628 <__aeabi_dmul>
 80161b2:	a37b      	add	r3, pc, #492	; (adr r3, 80163a0 <__ieee754_pow+0x710>)
 80161b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161b8:	f7ea f880 	bl	80002bc <__adddf3>
 80161bc:	4622      	mov	r2, r4
 80161be:	462b      	mov	r3, r5
 80161c0:	f7ea fa32 	bl	8000628 <__aeabi_dmul>
 80161c4:	a378      	add	r3, pc, #480	; (adr r3, 80163a8 <__ieee754_pow+0x718>)
 80161c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ca:	f7ea f877 	bl	80002bc <__adddf3>
 80161ce:	4622      	mov	r2, r4
 80161d0:	462b      	mov	r3, r5
 80161d2:	f7ea fa29 	bl	8000628 <__aeabi_dmul>
 80161d6:	a376      	add	r3, pc, #472	; (adr r3, 80163b0 <__ieee754_pow+0x720>)
 80161d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161dc:	f7ea f86e 	bl	80002bc <__adddf3>
 80161e0:	4622      	mov	r2, r4
 80161e2:	462b      	mov	r3, r5
 80161e4:	f7ea fa20 	bl	8000628 <__aeabi_dmul>
 80161e8:	a373      	add	r3, pc, #460	; (adr r3, 80163b8 <__ieee754_pow+0x728>)
 80161ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ee:	f7ea f865 	bl	80002bc <__adddf3>
 80161f2:	4622      	mov	r2, r4
 80161f4:	462b      	mov	r3, r5
 80161f6:	f7ea fa17 	bl	8000628 <__aeabi_dmul>
 80161fa:	a371      	add	r3, pc, #452	; (adr r3, 80163c0 <__ieee754_pow+0x730>)
 80161fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016200:	f7ea f85c 	bl	80002bc <__adddf3>
 8016204:	4622      	mov	r2, r4
 8016206:	4606      	mov	r6, r0
 8016208:	460f      	mov	r7, r1
 801620a:	462b      	mov	r3, r5
 801620c:	4620      	mov	r0, r4
 801620e:	4629      	mov	r1, r5
 8016210:	f7ea fa0a 	bl	8000628 <__aeabi_dmul>
 8016214:	4602      	mov	r2, r0
 8016216:	460b      	mov	r3, r1
 8016218:	4630      	mov	r0, r6
 801621a:	4639      	mov	r1, r7
 801621c:	f7ea fa04 	bl	8000628 <__aeabi_dmul>
 8016220:	4642      	mov	r2, r8
 8016222:	4604      	mov	r4, r0
 8016224:	460d      	mov	r5, r1
 8016226:	464b      	mov	r3, r9
 8016228:	ec51 0b18 	vmov	r0, r1, d8
 801622c:	f7ea f846 	bl	80002bc <__adddf3>
 8016230:	ec53 2b19 	vmov	r2, r3, d9
 8016234:	f7ea f9f8 	bl	8000628 <__aeabi_dmul>
 8016238:	4622      	mov	r2, r4
 801623a:	462b      	mov	r3, r5
 801623c:	f7ea f83e 	bl	80002bc <__adddf3>
 8016240:	4642      	mov	r2, r8
 8016242:	4682      	mov	sl, r0
 8016244:	468b      	mov	fp, r1
 8016246:	464b      	mov	r3, r9
 8016248:	4640      	mov	r0, r8
 801624a:	4649      	mov	r1, r9
 801624c:	f7ea f9ec 	bl	8000628 <__aeabi_dmul>
 8016250:	4b6b      	ldr	r3, [pc, #428]	; (8016400 <__ieee754_pow+0x770>)
 8016252:	2200      	movs	r2, #0
 8016254:	4606      	mov	r6, r0
 8016256:	460f      	mov	r7, r1
 8016258:	f7ea f830 	bl	80002bc <__adddf3>
 801625c:	4652      	mov	r2, sl
 801625e:	465b      	mov	r3, fp
 8016260:	f7ea f82c 	bl	80002bc <__adddf3>
 8016264:	2000      	movs	r0, #0
 8016266:	4604      	mov	r4, r0
 8016268:	460d      	mov	r5, r1
 801626a:	4602      	mov	r2, r0
 801626c:	460b      	mov	r3, r1
 801626e:	4640      	mov	r0, r8
 8016270:	4649      	mov	r1, r9
 8016272:	f7ea f9d9 	bl	8000628 <__aeabi_dmul>
 8016276:	4b62      	ldr	r3, [pc, #392]	; (8016400 <__ieee754_pow+0x770>)
 8016278:	4680      	mov	r8, r0
 801627a:	4689      	mov	r9, r1
 801627c:	2200      	movs	r2, #0
 801627e:	4620      	mov	r0, r4
 8016280:	4629      	mov	r1, r5
 8016282:	f7ea f819 	bl	80002b8 <__aeabi_dsub>
 8016286:	4632      	mov	r2, r6
 8016288:	463b      	mov	r3, r7
 801628a:	f7ea f815 	bl	80002b8 <__aeabi_dsub>
 801628e:	4602      	mov	r2, r0
 8016290:	460b      	mov	r3, r1
 8016292:	4650      	mov	r0, sl
 8016294:	4659      	mov	r1, fp
 8016296:	f7ea f80f 	bl	80002b8 <__aeabi_dsub>
 801629a:	ec53 2b18 	vmov	r2, r3, d8
 801629e:	f7ea f9c3 	bl	8000628 <__aeabi_dmul>
 80162a2:	4622      	mov	r2, r4
 80162a4:	4606      	mov	r6, r0
 80162a6:	460f      	mov	r7, r1
 80162a8:	462b      	mov	r3, r5
 80162aa:	ec51 0b19 	vmov	r0, r1, d9
 80162ae:	f7ea f9bb 	bl	8000628 <__aeabi_dmul>
 80162b2:	4602      	mov	r2, r0
 80162b4:	460b      	mov	r3, r1
 80162b6:	4630      	mov	r0, r6
 80162b8:	4639      	mov	r1, r7
 80162ba:	f7e9 ffff 	bl	80002bc <__adddf3>
 80162be:	4606      	mov	r6, r0
 80162c0:	460f      	mov	r7, r1
 80162c2:	4602      	mov	r2, r0
 80162c4:	460b      	mov	r3, r1
 80162c6:	4640      	mov	r0, r8
 80162c8:	4649      	mov	r1, r9
 80162ca:	f7e9 fff7 	bl	80002bc <__adddf3>
 80162ce:	a33e      	add	r3, pc, #248	; (adr r3, 80163c8 <__ieee754_pow+0x738>)
 80162d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d4:	2000      	movs	r0, #0
 80162d6:	4604      	mov	r4, r0
 80162d8:	460d      	mov	r5, r1
 80162da:	f7ea f9a5 	bl	8000628 <__aeabi_dmul>
 80162de:	4642      	mov	r2, r8
 80162e0:	ec41 0b18 	vmov	d8, r0, r1
 80162e4:	464b      	mov	r3, r9
 80162e6:	4620      	mov	r0, r4
 80162e8:	4629      	mov	r1, r5
 80162ea:	f7e9 ffe5 	bl	80002b8 <__aeabi_dsub>
 80162ee:	4602      	mov	r2, r0
 80162f0:	460b      	mov	r3, r1
 80162f2:	4630      	mov	r0, r6
 80162f4:	4639      	mov	r1, r7
 80162f6:	f7e9 ffdf 	bl	80002b8 <__aeabi_dsub>
 80162fa:	a335      	add	r3, pc, #212	; (adr r3, 80163d0 <__ieee754_pow+0x740>)
 80162fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016300:	f7ea f992 	bl	8000628 <__aeabi_dmul>
 8016304:	a334      	add	r3, pc, #208	; (adr r3, 80163d8 <__ieee754_pow+0x748>)
 8016306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801630a:	4606      	mov	r6, r0
 801630c:	460f      	mov	r7, r1
 801630e:	4620      	mov	r0, r4
 8016310:	4629      	mov	r1, r5
 8016312:	f7ea f989 	bl	8000628 <__aeabi_dmul>
 8016316:	4602      	mov	r2, r0
 8016318:	460b      	mov	r3, r1
 801631a:	4630      	mov	r0, r6
 801631c:	4639      	mov	r1, r7
 801631e:	f7e9 ffcd 	bl	80002bc <__adddf3>
 8016322:	9a07      	ldr	r2, [sp, #28]
 8016324:	4b37      	ldr	r3, [pc, #220]	; (8016404 <__ieee754_pow+0x774>)
 8016326:	4413      	add	r3, r2
 8016328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801632c:	f7e9 ffc6 	bl	80002bc <__adddf3>
 8016330:	4682      	mov	sl, r0
 8016332:	9805      	ldr	r0, [sp, #20]
 8016334:	468b      	mov	fp, r1
 8016336:	f7ea f90d 	bl	8000554 <__aeabi_i2d>
 801633a:	9a07      	ldr	r2, [sp, #28]
 801633c:	4b32      	ldr	r3, [pc, #200]	; (8016408 <__ieee754_pow+0x778>)
 801633e:	4413      	add	r3, r2
 8016340:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016344:	4606      	mov	r6, r0
 8016346:	460f      	mov	r7, r1
 8016348:	4652      	mov	r2, sl
 801634a:	465b      	mov	r3, fp
 801634c:	ec51 0b18 	vmov	r0, r1, d8
 8016350:	f7e9 ffb4 	bl	80002bc <__adddf3>
 8016354:	4642      	mov	r2, r8
 8016356:	464b      	mov	r3, r9
 8016358:	f7e9 ffb0 	bl	80002bc <__adddf3>
 801635c:	4632      	mov	r2, r6
 801635e:	463b      	mov	r3, r7
 8016360:	f7e9 ffac 	bl	80002bc <__adddf3>
 8016364:	2000      	movs	r0, #0
 8016366:	4632      	mov	r2, r6
 8016368:	463b      	mov	r3, r7
 801636a:	4604      	mov	r4, r0
 801636c:	460d      	mov	r5, r1
 801636e:	f7e9 ffa3 	bl	80002b8 <__aeabi_dsub>
 8016372:	4642      	mov	r2, r8
 8016374:	464b      	mov	r3, r9
 8016376:	f7e9 ff9f 	bl	80002b8 <__aeabi_dsub>
 801637a:	ec53 2b18 	vmov	r2, r3, d8
 801637e:	f7e9 ff9b 	bl	80002b8 <__aeabi_dsub>
 8016382:	4602      	mov	r2, r0
 8016384:	460b      	mov	r3, r1
 8016386:	4650      	mov	r0, sl
 8016388:	4659      	mov	r1, fp
 801638a:	e610      	b.n	8015fae <__ieee754_pow+0x31e>
 801638c:	2401      	movs	r4, #1
 801638e:	e6a1      	b.n	80160d4 <__ieee754_pow+0x444>
 8016390:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80163e0 <__ieee754_pow+0x750>
 8016394:	e617      	b.n	8015fc6 <__ieee754_pow+0x336>
 8016396:	bf00      	nop
 8016398:	4a454eef 	.word	0x4a454eef
 801639c:	3fca7e28 	.word	0x3fca7e28
 80163a0:	93c9db65 	.word	0x93c9db65
 80163a4:	3fcd864a 	.word	0x3fcd864a
 80163a8:	a91d4101 	.word	0xa91d4101
 80163ac:	3fd17460 	.word	0x3fd17460
 80163b0:	518f264d 	.word	0x518f264d
 80163b4:	3fd55555 	.word	0x3fd55555
 80163b8:	db6fabff 	.word	0xdb6fabff
 80163bc:	3fdb6db6 	.word	0x3fdb6db6
 80163c0:	33333303 	.word	0x33333303
 80163c4:	3fe33333 	.word	0x3fe33333
 80163c8:	e0000000 	.word	0xe0000000
 80163cc:	3feec709 	.word	0x3feec709
 80163d0:	dc3a03fd 	.word	0xdc3a03fd
 80163d4:	3feec709 	.word	0x3feec709
 80163d8:	145b01f5 	.word	0x145b01f5
 80163dc:	be3e2fe0 	.word	0xbe3e2fe0
 80163e0:	00000000 	.word	0x00000000
 80163e4:	3ff00000 	.word	0x3ff00000
 80163e8:	7ff00000 	.word	0x7ff00000
 80163ec:	43400000 	.word	0x43400000
 80163f0:	0003988e 	.word	0x0003988e
 80163f4:	000bb679 	.word	0x000bb679
 80163f8:	08017a78 	.word	0x08017a78
 80163fc:	3ff00000 	.word	0x3ff00000
 8016400:	40080000 	.word	0x40080000
 8016404:	08017a98 	.word	0x08017a98
 8016408:	08017a88 	.word	0x08017a88
 801640c:	a3b5      	add	r3, pc, #724	; (adr r3, 80166e4 <__ieee754_pow+0xa54>)
 801640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016412:	4640      	mov	r0, r8
 8016414:	4649      	mov	r1, r9
 8016416:	f7e9 ff51 	bl	80002bc <__adddf3>
 801641a:	4622      	mov	r2, r4
 801641c:	ec41 0b1a 	vmov	d10, r0, r1
 8016420:	462b      	mov	r3, r5
 8016422:	4630      	mov	r0, r6
 8016424:	4639      	mov	r1, r7
 8016426:	f7e9 ff47 	bl	80002b8 <__aeabi_dsub>
 801642a:	4602      	mov	r2, r0
 801642c:	460b      	mov	r3, r1
 801642e:	ec51 0b1a 	vmov	r0, r1, d10
 8016432:	f7ea fb89 	bl	8000b48 <__aeabi_dcmpgt>
 8016436:	2800      	cmp	r0, #0
 8016438:	f47f ae04 	bne.w	8016044 <__ieee754_pow+0x3b4>
 801643c:	4aa4      	ldr	r2, [pc, #656]	; (80166d0 <__ieee754_pow+0xa40>)
 801643e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016442:	4293      	cmp	r3, r2
 8016444:	f340 8108 	ble.w	8016658 <__ieee754_pow+0x9c8>
 8016448:	151b      	asrs	r3, r3, #20
 801644a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801644e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016452:	fa4a f303 	asr.w	r3, sl, r3
 8016456:	445b      	add	r3, fp
 8016458:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801645c:	4e9d      	ldr	r6, [pc, #628]	; (80166d4 <__ieee754_pow+0xa44>)
 801645e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016462:	4116      	asrs	r6, r2
 8016464:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016468:	2000      	movs	r0, #0
 801646a:	ea23 0106 	bic.w	r1, r3, r6
 801646e:	f1c2 0214 	rsb	r2, r2, #20
 8016472:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016476:	fa4a fa02 	asr.w	sl, sl, r2
 801647a:	f1bb 0f00 	cmp.w	fp, #0
 801647e:	4602      	mov	r2, r0
 8016480:	460b      	mov	r3, r1
 8016482:	4620      	mov	r0, r4
 8016484:	4629      	mov	r1, r5
 8016486:	bfb8      	it	lt
 8016488:	f1ca 0a00 	rsblt	sl, sl, #0
 801648c:	f7e9 ff14 	bl	80002b8 <__aeabi_dsub>
 8016490:	ec41 0b19 	vmov	d9, r0, r1
 8016494:	4642      	mov	r2, r8
 8016496:	464b      	mov	r3, r9
 8016498:	ec51 0b19 	vmov	r0, r1, d9
 801649c:	f7e9 ff0e 	bl	80002bc <__adddf3>
 80164a0:	a37b      	add	r3, pc, #492	; (adr r3, 8016690 <__ieee754_pow+0xa00>)
 80164a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a6:	2000      	movs	r0, #0
 80164a8:	4604      	mov	r4, r0
 80164aa:	460d      	mov	r5, r1
 80164ac:	f7ea f8bc 	bl	8000628 <__aeabi_dmul>
 80164b0:	ec53 2b19 	vmov	r2, r3, d9
 80164b4:	4606      	mov	r6, r0
 80164b6:	460f      	mov	r7, r1
 80164b8:	4620      	mov	r0, r4
 80164ba:	4629      	mov	r1, r5
 80164bc:	f7e9 fefc 	bl	80002b8 <__aeabi_dsub>
 80164c0:	4602      	mov	r2, r0
 80164c2:	460b      	mov	r3, r1
 80164c4:	4640      	mov	r0, r8
 80164c6:	4649      	mov	r1, r9
 80164c8:	f7e9 fef6 	bl	80002b8 <__aeabi_dsub>
 80164cc:	a372      	add	r3, pc, #456	; (adr r3, 8016698 <__ieee754_pow+0xa08>)
 80164ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d2:	f7ea f8a9 	bl	8000628 <__aeabi_dmul>
 80164d6:	a372      	add	r3, pc, #456	; (adr r3, 80166a0 <__ieee754_pow+0xa10>)
 80164d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164dc:	4680      	mov	r8, r0
 80164de:	4689      	mov	r9, r1
 80164e0:	4620      	mov	r0, r4
 80164e2:	4629      	mov	r1, r5
 80164e4:	f7ea f8a0 	bl	8000628 <__aeabi_dmul>
 80164e8:	4602      	mov	r2, r0
 80164ea:	460b      	mov	r3, r1
 80164ec:	4640      	mov	r0, r8
 80164ee:	4649      	mov	r1, r9
 80164f0:	f7e9 fee4 	bl	80002bc <__adddf3>
 80164f4:	4604      	mov	r4, r0
 80164f6:	460d      	mov	r5, r1
 80164f8:	4602      	mov	r2, r0
 80164fa:	460b      	mov	r3, r1
 80164fc:	4630      	mov	r0, r6
 80164fe:	4639      	mov	r1, r7
 8016500:	f7e9 fedc 	bl	80002bc <__adddf3>
 8016504:	4632      	mov	r2, r6
 8016506:	463b      	mov	r3, r7
 8016508:	4680      	mov	r8, r0
 801650a:	4689      	mov	r9, r1
 801650c:	f7e9 fed4 	bl	80002b8 <__aeabi_dsub>
 8016510:	4602      	mov	r2, r0
 8016512:	460b      	mov	r3, r1
 8016514:	4620      	mov	r0, r4
 8016516:	4629      	mov	r1, r5
 8016518:	f7e9 fece 	bl	80002b8 <__aeabi_dsub>
 801651c:	4642      	mov	r2, r8
 801651e:	4606      	mov	r6, r0
 8016520:	460f      	mov	r7, r1
 8016522:	464b      	mov	r3, r9
 8016524:	4640      	mov	r0, r8
 8016526:	4649      	mov	r1, r9
 8016528:	f7ea f87e 	bl	8000628 <__aeabi_dmul>
 801652c:	a35e      	add	r3, pc, #376	; (adr r3, 80166a8 <__ieee754_pow+0xa18>)
 801652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016532:	4604      	mov	r4, r0
 8016534:	460d      	mov	r5, r1
 8016536:	f7ea f877 	bl	8000628 <__aeabi_dmul>
 801653a:	a35d      	add	r3, pc, #372	; (adr r3, 80166b0 <__ieee754_pow+0xa20>)
 801653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016540:	f7e9 feba 	bl	80002b8 <__aeabi_dsub>
 8016544:	4622      	mov	r2, r4
 8016546:	462b      	mov	r3, r5
 8016548:	f7ea f86e 	bl	8000628 <__aeabi_dmul>
 801654c:	a35a      	add	r3, pc, #360	; (adr r3, 80166b8 <__ieee754_pow+0xa28>)
 801654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016552:	f7e9 feb3 	bl	80002bc <__adddf3>
 8016556:	4622      	mov	r2, r4
 8016558:	462b      	mov	r3, r5
 801655a:	f7ea f865 	bl	8000628 <__aeabi_dmul>
 801655e:	a358      	add	r3, pc, #352	; (adr r3, 80166c0 <__ieee754_pow+0xa30>)
 8016560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016564:	f7e9 fea8 	bl	80002b8 <__aeabi_dsub>
 8016568:	4622      	mov	r2, r4
 801656a:	462b      	mov	r3, r5
 801656c:	f7ea f85c 	bl	8000628 <__aeabi_dmul>
 8016570:	a355      	add	r3, pc, #340	; (adr r3, 80166c8 <__ieee754_pow+0xa38>)
 8016572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016576:	f7e9 fea1 	bl	80002bc <__adddf3>
 801657a:	4622      	mov	r2, r4
 801657c:	462b      	mov	r3, r5
 801657e:	f7ea f853 	bl	8000628 <__aeabi_dmul>
 8016582:	4602      	mov	r2, r0
 8016584:	460b      	mov	r3, r1
 8016586:	4640      	mov	r0, r8
 8016588:	4649      	mov	r1, r9
 801658a:	f7e9 fe95 	bl	80002b8 <__aeabi_dsub>
 801658e:	4604      	mov	r4, r0
 8016590:	460d      	mov	r5, r1
 8016592:	4602      	mov	r2, r0
 8016594:	460b      	mov	r3, r1
 8016596:	4640      	mov	r0, r8
 8016598:	4649      	mov	r1, r9
 801659a:	f7ea f845 	bl	8000628 <__aeabi_dmul>
 801659e:	2200      	movs	r2, #0
 80165a0:	ec41 0b19 	vmov	d9, r0, r1
 80165a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80165a8:	4620      	mov	r0, r4
 80165aa:	4629      	mov	r1, r5
 80165ac:	f7e9 fe84 	bl	80002b8 <__aeabi_dsub>
 80165b0:	4602      	mov	r2, r0
 80165b2:	460b      	mov	r3, r1
 80165b4:	ec51 0b19 	vmov	r0, r1, d9
 80165b8:	f7ea f960 	bl	800087c <__aeabi_ddiv>
 80165bc:	4632      	mov	r2, r6
 80165be:	4604      	mov	r4, r0
 80165c0:	460d      	mov	r5, r1
 80165c2:	463b      	mov	r3, r7
 80165c4:	4640      	mov	r0, r8
 80165c6:	4649      	mov	r1, r9
 80165c8:	f7ea f82e 	bl	8000628 <__aeabi_dmul>
 80165cc:	4632      	mov	r2, r6
 80165ce:	463b      	mov	r3, r7
 80165d0:	f7e9 fe74 	bl	80002bc <__adddf3>
 80165d4:	4602      	mov	r2, r0
 80165d6:	460b      	mov	r3, r1
 80165d8:	4620      	mov	r0, r4
 80165da:	4629      	mov	r1, r5
 80165dc:	f7e9 fe6c 	bl	80002b8 <__aeabi_dsub>
 80165e0:	4642      	mov	r2, r8
 80165e2:	464b      	mov	r3, r9
 80165e4:	f7e9 fe68 	bl	80002b8 <__aeabi_dsub>
 80165e8:	460b      	mov	r3, r1
 80165ea:	4602      	mov	r2, r0
 80165ec:	493a      	ldr	r1, [pc, #232]	; (80166d8 <__ieee754_pow+0xa48>)
 80165ee:	2000      	movs	r0, #0
 80165f0:	f7e9 fe62 	bl	80002b8 <__aeabi_dsub>
 80165f4:	ec41 0b10 	vmov	d0, r0, r1
 80165f8:	ee10 3a90 	vmov	r3, s1
 80165fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016604:	da2b      	bge.n	801665e <__ieee754_pow+0x9ce>
 8016606:	4650      	mov	r0, sl
 8016608:	f000 fb46 	bl	8016c98 <scalbn>
 801660c:	ec51 0b10 	vmov	r0, r1, d0
 8016610:	ec53 2b18 	vmov	r2, r3, d8
 8016614:	f7ff bbed 	b.w	8015df2 <__ieee754_pow+0x162>
 8016618:	4b30      	ldr	r3, [pc, #192]	; (80166dc <__ieee754_pow+0xa4c>)
 801661a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801661e:	429e      	cmp	r6, r3
 8016620:	f77f af0c 	ble.w	801643c <__ieee754_pow+0x7ac>
 8016624:	4b2e      	ldr	r3, [pc, #184]	; (80166e0 <__ieee754_pow+0xa50>)
 8016626:	440b      	add	r3, r1
 8016628:	4303      	orrs	r3, r0
 801662a:	d009      	beq.n	8016640 <__ieee754_pow+0x9b0>
 801662c:	ec51 0b18 	vmov	r0, r1, d8
 8016630:	2200      	movs	r2, #0
 8016632:	2300      	movs	r3, #0
 8016634:	f7ea fa6a 	bl	8000b0c <__aeabi_dcmplt>
 8016638:	3800      	subs	r0, #0
 801663a:	bf18      	it	ne
 801663c:	2001      	movne	r0, #1
 801663e:	e447      	b.n	8015ed0 <__ieee754_pow+0x240>
 8016640:	4622      	mov	r2, r4
 8016642:	462b      	mov	r3, r5
 8016644:	f7e9 fe38 	bl	80002b8 <__aeabi_dsub>
 8016648:	4642      	mov	r2, r8
 801664a:	464b      	mov	r3, r9
 801664c:	f7ea fa72 	bl	8000b34 <__aeabi_dcmpge>
 8016650:	2800      	cmp	r0, #0
 8016652:	f43f aef3 	beq.w	801643c <__ieee754_pow+0x7ac>
 8016656:	e7e9      	b.n	801662c <__ieee754_pow+0x99c>
 8016658:	f04f 0a00 	mov.w	sl, #0
 801665c:	e71a      	b.n	8016494 <__ieee754_pow+0x804>
 801665e:	ec51 0b10 	vmov	r0, r1, d0
 8016662:	4619      	mov	r1, r3
 8016664:	e7d4      	b.n	8016610 <__ieee754_pow+0x980>
 8016666:	491c      	ldr	r1, [pc, #112]	; (80166d8 <__ieee754_pow+0xa48>)
 8016668:	2000      	movs	r0, #0
 801666a:	f7ff bb30 	b.w	8015cce <__ieee754_pow+0x3e>
 801666e:	2000      	movs	r0, #0
 8016670:	2100      	movs	r1, #0
 8016672:	f7ff bb2c 	b.w	8015cce <__ieee754_pow+0x3e>
 8016676:	4630      	mov	r0, r6
 8016678:	4639      	mov	r1, r7
 801667a:	f7ff bb28 	b.w	8015cce <__ieee754_pow+0x3e>
 801667e:	9204      	str	r2, [sp, #16]
 8016680:	f7ff bb7a 	b.w	8015d78 <__ieee754_pow+0xe8>
 8016684:	2300      	movs	r3, #0
 8016686:	f7ff bb64 	b.w	8015d52 <__ieee754_pow+0xc2>
 801668a:	bf00      	nop
 801668c:	f3af 8000 	nop.w
 8016690:	00000000 	.word	0x00000000
 8016694:	3fe62e43 	.word	0x3fe62e43
 8016698:	fefa39ef 	.word	0xfefa39ef
 801669c:	3fe62e42 	.word	0x3fe62e42
 80166a0:	0ca86c39 	.word	0x0ca86c39
 80166a4:	be205c61 	.word	0xbe205c61
 80166a8:	72bea4d0 	.word	0x72bea4d0
 80166ac:	3e663769 	.word	0x3e663769
 80166b0:	c5d26bf1 	.word	0xc5d26bf1
 80166b4:	3ebbbd41 	.word	0x3ebbbd41
 80166b8:	af25de2c 	.word	0xaf25de2c
 80166bc:	3f11566a 	.word	0x3f11566a
 80166c0:	16bebd93 	.word	0x16bebd93
 80166c4:	3f66c16c 	.word	0x3f66c16c
 80166c8:	5555553e 	.word	0x5555553e
 80166cc:	3fc55555 	.word	0x3fc55555
 80166d0:	3fe00000 	.word	0x3fe00000
 80166d4:	000fffff 	.word	0x000fffff
 80166d8:	3ff00000 	.word	0x3ff00000
 80166dc:	4090cbff 	.word	0x4090cbff
 80166e0:	3f6f3400 	.word	0x3f6f3400
 80166e4:	652b82fe 	.word	0x652b82fe
 80166e8:	3c971547 	.word	0x3c971547

080166ec <__ieee754_sqrt>:
 80166ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166f0:	ec55 4b10 	vmov	r4, r5, d0
 80166f4:	4e55      	ldr	r6, [pc, #340]	; (801684c <__ieee754_sqrt+0x160>)
 80166f6:	43ae      	bics	r6, r5
 80166f8:	ee10 0a10 	vmov	r0, s0
 80166fc:	ee10 3a10 	vmov	r3, s0
 8016700:	462a      	mov	r2, r5
 8016702:	4629      	mov	r1, r5
 8016704:	d110      	bne.n	8016728 <__ieee754_sqrt+0x3c>
 8016706:	ee10 2a10 	vmov	r2, s0
 801670a:	462b      	mov	r3, r5
 801670c:	f7e9 ff8c 	bl	8000628 <__aeabi_dmul>
 8016710:	4602      	mov	r2, r0
 8016712:	460b      	mov	r3, r1
 8016714:	4620      	mov	r0, r4
 8016716:	4629      	mov	r1, r5
 8016718:	f7e9 fdd0 	bl	80002bc <__adddf3>
 801671c:	4604      	mov	r4, r0
 801671e:	460d      	mov	r5, r1
 8016720:	ec45 4b10 	vmov	d0, r4, r5
 8016724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016728:	2d00      	cmp	r5, #0
 801672a:	dc10      	bgt.n	801674e <__ieee754_sqrt+0x62>
 801672c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016730:	4330      	orrs	r0, r6
 8016732:	d0f5      	beq.n	8016720 <__ieee754_sqrt+0x34>
 8016734:	b15d      	cbz	r5, 801674e <__ieee754_sqrt+0x62>
 8016736:	ee10 2a10 	vmov	r2, s0
 801673a:	462b      	mov	r3, r5
 801673c:	ee10 0a10 	vmov	r0, s0
 8016740:	f7e9 fdba 	bl	80002b8 <__aeabi_dsub>
 8016744:	4602      	mov	r2, r0
 8016746:	460b      	mov	r3, r1
 8016748:	f7ea f898 	bl	800087c <__aeabi_ddiv>
 801674c:	e7e6      	b.n	801671c <__ieee754_sqrt+0x30>
 801674e:	1512      	asrs	r2, r2, #20
 8016750:	d074      	beq.n	801683c <__ieee754_sqrt+0x150>
 8016752:	07d4      	lsls	r4, r2, #31
 8016754:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016758:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801675c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8016760:	bf5e      	ittt	pl
 8016762:	0fda      	lsrpl	r2, r3, #31
 8016764:	005b      	lslpl	r3, r3, #1
 8016766:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801676a:	2400      	movs	r4, #0
 801676c:	0fda      	lsrs	r2, r3, #31
 801676e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8016772:	107f      	asrs	r7, r7, #1
 8016774:	005b      	lsls	r3, r3, #1
 8016776:	2516      	movs	r5, #22
 8016778:	4620      	mov	r0, r4
 801677a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801677e:	1886      	adds	r6, r0, r2
 8016780:	428e      	cmp	r6, r1
 8016782:	bfde      	ittt	le
 8016784:	1b89      	suble	r1, r1, r6
 8016786:	18b0      	addle	r0, r6, r2
 8016788:	18a4      	addle	r4, r4, r2
 801678a:	0049      	lsls	r1, r1, #1
 801678c:	3d01      	subs	r5, #1
 801678e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8016792:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8016796:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801679a:	d1f0      	bne.n	801677e <__ieee754_sqrt+0x92>
 801679c:	462a      	mov	r2, r5
 801679e:	f04f 0e20 	mov.w	lr, #32
 80167a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80167a6:	4281      	cmp	r1, r0
 80167a8:	eb06 0c05 	add.w	ip, r6, r5
 80167ac:	dc02      	bgt.n	80167b4 <__ieee754_sqrt+0xc8>
 80167ae:	d113      	bne.n	80167d8 <__ieee754_sqrt+0xec>
 80167b0:	459c      	cmp	ip, r3
 80167b2:	d811      	bhi.n	80167d8 <__ieee754_sqrt+0xec>
 80167b4:	f1bc 0f00 	cmp.w	ip, #0
 80167b8:	eb0c 0506 	add.w	r5, ip, r6
 80167bc:	da43      	bge.n	8016846 <__ieee754_sqrt+0x15a>
 80167be:	2d00      	cmp	r5, #0
 80167c0:	db41      	blt.n	8016846 <__ieee754_sqrt+0x15a>
 80167c2:	f100 0801 	add.w	r8, r0, #1
 80167c6:	1a09      	subs	r1, r1, r0
 80167c8:	459c      	cmp	ip, r3
 80167ca:	bf88      	it	hi
 80167cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80167d0:	eba3 030c 	sub.w	r3, r3, ip
 80167d4:	4432      	add	r2, r6
 80167d6:	4640      	mov	r0, r8
 80167d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80167dc:	f1be 0e01 	subs.w	lr, lr, #1
 80167e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80167e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80167e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80167ec:	d1db      	bne.n	80167a6 <__ieee754_sqrt+0xba>
 80167ee:	430b      	orrs	r3, r1
 80167f0:	d006      	beq.n	8016800 <__ieee754_sqrt+0x114>
 80167f2:	1c50      	adds	r0, r2, #1
 80167f4:	bf13      	iteet	ne
 80167f6:	3201      	addne	r2, #1
 80167f8:	3401      	addeq	r4, #1
 80167fa:	4672      	moveq	r2, lr
 80167fc:	f022 0201 	bicne.w	r2, r2, #1
 8016800:	1063      	asrs	r3, r4, #1
 8016802:	0852      	lsrs	r2, r2, #1
 8016804:	07e1      	lsls	r1, r4, #31
 8016806:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801680a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801680e:	bf48      	it	mi
 8016810:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8016814:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8016818:	4614      	mov	r4, r2
 801681a:	e781      	b.n	8016720 <__ieee754_sqrt+0x34>
 801681c:	0ad9      	lsrs	r1, r3, #11
 801681e:	3815      	subs	r0, #21
 8016820:	055b      	lsls	r3, r3, #21
 8016822:	2900      	cmp	r1, #0
 8016824:	d0fa      	beq.n	801681c <__ieee754_sqrt+0x130>
 8016826:	02cd      	lsls	r5, r1, #11
 8016828:	d50a      	bpl.n	8016840 <__ieee754_sqrt+0x154>
 801682a:	f1c2 0420 	rsb	r4, r2, #32
 801682e:	fa23 f404 	lsr.w	r4, r3, r4
 8016832:	1e55      	subs	r5, r2, #1
 8016834:	4093      	lsls	r3, r2
 8016836:	4321      	orrs	r1, r4
 8016838:	1b42      	subs	r2, r0, r5
 801683a:	e78a      	b.n	8016752 <__ieee754_sqrt+0x66>
 801683c:	4610      	mov	r0, r2
 801683e:	e7f0      	b.n	8016822 <__ieee754_sqrt+0x136>
 8016840:	0049      	lsls	r1, r1, #1
 8016842:	3201      	adds	r2, #1
 8016844:	e7ef      	b.n	8016826 <__ieee754_sqrt+0x13a>
 8016846:	4680      	mov	r8, r0
 8016848:	e7bd      	b.n	80167c6 <__ieee754_sqrt+0xda>
 801684a:	bf00      	nop
 801684c:	7ff00000 	.word	0x7ff00000

08016850 <__ieee754_expf>:
 8016850:	ee10 2a10 	vmov	r2, s0
 8016854:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8016858:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801685c:	d902      	bls.n	8016864 <__ieee754_expf+0x14>
 801685e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016862:	4770      	bx	lr
 8016864:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8016868:	d106      	bne.n	8016878 <__ieee754_expf+0x28>
 801686a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80169a4 <__ieee754_expf+0x154>
 801686e:	2b00      	cmp	r3, #0
 8016870:	bf18      	it	ne
 8016872:	eeb0 0a67 	vmovne.f32	s0, s15
 8016876:	4770      	bx	lr
 8016878:	484b      	ldr	r0, [pc, #300]	; (80169a8 <__ieee754_expf+0x158>)
 801687a:	4282      	cmp	r2, r0
 801687c:	dd02      	ble.n	8016884 <__ieee754_expf+0x34>
 801687e:	2000      	movs	r0, #0
 8016880:	f000 b9f0 	b.w	8016c64 <__math_oflowf>
 8016884:	2a00      	cmp	r2, #0
 8016886:	da05      	bge.n	8016894 <__ieee754_expf+0x44>
 8016888:	4a48      	ldr	r2, [pc, #288]	; (80169ac <__ieee754_expf+0x15c>)
 801688a:	4291      	cmp	r1, r2
 801688c:	d902      	bls.n	8016894 <__ieee754_expf+0x44>
 801688e:	2000      	movs	r0, #0
 8016890:	f000 b9e2 	b.w	8016c58 <__math_uflowf>
 8016894:	4a46      	ldr	r2, [pc, #280]	; (80169b0 <__ieee754_expf+0x160>)
 8016896:	4291      	cmp	r1, r2
 8016898:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801689c:	d952      	bls.n	8016944 <__ieee754_expf+0xf4>
 801689e:	4a45      	ldr	r2, [pc, #276]	; (80169b4 <__ieee754_expf+0x164>)
 80168a0:	4291      	cmp	r1, r2
 80168a2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80168a6:	d834      	bhi.n	8016912 <__ieee754_expf+0xc2>
 80168a8:	4943      	ldr	r1, [pc, #268]	; (80169b8 <__ieee754_expf+0x168>)
 80168aa:	4411      	add	r1, r2
 80168ac:	ed91 7a00 	vldr	s14, [r1]
 80168b0:	4942      	ldr	r1, [pc, #264]	; (80169bc <__ieee754_expf+0x16c>)
 80168b2:	440a      	add	r2, r1
 80168b4:	edd2 7a00 	vldr	s15, [r2]
 80168b8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80168bc:	f1c3 0201 	rsb	r2, r3, #1
 80168c0:	1ad2      	subs	r2, r2, r3
 80168c2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80168c6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80168ca:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80169c0 <__ieee754_expf+0x170>
 80168ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80169c4 <__ieee754_expf+0x174>
 80168d2:	eee6 6a05 	vfma.f32	s13, s12, s10
 80168d6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80169c8 <__ieee754_expf+0x178>
 80168da:	eea6 5a86 	vfma.f32	s10, s13, s12
 80168de:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80169cc <__ieee754_expf+0x17c>
 80168e2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80168e6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80169d0 <__ieee754_expf+0x180>
 80168ea:	eea6 5a86 	vfma.f32	s10, s13, s12
 80168ee:	eef0 6a40 	vmov.f32	s13, s0
 80168f2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80168f6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80168fa:	ee20 5a26 	vmul.f32	s10, s0, s13
 80168fe:	bb92      	cbnz	r2, 8016966 <__ieee754_expf+0x116>
 8016900:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8016904:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8016908:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801690c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8016910:	4770      	bx	lr
 8016912:	4b30      	ldr	r3, [pc, #192]	; (80169d4 <__ieee754_expf+0x184>)
 8016914:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80169d8 <__ieee754_expf+0x188>
 8016918:	eddf 6a30 	vldr	s13, [pc, #192]	; 80169dc <__ieee754_expf+0x18c>
 801691c:	4413      	add	r3, r2
 801691e:	edd3 7a00 	vldr	s15, [r3]
 8016922:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016926:	eeb0 7a40 	vmov.f32	s14, s0
 801692a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801692e:	ee17 2a90 	vmov	r2, s15
 8016932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016936:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801693a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80169e0 <__ieee754_expf+0x190>
 801693e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016942:	e7be      	b.n	80168c2 <__ieee754_expf+0x72>
 8016944:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8016948:	d20b      	bcs.n	8016962 <__ieee754_expf+0x112>
 801694a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80169e4 <__ieee754_expf+0x194>
 801694e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8016952:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801695a:	dd02      	ble.n	8016962 <__ieee754_expf+0x112>
 801695c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8016960:	4770      	bx	lr
 8016962:	2200      	movs	r2, #0
 8016964:	e7af      	b.n	80168c6 <__ieee754_expf+0x76>
 8016966:	ee76 6a66 	vsub.f32	s13, s12, s13
 801696a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801696e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8016972:	bfb8      	it	lt
 8016974:	3264      	addlt	r2, #100	; 0x64
 8016976:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801697a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801697e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8016982:	ee17 3a90 	vmov	r3, s15
 8016986:	bfab      	itete	ge
 8016988:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801698c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8016990:	ee00 3a10 	vmovge	s0, r3
 8016994:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80169e8 <__ieee754_expf+0x198>
 8016998:	bfbc      	itt	lt
 801699a:	ee00 3a10 	vmovlt	s0, r3
 801699e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80169a2:	4770      	bx	lr
 80169a4:	00000000 	.word	0x00000000
 80169a8:	42b17217 	.word	0x42b17217
 80169ac:	42cff1b5 	.word	0x42cff1b5
 80169b0:	3eb17218 	.word	0x3eb17218
 80169b4:	3f851591 	.word	0x3f851591
 80169b8:	08017ab0 	.word	0x08017ab0
 80169bc:	08017ab8 	.word	0x08017ab8
 80169c0:	3331bb4c 	.word	0x3331bb4c
 80169c4:	b5ddea0e 	.word	0xb5ddea0e
 80169c8:	388ab355 	.word	0x388ab355
 80169cc:	bb360b61 	.word	0xbb360b61
 80169d0:	3e2aaaab 	.word	0x3e2aaaab
 80169d4:	08017aa8 	.word	0x08017aa8
 80169d8:	3fb8aa3b 	.word	0x3fb8aa3b
 80169dc:	3f317180 	.word	0x3f317180
 80169e0:	3717f7d1 	.word	0x3717f7d1
 80169e4:	7149f2ca 	.word	0x7149f2ca
 80169e8:	0d800000 	.word	0x0d800000

080169ec <__ieee754_logf>:
 80169ec:	ee10 3a10 	vmov	r3, s0
 80169f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80169f4:	d106      	bne.n	8016a04 <__ieee754_logf+0x18>
 80169f6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8016b8c <__ieee754_logf+0x1a0>
 80169fa:	eddf 7a65 	vldr	s15, [pc, #404]	; 8016b90 <__ieee754_logf+0x1a4>
 80169fe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016a02:	4770      	bx	lr
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	da02      	bge.n	8016a0e <__ieee754_logf+0x22>
 8016a08:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016a0c:	e7f5      	b.n	80169fa <__ieee754_logf+0xe>
 8016a0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016a12:	db02      	blt.n	8016a1a <__ieee754_logf+0x2e>
 8016a14:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016a18:	4770      	bx	lr
 8016a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016a1e:	bfb8      	it	lt
 8016a20:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8016b94 <__ieee754_logf+0x1a8>
 8016a24:	485c      	ldr	r0, [pc, #368]	; (8016b98 <__ieee754_logf+0x1ac>)
 8016a26:	bfbe      	ittt	lt
 8016a28:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016a2c:	f06f 0118 	mvnlt.w	r1, #24
 8016a30:	ee17 3a90 	vmovlt	r3, s15
 8016a34:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8016a38:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016a3c:	4418      	add	r0, r3
 8016a3e:	bfa8      	it	ge
 8016a40:	2100      	movge	r1, #0
 8016a42:	3a7f      	subs	r2, #127	; 0x7f
 8016a44:	440a      	add	r2, r1
 8016a46:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8016a4a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8016a4e:	4319      	orrs	r1, r3
 8016a50:	ee00 1a10 	vmov	s0, r1
 8016a54:	4951      	ldr	r1, [pc, #324]	; (8016b9c <__ieee754_logf+0x1b0>)
 8016a56:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8016a5a:	f103 000f 	add.w	r0, r3, #15
 8016a5e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016a62:	4001      	ands	r1, r0
 8016a64:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016a68:	bb89      	cbnz	r1, 8016ace <__ieee754_logf+0xe2>
 8016a6a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a72:	d10f      	bne.n	8016a94 <__ieee754_logf+0xa8>
 8016a74:	2a00      	cmp	r2, #0
 8016a76:	f000 8085 	beq.w	8016b84 <__ieee754_logf+0x198>
 8016a7a:	ee07 2a90 	vmov	s15, r2
 8016a7e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8016ba0 <__ieee754_logf+0x1b4>
 8016a82:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8016ba4 <__ieee754_logf+0x1b8>
 8016a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016a8e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8016a92:	4770      	bx	lr
 8016a94:	eddf 6a44 	vldr	s13, [pc, #272]	; 8016ba8 <__ieee754_logf+0x1bc>
 8016a98:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016a9c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8016aa0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016aa8:	b912      	cbnz	r2, 8016ab0 <__ieee754_logf+0xc4>
 8016aaa:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016aae:	4770      	bx	lr
 8016ab0:	ee07 2a90 	vmov	s15, r2
 8016ab4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8016ba0 <__ieee754_logf+0x1b4>
 8016ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016abc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016ac0:	ee37 0a40 	vsub.f32	s0, s14, s0
 8016ac4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8016ba4 <__ieee754_logf+0x1b8>
 8016ac8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8016acc:	4770      	bx	lr
 8016ace:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016ad2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016ad6:	eddf 5a35 	vldr	s11, [pc, #212]	; 8016bac <__ieee754_logf+0x1c0>
 8016ada:	eddf 4a35 	vldr	s9, [pc, #212]	; 8016bb0 <__ieee754_logf+0x1c4>
 8016ade:	4935      	ldr	r1, [pc, #212]	; (8016bb4 <__ieee754_logf+0x1c8>)
 8016ae0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8016ae4:	4419      	add	r1, r3
 8016ae6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8016aea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016aee:	430b      	orrs	r3, r1
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	ee07 2a90 	vmov	s15, r2
 8016af6:	ee26 5a06 	vmul.f32	s10, s12, s12
 8016afa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016afe:	ee25 7a05 	vmul.f32	s14, s10, s10
 8016b02:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8016bb8 <__ieee754_logf+0x1cc>
 8016b06:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016b0a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8016bbc <__ieee754_logf+0x1d0>
 8016b0e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016b12:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016bc0 <__ieee754_logf+0x1d4>
 8016b16:	eee7 7a24 	vfma.f32	s15, s14, s9
 8016b1a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8016bc4 <__ieee754_logf+0x1d8>
 8016b1e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8016b22:	eddf 7a29 	vldr	s15, [pc, #164]	; 8016bc8 <__ieee754_logf+0x1dc>
 8016b26:	eee4 7a87 	vfma.f32	s15, s9, s14
 8016b2a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016b2e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8016b32:	dd1c      	ble.n	8016b6e <__ieee754_logf+0x182>
 8016b34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016b38:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016b3c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8016b40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b48:	b922      	cbnz	r2, 8016b54 <__ieee754_logf+0x168>
 8016b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016b52:	4770      	bx	lr
 8016b54:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8016ba0 <__ieee754_logf+0x1b4>
 8016b58:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b60:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016b64:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8016ba4 <__ieee754_logf+0x1b8>
 8016b68:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8016b6c:	4770      	bx	lr
 8016b6e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016b72:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b76:	2a00      	cmp	r2, #0
 8016b78:	d0e9      	beq.n	8016b4e <__ieee754_logf+0x162>
 8016b7a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8016ba0 <__ieee754_logf+0x1b4>
 8016b7e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8016b82:	e7ed      	b.n	8016b60 <__ieee754_logf+0x174>
 8016b84:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016b90 <__ieee754_logf+0x1a4>
 8016b88:	4770      	bx	lr
 8016b8a:	bf00      	nop
 8016b8c:	cc000000 	.word	0xcc000000
 8016b90:	00000000 	.word	0x00000000
 8016b94:	4c000000 	.word	0x4c000000
 8016b98:	004afb20 	.word	0x004afb20
 8016b9c:	007ffff0 	.word	0x007ffff0
 8016ba0:	3717f7d1 	.word	0x3717f7d1
 8016ba4:	3f317180 	.word	0x3f317180
 8016ba8:	3eaaaaab 	.word	0x3eaaaaab
 8016bac:	3e1cd04f 	.word	0x3e1cd04f
 8016bb0:	3e178897 	.word	0x3e178897
 8016bb4:	ffcf5c30 	.word	0xffcf5c30
 8016bb8:	3e638e29 	.word	0x3e638e29
 8016bbc:	3ecccccd 	.word	0x3ecccccd
 8016bc0:	3e3a3325 	.word	0x3e3a3325
 8016bc4:	3e924925 	.word	0x3e924925
 8016bc8:	3f2aaaab 	.word	0x3f2aaaab

08016bcc <with_errno>:
 8016bcc:	b570      	push	{r4, r5, r6, lr}
 8016bce:	4604      	mov	r4, r0
 8016bd0:	460d      	mov	r5, r1
 8016bd2:	4616      	mov	r6, r2
 8016bd4:	f7fe fa3c 	bl	8015050 <__errno>
 8016bd8:	4629      	mov	r1, r5
 8016bda:	6006      	str	r6, [r0, #0]
 8016bdc:	4620      	mov	r0, r4
 8016bde:	bd70      	pop	{r4, r5, r6, pc}

08016be0 <xflow>:
 8016be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016be2:	4614      	mov	r4, r2
 8016be4:	461d      	mov	r5, r3
 8016be6:	b108      	cbz	r0, 8016bec <xflow+0xc>
 8016be8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016bec:	e9cd 2300 	strd	r2, r3, [sp]
 8016bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	4629      	mov	r1, r5
 8016bf8:	f7e9 fd16 	bl	8000628 <__aeabi_dmul>
 8016bfc:	2222      	movs	r2, #34	; 0x22
 8016bfe:	b003      	add	sp, #12
 8016c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c04:	f7ff bfe2 	b.w	8016bcc <with_errno>

08016c08 <__math_uflow>:
 8016c08:	b508      	push	{r3, lr}
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8016c10:	f7ff ffe6 	bl	8016be0 <xflow>
 8016c14:	ec41 0b10 	vmov	d0, r0, r1
 8016c18:	bd08      	pop	{r3, pc}

08016c1a <__math_oflow>:
 8016c1a:	b508      	push	{r3, lr}
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8016c22:	f7ff ffdd 	bl	8016be0 <xflow>
 8016c26:	ec41 0b10 	vmov	d0, r0, r1
 8016c2a:	bd08      	pop	{r3, pc}

08016c2c <with_errnof>:
 8016c2c:	b513      	push	{r0, r1, r4, lr}
 8016c2e:	4604      	mov	r4, r0
 8016c30:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016c34:	f7fe fa0c 	bl	8015050 <__errno>
 8016c38:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016c3c:	6004      	str	r4, [r0, #0]
 8016c3e:	b002      	add	sp, #8
 8016c40:	bd10      	pop	{r4, pc}

08016c42 <xflowf>:
 8016c42:	b130      	cbz	r0, 8016c52 <xflowf+0x10>
 8016c44:	eef1 7a40 	vneg.f32	s15, s0
 8016c48:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016c4c:	2022      	movs	r0, #34	; 0x22
 8016c4e:	f7ff bfed 	b.w	8016c2c <with_errnof>
 8016c52:	eef0 7a40 	vmov.f32	s15, s0
 8016c56:	e7f7      	b.n	8016c48 <xflowf+0x6>

08016c58 <__math_uflowf>:
 8016c58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016c60 <__math_uflowf+0x8>
 8016c5c:	f7ff bff1 	b.w	8016c42 <xflowf>
 8016c60:	10000000 	.word	0x10000000

08016c64 <__math_oflowf>:
 8016c64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016c6c <__math_oflowf+0x8>
 8016c68:	f7ff bfeb 	b.w	8016c42 <xflowf>
 8016c6c:	70000000 	.word	0x70000000

08016c70 <fabs>:
 8016c70:	ec51 0b10 	vmov	r0, r1, d0
 8016c74:	ee10 2a10 	vmov	r2, s0
 8016c78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016c7c:	ec43 2b10 	vmov	d0, r2, r3
 8016c80:	4770      	bx	lr

08016c82 <finite>:
 8016c82:	b082      	sub	sp, #8
 8016c84:	ed8d 0b00 	vstr	d0, [sp]
 8016c88:	9801      	ldr	r0, [sp, #4]
 8016c8a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016c8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016c92:	0fc0      	lsrs	r0, r0, #31
 8016c94:	b002      	add	sp, #8
 8016c96:	4770      	bx	lr

08016c98 <scalbn>:
 8016c98:	b570      	push	{r4, r5, r6, lr}
 8016c9a:	ec55 4b10 	vmov	r4, r5, d0
 8016c9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016ca2:	4606      	mov	r6, r0
 8016ca4:	462b      	mov	r3, r5
 8016ca6:	b99a      	cbnz	r2, 8016cd0 <scalbn+0x38>
 8016ca8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016cac:	4323      	orrs	r3, r4
 8016cae:	d036      	beq.n	8016d1e <scalbn+0x86>
 8016cb0:	4b39      	ldr	r3, [pc, #228]	; (8016d98 <scalbn+0x100>)
 8016cb2:	4629      	mov	r1, r5
 8016cb4:	ee10 0a10 	vmov	r0, s0
 8016cb8:	2200      	movs	r2, #0
 8016cba:	f7e9 fcb5 	bl	8000628 <__aeabi_dmul>
 8016cbe:	4b37      	ldr	r3, [pc, #220]	; (8016d9c <scalbn+0x104>)
 8016cc0:	429e      	cmp	r6, r3
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	460d      	mov	r5, r1
 8016cc6:	da10      	bge.n	8016cea <scalbn+0x52>
 8016cc8:	a32b      	add	r3, pc, #172	; (adr r3, 8016d78 <scalbn+0xe0>)
 8016cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cce:	e03a      	b.n	8016d46 <scalbn+0xae>
 8016cd0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016cd4:	428a      	cmp	r2, r1
 8016cd6:	d10c      	bne.n	8016cf2 <scalbn+0x5a>
 8016cd8:	ee10 2a10 	vmov	r2, s0
 8016cdc:	4620      	mov	r0, r4
 8016cde:	4629      	mov	r1, r5
 8016ce0:	f7e9 faec 	bl	80002bc <__adddf3>
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	460d      	mov	r5, r1
 8016ce8:	e019      	b.n	8016d1e <scalbn+0x86>
 8016cea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016cee:	460b      	mov	r3, r1
 8016cf0:	3a36      	subs	r2, #54	; 0x36
 8016cf2:	4432      	add	r2, r6
 8016cf4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016cf8:	428a      	cmp	r2, r1
 8016cfa:	dd08      	ble.n	8016d0e <scalbn+0x76>
 8016cfc:	2d00      	cmp	r5, #0
 8016cfe:	a120      	add	r1, pc, #128	; (adr r1, 8016d80 <scalbn+0xe8>)
 8016d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d04:	da1c      	bge.n	8016d40 <scalbn+0xa8>
 8016d06:	a120      	add	r1, pc, #128	; (adr r1, 8016d88 <scalbn+0xf0>)
 8016d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d0c:	e018      	b.n	8016d40 <scalbn+0xa8>
 8016d0e:	2a00      	cmp	r2, #0
 8016d10:	dd08      	ble.n	8016d24 <scalbn+0x8c>
 8016d12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016d16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016d1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016d1e:	ec45 4b10 	vmov	d0, r4, r5
 8016d22:	bd70      	pop	{r4, r5, r6, pc}
 8016d24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016d28:	da19      	bge.n	8016d5e <scalbn+0xc6>
 8016d2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016d2e:	429e      	cmp	r6, r3
 8016d30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8016d34:	dd0a      	ble.n	8016d4c <scalbn+0xb4>
 8016d36:	a112      	add	r1, pc, #72	; (adr r1, 8016d80 <scalbn+0xe8>)
 8016d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d1e2      	bne.n	8016d06 <scalbn+0x6e>
 8016d40:	a30f      	add	r3, pc, #60	; (adr r3, 8016d80 <scalbn+0xe8>)
 8016d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d46:	f7e9 fc6f 	bl	8000628 <__aeabi_dmul>
 8016d4a:	e7cb      	b.n	8016ce4 <scalbn+0x4c>
 8016d4c:	a10a      	add	r1, pc, #40	; (adr r1, 8016d78 <scalbn+0xe0>)
 8016d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d0b8      	beq.n	8016cc8 <scalbn+0x30>
 8016d56:	a10e      	add	r1, pc, #56	; (adr r1, 8016d90 <scalbn+0xf8>)
 8016d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d5c:	e7b4      	b.n	8016cc8 <scalbn+0x30>
 8016d5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016d62:	3236      	adds	r2, #54	; 0x36
 8016d64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016d68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	4b0c      	ldr	r3, [pc, #48]	; (8016da0 <scalbn+0x108>)
 8016d70:	2200      	movs	r2, #0
 8016d72:	e7e8      	b.n	8016d46 <scalbn+0xae>
 8016d74:	f3af 8000 	nop.w
 8016d78:	c2f8f359 	.word	0xc2f8f359
 8016d7c:	01a56e1f 	.word	0x01a56e1f
 8016d80:	8800759c 	.word	0x8800759c
 8016d84:	7e37e43c 	.word	0x7e37e43c
 8016d88:	8800759c 	.word	0x8800759c
 8016d8c:	fe37e43c 	.word	0xfe37e43c
 8016d90:	c2f8f359 	.word	0xc2f8f359
 8016d94:	81a56e1f 	.word	0x81a56e1f
 8016d98:	43500000 	.word	0x43500000
 8016d9c:	ffff3cb0 	.word	0xffff3cb0
 8016da0:	3c900000 	.word	0x3c900000

08016da4 <expm1f>:
 8016da4:	ee10 2a10 	vmov	r2, s0
 8016da8:	497d      	ldr	r1, [pc, #500]	; (8016fa0 <expm1f+0x1fc>)
 8016daa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8016dae:	428b      	cmp	r3, r1
 8016db0:	d921      	bls.n	8016df6 <expm1f+0x52>
 8016db2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016db6:	d902      	bls.n	8016dbe <expm1f+0x1a>
 8016db8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016dbc:	4770      	bx	lr
 8016dbe:	d106      	bne.n	8016dce <expm1f+0x2a>
 8016dc0:	2a00      	cmp	r2, #0
 8016dc2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016dc6:	bfb8      	it	lt
 8016dc8:	eeb0 0a67 	vmovlt.f32	s0, s15
 8016dcc:	4770      	bx	lr
 8016dce:	2a00      	cmp	r2, #0
 8016dd0:	db05      	blt.n	8016dde <expm1f+0x3a>
 8016dd2:	4974      	ldr	r1, [pc, #464]	; (8016fa4 <expm1f+0x200>)
 8016dd4:	428b      	cmp	r3, r1
 8016dd6:	d95c      	bls.n	8016e92 <expm1f+0xee>
 8016dd8:	2000      	movs	r0, #0
 8016dda:	f7ff bf43 	b.w	8016c64 <__math_oflowf>
 8016dde:	eddf 7a72 	vldr	s15, [pc, #456]	; 8016fa8 <expm1f+0x204>
 8016de2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016de6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dee:	d550      	bpl.n	8016e92 <expm1f+0xee>
 8016df0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016df4:	4770      	bx	lr
 8016df6:	496d      	ldr	r1, [pc, #436]	; (8016fac <expm1f+0x208>)
 8016df8:	428b      	cmp	r3, r1
 8016dfa:	d967      	bls.n	8016ecc <expm1f+0x128>
 8016dfc:	496c      	ldr	r1, [pc, #432]	; (8016fb0 <expm1f+0x20c>)
 8016dfe:	428b      	cmp	r3, r1
 8016e00:	d847      	bhi.n	8016e92 <expm1f+0xee>
 8016e02:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8016fb4 <expm1f+0x210>
 8016e06:	2a00      	cmp	r2, #0
 8016e08:	bfa7      	ittee	ge
 8016e0a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8016e0e:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 8016fb8 <expm1f+0x214>
 8016e12:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 8016fbc <expm1f+0x218>
 8016e16:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8016e1a:	bfac      	ite	ge
 8016e1c:	2301      	movge	r3, #1
 8016e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e22:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016e26:	ee37 7a40 	vsub.f32	s14, s14, s0
 8016e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e2e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016e32:	ee20 4a25 	vmul.f32	s8, s0, s11
 8016e36:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8016fc0 <expm1f+0x21c>
 8016e3a:	eddf 6a62 	vldr	s13, [pc, #392]	; 8016fc4 <expm1f+0x220>
 8016e3e:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8016fc8 <expm1f+0x224>
 8016e42:	ee20 7a04 	vmul.f32	s14, s0, s8
 8016e46:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8016e4a:	eee7 6a06 	vfma.f32	s13, s14, s12
 8016e4e:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8016fcc <expm1f+0x228>
 8016e52:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016e56:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016fd0 <expm1f+0x22c>
 8016e5a:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016e5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016e62:	eea6 5a87 	vfma.f32	s10, s13, s14
 8016e66:	eef0 6a46 	vmov.f32	s13, s12
 8016e6a:	eee5 6a07 	vfma.f32	s13, s10, s14
 8016e6e:	eee4 4a66 	vfms.f32	s9, s8, s13
 8016e72:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8016e76:	eea0 4a64 	vfms.f32	s8, s0, s9
 8016e7a:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8016e7e:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8016e82:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016e86:	bb7b      	cbnz	r3, 8016ee8 <expm1f+0x144>
 8016e88:	eef0 7a47 	vmov.f32	s15, s14
 8016e8c:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8016e90:	e025      	b.n	8016ede <expm1f+0x13a>
 8016e92:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8016e96:	2a00      	cmp	r2, #0
 8016e98:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016e9c:	bfb8      	it	lt
 8016e9e:	eef0 7a47 	vmovlt.f32	s15, s14
 8016ea2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8016fd4 <expm1f+0x230>
 8016ea6:	eddf 6a43 	vldr	s13, [pc, #268]	; 8016fb4 <expm1f+0x210>
 8016eaa:	ee40 7a07 	vmla.f32	s15, s0, s14
 8016eae:	eeb0 7a40 	vmov.f32	s14, s0
 8016eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016eb6:	ee17 3a90 	vmov	r3, s15
 8016eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ebe:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016ec2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016fb8 <expm1f+0x214>
 8016ec6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016eca:	e7aa      	b.n	8016e22 <expm1f+0x7e>
 8016ecc:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8016ed0:	d208      	bcs.n	8016ee4 <expm1f+0x140>
 8016ed2:	eddf 7a41 	vldr	s15, [pc, #260]	; 8016fd8 <expm1f+0x234>
 8016ed6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016eda:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8016ede:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016ee2:	4770      	bx	lr
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	e7a2      	b.n	8016e2e <expm1f+0x8a>
 8016ee8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016eec:	1c5a      	adds	r2, r3, #1
 8016eee:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8016ef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ef6:	d106      	bne.n	8016f06 <expm1f+0x162>
 8016ef8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016efc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016f00:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8016f04:	4770      	bx	lr
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	d118      	bne.n	8016f3c <expm1f+0x198>
 8016f0a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8016f0e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f16:	bf5b      	ittet	pl
 8016f18:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8016f1c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8016f20:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8016f24:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8016f28:	bf43      	ittte	mi
 8016f2a:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 8016f2e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8016f32:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8016f36:	eeb0 0a46 	vmovpl.f32	s0, s12
 8016f3a:	4770      	bx	lr
 8016f3c:	1c5a      	adds	r2, r3, #1
 8016f3e:	2a39      	cmp	r2, #57	; 0x39
 8016f40:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8016f44:	d90b      	bls.n	8016f5e <expm1f+0x1ba>
 8016f46:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016f4a:	ee36 0a40 	vsub.f32	s0, s12, s0
 8016f4e:	ee10 3a10 	vmov	r3, s0
 8016f52:	440b      	add	r3, r1
 8016f54:	ee00 3a10 	vmov	s0, r3
 8016f58:	ee30 0a46 	vsub.f32	s0, s0, s12
 8016f5c:	4770      	bx	lr
 8016f5e:	2b16      	cmp	r3, #22
 8016f60:	dc11      	bgt.n	8016f86 <expm1f+0x1e2>
 8016f62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016f66:	fa42 f303 	asr.w	r3, r2, r3
 8016f6a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8016f6e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016f72:	ee07 3a90 	vmov	s15, r3
 8016f76:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016f7a:	ee10 3a10 	vmov	r3, s0
 8016f7e:	440b      	add	r3, r1
 8016f80:	ee00 3a10 	vmov	s0, r3
 8016f84:	4770      	bx	lr
 8016f86:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8016f8a:	05db      	lsls	r3, r3, #23
 8016f8c:	ee07 3a10 	vmov	s14, r3
 8016f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f94:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016f98:	ee37 0a86 	vadd.f32	s0, s15, s12
 8016f9c:	e7ed      	b.n	8016f7a <expm1f+0x1d6>
 8016f9e:	bf00      	nop
 8016fa0:	4195b843 	.word	0x4195b843
 8016fa4:	42b17217 	.word	0x42b17217
 8016fa8:	0da24260 	.word	0x0da24260
 8016fac:	3eb17218 	.word	0x3eb17218
 8016fb0:	3f851591 	.word	0x3f851591
 8016fb4:	3f317180 	.word	0x3f317180
 8016fb8:	3717f7d1 	.word	0x3717f7d1
 8016fbc:	b717f7d1 	.word	0xb717f7d1
 8016fc0:	b457edbb 	.word	0xb457edbb
 8016fc4:	36867e54 	.word	0x36867e54
 8016fc8:	bd088889 	.word	0xbd088889
 8016fcc:	b8a670cd 	.word	0xb8a670cd
 8016fd0:	3ad00d01 	.word	0x3ad00d01
 8016fd4:	3fb8aa3b 	.word	0x3fb8aa3b
 8016fd8:	7149f2ca 	.word	0x7149f2ca

08016fdc <fabsf>:
 8016fdc:	ee10 3a10 	vmov	r3, s0
 8016fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016fe4:	ee00 3a10 	vmov	s0, r3
 8016fe8:	4770      	bx	lr

08016fea <finitef>:
 8016fea:	b082      	sub	sp, #8
 8016fec:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016ff0:	9801      	ldr	r0, [sp, #4]
 8016ff2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016ff6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016ffa:	bfac      	ite	ge
 8016ffc:	2000      	movge	r0, #0
 8016ffe:	2001      	movlt	r0, #1
 8017000:	b002      	add	sp, #8
 8017002:	4770      	bx	lr

08017004 <nanf>:
 8017004:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801700c <nanf+0x8>
 8017008:	4770      	bx	lr
 801700a:	bf00      	nop
 801700c:	7fc00000 	.word	0x7fc00000

08017010 <_init>:
 8017010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017012:	bf00      	nop
 8017014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017016:	bc08      	pop	{r3}
 8017018:	469e      	mov	lr, r3
 801701a:	4770      	bx	lr

0801701c <_fini>:
 801701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801701e:	bf00      	nop
 8017020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017022:	bc08      	pop	{r3}
 8017024:	469e      	mov	lr, r3
 8017026:	4770      	bx	lr
